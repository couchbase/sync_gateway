openapi: 3.0.0
info:
  title: Sync Gateway API
  version: '3.0'
  license:
    name: Business Source License 1.1 (BSL)
    url: 'https://github.com/couchbase/sync_gateway/blob/master/LICENSE'
servers:
  - url: 'http://localhost:4984'
    description: Public API
  - url: 'http://localhost:4985'
    description: Admin API
  - url: 'http://localhost:4986'
    description: Metric API
paths:
  /:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
    head:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
  '/{db}/':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
    post:
      responses:
        '200':
          description: New revision created sucessfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/New-revision'
          headers:
            Etag:
              schema:
                type: string
              description: The revision ID of the newly created document.
            Location:
              schema:
                type: string
              description: The document ID of the newly created document.
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/Invalid-content-type'
      tags:
        - Admin
        - Public
      summary: Create a new document
      description: |-
        Create a new document in the database.

        This will generate a random document ID unless specified in the body.

        A document can have a maximum size of 20MB.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      parameters:
        - $ref: '#/components/parameters/roundtrip'
    delete:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    head:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
  '/{db}/_all_docs':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          $ref: '#/components/responses/all-docs'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      parameters:
        - $ref: '#/components/parameters/include_docs'
        - $ref: '#/components/parameters/Include-channels'
        - $ref: '#/components/parameters/include-access'
        - $ref: '#/components/parameters/include-revs'
        - $ref: '#/components/parameters/include-seqs'
        - $ref: '#/components/parameters/keys'
        - $ref: '#/components/parameters/startkey'
        - $ref: '#/components/parameters/endkey'
        - $ref: '#/components/parameters/limit'
      summary: Gets all the documents in the database with the given parameters
      description: Returns all documents in the databased based on the specified parameters.
    post:
      responses:
        '200':
          $ref: '#/components/responses/all-docs'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Get all the documents in the database using a built-in view
      parameters:
        - $ref: '#/components/parameters/include_docs'
        - $ref: '#/components/parameters/Include-channels'
        - $ref: '#/components/parameters/include-access'
        - $ref: '#/components/parameters/include-revs'
        - $ref: '#/components/parameters/include-seqs'
        - $ref: '#/components/parameters/startkey'
        - $ref: '#/components/parameters/endkey'
        - $ref: '#/components/parameters/limit'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keys:
                  description: List of the documents to retrieve.
                  type: array
                  items:
                    type: string
              required:
                - keys
      description: Get a built-in view of all the documents in the database.
    head:
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      parameters:
        - $ref: '#/components/parameters/include_docs'
        - $ref: '#/components/parameters/Include-channels'
        - $ref: '#/components/parameters/include-access'
        - $ref: '#/components/parameters/include-revs'
        - $ref: '#/components/parameters/include-seqs'
        - $ref: '#/components/parameters/keys'
        - $ref: '#/components/parameters/startkey'
        - $ref: '#/components/parameters/endkey'
        - $ref: '#/components/parameters/limit'
  '/{db}/_bulk_docs':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '201':
          description: |-
            Executed all operations. 

            Each object in the returned array represents a document. Each document should be checked to make sure it was successfully added to the database.
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the document that the operation was performed on.
                    rev:
                      type: string
                      description: The new revision of the document if the operation was a success.
                    error:
                      type: string
                      description: The error type if the operation of the document failed.
                    reason:
                      type: string
                      description: The reason the operation failed.
                    status:
                      type: string
                      description: The HTTP status code for why the operation failed.
                  required:
                    - id
              examples:
                Success:
                  value:
                    - id: FooBar
                      rev: 1-cd809becc169215072fd567eebd8b8de
                    - id: AliceSettings
                      rev: 6-b3e8dcf825b71ccee112f3572ec4323c
                    - id: BobSettings
                      rev: 2-5145e1086bb8d1d71a531e9f6b543c58
                Partial success:
                  value:
                    - error: conflict
                      id: FooBar
                      reason: Document exists
                      status: 409
                    - id: AliceSettings
                      rev: 6-b3e8dcf825b71ccee112f3572ec4323c
                    - error: conflict
                      id: BobSettings
                      reason: Document revision conflict
                      status: 409
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Bulk document operations
      description: |-
        This will allow multiple documented to be created, updated or deleted in bulk.

        To create a new document, simply add the body in an object under `docs`. A doc ID will be generated by Sync Gateway unless `_id` is specified.

        To update an existing document, provide the document ID (`_id`) and revision ID (`_rev`) as well as the new body values.

        To delete an existing document, provide the document ID (`_id`), revision ID (`_rev`), and set the deletion flag (`_deleted`) to true.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_edits:
                  default: true
                  type: boolean
                  description: This controls whether to assign new revision identifiers to new edits (`true`) or use the existing ones (`false`).
                docs:
                  type: array
                  items:
                    $ref: '#/components/schemas/Document'
              required:
                - docs
            examples:
              Example:
                value:
                  new_edits: true
                  docs:
                    - _id: FooBar
                      foo: bar
                    - _id: AliceSettings
                      _rev: 5-832a6db48ed130adadede928aee54576
                      FailedLoginAttempts: 7
                    - _id: BobSettings
                      _rev: 1-fa76ba41ee5fdfee1b91fc478ed09e59
                      _deleted: true
  '/{db}/_bulk_get':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: Returned the requested docs as `multipart/mixed` response type
        '400':
          description: Bad Request
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      parameters:
        - name: attachments
          in: query
          schema:
            type: boolean
            default: 'false'
          description: This is for whether to include attachments in each of the documents returned or not.
        - $ref: '#/components/parameters/include-revs'
        - name: revs_limit
          schema:
            type: integer
          in: query
          description: The number of revisions to include in the response from the document history. This parameter only makes a different if the `revs` query parameter is set to `true`. The full revision history will be returned if `revs` is set but this is not.
        - name: X-Accept-Part-Encoding
          schema:
            type: string
          in: header
          description: If this header includes `gzip` then the part HTTP compression encoding will be done.
        - name: Accept-Encoding
          schema:
            type: string
          in: header
          description: If this header includes `gzip` then the the HTTP response will be compressed. This takes priority over `X-Accept-Part-Encoding`. Only part compression will be done if `X-Accept-Part-Encoding=gzip` and the `User-Agent` is below 1.2 due to clients not being able to handle full compression.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                docs:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID of the document to retrieve.
                    required:
                      - id
              required:
                - docs
            examples:
              Example:
                value:
                  docs:
                    - id: FooBar
                    - id: attachment
                    - id: AliceSettings
      description: |
        This request returns any number of documents, as individual bodies in a MIME multipart response.

        Each enclosed body contains one requested document. The bodies appear in the same order as in the request, but can also be identified by their `X-Doc-ID` and `X-Rev-ID` headers (if the `attachments` query is `true`).

        A body for a document with no attachments will have content type `application/json` and contain the document itself.

        A body for a document that has attachments will be written as a nested `multipart/related` body.
      summary: Get multiple documents in a MIME multipart response
  '/{db}/_changes':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          $ref: '#/components/responses/changes-feed'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Get changes list
      description: |-
        This request retrieves a sorted list of changes made to documents in the database, in time order of application. Each document appears at most once, ordered by its most recent change, regardless of how many times it’s been changed.

        This request can be used to listen for update and modifications to the database for post processing or synchronization. A continuously connected changes feed is a reasonable approach for generating a real-time log for most applications.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Maximum number of changes to return.
        - name: style
          schema:
            type: string
            default: main_only
            enum:
              - main_only
              - all_docs
          in: query
          description: Controls whether to return the current winning revision (`main_only`) or all the leaf revision including conflicts and deleted former conflicts (`all_docs`).
        - name: active_only
          schema:
            type: boolean
            default: 'false'
          in: query
          description: Set true to exclude deleted documents and notifications for documents the user no longer has access to from the changes feed.
        - $ref: '#/components/parameters/include_docs'
        - name: revocations
          schema:
            type: boolean
          in: query
          description: 'If true, revocation messages will be sent on the changes feed.'
        - name: filter
          schema:
            type: string
            enum:
              - sync_gateway/bychannel
              - _doc_ids
          in: query
          description: Set a filter to either filter by channels or document IDs.
        - name: channels
          schema:
            type: string
          in: query
          description: 'A comma-separated list of channel names to filter the response to only the channels specified. To use this option, the `filter` query option must be set to `sync_gateway/bychannels`.'
        - name: doc_ids
          schema:
            type: array
            items:
              type: string
          in: query
          description: 'A valid JSON array of document IDs to filter the documents in the response to only the documents specified. To use this option, the `filter` query option must be set to `_doc_ids` and the `feed` parameter must be `normal`. Also accepts a comma separated list of document IDs instead.'
        - name: heartbeat
          schema:
            type: integer
            default: 0
            minimum: 25000
          in: query
          description: The interval (in milliseconds) to send an empty line (CRLF) in the response. This is to help prevent gateways from deciding the socket is idle and therefore closing it. This is only applicable to `feed=longpoll` or `feed=continuous`. This will override any timeouts to keep the feed alive indefinitely. Setting to 0 results in no heartbeat. The maximum heartbeat can be set in the server replication configuration.
        - name: timeout
          schema:
            type: integer
            default: 300000
            maximum: 900000
            minimum: 0
          in: query
          description: 'This is the maximum period (in milliseconds) to wait for a change before the response is sent, even if there are no results. This is only applicable for `feed=longpoll` or `feed=continuous` changes feeds. Setting to 0 results in no timeout.'
        - name: feed
          schema:
            type: string
            default: normal
            enum:
              - normal
              - longpoll
              - continuous
              - websocket
          in: query
          description: 'The type of changes feed to use. '
    post:
      responses:
        '200':
          $ref: '#/components/responses/changes-feed'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Get changes list
      description: |-
        This request retrieves a sorted list of changes made to documents in the database, in time order of application. Each document appears at most once, ordered by its most recent change, regardless of how many times it’s been changed.

        This request can be used to listen for update and modifications to the database for post processing or synchronization. A continuously connected changes feed is a reasonable approach for generating a real-time log for most applications.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: string
                  description: Maximum number of changes to return.
                style:
                  type: string
                  description: Controls whether to return the current winning revision (`main_only`) or all the leaf revision including conflicts and deleted former conflicts (`all_docs`).
                active_only:
                  type: string
                  description: Set true to exclude deleted documents and notifications for documents the user no longer has access to from the changes feed.
                include_docs:
                  type: string
                  description: Include the body associated with each document.
                revocations:
                  type: string
                  description: 'If true, revocation messages will be sent on the changes feed.'
                filter:
                  type: string
                  description: Set a filter to either filter by channels or document IDs.
                channels:
                  type: string
                  description: 'A comma-separated list of channel names to filter the response to only the channels specified. To use this option, the `filter` query option must be set to `sync_gateway/bychannels`.'
                doc_ids:
                  type: string
                  description: 'A valid JSON array of document IDs to filter the documents in the response to only the documents specified. To use this option, the `filter` query option must be set to `_doc_ids` and the `feed` parameter must be `normal`.'
                heartbeat:
                  type: string
                  description: The interval (in milliseconds) to send an empty line (CRLF) in the response. This is to help prevent gateways from deciding the socket is idle and therefore closing it. This is only applicable to `feed=longpoll` or `feed=continuous`. This will override any timeouts to keep the feed alive indefinitely. Setting to 0 results in no heartbeat. The maximum heartbeat can be set in the server replication configuration.
                timeout:
                  type: string
                  description: 'This is the maximum period (in milliseconds) to wait for a change before the response is sent, even if there are no results. This is only applicable for `feed=longpoll` or `feed=continuous` changes feeds. Setting to 0 results in no timeout.'
                feed:
                  type: string
                  description: 'The type of changes feed to use. '
    head:
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      tags:
        - Admin
        - Public
  '/{db}/_design/{ddoc}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/ddoc'
    get:
      responses:
        '200':
          description: Successfully returned design document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design-doc'
        '403':
          $ref: '#/components/responses/ddoc-forbidden'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Get views of a design document | Unsupported
      description: |-
        Query a design document.

        **This is no longer supported**
    put:
      responses:
        '200':
          description: Design document changes successfully
        '403':
          $ref: '#/components/responses/ddoc-forbidden'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Update views of a design document | Unsupported
      description: |-
        Update the views of a design document.

        **This is no longer supported**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Design-doc'
    delete:
      responses:
        '200':
          description: Design document deleted successfully
        '403':
          $ref: '#/components/responses/ddoc-forbidden'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      description: |-
        Delete a design document.

        **This is no longer supported**
      summary: Delete a design document | Unsupported
    head:
      responses:
        '200':
          description: Design document exists
        '403':
          description: Forbidden access possibly due to not using the Admin API or the design document is a built-in Sync Gateway one.
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      description: |-
        Check if a design document can be queried.

        **This is no longer supported**
      summary: Check if view of design document exists | Unsupported
  '/{db}/_design/{ddoc}/_view/{view}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/ddoc'
      - name: view
        schema:
          type: string
        in: path
        required: true
        description: The view to query on the design document.
    get:
      responses:
        '200':
          description: Returned view successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_rows:
                    type: integer
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        key:
                          type: object
                        value:
                          type: object
                        doc:
                          type: object
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        From:
                          type: string
                        Reason:
                          type: string
                required:
                  - total_rows
                  - rows
        '403':
          description: Forbidden
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      parameters:
        - name: inclusive_end
          schema:
            type: boolean
          in: query
          description: Indicates whether the specified end key should be included in the result.
        - name: descending
          schema:
            type: boolean
          in: query
          description: Return documents in descending order.
        - name: include_docs
          in: query
          schema:
            type: boolean
          description: Only works when using Couchbase Server 3.0 and earlier. Indicates whether to include the full content of the documents in the response.
        - name: reduce
          schema:
            type: boolean
          in: query
          description: Whether to execute a reduce function on the response or not.
        - name: group
          schema:
            type: boolean
          in: query
          description: Group the results using the reduce function to a group or single row.
        - name: skip
          schema:
            type: integer
          in: query
          description: Skip the specified number of documents before starting to return results.
        - name: limit
          in: query
          schema:
            type: integer
          description: Return only the specified number of documents
        - name: group_level
          schema:
            type: integer
          in: query
          description: Specify the group level to be used.
        - name: startkey_docid
          schema:
            type: string
          in: query
          description: Return documents starting with the specified document identifier.
        - name: endkey_docid
          schema:
            type: string
          in: query
          description: Stop returning records when the specified document identifier is reached.
        - name: stale
          schema:
            type: string
            enum:
              - ok
              - update_after
          in: query
          description: 'Allow the results from a stale view to be used, without triggering a rebuild of all views within the encompassing design document.'
        - $ref: '#/components/parameters/startkey'
        - $ref: '#/components/parameters/endkey'
        - name: key
          schema:
            type: string
          in: query
          description: Return only the document that matches the specified key.
        - $ref: '#/components/parameters/keys'
      description: |-
        Query a view on a design document.

        **This is no longer supported**
      summary: Query a view on a design document
  '/{db}/_ensure_full_commit':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
  '/{db}/_revs_diff':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
  '/{db}/_local/{docid}':
    parameters:
      - name: db
        in: path
        required: true
        schema:
          type: string
        description: The name of the database to run the operation against.
      - schema:
          type: string
        name: docid
        in: path
        required: true
        description: The name of the local document ID excluding the `_local/` prefix.
    get:
      responses:
        '200':
          description: Successfully found local document
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      description: |-
        This request retrieves a local document. 

        Local document IDs begin with `_local/`. Local documents are not replicated or indexed, don’t support attachments, and don’t save revision histories. In practice they are almost only used by Couchbase Lite’s replicator, as a place to store replication checkpoint data.
      summary: Get local document
    put:
      responses:
        '201':
          description: Document successfully upserted. The document ID will be prefixed with `_local/`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/New-revision'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          description: A revision ID conflict would result from updating this document revision.
      tags:
        - Admin
        - Public
      description: |-
        This request creates or updates a local document. Updating a local document requires that the revision ID be put in the body under `_rev`.

        Local document IDs are given a `_local/` prefix. Local documents are not replicated or indexed, don’t support attachments, and don’t save revision histories. In practice they are almost only used by the client’s replicator, as a place to store replication checkpoint data.
      summary: Upsert a local document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                _rev:
                  type: string
                  description: Revision to replace. Required if updating existing local document.
        description: The body of the document
    delete:
      responses:
        '200':
          description: Successfully removed the local document.
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          description: A revision ID conflict would result from deleting this document revision.
      tags:
        - Admin
        - Public
      description: |-
        This request deletes a local document.

        Local document IDs begin with `_local/`. Local documents are not replicated or indexed, don’t support attachments, and don’t save revision histories. In practice they are almost only used by Couchbase Lite’s replicator, as a place to store replication checkpoint data.
      parameters:
        - schema:
            type: string
          in: query
          name: rev
          description: The revision ID of the revision to delete.
          required: true
    head:
      summary: Check if local document exists
      responses:
        '200':
          description: Document exists
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      description: |-
        This request checks if a local document exists. 

        Local document IDs begin with `_local/`. Local documents are not replicated or indexed, don’t support attachments, and don’t save revision histories. In practice they are almost only used by Couchbase Lite’s replicator, as a place to store replication checkpoint data.
  '/{db}/{docid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/docid'
    get:
      responses:
        '200':
          description: Document found and returned successfully
          headers:
            Etag:
              schema:
                type: string
              description: The document revision ID if only returning 1 revision.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the document.
                  _rev:
                    type: string
                    description: The revision ID of the document.
              examples:
                Example with no optional fields filled:
                  value:
                    FailedLoginAttempts: 5
                    Friends:
                      - Bob
                    _id: AliceSettings
                    _rev: 1-64d4a1f179db5c1848fe52967b47c166
        '400':
          $ref: '#/components/responses/invalid-doc-id'
        '404':
          $ref: '#/components/responses/Not-found'
        '501':
          description: Not Implemented. It is likely this error was caused due to trying to use an enterprise-only feature on the community edition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP-Error'
      tags:
        - Admin
        - Public
      summary: Get a document
      parameters:
        - $ref: '#/components/parameters/rev'
        - $ref: '#/components/parameters/open_revs'
        - $ref: '#/components/parameters/show_exp'
        - $ref: '#/components/parameters/revs_from'
        - $ref: '#/components/parameters/atts_since'
        - $ref: '#/components/parameters/revs_limit'
        - $ref: '#/components/parameters/includeAttachments'
        - $ref: '#/components/parameters/replicator2'
      description: Retrieve a document from the database by it's doc ID.
    put:
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/New-revision'
          headers:
            Etag:
              schema:
                type: string
              description: The revision of the upserted document. Not set if query option `new_edits` is true.
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/Invalid-content-type'
      tags:
        - Admin
        - Public
      description: |-
        This will upsert a document meaning if it does not exist, then it will be created. Otherwise a new revision will be made for the existing document. A revision ID must be provided if targetting an existing document.

        A document ID must be specified for this endpoint. To let Sync Gateway generate the ID, use the `POST /{db}/` endpoint. 

        If a document does exist, then replace the document content with the request body. This means unspecified fields will be removed in the new revision.

        The maximum size for a document is 20MB.
      parameters:
        - $ref: '#/components/parameters/roundtrip'
        - $ref: '#/components/parameters/replicator2'
        - $ref: '#/components/parameters/new_edits'
        - $ref: '#/components/parameters/rev'
        - $ref: '#/components/parameters/If-Match'
      summary: Upsert a document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
    delete:
      responses:
        '200':
          $ref: '#/components/responses/New-revision'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Delete a document
      description: |-
        Delete a document from the database. A new revision is created so the database can track the deletion in synchronized copies.

        A revision ID either in the header or on the query parameters is required.
      parameters:
        - $ref: '#/components/parameters/rev'
        - $ref: '#/components/parameters/If-Match'
    head:
      responses:
        '200':
          description: Document exists
        '400':
          $ref: '#/components/responses/invalid-doc-id'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Check if a document exists
      parameters:
        - $ref: '#/components/parameters/rev'
        - $ref: '#/components/parameters/open_revs'
        - $ref: '#/components/parameters/show_exp'
        - $ref: '#/components/parameters/revs_from'
        - $ref: '#/components/parameters/atts_since'
        - $ref: '#/components/parameters/revs_limit'
        - $ref: '#/components/parameters/includeAttachments'
        - $ref: '#/components/parameters/replicator2'
      description: Return a status code based on if the document exists or not.
  '/{db}/{docid}/{attach}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/docid'
      - name: attach
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
    head:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Public
  '/{db}/_session':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          $ref: '#/components/responses/User-session-information'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Get information about the current user
      description: This will get the information about the current user.
    post:
      responses:
        '200':
          description: Session created successfully. Returned body is dependant on if using Public or Admin APIs
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: '**Admin API only**: The ID of the session. This is the value that would be put in to the cookie to keep the user authenticated.'
                  expires:
                    type: string
                    description: '**Admin API only**: The date and time the cookie expires.'
                  cookie_name:
                    type: string
                    description: '**Admin API only**: The name of the cookie that would be used to store the users session.'
              examples:
                Admin API response:
                  value:
                    session_id: c5af80a039db4ed9d2b6865576b6999935282689
                    expires: '2022-01-21T15:24:44Z'
                    cookie_name: SyncGatewaySession
                Public API response:
                  value:
                    authentication_handlers:
                      - default
                      - cookie
                    ok: true
                    userCtx:
                      channels:
                        '!': 1
                      name: Bob
        '400':
          $ref: '#/components/responses/Invalid-CORS'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: Create a new user session
      description: |-
        # Admin API
        Generates a login session for a user and returns the session ID and cookie name for that session. If no TTL is provided, then the default of 24 hours will be used.

        A session cannot be generated for an non-existent user or the `GUEST` user.

        # Public API
        Generates a login session for the user based on the credentials provided in the request body or if that fails (due to invalid credentials or none provided at all), generates the new session for the currently authenticated user instead. On a successful session creation, a session cookie is stored to keep the user authenticated for future API calls.

        If CORS is enabled, the origin must match an allowed login origin otherwise an error will be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User name to generate the session for.
                ttl:
                  type: integer
                  description: '**Admin API only**: Time until the session expires. Uses default value of 24 hours if left blank.'
                password:
                  type: string
                  description: '**Public API only**: Password of the user to generate the session for.'
        description: The body can depend on if using the Public or Admin APIs.
    delete:
      responses:
        '200':
          description: Successfully removed session (logged out)
        '400':
          description: Bad Request
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Public
      description: |-
        Invalidates the session for the currently authenticated user and removes their session cookie.

        If CORS is enabled, the origin must match an allowed login origin otherwise an error will be returned.
      summary: Log out
    head:
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
  '/{db}/_facebook':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      deprecated: true
      responses:
        '200':
          description: Session created successfully
        '400':
          $ref: '#/components/responses/Invalid-CORS'
        '401':
          description: Recieved error from Facebook verifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
        '404':
          $ref: '#/components/responses/Not-found'
        '502':
          description: Recieved invalid response from the Facebook verifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
        '504':
          description: Unable to send request to Facebook API
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
      tags:
        - Admin
        - Public
      summary: Create a new Facebook-based session
      description: |-
        Creates a new session based on a Facebook user. On a successful session creation, a session cookie is stored to keep the user authenticated for future API calls.

        If CORS is enabled, the origin must match an allowed login origin otherwise an error will be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: Facebook access token to base the new session on.
              required:
                - access_token
  '/{db}/_google':
    parameters:
      - name: db
        in: path
        required: true
        schema:
          type: string
        description: The name of the database to run the operation against.
    post:
      deprecated: true
      responses:
        '200':
          description: Session created successfully
        '400':
          $ref: '#/components/responses/Invalid-CORS'
        '401':
          description: Recieved error from Google token verifier or invalid application ID in the config
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
        '404':
          $ref: '#/components/responses/Not-found'
        '502':
          description: Recieved invalid response from the Google token verifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
        '504':
          description: Unable to send request to the Google token verifier
      tags:
        - Admin
        - Public
      summary: Create a new Google-based session
      description: |-
        Creates a new session based on a Google user. On a successful session creation, a session cookie is stored to keep the user authenticated for future API calls.

        If CORS is enabled, the origin must match an allowed login origin otherwise an error will be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id_token:
                  type: string
                  description: Google ID token to base the new session on.
              required:
                - id_token
  '/{db}/_oidc':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '302':
          description: Successfully connected with the OpenID Connect provider so now redirecting to the requested OIDC provider for authentication.
          headers:
            Location:
              schema:
                type: string
              description: The link to redirect to so the client can authenticate.
        '400':
          $ref: '#/components/responses/OIDC-invalid-provider'
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          $ref: '#/components/responses/OIDC-connection'
      tags:
        - Admin
        - Public
      summary: OpenID Connect authentication initiation via Location header redirect
      description: 'Called by clients to initiate the OpenID Connect Authorization Code Flow. Redirects to the OpenID Connect provider if successful. '
      parameters:
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/offline'
  '/{db}/_oidc_challenge':
    parameters:
      - name: db
        in: path
        required: true
        schema:
          type: string
        description: The name of the database to run the operation against.
    get:
      responses:
        '400':
          description: 'The provider provided is not defined in the Sync Gateway config. If no provided was specified then there is no default provider set. '
        '401':
          description: Successfully connected with the OpenID Connect provider so now the client can login.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: The OpenID Connect authentication URL.
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          description: Unable to connect and validate with the OpenID Connect provider requested
      tags:
        - Admin
        - Public
      summary: OpenID Connect authentication initiation via WWW-Authenticate header
      description: 'Called by clients to initiate the OpenID Connect Authorization Code Flow. This will establish a connection with the provider, then put the redirect URL in the `WWW-Authenticate` header.'
      parameters:
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/offline'
  '/{db}/_oidc_callback':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          $ref: '#/components/responses/OIDC-callback'
        '400':
          description: A problem occurred when reading the callback request body
        '401':
          description: An error was receieved from the OpenID Connect provider. This means the error query parameter was filled.
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          description: A problem occurred in regards to the token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
      tags:
        - Admin
        - Public
      summary: OpenID Connect authentication callback
      parameters:
        - name: error
          schema:
            type: string
          in: query
          description: 'The OpenID Connect error, if any occurred.'
        - $ref: '#/components/parameters/oidc-code'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/oidc-state'
      description: The callback URL that the client is redirected to after authenticating with the OpenID Connect provider.
  '/{db}/_oidc_refresh':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          $ref: '#/components/responses/OIDC-callback'
        '400':
          $ref: '#/components/responses/OIDC-invalid-provider'
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          $ref: '#/components/responses/OIDC-connection'
      tags:
        - Admin
        - Public
      summary: OpenID Connect token refresh
      parameters:
        - name: refresh_token
          schema:
            type: string
          in: query
          description: The OpenID Connect refresh token.
          required: true
        - $ref: '#/components/parameters/provider'
      description: Refresh the OpenID Connect token based on the provided refresh token.
  '/{db}/_oidc_testing/.well-known/openid-configuration':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: 'Sucessfully generated OpenID Connect provider mock response. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                  authorization_endpoint:
                    type: string
                  token_endpoint:
                    type: string
                  jwks_uri:
                    type: string
                  userinfo_endpoint:
                    type: string
                  id_token_signing_alg_values_supported:
                    type: string
                  response_types_supported:
                    type: string
                  subject_types_supported:
                    type: string
                  scopes_supported:
                    type: string
                  claims_supported:
                    type: string
                  token_endpoint_auth_methods_supported:
                    type: string
          headers:
            Expiry:
              schema:
                type: string
              description: the time until the response expires.
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: OpenID Connect mock provider
      description: |-
        Mock an OpenID Connect provider response for testing purposes. This returns a response that is the same structure as what Sync Gateway expects from an OIDC provider after initiating OIDC authentication.
  '/{db}/_oidc_testing/authorize':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/OIDC-invalid-scope'
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          $ref: '#/components/responses/OIDC-testing-internal-error'
      tags:
        - Admin
        - Public
      summary: OpenID Connect mock login page
      description: |-
        Show a mock OpenID Connect login page for the client to log in to.
      parameters:
        - $ref: '#/components/parameters/oidc-scope'
    post:
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/OIDC-invalid-scope'
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          $ref: '#/components/responses/OIDC-testing-internal-error'
      tags:
        - Admin
        - Public
      summary: OpenID Connect mock login page
      description: |-
        Show a mock OpenID Connect login page for the client to log in to.
      parameters:
        - $ref: '#/components/parameters/oidc-scope'
  '/{db}/_oidc_testing/token':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          $ref: '#/components/responses/OIDC-token'
        '400':
          description: Invalid token provided
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      summary: OpenID Connect mock token
      description: |-
        Return a mock OpenID Connect token for the OIDC authentication flow.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: The grant type of the token to request. Can either be an `authorization_code` or `refresh_token`.
                code:
                  type: string
                  description: '**`grant_type=authorization_code` only**: The OpenID Connect authentication token.'
                refresh_token:
                  type: string
                  description: '**`grant_type=refresh_token` only**: The OpenID Connect refresh token.'
              required:
                - grant_type
        description: ''
  '/{db}/_oidc_testing/certs':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: Returned public key sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        Key:
                          type: object
                        KeyID:
                          type: string
                        Use:
                          type: string
                        Certificates:
                          type: array
                          items:
                            type: object
                        Algorithm:
                          type: string
                      required:
                        - Key
                        - KeyID
                        - Use
                required:
                  - keys
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
        '500':
          description: An error occurred while getting the private RSA key
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  reason:
                    type: string
      tags:
        - Admin
        - Public
      summary: OpenID Connect public certificates for signing keys
      description: |-
        Return a mock OpenID Connect public key to be used as signing keys.
  '/{db}/_oidc_testing/authenticate':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '302':
          $ref: '#/components/responses/OIDC-testing-redirect'
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      parameters:
        - $ref: '#/components/parameters/oidc-redirect_uri'
        - $ref: '#/components/parameters/oidc-scope'
        - name: username
          in: query
          schema:
            type: string
          required: true
        - name: tokenttl
          in: query
          schema:
            type: integer
          required: true
        - name: identity-token-formats
          in: query
          schema:
            type: string
          required: true
        - name: authenticated
          in: query
          schema:
            type: string
          required: true
      description: |-
        Used to handle the login page displayed for the `GET /{db}/_oidc_testing/authorize` endpoint.
      summary: OpenID Connect mock login page handler
    post:
      responses:
        '302':
          $ref: '#/components/responses/OIDC-testing-redirect'
        '403':
          $ref: '#/components/responses/OIDC-test-provider-disabled'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
        - Public
      description: |-
        Used to handle the login page displayed for the `GET /{db}/_oidc_testing/authorize` endpoint.
      parameters:
        - $ref: '#/components/parameters/oidc-redirect_uri'
        - $ref: '#/components/parameters/oidc-scope'
      summary: OpenID Connect mock login page handler
      requestBody:
        $ref: '#/components/requestBodies/OIDC-login-page-handler'
  '/{db}/_blipsync':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '101':
          description: Upgraded to a web socket connection
        '404':
          $ref: '#/components/responses/Not-found'
        '426':
          description: Cannot upgrade connection to a web socket connection
      tags:
        - Admin
        - Public
      summary: Handle incoming BLIP Sync web socket request
      description: This handles incoming BLIP Sync requests from either Couchbase Lite or another Sync Gateway node. The connection has to be upgradable to a websocket connection or else the request will fail.
      parameters:
        - name: client
          schema:
            type: string
            default: cbl2
            enum:
              - cbl2
              - sgr2
          in: query
          description: This is the client type that is making the BLIP Sync request. Used to control client-type specific replication behaviour.
  '/{targetdb}/':
    parameters:
      - name: targetdb
        schema:
          type: string
        in: path
        required: true
    put:
      responses:
        '200':
          description: OK
      tags:
        - Public
  '/{db}/_session/{sessionid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: sessionid
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          $ref: '#/components/responses/User-session-information'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get session information
      description: Retrieve session information such as the user the session belongs too and what channels that user can access.
    delete:
      responses:
        '200':
          description: Successfully removed the user session
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Remove session
      description: Invalidates the session provided so that anyone using it is logged out and is prevented from future use.
  '/{db}/_raw/{docid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/docid'
    get:
      responses:
        '200':
          description: Document found sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _sync:
                    type: object
                    properties:
                      rev:
                        type: string
                        description: The current document revision ID.
                      sequence:
                        type: number
                        description: The most recent sequence number of the document.
                      recent_sequences:
                        type: array
                        description: The previous sequence numbers of the document.
                        items:
                          type: number
                      history:
                        type: object
                        properties:
                          revs:
                            type: array
                            description: The past revision IDs.
                            items:
                              type: string
                          parents:
                            type: array
                            items:
                              type: number
                          channels:
                            description: The past channel history. Can contain string arrays, strings, or be null depending on if and how the channels where set. 
                            type: array
                            items:
                              type: array
                              items:
                                type: string
                              nullable: true
                      cas:
                        type: string
                        description: The document CAS (Concurrent Document Mutations) number used for document locking.
                      value_crc32c:
                        type: string
                        description: The documents CRC32 number.
                      channel_set:
                        type: array
                        description: The channels the document has been in.
                        nullable: true
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the channel.
                            start:
                              type: string
                              description: The sequence number that document was added to the channel.
                            end:
                              type: string
                              description: The sequence number the document was removed from the channel. Omitted if not removed.
                      channel_set_history:
                        type: array
                        nullable: true
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            start:
                              type: string
                            end:
                              type: string
                      time_saved:
                        type: string
                        description: The time and date the document was most recently changed.
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get a document with the corresponding metadata
      description: |-
        Returns the a documents latest revision with it's metadata.

        Note: The direct use of this endpoint is unsupported. The sync metadata is maintained internally by Sync Gateway and its structure can change. It should not be used to drive business logic of applications since the response to the `/{db}/_raw/{id}` endpoint can change at any time.
      parameters:
        - $ref: '#/components/parameters/include_doc'
        - schema:
            type: boolean
          in: query
          name: redact
          description: This redacts sensitive parts of the sync data. Cannot be used when `include_docs=true`
    head:
      responses:
        '200':
          description: Document exists
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
  '/{db}/_revtree/{docid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/docid'
    get:
      responses:
        '200':
          description: Found document
          content:
            application/json:
              schema:
                type: string
              examples:
                Example:
                  value: 'digraph graphname{"1-d4d949b7feafc8c31215684baa45b6cd" -> "2-4f3f24143ea43d85a9a340ac016fdfc4"; }'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Revision tree structure in Graphviz Dot format | Unsupported
      description: |-
        This returns the Dot syntax of the revision tree for the document so that it can be rendered in to a PNG image using the [Graphviz CLI tool](http://www.graphviz.org/).

        To use:
        1. Install the Graphviz tool. Using Brew, this can be done by calling `brew install graphviz`.
        2. Save the response text from this endpoint to a file (for example, `revtree.dot`).
        3. Render the PNG by calling `dot -Tpng revtree.dot > revtree.png`.


        **Note: This endpoint is useful for debugging purposes only. It is not officially supported.**
  '/{db}/_user/':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                description: List of all user names
                items:
                  type: string
              examples:
                Example:
                  value:
                    - Alice
                    - Bob
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get all the names of the users
      description: Retrieves all the names of the users that are in the database.
    post:
      responses:
        '201':
          description: New user created successfully
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          $ref: '#/components/responses/Conflict'
      tags:
        - Admin
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/User'
      description: Create a new user using the request body to specify the properties on the user.
    head:
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
  '/{db}/_user/{name}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/user-name'
    get:
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get a user
      description: Retrieve a single users information.
    put:
      responses:
        '200':
          description: Existing user modified successfully
        '201':
          description: New user created
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      description: 'If the user does not exist, create a new user otherwise update the existing user.'
      summary: Upsert a user
      requestBody:
        $ref: '#/components/requestBodies/User'
    delete:
      responses:
        '200':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      description: Delete a user from the database.
      summary: Delete a user
    head:
      responses:
        '200':
          description: User exists
        '404':
          description: Not Found
      tags:
        - Admin
      summary: Check if user exists
      description: Check if the user exists by checking the status code.
  '/{db}/_user/{name}/_session':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: name
        schema:
          type: string
        in: path
        required: true
    delete:
      responses:
        '200':
          description: User now has no sessions
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Remove all of a users sessions
      description: |-
        Invalidates all the sessions that a user has.

        Will still return a `200` status code if the user has no sessions.
  '/{db}/_user/{name}/_session/{sessionid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: name
        schema:
          type: string
        in: path
        required: true
      - name: sessionid
        schema:
          type: string
        in: path
        required: true
    delete:
      responses:
        '200':
          description: Session has been sucessfully removed as the user was associated with the session
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Remove session with user validation
      description: Invalidates the session only if it belongs to the user.
  '/{db}/_role/':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                uniqueItems: true
                description: List of all role names
                items:
                  type: string
              examples:
                Example:
                  value:
                    - Administrator
                    - Moderator
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get all names of the roles
      description: Retrieves all the roles that are in the database.
    post:
      responses:
        '201':
          description: New role created successfully
        '404':
          $ref: '#/components/responses/Not-found'
        '409':
          $ref: '#/components/responses/Conflict'
      tags:
        - Admin
      summary: Create a new role
      description: Create a new role using the request body to specify the properties on the role.
      requestBody:
        $ref: '#/components/requestBodies/Role'
    head:
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
  '/{db}/_role/{name}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/role-name'
    get:
      responses:
        '200':
          $ref: '#/components/responses/Role'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get a role
      description: Retrieve a single roles properties.
    put:
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Upsert a role
      description: 'If the role does not exist, create a new role otherwise update the existing role.'
      requestBody:
        $ref: '#/components/requestBodies/Role'
    delete:
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      description: Delete a role from the database.
      summary: Delete a role
    head:
      responses:
        '200':
          description: Role exists
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      description: Check if the role exists by checking the status code.
      summary: Check if role exists
  '/{db}/_replication/':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: |-
            Retrieved replication configurations successfully.
            The `assigned_node` fields will end with `(local)` or `(non-local)` depending on if the replication is running on this Sync Gateway node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All-replications'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get all replication configurations
      description: |-
        This will retrieve all database replication definitions.
    post:
      responses:
        '200':
          $ref: '#/components/responses/Replicator-updated'
        '201':
          $ref: '#/components/responses/Replicator-created'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Upsert a replication
      description: |-
        Create or update a replication in the database.

        If an existing replication is being updated, that replication must be stopped first.
      requestBody:
        $ref: '#/components/requestBodies/Replication-upsert'
    head:
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      tags:
        - Admin
  '/{db}/_replication/{replicationid}':
    parameters:
      - $ref: '#/components/parameters/db'
      - $ref: '#/components/parameters/replicationid'
    get:
      responses:
        '200':
          description: Successfully retrieved the replication configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retrieved-replication'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Get a replication configuration
      description: Retrieve a replication configuration from the database.
    put:
      responses:
        '200':
          $ref: '#/components/responses/Replicator-updated'
        '201':
          $ref: '#/components/responses/Replicator-created'
        '400':
          description: Bad Request. Likely to be the replication ID in the URI and request body do not match or the existing replication to update has not been stopped.
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Upsert a replication
      description: |-
        Create or update a replication in the database.

        The replication ID does **not** need to be set in the request body.

        If an existing replication is being updated, that replication must be stopped first and, if the `replication_id` is specified in the request body, it must match the replication ID in the URI.
      requestBody:
        $ref: '#/components/requestBodies/Replication-upsert'
    delete:
      responses:
        '200':
          description: Replication successfully deleted
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Stop and delete a replication
      description: This will delete a replication causing it to stop and no longer exist.
    head:
      responses:
        '200':
          description: Replication exists
        '404':
          description: Replication does not exist
      tags:
        - Admin
      summary: Check if a replication exists
      description: Check if a replication exists.
  /_replicationStatus/:
    get:
      responses:
        '200':
          description: Successfully retrieved all replication statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replication-status'
        '400':
          $ref: '#/components/responses/request-problem'
      tags:
        - Admin
      summary: Get all replication statuses
      description: Retrieve all the replication statuses in the Sync Gateway node.
      parameters:
        - $ref: '#/components/parameters/replication-active-only'
        - $ref: '#/components/parameters/replication-local-only'
        - $ref: '#/components/parameters/replication-include-error'
        - $ref: '#/components/parameters/replication-include-config'
    head:
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      tags:
        - Admin
  '/_replicationStatus/{replicationid}':
    parameters:
      - $ref: '#/components/parameters/replicationid'
    get:
      responses:
        '200':
          description: Successfully retrieved replication status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication-status'
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          description: Could not find replication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP-Error'
      tags:
        - Admin
      summary: Get replication status
      description: Retrieve the status of a replication.
      parameters:
        - $ref: '#/components/parameters/replication-active-only'
        - $ref: '#/components/parameters/replication-local-only'
        - $ref: '#/components/parameters/replication-include-error'
        - $ref: '#/components/parameters/replication-include-config'
    put:
      responses:
        '200':
          description: Successfully changed target state of replicator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication-status'
        '400':
          description: Bad Request. Likely the action specified was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP-Error'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      description: |-
        Change the replication state to target. 

        This is done through the action query parameter, which has 3 valid values:
        * `start` - starts a stopped replication
        * `stop` - stops an active replication
        * `reset` - resets the replication checkpoint to 0. For bidirectional replication, both push and pull checkpoints are reset to 0. The replication must be stopped to use this.
      summary: Modify a replication status
      parameters:
        - name: action
          schema:
            type: string
            enum:
              - start
              - stop
              - reset
          in: query
          description: The target state to put the replicator into.
          required: true
    head:
      responses:
        '200':
          description: Replication exists
        '400':
          $ref: '#/components/responses/request-problem'
        '404':
          $ref: '#/components/responses/Not-found'
      tags:
        - Admin
      summary: Check if replication exists
      parameters:
        - $ref: '#/components/parameters/replication-active-only'
        - $ref: '#/components/parameters/replication-local-only'
        - $ref: '#/components/parameters/replication-include-error'
        - $ref: '#/components/parameters/replication-include-config'
      description: Check if a replication exists
  /_logging:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/_profile/{profilename}':
    parameters:
      - name: profilename
        schema:
          type: string
        in: path
        required: true
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_profile:
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_heap:
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_stats:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_config:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_status:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_sgcollect_info:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    delete:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/goroutine:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/cmdline:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/symbol:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/heap:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/profile:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/block:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/threadcreate:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/mutex:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/pprof/trace:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_debug/fgprof:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_post_upgrade:
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_config':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_config/sync':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    delete:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_config/import_filter':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    put:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    delete:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_resync':
    parameters:
      - $ref: '#/components/parameters/db'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_purge':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: 'Attempted documents purge. Check output to verify the documents that were purged. The document IDs will not be listed if they have not been purged (for example, due to no existing).'
          content:
            application/json:
              schema:
                type: object
                properties:
                  purged:
                    type: object
                    properties:
                      doc_id:
                        type: array
                        items:
                          type: string
                required:
                  - purged
              examples:
                Example:
                  value:
                    purged:
                      doc_id:
                        - '*'
                Multiple purges example:
                  value:
                    purged:
                      doc_id_1:
                        - '*'
                      doc_id_2:
                        - '*'
        '400':
          description: 'Bad request. This could be due to the documents listed in the request body not having the `["*"]` value for each document ID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP-Error'
      tags:
        - Admin
      description: |-
        The purge command provides a way to remove a document from the bucket itself. The operation removes all the revisions (active and tombstones) for the specified document(s). A common usage of this endpoint is to remove tombstone documents that are no longer needed, thus recovering storage space and reducing data replicated to clients. Other clients are not notified when a revision has been purged; so in order to purge a revision from the system it must be done from all databases (on Couchbase Lite and Sync Gateway).

        When convergence is enabled, this endpoint removes the document and its associated extended attributes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                doc_id:
                  type: array
                  description: |-
                    The document ID to purge. The array must only be 1 element which is `*`.

                    All revisions will be permanently removed for that document.
                  items:
                    type: string
                    enum:
                      - '*'
            examples:
              Example:
                value:
                  doc_id:
                    - '*'
              Multiple purges example:
                value:
                  doc_id_1:
                    - '*'
                  doc_id_2:
                    - '*'
        description: Purge request body
  '/{db}/_flush':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_online':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_offline':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_dump/{view}':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: view
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_view/{view}':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: view
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_dumpchannel/{channel}':
    parameters:
      - $ref: '#/components/parameters/db'
      - name: channel
        schema:
          type: string
        in: path
        required: true
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_repair':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{newdb}/':
    parameters:
      - $ref: '#/components/parameters/newdb'
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_all_dbs:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    head:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  '/{db}/_compact':
    parameters:
      - $ref: '#/components/parameters/db'
    post:
      responses:
        '200':
          description: OK
      tags:
        - Admin
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
  /_metrics:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Metric
  /_expvar:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Admin
        - Metric
components:
  parameters:
    db:
      name: db
      in: path
      required: true
      schema:
        type: string
      description: The name of the database to run the operation against.
    newdb:
      name: newdb
      in: path
      required: true
      schema:
        type: string
      description: The name of the new database.
    docid:
      name: docid
      in: path
      required: true
      schema:
        type: string
      description: The document ID to run the operation against.
    user-name:
      name: name
      in: path
      required: true
      schema:
        type: string
      description: The name of the user.
    role-name:
      name: name
      in: path
      required: true
      schema:
        type: string
      description: The name of the role.
    include_docs:
      name: include_docs
      in: query
      required: false
      schema:
        type: string
      description: Include the body associated with each document.
    Include-channels:
      name: channels
      in: query
      required: false
      schema:
        type: string
      description: Include the channels each document is part of that the calling user also has access too.
    include-access:
      name: access
      in: query
      required: false
      schema:
        type: string
      description: Include what user/roles that each document grants access too.
    include-revs:
      name: revs
      in: query
      required: false
      schema:
        type: string
      description: Include all the revisions for each document under the `_revisions` property.
    include-seqs:
      name: update_seq
      in: query
      required: false
      schema:
        type: string
      description: Include the document sequence number `update_seq` property for each document.
    keys:
      name: keys
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
      description: An array of document ID strings to filter by.
    provider:
      name: provider
      in: query
      required: false
      schema:
        type: string
      description: 'The OpenID Connect provider to use for authentication.  The list of providers are defined in the Sync Gateway config. If left empty, the default provider will be used.'
    offline:
      name: offline
      in: query
      required: false
      schema:
        type: string
      description: 'If true, the OpenID Connect provider is requested to confirm with the user the permissions requested and refresh the OIDC token. To do this, access_type=offline and prompt=consent is set on the redirection link.'
    oidc-code:
      name: code
      in: query
      required: true
      schema:
        type: string
      description: The OpenID Connect authentication code.
    oidc-state:
      name: state
      in: query
      required: false
      schema:
        type: string
      description: The OpenID Connect state to verify against the state cookie. This is used to prevent cross-site request forgery (CSRF). This is not required if `disable_callback_state=true` for the provider config (NOT recommended).
    oidc-scope:
      name: scope
      in: query
      required: true
      schema:
        type: string
      description: The OpenID Connect authentication scope.
    oidc-redirect_uri:
      name: redirect_uri
      in: query
      required: false
      schema:
        type: string
      description: The Sync Gateway OpenID Connect callback URL.
    rev:
      name: rev
      in: query
      required: false
      schema:
        type: string
      description: The document revision to target.
    show_exp:
      name: show_exp
      in: query
      required: false
      schema:
        type: string
      description: Whether to show the expiry property (`_exp`) in the response.
    revs_from:
      name: revs_from
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
      description: 'Trim the revision history to stop at the first revision in the provided list. If no match is found, the revisions will be trimmed to the `revs_limit`.'
    atts_since:
      name: atts_since
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
      description: Include attachments only since specified revisions. Excludes the attachments for the specified revisions. Only gets used if `attachments=true`.
    revs_limit:
      name: revs_limit
      in: query
      required: false
      schema:
        type: integer
      description: Maximum amount of revisions to return for each document.
    includeAttachments:
      name: attachments
      in: query
      required: false
      schema:
        type: string
      description: Include attachment bodies in response.
    replicator2:
      name: replicator2
      in: query
      required: false
      schema:
        type: boolean
      description: Returns the document with the required properties for replication. This is an enterprise-edition only feature.
    roundtrip:
      name: roundtrip
      in: query
      required: false
      schema:
        type: boolean
      description: Block until document has been received by change cache
    new_edits:
      name: new_edits
      in: query
      required: false
      schema:
        type: boolean
        default: 'true'
      description: 'Setting this to false indicates that the request body is an already-existing revision that should be directly inserted into the database, instead of a modification to apply to the current document. This mode is used for replication.  This option must be used in conjunction with the `_revisions` property in the request body.'
    If-Match:
      name: If-Match
      in: header
      required: false
      schema:
        type: string
      description: The revision ID to target.
    include_doc:
      name: include_doc
      in: query
      required: false
      schema:
        type: string
      description: Include the body associated with the document.
    startkey:
      name: startkey
      in: query
      required: false
      schema:
        type: string
      description: Return records starting with the specified key.
    endkey:
      name: endkey
      in: query
      required: false
      schema:
        type: string
      description: Stop returning records when this key is reached.
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: number
      description: This limits the number of result rows returned. Using a value of `0` has the same effect as the value `1`.
    ddoc:
      name: ddoc
      in: path
      required: true
      schema:
        type: string
      description: The design document name.
    open_revs:
      name: open_revs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
      description: 'Option to fetch specified revisions of the document. The value can be all to fetch all leaf revisions or an array of revision numbers (i.e. open_revs=["rev1", “rev2”]). Only leaf revision bodies that haven’t been pruned are guaranteed to be returned. If this option is specified the response will be in multipart format. Use the `Accept: application/json` request header to get the result as a JSON object.'
    replicationid:
      name: replicationid
      in: path
      required: true
      schema:
        type: string
      description: What replication to target based on it's replication ID.
    replication-active-only:
      name: activeOnly
      in: query
      required: false
      schema:
        type: boolean
        default: 'false'
      description: Only return replications that are actively running (`state=running`).
    replication-local-only:
      name: localOnly
      in: query
      required: false
      schema:
        type: boolean
        default: 'false'
      description: Only return replications that were started on the current Sync Gateway node.
    replication-include-error:
      name: includeError
      in: query
      required: false
      schema:
        type: boolean
        default: 'true'
      description: Include replications that have stopped due to an error (`state=error`).
    replication-include-config:
      name: includeConfig
      in: query
      required: false
      schema:
        type: boolean
        default: 'false'
      description: Include the replication configuration with each replicator status in the response.
  responses:
    Not-found:
      description: Resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
          examples:
            Database not found:
              value:
                error: not_found
                reason: no such database "invalid-db"
    Conflict:
      description: Resource already exists under that name
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    User:
      description: Properties associated with a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Role:
      description: Properties associated with a role
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
    Invalid-CORS:
      description: Origin is not in the approved list of allowed origins
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    User-session-information:
      description: Properties associated with a user session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User-session-information'
    OIDC-callback:
      description: Successfully authenticated with OpenID Connect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OIDC-callback'
    OIDC-invalid-provider:
      description: 'The provider provided is not defined in the Sync Gateway config. If no provided was specified then there is no default provider set. '
    OIDC-connection:
      description: Unable to connect and validate with the OpenID Connect provider requested
    OIDC-test-provider-disabled:
      description: The OpenID Connect unsupported config option `oidc_test_provider` is not enabled. To use this endpoint, this option must be enabled.
    OIDC-invalid-scope:
      description: A validation error occurred with the scope.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    OIDC-testing-internal-error:
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    OIDC-token:
      description: Properties expected back from an OpenID Connect provider after successful authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OIDC-token'
    OIDC-testing-redirect:
      description: Redirecting to Sync Gateway OpenID Connect callback URL
      headers:
        Location:
          schema:
            type: string
          description: The location to the Sync Gateway OpenID Connect callback URL.
    invalid-doc-id:
      description: |-
        Document ID is not in an allowed format therefore is invalid.

        This could be because it is over 250 characters or is prefixed with an underscore ("_").
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    New-revision:
      description: New revision created sucessfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/New-revision'
    request-problem:
      description: There was a problem with your request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    Invalid-content-type:
      description: Invalid content type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP-Error'
    all-docs:
      description: Operation ran successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              rows:
                type: array
                uniqueItems: true
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    id:
                      type: string
                    value:
                      type: object
                      properties:
                        rev:
                          type: string
              total_rows:
                type: number
              update_seq:
                type: number
            required:
              - rows
              - total_rows
              - update_seq
    changes-feed:
      description: Successfully returned the changes feed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Changes-feed'
    ddoc-forbidden:
      description: Forbidden access possibly due to not using the Admin API or the design document is a built-in Sync Gateway one.
    Replicator-created:
      description: Created new replication successfully
    Replicator-updated:
      description: Updated existing configuration successfully
  schemas:
    User:
      description: Properties associated with a user
      type: object
      title: User
      properties:
        name:
          type: string
          description: |-
            The name of the user.

            User names can only have alphanumeric ASCII characters and underscores.
        password:
          type: string
          description: |-
            The password of the user.

            Mandatory. unless `allow_empty_password` is `true` in the database configs.
        admin_channels:
          type: array
          description: The channels that user is able to access.
          items:
            type: string
        all_channels:
          type: array
          description: |-
            All the channels that the user has been granted access to.

            Access could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.
          items:
            type: string
            readOnly: true
        email:
          type: string
          description: The email address of the user.
        disabled:
          type: boolean
          description: 'If true, the user will not be able to login to the account as it is disabled.'
        admin_roles:
          type: array
          description: The roles the user is assigned to.
          items:
            type: string
        roles:
          type: array
          description: The roles that the user is assigned to by the Sync function.
          items:
            type: string
          readOnly: true
    Role:
      description: Properties associated with a role
      type: object
      title: Role
      properties:
        name:
          type: string
          description: |-
            The name of the role.

            Role names can only have alphanumeric ASCII characters and underscores.
        admin_channels:
          type: array
          description: The channels that users in the role are able to access.
          items:
            type: string
        all_channels:
          type: array
          description: |-
            The channels that the role grants access to.

            These channels could have been assigned by the Sync function or using the `admin_channels` property.
          items:
            type: string
            readOnly: true
    User-session-information:
      type: object
      properties:
        authentication_handlers:
          type: array
          description: The ways authentication can be established to authenticate as the user.
          items:
            type: string
        ok:
          type: boolean
        userCtx:
          type: object
          properties:
            channels:
              type: object
              description: |
                A map of the channels the user has access to and the sequence number each channel was created at.

                The key is the channel name and the value is the sequence number.
            name:
              type: string
              description: The name of the user.
              nullable: true
      title: User Session Information
    OIDC-callback:
      type: object
      title: OpenID Connect callback properties
      properties:
        id_token:
          type: string
          description: The OpenID Connect ID token
        refresh_token:
          type: string
          description: The OpenID Connect ID refresh token
        session_id:
          type: string
          description: The Sync Gateway session token
        name:
          type: string
          description: The Sync Gateway user
        access_token:
          type: string
          description: The OpenID Connect access token
        token_type:
          type: string
          description: The OpenID Connect ID token type
        expires_in:
          type: number
          description: The time until the id_token expires (TTL).
    OIDC-token:
      title: OIDC-token
      type: object
      description: Properties expected back from an OpenID Connect provider after successful authentication
      properties:
        access_token:
          type: string
        token_type:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: string
        id_token:
          type: string
    OIDC-login-page-handler:
      description: Properties passed from the OpenID Connect mock login page to the handler
      type: object
      properties:
        username:
          type: string
        tokenttl:
          type: string
        identity-token-formats:
          type: string
        authenticated:
          type: string
      required:
        - username
        - tokenttl
        - identity-token-formats
        - authenticated
    Document:
      description: The configurable Sync Gateway properties of a document.
      type: object
      properties:
        _id:
          type: string
          description: The ID of the document.
        _rev:
          type: string
          description: The revision of the document.
        _exp:
          type: string
          description: |-
            Expiry time after which the document will be purged. The expiration time is set and managed on the Couchbase Server document. The value can be specified in two ways; in ISO-8601 format, for example the 6th of July 2022 at 17:00 in the BST timezone would be `2016-07-06T17:00:00+01:00`; it can also be specified as a numeric Couchbase Server expiry value. Couchbase Server expiries are specified as Unix time, and if the desired TTL is below 30 days then it can also represent an interval in seconds from the current time (for example, a value of 5 will remove the document 5 seconds after it is written to Couchbase Server). The document expiration time is returned in the response of `GET /{db}/{doc} ` when `show_exp=true` is included in the query.

            As with the existing explicit purge mechanism, this applies only to the local database; it has nothing to do with replication. This expiration time is not propagated when the document is replicated. The purge of the document does not cause it to be deleted on any other database.
        _deleted:
          type: boolean
          description: 'Whether the document is a tombstone or not. If true, it is a tombstone.'
        _revisions:
          type: object
          properties:
            start:
              type: number
              description: Prefix number for the latest revision.
            ids:
              type: array
              description: 'Array of valid revision IDs, in reverse order (latest first).'
              items:
                type: string
        _attachments:
          type: object
          properties:
            attachment_name:
              type: object
              description: The name of the attachment.
              properties:
                content_type:
                  type: string
                  description: Content type of the attachment.
                data:
                  type: string
                  description: The data in the attachment in base64.
    New-revision:
      title: New-revision
      type: object
      description: Properties returned when a new revision is created
      properties:
        id:
          type: string
          description: The ID of the document.
        ok:
          type: boolean
          description: Wheather the request completed successfully.
        rev:
          type: string
          description: The revision of the document.
      required:
        - id
        - ok
        - rev
    Changes-feed:
      description: Properties of a changes feed
      type: object
      properties:
        results:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              seq:
                type: number
                description: The change sequence number.
              id:
                type: string
                description: The document ID the change happened on.
              changes:
                type: array
                uniqueItems: true
                description: List of document leafs with each leaf containing only a `rev` field.
                items:
                  type: object
                  properties:
                    rev:
                      type: string
                      description: The new revision that was caused by that change.
        last_seq:
          type: string
          description: The last change sequence number.
    Design-doc:
      description: Properties of a design document
      type: object
      properties:
        language:
          type: string
        views:
          type: object
          properties:
            view_name:
              type: object
              properties:
                map:
                  type: string
                reduce:
                  type: string
        options:
          type: object
          properties:
            local_seq:
              type: string
            include_design:
              type: string
            raw:
              type: string
            index_xattr_on_deleted_docs:
              type: string
    HTTP-Error:
      title: HTTP-Error
      type: object
      properties:
        error:
          type: string
        reason:
          type: string
          description: The error description.
      required:
        - error
        - reason
    Retrieved-replication:
      title: Replication
      type: object
      description: Properties of a replication
      properties:
        replication_id:
          type: string
          description: |-
            This is the ID of the replication.

            When creating a new replication using a POST request, this will be set to a random UUID if not explicitly set. 

            When the replication ID is specified in the URL, this must be set to the same replication ID if specifying it at all.
        remote:
          type: string
          description: |-
            This is the endpoint of the database for the remote Sync Gateway that is the subject of this replication's `push`, `pull`, or `pushAndPull` action.

            Typically this would include the URI, port, and database name. For example, `http://localhost:4985/db`.

            How this remote is used depends on the `direction` of the replication:
            * `pull` - this replicator _pulls_ changes from the `remote`
            * `push` - this replicator _pushes_ changes to this `remote`
            * `pushAndPull` - this replicator _pushes_ changes to this `remote`, while also pulling recieving changes
        username:
          type: string
          deprecated: true
          description: |-
            **This has been deprecated in favour of `remote_username`.**

            This is the username to use to authenticate with the remote.

            This can only be used for a pull replication.
        password:
          type: string
          deprecated: true
          description: |-
            **This has been deprecated in favour of `remote_password`.**

            This is the password to use to authenticate with the remote.

            This password will be redacted in the replication config.

            This can only be used for a pull replication.
        remote_username:
          type: string
          description: |-
            The username to use to authenticate with the remote.

            This can only be used for a pull replication.
        remote_password:
          type: string
          description: |-
            The password to use to authenticate with the remote.

            This password will be redacted in the replication config.

            This can only be used for a pull replication.
        direction:
          type: string
          enum:
            - push
            - pull
            - pushAndPull
          description: |-
            This specifies which direction the replication will be replicating with the `remote` replicator.

            The directions are:
            * `pull` - changes are pulled from the remote database
            * `push` - changes are pushed to the remote database
            * `pushAndPull` - changes are both push-to and pulled-from the remote database

            Replications created prior to Sync Gateway 2.8 derive their `direction` from the source/target URL of the replication.
        conflict_resolution_type:
          type: string
          default: default
          enum:
            - default
            - remoteWins
            - localWins
            - custom
          description: |-
            This defines what conflict resolution policy Sync Gateway should use to apply when resolving conflicting revisions.

            Changing this is an enterprise-edition only feature.

            **Behavior**
            * *default* - In priority order, this will cause
              - Deletes to always win (the delete with the logest revision history wins if both revisions are deletes)
              - The revision with the longest revision history to win. This means the the revision with the most changes and therefore the highest revision ID will win.
            * *localWins* - This will result in local revisions always being the winner in any conflict.
            * *remoteWins* - This will result in remote revisions always being the winner in any conflict.
            * *custom* - This will result in conflicts going through your own custom conflict resolver. You must provide this logic as a Javascript function in the `custom_conflict_resolver` parameter. This is an enterprise-edition only feature.


            Note: replications created prior to Sync Gateway 2.8 will default to `default`.
        custom_conflict_resolver:
          type: string
          default: none
          description: "This specifies the Javascript function to use to resolve conflicts between conflicting revisions.\n \nThis **must** be used when `conflict_resolution_type=custom`. This property will be ignored when `conflict_resolution_type` is not `custom`.\n\nThe Javascript function to provide this property should be in backticks (like the sync function). The function takes 1 parameter which is a struct that represents the conflict. This struct has 2 properties:\n* `LocalDocument` - The local document. This contains the document ID under the `_id` key.\n* `RemoteDocument` - The remote document\nThe function should return the new documents body. This can be the winning revision (for example, `return conflict.LocalDocument`), a new body, or `nil` to resolve as a delete.\n\nExample:\n```\n\"custom_conflict_resolver\":\\`\n\tfunction(conflict) {\n\t\tconsole.log(\"Doc ID: \"+conflict.LocalDocument._id);\n\t\tconsole.log(\"Full remote doc: \"+JSON.stringify(conflict.RemoteDocument));\n\t\treturn conflict.RemoteDocument;\n\t}\n\\`\n```\n\nUsing complex `custom_conflict_resolver` functions can noticeably degrade performance. Use a built-in resolver whenever possible.\n\nThis is an enterprise-edition only feature.\n"
        purge_on_removal:
          type: boolean
          default: false
          description: |-
            Specifies whether to purge a document if the remote user loses access to all of the channels on the document when attempting to pull it from the remote.

            If false, documents will not be replicated and not be purged when the user loses access.
        enable_delta_sync:
          type: boolean
          default: false
          description: |-
            This will turn on delta- sync for the replication. This works in conjunction with the database level setting `delta_sync.enabled`

            If set to true, delta-sync will be used as long as both databases involved in the replication have delta-sync enabled. If a database does not have delta-sync enabled, then the replication will run without delta-sync.

            Replications created prior to Sync Gateway 2.8 must have delta-sync disabled.

            Enabling this is an enterprise-edition only feature.
        max_backoff_time:
          type: integer
          default: 5
          description: |-
            Specifies the maximum time-period (in minutes) that Sync Gateway will attempt to reconnect to a lost or unreachable remote.

            When a disconnection happens, Sync Gateway will do an exponential backoff up to this specified value. When this value is met, it will attempt to reconnect indefnitely every `max_backoff_time` minutes.

            If this is set to 0, Sync Gateway will do the normal exponential backoff after the disconnect happens but then attempting 10 minutes and stop the replication.

            Note: this defaults to 5 minutes for replications created prior to Sync Gateway 2.8.
        initial_state:
          type: string
          default: running
          enum:
            - running
            - stopped
          description: |-
            This is what state to start the replication in when creating a new replication.

            This allows you to control if the replication starts in a `stopped` start or `running` state.

            Replications prior to Sync Gateway 2.8 will run in the default state `running`.
        continuous:
          type: boolean
          default: false
          description: |-
            If true, changes will be immediately synced whewn they happen. This is known as a continuous replication.

            If false, all changes will be synced until they have been processed. The replication will then cease and not process any future changes (unless started again by the user). This is known as a one-shot replication.
        filter:
          type: string
          enum:
            - sync_gateway/bychannel
          description: |-
            This defines whether to filter documents by their channels or not.

            If set to `sync_gateway/bychannel` then a **pull** replication will be limited to a specific set of channels specified by the `query_params.channels` property. 

            This only can be used with pull replications.
        query_params:
          type: array
          description: |-
            This is a set of key/value pairs used in the query string of the replication.

            If `filters=sync_gateway/bychannel` then this can be used to set the channels to filter by in a pull replication. To do this, set the `channels` key to a string array of the channels to filter by. For example:
            ```
            "filter":"sync_gateway/bychannel",
            "query_params": {
              "channels":["chanUser1"]
            },
            ```
          items:
            type: string
        cancel:
          type: boolean
          description: Unused field
        adhoc:
          type: boolean
          default: false
          description: |-
            Set to true to run the replication as an adhoc replication instead of a persistent one. 

            This means that the replication will only last the period of the replication until the status is changed to `stopped` and then it will be removed automatically. It will also be removed if Sync Gateway restarts or if removed due to user action.
        batch_size:
          type: integer
          default: 200
          description: The amount of changes to be sent in one batch of replications. Changing this is an enterprise-edition only feature.
        run_as:
          type: string
          description: This is used if you want to specify a user to run the replication as. This means that the replication will only be able to replicate what the user  access to what the user has access to.
        assigned_node:
          type: string
          description: The unique ID of the node assigned to the replication.
        target_state:
          type: string
          enum:
            - running
            - stopped
            - resetting
            - error
            - starting
            - reconnecting
          description: This is the state that the replicator is in or that trying to transition in to.
    Replication:
      title: User configurable replication properties
      type: object
      description: Properties of a replication
      properties:
        replication_id:
          type: string
          description: |-
            This is the ID of the replication.

            When creating a new replication using a POST request, this will be set to a random UUID if not explicitly set. 

            When the replication ID is specified in the URL, this must be set to the same replication ID if specifying it at all.
        remote:
          type: string
          description: |-
            This is the endpoint of the database for the remote Sync Gateway that is the subject of this replication's `push`, `pull`, or `pushAndPull` action.

            Typically this would include the URI, port, and database name. For example, `http://localhost:4985/db`.

            How this remote is used depends on the `direction` of the replication:
            * `pull` - this replicator _pulls_ changes from the `remote`
            * `push` - this replicator _pushes_ changes to this `remote`
            * `pushAndPull` - this replicator _pushes_ changes to this `remote`, while also pulling recieving changes
        username:
          type: string
          deprecated: true
          description: |-
            **This has been deprecated in favour of `remote_username`.**

            This is the username to use to authenticate with the remote.

            This can only be used for a pull replication.
        password:
          type: string
          deprecated: true
          description: |-
            **This has been deprecated in favour of `remote_password`.**

            This is the password to use to authenticate with the remote.

            This password will be redacted in the replication config.

            This can only be used for a pull replication.
        remote_username:
          type: string
          description: |-
            The username to use to authenticate with the remote.

            This can only be used for a pull replication.
        remote_password:
          type: string
          description: |-
            The password to use to authenticate with the remote.

            This password will be redacted in the replication config.

            This can only be used for a pull replication.
        direction:
          type: string
          enum:
            - push
            - pull
            - pushAndPull
          description: |-
            This specifies which direction the replication will be replicating with the `remote` replicator.

            The directions are:
            * `pull` - changes are pulled from the remote database
            * `push` - changes are pushed to the remote database
            * `pushAndPull` - changes are both push-to and pulled-from the remote database

            Replications created prior to Sync Gateway 2.8 derive their `direction` from the source/target URL of the replication.
        conflict_resolution_type:
          type: string
          default: default
          enum:
            - default
            - remoteWins
            - localWins
            - custom
          description: |-
            This defines what conflict resolution policy Sync Gateway should use to apply when resolving conflicting revisions.

            Changing this is an enterprise-edition only feature.

            **Behavior**
            * *default* - In priority order, this will cause
              - Deletes to always win (the delete with the logest revision history wins if both revisions are deletes)
              - The revision with the longest revision history to win. This means the the revision with the most changes and therefore the highest revision ID will win.
            * *localWins* - This will result in local revisions always being the winner in any conflict.
            * *remoteWins* - This will result in remote revisions always being the winner in any conflict.
            * *custom* - This will result in conflicts going through your own custom conflict resolver. You must provide this logic as a Javascript function in the `custom_conflict_resolver` parameter. This is an enterprise-edition only feature.


            Note: replications created prior to Sync Gateway 2.8 will default to `default`.
        custom_conflict_resolver:
          type: string
          default: none
          description: "This specifies the Javascript function to use to resolve conflicts between conflicting revisions.\n \nThis **must** be used when `conflict_resolution_type=custom`. This property will be ignored when `conflict_resolution_type` is not `custom`.\n\nThe Javascript function to provide this property should be in backticks (like the sync function). The function takes 1 parameter which is a struct that represents the conflict. This struct has 2 properties:\n* `LocalDocument` - The local document. This contains the document ID under the `_id` key.\n* `RemoteDocument` - The remote document\nThe function should return the new documents body. This can be the winning revision (for example, `return conflict.LocalDocument`), a new body, or `nil` to resolve as a delete.\n\nExample:\n```\n\"custom_conflict_resolver\":\\`\n\tfunction(conflict) {\n\t\tconsole.log(\"Doc ID: \"+conflict.LocalDocument._id);\n\t\tconsole.log(\"Full remote doc: \"+JSON.stringify(conflict.RemoteDocument));\n\t\treturn conflict.RemoteDocument;\n\t}\n\\`\n```\n\nUsing complex `custom_conflict_resolver` functions can noticeably degrade performance. Use a built-in resolver whenever possible.\n\nThis is an enterprise-edition only feature.\n"
        purge_on_removal:
          type: boolean
          default: false
          description: |-
            Specifies whether to purge a document if the remote user loses access to all of the channels on the document when attempting to pull it from the remote.

            If false, documents will not be replicated and not be purged when the user loses access.
        enable_delta_sync:
          type: boolean
          default: false
          description: |-
            This will turn on delta- sync for the replication. This works in conjunction with the database level setting `delta_sync.enabled`

            If set to true, delta-sync will be used as long as both databases involved in the replication have delta-sync enabled. If a database does not have delta-sync enabled, then the replication will run without delta-sync.

            Replications created prior to Sync Gateway 2.8 must have delta-sync disabled.

            Enabling this is an enterprise-edition only feature.
        max_backoff_time:
          type: integer
          default: 5
          description: |-
            Specifies the maximum time-period (in minutes) that Sync Gateway will attempt to reconnect to a lost or unreachable remote.

            When a disconnection happens, Sync Gateway will do an exponential backoff up to this specified value. When this value is met, it will attempt to reconnect indefnitely every `max_backoff_time` minutes.

            If this is set to 0, Sync Gateway will do the normal exponential backoff after the disconnect happens but then attempting 10 minutes and stop the replication.

            Note: this defaults to 5 minutes for replications created prior to Sync Gateway 2.8.
        initial_state:
          type: string
          default: running
          enum:
            - running
            - stopped
          description: |-
            This is what state to start the replication in when creating a new replication.

            This allows you to control if the replication starts in a `stopped` start or `running` state.

            Replications prior to Sync Gateway 2.8 will run in the default state `running`.
        continuous:
          type: boolean
          default: false
          description: |-
            If true, changes will be immediately synced whewn they happen. This is known as a continuous replication.

            If false, all changes will be synced until they have been processed. The replication will then cease and not process any future changes (unless started again by the user). This is known as a one-shot replication.
        filter:
          type: string
          enum:
            - sync_gateway/bychannel
          description: |-
            This defines whether to filter documents by their channels or not.

            If set to `sync_gateway/bychannel` then a **pull** replication will be limited to a specific set of channels specified by the `query_params.channels` property. 

            This only can be used with pull replications.
        query_params:
          type: array
          description: |-
            This is a set of key/value pairs used in the query string of the replication.

            If `filters=sync_gateway/bychannel` then this can be used to set the channels to filter by in a pull replication. To do this, set the `channels` key to a string array of the channels to filter by. For example:
            ```
            "filter":"sync_gateway/bychannel",
            "query_params": {
              "channels":["chanUser1"]
            },
            ```
          items:
            type: string
        cancel:
          type: boolean
          description: Unused field
        adhoc:
          type: boolean
          default: false
          description: |-
            Set to true to run the replication as an adhoc replication instead of a persistent one. 

            This means that the replication will only last the period of the replication until the status is changed to `stopped` and then it will be removed automatically. It will also be removed if Sync Gateway restarts or if removed due to user action.
        batch_size:
          type: integer
          default: 200
          description: The amount of changes to be sent in one batch of replications. Changing this is an enterprise-edition only feature.
        run_as:
          type: string
          description: This is used if you want to specify a user to run the replication as. This means that the replication will only be able to replicate what the user  access to what the user has access to.
      required:
        - direction
    All-replications:
      title: All-replications
      type: object
      description: Contains all the replication IDs with their corresponding replication configurations
      properties:
        replication_id:
          $ref: '#/components/schemas/Retrieved-replication'
    Replication-status:
      title: Replication-status
      type: object
      properties:
        replication_id:
          type: string
          description: The ID of the replication.
        config:
          $ref: '#/components/schemas/Replication'
        status:
          type: string
          description: The status of the replication.
          enum:
            - stopped
            - running
            - reconnecting
            - resetting
            - error
            - starting
        error_message:
          type: string
          description: The error message of the replication if an error has occurred.
        docs_read:
          type: integer
          description: The number of documents that have been read (fetched) from the source database.
        docs_checked_pull:
          type: integer
        docs_purged:
          type: integer
          description: The number of documents that have been purged.
        rejected_by_local:
          type: integer
          description: The number of documents that were received by the local but did not get replicated due to getting rejected by the sync function on the local.
        last_seq_pull:
          type: string
          description: The last changes sequence number that was pulled from the remote.
        deltas_recv:
          type: integer
          description: The number of deltas that have been receieved from the remote.
        deltas_requested:
          type: integer
        docs_written:
          type: integer
          description: The number of documents that have been wrote (pushed) to the target database.
        docs_checked_push:
          type: integer
        docs_write_failures:
          type: integer
          description: The number of documents that have failed to be wrote (pushed) to the target database. There will be no attempt to try to push these docs again.
        docs_write_conflicts:
          type: integer
          description: The number of documents that had a conflict.
        rejected_by_remote:
          type: integer
          description: The number of documents that were received by the remote but did not get replicated due to getting rejected by the sync function on the remote.
        last_seq_push:
          type: string
          description: The last changes sequence number that was pushed to the remote.
        deltas_sent:
          type: integer
          description: 'The number of deltas that have been sent to the remote. '
      required:
        - replication_id
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Properties associated with a user
    Role:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
      description: Properties associated with a role
    OIDC-login-page-handler:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OIDC-login-page-handler'
      description: Properties passed from the OpenID Connect mock login page to the handler
    Doc-body:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
      description: Properties of a document
    Replication-upsert:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Replication'
      description: If the `replication_id` matches an existing replication then the existing configuration will be updated. Only the specified fields in the request will be used to update the existing configuration. Unspecified fields will remain untouched.