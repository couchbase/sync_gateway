/*! For license information please see main.js.LICENSE.txt */
var SG_Engine;(()=>{var e={9825:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cacheControlFromInfo=t.maybeCacheControlFromInfo=void 0,t.maybeCacheControlFromInfo=function(e){var t,n;return(null===(n=null===(t=e.cacheControl)||void 0===t?void 0:t.cacheHint)||void 0===n?void 0:n.restrict)?e.cacheControl:null},t.cacheControlFromInfo=function(e){var t,n;if(!("cacheControl"in e))throw new Error("The `info` argument does not appear to have a cacheControl field. Check that you are using Apollo Server 3 or newer and that you aren't using ApolloServerPluginCacheControlDisabled.");if(!(null===(n=null===(t=e.cacheControl)||void 0===t?void 0:t.cacheHint)||void 0===n?void 0:n.restrict))throw new Error("The `info` argument has a cacheControl field but it does not appear to be from ApolloServer 3 or newer. Check that you are using Apollo Server 3 or newer and that you aren't using ApolloServerPluginCacheControlDisabled.");return e.cacheControl}},7964:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.builtTypeReference=t.buildSchemaFromAST=t.buildSchema=void 0;const i=n(8929),r=n(3421),o=n(4177),s=n(8116);function a(e){return e?(0,r.valueFromASTUntyped)(e):void 0}function c(e,t){var n;const r=[],a=new o.Schema(null==t?void 0:t.blueprint),{directiveDefinitions:c,typeDefinitions:u,typeExtensions:d,schemaDefinitions:f,schemaExtensions:y}=function(e,t,n){const i=[],r=[],a=[],c=[],u=[];for(const p of e.definitions)switch(p.kind){case"OperationDefinition":case"FragmentDefinition":n.push(s.ERRORS.INVALID_GRAPHQL.err("Invalid executable definition found while building schema",{nodes:p}));continue;case"SchemaDefinition":c.push(p),t.schemaDefinition.preserveEmptyDefinition=!0;break;case"SchemaExtension":u.push(p);break;case"ScalarTypeDefinition":case"ObjectTypeDefinition":case"InterfaceTypeDefinition":case"UnionTypeDefinition":case"EnumTypeDefinition":case"InputObjectTypeDefinition":r.push(p);let e=t.type(p.name.value);if(!e||e.isBuiltIn)e=t.addType((0,o.newNamedType)(l(p.kind),p.name.value));else if(e.preserveEmptyDefinition)throw s.ERRORS.INVALID_GRAPHQL.err(`There can be only one type named "${p.name.value}"`);e.preserveEmptyDefinition=!0;break;case"ScalarTypeExtension":case"ObjectTypeExtension":case"InterfaceTypeExtension":case"UnionTypeExtension":case"EnumTypeExtension":case"InputObjectTypeExtension":a.push(p);const d=t.type(p.name.value);if(d){if(d.isBuiltIn)throw s.ERRORS.INVALID_GRAPHQL.err(`Cannot extend built-in type "${p.name.value}"`)}else t.addType((0,o.newNamedType)(l(p.kind),p.name.value));break;case"DirectiveDefinition":i.push(p),t.addDirectiveDefinition(p.name.value)}return{directiveDefinitions:i,typeDefinitions:r,typeExtensions:a,schemaDefinitions:c,schemaExtensions:u}}(e,a,r);for(const e of u)e.kind===i.Kind.ENUM_TYPE_DEFINITION&&m(e,a.type(e.name.value));for(const e of d)if(e.kind===i.Kind.ENUM_TYPE_EXTENSION){const t=a.type(e.name.value).newExtension();t.sourceAST=e,m(e,a.type(e.name.value),t)}for(const e of c)N(e,a.directive(e.name.value),r);for(const e of f)p(e,a.schemaDefinition,r);for(const e of y)p(e,a.schemaDefinition,r,a.schemaDefinition.newExtension());r.push(...a.blueprint.onDirectiveDefinitionAndSchemaParsed(a));for(const e of c)b(e,a.directive(e.name.value),r);for(const e of u)h(e,a.type(e.name.value),a.blueprint,r);for(const e of d){const t=a.type(e.name.value),n=t.newExtension();n.sourceAST=e,h(e,t,a.blueprint,r,n)}if(r.length>0)throw(0,o.ErrGraphQLValidationFailed)(r);return(null===(n=null==t?void 0:t.validate)||void 0===n||n)&&a.validate(),a}function l(e){const t=e.endsWith("Definition")?"Definition":"Extension";return e.slice(0,e.length-t.length)}function u(e,t,n){try{e()}catch(e){const i=(0,s.errorCauses)(e);if(!i)throw e;for(const e of i){const i=e.nodes?[t,...e.nodes]:t;n.push((0,s.withModifiedErrorNodes)(e,i))}}}function p(e,t,n,i){var r,o;for(const o of null!==(r=e.operationTypes)&&void 0!==r?r:[])u((()=>t.setRoot(o.operation,o.type.name.value).setOfExtension(i)),o,n);t.sourceAST=e,"description"in e&&(t.description=null===(o=e.description)||void 0===o?void 0:o.value),d(e,t,n,i)}function d(e,t,n,i){var r;for(const o of null!==(r=e.directives)&&void 0!==r?r:[])u((()=>{if(t===t.schema().schemaDefinition&&"link"!==o.name.value&&t.schema().blueprint.applyDirectivesAfterParsing())t.addUnappliedDirective({extension:i,directive:o,args:f(o),nameOrDef:o.name.value});else{const e=t.applyDirective(o.name.value,f(o));e.setOfExtension(i),e.sourceAST=o}}),o,n)}function f(e){var t;const n=Object.create(null);for(const i of null!==(t=e.arguments)&&void 0!==t?t:[])n[i.name.value]=a(i.value);return n}function h(e,t,n,i,r){var o,a,c,l,p;switch(e.kind){case"EnumTypeDefinition":case"EnumTypeExtension":const f=t;for(const t of null!==(o=e.values)&&void 0!==o?o:[])d(t,f.value(t.name.value),i);break;case"ObjectTypeDefinition":case"ObjectTypeExtension":case"InterfaceTypeDefinition":case"InterfaceTypeExtension":const h=t;for(const o of null!==(a=e.fields)&&void 0!==a?a:[]){if(n.ignoreParsedField(t,o.name.value))continue;const e=h.addField(o.name.value);e.setOfExtension(r),v(o,e,i)}for(const n of null!==(c=e.interfaces)&&void 0!==c?c:[])u((()=>{const e=n.name.value;if(h.implementsInterface(e))throw s.ERRORS.INVALID_GRAPHQL.err(`Type "${t}" can only implement "${e}" once.`);h.addImplementedInterface(e).setOfExtension(r)}),n,i);break;case"UnionTypeDefinition":case"UnionTypeExtension":const m=t;for(const t of null!==(l=e.types)&&void 0!==l?l:[])u((()=>{const e=t.name.value;if(m.hasTypeMember(e))throw s.ERRORS.INVALID_GRAPHQL.err(`Union type "${m}" can only include type "${e}" once.`);m.addType(e).setOfExtension(r)}),t,i);break;case"InputObjectTypeDefinition":case"InputObjectTypeExtension":const y=t;for(const t of null!==(p=e.fields)&&void 0!==p?p:[]){const e=y.addField(t.name.value);e.setOfExtension(r),I(t,e,i)}}d(e,t,i,r),y(e,t)}function m(e,t,n){var i;const r=t;for(const t of null!==(i=e.values)&&void 0!==i?i:[]){const e=r.addValue(t.name.value);t.description&&(e.description=t.description.value),e.setOfExtension(n)}y(e,t)}function y(e,t){e.description&&(t.description=e.description.value),t.sourceAST=e}function v(e,t,n){var i,r;const a=T(e.type,t.schema());t.type=function(e,t,n,i){return(0,o.isOutputType)(e)?e:void i.push(s.ERRORS.INVALID_GRAPHQL.err(`The type of "${t}" must be Output Type but got "${e}", a ${e.kind}.`,{nodes:n}))}(a,t.coordinate,e,n);for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])g(r,t.addArgument(r.name.value),n,!0);d(e,t,n),t.description=null===(r=e.description)||void 0===r?void 0:r.value,t.sourceAST=e}function E(e,t,n,i){return(0,o.isInputType)(e)?e:void i.push(s.ERRORS.INVALID_GRAPHQL.err(`The type of "${t}" must be Input Type but got "${e}", a ${e.kind}.`,{nodes:n}))}function T(e,t){switch(e.kind){case i.Kind.LIST_TYPE:return new o.ListType(T(e.type,t));case i.Kind.NON_NULL_TYPE:const n=T(e.type,t);if(n.kind==i.Kind.NON_NULL_TYPE)throw s.ERRORS.INVALID_GRAPHQL.err("Cannot apply the non-null operator (!) twice to the same type",{nodes:e});return new o.NonNullType(n);default:return function(e,t){const n=t.type(e.name.value);if(!n)throw s.ERRORS.INVALID_GRAPHQL.err(`Unknown type ${e.name.value}`,{nodes:e});return n}(e,t)}}function g(e,t,n,i){var r;const o=T(e.type,t.schema());t.type=E(o,t.coordinate,e,n),t.defaultValue=a(e.defaultValue),i&&d(e,t,n),t.description=null===(r=e.description)||void 0===r?void 0:r.value,t.sourceAST=e}function I(e,t,n){var i;const r=T(e.type,t.schema());t.type=E(r,t.coordinate,e,n),t.defaultValue=a(e.defaultValue),d(e,t,n),t.description=null===(i=e.description)||void 0===i?void 0:i.value,t.sourceAST=e}function N(e,t,n){var i;for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])g(r,t.addArgument(r.name.value),n,!1);t.repeatable=e.repeatable;const r=e.locations.map((({value:e})=>e));t.addLocations(...r),y(e,t)}function b(e,t,n){var i;for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])d(r,t.argument(r.name.value),n)}t.buildSchema=function(e,t){return c((0,i.parse)(e),t)},t.buildSchemaFromAST=c,t.builtTypeReference=function(e,t){return T((0,i.parseType)(e),t)}},9209:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeAllCoreFeatures=t.LINK_VERSIONS=t.CORE_VERSIONS=t.findCoreSpecVersion=t.FeatureUrl=t.FeatureVersion=t.FeatureDefinitions=t.CoreSpecDefinition=t.isCoreSpecDirectiveApplication=t.extractCoreFeatureImports=t.FeatureDefinition=t.corePurposes=t.ErrCoreCheckFailed=t.linkDirectiveDefaultName=t.linkIdentity=t.coreIdentity=void 0;const i=n(8929),r=n(4888),o=n(4177),s=n(5811),a=n(9724),c=n(8116),l=n(3421),u=n(5848),p=n(5388),d=n(3208);function f(e){return new Error(e)}function h(e){switch(e){case"SECURITY":return"`SECURITY` features provide metadata necessary to securely resolve fields.";case"EXECUTION":return"`EXECUTION` features provide metadata necessary for operation execution."}}t.coreIdentity="https://specs.apollo.dev/core",t.linkIdentity="https://specs.apollo.dev/link",t.linkDirectiveDefaultName="link",t.ErrCoreCheckFailed=e=>(0,c.aggregateError)("CheckFailed","one or more checks failed",e),t.corePurposes=["SECURITY","EXECUTION"];class m{constructor(e){this.url="string"==typeof e?N.parse(e):e}get identity(){return this.url.identity}get version(){return this.url.version}isSpecType(e){const t=this.nameInSchema(e.schema());return void 0!==t&&e.name.startsWith(`${t}__`)}isSpecDirective(e){const t=this.nameInSchema(e.schema());return null!=t&&(e.name===t||e.name.startsWith(`${t}__`))}nameInSchema(e){const t=this.featureInSchema(e);return null==t?void 0:t.nameInSchema}directiveNameInSchema(e,t){const n=this.featureInSchema(e);return n?n.directiveNameInSchema(t):void 0}typeNameInSchema(e,t){const n=this.featureInSchema(e);return n?n.typeNameInSchema(t):void 0}rootDirective(e){const t=this.nameInSchema(e);return t?e.directive(t):void 0}directive(e,t){const n=this.directiveNameInSchema(e,t);return n?e.directive(n):void 0}type(e,t){const n=this.typeNameInSchema(e,t);return n?e.type(n):void 0}addRootDirective(e){return e.addDirectiveDefinition(this.nameInSchema(e))}addDirective(e,t){return e.addDirectiveDefinition(this.directiveNameInSchema(e,t))}addDirectiveSpec(e,t){return t.checkOrAdd(e,this.directiveNameInSchema(e,t.name))}addTypeSpec(e,t){return t.checkOrAdd(e,this.typeNameInSchema(e,t.name))}addScalarType(e,t){return e.addType(new o.ScalarType(this.typeNameInSchema(e,t)))}addEnumType(e,t){return e.addType(new o.EnumType(this.typeNameInSchema(e,t)))}featureInSchema(e){const t=e.coreFeatures;if(!t)throw f("Schema is not a core schema (add @core first)");return t.getByIdentity(this.identity)}get defaultCorePurpose(){}toString(){return`${this.identity}/${this.version}`}}function y(e,t,n,i){if(t&&!t.includes(e)){let r="";if(!e.startsWith("@")&&t.includes("@"+e))r=` Did you mean directive "@${e}"?`;else{const n=(0,p.suggestionList)(e,t);n&&(r=(0,p.didYouMean)(n))}n.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Cannot import unknown element "${e}".${r}`,{nodes:i.sourceAST}))}}t.FeatureDefinition=m,t.extractCoreFeatureImports=function(e,t){const n=t.arguments();if(!("import"in n)||!n.import)return[];const i=n.import,r=(0,u.coreFeatureDefinitionIfKnown)(e),s=null==r?void 0:r.allElementNames(),a=[],p=[];e:for(const e of i){if("string"==typeof e){p.push({name:e}),y(e,s,a,t);continue}if("object"!=typeof e){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid sub-value ${(0,l.valueToString)(e)} for @link(import:) argument: values should be either strings or input object values of the form { name: "<importedElement>", as: "<alias>" }.`,{nodes:t.sourceAST}));continue}let n;for(const[i,r]of Object.entries(e))switch(i){case"name":if("string"!=typeof r){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid value for the "name" field for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument: must be a string.`,{nodes:t.sourceAST}));continue e}n=r;break;case"as":if("string"!=typeof r){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid value for the "as" field for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument: must be a string.`,{nodes:t.sourceAST}));continue e}break;default:a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Unknown field "${i}" for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument.`,{nodes:t.sourceAST}));continue e}if(n){const i=e;p.push(i),i.as&&("@"===i.name.charAt(0)&&"@"!==i.as.charAt(0)?a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid @link import renaming: directive "${i.name}" imported name should start with a '@' character, but got "${i.as}".`,{nodes:t.sourceAST})):"@"!==i.name.charAt(0)&&"@"===i.as.charAt(0)&&a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid @link import renaming: type "${i.name}" imported name should not start with a '@' character, but got "${i.as}" (or, if @${i.name} is a directive, then it should be referred to with a '@').`,{nodes:t.sourceAST}))),y(n,s,a,t)}else a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid sub-value ${(0,l.valueToString)(e)} for @link(import:) argument: missing mandatory "name" field.`,{nodes:t.sourceAST}))}if(a.length>0)throw(0,o.ErrGraphQLValidationFailed)(a);return p},t.isCoreSpecDirectiveApplication=function(e){var n,r,a;const c=e.definition;if(!c)return!1;const l=c.argument("as");if(l&&!(0,s.sameType)(l.type,e.schema().stringType()))return!1;if(!c.repeatable||1!==c.locations.length||c.locations[0]!==i.DirectiveLocation.SCHEMA)return!1;const u=null!==(n=c.argument("url"))&&void 0!==n?n:c.argument("feature");if(!u||(p=u.type,d=e.schema(),!(0,s.sameType)(p,d.stringType())&&!(0,s.sameType)(p,new o.NonNullType(d.stringType()))))return!1;var p,d;const f=e.arguments();try{const n=N.parse(f[u.name]);return n.identity===t.coreIdentity?e.name===(null!==(r=f.as)&&void 0!==r?r:"core"):n.identity===t.linkIdentity&&e.name===(null!==(a=f.as)&&void 0!==a?a:t.linkDirectiveDefaultName)}catch(e){return!1}};const v=(0,d.createEnumTypeSpecification)({name:"Purpose",values:t.corePurposes.map((e=>({name:e,description:h(e)})))}),E=(0,d.createScalarTypeSpecification)({name:"Import"});class T extends m{constructor(e,n=t.linkIdentity,r=t.linkDirectiveDefaultName){super(new N(n,r,e)),this.directiveDefinitionSpec=(0,d.createDirectiveSpecification)({name:r,locations:[i.DirectiveLocation.SCHEMA],repeatable:!0,argumentFct:(e,t)=>this.createDefinitionArgumentSpecifications(e,t)})}createDefinitionArgumentSpecifications(e,t){const n=[{name:this.urlArgName(),type:e.stringType()},{name:"as",type:e.stringType()}];if(this.supportPurposes()){const i=`${null!=t?t:this.url.name}__${v.name}`,r=v.checkOrAdd(e,i);if(r.length>0)return{args:n,errors:r};n.push({name:"for",type:e.type(i)})}if(this.supportImport()){const i=`${null!=t?t:this.url.name}__${E.name}`,r=E.checkOrAdd(e,i);if(r.length>0)return{args:n,errors:r};n.push({name:"import",type:new o.ListType(e.type(i))})}return{args:n,errors:[]}}addElementsToSchema(e){return[]}addToSchema(e,t){const n=this.addDefinitionsToSchema(e,t);if(n.length>0)return n;const i={[this.urlArgName()]:this.toString()};t&&(i.as=t);const r=e.schemaDefinition,o=r.hasNonExtensionElements(),s=r.applyDirective(null!=t?t:this.url.name,i,!0);if(!o&&r.hasExtensionElements()){const e=(0,a.firstOf)(r.extensions());(0,a.assert)(e,"`hasExtensionElements` should not have been `true`"),s.setOfExtension(e)}return[]}addDefinitionsToSchema(e,t){const n=e.coreFeatures;if(n)return n.coreItself.url.identity===this.identity?[]:[c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Cannot add feature ${this} to the schema, it already uses ${n.coreItself.url}`)];const i=null!=t?t:this.url.name;return this.directiveDefinitionSpec.checkOrAdd(e,i)}allElementNames(){const e=[`@${this.url.name}`];return this.supportPurposes()&&e.push("Purpose"),this.supportImport()&&e.push("Import"),e}supportPurposes(){return this.version.strictlyGreaterThan(new I(0,1))}supportImport(){return this.url.name===t.linkDirectiveDefaultName}extractFeature(e){const t=e.coreFeatures;if(!t)throw f("Schema is not a core schema (add @core first)");if(!t.coreItself.url.version.equals(this.version))throw f(`Cannot use this version of @core (${this.version}), the schema uses version ${t.coreItself.url.version}`);return t.coreItself}coreDirective(e){const t=this.extractFeature(e);return e.directive(t.nameInSchema)}coreVersion(e){return this.extractFeature(e).url.version}applyFeatureToSchema(e,t,n,i){const r=this.coreDirective(e),o={[this.urlArgName()]:t.toString(),as:n};return this.supportPurposes()&&i&&(o.for=i),e.schemaDefinition.applyDirective(r,o),t.addElementsToSchema(e)}extractFeatureUrl(e){return N.parse(e[this.urlArgName()])}urlArgName(){return"core"===this.url.name?"feature":"url"}}t.CoreSpecDefinition=T;class g{constructor(e){this.identity=e,this._definitions=[]}add(e){if(e.identity!==this.identity)throw f(`Cannot add definition for ${e} to the versions of definitions for ${this.identity}`);return this._definitions.find((t=>e.version.equals(t.version)))||(this._definitions.push(e),this._definitions.sort(((e,t)=>-e.version.compareTo(t.version)))),this}find(e){return this._definitions.find((t=>t.version.satisfies(e)))}versions(){return this._definitions.map((e=>e.version))}latest(){return(0,a.assert)(this._definitions.length>0,"Trying to get latest when no definitions exist"),this._definitions[0]}}t.FeatureDefinitions=g;class I{constructor(e,t){this.major=e,this.minor=t}static parse(e){const t=e.match(this.VERSION_RE);if(!t)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Expected a version string (of the form v1.2), got ${e}`);return new this(+t[1],+t[2])}satisfies(e){const{major:t,minor:n}=this,{major:i,minor:r}=e;return i==t&&(0==t?r==n:r<=n)}get series(){const{major:e}=this;return e>0?`${e}.x`:String(this)}compareTo(e){return this.major>e.major?1:this.major<e.major?-1:this.minor>e.minor?1:this.minor<e.minor?-1:0}strictlyGreaterThan(e){return this.compareTo(e)>0}toString(){return`v${this.major}.${this.minor}`}equals(e){return this.major===e.major&&this.minor===e.minor}}t.FeatureVersion=I,I.VERSION_RE=/^v(\d+)\.(\d+)$/;class N{constructor(e,t,n,i){this.identity=e,this.name=t,this.version=n,this.element=i}static parse(e,t){const n=new r.URL(e);if(!n.pathname||"/"===n.pathname)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing path in feature url '${n}'`,{nodes:t});const i=n.pathname.split("/"),o=i.pop();if(!o)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing version component in feature url '${n}'`,{nodes:t});const s=I.parse(o),a=i[i.length-1];if(!a)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing feature name component in feature url '${n}'`,{nodes:t});const l=n.hash?n.hash.slice(1):void 0;return n.hash="",n.search="",n.password="",n.username="",n.pathname=i.join("/"),new N(n.toString(),a,s,l)}static decode(e){return this.parse(e.value,e)}satisfies(e){return e.identity===this.identity&&this.version.satisfies(e.version)}equals(e){return this.identity===e.identity&&this.version.equals(e.version)}get url(){return this.element?`${this.identity}/${this.version}#${this.element}`:`${this.identity}/${this.version}`}get isDirective(){var e;return null===(e=this.element)||void 0===e?void 0:e.startsWith("@")}get elementName(){var e;return this.isDirective?null===(e=this.element)||void 0===e?void 0:e.slice(1):this.element}get base(){return this.element?new N(this.identity,this.name,this.version):this}toString(){return this.url}}t.FeatureUrl=N,t.findCoreSpecVersion=function(e){return"core"===e.name?t.CORE_VERSIONS.find(e.version):e.name===t.linkDirectiveDefaultName?t.LINK_VERSIONS.find(e.version):void 0},t.CORE_VERSIONS=new g(t.coreIdentity).add(new T(new I(0,1),t.coreIdentity,"core")).add(new T(new I(0,2),t.coreIdentity,"core")),t.LINK_VERSIONS=new g(t.linkIdentity).add(new T(new I(1,0))),(0,u.registerKnownFeature)(t.CORE_VERSIONS),(0,u.registerKnownFeature)(t.LINK_VERSIONS),t.removeAllCoreFeatures=function(e){var t,n;const i=[...null!==(n=null===(t=e.coreFeatures)||void 0===t?void 0:t.allFeatures())&&void 0!==n?n:[]],r=[];for(const t of i)e.directives().filter((e=>t.isFeatureDefinition(e))).forEach((e=>e.remove().forEach((e=>e.remove())))),e.types().filter((e=>t.isFeatureDefinition(e))).forEach((e=>{const n=e.remove();n.length>0&&r.push({feature:t,type:e,references:n})}));const s=[];for(const{feature:e,type:t,references:n}of r){const i=n.filter((e=>e.isAttached()));i.length>0&&s.push(c.ERRORS.REFERENCED_INACCESSIBLE.err(`Cannot remove elements of feature ${e} as feature type ${t} is referenced by elements: ${i.join(", ")}`,{nodes:(0,o.sourceASTs)(...n)}))}if(s.length>0)throw(0,o.ErrGraphQLAPISchemaValidationFailed)(s)}},2116:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DebugLogger=t.newDebugLogger=void 0;const r=i(n(4061)),o=n(9724);function s(e){let t="";for(let n=0;n<e;n++)t+=r.default.blackBright("⎸ ");return t}let a=0,c="",l=0;const u=[];t.newDebugLogger=function(e){const t=function(e){const t=process.env.APOLLO_FEDERATION_DEBUG,n=(0,o.validateStringContainsBoolean)(t);return void 0!==n?n:t.split(",").map((e=>e.trim())).includes(e)}(e),i=new p(e,t);if(t){n.g.console=n(5108),u.push(i),l=Math.max(l,e.length);for(const e of u)p.prototype.updateHeader.call(e,l)}return i};class p{constructor(e,t){this.name=e,this.enabled=t,this.header=r.default.blackBright(`[${e}] `)}updateHeader(e){let t="";if(e>this.name.length){const n=e-this.name.length;for(let e=0;e<n;e++)t+=" "}this.header=r.default.blackBright("["+t+this.name+"] ")}doLog(e){const t=this.header+c,n=e.replace(/\n/g,"\n"+t+"  ");console.log(t+n)}log(e,t=r.default.yellow("• ")){return this.enabled?("string"!=typeof e&&(e=e()),this.doLog(t+e),this):this}groupedValues(e,t,n){if(!this.enabled)return this;this.group(n);for(const n of e)this.doLog("- "+t(n));return this.groupEnd()}groupedEntries(e,t,n){if(!this.enabled)return this;this.group();for(const[i,r]of e.entries())this.doLog("- "+t(i)+": "+n(r));return this.groupEnd()}group(e){return this.enabled&&(e&&this.log(e,r.default.blue("‣ ")),a++,c=s(a)),this}groupEnd(e){return this.enabled?(a>0&&(a--,c=s(a)),e&&this.log(e,r.default.green("⇒ ")),this):this}}t.DebugLogger=p},4177:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CoreFeatures=t.CoreFeature=t.defaultSchemaBlueprint=t.SchemaBlueprint=t.NamedSchemaElementWithType=t.NamedSchemaElement=t.SchemaElement=t.Extension=t.sourceASTs=t.DirectiveTargetElement=t.isLeafType=t.typeFromAST=t.typeToAST=t.isTypeSystemDirectiveLocation=t.typeSystemDirectiveLocations=t.isExecutableDirectiveLocation=t.executableDirectiveLocations=t.isConditionalDirective=t.runtimeTypesIntersects=t.possibleRuntimeTypes=t.isCompositeType=t.isAbstractType=t.isNullableType=t.baseType=t.filterTypesOfKind=t.isTypeOfKind=t.isInputType=t.isOutputType=t.isInputObjectType=t.isUnionType=t.isEnumType=t.isInterfaceType=t.isObjectType=t.isIDType=t.isBooleanType=t.isFloatType=t.isStringType=t.isIntType=t.isCustomScalarType=t.isScalarType=t.isNonNullType=t.isListType=t.isWrapperType=t.isNamedType=t.isSchemaRootType=t.defaultRootName=t.allSchemaRootKinds=t.typenameFieldName=t.ErrGraphQLAPISchemaValidationFailed=t.ErrGraphQLValidationFailed=void 0,t.copyDirectiveDefinitionToSchema=t.newNamedType=t.variableDefinitionFromAST=t.variableDefinitionsFromAST=t.VariableDefinitions=t.VariableDefinition=t.variablesInArguments=t.isVariable=t.containsVariable=t.mergeVariables=t.Variable=t.directiveApplicationsSubstraction=t.isDirectiveApplicationsSubset=t.sameDirectiveApplications=t.sameDirectiveApplication=t.Directive=t.DirectiveDefinition=t.EnumValue=t.ArgumentDefinition=t.InputFieldDefinition=t.FieldDefinition=t.NonNullType=t.ListType=t.InputObjectType=t.EnumType=t.UnionType=t.UnionMember=t.InterfaceType=t.ObjectType=t.InterfaceImplementation=t.ScalarType=t.SchemaDefinition=t.RootType=t.Schema=void 0;const i=n(8929),r=n(9209),o=n(9724),s=n(3421),a=n(5322),c=n(2850),l=n(5811),u=n(9495),p=n(9504),d=n(4710),f=n(5663),h=n(3208),m=n(5388),y=n(8116);function v(e){return e.charAt(0).toUpperCase()+e.slice(1)}function E(e){return T(e)||g(e)}function T(e){return"ListType"==e.kind}function g(e){return"NonNullType"==e.kind}function I(e){return"ScalarType"==e.kind}function N(e){return"ObjectType"==e.kind}function b(e){return"InterfaceType"==e.kind}function _(e){return"EnumType"==e.kind}function S(e){return"UnionType"==e.kind}function O(e){switch(w(e).kind){case"ScalarType":case"ObjectType":case"UnionType":case"EnumType":case"InterfaceType":return!0;default:return!1}}function D(e){switch(w(e).kind){case"ScalarType":case"EnumType":case"InputObjectType":return!0;default:return!1}}function A(e,t){return e.kind===t}function R(e,t){return e.reduce(((e,n)=>(A(n,t)&&e.push(n),e)),[])}function w(e){return E(e)?e.baseType():e}function L(e){switch(e.kind){case"InterfaceType":return e.possibleRuntimeTypes();case"UnionType":return e.types();case"ObjectType":return[e]}}t.ErrGraphQLValidationFailed=(e,t="The schema is not a valid GraphQL schema.")=>(0,y.aggregateError)("GraphQLValidationFailed",t,e),t.ErrGraphQLAPISchemaValidationFailed=e=>(0,y.aggregateError)("GraphQLAPISchemaValidationFailed","The supergraph schema failed to produce a valid API schema",e),t.typenameFieldName="__typename",t.allSchemaRootKinds=["query","mutation","subscription"],t.defaultRootName=v,t.isSchemaRootType=function(e){return N(e)&&e.isRootType()},t.isNamedType=function(e){return e instanceof B},t.isWrapperType=E,t.isListType=T,t.isNonNullType=g,t.isScalarType=I,t.isCustomScalarType=function(e){return I(e)&&!X.includes(e.name)},t.isIntType=function(e){return e===e.schema().intType()},t.isStringType=function(e){return e===e.schema().stringType()},t.isFloatType=function(e){return e===e.schema().floatType()},t.isBooleanType=function(e){return e===e.schema().booleanType()},t.isIDType=function(e){return e===e.schema().idType()},t.isObjectType=N,t.isInterfaceType=b,t.isEnumType=_,t.isUnionType=S,t.isInputObjectType=function(e){return"InputObjectType"==e.kind},t.isOutputType=O,t.isInputType=D,t.isTypeOfKind=A,t.filterTypesOfKind=R,t.baseType=w,t.isNullableType=function(e){return!g(e)},t.isAbstractType=function(e){return b(e)||S(e)},t.isCompositeType=function(e){return N(e)||b(e)||S(e)},t.possibleRuntimeTypes=L,t.runtimeTypesIntersects=function(e,t){const n=L(e),i=L(t);for(const e of n)if(i.some((t=>e.name===t.name)))return!0;return!1},t.isConditionalDirective=function(e){return["include","skip"].includes(e.name)},t.executableDirectiveLocations=[i.DirectiveLocation.QUERY,i.DirectiveLocation.MUTATION,i.DirectiveLocation.SUBSCRIPTION,i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_DEFINITION,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT,i.DirectiveLocation.VARIABLE_DEFINITION];const F=new Set(t.executableDirectiveLocations);function x(e){return F.has(e)}t.isExecutableDirectiveLocation=x,t.typeSystemDirectiveLocations=[i.DirectiveLocation.SCHEMA,i.DirectiveLocation.SCALAR,i.DirectiveLocation.OBJECT,i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.INPUT_FIELD_DEFINITION];const k=new Set(t.typeSystemDirectiveLocations);function $(e){return k.has(e)}function C(e){switch(e.kind){case"ListType":return{kind:i.Kind.LIST_TYPE,type:C(e.ofType)};case"NonNullType":return{kind:i.Kind.NON_NULL_TYPE,type:C(e.ofType)};default:return{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:e.name}}}}function j(e,t){switch(t.kind){case i.Kind.LIST_TYPE:return new de(j(e,t.type));case i.Kind.NON_NULL_TYPE:return new fe(j(e,t.type));default:const n=e.type(t.name.value);if(!n)throw y.ERRORS.INVALID_GRAPHQL.err(`Unknown type "${t.name.value}"`,{nodes:t});return n}}t.isTypeSystemDirectiveLocation=$,t.typeToAST=C,t.typeFromAST=j,t.isLeafType=function(e){return I(e)||_(e)};class M{constructor(e){this._schema=e}schema(){return this._schema}appliedDirectivesOf(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.filter((e=>e.name==t))}get appliedDirectives(){var e;return null!==(e=this._appliedDirectives)&&void 0!==e?e:[]}hasAppliedDirective(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.some((e=>e.name==t))}applyDirective(e,t){let n;if(e instanceof Te){if(e.schema()!=this.schema())throw new Error(`Cannot add directive ${e} to ${this} as it is attached to another schema`);n=e,t&&n.setArguments(t)}else n=new Te(e.name,null!=t?t:Object.create(null));return P.prototype.setParent.call(n,this),this._appliedDirectives?this._appliedDirectives.push(n):this._appliedDirectives=[n],n}appliedDirectivesToDirectiveNodes(){if(0!=this.appliedDirectives.length)return this.appliedDirectives.map((e=>({kind:i.Kind.DIRECTIVE,name:{kind:i.Kind.NAME,value:e.name},arguments:e.argumentsToAST()})))}appliedDirectivesToString(){return 0==this.appliedDirectives.length?"":" "+this.appliedDirectives.join(" ")}variablesInAppliedDirectives(){return this.appliedDirectives.reduce(((e,t)=>Ne(e,_e(t.arguments()))),[])}}t.DirectiveTargetElement=M,t.sourceASTs=function(...e){return e.map((e=>null==e?void 0:e.sourceAST)).filter((e=>void 0!==e))};class P{schema(){const e=this.schemaInternal();return(0,o.assert)(e,"requested schema does not exist. Probably because the element is unattached"),e}schemaInternal(){if(this._parent)return this._parent instanceof Z?this._parent:this._parent instanceof V?this._parent.schemaInternal():this._parent instanceof M?this._parent.schema():void(0,o.assert)(!1,"unreachable code. parent is of unknown type")}get parent(){return(0,o.assert)(this._parent,"trying to access non-existent parent"),this._parent}isAttached(){return!!this._parent}setParent(e){(0,o.assert)(!this._parent,"Cannot set parent of an already attached element"),this._parent=e,this.onAttached()}onAttached(){}checkUpdate(){(0,o.assert)(this.isAttached(),(()=>`Cannot modify detached element ${this}`))}}class U{get extendedElement(){return this._extendedElement}setExtendedElement(e){(0,o.assert)(!this._extendedElement,"Cannot attached already attached extension"),this._extendedElement=e}}t.Extension=U;class V extends P{addUnappliedDirective({nameOrDef:e,args:t,extension:n,directive:i}){const r={nameOrDef:e,args:null!=t?t:{},extension:n,directive:i};this._unappliedDirectives?this._unappliedDirectives.push(r):this._unappliedDirectives=[r]}processUnappliedDirectives(){var e;for(const{nameOrDef:t,args:n,extension:i,directive:r}of null!==(e=this._unappliedDirectives)&&void 0!==e?e:[]){const e=this.applyDirective(t,n);e.setOfExtension(i),e.sourceAST=r}this._unappliedDirectives=void 0}get appliedDirectives(){var e;return null!==(e=this._appliedDirectives)&&void 0!==e?e:[]}appliedDirectivesOf(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.filter((e=>e.name==t))}hasAppliedDirective(e){return 0!==this.appliedDirectivesOf(e).length}applyDirective(e,n,i=!1){var r;let o;if("string"==typeof e){this.checkUpdate();const i=null!==(r=this.schema().directive(e))&&void 0!==r?r:this.schema().blueprint.onMissingDirectiveDefinition(this.schema(),e,n);if(!i)throw this.schema().blueprint.onGraphQLJSValidationError(this.schema(),y.ERRORS.INVALID_GRAPHQL.err(`Unknown directive "@${e}".`));if(Array.isArray(i))throw(0,t.ErrGraphQLValidationFailed)(i);o=e}else this.checkUpdate(e),o=e.name;const s=new Te(o,null!=n?n:Object.create(null));return P.prototype.setParent.call(s,this),this._appliedDirectives?i?this._appliedDirectives.unshift(s):this._appliedDirectives.push(s):this._appliedDirectives=[s],Ee.prototype.addReferencer.call(s.definition,s),this.onModification(),s}removeAppliedDirectives(){this._appliedDirectives&&this._appliedDirectives.concat().forEach((e=>e.remove()))}onModification(){const e=this.schemaInternal();e&&Z.prototype.onModification.call(e)}isElementBuiltIn(){return!1}removeTypeReferenceInternal(e){this.removeTypeReference(e)}checkRemoval(){(0,o.assert)(!this.isElementBuiltIn()||Z.prototype.canModifyBuiltIn.call(this.schema()),(()=>`Cannot modify built-in ${this}`))}checkUpdate(e){if(super.checkUpdate(),!Z.prototype.canModifyBuiltIn.call(this.schema())){let e=this;for(;e&&e instanceof V;)(0,o.assert)(!e.isElementBuiltIn(),(()=>`Cannot modify built-in (or part of built-in) ${this}`)),e=e.parent}if(e&&e.isAttached()){const t=e.schema();(0,o.assert)(!t||t===this.schema(),(()=>`Cannot add element ${e} to ${this} as it is attached to another schema`))}}}t.SchemaElement=V;class G extends V{constructor(e){super(),this._name=e}get name(){return this._name}}t.NamedSchemaElement=G;class B extends G{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.preserveEmptyDefinition=!1}addReferencer(e){this._referencers?this._referencers.includes(e)||this._referencers.push(e):this._referencers=[e]}removeReferencer(e){this._referencers&&(0,o.removeArrayElement)(e,this._referencers)}get coordinate(){return this.name}*allChildElements(){}extensions(){var e;return null!==(e=this._extensions)&&void 0!==e?e:[]}hasExtension(e){var t,n;return null!==(n=null===(t=this._extensions)||void 0===t?void 0:t.includes(e))&&void 0!==n&&n}newExtension(){return this.addExtension(new U)}addExtension(e){return this.checkUpdate(),this.hasExtension(e)||((0,o.assert)(!e.extendedElement,(()=>`Cannot add extension to type ${this}: it is already added to another type`)),this._extensions?this._extensions.push(e):this._extensions=[e],U.prototype.setExtendedElement.call(e,this),this.onModification()),e}removeExtensions(){if(this._extensions){this._extensions=void 0;for(const e of this.appliedDirectives)e.removeOfExtension();this.removeInnerElementsExtensions()}}isIntrospectionType(){return(0,u.isIntrospectionName)(this.name)}hasExtensionElements(){return!!this._extensions}hasNonExtensionElements(){return this.preserveEmptyDefinition||this.appliedDirectives.some((e=>void 0===e.ofExtension()))||this.hasNonExtensionInnerElements()}isElementBuiltIn(){return this.isBuiltIn}rename(e){this.checkUpdate();const t=this._name;this._name=e,Z.prototype.renameTypeInternal.call(this._parent,t,e),this.onModification()}remove(){var e,t;if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.removeAppliedDirectives(),this.removeInnerElements();const n=null!==(t=null===(e=this._referencers)||void 0===e?void 0:e.map((e=>(V.prototype.removeTypeReferenceInternal.call(e,this),e))))&&void 0!==t?t:[];return this._referencers=void 0,Z.prototype.removeTypeInternal.call(this._parent,this),this._parent=void 0,n}removeRecursive(){this.remove().forEach((e=>this.removeReferenceRecursive(e)))}referencers(){var e;return null!==(e=this._referencers)&&void 0!==e?e:[]}isReferenced(){return!!this._referencers}toString(){return this.name}}class Q extends G{get type(){return this._type}set type(e){e?this.checkUpdate(e):this.checkRemoval(),this._type&&Re(this,this._type),this._type=e,e&&Ae(this,e)}removeTypeReference(e){(0,o.assert)(this._type&&w(this._type)===e,(()=>`Cannot remove reference to type ${e} on ${this} as its type is ${this._type}`)),this._type=void 0}}t.NamedSchemaElementWithType=Q;class K extends P{ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot set object as part of the provided extension: it is not an extension of parent ${this.parent}`)),this._extension=e}remove(){this.removeInner(),Z.prototype.onModification.call(this.schema()),this._extension=void 0,this._parent=void 0}}class q{onMissingDirectiveDefinition(e,t,n){}onDirectiveDefinitionAndSchemaParsed(e){return[]}ignoreParsedField(e,t){return!1}onConstructed(e){}onAddedCoreFeature(e,t){}onInvalidation(e){}onValidation(e){return[]}validationRules(){return d.specifiedSDLRules}onGraphQLJSValidationError(e,t){var n;const i=/^Unknown directive "@(?<directive>[_A-Za-z][_0-9A-Za-z]*)"\.$/.exec(t.message),r=null===(n=null==i?void 0:i.groups)||void 0===n?void 0:n.directive;if(!r)return t;const o=e.allDirectives().map((e=>e.name)),s=(0,m.suggestionList)(r,o);return 0===s.length?this.onUnknownDirectiveValidationError(e,r,t):(0,y.withModifiedErrorMessage)(t,`${t.message}${(0,m.didYouMean)(s.map((e=>"@"+e)))}`)}onUnknownDirectiveValidationError(e,t,n){return n}applyDirectivesAfterParsing(){return!1}}t.SchemaBlueprint=q,t.defaultSchemaBlueprint=new q;class Y{constructor(e,t,n,i,r){this.url=e,this.nameInSchema=t,this.directive=n,this.imports=i,this.purpose=r}isFeatureDefinition(e){const t="DirectiveDefinition"===e.kind?"@"+e.name:e.name;return e.name.startsWith(this.nameInSchema+"__")||"DirectiveDefinition"===e.kind&&e.name===this.nameInSchema||!!this.imports.find((e=>{var n;return t===(null!==(n=e.as)&&void 0!==n?n:e.name)}))}directiveNameInSchema(e){var t,n;const i=this.imports.find((t=>"@"===t.name.charAt(0)&&t.name.slice(1)===e));return i?null!==(n=null===(t=i.as)||void 0===t?void 0:t.slice(1))&&void 0!==n?n:e:e===this.url.name?this.nameInSchema:this.nameInSchema+"__"+e}typeNameInSchema(e){var t;const n=this.imports.find((t=>t.name===e));return n?null!==(t=n.as)&&void 0!==t?t:e:this.nameInSchema+"__"+e}}t.CoreFeature=Y;class H{constructor(e){this.coreItself=e,this.byAlias=new Map,this.byIdentity=new Map,this.add(e);const t=(0,r.findCoreSpecVersion)(e.url);if(!t)throw y.ERRORS.UNKNOWN_LINK_VERSION.err(`Schema uses unknown version ${e.url.version} of the ${e.url.name} spec`);this.coreDefinition=t}getByIdentity(e){return this.byIdentity.get(e)}allFeatures(){return this.byIdentity.values()}removeFeature(e){const t=this.byIdentity.get(e);t&&(this.byIdentity.delete(e),this.byAlias.delete(t.nameInSchema))}maybeAddFeature(e){var t,n;if((null===(t=e.definition)||void 0===t?void 0:t.name)!==this.coreItself.nameInSchema)return;const i=e,o=i.arguments(),s=this.coreDefinition.extractFeatureUrl(o);if(this.byIdentity.get(s.identity))throw y.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Duplicate inclusion of feature ${s.identity}`);const a=(0,r.extractCoreFeatureImports)(s,i),c=new Y(s,null!==(n=o.as)&&void 0!==n?n:s.name,e,a,o.for);return this.add(c),e.schema().blueprint.onAddedCoreFeature(e.schema(),c),c}add(e){this.byAlias.set(e.nameInSchema,e),this.byIdentity.set(e.url.identity,e)}sourceFeature(e){var t,n;const i=e instanceof Ee||e instanceof Te,r=e.name.split("__");if(r.length>1){const e=this.byAlias.get(r[0]);return e?{feature:e,nameInFeature:r[1],isImported:!1}:void 0}{const r=this.byAlias.get(e.name);if(r&&i)return{feature:r,nameInFeature:null!==(n=null===(t=r.imports.find((t=>t.as===`@${e.name}`)))||void 0===t?void 0:t.name.slice(1))&&void 0!==n?n:e.name,isImported:!0};const o=i?"@"+e.name:e.name,s=[this.coreItself,...this.byIdentity.values()];for(const e of s)for(const{as:t,name:n}of e.imports)if((null!=t?t:n)===o)return{feature:e,nameInFeature:n.slice(1),isImported:!0};return}}}t.CoreFeatures=H;const X=["Int","Float","String","Boolean","ID"],z=X.map((e=>(0,h.createScalarTypeSpecification)({name:e}))),J=[(0,h.createDirectiveSpecification)({name:"include",locations:[i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"if",type:new fe(e.booleanType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"skip",locations:[i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"if",type:new fe(e.booleanType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"deprecated",locations:[i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.INPUT_FIELD_DEFINITION],argumentFct:e=>({args:[{name:"reason",type:e.stringType(),defaultValue:"No longer supported"}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"specifiedBy",locations:[i.DirectiveLocation.SCALAR],argumentFct:e=>({args:[{name:"url",type:new fe(e.stringType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"defer",locations:[i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"label",type:e.stringType()},{name:"if",type:new fe(e.booleanType()),defaultValue:!0}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"stream",locations:[i.DirectiveLocation.FIELD],argumentFct:e=>({args:[{name:"label",type:e.stringType()},{name:"initialCount",type:e.intType(),defaultValue:0},{name:"if",type:new fe(e.booleanType()),defaultValue:!0}],errors:[]})})],W=/^@?[_A-Za-z][_0-9A-Za-z]*(\.[_A-Za-z][_0-9A-Za-z]*)?(\([_A-Za-z][_0-9A-Za-z]*:\))?$/;class Z{constructor(e=t.defaultSchemaBlueprint,n={}){this.blueprint=e,this.config=n,this._builtInTypes=new o.MapWithCachedArrays,this._types=new o.MapWithCachedArrays,this._builtInDirectives=new o.MapWithCachedArrays,this._directives=new o.MapWithCachedArrays,this.isConstructed=!1,this.isValidated=!1,this._schemaDefinition=new te,P.prototype.setParent.call(this._schemaDefinition,this),z.forEach((e=>e.checkOrAdd(this,void 0,!0))),J.forEach((e=>e.checkOrAdd(this,void 0,!0))),e.onConstructed(this),this.isConstructed=!0}canModifyBuiltIn(){return!this.isConstructed}runWithBuiltInModificationAllowed(e){const t=this.isConstructed;this.isConstructed=!1,e(),this.isConstructed=t}renameTypeInternal(e,t){this._types.set(t,this._types.get(e)),this._types.delete(e)}removeTypeInternal(e){this._types.delete(e.name)}removeDirectiveInternal(e){this._directives.delete(e.name)}markAsCoreSchema(e){this._coreFeatures=new H(e)}unmarkAsCoreSchema(){this._coreFeatures=void 0}onModification(){this.isConstructed&&(this.invalidate(),this.cachedDocument=void 0,this.apiSchema=void 0)}isCoreSchema(){return void 0!==this.coreFeatures}get coreFeatures(){return this._coreFeatures}toAST(){var e;if(!this.cachedDocument){const t=(0,i.parse)((0,c.printSchema)(this),{noLocation:!0});if(null===(e=this.config.cacheAST)||void 0===e||!e)return t;this.cachedDocument=t}return this.cachedDocument}toAPISchema(){if(!this.apiSchema){this.validate();const e=this.clone();for(const t of["defer","stream"]){const n=e.directive(t);n&&!n.isBuiltIn&&n.removeRecursive()}(0,a.removeInaccessibleElements)(e),(0,r.removeAllCoreFeatures)(e),(0,o.assert)(!e.isCoreSchema(),"The API schema shouldn't be a core schema"),e.validate(),this.apiSchema=e}return this.apiSchema}emptyASTDefinitionsForExtensionsWithoutDefinition(){const e=[];if(this.schemaDefinition.hasExtensionElements()&&!this.schemaDefinition.hasNonExtensionElements()){const t={kind:i.Kind.SCHEMA_DEFINITION,operationTypes:[]};e.push(t)}for(const t of this.types())if(t.hasExtensionElements()&&!t.hasNonExtensionElements()){const n={kind:t.astDefinitionKind,name:{kind:i.Kind.NAME,value:t.name}};e.push(n)}return e}toGraphQLJSSchema(e){var t,n;const r=null!==(t=null==e?void 0:e.includeDefer)&&void 0!==t&&t,o=null!==(n=null==e?void 0:e.includeStream)&&void 0!==n&&n;let s=this.toAST();const a=this.emptyASTDefinitionsForExtensionsWithoutDefinition();r&&a.push(this.deferDirective().toAST()),o&&a.push(this.streamDirective().toAST()),a.length>0&&(s={kind:i.Kind.DOCUMENT,definitions:s.definitions.concat(a)});const c=(0,i.buildASTSchema)(s);if(a.length>0)for(const e of a)switch(e.kind){case i.Kind.SCHEMA_DEFINITION:c.astNode=void 0;break;case i.Kind.SCALAR_TYPE_DEFINITION:case i.Kind.OBJECT_TYPE_DEFINITION:case i.Kind.INTERFACE_TYPE_DEFINITION:case i.Kind.ENUM_TYPE_DEFINITION:case i.Kind.UNION_TYPE_DEFINITION:case i.Kind.INPUT_OBJECT_TYPE_DEFINITION:const t=c.getType(e.name.value);t&&(t.astNode=void 0)}return c}get schemaDefinition(){return this._schemaDefinition}types(){return this._types.values()}interfaceTypes(){return R(this.types(),"InterfaceType")}objectTypes(){return R(this.types(),"ObjectType")}unionTypes(){return R(this.types(),"UnionType")}scalarTypes(){return R(this.types(),"ScalarType")}inputTypes(){return R(this.types(),"InputObjectType")}enumTypes(){return R(this.types(),"EnumType")}builtInTypes(e=!1){const t=this._builtInTypes.values();return e?t:t.filter((e=>!this.isShadowedBuiltInType(e)))}isShadowedBuiltInType(e){return e.isBuiltIn&&this._types.has(e.name)}allTypes(){return this.builtInTypes().concat(this.types())}type(e){return this._types.get(e)||this._builtInTypes.get(e)}typeOfKind(e,t){const n=this.type(e);return n&&n.kind===t?n:void 0}intType(){return this._builtInTypes.get("Int")}floatType(){return this._builtInTypes.get("Float")}stringType(){return this._builtInTypes.get("String")}booleanType(){return this._builtInTypes.get("Boolean")}idType(){return this._builtInTypes.get("ID")}addType(e){const t=this.type(e.name);if(t&&(0,o.assert)(t.isBuiltIn,(()=>`Type ${e} already exists in this schema`)),e.isAttached())return(0,o.assert)(e.parent==this,(()=>`Cannot add type ${e} to this schema; it is already attached to another schema`)),e;e.isBuiltIn?((0,o.assert)(!this.isConstructed,`Cannot add built-in ${e} to this schema (built-ins can only be added at schema construction time)`),this._builtInTypes.set(e.name,e)):this._types.set(e.name,e),P.prototype.setParent.call(e,this);const n=function(e){if("ObjectType"===e.kind)switch(e.name){case"Query":return"query";case"Mutation":return"mutation";case"Subscription":return"subscription";default:return}}(e);return n&&!this.schemaDefinition.root(n)&&this.schemaDefinition.setRoot(n,e),this.onModification(),e}directives(){return this._directives.values()}builtInDirectives(e=!1){return e?this._builtInDirectives.values():this._builtInDirectives.values().filter((e=>!this.isShadowedBuiltInDirective(e)))}allDirectives(){return this.builtInDirectives().concat(this.directives())}isShadowedBuiltInDirective(e){return e.isBuiltIn&&this._directives.has(e.name)}directive(e){return this._directives.get(e)||this.builtInDirective(e)}builtInDirective(e){return this._builtInDirectives.get(e)}*allNamedSchemaElement(){for(const e of this.types())yield e,yield*e.allChildElements();for(const e of this.directives())yield e,yield*e.arguments()}*allSchemaElement(){yield this._schemaDefinition,yield*this.allNamedSchemaElement()}addDirectiveDefinition(e){const t="string"==typeof e?new Ee(e):e,n=this.directive(t.name);return(0,o.assert)(!n||n.isBuiltIn,(()=>`Directive ${t} already exists in this schema`)),t.isAttached()?((0,o.assert)(t.parent==this,(()=>`Cannot add directive ${t} to this schema; it is already attached to another schema`)),t):(t.isBuiltIn?((0,o.assert)(!this.isConstructed,(()=>`Cannot add built-in ${t} to this schema (built-ins can only be added at schema construction time)`)),this._builtInDirectives.set(t.name,t)):this._directives.set(t.name,t),P.prototype.setParent.call(t,this),this.onModification(),t)}invalidate(){this.isValidated&&this.blueprint.onInvalidation(this),this.isValidated=!1}validate(){if(this.isValidated)return;this.runWithBuiltInModificationAllowed((()=>{(0,u.addIntrospectionFields)(this)}));let e=(0,p.validateSDL)(this.toAST(),void 0,this.blueprint.validationRules()).map((e=>this.blueprint.onGraphQLJSValidationError(this,e)));if(e=e.concat((0,f.validateSchema)(this)),0===e.length&&this.runWithBuiltInModificationAllowed((()=>{e=this.blueprint.onValidation(this)})),e.length>0)throw(0,t.ErrGraphQLValidationFailed)(e);this.isValidated=!0}clone(e){const t=new Z(null!=e?e:this.blueprint);return function(e,t){for(const n of Le(e,t))t.addType(we(n.kind,n.name));for(const n of Fe(e,t))t.addDirectiveDefinition(n.name);for(const n of Fe(e,t))Ge(n,t.directive(n.name));!function(e,t){t.preserveEmptyDefinition=e.preserveEmptyDefinition;const n=xe(e,t);for(const i of e.roots())ke(n,i,t.setRoot(i.rootKind,i.type.name));for(const i of e.appliedDirectives)ke(n,i,je(i,t));t.description=e.description,t.sourceAST=e.sourceAST}(e.schemaDefinition,t.schemaDefinition);for(const n of Le(e,t))$e(n,t.type(n.name))}(this,t),this.isValidated&&t.validate(),t}getBuiltInDirective(e){const t=this.directive(e);return(0,o.assert)(t,`The provided schema has not be built with the ${e} directive built-in`),t}includeDirective(){return this.getBuiltInDirective("include")}skipDirective(){return this.getBuiltInDirective("skip")}deprecatedDirective(){return this.getBuiltInDirective("deprecated")}specifiedByDirective(){return this.getBuiltInDirective("specifiedBy")}deferDirective(){return this.getBuiltInDirective("defer")}streamDirective(){return this.getBuiltInDirective("stream")}elementByCoordinate(e){if(!e.match(W))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);const t=e.indexOf("("),n=t<0?e:e.slice(0,t),i=t<0?void 0:e.slice(t+1,e.length-2),r=n.split("."),o=r[0],s=r[1];if(o.startsWith("@")){if(s)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);const t=this.directive(o.slice(1));return i?null==t?void 0:t.argument(i):t}{const t=this.type(o);if(!t||!s)return t;switch(t.kind){case"ObjectType":case"InterfaceType":const n=t.field(s);return i?null==n?void 0:n.argument(i):n;case"InputObjectType":if(i)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);return t.field(s);case"EnumType":if(i)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);return t.value(s);default:throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`)}}}}t.Schema=Z;class ee extends K{constructor(e,t){super(),this.rootKind=e,this.type=t}isDefaultRootName(){return v(this.rootKind)==this.type.name}removeInner(){te.prototype.removeRootType.call(this._parent,this)}}t.RootType=ee;class te extends V{constructor(){super(...arguments),this.kind="SchemaDefinition",this._roots=new o.MapWithCachedArrays,this.preserveEmptyDefinition=!1}roots(){return this._roots.values()}applyDirective(e,t,n=!1){var i,o;const s=super.applyDirective(e,t,n),a=this.schema(),c=a.coreFeatures;if((0,r.isCoreSpecDirectiveApplication)(s)){if(c)throw y.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err("Invalid duplicate application of @core/@link");const e=s,t=e.arguments(),n=r.FeatureUrl.parse(null!==(i=t.url)&&void 0!==i?i:t.feature),l=(0,r.extractCoreFeatureImports)(n,e),u=new Y(n,null!==(o=t.as)&&void 0!==o?o:n.name,e,l,t.for);Z.prototype.markAsCoreSchema.call(a,u),this.appliedDirectives.filter((e=>e!==s)).forEach((e=>H.prototype.maybeAddFeature.call(a.coreFeatures,e)))}else c&&H.prototype.maybeAddFeature.call(c,s);return this.onModification(),s}root(e){return this._roots.get(e)}rootType(e){var t;return null===(t=this.root(e))||void 0===t?void 0:t.type}setRoot(e,t){let n;if("string"==typeof t){this.checkUpdate();const i=this.schema().type(t);if(!i)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot set schema ${e} root to unknown type ${t}`);if("ObjectType"!=i.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`${v(e)} root type must be an Object type${"query"===e?"":" if provided"}, it cannot be set to ${t} (an ${i.kind}).`);n=new ee(e,i)}else this.checkUpdate(t),n=new ee(e,t);const i=this._roots.get(e);return i&&Re(this,i.type),this._roots.set(e,n),P.prototype.setParent.call(n,this),Ae(this,n.type),this.onModification(),n}extensions(){var e;return null!==(e=this._extensions)&&void 0!==e?e:[]}hasExtension(e){var t,n;return null!==(n=null===(t=this._extensions)||void 0===t?void 0:t.includes(e))&&void 0!==n&&n}newExtension(){return this.addExtension(new U)}addExtension(e){return this.checkUpdate(),this.hasExtension(e)||((0,o.assert)(!e.extendedElement,"Cannot add extension to this schema: extension is already added to another schema"),this._extensions?this._extensions.push(e):this._extensions=[e],U.prototype.setExtendedElement.call(e,this),this.onModification()),e}hasExtensionElements(){return!!this._extensions}hasNonExtensionElements(){return this.preserveEmptyDefinition||this.appliedDirectives.some((e=>void 0===e.ofExtension()))||this.roots().some((e=>void 0===e.ofExtension()))}removeRootType(e){this._roots.delete(e.rootKind),Re(this,e.type)}removeTypeReference(e){for(const t of this.roots())t.type==e&&this._roots.delete(t.rootKind)}toString(){return`schema[${this._roots.keys().join(", ")}]`}}t.SchemaDefinition=te;class ne extends B{constructor(){super(...arguments),this.kind="ScalarType",this.astDefinitionKind=i.Kind.SCALAR_TYPE_DEFINITION}removeTypeReference(e){(0,o.assert)(!1,`Scalar type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}hasNonExtensionInnerElements(){return!1}removeInnerElementsExtensions(){}removeInnerElements(){}removeReferenceRecursive(e){e.remove()}}t.ScalarType=ne;class ie extends K{constructor(e){super(),this.interface=e}removeInner(){re.prototype.removeInterfaceImplementation.call(this._parent,this.interface)}toString(){return`'implements ${this.interface}'`}}t.InterfaceImplementation=ie;class re extends B{constructor(){super(...arguments),this._fields=new o.MapWithCachedArrays}onAttached(){Z.prototype.runWithBuiltInModificationAllowed.call(this.schema(),(()=>{this.addField(new he(t.typenameFieldName,!0),new fe(this.schema().stringType()))}))}removeFieldInternal(e){this._fields.delete(e.name),this._cachedNonBuiltInFields=void 0}interfaceImplementations(){var e,t;return null!==(t=null===(e=this._interfaceImplementations)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}interfaceImplementation(e){return this._interfaceImplementations?this._interfaceImplementations.get("string"==typeof e?e:e.name):void 0}interfaces(){return this.interfaceImplementations().map((e=>e.interface))}implementsInterface(e){var t,n;return null!==(n=null===(t=this._interfaceImplementations)||void 0===t?void 0:t.has("string"==typeof e?e:e.name))&&void 0!==n&&n}addImplementedInterface(e){var t;let n;if(e instanceof ie)this.checkUpdate(e),n=e;else{let t;if("string"==typeof e){this.checkUpdate();const n=this.schema().type(e);if(!n)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot implement unknown type ${e}`);if("InterfaceType"!=n.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot implement non-interface type ${e} (of type ${n.kind})`);t=n}else t=e;n=new ie(t)}return(null===(t=this._interfaceImplementations)||void 0===t?void 0:t.get(n.interface.name))||(this._interfaceImplementations||(this._interfaceImplementations=new o.MapWithCachedArrays),this._interfaceImplementations.set(n.interface.name,n),Ae(this,n.interface),P.prototype.setParent.call(n,this),this.onModification(),n)}fields(){return this._cachedNonBuiltInFields||(this._cachedNonBuiltInFields=this._fields.values().filter((e=>!e.isBuiltIn))),this._cachedNonBuiltInFields}hasFields(){return this.fields().length>0}builtInFields(){return this.allFields().filter((e=>e.isBuiltIn))}allFields(){return this._fields.values()}field(e){return this._fields.get(e)}typenameField(){return this.field(t.typenameFieldName)}addField(e,t){let n;if("string"==typeof e?(this.checkUpdate(),n=new he(e)):(this.checkUpdate(e),n=e),this.field(n.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Field ${n.name} already exists on ${this}`);if(t&&!O(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid input type ${t} for field ${n.name}: object and interface field types should be output types.`);return this._fields.set(n.name,n),this._cachedNonBuiltInFields=void 0,P.prototype.setParent.call(n,this),t&&(n.type=t),this.onModification(),n}*allChildElements(){for(const e of this._fields.values())yield e,yield*e.arguments()}removeInterfaceImplementation(e){var t;null===(t=this._interfaceImplementations)||void 0===t||t.delete(e.name),Re(this,e)}removeTypeReference(e){var t;null===(t=this._interfaceImplementations)||void 0===t||t.delete(e.name)}removeInnerElements(){for(const e of this.interfaceImplementations())e.remove();for(const e of this.allFields())e.isBuiltIn?he.prototype.removeParent.call(e):e.remove()}hasNonExtensionInnerElements(){return this.interfaceImplementations().some((e=>void 0===e.ofExtension()))||this.fields().some((e=>void 0===e.ofExtension()))}removeInnerElementsExtensions(){this.interfaceImplementations().forEach((e=>e.removeOfExtension())),this.fields().forEach((e=>e.removeOfExtension()))}}class oe extends re{constructor(){super(...arguments),this.kind="ObjectType",this.astDefinitionKind=i.Kind.OBJECT_TYPE_DEFINITION}isRootType(){return this.schema().schemaDefinition.roots().some((e=>e.type==this))}isQueryRootType(){var e;return(null===(e=this.schema().schemaDefinition.root("query"))||void 0===e?void 0:e.type)===this}removeReferenceRecursive(e){switch(e.kind){case"FieldDefinition":e.removeRecursive();break;case"UnionType":0===e.membersCount()&&e.removeRecursive()}}}t.ObjectType=oe;class se extends re{constructor(){super(...arguments),this.kind="InterfaceType",this.astDefinitionKind=i.Kind.INTERFACE_TYPE_DEFINITION}allImplementations(){return this.referencers().filter((e=>"ObjectType"===e.kind||"InterfaceType"===e.kind))}possibleRuntimeTypes(){return this.allImplementations().filter((e=>"ObjectType"===e.kind))}isPossibleRuntimeType(e){const t="string"==typeof e?e:e.name;return this.possibleRuntimeTypes().some((e=>e.name==t))}removeReferenceRecursive(e){"FieldDefinition"===e.kind&&e.removeRecursive()}}t.InterfaceType=se;class ae extends K{constructor(e){super(),this.type=e}removeInner(){ce.prototype.removeMember.call(this._parent,this.type)}}t.UnionMember=ae;class ce extends B{constructor(){super(...arguments),this.kind="UnionType",this.astDefinitionKind=i.Kind.UNION_TYPE_DEFINITION,this._members=new o.MapWithCachedArrays}onAttached(){Z.prototype.runWithBuiltInModificationAllowed.call(this.schema(),(()=>{this._typenameField=new he(t.typenameFieldName,!0),P.prototype.setParent.call(this._typenameField,this),this._typenameField.type=new fe(this.schema().stringType())}))}types(){return this.members().map((e=>e.type))}members(){return this._members.values()}membersCount(){return this._members.size}hasTypeMember(e){return this._members.has("string"==typeof e?e:e.name)}addType(e){let t;if(e instanceof ae)this.checkUpdate(e),t=e;else{let n;if("string"==typeof e){this.checkUpdate();const t=this.schema().type(e);if(!t)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot add unknown type ${e} as member of union type ${this.name}`);if("ObjectType"!=t.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot add non-object type ${e} (of type ${t.kind}) as member of union type ${this.name}`);n=t}else this.checkUpdate(e),n=e;t=new ae(n)}return this._members.get(t.type.name)||(this._members.set(t.type.name,t),P.prototype.setParent.call(t,this),Ae(this,t.type),this.onModification(),t)}clearTypes(){for(const e of this.types())this.removeMember(e);this.onModification()}field(e){if(e===t.typenameFieldName&&this._typenameField)return this._typenameField}typenameField(){return this._typenameField}removeMember(e){this._members.delete(e.name),Re(this,e)}removeTypeReference(e){this._members.delete(e.name)}removeInnerElements(){for(const e of this.members())e.remove()}hasNonExtensionInnerElements(){return this.members().some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){e.removeRecursive()}removeInnerElementsExtensions(){this.members().forEach((e=>e.removeOfExtension()))}}t.UnionType=ce;class le extends B{constructor(){super(...arguments),this.kind="EnumType",this.astDefinitionKind=i.Kind.ENUM_TYPE_DEFINITION,this._values=[]}get values(){return Array.from(this._values)}value(e){return this._values.find((t=>t.name===e))}addValue(e){let t;"string"==typeof e?(this.checkUpdate(),t=new ve(e)):(this.checkUpdate(e),t=e);return this.value(t.name)||(this._values.push(t),P.prototype.setParent.call(t,this),this.onModification(),t)}removeTypeReference(e){(0,o.assert)(!1,`Eum type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}removeValueInternal(e){(0,o.removeArrayElement)(e,this._values)}removeInnerElements(){const e=this.values;for(const t of e)t.remove()}hasNonExtensionInnerElements(){return this._values.some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){e.removeRecursive()}removeInnerElementsExtensions(){this._values.forEach((e=>e.removeOfExtension()))}}t.EnumType=le;class ue extends B{constructor(){super(...arguments),this.kind="InputObjectType",this.astDefinitionKind=i.Kind.INPUT_OBJECT_TYPE_DEFINITION,this._fields=new Map}fields(){return this._cachedFieldsArray||(this._cachedFieldsArray=(0,o.mapValues)(this._fields)),this._cachedFieldsArray}field(e){return this._fields.get(e)}addField(e,t){const n="string"==typeof e?new me(e):e;if(this.checkUpdate(n),this.field(n.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Field ${n.name} already exists on ${this}`);if(t&&!D(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid output type ${t} for field ${n.name}: input field types should be input types.`);return this._fields.set(n.name,n),this._cachedFieldsArray=void 0,P.prototype.setParent.call(n,this),"string"==typeof e&&t&&(n.type=t),this.onModification(),n}hasFields(){return this._fields.size>0}*allChildElements(){yield*this._fields.values()}removeTypeReference(e){(0,o.assert)(!1,`Input Object type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}removeInnerElements(){for(const e of this.fields())e.remove()}removeFieldInternal(e){this._fields.delete(e.name),this._cachedFieldsArray=void 0}hasNonExtensionInnerElements(){return this.fields().some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){"ArgumentDefinition"===e.kind?e.parent().removeRecursive():e.removeRecursive()}removeInnerElementsExtensions(){this.fields().forEach((e=>e.removeOfExtension()))}}t.InputObjectType=ue;class pe{constructor(e){this._type=e,(0,o.assert)(this._type,"Cannot wrap an undefined/null type")}schema(){return this.baseType().schema()}isAttached(){return this.baseType().isAttached()}get ofType(){return this._type}baseType(){return w(this._type)}}class de extends pe{constructor(e){super(e),this.kind="ListType"}toString(){return`[${this.ofType}]`}}t.ListType=de;class fe extends pe{constructor(e){super(e),this.kind="NonNullType"}toString(){return`${this.ofType}!`}}t.NonNullType=fe;class he extends Q{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.kind="FieldDefinition"}isElementBuiltIn(){return this.isBuiltIn}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}hasArguments(){return!!this._args&&this._args.size>0}arguments(){var e,t;return null!==(t=null===(e=this._args)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}argument(e){var t;return null===(t=this._args)||void 0===t?void 0:t.get(e)}addArgument(e,t,n){let i;"string"==typeof e?(this.checkUpdate(),i=new ye(e),i.defaultValue=n):(this.checkUpdate(e),i=e);const r=this.argument(i.name);if(r){if(t&&r.type&&!(0,l.sameType)(t,r.type))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name} with a different type (${r.type})`);if(n&&(!r.defaultValue||!(0,s.valueEquals)(n,r.defaultValue)))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name} with a different default value (${(0,s.valueToString)(r.defaultValue)})`);return r}if(t&&!D(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid output type ${t} for argument ${i.name} of ${this}: arguments should be input types.`);return this._args||(this._args=new o.MapWithCachedArrays),this._args.set(i.name,i),P.prototype.setParent.call(i,this),"string"==typeof e&&(i.type=t),this.onModification(),i}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`)),this._extension=e,this.onModification()}isIntrospectionField(){return(0,u.isIntrospectionName)(this.name)}isSchemaIntrospectionField(){return u.introspectionFieldNames.includes(this.name)}removeArgumentInternal(e){this._args&&this._args.delete(e)}removeParent(){this._parent=void 0}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.removeAppliedDirectives();for(const e of this.arguments())e.remove();return re.prototype.removeFieldInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]}removeRecursive(){const e=this._parent;this.remove(),e&&!S(e)&&0===e.fields().length&&e.removeRecursive()}toString(){const e=this.hasArguments()?"("+this.arguments().map((e=>e.toString())).join(", ")+")":"";return`${this.name}${e}: ${this.type}`}}t.FieldDefinition=he;class me extends Q{constructor(){super(...arguments),this.kind="InputFieldDefinition"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}isRequired(){return g(this.type)&&void 0===this.defaultValue}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`)),this._extension=e,this.onModification()}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.defaultValue=void 0,this.removeAppliedDirectives(),ue.prototype.removeFieldInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]):[]}removeRecursive(){const e=this._parent;this.remove(),e&&0===e.fields().length&&e.removeRecursive()}toString(){const e=void 0===this.defaultValue?"":` = ${(0,s.valueToString)(this.defaultValue,this.type)}`;return`${this.name}: ${this.type}${e}`}}t.InputFieldDefinition=me;class ye extends Q{constructor(e){super(e),this.kind="ArgumentDefinition"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}(${this.name}:)`}isRequired(){return g(this.type)&&void 0===this.defaultValue}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.defaultValue=void 0,this.removeAppliedDirectives(),this._parent instanceof he?he.prototype.removeArgumentInternal.call(this._parent,this.name):Ee.prototype.removeArgumentInternal.call(this._parent,this.name),this._parent=void 0,[]):[]}toString(){const e=void 0===this.defaultValue?"":` = ${(0,s.valueToString)(this.defaultValue,this.type)}`;return`${this.name}: ${this.type}${e}`}}t.ArgumentDefinition=ye;class ve extends G{constructor(){super(...arguments),this.kind="EnumValue"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of enum value parent type ${this.parent}`)),this._extension=e,this.onModification()}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.removeAppliedDirectives(),le.prototype.removeValueInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]):[]}removeTypeReference(e){(0,o.assert)(!1,`Enum value ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}toString(){return`${this.name}`}}t.EnumValue=ve;class Ee extends G{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.kind="DirectiveDefinition",this.repeatable=!1,this._locations=[]}get coordinate(){return`@${this.name}`}arguments(){var e,t;return null!==(t=null===(e=this._args)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}argument(e){var t;return null===(t=this._args)||void 0===t?void 0:t.get(e)}addArgument(e,t,n){let i;if("string"==typeof e?(this.checkUpdate(),i=new ye(e),i.defaultValue=n):(this.checkUpdate(e),i=e),this.argument(i.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name}`);return this._args||(this._args=new o.MapWithCachedArrays),this._args.set(i.name,i),P.prototype.setParent.call(i,this),"string"==typeof e&&(i.type=t),this.onModification(),i}removeArgumentInternal(e){var t;null===(t=this._args)||void 0===t||t.delete(e)}get locations(){return this._locations}addLocations(...e){let t=!1;for(const n of e)this._locations.includes(n)||(this._locations.push(n),t=!0);return t&&this.onModification(),this}addAllLocations(){return this.addLocations(...Object.values(i.DirectiveLocation))}addAllTypeLocations(){return this.addLocations(i.DirectiveLocation.SCALAR,i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.INPUT_OBJECT)}removeLocations(...e){let t=!1;for(const n of e)t||(t=(0,o.removeArrayElement)(n,this._locations));return t&&this.onModification(),this}hasExecutableLocations(){return this.locations.some((e=>x(e)))}hasTypeSystemLocations(){return this.locations.some((e=>$(e)))}applications(){var e;return null!==(e=this._referencers)&&void 0!==e?e:[]}addReferencer(e){(0,o.assert)(e,"Referencer should exists"),this._referencers?this._referencers.includes(e)||this._referencers.push(e):this._referencers=[e]}removeReferencer(e){this._referencers&&(0,o.removeArrayElement)(e,this._referencers)}removeTypeReference(e){(0,o.assert)(!1,`Directive definition ${this} can't reference other types (it's arguments can); shouldn't be asked to remove reference to ${e}`)}remove(){var e;if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,(0,o.assert)(!this._appliedDirectives||0===this._appliedDirectives.length,"Directive definition should not have directive applied to it");for(const e of this.arguments())e.remove();const t=null!==(e=this._referencers)&&void 0!==e?e:[];return this._referencers=void 0,Z.prototype.removeDirectiveInternal.call(this._parent,this),this._parent=void 0,t}removeRecursive(){this.remove().forEach((e=>e.remove()))}toAST(){return(0,i.parse)((0,c.printDirectiveDefinition)(this)).definitions[0]}toString(){return`@${this.name}`}}t.DirectiveDefinition=Ee;class Te extends P{constructor(e,t){super(),this.name=e,this._args=t}schema(){return this.parent.schema()}get definition(){if(this.isAttached())return this.schema().directive(this.name)}arguments(e=!1){if(!e)return this._args;const t=this.definition;(0,o.assert)(t,(()=>`Cannot include default values for arguments: cannot find directive definition for ${this.name}`));const n=Object.create(null);for(const e of t.arguments()){const t=(0,s.withDefaultValues)(this._args[e.name],e);void 0!==t&&(n[e.name]=t)}return n}onModification(){this.isAttachedToSchemaElement()&&Z.prototype.onModification.call(this.schema())}isAttachedToSchemaElement(){return this.isAttached()}setArguments(e){this._args=e,this.onModification()}argumentType(e){var t,n;return null===(n=null===(t=this.definition)||void 0===t?void 0:t.argument(e))||void 0===n?void 0:n.type}matchArguments(e){const t=Object.entries(this._args);if(t.length!==Object.keys(e).length)return!1;for(const[n,i]of t){if(!(n in e))return!1;const t=e[n];if(!(0,s.valueEquals)(t,i))return!1}return!0}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){if(this.checkUpdate(),e){const t=this.parent;(0,o.assert)(t instanceof te||t instanceof B,"Can only mark directive parts of extensions when directly apply to type or schema definition."),(0,o.assert)(t.hasExtension(e),(()=>`Cannot mark directive ${this.name} as part of the provided extension: it is not an extension of parent ${t}`))}this._extension=e,this.onModification()}argumentsToAST(){const e=Object.entries(this._args);if(0===e.length)return;const t=this.definition;return(0,o.assert)(t,(()=>`Cannot convert arguments of detached directive ${this}`)),e.map((([e,n])=>({kind:i.Kind.ARGUMENT,name:{kind:i.Kind.NAME,value:e},value:(0,s.valueToAST)(n,t.argument(e).type)})))}remove(){if(!this._parent)return!1;this.onModification();const e=this.schema().coreFeatures;if(e&&this.name===e.coreItself.nameInSchema){const t=r.FeatureUrl.parse(this._args[e.coreDefinition.urlArgName()]);if(t.identity===e.coreItself.url.identity){Z.prototype.unmarkAsCoreSchema.call(this.schema());for(const t of this.schema().schemaDefinition.appliedDirectivesOf(e.coreItself.nameInSchema))t.removeInternal();return!0}H.prototype.removeFeature.call(e,t.identity)}return this.removeInternal()}removeInternal(){if(!this._parent)return!1;const e=this.definition;e&&this.isAttachedToSchemaElement()&&Ee.prototype.removeReferencer.call(e,this);const t=this._parent.appliedDirectives,n=(0,o.removeArrayElement)(this,t);return(0,o.assert)(n,(()=>`Directive ${this} lists ${this._parent} as parent, but that parent doesn't list it as applied directive`)),this._parent=void 0,this._extension=void 0,!0}toString(){const e=Object.entries(this._args).filter((([e,t])=>void 0!==t)),t=0==e.length?"":"("+e.map((([e,t])=>`${e}: ${(0,s.valueToString)(t,this.argumentType(e))}`)).join(", ")+")";return`@${this.name}${t}`}}function ge(e,t,n=["defer"]){return e.name===t.name&&!n.includes(e.name)&&!n.includes(t.name)&&(0,s.argumentsEquals)(e.arguments(),t.arguments())}t.Directive=Te,t.sameDirectiveApplication=ge,t.sameDirectiveApplications=function(e,t,n=["defer"]){if(e.length!==t.length)return!1;for(const i of e)if(!t.some((e=>ge(i,e,n))))return!1;return!0},t.isDirectiveApplicationsSubset=function(e,t){if(t.length>e.length)return!1;for(const n of t)if(!e.some((e=>ge(n,e))))return!1;return!0},t.directiveApplicationsSubstraction=function(e,t){return e.filter((e=>!t.some((t=>ge(e,t)))))};class Ie{constructor(e){this.name=e}toVariableNode(){return{kind:i.Kind.VARIABLE,name:{kind:i.Kind.NAME,value:this.name}}}toString(){return"$"+this.name}}function Ne(e,t){if(0==e.length)return t;if(0==t.length)return e;const n=e.concat();for(const i of t)be(e,i)||n.push(i);return n}function be(e,t){return e.some((e=>e.name==t.name))}function _e(e){let t=[];for(const n of Object.values(e))t=Ne(t,(0,s.variablesInValue)(n));return t}t.Variable=Ie,t.mergeVariables=Ne,t.containsVariable=be,t.isVariable=function(e){return e instanceof Ie},t.variablesInArguments=_e;class Se extends M{constructor(e,t,n,i){super(e),this.variable=t,this.type=n,this.defaultValue=i}toVariableDefinitionNode(){const e=(0,s.valueToAST)(this.defaultValue,this.type);return{kind:i.Kind.VARIABLE_DEFINITION,variable:this.variable.toVariableNode(),type:C(this.type),defaultValue:void 0!==e?(0,s.valueNodeToConstValueNode)(e):void 0,directives:this.appliedDirectivesToDirectiveNodes()}}toString(){let e=this.variable+": "+this.type;return this.defaultValue&&(e=e+" = "+(0,s.valueToString)(this.defaultValue,this.type)),e+this.appliedDirectivesToString()}}t.VariableDefinition=Se;class Oe{constructor(){this._definitions=new o.MapWithCachedArrays}add(e){return!this._definitions.has(e.variable.name)&&(this._definitions.set(e.variable.name,e),!0)}addAll(e){for(const t of e._definitions.values())this.add(t)}definition(e){const t="string"==typeof e?e:e.name;return this._definitions.get(t)}isEmpty(){return 0===this._definitions.size}definitions(){return this._definitions.values()}filter(e){if(0===e.length)return new Oe;const t=new Oe;for(const n of e){const e=this.definition(n);if(!e)throw new Error(`Cannot find variable ${n} in definitions ${this}`);t.add(e)}return t}toVariableDefinitionNodes(){if(0!==this._definitions.size)return this.definitions().map((e=>e.toVariableDefinitionNode()))}toString(){return"("+this.definitions().join(", ")+")"}}function De(e,t){const n=new Ie(t.variable.name.value),i=j(e,t.type);if(!D(i))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid type "${i}" for variable $${n}: not an input type`,{nodes:t.type});return new Se(e,n,i,t.defaultValue?(0,s.valueFromAST)(t.defaultValue,i):void 0)}function Ae(e,t){switch(t.kind){case"ListType":case"NonNullType":Ae(e,t.baseType());break;default:B.prototype.addReferencer.call(t,e)}}function Re(e,t){switch(t.kind){case"ListType":case"NonNullType":Re(e,t.baseType());break;default:B.prototype.removeReferencer.call(t,e)}}function we(e,t){switch(e){case"ScalarType":return new ne(t);case"ObjectType":return new oe(t);case"InterfaceType":return new se(t);case"UnionType":return new ce(t);case"EnumType":return new le(t);case"InputObjectType":return new ue(t);default:(0,o.assert)(!1,`Unhandled kind ${e} for type ${t}`)}}function*Le(e,t){var n;for(const i of e.builtInTypes())i.isIntrospectionType()||(null===(n=t.type(i.name))||void 0===n?void 0:n.isBuiltIn)||(yield i);yield*e.types()}function*Fe(e,t){var n;for(const i of e.builtInDirectives())(null===(n=t.directive(i.name))||void 0===n?void 0:n.isBuiltIn)||(yield i);yield*e.directives()}function xe(e,t){const n=new Map;for(const i of e.extensions()){const e=new U;t.addExtension(e),n.set(i,e)}return n}function ke(e,t,n){const i=t.ofExtension();i&&n.setOfExtension(e.get(i))}function $e(e,t){t.preserveEmptyDefinition=e.preserveEmptyDefinition;const n=xe(e,t);for(const i of e.appliedDirectives)ke(n,i,je(i,t));switch(t.description=e.description,t.sourceAST=e.sourceAST,e.kind){case"ObjectType":case"InterfaceType":const i=t;for(const t of e.fields()){const e=i.addField(new he(t.name));ke(n,t,e),Me(t,e)}for(const t of e.interfaceImplementations())ke(n,t,i.addImplementedInterface(t.interface.name));break;case"UnionType":const r=t;for(const t of e.members())ke(n,t,r.addType(t.type.name));break;case"EnumType":const o=t;for(const t of e.values){const e=o.addValue(t.name);e.description=t.description,ke(n,t,e),Ce(t,e)}break;case"InputObjectType":const s=t;for(const t of e.fields()){const e=s.addField(new me(t.name));ke(n,t,e),Pe(t,e)}}}function Ce(e,t){e.appliedDirectives.forEach((e=>je(e,t)))}function je(e,t){const n=t.applyDirective(e.name,{...e.arguments()});return n.sourceAST=e.sourceAST,n}function Me(e,t){const n=Ue(e.type,t.schema());t.type=n;for(const n of e.arguments()){const e=Ue(n.type,t.schema());Ve(n,t.addArgument(n.name,e))}Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Pe(e,t){const n=Ue(e.type,t.schema());t.type=n,t.defaultValue=e.defaultValue,Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Ue(e,t){if(e)switch(e.kind){case"ListType":return new de(Ue(e.ofType,t));case"NonNullType":return new fe(Ue(e.ofType,t));default:return t.type(e.name)}}function Ve(e,t,n=!0){const i=Ue(e.type,t.schema());t.type=i,t.defaultValue=e.defaultValue,n&&Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Ge(e,t,n=!0,i){let r=e.locations;if(i&&(r=r.filter((e=>i(e)))),0!==r.length){for(const i of e.arguments()){const e=Ue(i.type,t.schema());Ve(i,t.addArgument(i.name,e),n)}t.repeatable=e.repeatable,t.addLocations(...r),t.sourceAST=e.sourceAST,t.description=e.description}}t.VariableDefinitions=Oe,t.variableDefinitionsFromAST=function(e,t){const n=new Oe;for(const i of t)if(!n.add(De(e,i))){const e=i.variable.name.value;throw y.ERRORS.INVALID_GRAPHQL.err(`Duplicate definition for variable ${e}`,{nodes:t.filter((t=>t.variable.name.value===e))})}return n},t.variableDefinitionFromAST=De,t.newNamedType=we,t.copyDirectiveDefinitionToSchema=function({definition:e,schema:t,copyDirectiveApplicationsInArguments:n=!0,locationFilter:i}){Ge(e,t.addDirectiveDefinition(e.name),n,i)}},3208:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createEnumTypeSpecification=t.createUnionTypeSpecification=t.createObjectTypeSpecification=t.createScalarTypeSpecification=t.createDirectiveSpecification=void 0;const i=n(4177),r=n(8116),o=n(3421),s=n(5811),a=n(9724);function c(e,t){return e===t.kind?[]:[r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for type ${t.name}: ${t.name} should be a ${e} but is defined as a ${t.kind}`,{nodes:t.sourceAST})]}function l(e,t,n,a){var c;const l=null!==(c=e.args)&&void 0!==c?c:[],p=[];for(const{name:e,type:c,defaultValue:d}of l){const l=t.argument(e);if(!l){(0,i.isNonNullType)(c)&&void 0===d&&p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: missing required argument "${e}"`,{nodes:a}));continue}let f=l.type;(0,i.isNonNullType)(f)&&!(0,i.isNonNullType)(c)&&(f=f.ofType),(0,s.sameType)(c,f)||u(c,f)?(0,i.isNonNullType)(l.type)||(0,o.valueEquals)(d,l.defaultValue)||p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: argument "${e}" should have default value ${(0,o.valueToString)(d)} but found default value ${(0,o.valueToString)(l.defaultValue)}`,{nodes:l.sourceAST})):p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: argument "${e}" should have type "${c}" but found type "${l.type}"`,{nodes:l.sourceAST}))}for(const e of t.arguments())l.some((t=>t.name===e.name))||p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: unknown/unsupported argument "${e.name}"`,{nodes:e.sourceAST}));return p}function u(e,t){return(0,i.isListType)(e)?(0,i.isListType)(t)&&u(e.ofType,t.ofType):(0,i.isNonNullType)(e)?(0,i.isNonNullType)(t)&&u(e.ofType,t.ofType):(0,i.isCustomScalarType)(e)&&!(0,i.isCustomScalarType)(t)}t.createDirectiveSpecification=function({name:e,locations:t,repeatable:n=!1,argumentFct:o}){return{name:e,checkOrAdd:(s,a,c)=>{const u=null!=a?a:e,{args:p,errors:d}=o?o(s,u):{args:[],errors:[]};if(d.length>0)return d;const f=s.directive(u);if(f)return function(e,t){const n=`"@${e.name}"`;let i=l(e,t,`directive ${n}`);return!e.repeatable&&t.repeatable&&(i=i.concat(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for directive ${n}: ${n} should${e.repeatable?"":" not"} be repeatable`,{nodes:t.sourceAST}))),t.locations.every((t=>e.locations.includes(t)))||(i=i.concat(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for directive ${n}: ${n} should have locations ${e.locations.join(", ")}, but found (non-subset) ${t.locations.join(", ")}`,{nodes:t.sourceAST}))),i}({name:u,locations:t,repeatable:n,args:p},f);{const e=s.addDirectiveDefinition(new i.DirectiveDefinition(u,c));e.repeatable=n,e.addLocations(...t);for(const{name:t,type:n,defaultValue:i}of p)e.addArgument(t,n,i);return[]}}}},t.createScalarTypeSpecification=function({name:e}){return{name:e,checkOrAdd:(t,n,r)=>{const o=null!=n?n:e,s=t.type(o);return s?c("ScalarType",s):(t.addType(new i.ScalarType(o,r)),[])}}},t.createObjectTypeSpecification=function({name:e,fieldsFct:t}){return{name:e,checkOrAdd:(n,o,u)=>{const p=null!=o?o:e,d=t(n),f=n.type(p);if(f){let e=c("ObjectType",f);if(e.length>0)return e;(0,a.assert)((0,i.isObjectType)(f),"Should be an object type");for(const{name:t,type:n,args:o}of d){const a=f.field(t);if(!a){e=e.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${t}: missing field ${t}`,{nodes:f.sourceAST}));continue}let c=a.type;!(0,i.isNonNullType)(n)&&(0,i.isNonNullType)(c)&&(c=c.ofType),(0,s.sameType)(n,c)||(e=e.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for field ${t} of type ${t}: should have type ${n} but found type ${a.type}`,{nodes:a.sourceAST}))),e=e.concat(l({name:t,args:o},a,`field "${a.coordinate}"`))}return e}{const e=n.addType(new i.ObjectType(p,u));for(const{name:t,type:n,args:i}of d){const r=e.addField(t,n);for(const{name:e,type:t,defaultValue:n}of null!=i?i:[])r.addArgument(e,t,n)}return[]}}}},t.createUnionTypeSpecification=function({name:e,membersFct:t}){return{name:e,checkOrAdd:(n,o,s)=>{const l=null!=o?o:e,u=n.type(l),p=t(n).sort(((e,t)=>e.localeCompare(t)));if(0===p.length)return u?[r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${e}: expected the union type to not exist/have no members but it is defined.`,{nodes:u.sourceAST})]:[];if(u){let t=c("UnionType",u);if(t.length>0)return t;(0,a.assert)((0,i.isUnionType)(u),"Should be an union type");const n=u.members().map((e=>e.type.name)).sort(((e,t)=>e.localeCompare(t)));return(0,a.arrayEquals)(p,n)||(t=t.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${e}: expected members [${p}] but found [${n}].`,{nodes:u.sourceAST}))),t}{const e=n.addType(new i.UnionType(l,s));for(const t of p)e.addType(t);return[]}}}},t.createEnumTypeSpecification=function({name:e,values:t}){return{name:e,checkOrAdd:(n,o,s)=>{const l=null!=o?o:e,u=n.type(l),p=t.map((e=>e.name)).sort(((e,t)=>e.localeCompare(t)));if(u){let t=c("EnumType",u);if(t.length>0)return t;(0,a.assert)((0,i.isEnumType)(u),"Should be an enum type");const n=u.values.map((e=>e.name)).sort(((e,t)=>e.localeCompare(t)));return(0,a.arrayEquals)(p,n)||(t=t.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for type "${e}": expected values [${p.join(", ")}] but found [${n.join(", ")}].`,{nodes:u.sourceAST}))),t}{const e=n.addType(new i.EnumType(l,s));for(const{name:n,description:i}of t)e.addValue(n).description=i;return[]}}}}},8116:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.REMOVED_ERRORS=t.ERRORS=t.ERROR_CATEGORIES=t.withModifiedErrorNodes=t.withModifiedErrorMessage=t.errorCodeDef=t.errorCode=t.printErrors=t.printGraphQLErrorsOrRethrow=t.errorCauses=t.aggregateError=t.extractGraphQLErrorOptions=void 0;const i=n(8929),r=n(9724),o="0.x",s=(e,t,n=l)=>({code:e,description:t,metadata:n,err:(t,n)=>new i.GraphQLError(t,{...n,extensions:{...null==n?void 0:n.extensions,code:e}})});t.extractGraphQLErrorOptions=function(e){return{nodes:e.nodes,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions}};class a extends i.GraphQLError{constructor(e,t,n,i){super(t+". Caused by:\n"+n.map((e=>e.toString())).join("\n\n"),{...i,extensions:{code:e}}),this.causes=n}toString(){let e=`[${this.extensions.code}] ${super.toString()}`;e+="\ncaused by:";for(const t of this.causes)e+="\n\n  - ",e+=t.toString().split("\n").join("\n    ");return e}}function c(e){return e instanceof a?e.causes:e instanceof i.GraphQLError?[e]:void 0}t.aggregateError=function(e,t,n){return new a(e,t,n)},t.errorCauses=c,t.printGraphQLErrorsOrRethrow=function(e){const t=c(e);if(!t)throw e;return t.map((e=>e.toString())).join("\n\n")},t.printErrors=function(e){return e.map((e=>e.toString())).join("\n\n")};const l={addedIn:"2.0.0"},u=(e,t,n=l)=>({createCode:i=>s(e(i),t(i),n),get:t=>{const n=je[e(t)];return(0,r.assert)(n,`Unexpected element: ${t}`),n}}),p=(e,t,n=l)=>u((t=>`${t.toLocaleUpperCase()}_${e}`),t,n);function d(e){if(e.extensions&&"code"in e.extensions)return e.extensions.code}t.errorCode=d,t.errorCodeDef=function(e){const t="string"==typeof e?e:d(e);return t?je[t]:void 0},t.withModifiedErrorMessage=function(e,t){return new i.GraphQLError(t,{nodes:e.nodes,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions})},t.withModifiedErrorNodes=function(e,t){return new i.GraphQLError(e.message,{nodes:t,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions})};const f=s("INVALID_GRAPHQL","A schema is invalid GraphQL: it violates one of the rule of the specification."),h=s("DIRECTIVE_DEFINITION_INVALID","A built-in or federation directive has an invalid definition in the schema.",{...l,replaces:["TAG_DEFINITION_INVALID"]}),m=s("TYPE_DEFINITION_INVALID","A built-in or federation type has an invalid definition in the schema."),y=s("UNSUPPORTED_LINKED_FEATURE","Indicates that a feature used in a @link is either unsupported or is used with unsupported options."),v=s("UNKNOWN_FEDERATION_LINK_VERSION","The version of federation in a @link directive on the schema is unknown."),E=s("UNKNOWN_LINK_VERSION","The version of @link set on the schema is unknown.",{addedIn:"2.1.0"}),T=p("FIELDS_HAS_ARGS",(e=>`The \`fields\` argument of a \`@${e}\` directive includes a field defined with arguments (which is not currently supported).`)),g=T.createCode("key"),I=T.createCode("provides"),N=p("FIELDS_MISSING_EXTERNAL",(e=>`The \`fields\` argument of a \`@${e}\` directive includes a field that is not marked as \`@external\`.`),{addedIn:o}),b=N.createCode("provides"),_=N.createCode("requires"),S=p("UNSUPPORTED_ON_INTERFACE",(e=>`A \`@${e}\` directive is used on an interface, which is not (yet) supported.`)),O=S.createCode("key"),D=S.createCode("provides"),A=S.createCode("requires"),R=p("DIRECTIVE_IN_FIELDS_ARG",(e=>`The \`fields\` argument of a \`@${e}\` directive includes some directive applications. This is not supported`),{addedIn:"2.1.0"}),w=R.createCode("key"),L=R.createCode("provides"),F=R.createCode("requires"),x=s("EXTERNAL_UNUSED","An `@external` field is not being used by any instance of `@key`, `@requires`, `@provides` or to satisfy an interface implementation.",{addedIn:o}),k=s("TYPE_WITH_ONLY_UNUSED_EXTERNAL",`A federation 1 schema has a composite type comprised only of unused external fields. Note that this error can _only_ be raised for federation 1 schema as federation 2 schema do not allow unused external fields (and errors with code ${x.code} will be raised in that case). But when federation 1 schema are automatically migrated to federation 2 ones, unused external fields are automatically removed, and in rare case this can leave a type empty. If that happens, an error with this code will be raised`),$=s("PROVIDES_ON_NON_OBJECT_FIELD","A `@provides` directive is used to mark a field whose base type is not an object type."),C=p("INVALID_FIELDS_TYPE",(e=>`The value passed to the \`fields\` argument of a \`@${e}\` directive is not a string.`)),j=C.createCode("key"),M=C.createCode("provides"),P=C.createCode("requires"),U=p("INVALID_FIELDS",(e=>`The \`fields\` argument of a \`@${e}\` directive is invalid (it has invalid syntax, includes unknown fields, ...).`)),V=U.createCode("key"),G=U.createCode("provides"),B=U.createCode("requires"),Q=s("KEY_FIELDS_SELECT_INVALID_TYPE","The `fields` argument of `@key` directive includes a field whose type is a list, interface, or union type. Fields of these types cannot be part of a `@key`",{addedIn:o}),K=u((e=>`ROOT_${e.toLocaleUpperCase()}_USED`),(e=>`A subgraph's schema defines a type with the name \`${e}\`, while also specifying a _different_ type name as the root query object. This is not allowed.`),{addedIn:o}),q=K.createCode("query"),Y=K.createCode("mutation"),H=K.createCode("subscription"),X=s("INVALID_SUBGRAPH_NAME",'A subgraph name is invalid (subgraph names cannot be a single underscore ("_")).'),z=s("NO_QUERIES","None of the composed subgraphs expose any query."),J=s("INTERFACE_FIELD_NO_IMPLEM","After subgraph merging, an implementation is missing a field of one of the interface it implements (which can happen for valid subgraphs)."),W=s("TYPE_KIND_MISMATCH","A type has the same name in different subgraphs, but a different kind. For instance, one definition is an object type but another is an interface.",{...l,replaces:["VALUE_TYPE_KIND_MISMATCH","EXTENSION_OF_WRONG_KIND","ENUM_MISMATCH_TYPE"]}),Z=s("EXTERNAL_TYPE_MISMATCH","An `@external` field has a type that is incompatible with the declaration(s) of that field in other subgraphs.",{addedIn:o}),ee=s("EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE","The @external directive collides with other directives in some situations.",{addedIn:"2.1.0"}),te=s("EXTERNAL_ARGUMENT_MISSING","An `@external` field is missing some arguments present in the declaration(s) of that field in other subgraphs."),ne=s("EXTERNAL_ARGUMENT_TYPE_MISMATCH","An `@external` field declares an argument with a type that is incompatible with the corresponding argument in the declaration(s) of that field in other subgraphs."),ie=s("EXTERNAL_ARGUMENT_DEFAULT_MISMATCH","An `@external` field declares an argument with a default that is incompatible with the corresponding argument in the declaration(s) of that field in other subgraphs."),re=s("EXTERNAL_ON_INTERFACE",'The field of an interface type is marked with `@external`: as external is about marking field not resolved by the subgraph and as interface field are not resolved (only implementations of those fields are), an "external" interface field is nonsensical'),oe=s("MERGED_DIRECTIVE_APPLICATION_ON_EXTERNAL","In a subgraph, a field is both marked @external and has a merged directive applied to it"),se=s("FIELD_TYPE_MISMATCH","A field has a type that is incompatible with other declarations of that field in other subgraphs.",{...l,replaces:["VALUE_TYPE_FIELD_TYPE_MISMATCH"]}),ae=s("FIELD_ARGUMENT_TYPE_MISMATCH","An argument (of a field/directive) has a type that is incompatible with that of other declarations of that same argument in other subgraphs.",{...l,replaces:["VALUE_TYPE_INPUT_VALUE_MISMATCH"]}),ce=s("INPUT_FIELD_DEFAULT_MISMATCH","An input field has a default value that is incompatible with other declarations of that field in other subgraphs."),le=s("FIELD_ARGUMENT_DEFAULT_MISMATCH","An argument (of a field/directive) has a default value that is incompatible with that of other declarations of that same argument in other subgraphs."),ue=s("EXTENSION_WITH_NO_BASE","A subgraph is attempting to `extend` a type that is not originally defined in any known subgraph.",{addedIn:o}),pe=s("EXTERNAL_MISSING_ON_BASE","A field is marked as `@external` in a subgraph but with no non-external declaration in any other subgraph.",{addedIn:o}),de=s("INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH","For an interface field, some of its concrete implementations have @external or @requires and there is difference in those implementations return type (which is currently not supported; see https://github.com/apollographql/federation/issues/1257)"),fe=s("INVALID_FIELD_SHARING","A field that is non-shareable in at least one subgraph is resolved by multiple subgraphs."),he=s("INVALID_LINK_DIRECTIVE_USAGE","An application of the @link directive is invalid/does not respect the specification."),me=s("INVALID_LINK_IDENTIFIER","A url/version for a @link feature is invalid/does not respect the specification.",{addedIn:"2.1.0"}),ye=s("LINK_IMPORT_NAME_MISMATCH","The import name for a merged directive (as declared by the relevant `@link(import:)` argument) is inconsistent between subgraphs."),ve=s("REFERENCED_INACCESSIBLE","An element is marked as @inaccessible but is referenced by an element visible in the API schema."),Ee=s("DEFAULT_VALUE_USES_INACCESSIBLE","An element is marked as @inaccessible but is used in the default value of an element visible in the API schema."),Te=s("QUERY_ROOT_TYPE_INACCESSIBLE","An element is marked as @inaccessible but is the query root type, which must be visible in the API schema."),ge=s("REQUIRED_INACCESSIBLE","An element is marked as @inaccessible but is required by an element visible in the API schema."),Ie=s("IMPLEMENTED_BY_INACCESSIBLE","An element is marked as @inaccessible but implements an element visible in the API schema."),Ne=s("DISALLOWED_INACCESSIBLE","An element is marked as @inaccessible that is not allowed to be @inaccessible."),be=s("ONLY_INACCESSIBLE_CHILDREN","A type visible in the API schema has only @inaccessible children."),_e=s("REQUIRED_INPUT_FIELD_MISSING_IN_SOME_SUBGRAPH","A field of an input object type is mandatory in some subgraphs, but the field is not defined in all the subgraphs that define the input object type."),Se=s("REQUIRED_ARGUMENT_MISSING_IN_SOME_SUBGRAPH","An argument of a field or directive definition is mandatory in some subgraphs, but the argument is not defined in all the subgraphs that define the field or directive definition."),Oe=s("EMPTY_MERGED_INPUT_TYPE","An input object type has no field common to all the subgraphs that define the type. Merging that type would result in an invalid empty input object type."),De=s("ENUM_VALUE_MISMATCH","An enum type that is used as both an input and output type has a value that is not defined in all the subgraphs that define the enum type."),Ae=s("EMPTY_MERGED_ENUM_TYPE","An enum type has no value common to all the subgraphs that define the type. Merging that type would result in an invalid empty enum type."),Re=s("SATISFIABILITY_ERROR","Subgraphs can be merged, but the resulting supergraph API would have queries that cannot be satisfied by those subgraphs."),we=s("OVERRIDE_FROM_SELF_ERROR",'Field with `@override` directive has "from" location that references its own subgraph.'),Le=s("OVERRIDE_SOURCE_HAS_OVERRIDE","Field which is overridden to another subgraph is also marked @override."),Fe=s("OVERRIDE_COLLISION_WITH_ANOTHER_DIRECTIVE","The @override directive cannot be used on external fields, nor to override fields with either @external, @provides, or @requires."),xe=s("UNSUPPORTED_FEATURE","Indicates an error due to feature currently unsupported by federation.",{addedIn:"2.1.0"}),ke=s("INVALID_FEDERATION_SUPERGRAPH","Indicates that a schema provided for an Apollo Federation supergraph is not a valid supergraph schema.",{addedIn:"2.1.0"}),$e=s("DOWNSTREAM_SERVICE_ERROR","Indicates an error in a subgraph service query during query execution in a federated service.",{addedIn:o}),Ce=s("DIRECTIVE_COMPOSITION_ERROR","Error when composing custom directives.",{addedIn:"2.1.0"});t.ERROR_CATEGORIES={DIRECTIVE_FIELDS_MISSING_EXTERNAL:N,DIRECTIVE_UNSUPPORTED_ON_INTERFACE:S,DIRECTIVE_INVALID_FIELDS_TYPE:C,DIRECTIVE_INVALID_FIELDS:U,FIELDS_HAS_ARGS:T,ROOT_TYPE_USED:K,DIRECTIVE_IN_FIELDS_ARG:R},t.ERRORS={INVALID_GRAPHQL:f,DIRECTIVE_DEFINITION_INVALID:h,TYPE_DEFINITION_INVALID:m,UNSUPPORTED_LINKED_FEATURE:y,UNKNOWN_FEDERATION_LINK_VERSION:v,UNKNOWN_LINK_VERSION:E,KEY_FIELDS_HAS_ARGS:g,PROVIDES_FIELDS_HAS_ARGS:I,PROVIDES_MISSING_EXTERNAL:b,REQUIRES_MISSING_EXTERNAL:_,KEY_UNSUPPORTED_ON_INTERFACE:O,PROVIDES_UNSUPPORTED_ON_INTERFACE:D,REQUIRES_UNSUPPORTED_ON_INTERFACE:A,EXTERNAL_UNUSED:x,EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE:ee,TYPE_WITH_ONLY_UNUSED_EXTERNAL:k,PROVIDES_ON_NON_OBJECT_FIELD:$,KEY_INVALID_FIELDS_TYPE:j,PROVIDES_INVALID_FIELDS_TYPE:M,REQUIRES_INVALID_FIELDS_TYPE:P,KEY_INVALID_FIELDS:V,PROVIDES_INVALID_FIELDS:G,REQUIRES_INVALID_FIELDS:B,KEY_FIELDS_SELECT_INVALID_TYPE:Q,ROOT_QUERY_USED:q,ROOT_MUTATION_USED:Y,ROOT_SUBSCRIPTION_USED:H,INVALID_SUBGRAPH_NAME:X,NO_QUERIES:z,INTERFACE_FIELD_NO_IMPLEM:J,TYPE_KIND_MISMATCH:W,EXTERNAL_TYPE_MISMATCH:Z,EXTERNAL_ARGUMENT_MISSING:te,EXTERNAL_ARGUMENT_TYPE_MISMATCH:ne,EXTERNAL_ARGUMENT_DEFAULT_MISMATCH:ie,EXTERNAL_ON_INTERFACE:re,MERGED_DIRECTIVE_APPLICATION_ON_EXTERNAL:oe,FIELD_TYPE_MISMATCH:se,ARGUMENT_TYPE_MISMATCH:ae,INPUT_FIELD_DEFAULT_MISMATCH:ce,ARGUMENT_DEFAULT_MISMATCH:le,EXTENSION_WITH_NO_BASE:ue,EXTERNAL_MISSING_ON_BASE:pe,INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH:de,INVALID_FIELD_SHARING:fe,INVALID_LINK_DIRECTIVE_USAGE:he,INVALID_LINK_IDENTIFIER:me,LINK_IMPORT_NAME_MISMATCH:ye,REFERENCED_INACCESSIBLE:ve,DEFAULT_VALUE_USES_INACCESSIBLE:Ee,QUERY_ROOT_TYPE_INACCESSIBLE:Te,REQUIRED_INACCESSIBLE:ge,DISALLOWED_INACCESSIBLE:Ne,IMPLEMENTED_BY_INACCESSIBLE:Ie,ONLY_INACCESSIBLE_CHILDREN:be,REQUIRED_ARGUMENT_MISSING_IN_SOME_SUBGRAPH:Se,REQUIRED_INPUT_FIELD_MISSING_IN_SOME_SUBGRAPH:_e,EMPTY_MERGED_INPUT_TYPE:Oe,ENUM_VALUE_MISMATCH:De,EMPTY_MERGED_ENUM_TYPE:Ae,SATISFIABILITY_ERROR:Re,OVERRIDE_COLLISION_WITH_ANOTHER_DIRECTIVE:Fe,OVERRIDE_FROM_SELF_ERROR:we,OVERRIDE_SOURCE_HAS_OVERRIDE:Le,UNSUPPORTED_FEATURE:xe,INVALID_FEDERATION_SUPERGRAPH:ke,DOWNSTREAM_SERVICE_ERROR:$e,KEY_HAS_DIRECTIVE_IN_FIELDS_ARGS:w,PROVIDES_HAS_DIRECTIVE_IN_FIELDS_ARGS:L,REQUIRES_HAS_DIRECTIVE_IN_FIELDS_ARGS:F,DIRECTIVE_COMPOSITION_ERROR:Ce};const je=Object.values(t.ERRORS).reduce(((e,t)=>(e[t.code]=t,e)),{});t.REMOVED_ERRORS=[["KEY_FIELDS_MISSING_ON_BASE","Keys can now use any field from any other subgraph."],["KEY_FIELDS_MISSING_EXTERNAL","Using `@external` for key fields is now discouraged, unless the field is truly meant to be external."],["KEY_MISSING_ON_BASE","Each subgraph is now free to declare a key only if it needs it."],["MULTIPLE_KEYS_ON_EXTENSION","Every subgraph can have multiple keys, as necessary."],["KEY_NOT_SPECIFIED","Each subgraph can declare key independently of any other subgraph."],["EXTERNAL_USED_ON_BASE","As there is not type ownership anymore, there is also no particular limitation as to where a field can be external."],["PROVIDES_NOT_ON_ENTITY","@provides can now be used on any type."],["REQUIRES_FIELDS_MISSING_ON_BASE","Fields in @requires can now be from any subgraph."],["REQUIRES_USED_ON_BASE","As there is not type ownership anymore, there is also no particular limitation as to which subgraph can use a @requires."],["DUPLICATE_SCALAR_DEFINITION","As duplicate scalar definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["DUPLICATE_ENUM_DEFINITION","As duplicate enum definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["DUPLICATE_ENUM_VALUE","As duplicate enum values is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["ENUM_MISMATCH","Subgraph definitions for an enum are now merged by composition"],["VALUE_TYPE_NO_ENTITY","There is no strong different between entity and value types in the model (they are just usage pattern) and a type can have keys in one subgraph but not another."],["VALUE_TYPE_UNION_TYPES_MISMATCH","Subgraph definitions for an union are now merged by composition"],["PROVIDES_FIELDS_SELECT_INVALID_TYPE","@provides can now be used on field of interface, union and list types"],["RESERVED_FIELD_USED","This error was previously not correctly enforced: the _service and _entities, if present, were overridden; this is still the case"],["NON_REPEATABLE_DIRECTIVE_ARGUMENTS_MISMATCH","Since federation 2.1.0, the case this error used to cover is now a warning (with code `INCONSISTENT_NON_REPEATABLE_DIRECTIVE_ARGUMENTS`) instead of an error"],["REQUIRES_FIELDS_HAS_ARGS","Since federation 2.1.1, using fields with arguments in a @requires is fully supported"]]},8220:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.extractSubgraphsFromSupergraph=t.extractSubgraphsNamesAndUrlsFromSupergraph=void 0;const r=n(4177),o=n(4408),s=n(9209),a=n(4408),c=n(9724),l=n(9624),u=n(7964),p=n(5811),d=n(2850),f=n(758),h=i(n(8222)),m=i(n(6470)),y=n(9724),v=n(415);function E(e,t,n){return e.types().filter((e=>!t.isSpecType(e)&&!n.isSpecType(e)))}function T(e,t){const n=new a.Subgraphs,i=t.graphDirective(e),r=t.graphEnum(e),s=new Map;for(const e of r.values){const t=e.appliedDirectivesOf(i);if(!t.length)throw new Error(`Value ${e} of join__Graph enum has no @join__graph directive`);const r=t[0].arguments(),c=new a.Subgraph(r.name,r.url,(0,o.newEmptyFederation2Schema)());n.add(c),s.set(e.name,r.name)}return[n,s]}t.extractSubgraphsNamesAndUrlsFromSupergraph=function(e){const[t,n]=(0,l.validateSupergraph)(e),[i]=T(e,n);return i.values().map((e=>({name:e.name,url:e.url})))};class g{constructor(e,t){this.originalError=e,this.subgraph=t}}function I(e,t,n,i,o){const s=new Set,a=e.schemaDefinition.roots().map((e=>e.type));for(const n of e.types()){const{isEntityWithKeyInSubgraph:e,typesInFederationDirectives:i}=o(n,t);e&&a.push(n),i.forEach((e=>a.push(e)))}for(;a.length>0;){const e=a.pop();if(n(e),!s.has(e.name))switch(s.add(e.name),e.kind){case"InterfaceType":e.allImplementations().forEach((e=>a.push(e)));case"ObjectType":e.interfaces().forEach((e=>a.push(e)));for(const n of e.fields()){const{isInSubgraph:e,typesInFederationDirectives:o}=i(n,t);e&&(n.arguments().forEach((e=>a.push((0,r.baseType)(e.type)))),a.push((0,r.baseType)(n.type)),o.forEach((e=>a.push(e))))}break;case"InputObjectType":for(const n of e.fields()){const{isInSubgraph:e,typesInFederationDirectives:o}=i(n,t);e&&(a.push((0,r.baseType)(n.type)),o.forEach((e=>a.push(e))))}break;case"UnionType":e.members().forEach((e=>a.push(e.type)))}}for(const t of e.directives())t.hasExecutableLocations()&&t.arguments().forEach((e=>a.push((0,r.baseType)(e.type))))}function N(e,t){if(!e)return[];const n=[];return(0,f.parseSelectionSet)({parentType:t,source:e,fieldAccessor:(e,t)=>{const i=e.field(t);return i&&n.push((0,r.baseType)(i.type)),i},validate:!1}),n}function b(e){const t=(0,v.errorCauses)(e);return t?(0,v.printErrors)(t):String(e)}function _(e,t,n){return e instanceof r.FieldDefinition?S(e,t,n):function(e,t,n){const i=t.schema.type(e.parent.name);if(i){const r=n?O(n,t.schema,t.name):D(e.type,t.schema,t.name);return i.addField(e.name,r)}}(e,t,n)}function S(e,t,n){const i=t.schema.type(e.parent.name);if(i){const r=n?O(n,t.schema,t.name):D(e.type,t.schema,t.name),o=i.addField(e.name,r);for(const n of e.arguments())o.addArgument(n.name,D(n.type,t.schema,t.name),n.defaultValue);return o}}function O(e,t,n){try{return(0,u.builtTypeReference)(e,t)}catch(t){(0,c.assert)(!1,(()=>`Cannot parse type "${e}" in subgraph ${n}: ${t}`))}}function D(e,t,n){switch(e.kind){case"ListType":return new r.ListType(D(e.ofType,t,n));case"NonNullType":return new r.NonNullType(D(e.ofType,t,n));default:const i=t.type(e.name);return(0,c.assert)(i,(()=>`Cannot find type "${e.name}" in subgraph "${n}"`)),i}}function A(e,t,n){const i=e.metadata();for(const o of e.schema.types())if((0,r.isObjectType)(o)||(0,r.isInterfaceType)(o)){for(const r of o.appliedDirectivesOf(i.keyDirective())){const i=n||!!r.ofExtension();R(e,o,r,t,i)}for(const n of o.fields()){for(const r of n.appliedDirectivesOf(i.requiresDirective()))R(e,o,r,t);const s=(0,r.baseType)(n.type);for(const o of n.appliedDirectivesOf(i.providesDirective()))(0,c.assert)((0,r.isObjectType)(s)||(0,r.isInterfaceType)(s),(()=>`Found @provides on field ${n.coordinate} whose type ${n.type} (${s.kind}) is not an object or interface `)),R(e,s,o,t)}w(i,o)}}function R(e,t,n,i,s=!1){const a=e.metadata().externalDirective(),l=function(t,n){const o=t.field(n);if(o)return s&&o.hasAppliedDirective(a)&&o.appliedDirectivesOf(a).forEach((e=>e.remove())),o;(0,c.assert)(!(0,r.isUnionType)(t),(()=>`Shouldn't select field ${n} from union type ${t}`));const l=i.type(t.name).field(n);(0,c.assert)(l,(()=>`No field named ${n} found on type ${t.name} in the supergraph`));const u=S(l,e);return s||u.applyDirective(a),u};try{(0,o.parseFieldSetArgument)({parentType:t,directive:n,fieldAccessor:l,validate:!1})}catch(e){}}function w(e,t){for(const n of t.interfaces())for(const i of n.fields()){const n=t.field(i.name);n?n.hasAppliedDirective(e.externalDirective())&&F(n,i):L(e,i,t)}}function L(e,t,n){const i=n.addField(t.name,t.type);for(const e of t.arguments())i.addArgument(e.name,e.type,e.defaultValue);i.applyDirective(e.externalDirective())}function F(e,t){(0,p.isSubtype)(t.type,e.type)||((0,c.assert)((0,p.isSubtype)(e.type,t.type),(()=>`For ${e.coordinate}, expected ${t.type} and ${e.type} to be in a subtyping relationship`)),e.type=t.type)}t.extractSubgraphsFromSupergraph=function(e){const[t,n]=(0,l.validateSupergraph)(e),i=n.version.equals(new s.FeatureVersion(0,1));try{const[s,a]=T(e,n),l=n.typeDirective(e),u=n.implementsDirective(e),p=n.ownerDirective(e),d=n.fieldDirective(e),f=e=>a.get(e.arguments().graph);let h=()=>!0;if(i){const t=function(e,t,n,i){const r=new Map;for(const o of t){const t=new Set;I(e,o,(e=>t.add(e.name)),n,i),r.set(o,t)}return r}(e,s.names(),((e,t)=>{const n=e.appliedDirectivesOf(d);if(n.length){const i=n.find((e=>f(e)===t));if(i){const t=i.arguments();return{isInSubgraph:!0,typesInFederationDirectives:N(t.provides,(0,r.baseType)(e.type)).concat(N(t.requires,e.parent))}}return{isInSubgraph:!1,typesInFederationDirectives:[]}}{const n=p?e.parent.appliedDirectivesOf(p):[];return{isInSubgraph:!n.length||f(n[0])==t,typesInFederationDirectives:[]}}}),((e,t)=>{const n=e.appliedDirectivesOf(l).find((e=>e.arguments().key&&f(e)===t));return n?{isEntityWithKeyInSubgraph:!0,typesInFederationDirectives:N(n.arguments().key,e)}:{isEntityWithKeyInSubgraph:!1,typesInFederationDirectives:[]}}));h=(e,n)=>{var i,r;return null!==(r=null===(i=t.get(n))||void 0===i?void 0:i.has(e.name))&&void 0!==r&&r}}for(const i of E(e,n,t.coreDefinition)){const e=i.appliedDirectivesOf(l);if(e.length)for(const t of e){const e=t.arguments(),n=f(t),o=s.get(n).schema;let a=o.type(i.name);if(a||(a=o.addType((0,r.newNamedType)(i.kind,i.name))),e.key){const{resolvable:t}=e,n=a.applyDirective("key",{fields:e.key,resolvable:t});e.extension&&n.setOfExtension(a.newExtension())}}else s.values().filter((e=>h(i,e.name))).map((e=>e.schema)).forEach((e=>e.addType((0,r.newNamedType)(i.kind,i.name))))}for(const i of E(e,n,t.coreDefinition))switch(i.kind){case"ObjectType":case"InterfaceType":const e=[],t=u?i.appliedDirectivesOf(u):[];for(const n of t){const t=n.arguments();s.get(a.get(t.graph)).schema.type(i.name).addImplementedInterface(t.interface),e.push(t.interface)}for(const t of i.interfaceImplementations()){const n=t.interface.name;if(!e.includes(n))for(const e of s){const t=e.schema.type(i.name),r=e.schema.type(n);t&&r&&t.addImplementedInterface(n)}}case"InputObjectType":for(const e of i.fields()){const t=e.appliedDirectivesOf(d);if(t.length)for(const n of t){const t=n.arguments(),r=s.get(a.get(t.graph)),o=_(e,r,t.type);o?(t.requires&&o.applyDirective(r.metadata().requiresDirective(),{fields:t.requires}),t.provides&&o.applyDirective(r.metadata().providesDirective(),{fields:t.provides}),t.external&&o.applyDirective(r.metadata().externalDirective()),t.usedOverridden&&o.applyDirective(r.metadata().externalDirective(),{reason:"[overridden]"}),t.override&&o.applyDirective(r.metadata().overrideDirective(),{from:t.override})):(0,c.assert)(!h(i,r.name),(()=>`Found join__field directive for graph ${r.name} on field ${e.coordinate} but no corresponding join__type on ${i}`))}else{const t=p?i.appliedDirectivesOf(p):[];if(t.length){(0,c.assert)(1==t.length,(()=>`Found multiple join__owner directives on type ${i}`));const n=s.get(a.get(t[0].arguments().graph)),r=_(e,n);(0,c.assert)(r,(()=>`Found join__owner directive on ${i} but no corresponding join__type`))}else{const t=(0,r.baseType)(e.type);for(const n of s)n.schema.type(t.name)&&_(e,n)}}}break;case"EnumType":for(const e of s){const t=e.schema.type(i.name);if(t){(0,c.assert)((0,r.isEnumType)(t),(()=>`${t} should be an enum but found a ${t.kind}`));for(const e of i.values)t.addValue(e.name)}}break;case"UnionType":for(const e of s){const t=e.schema.type(i.name);if(t){(0,c.assert)((0,r.isUnionType)(t),(()=>`${t} should be an enum but found a ${t.kind}`));for(const n of i.types()){const i=e.schema.type(n.name);i&&t.addType(i)}}}}const m=e.directives().filter((e=>e.hasExecutableLocations()));for(const t of s){i&&A(t,e,i),(0,o.removeInactiveProvidesAndRequires)(t.schema);for(const e of t.schema.types())switch(e.kind){case"ObjectType":case"InterfaceType":case"InputObjectType":e.hasFields()||e.removeRecursive();break;case"UnionType":0===e.membersCount()&&e.removeRecursive()}for(const e of m)(0,r.copyDirectiveDefinitionToSchema)({definition:e,schema:t.schema,copyDirectiveApplicationsInArguments:!1,locationFilter:e=>(0,r.isExecutableDirectiveLocation)(e)})}if(i)for(const e of s)for(const t of e.schema.interfaceTypes()){const e=t.possibleRuntimeTypes();for(const n of t.fields())e.every((e=>e.field(n.name)))||n.remove();t.hasFields()||t.remove()}for(const e of s)try{e.validate()}catch(t){throw new g(t,e)}return s}catch(e){let t,n=e;e instanceof g&&(n=e.originalError,t=e.subgraph);const r=t?`subgraph "${t.name}"`:"subgraphs";if(i)throw new Error(`Error extracting ${r} from the supergraph: this might be due to errors in subgraphs that were mistakenly ignored by federation 0.x versions but are rejected by federation 2.\nPlease try composing your subgraphs with federation 2: this should help precisely pinpoint the problems and, once fixed, generate a correct federation 2 supergraph.\n\nDetails:\n${b(n)}`);{const e=`Unexpected error extracting ${r} from the supergraph: this is either a bug, or the supergraph has been corrupted`,i=t?"\n\n"+function(e){if(!(0,y.validateStringContainsBoolean)(process.env.APOLLO_FEDERATION_DEBUG_SUBGRAPHS))return"Re-run with environment variable 'APOLLO_FEDERATION_DEBUG_SUBGRAPHS' set to 'true' to extract the invalid subgraph";try{const t=`extracted-subgraph-${e.name}-${Date.now()}.graphql`,n=m.default.resolve(t);if(h.default.existsSync(n))throw new Error(`candidate file ${t} already existed`);return h.default.writeFileSync(n,(0,d.printSchema)(e.schema)),`The (invalid) extracted subgraph has been written in: ${n}.`}catch(t){return`Was not able to print generated subgraph for "${e.name}" because: ${b(t)}`}}(t):"";throw new Error(`${e}.\n\nDetails:\n${b(n)}${i}`)}}}},4408:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeInactiveProvidesAndRequires=t.addSubgraphToError=t.addSubgraphToASTNode=t.Subgraph=t.FEDERATION_OPERATION_FIELDS=t.entitiesFieldName=t.serviceFieldName=t.FEDERATION_OPERATION_TYPES=t.entityTypeSpec=t.serviceTypeSpec=t.anyTypeSpec=t.Subgraphs=t.subgraphsFromServiceList=t.collectTargetFields=t.parseFieldSetArgument=t.newEmptyFederation2Schema=t.buildSubgraph=t.isEntityType=t.isFederationField=t.isFederationSubgraphSchema=t.federationMetadata=t.printSubgraphNames=t.asFed2SubgraphDocument=t.FEDERATION2_LINK_WTH_FULL_IMPORTS=t.setSchemaAsFed2Subgraph=t.FederationBlueprint=t.FederationMetadata=t.collectUsedFields=t.FEDERATION_UNNAMED_SUBGRAPH_NAME=t.FEDERATION_RESERVED_SUBGRAPH_NAME=void 0;const i=n(4177),r=n(9724),o=n(4710),s=n(8929),a=n(4150),c=n(7964),l=n(758),u=n(1697),p=n(5322),d=n(8116),f=n(7678),h=n(9209),m=n(9480),y=n(2850),v=n(3208),E=n(5388),T=h.LINK_VERSIONS.latest(),g=u.TAG_VERSIONS.latest(),I=p.INACCESSIBLE_VERSIONS.latest(),N=m.FEDERATION_VERSIONS.latest();t.FEDERATION_RESERVED_SUBGRAPH_NAME="_",t.FEDERATION_UNNAMED_SUBGRAPH_NAME="<unnamed>";const b=[s.PossibleTypeExtensionsRule,s.KnownTypeNamesRule],_=[a.KnownTypeNamesInFederationRule],S=o.specifiedSDLRules.filter((e=>!b.includes(e))).concat(_);function O({directiveName:e,selectionSet:t,hasExternalInParents:n,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a}){for(const c of t.selections()){const t=c.element().appliedDirectives;if(t.length>0&&o(d.ERROR_CATEGORIES.DIRECTIVE_IN_FIELDS_ARG.get(e).err(`cannot have directive applications in the @${e}(fields:) argument but found ${t.join(", ")}.`)),"FieldSelection"===c.kind){const t=c.element().definition,l=r.isFieldExternal(t);!a&&t.hasArguments()&&o(d.ERROR_CATEGORIES.FIELDS_HAS_ARGS.get(e).err(`field ${t.coordinate} cannot be included because it has arguments (fields with argument are not allowed in @${e})`,{nodes:t.sourceAST}));const u=!c.selectionSet&&!s&&!n;if(!l&&u){const n=d.ERROR_CATEGORIES.DIRECTIVE_FIELDS_MISSING_EXTERNAL.get(e);r.isFieldFakeExternal(t)?o(n.err(`field "${t.coordinate}" should not be part of a @${e} since it is already "effectively" provided by this subgraph (while it is marked @${m.externalDirectiveSpec.name}, it is a @${m.keyDirectiveSpec.name} field of an extension type, which are not internally considered external for historical/backward compatibility reasons)`,{nodes:t.sourceAST})):o(n.err(`field "${t.coordinate}" should not be part of a @${e} since it is already provided by this subgraph (it is not marked @${m.externalDirectiveSpec.name})`,{nodes:t.sourceAST}))}if(c.selectionSet){let u=n||l;const p=t.parent;if(!u&&(0,i.isInterfaceType)(p))for(const e of p.possibleRuntimeTypes()){const n=e.field(t.name);if(n&&r.isFieldExternal(n)){u=!0;break}}O({directiveName:e,selectionSet:c.selectionSet,hasExternalInParents:u,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a})}}else O({directiveName:e,selectionSet:c.selectionSet,hasExternalInParents:n,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a})}}function D({type:e,directive:t,metadata:n,errorCollector:i,allowOnNonExternalLeafFields:r,allowFieldsWithArguments:o,onFields:a}){try{const s=a?(e,t)=>{const n=e.field(t);return n&&a(n),n}:void 0,c=Y({parentType:e,directive:t,fieldAccessor:s});O({directiveName:t.name,selectionSet:c,hasExternalInParents:!1,metadata:n,onError:e=>i.push(A(t,e)),allowOnNonExternalLeafFields:r,allowFieldsWithArguments:o})}catch(e){if(!(e instanceof s.GraphQLError))throw e;i.push(e)}}function A(e,t,n){const r=(0,i.sourceASTs)(e);t.nodes&&r.push(...t.nodes);let o=(0,d.errorCodeDef)(t);o&&o!==d.ERRORS.INVALID_GRAPHQL||(o=d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS.get(e.name));let a=t.message.trim();return n&&(a=n(a)),o.err(`${function(e){return`On ${R(e)}, for ${function(e){return e.sourceAST?(0,s.print)(e.sourceAST):e.toString()}(e)}`}(e)}: ${a}`,{nodes:r,originalError:t})}function R(e){var t;return`${e.parent instanceof i.FieldDefinition?"field":"type"} "${null===(t=e.parent)||void 0===t?void 0:t.coordinate}"`}function w({definition:e,targetTypeExtractor:t,errorCollector:n,metadata:r,isOnParentType:o=!1,allowOnNonExternalLeafFields:s=!1,allowFieldsWithArguments:a=!1,onFields:c}){for(const l of e.applications()){const u=l.parent,p=t(u),f=o?p:u.parent;if((0,i.isInterfaceType)(f)){const t=d.ERROR_CATEGORIES.DIRECTIVE_UNSUPPORTED_ON_INTERFACE.get(e.name);n.push(t.err(o?`Cannot use ${e.coordinate} on interface "${f.coordinate}": ${e.coordinate} is not yet supported on interfaces`:`Cannot use ${e.coordinate} on ${R(l)} of parent type "${f}": ${e.coordinate} is not yet supported within interfaces`,{nodes:(0,i.sourceASTs)(l).concat(o?[]:(0,i.sourceASTs)(p))}))}D({type:p,directive:l,metadata:r,errorCollector:n,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a,onFields:c})}}function L(e){const t=new Set;F(e.keyDirective(),(e=>e),t),F(e.requiresDirective(),(e=>e.parent),t),F(e.providesDirective(),(e=>{const t=(0,i.baseType)(e.type);return(0,i.isCompositeType)(t)?t:void 0}),t);for(const n of e.schema.interfaceTypes()){const e=n.possibleRuntimeTypes();for(const i of n.fields())for(const n of e){const e=n.field(i.name);e&&t.add(e)}}return t}function F(e,t,n){for(const i of e.applications()){const e=t(i.parent);e&&H({parentType:e,directive:i,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>n.add(e)))}}function x(e,t,n){var i;const o=null===(i=P(e.schema()))||void 0===i?void 0:i.requiresDirective();(0,r.assert)(o,"Schema should be a federation subgraph, but @requires directive not found");const s=e.possibleRuntimeTypes();for(const i of e.fields()){const e=[],a=new r.MultiMap,c=[];for(const n of s){const r=n.field(i.name);if(!r)continue;r.sourceAST&&c.push(r.sourceAST),(t.isFieldExternal(r)||r.hasAppliedDirective(o))&&e.push(r);const s=r.type;a.add(s.toString(),r)}if(e.length>0&&a.size>1){const t=[...a.entries()];n.push(d.ERRORS.INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH.err(`Some of the runtime implementations of interface field "${i.coordinate}" are marked @external or have a @require (${e.map(k)}) so all the implementations should use the same type (a current limitation of federation; see https://github.com/apollographql/federation/issues/1257), but ${$(t[0])} while ${(0,r.joinStrings)(t.slice(1).map($)," and ")}.`,{nodes:c}))}}}t.collectUsedFields=L;const k=e=>`"${e.coordinate}"`;function $([e,t]){return`${(0,r.joinStrings)(t.map(k))} ${1==t.length?"has":"have"} type "${e}"`}class C{constructor(e){this.schema=e}onInvalidate(){this._externalTester=void 0,this._sharingPredicate=void 0,this._isFed2Schema=void 0,this._fieldUsedPredicate=void 0}isFed2Schema(){if(!this._isFed2Schema){const e=this.federationFeature();this._isFed2Schema=!!e&&e.url.version.satisfies(new h.FeatureVersion(2,0))}return this._isFed2Schema}federationFeature(){var e;return null===(e=this.schema.coreFeatures)||void 0===e?void 0:e.getByIdentity(N.identity)}externalTester(){return this._externalTester||(this._externalTester=new ee(this.schema)),this._externalTester}sharingPredicate(){return this._sharingPredicate||(this._sharingPredicate=(0,f.computeShareables)(this.schema)),this._sharingPredicate}fieldUsedPredicate(){if(!this._fieldUsedPredicate){const e=L(this);this._fieldUsedPredicate=t=>!!e.has(t)}return this._fieldUsedPredicate}isFieldUsed(e){return this.fieldUsedPredicate()(e)}isFieldExternal(e){return this.externalTester().isExternal(e)}isFieldPartiallyExternal(e){return this.externalTester().isPartiallyExternal(e)}isFieldFullyExternal(e){return this.externalTester().isFullyExternal(e)}isFieldFakeExternal(e){return this.externalTester().isFakeExternal(e)}selectionSelectsAnyExternalField(e){return this.externalTester().selectsAnyExternalField(e)}isFieldShareable(e){return this.sharingPredicate()(e)}federationDirectiveNameInSchema(e){if(this.isFed2Schema()){const t=this.schema.coreFeatures;(0,r.assert)(t,"Schema should be a core schema");const n=t.getByIdentity(N.identity);return(0,r.assert)(n,"Schema should have the federation feature"),n.directiveNameInSchema(e)}return e}federationTypeNameInSchema(e){if("_"===e.charAt(0))return e;if(this.isFed2Schema()){const t=this.schema.coreFeatures;(0,r.assert)(t,"Schema should be a core schema");const n=t.getByIdentity(N.identity);return(0,r.assert)(n,"Schema should have the federation feature"),n.typeNameInSchema(e)}return"_"+e}getFederationDirective(e){const t=this.schema.directive(this.federationDirectiveNameInSchema(e));return(0,r.assert)(t,`The provided schema does not have federation directive @${e}`),t}keyDirective(){return this.getFederationDirective(m.keyDirectiveSpec.name)}overrideDirective(){return this.getFederationDirective(m.overrideDirectiveSpec.name)}extendsDirective(){return this.getFederationDirective(m.extendsDirectiveSpec.name)}externalDirective(){return this.getFederationDirective(m.externalDirectiveSpec.name)}requiresDirective(){return this.getFederationDirective(m.requiresDirectiveSpec.name)}providesDirective(){return this.getFederationDirective(m.providesDirectiveSpec.name)}shareableDirective(){return this.getFederationDirective(m.shareableDirectiveSpec.name)}tagDirective(){return this.getFederationDirective(g.tagDirectiveSpec.name)}composeDirective(){return this.getFederationDirective(m.composeDirectiveSpec.name)}inaccessibleDirective(){return this.getFederationDirective(I.inaccessibleDirectiveSpec.name)}allFederationDirectives(){const e=[this.keyDirective(),this.externalDirective(),this.requiresDirective(),this.providesDirective(),this.tagDirective(),this.extendsDirective()];return this.isFed2Schema()?e.concat(this.shareableDirective(),this.inaccessibleDirective(),this.overrideDirective(),this.composeDirective()):e}entityType(){return this.schema.type(this.federationTypeNameInSchema(t.entityTypeSpec.name))}anyType(){return this.schema.type(this.federationTypeNameInSchema(t.anyTypeSpec.name))}serviceType(){return this.schema.type(this.federationTypeNameInSchema(t.serviceTypeSpec.name))}fieldSetType(){return this.schema.type(this.federationTypeNameInSchema(m.fieldSetTypeSpec.name))}allFederationTypes(){const e=[this.anyType(),this.serviceType(),this.fieldSetType()],t=this.entityType();return t&&e.push(t),e}}t.FederationMetadata=C;class j extends i.SchemaBlueprint{constructor(e){super(),this.withRootTypeRenaming=e}onAddedCoreFeature(e,t){if(super.onAddedCoreFeature(e,t),t.url.identity===m.federationIdentity){const n=m.FEDERATION_VERSIONS.find(t.url.version);n&&n.addElementsToSchema(e)}}onMissingDirectiveDefinition(e,t,n){if(t===h.linkDirectiveDefaultName){const i=n&&n.url,r=i&&i.startsWith(T.identity)?n.as:void 0,o=T.addDefinitionsToSchema(e,r);return o.length>0?o:e.directive(t)}return super.onMissingDirectiveDefinition(e,t,n)}ignoreParsedField(e,n){if(!t.FEDERATION_OPERATION_FIELDS.includes(n))return!1;const i=P(e.schema());return!!i&&!i.isFed2Schema()}onConstructed(e){P(e)||(e._federationMetadata=new C(e))}onDirectiveDefinitionAndSchemaParsed(e){const t=B(e);return e.schemaDefinition.processUnappliedDirectives(),t}onInvalidation(e){super.onInvalidation(e);const t=P(e);(0,r.assert)(t,"Federation schema should have had its metadata set on construction"),C.prototype.onInvalidate.call(t)}onValidation(e){var t;const n=super.onValidation(e);if(this.withRootTypeRenaming)for(const r of i.allSchemaRootKinds){const o=null===(t=e.schemaDefinition.root(r))||void 0===t?void 0:t.type,s=(0,i.defaultRootName)(r);if(o&&o.name!==s){const t=e.type(s);t&&n.push(d.ERROR_CATEGORIES.ROOT_TYPE_USED.get(r).err(`The schema has a type named "${s}" but it is not set as the ${r} root type ("${o.name}" is instead): this is not supported by federation. If a root type does not use its default name, there should be no other type with that default name.`,{nodes:(0,i.sourceASTs)(o,t)})),o.rename(s)}}const o=P(e);if((0,r.assert)(o,"Federation schema should have had its metadata set on construction"),!o.isFed2Schema())return n;w({definition:o.keyDirective(),targetTypeExtractor:e=>e,errorCollector:n,metadata:o,isOnParentType:!0,allowOnNonExternalLeafFields:!0,onFields:e=>{const t=(0,i.baseType)(e.type);if((0,i.isUnionType)(t)||(0,i.isInterfaceType)(t)){let n=t.kind;throw n=n.slice(0,n.length-"Type".length),d.ERRORS.KEY_FIELDS_SELECT_INVALID_TYPE.err(`field "${e.coordinate}" is a ${n} type which is not allowed in @key`)}}}),w({definition:o.requiresDirective(),targetTypeExtractor:e=>e.parent,errorCollector:n,metadata:o,allowFieldsWithArguments:!0}),w({definition:o.providesDirective(),targetTypeExtractor:e=>{if(o.isFieldExternal(e))throw d.ERRORS.EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE.err(`Cannot have both @provides and @external on field "${e.coordinate}"`,{nodes:e.sourceAST});const t=(0,i.baseType)(e.type);if(!(0,i.isCompositeType)(t))throw d.ERRORS.PROVIDES_ON_NON_OBJECT_FIELD.err(`Invalid @provides directive on field "${e.coordinate}": field has type "${e.type}" which is not a Composite Type`,{nodes:e.sourceAST});return t},errorCollector:n,metadata:o}),function(e,t){for(const n of e.schema.interfaceTypes())for(const i of n.fields())e.isFieldExternal(i)&&t.push(d.ERRORS.EXTERNAL_ON_INTERFACE.err(`Interface type field "${i.coordinate}" is marked @external but @external is not allowed on interface fields (it is nonsensical).`,{nodes:i.sourceAST}))}(o,n),function(e,t){for(const n of e.schema.types())if((0,i.isObjectType)(n)||(0,i.isInterfaceType)(n))for(const i of n.fields())e.isFieldExternal(i)&&!e.isFieldUsed(i)&&t.push(d.ERRORS.EXTERNAL_UNUSED.err(`Field "${i.coordinate}" is marked @external but is not used in any federation directive (@key, @provides, @requires) or to satisfy an interface; the field declaration has no use and should be removed (or the field should not be @external).`,{nodes:i.sourceAST}))}(o,n);const s=o.tagDirective();if(s){const e=g.checkCompatibleDirective(s);e&&n.push(e)}for(const t of e.interfaceTypes())x(t,o,n);return n}validationRules(){return S}onUnknownDirectiveValidationError(e,t,n){const i=P(e);if((0,r.assert)(i,"This method should only have been called on a subgraph schema"),m.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES.includes(t)){if(i.isFed2Schema()){const e=i.federationFeature();(0,r.assert)(e,"Fed2 subgraph _must_ link to the federation feature");const o=e.directiveNameInSchema(t);return o.startsWith(e.nameInSchema+"__")?(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation directive, you should use fully-qualified name "@${o}" or add "@${t}" to the \`import\` argument of the @link to the federation specification.`):(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation directive, you should use "@${o}" as it is imported under that name in the @link to the federation specification of this schema.`)}return(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation 2 directive, note that this schema is a federation 1 schema. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`)}if(!i.isFed2Schema()){const e=(0,E.suggestionList)(t,m.FEDERATION2_ONLY_SPEC_DIRECTIVES.map((e=>e.name)));if(e.length>0)return(0,d.withModifiedErrorMessage)(n,`${n.message}${(0,E.didYouMean)(e.map((e=>"@"+e)))} If so, note that ${1===e.length?"it is a federation 2 directive":"they are federation 2 directives"} but this schema is a federation 1 one. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`)}return n}applyDirectivesAfterParsing(){return!0}}function M(e){let t,n=e.coreFeatures;if(n)t=n.coreDefinition,(0,r.assert)(t.url.version.satisfies(T.version),`Fed2 schema must use @link with version >= 1.0, but schema uses ${t.url}`);else{const o=function(e){if(!e.directive(T.url.name))return;const t=T.url.name;for(;;){const n=t+1;if(!e.directive(n))return n}}(e),s=T.addToSchema(e,o);if(s.length>0)throw(0,i.ErrGraphQLValidationFailed)(s);t=T,n=e.coreFeatures,(0,r.assert)(n,"Schema should now be a core schema")}(0,r.assert)(!n.getByIdentity(N.identity),"Schema already set as a federation subgraph"),e.schemaDefinition.applyDirective(n.coreItself.nameInSchema,{url:N.url.toString(),import:m.FEDERATION2_SPEC_DIRECTIVES.map((e=>`@${e.name}`))});const o=B(e);if(o.length>0)throw(0,i.ErrGraphQLValidationFailed)(o)}function P(e){return e._federationMetadata}function U(e){var n;return e.parent===(null===(n=e.schema().schemaDefinition.root("query"))||void 0===n?void 0:n.type)&&t.FEDERATION_OPERATION_FIELDS.includes(e.name)}function V(e){if("ObjectType"!==e.kind)return!1;const t=P(e.schema());return!!t&&e.hasAppliedDirective(t.keyDirective())}function G(e,n,i,r=!0){const o={blueprint:new j(r),validate:!1};let a;try{const t="string"==typeof i?(0,c.buildSchema)(new s.Source(i,e),o):(0,c.buildSchemaFromAST)(i,o);a=new J(e,n,t)}catch(n){throw n instanceof s.GraphQLError&&e!==t.FEDERATION_UNNAMED_SUBGRAPH_NAME?Z(n,e,d.ERRORS.INVALID_GRAPHQL):n}return a.validate()}function B(e){const t=e.coreFeatures;if(t)return t.getByIdentity(m.federationIdentity)?q(e):K(e);if(e.schemaDefinition.appliedDirectivesOf(h.linkDirectiveDefaultName).find(Q)){const t=T.addToSchema(e);return t.length>0?t:q(e)}return K(e)}function Q(e){const t=e.arguments();return e.name===h.linkDirectiveDefaultName&&t.url&&t.url.startsWith(m.federationIdentity)}function K(e){var t,n;for(const i of[m.keyDirectiveSpec,m.providesDirectiveSpec,m.requiresDirectiveSpec]){const o=e.directive(i.name);if(!o)continue;(0,r.assert)(0===o.applications().length,`${o} shouldn't have had validation at that places`);const s=null===(n=null===(t=o.argument("fields"))||void 0===t?void 0:t.type)||void 0===n?void 0:n.toString(),a=!!s&&1===o.arguments().length&&("String"===s||"_FieldSet"===s||"FieldSet"===s);(0===o.arguments().length||a)&&o.remove()}return[m.fieldSetTypeSpec.checkOrAdd(e,"_"+m.fieldSetTypeSpec.name),m.keyDirectiveSpec.checkOrAdd(e),m.requiresDirectiveSpec.checkOrAdd(e),m.providesDirectiveSpec.checkOrAdd(e),m.extendsDirectiveSpec.checkOrAdd(e),m.externalDirectiveSpec.checkOrAdd(e),g.tagDirectiveSpec.checkOrAdd(e)].flat()}function q(e){const t=e.coreFeatures;(0,r.assert)(t,"This method should not have been called on a non-core schema");const n=t.getByIdentity(m.federationIdentity);(0,r.assert)(n,"This method should not have been called on a schema with no @link for federation");const i=m.FEDERATION_VERSIONS.find(n.url.version);return i?i.addElementsToSchema(e):[d.ERRORS.UNKNOWN_FEDERATION_LINK_VERSION.err(`Invalid version ${n.url.version} for the federation feature in @link direction on schema`,{nodes:n.directive.sourceAST})]}function Y({parentType:e,directive:t,fieldAccessor:n,validate:i,decorateValidationErrors:r=!0}){try{const r=(0,l.parseSelectionSet)({parentType:e,source:X(t),fieldAccessor:n,validate:i});return(null==i||i)&&r.forEachElement((e=>{if("Field"===e.kind&&e.alias)throw new s.GraphQLError(`Cannot use alias "${e.alias}" in "${e}": aliases are not currently supported in @${t.name}`)})),r}catch(e){if(!(e instanceof s.GraphQLError&&r))throw e;throw A(t,e,(e=>(e.startsWith("Cannot query field")&&(e.endsWith(".")&&(e=e.slice(0,e.length-1)),t.name===m.keyDirectiveSpec.name?e+=" (the field should either be added to this subgraph or, if it should not be resolved by this subgraph, you need to add it to this subgraph with @external).":e+=" (if the field is defined in another subgraph, you need to add it to this subgraph with @external)."),e)))}}function H({parentType:e,directive:t,includeInterfaceFieldsImplementations:n,validate:r=!0}){const o=[];try{Y({parentType:e,directive:t,fieldAccessor:(e,t)=>{const r=e.field(t);if(r&&(o.push(r),n&&(0,i.isInterfaceType)(e)))for(const n of e.possibleRuntimeTypes()){const e=n.field(t);e&&o.push(e)}return r},validate:r})}catch(e){if(void 0===(0,d.errorCauses)(e)||r)throw e}return o}function X(e){var t;const n=e.arguments().fields,i=e.sourceAST;if("string"!=typeof n)throw d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(e.name).err(`Invalid value for argument "${e.definition.argument("fields").name}": must be a string.`,{nodes:i});if(i&&"Directive"===i.kind)for(const n of null!==(t=i.arguments)&&void 0!==t?t:[])if("fields"===n.name.value){if("StringValue"!==n.value.kind)throw d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(e.name).err(`Invalid value for argument "${e.definition.argument("fields").name}": must be a string.`,{nodes:i});break}return n}t.FederationBlueprint=j,t.setSchemaAsFed2Subgraph=M,t.FEDERATION2_LINK_WTH_FULL_IMPORTS='@link(url: "https://specs.apollo.dev/federation/v2.1", import: ["@key", "@requires", "@provides", "@external", "@tag", "@extends", "@shareable", "@inaccessible", "@override", "@composeDirective"])',t.asFed2SubgraphDocument=function(e){const t={kind:s.Kind.SCHEMA_EXTENSION,directives:[{kind:s.Kind.DIRECTIVE,name:{kind:s.Kind.NAME,value:h.linkDirectiveDefaultName},arguments:[{kind:s.Kind.ARGUMENT,name:{kind:s.Kind.NAME,value:"url"},value:{kind:s.Kind.STRING,value:N.url.toString()}},{kind:s.Kind.ARGUMENT,name:{kind:s.Kind.NAME,value:"import"},value:{kind:s.Kind.LIST,values:m.FEDERATION2_SPEC_DIRECTIVES.map((e=>({kind:s.Kind.STRING,value:`@${e.name}`})))}}]}]};return{kind:s.Kind.DOCUMENT,loc:e.loc,definitions:e.definitions.concat(t)}},t.printSubgraphNames=function(e){return(0,r.printHumanReadableList)(e.map((e=>`"${e}"`)),{prefix:"subgraph",prefixPlural:"subgraphs"})},t.federationMetadata=P,t.isFederationSubgraphSchema=function(e){return!!P(e)},t.isFederationField=U,t.isEntityType=V,t.buildSubgraph=G,t.newEmptyFederation2Schema=function(e){const t=new i.Schema(new j(!0),e);return M(t),t},t.parseFieldSetArgument=Y,t.collectTargetFields=H,t.subgraphsFromServiceList=function(e){var t;let n=[];const i=new z;for(const r of e)try{i.add(G(r.name,null!==(t=r.url)&&void 0!==t?t:"",r.typeDefs))}catch(e){const t=(0,d.errorCauses)(e);if(!t)throw e;n=n.concat(t)}return 0===n.length?i:n};class z{constructor(){this.subgraphs=new r.OrderedMap}add(e){if(this.subgraphs.has(e.name))throw new Error(`A subgraph named ${e.name} already exists`+(e.url?` (with url '${e.url}')`:""));return this.subgraphs.add(e.name,e),e}get(e){return this.subgraphs.get(e)}size(){return this.subgraphs.size}names(){return this.subgraphs.keys()}values(){return this.subgraphs.values()}*[Symbol.iterator](){for(const e of this.subgraphs)yield e}validate(){let e=[];for(const t of this.values())try{t.validate()}catch(t){const n=(0,d.errorCauses)(t);if(!n)throw t;e=e.concat(n)}return 0===e.length?void 0:e}toString(){return"["+this.subgraphs.keys().join(", ")+"]"}}t.Subgraphs=z,t.anyTypeSpec=(0,v.createScalarTypeSpecification)({name:"_Any"}),t.serviceTypeSpec=(0,v.createObjectTypeSpecification)({name:"_Service",fieldsFct:e=>[{name:"sdl",type:e.stringType()}]}),t.entityTypeSpec=(0,v.createUnionTypeSpecification)({name:"_Entity",membersFct:e=>e.objectTypes().filter(V).map((e=>e.name))}),t.FEDERATION_OPERATION_TYPES=[t.anyTypeSpec,t.serviceTypeSpec,t.entityTypeSpec],t.serviceFieldName="_service",t.entitiesFieldName="_entities",t.FEDERATION_OPERATION_FIELDS=[t.serviceFieldName,t.entitiesFieldName];class J{constructor(e,n,i){if(this.name=e,this.url=n,this.schema=i,e===t.FEDERATION_RESERVED_SUBGRAPH_NAME)throw d.ERRORS.INVALID_SUBGRAPH_NAME.err(`Invalid name ${t.FEDERATION_RESERVED_SUBGRAPH_NAME} for a subgraph: this name is reserved`)}metadata(){const e=P(this.schema);return(0,r.assert)(e,"The subgraph schema should have built with the federation built-ins."),e}isFed2Subgraph(){return this.metadata().isFed2Schema()}addFederationOperations(){const e=this.metadata();for(const e of t.FEDERATION_OPERATION_TYPES)e.checkOrAdd(this.schema);const n=this.schema.schemaDefinition.root("query"),r=n?n.type:this.schema.addType(new i.ObjectType("Query")),o=r.field(t.entitiesFieldName),s=e.entityType();if(s){const n=new i.NonNullType(new i.ListType(s));o?o.type||(o.type=s):r.addField(t.entitiesFieldName,n).addArgument("representations",new i.NonNullType(new i.ListType(new i.NonNullType(e.anyType()))))}else o&&o.remove();r.field(t.serviceFieldName)||r.addField(t.serviceFieldName,new i.NonNullType(e.serviceType()))}validate(){try{return this.addFederationOperations(),this.schema.validate(),this}catch(e){throw e instanceof s.GraphQLError?Z(e,this.name,d.ERRORS.INVALID_GRAPHQL):e}}isPrintedDirective(e){var t;if(this.metadata().allFederationDirectives().includes(e))return!1;const n=this.schema.coreFeatures;return!n||(null===(t=n.sourceFeature(e))||void 0===t?void 0:t.feature.url.identity)!==h.linkIdentity}isPrintedType(e){var t;if(this.metadata().allFederationTypes().includes(e))return!1;if((0,i.isObjectType)(e)&&e.isQueryRootType()&&0===e.fields().filter((e=>!U(e))).length)return!1;const n=this.schema.coreFeatures;return!n||(null===(t=n.sourceFeature(e))||void 0===t?void 0:t.feature.url.identity)!==h.linkIdentity}isPrintedDirectiveApplication(e){if(!this.schema.coreFeatures||e.name!==T.url.name)return!0;const t=e.arguments();let n;if("url"in t)try{n=h.FeatureUrl.parse(t.url)}catch(e){}return!((null==n?void 0:n.identity)===h.linkIdentity&&1===Object.keys(t).length)}toString(e=y.defaultPrintOptions){return(0,y.printSchema)(this.schema,{...e,directiveDefinitionFilter:e=>this.isPrintedDirective(e),typeFilter:e=>this.isPrintedType(e),fieldFilter:e=>!U(e),directiveApplicationFilter:e=>this.isPrintedDirectiveApplication(e)})}}function W(e,t){return"subgraph"in e?e:{...e,subgraph:t}}function Z(e,t,n){const r=(0,d.errorCauses)(e).map((e=>{var i;const r=`[${t}] ${e.message}`,o=e.nodes?e.nodes.map((e=>W(e,t))):void 0,a=null!==(i=(0,d.errorCodeDef)(e))&&void 0!==i?i:n,c={...(0,d.extractGraphQLErrorOptions)(e),nodes:o,originalError:e};return a?a.err(r,c):new s.GraphQLError(r,c)}));return 1===r.length?r[0]:(0,i.ErrGraphQLValidationFailed)(r)}t.Subgraph=J,t.addSubgraphToASTNode=W,t.addSubgraphToError=Z;class ee{constructor(e){this.schema=e,this.fakeExternalFields=new Set,this.providedFields=new Set,this.externalDirective=this.metadata().externalDirective(),this.collectFakeExternals(),this.collectProvidedFields()}metadata(){const e=P(this.schema);return(0,r.assert)(e,"Schema should be a subgraphs schema"),e}collectFakeExternals(){const e=this.metadata(),t=e.extendsDirective();for(const n of e.keyDirective().applications()){const e=n.parent;(n.ofExtension()||e.hasAppliedDirective(t))&&H({parentType:e,directive:n,includeInterfaceFieldsImplementations:!1,validate:!1}).filter((e=>e.hasAppliedDirective(this.externalDirective))).forEach((e=>this.fakeExternalFields.add(e.coordinate)))}}collectProvidedFields(){for(const e of this.metadata().providesDirective().applications()){const t=e.parent;H({parentType:(0,i.baseType)(t.type),directive:e,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>this.providedFields.add(e.coordinate)))}}isExternal(e){return e.hasAppliedDirective(this.externalDirective)&&!this.isFakeExternal(e)}isFakeExternal(e){return this.fakeExternalFields.has(e.coordinate)}selectsAnyExternalField(e){for(const t of e.selections()){if("FieldSelection"===t.kind&&this.isExternal(t.element().definition))return!0;if(t.selectionSet&&this.selectsAnyExternalField(t.selectionSet))return!0}return!1}isPartiallyExternal(e){return this.isExternal(e)&&this.providedFields.has(e.coordinate)}isFullyExternal(e){return this.isExternal(e)&&!this.providedFields.has(e.coordinate)}}function te(e,t,n,i){for(const r of t.appliedDirectivesOf(e)){let o;try{o=Y({parentType:n,directive:r})}catch(e){continue}if(ie(o)){r.remove();const n=re(o);if(n.isEmpty())i(t,r);else{const o=t.applyDirective(e,{fields:n.toString(!0,!1)});i(t,r,o)}}}}function ne(e){const t=P(e.schema());if(!t)return!1;if(e.hasAppliedDirective(t.externalDirective()))return!0;const n=e.parent;if((0,i.isInterfaceType)(n))for(const i of n.possibleRuntimeTypes()){const n=i.field(e.name);if(n&&n.hasAppliedDirective(t.externalDirective()))return!0}return!1}function ie(e){return e.selections().some((e=>"FieldSelection"===e.kind?!ne(e.field.definition)&&(!e.selectionSet||ie(e.selectionSet)):ie(e.selectionSet)))}function re(e){const t=new l.SelectionSet(e.parentType);for(const n of e.selections())if("FieldSelection"===n.kind&&ne(n.field.definition))t.add(n);else if(n.selectionSet){const e=re(n.selectionSet);e.isEmpty()||t.add((0,l.selectionOfElement)(n.element(),e))}return t}t.removeInactiveProvidesAndRequires=function(e,t=(()=>{})){const n=P(e);if(!n)return;const r=n.providesDirective(),o=n.requiresDirective();for(const n of e.types())if((0,i.isObjectType)(n)||(0,i.isInterfaceType)(n))for(const e of n.fields())te(r,e,(0,i.baseType)(e.type),t),te(o,e,n,t)}},9480:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FEDERATION_VERSIONS=t.FederationSpecDefinition=t.FEDERATION_SPEC_TYPES=t.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES=t.FEDERATION2_SPEC_DIRECTIVES=t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES=t.FEDERATION2_ONLY_SPEC_DIRECTIVES=t.composeDirectiveSpec=t.overrideDirectiveSpec=t.shareableDirectiveSpec=t.providesDirectiveSpec=t.requiresDirectiveSpec=t.externalDirectiveSpec=t.extendsDirectiveSpec=t.keyDirectiveSpec=t.fieldSetTypeSpec=t.federationIdentity=void 0;const i=n(4177),r=n(9209),o=n(3208),s=n(8929),a=n(9724),c=n(1697),l=n(4408),u=n(5848),p=n(5322);function d(e){return{name:"fields",type:f(e)}}function f(e){const t=(0,l.federationMetadata)(e);return(0,a.assert)(t,"The schema is not a federation subgraph"),new i.NonNullType(t.fieldSetType())}t.federationIdentity="https://specs.apollo.dev/federation",t.fieldSetTypeSpec=(0,o.createScalarTypeSpecification)({name:"FieldSet"}),t.keyDirectiveSpec=(0,o.createDirectiveSpecification)({name:"key",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.INTERFACE],repeatable:!0,argumentFct:e=>({args:[d(e),{name:"resolvable",type:e.booleanType(),defaultValue:!0}],errors:[]})}),t.extendsDirectiveSpec=(0,o.createDirectiveSpecification)({name:"extends",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.INTERFACE]}),t.externalDirectiveSpec=(0,o.createDirectiveSpecification)({name:"external",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[{name:"reason",type:e.stringType()}],errors:[]})}),t.requiresDirectiveSpec=(0,o.createDirectiveSpecification)({name:"requires",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[d(e)],errors:[]})}),t.providesDirectiveSpec=(0,o.createDirectiveSpecification)({name:"provides",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[d(e)],errors:[]})}),t.shareableDirectiveSpec=(0,o.createDirectiveSpecification)({name:"shareable",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.FIELD_DEFINITION]}),t.overrideDirectiveSpec=(0,o.createDirectiveSpecification)({name:"override",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[{name:"from",type:new i.NonNullType(e.stringType())}],errors:[]})}),t.composeDirectiveSpec=(0,o.createDirectiveSpecification)({name:"composeDirective",locations:[s.DirectiveLocation.SCHEMA],repeatable:!0,argumentFct:e=>({args:[{name:"name",type:e.stringType()}],errors:[]})}),t.FEDERATION2_ONLY_SPEC_DIRECTIVES=[t.shareableDirectiveSpec,p.INACCESSIBLE_VERSIONS.latest().inaccessibleDirectiveSpec,t.overrideDirectiveSpec],t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES=[t.composeDirectiveSpec];const h=[t.keyDirectiveSpec,t.requiresDirectiveSpec,t.providesDirectiveSpec,t.externalDirectiveSpec,c.TAG_VERSIONS.latest().tagDirectiveSpec,t.extendsDirectiveSpec];t.FEDERATION2_SPEC_DIRECTIVES=[...h,...t.FEDERATION2_ONLY_SPEC_DIRECTIVES,...t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES],t.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES=t.FEDERATION2_SPEC_DIRECTIVES.map((e=>e.name)),t.FEDERATION_SPEC_TYPES=[t.fieldSetTypeSpec];class m extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.federationIdentity,"federation",e))}allFedDirectives(){return h.concat(t.FEDERATION2_ONLY_SPEC_DIRECTIVES).concat(this.url.version>=new r.FeatureVersion(2,1)?t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES:[])}addElementsToSchema(e){const n=this.featureInSchema(e);(0,a.assert)(n,"The federation specification should have been added to the schema before this is called");let i=[];i=i.concat(this.addTypeSpec(e,t.fieldSetTypeSpec));for(const t of this.allFedDirectives())i=i.concat(this.addDirectiveSpec(e,t));return i}allElementNames(){return this.allFedDirectives().map((e=>`@${e.name}`)).concat([t.fieldSetTypeSpec.name])}}t.FederationSpecDefinition=m,t.FEDERATION_VERSIONS=new r.FeatureDefinitions(t.federationIdentity).add(new m(new r.FeatureVersion(2,0))).add(new m(new r.FeatureVersion(2,1))),(0,u.registerKnownFeature)(t.FEDERATION_VERSIONS)},9535:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.graphQLJSDirectiveToAST=t.graphQLJSNamedTypeToAST=t.graphQLJSSchemaToAST=void 0;const i=n(8929),r=n(4177),o=[i.OperationTypeNode.QUERY,i.OperationTypeNode.MUTATION,i.OperationTypeNode.SUBSCRIPTION];function s({definition:e,extensions:t}){return e?[e,...t]:t}function a(e){return e||void 0}function c(e){return e.astNode||e.extensionASTNodes.length>0?{definition:a(e.astNode),extensions:e.extensionASTNodes}:{definition:(0,i.parse)((0,i.printType)(e)).definitions[0],extensions:[]}}function l(e){if(e.astNode)return e.astNode;{const t=new i.GraphQLSchema({directives:[e],assumeValid:!0});return(0,i.parse)((0,i.printSchema)(t)).definitions.find((e=>e.kind===i.Kind.DIRECTIVE_DEFINITION))}}t.graphQLJSSchemaToAST=function(e){const t=Object.values(e.getTypeMap()).filter((e=>!(0,i.isIntrospectionType)(e)&&!(0,i.isSpecifiedScalarType)(e))),n=e.getDirectives().filter((e=>!(0,i.isSpecifiedDirective)(e))),u=s(function(e){if(e.astNode||e.extensionASTNodes.length>0)return{definition:a(e.astNode),extensions:e.extensionASTNodes};{let t;if(function(e){return o.some((t=>{return i=t,!!(n=e.getRootType(t))&&n.name!==(0,r.defaultRootName)(i);var n,i}))}(e)){const n=[];for(const t of o){const r=e.getRootType(t);r&&n.push({kind:i.Kind.OPERATION_TYPE_DEFINITION,operation:t,type:{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:r.name}}})}t={kind:i.Kind.SCHEMA_DEFINITION,description:e.description?{kind:i.Kind.STRING,value:e.description}:void 0,operationTypes:n}}return{definition:t,extensions:[]}}}(e)),p=t.map((e=>s(c(e)))).flat(),d=n.map((e=>l(e)));return{kind:i.Kind.DOCUMENT,definitions:[...u,...p,...d]}},t.graphQLJSNamedTypeToAST=c,t.graphQLJSDirectiveToAST=l},5322:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeInaccessibleElements=t.INACCESSIBLE_VERSIONS=t.InaccessibleSpecDefinition=t.inaccessibleIdentity=void 0;const i=n(9209),r=n(4177),o=n(8929),s=n(5848),a=n(8116),c=n(3208),l=n(9724);t.inaccessibleIdentity="https://specs.apollo.dev/inaccessible";class u extends i.FeatureDefinition{constructor(e){super(new i.FeatureUrl(t.inaccessibleIdentity,"inaccessible",e)),this.inaccessibleLocations=[o.DirectiveLocation.FIELD_DEFINITION,o.DirectiveLocation.OBJECT,o.DirectiveLocation.INTERFACE,o.DirectiveLocation.UNION],this.printedInaccessibleDefinition="directive @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION",this.isV01()||(this.inaccessibleLocations.push(o.DirectiveLocation.ARGUMENT_DEFINITION,o.DirectiveLocation.SCALAR,o.DirectiveLocation.ENUM,o.DirectiveLocation.ENUM_VALUE,o.DirectiveLocation.INPUT_OBJECT,o.DirectiveLocation.INPUT_FIELD_DEFINITION),this.printedInaccessibleDefinition="directive @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION"),this.inaccessibleDirectiveSpec=(0,c.createDirectiveSpecification)({name:"inaccessible",locations:this.inaccessibleLocations})}isV01(){return this.version.equals(new i.FeatureVersion(0,1))}addElementsToSchema(e){return this.addDirectiveSpec(e,this.inaccessibleDirectiveSpec)}inaccessibleDirective(e){return this.directive(e,"inaccessible")}checkCompatibleDirective(e){const t=Object.keys(e.arguments()).length>0,n=e.repeatable,i=e.locations.every((e=>this.inaccessibleLocations.includes(e)));if(t||n||!i)return a.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Found invalid @inaccessible directive definition. Please ensure the directive definition in your schema's definitions matches the following:\n\t${this.printedInaccessibleDefinition}`)}allElementNames(){return["@inaccessible"]}get defaultCorePurpose(){return"SECURITY"}}function p(e){const t=[];return d(e.defaultValue,function(e){const t=e.type;return(0,l.assert)(t,"Schema should have been valid, but argument/input field did not have type."),t}(e),t),t}function d(e,t,n){if(null!=e){if((0,r.isNonNullType)(t))return d(e,t.ofType,n);if(!(0,r.isScalarType)(t)&&!(0,r.isVariable)(e))if(Array.isArray(e)){if((0,r.isListType)(t)){const i=t.ofType;for(const t of e)d(t,i,n)}}else{if((0,r.isListType)(t))return d(e,t.ofType,n);if("object"!=typeof e){if("string"!=typeof e);else if((0,r.isEnumType)(t)){const i=t.value(e);void 0!==i&&n.push(i)}}else if((0,r.isInputObjectType)(t))for(const i of t.fields()){const t=e[i.name];void 0!==t&&(n.push(i),d(t,i.type,n))}}}}function f(e){const t=e.schema();return e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.EnumType||e instanceof r.InputObjectType?t.builtInTypes(!0).some((t=>t.name===e.name)):e instanceof r.DirectiveDefinition?t.builtInDirectives(!0).some((t=>t.name===e.name)):void(0,l.assert)(!1,"Unreachable code, element is of unknown type.")}t.InaccessibleSpecDefinition=u,t.INACCESSIBLE_VERSIONS=new i.FeatureDefinitions(t.inaccessibleIdentity).add(new u(new i.FeatureVersion(0,1))).add(new u(new i.FeatureVersion(0,2))),(0,s.registerKnownFeature)(t.INACCESSIBLE_VERSIONS),t.removeInaccessibleElements=function(e){e.validate();const n=e.coreFeatures;if(!n)return;const i=n.getByIdentity(t.inaccessibleIdentity);if(!i)return;const s=t.INACCESSIBLE_VERSIONS.find(i.url.version);if(!s)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([new o.GraphQLError(`Cannot remove inaccessible elements: the schema uses unsupported inaccessible spec version ${i.url.version} (supported versions: ${t.INACCESSIBLE_VERSIONS.versions().join(", ")})`)]);const c=s.inaccessibleDirective(e);if(!c)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([new o.GraphQLError(`Invalid schema: declares ${s.url} spec but does not define a @inaccessible directive.`)]);const u=s.checkCompatibleDirective(c);if(u)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([u]);!function(e,t,n,i){var o,s,c;function u(e){return e.hasAppliedDirective(i)}const d=[...t.allFeatures()];function h(e){return d.some((t=>t.isFeatureDefinition(e)))}function m(e){return(e instanceof r.DirectiveDefinition||!u(e))&&(e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.EnumType||e instanceof r.InputObjectType||e instanceof r.DirectiveDefinition||(e instanceof r.FieldDefinition||e instanceof r.ArgumentDefinition||e instanceof r.InputFieldDefinition||e instanceof r.EnumValue?m(e.parent):void(0,l.assert)(!1,"Unreachable code, element is of unknown type.")))}function y(e){const t=[];if(u(e)&&t.push(e),e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.InputObjectType){for(const n of e.fields())t.push(...y(n));return t}if(e instanceof r.EnumType){for(const n of e.values)t.push(...y(n));return t}if(e instanceof r.DirectiveDefinition||e instanceof r.FieldDefinition){for(const n of e.arguments())t.push(...y(n));return t}if(e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.ArgumentDefinition||e instanceof r.InputFieldDefinition||e instanceof r.EnumValue)return t;(0,l.assert)(!1,"Unreachable code, element is of unknown type.")}const v=[];let E;n.isV01()||(E=function(e){const t=new Map;function n(e,n){var i;const r=null!==(i=t.get(e))&&void 0!==i?i:[];0===r.length&&t.set(e,r),r.push(n)}for(const t of e.allTypes())if(!f(t)){if(t instanceof r.ObjectType||t instanceof r.InterfaceType)for(const e of t.fields())for(const t of e.arguments())for(const e of p(t))n(e,t);if(t instanceof r.InputObjectType)for(const e of t.fields())for(const t of p(e))n(t,e)}for(const t of e.allDirectives())if(!f(t))for(const e of t.arguments())for(const t of p(e))n(t,e);return t}(e));for(const t of e.allTypes())if(f(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Built-in type "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(h(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Core feature type "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(u(t)){const e=t.referencers();for(const n of e)n instanceof r.FieldDefinition||n instanceof r.ArgumentDefinition||n instanceof r.InputFieldDefinition?m(n)&&v.push(a.ERRORS.REFERENCED_INACCESSIBLE.err(`Type "${t.coordinate}" is @inaccessible but is referenced by "${n.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[n.coordinate]}})):n instanceof r.SchemaDefinition&&t===n.rootType("query")&&v.push(a.ERRORS.QUERY_ROOT_TYPE_INACCESSIBLE.err(`Type "${t.coordinate}" is @inaccessible but is the root query type, which must be in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate]}}))}else{if(t instanceof r.ObjectType||t instanceof r.InterfaceType||t instanceof r.InputObjectType){let e=!0;for(const n of t.fields())u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its ${t instanceof r.InputObjectType?"input ":""}fields are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.fields().map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(t instanceof r.UnionType){let e=!0;for(const n of t.types())u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its members are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.types().map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(t instanceof r.EnumType){let e=!0;for(const n of t.values)u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its values are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.values.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}if(t instanceof r.ObjectType||t instanceof r.InterfaceType){const e=t.interfaces(),n=[];if(t instanceof r.InterfaceType)for(const e of t.referencers())(e instanceof r.ObjectType||e instanceof r.InterfaceType)&&n.push(e);for(const i of t.fields())if(u(i))for(const t of e){const e=t.field(i.name);e&&m(e)&&v.push(a.ERRORS.IMPLEMENTED_BY_INACCESSIBLE.err(`Field "${i.coordinate}" is @inaccessible but implements the interface field "${e.coordinate}", which is in the API schema.`,{nodes:i.sourceAST,extensions:{inaccessible_elements:[i.coordinate],inaccessible_referencers:[e.coordinate]}}))}else for(const t of i.arguments())if(u(t)){t.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but is a required argument of its field.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[t.coordinate]}}));for(const e of n){const n=e.field(i.name);(0,l.assert)(n,"Schema should have been valid, but an implementing type did not implement one of this type's fields.");const r=n.argument(t.name);(0,l.assert)(r,"Schema should have been valid, but an implementing type did not implement one of this type's field's arguments."),m(r)&&r.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but is implemented by the required argument "${r.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[r.coordinate]}}))}for(const n of e){const e=null===(o=n.field(i.name))||void 0===o?void 0:o.argument(t.name);e&&m(e)&&v.push(a.ERRORS.IMPLEMENTED_BY_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but implements the interface argument "${e.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[e.coordinate]}}))}}}else if(t instanceof r.InputObjectType){for(const e of t.fields())if(u(e)){e.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Input field "${e.coordinate}" is @inaccessible but is a required input field of its type.`,{nodes:e.sourceAST,extensions:{inaccessible_elements:[e.coordinate],inaccessible_referencers:[e.coordinate]}})),(0,l.assert)(E,"Input fields can't be @inaccessible in v0.1, but default value referencers weren't computed (which is only skipped for v0.1).");const n=null!==(s=E.get(e))&&void 0!==s?s:[];for(const i of n)m(i)&&v.push(a.ERRORS.DEFAULT_VALUE_USES_INACCESSIBLE.err(`Input field "${e.coordinate}" is @inaccessible but is used in the default value of "${i.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[i.coordinate]}}))}}else if(t instanceof r.EnumType)for(const e of t.values)if(u(e)){(0,l.assert)(E,"Enum values can't be @inaccessible in v0.1, but default value referencers weren't computed (which is only skipped for v0.1).");const n=null!==(c=E.get(e))&&void 0!==c?c:[];for(const i of n)m(i)&&v.push(a.ERRORS.DEFAULT_VALUE_USES_INACCESSIBLE.err(`Enum value "${e.coordinate}" is @inaccessible but is used in the default value of "${i.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[i.coordinate]}}))}}for(const t of e.allDirectives()){const e=t.locations.filter((e=>(0,r.isTypeSystemDirectiveLocation)(e)));if(f(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Built-in directive "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(h(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Core feature directive "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(e.length>0){const n=y(t);n.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Directive "${t.coordinate}" cannot use @inaccessible because it may be applied to these type-system locations: ${e.join(", ")}.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:n.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else for(const e of t.arguments())e.isRequired()&&u(e)&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${e.coordinate}" is @inaccessible but is a required argument of its directive.`,{nodes:e.sourceAST,extensions:{inaccessible_elements:[e.coordinate],inaccessible_referencers:[e.coordinate]}}))}if(v.length>0)throw(0,r.ErrGraphQLAPISchemaValidationFailed)(v)}(e,n,s,c),function(e,t){function n(e){return e.hasAppliedDirective(t)}for(const t of e.types())if(n(t))t.remove();else if(t instanceof r.ObjectType||t instanceof r.InterfaceType)for(const e of t.fields())if(n(e))e.remove();else for(const t of e.arguments())n(t)&&t.remove();else if(t instanceof r.InputObjectType)for(const e of t.fields())n(e)&&e.remove();else if(t instanceof r.EnumType)for(const e of t.values)n(e)&&e.remove();for(const t of e.directives())for(const e of t.arguments())n(e)&&e.remove()}(e,c)}},415:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(4177),t),r(n(7964),t),r(n(2850),t),r(n(3421),t),r(n(4408),t),r(n(5811),t),r(n(758),t),r(n(9724),t),r(n(2116),t),r(n(9209),t),r(n(6920),t),r(n(1697),t),r(n(5322),t),r(n(9480),t),r(n(9624),t),r(n(8220),t),r(n(8116),t),r(n(5015),t),r(n(5388),t),r(n(9535),t)},9495:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addIntrospectionFields=t.isIntrospectionName=t.introspectionFieldNames=void 0;const i=n(8929),r=n(4177);t.introspectionFieldNames=["__schema","__type"],t.isIntrospectionName=function(e){return e.startsWith("__")},t.addIntrospectionFields=function(e){if(e.type("__Schema"))return;const t=e.addType(new r.EnumType("__TypeKind",!0));t.addValue("SCALAR"),t.addValue("OBJECT"),t.addValue("INTERFACE"),t.addValue("UNION"),t.addValue("ENUM"),t.addValue("INPUT_OBJECT"),t.addValue("LIST"),t.addValue("NON_NULL");const n=e.addType(new r.ObjectType("__InputValue",!0)),o=e.addType(new r.ObjectType("__Field",!0)),s=e.addType(new r.ObjectType("__Type",!0)),a=e.addType(new r.ObjectType("__EnumValue",!0));s.addField("kind",new r.NonNullType(t)),s.addField("name",e.stringType()),s.addField("description",e.stringType()),s.addField("fields",new r.ListType(new r.NonNullType(o))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("interfaces",new r.ListType(new r.NonNullType(s))),s.addField("possibleTypes",new r.ListType(new r.NonNullType(s))),s.addField("enumValues",new r.ListType(new r.NonNullType(a))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("inputFields",new r.ListType(new r.NonNullType(n))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("ofType",s),s.addField("specifiedByURL",e.stringType()),o.addField("name",new r.NonNullType(e.stringType())),o.addField("description",e.stringType()),o.addField("args",new r.NonNullType(new r.ListType(new r.NonNullType(n)))).addArgument("includeDeprecated",e.booleanType(),!1),o.addField("type",new r.NonNullType(s)),o.addField("isDeprecated",new r.NonNullType(e.booleanType())),o.addField("deprecationReason",e.stringType()),n.addField("name",new r.NonNullType(e.stringType())),n.addField("description",e.stringType()),n.addField("type",new r.NonNullType(s)),n.addField("defaultValue",e.stringType()),n.addField("isDeprecated",new r.NonNullType(e.booleanType())),n.addField("deprecationReason",e.stringType()),a.addField("name",new r.NonNullType(e.stringType())),a.addField("description",e.stringType()),a.addField("isDeprecated",new r.NonNullType(e.booleanType())),a.addField("deprecationReason",e.stringType());const c=e.addType(new r.EnumType("__DirectiveLocation",!0));for(const e of Object.values(i.DirectiveLocation))c.addValue(e);const l=e.addType(new r.ObjectType("__Directive",!0));l.addField("name",new r.NonNullType(e.stringType())),l.addField("description",e.stringType()),l.addField("locations",new r.NonNullType(new r.ListType(new r.NonNullType(c)))),l.addField("args",new r.NonNullType(new r.ListType(new r.NonNullType(n)))).addArgument("includeDeprecated",e.booleanType(),!1),l.addField("isRepeatable",new r.NonNullType(e.booleanType()));const u=e.addType(new r.ObjectType("__Schema",!0));u.addField("description",e.stringType()),u.addField("types",new r.NonNullType(new r.ListType(new r.NonNullType(s)))),u.addField("queryType",new r.NonNullType(s)),u.addField("mutationType",new r.NonNullType(s)),u.addField("subscriptionType",new r.NonNullType(s)),u.addField("directives",new r.NonNullType(new r.ListType(new r.NonNullType(l))));let p=e.schemaDefinition.rootType("query");p||(p=e.addType(new r.ObjectType("Query")),e.schemaDefinition.setRoot("query",p)),p.addField(new r.FieldDefinition("__schema",!0),new r.NonNullType(u)),p.addField(new r.FieldDefinition("__type",!0),s).addArgument("name",new r.NonNullType(e.stringType()))}},6920:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JOIN_VERSIONS=t.JoinSpecDefinition=t.joinIdentity=void 0;const i=n(8929),r=n(9209),o=n(4177),s=n(5848),a=n(9724);function c(e){const t=e.replace(/[\W]/g,"_"),n=t.match(/^\d/)?"_"+t:t;return(n.match(/_\d+$/)?n+"_":n).toLocaleUpperCase()}t.joinIdentity="https://specs.apollo.dev/join";class l extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.joinIdentity,"join",e))}isV01(){return this.version.equals(new r.FeatureVersion(0,1))}addElementsToSchema(e){const t=this.addDirective(e,"graph").addLocations(i.DirectiveLocation.ENUM_VALUE);t.addArgument("name",new o.NonNullType(e.stringType())),t.addArgument("url",new o.NonNullType(e.stringType()));const n=this.addEnumType(e,"Graph"),r=this.addScalarType(e,"FieldSet"),s=this.addDirective(e,"type").addLocations(i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.SCALAR);this.isV01()||(s.repeatable=!0),s.addArgument("graph",new o.NonNullType(n)),s.addArgument("key",r),this.isV01()||(s.addArgument("extension",new o.NonNullType(e.booleanType()),!1),s.addArgument("resolvable",new o.NonNullType(e.booleanType()),!0));const a=this.addDirective(e,"field").addLocations(i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.INPUT_FIELD_DEFINITION);if(a.repeatable=!0,a.addArgument("graph",new o.NonNullType(n)),a.addArgument("requires",r),a.addArgument("provides",r),this.isV01()||(a.addArgument("type",e.stringType()),a.addArgument("external",e.booleanType()),a.addArgument("override",e.stringType()),a.addArgument("usedOverridden",e.booleanType())),!this.isV01()){const t=this.addDirective(e,"implements").addLocations(i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE);t.repeatable=!0,t.addArgument("graph",new o.NonNullType(n)),t.addArgument("interface",new o.NonNullType(e.stringType()))}return this.isV01()&&this.addDirective(e,"owner").addLocations(i.DirectiveLocation.OBJECT).addArgument("graph",new o.NonNullType(n)),[]}allElementNames(){const e=["graph","Graph","FieldSet","@type","@field"];return this.isV01()?e.push("@owner"):e.push("@implements"),e}populateGraphEnum(e,t){const n=new a.MultiMap;for(const e of t){const t=c(e.name);n.add(t,e)}const i=new Map;for(const[e,t]of n)if(1===t.length)i.set(t[0].name,e);else for(const[n,r]of t.entries())i.set(r.name,`${e}_${n+1}`);const r=this.graphEnum(e),o=this.graphDirective(e);for(const e of t)r.addValue(i.get(e.name)).applyDirective(o,{name:e.name,url:e.url});return i}fieldSetScalar(e){return this.type(e,"FieldSet")}graphEnum(e){return this.type(e,"Graph")}graphDirective(e){return this.directive(e,"graph")}typeDirective(e){return this.directive(e,"type")}implementsDirective(e){return this.directive(e,"implements")}fieldDirective(e){return this.directive(e,"field")}ownerDirective(e){return this.directive(e,"owner")}get defaultCorePurpose(){return"EXECUTION"}}t.JoinSpecDefinition=l,t.JOIN_VERSIONS=new r.FeatureDefinitions(t.joinIdentity).add(new l(new r.FeatureVersion(0,1))).add(new l(new r.FeatureVersion(0,2))),(0,s.registerKnownFeature)(t.JOIN_VERSIONS)},5848:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.coreFeatureDefinitionIfKnown=t.registerKnownFeature=void 0;const n=new Map;t.registerKnownFeature=function(e){n.has(e.identity)||n.set(e.identity,e)},t.coreFeatureDefinitionIfKnown=function(e){var t;return null===(t=n.get(e.identity))||void 0===t?void 0:t.find(e.version)}},758:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.operationToDocument=t.parseSelectionSet=t.parseOperation=t.operationFromDocument=t.FragmentSelection=t.FieldSelection=t.selectionOfElement=t.selectionSetOfElement=t.allFieldDefinitionsInSelectionSet=t.SelectionSet=t.NamedFragments=t.NamedFragmentDefinition=t.selectionSetOf=t.Operation=t.concatOperationPaths=t.conditionalDirectivesInOperationPath=t.sameOperationPaths=t.FragmentElement=t.Field=void 0;const i=n(8929),r=n(4177),o=n(8116),s=n(5811),a=n(9724),c=n(3421);function l(e,t,n){if(!e)throw o.ERRORS.INVALID_GRAPHQL.err(t(),{nodes:n})}function u(e,t){return(0,r.sameDirectiveApplications)(e.appliedDirectives,t.appliedDirectives)}class p extends r.DirectiveTargetElement{constructor(e,t){super(e),this.variablesInElement=t}variables(){return(0,r.mergeVariables)(this.variablesInElement,this.variablesInAppliedDirectives())}addAttachement(e,t){this.attachements||(this.attachements=new Map),this.attachements.set(e,t)}getAttachement(e){var t;return null===(t=this.attachements)||void 0===t?void 0:t.get(e)}copyAttachementsTo(e){if(this.attachements)for(const[t,n]of this.attachements.entries())e.addAttachement(t,n)}}class d extends p{constructor(e,t=Object.create(null),n=new r.VariableDefinitions,i){super(e.schema(),(0,r.variablesInArguments)(t)),this.definition=e,this.args=t,this.variableDefinitions=n,this.alias=i,this.kind="Field"}get name(){return this.definition.name}responseName(){return this.alias?this.alias:this.name}get parentType(){return this.definition.parent}withUpdatedDefinition(e){const t=new d(e,this.args,this.variableDefinitions,this.alias);for(const e of this.appliedDirectives)t.applyDirective(e.definition,e.arguments());return this.copyAttachementsTo(t),t}appliesTo(e){const t=e.field(this.name);return!!t&&this.selects(t)}selects(e,t=!1){if(e==this.definition)return!0;if(this.name!==e.name)return!1;for(const n of e.arguments()){const e=this.args[n.name];if(void 0===e){if(void 0===n.defaultValue&&!(0,r.isNullableType)(n.type))return!1}else if(!t&&!(0,c.isValidValue)(e,n,this.variableDefinitions))return!1}if(!t)for(const[t,n]of Object.entries(this.args))if(null!==n&&void 0===e.argument(t))return!1;return!0}validate(){l(this.name===this.definition.name,(()=>`Field name "${this.name}" cannot select field "${this.definition.coordinate}: name mismatch"`));for(const e of this.definition.arguments()){const t=this.args[e.name];void 0===t?l(void 0!==e.defaultValue||(0,r.isNullableType)(e.type),(()=>`Missing mandatory value for argument "${e.name}" of field "${this.definition.coordinate}" in selection "${this}"`)):l((0,c.isValidValue)(t,e,this.variableDefinitions),(()=>`Invalid value ${(0,c.valueToString)(t)} for argument "${e.coordinate}" of type ${e.type}`))}for(const[e,t]of Object.entries(this.args))l(null===t||void 0!==this.definition.argument(e),(()=>`Unknown argument "${e}" in field application of "${this.name}"`))}updateForAddingTo(e){const t=e.parentType,n=this.definition.parent;if(t===n)return this;if(this.name===r.typenameFieldName)return this.withUpdatedDefinition(t.typenameField());l(t.name==n.name||(0,r.isInterfaceType)(n)&&n.allImplementations().some((e=>e.name==t.name)),(()=>`Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${e.parentType}"`));const i=t.field(this.name);return l(i,(()=>`Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${t}" (that does not declare that field)`)),this.withUpdatedDefinition(i)}hasDefer(){return!1}deferDirectiveArgs(){}withoutDefer(){return this}equals(e){return this===e||"Field"===e.kind&&this.name===e.name&&this.alias===e.alias&&(0,c.argumentsEquals)(this.args,e.args)&&u(this,e)}toString(){const e=this.alias?this.alias+": ":"",t=Object.entries(this.args),n=0==t.length?"":"("+t.map((([e,t])=>{var n;return`${e}: ${(0,c.valueToString)(t,null===(n=this.definition.argument(e))||void 0===n?void 0:n.type)}`})).join(", ")+")";return e+this.name+n+this.appliedDirectivesToString()}}t.Field=d;class f extends p{constructor(e,t){super(e.schema(),[]),this.sourceType=e,this.kind="FragmentElement",this.typeCondition=void 0!==t&&"string"==typeof t?this.schema().type(t):t}get parentType(){return this.sourceType}castedType(){return this.typeCondition?this.typeCondition:this.sourceType}withUpdatedSourceType(e){var t;const n=new f(e,null===(t=this.typeCondition)||void 0===t?void 0:t.name);for(const e of this.appliedDirectives)n.applyDirective(e.definition,e.arguments());return this.copyAttachementsTo(n),n}updateForAddingTo(e){const t=e.parentType,n=this.parentType,i=this.typeCondition;return t!=n?(l(!i||(0,r.runtimeTypesIntersects)(t,i),(()=>`Cannot add fragment of parent type "${this.parentType}" to selection set of parent type "${e.parentType}"`)),this.withUpdatedSourceType(t)):this}hasDefer(){return this.hasAppliedDirective("defer")}hasStream(){return this.hasAppliedDirective("stream")}deferDirectiveArgs(){var e;return null===(e=this.appliedDirectivesOf(this.schema().deferDirective())[0])||void 0===e?void 0:e.arguments()}withoutDefer(){const e=this.schema().deferDirective().name,t=this.appliedDirectives.filter((t=>t.name!==e));if(!this.typeCondition&&0===t.length)return;if(t.length===this.appliedDirectives.length)return this;const n=new f(this.sourceType,this.typeCondition);return this.copyAttachementsTo(n),t.forEach((e=>n.applyDirective(e.definition,e.arguments()))),n}withNormalizedDefer(e){const t=this.deferDirectiveArgs();if(!t)return this;let n,i;if(void 0!==t.if)if("boolean"==typeof t.if){if(!t.if)return this.withoutDefer();n={...t,if:void 0}}else i=t.if;let r=t.label;if(r||(r=e.newLabel(),n?n.label=r:n={...t,label:r}),i&&e.registerCondition(r,i),!n)return this;const o=new f(this.sourceType,this.typeCondition);this.copyAttachementsTo(o);const s=this.schema().deferDirective();return this.appliedDirectives.filter((e=>e.name!==s.name)).forEach((e=>o.applyDirective(e.definition,e.arguments()))),o.applyDirective(this.schema().deferDirective(),n),o}equals(e){var t,n;return this===e||"FragmentElement"===e.kind&&(null===(t=this.typeCondition)||void 0===t?void 0:t.name)===(null===(n=e.typeCondition)||void 0===n?void 0:n.name)&&u(this,e)}toString(){return"..."+(this.typeCondition?" on "+this.typeCondition:"")+this.appliedDirectivesToString()}}function h(e){return e.map((e=>e.appliedDirectives)).flat().filter((e=>(0,r.isConditionalDirective)(e)))}function m(e,t,n){const i="Field"===e.kind?(0,r.baseType)(e.definition.type):e.typeCondition;return!!i&&"FragmentElement"===t.kind&&!!t.typeCondition&&(0===t.appliedDirectives.length||(0,r.isDirectiveApplicationsSubset)(n,t.appliedDirectives))&&(0,s.sameType)(i,t.typeCondition)}t.FragmentElement=f,t.sameOperationPaths=function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].equals(t[n]))return!1;return!0},t.conditionalDirectivesInOperationPath=h,t.concatOperationPaths=function(e,t){if(0===e.length)return t;if(0===t.length)return e;const n=e[e.length-1],i=h(e);let r=t[0];for(;r&&m(n,r,i);)r=(t=t.slice(1))[0];return e.concat(t)};class y{constructor(e,t,n,i){this.rootKind=e,this.selectionSet=t,this.variableDefinitions=n,this.name=i}optimize(e,t=2){if((0,a.assert)(t>=1,`Expected 'minUsagesToOptimize' to be at least 1, but got ${t}`),!e||e.isEmpty())return this;let n=this.selectionSet.optimize(e);if(n===this.selectionSet)return this;const i=new Map;n.collectUsedFragmentNames(i);for(const t of e.names())i.has(t)||i.set(t,0);const r=(0,a.mapEntries)(i).filter((([e,n])=>n<t)).map((([e])=>e));return n=n.expandFragments(r),new y(this.rootKind,n,this.variableDefinitions,this.name)}expandAllFragments(){const e=this.selectionSet.expandFragments();return e===this.selectionSet?this:new y(this.rootKind,e,this.variableDefinitions,this.name)}withoutDefer(e){(0,a.assert)(!this.selectionSet.fragments||this.selectionSet.fragments.isEmpty(),'Removing @defer currently only work on "expanded" selections (no named fragments)');const t=this.selectionSet.withoutDefer(e);return t==this.selectionSet?this:new y(this.rootKind,t,this.variableDefinitions,this.name)}withNormalizedDefer(){(0,a.assert)(!this.selectionSet.fragments||this.selectionSet.fragments.isEmpty(),'Assigning @defer lables currently only work on "expanded" selections (no named fragments)');const e=new N,{hasDefers:t,hasNonLabelledOrConditionalDefers:n}=e.init(this.selectionSet);let i=this;if(n){const t=this.selectionSet.withNormalizedDefer(e);i=new y(this.rootKind,t,this.variableDefinitions,this.name)}return{operation:i,hasDefers:t,assignedDeferLabels:e.assignedLabels,deferConditions:e.deferConditions}}toString(e=!1,t=!0){return this.selectionSet.toOperationString(this.rootKind,this.variableDefinitions,this.name,e,t)}}function v(e,t){if(!e)return;const n=t.schema();for(const i of e){const e=n.directive(i.name.value);l(e,(()=>`Unknown directive "@${i.name.value}" in selection`)),t.applyDirective(e,(0,c.argumentsFromAST)(e.coordinate,i.arguments,e))}}function E(e,t){const n=new b(e);return n.add(t),n}t.Operation=y,t.selectionSetOf=E;class T extends r.DirectiveTargetElement{constructor(e,t,n,i){super(e),this.name=t,this.typeCondition=n,this.selectionSet=i}withUpdatedSelectionSet(e){return new T(this.schema(),this.name,this.typeCondition,e)}variables(){return(0,r.mergeVariables)(this.variablesInAppliedDirectives(),this.selectionSet.usedVariables())}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e)}toFragmentDefinitionNode(){return{kind:i.Kind.FRAGMENT_DEFINITION,name:{kind:i.Kind.NAME,value:this.name},typeCondition:{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:this.typeCondition.name}},selectionSet:this.selectionSet.toSelectionSetNode()}}canApplyAtType(e){return(0,s.sameType)(this.typeCondition,e)||(0,r.isAbstractType)(this.typeCondition)&&!(0,r.isUnionType)(e)&&(0,s.isDirectSubtype)(this.typeCondition,e)}toString(e){return(null!=e?e:"")+`fragment ${this.name} on ${this.typeCondition}${this.appliedDirectivesToString()} ${this.selectionSet.toString(!1,!0,e)}`}}t.NamedFragmentDefinition=T;class g{constructor(){this.fragments=new a.MapWithCachedArrays}isEmpty(){return 0===this.fragments.size}variables(){let e=[];for(const t of this.fragments.values())e=(0,r.mergeVariables)(e,t.variables());return e}names(){return this.fragments.keys()}add(e){if(this.fragments.has(e.name))throw o.ERRORS.INVALID_GRAPHQL.err(`Duplicate fragment name '${e}'`);this.fragments.set(e.name,e)}addIfNotExist(e){this.fragments.has(e.name)||this.fragments.set(e.name,e)}maybeApplyingAtType(e){return this.fragments.values().filter((t=>t.canApplyAtType(e)))}without(e){if(!e.some((e=>this.fragments.has(e))))return this;const t=new g;for(const n of this.fragments.values())if(!e.includes(n.name)){const i=n.selectionSet.expandFragments(e,!1),r=i===n.selectionSet?n:new T(n.schema(),n.name,n.typeCondition,i);t.add(r)}return t}get(e){return this.fragments.get(e)}has(e){return this.fragments.has(e)}definitions(){return this.fragments.values()}validate(){for(const e of this.fragments.values())e.selectionSet.validate()}toFragmentDefinitionNodes(){return this.definitions().map((e=>e.toFragmentDefinitionNode()))}toString(e){return this.definitions().map((t=>t.toString(e))).join("\n\n")}}t.NamedFragments=g;class I{constructor(){this._isFrozen=!1}freeze(){return this.isFrozen()||(this.freezeInternals(),this._isFrozen=!0),this.us()}isFrozen(){return this._isFrozen}cloneIfFrozen(){return this.isFrozen()?this.clone():this.us()}}class N{constructor(){this.index=0,this.assignedLabels=new Set,this.deferConditions=new a.SetMultiMap,this.usedLabels=new Set}init(e){let t=!1,n=!1;const i=e.selections().concat();for(;i.length>0;){const e=i.pop();if("FragmentSelection"===e.kind){const i=e.element().deferDirectiveArgs();i&&(n=!0,i.label&&void 0===i.if||(t=!0),i.label&&this.usedLabels.add(i.label))}e.selectionSet&&e.selectionSet.selections().forEach((e=>i.push(e)))}return{hasDefers:n,hasNonLabelledOrConditionalDefers:t}}nextLabel(){return"qp__"+this.index++}newLabel(){let e=this.nextLabel();for(;this.usedLabels.has(e);)e=this.nextLabel();return this.assignedLabels.add(e),e}registerCondition(e,t){this.deferConditions.add(t.name,e)}}class b extends I{constructor(e,t){super(),this.parentType=e,this.fragments=t,this._selections=new a.MultiMap,this._selectionCount=0,l(!(0,r.isLeafType)(e),(()=>`Cannot have selection on non-leaf type ${e}`))}us(){return this}selections(e=!1){if(!this._cachedSelections){const e=new Array(this._selectionCount);let t=0;for(const n of this._selections.values())for(const i of n)e[t++]=i;this._cachedSelections=e}if((0,a.assert)(this._cachedSelections,"Cache should have been populated"),e&&this._cachedSelections.length>1){const e=new Array(this._selectionCount);for(let t=0;t<this._selectionCount;t++)e[t]=this._cachedSelections[this._selectionCount-t-1];return e}return this._cachedSelections}usedVariables(){let e=[];for(const t of this._selections.values())for(const n of t)e=(0,r.mergeVariables)(e,n.usedVariables());return this.fragments&&(e=(0,r.mergeVariables)(e,this.fragments.variables())),e}collectUsedFragmentNames(e){for(const t of this._selections.values())for(const n of t)n.collectUsedFragmentNames(e)}optimize(e){if(!e||e.isEmpty())return this;if(this.fragments&&this.fragments.definitions().some((t=>e.get(t.name))))return this;const t=new b(this.parentType,e);for(const n of this.selections())t.add(n.optimize(e));return t}expandFragments(e,t=!0){var n;if(e&&0===e.length)return this;const i=t?e?null===(n=this.fragments)||void 0===n?void 0:n.without(e):void 0:this.fragments,r=new b(this.parentType,i);for(const n of this.selections()){const i=n.expandFragments(e,t);Array.isArray(i)?r.addAll(i):r.add(i)}return r}lazyMap(e){let t;const n=this.selections();for(let i=0;i<n.length;i++){const r=n[i],o=e(r);if(o!==r&&!t){t=[];for(let e=0;e<i;e++)t.push(n[e])}o&&t&&(o instanceof b?o.selections().forEach((e=>t.push(e))):t.push(o))}return t?new b(this.parentType,this.fragments).addAll(t):this}withoutDefer(e){return(0,a.assert)(!this.fragments,"Not yet supported"),this.lazyMap((t=>t.withoutDefer(e)))}withNormalizedDefer(e){return(0,a.assert)(!this.fragments,"Not yet supported"),this.lazyMap((t=>t.withNormalizedDefer(e)))}filter(e){return this.lazyMap((t=>t.filter(e)))}withoutEmptyBranches(){const e=this.filter((e=>{var t;return!0!==(null===(t=e.selectionSet)||void 0===t?void 0:t.isEmpty())}));return e.isEmpty()?void 0:e}freezeInternals(){for(const e of this.selections())e.freeze()}mergeIn(e){for(const t of e.selections())this.add(t)}addAll(e){return e.forEach((e=>this.add(e))),this}add(e){(0,a.assert)(!this.isFrozen(),(()=>`Cannot add to frozen selection: ${this}`));const t=e.updateForAddingTo(this),n=t.key(),i=this._selections.get(n);if(i)for(const e of i)if(e.kind===t.kind&&u(e.element(),t.element()))return t.selectionSet&&e.selectionSet.mergeIn(t.selectionSet),e;return this._selections.add(n,t),++this._selectionCount,this._cachedSelections=void 0,t}addPath(e,t){let n=this,i=this;for(const t of e){l(i,(()=>`Cannot apply selection ${t} to non-selectable parent type "${n.parentType}"`));const e=i.add(_(t));n=i,i=e.selectionSet}t&&t(i)}addSelectionSetNode(e,t,n=((e,t)=>e.field(t))){if(e)for(const i of e.selections)this.addSelectionNode(i,t,n)}addSelectionNode(e,t,n=((e,t)=>e.field(t))){this.add(this.nodeToSelection(e,t,n))}nodeToSelection(e,t,n){var o,s;let a;switch(e.kind){case i.Kind.FIELD:const u=n(this.parentType,e.name.value);l(u,(()=>`Cannot query field "${e.name.value}" on type "${this.parentType}".`),this.parentType.sourceAST);const p=(0,r.baseType)(u.type);a=new S(new d(u,(0,c.argumentsFromAST)(u.coordinate,e.arguments,u),t,null===(o=e.alias)||void 0===o?void 0:o.value),(0,r.isLeafType)(p)?void 0:new b(p,this.fragments)),e.selectionSet&&(l(a.selectionSet,(()=>`Unexpected selection set on leaf field "${a.element()}"`),a.element().definition.sourceAST),a.selectionSet.addSelectionSetNode(e.selectionSet,t,n));break;case i.Kind.INLINE_FRAGMENT:const h=new f(this.parentType,null===(s=e.typeCondition)||void 0===s?void 0:s.name.value);a=new D(h,new b(h.typeCondition?h.typeCondition:h.parentType,this.fragments)),a.selectionSet.addSelectionSetNode(e.selectionSet,t,n);break;case i.Kind.FRAGMENT_SPREAD:const m=e.name.value;l(this.fragments,(()=>`Cannot find fragment name "${m}" (no fragments were provided)`)),a=new A(this.parentType,this.fragments,m)}return v(e.directives,a.element()),a}equals(e){if(this===e)return!0;if(this._selections.size!==e._selections.size)return!1;for(const[t,n]of this._selections){const i=e._selections.get(t);if(!i||n.length!==i.length||!n.every((e=>i.some((t=>e.equals(t))))))return!1}return!0}contains(e){if(this._selections.size<e._selections.size)return!1;for(const[t,n]of e._selections){const e=this._selections.get(t);if(!e||e.length<n.length||!n.every((t=>e.some((e=>e.contains(t))))))return!1}return!0}validate(){l(!this.isEmpty(),(()=>"Invalid empty selection set"));for(const e of this.selections())e.validate()}isEmpty(){return 0===this._selections.size}toSelectionSetNode(){return this.isEmpty()?{kind:i.Kind.SELECTION_SET,selections:[{kind:i.Kind.FIELD,name:{kind:i.Kind.NAME,value:"..."}}]}:{kind:i.Kind.SELECTION_SET,selections:Array.from(this.selectionsInPrintOrder(),(e=>e.toSelectionNode()))}}selectionsInPrintOrder(){const e=this._selections.get(r.typenameFieldName);return e?e.concat(this.selections().filter((e=>!(e=>"FieldSelection"===e.kind&&!e.field.alias&&e.field.name===r.typenameFieldName)(e)))):this.selections()}toOperationPaths(){return this.toOperationPathsInternal([])}toOperationPathsInternal(e){return this.selections().flatMap((t=>{const n=e.map((e=>e.concat(t.element())));return t.selectionSet?t.selectionSet.toOperationPathsInternal(n):n}))}forEachElement(e){var t;const n=this.selections().concat();for(;n.length>0;){const i=n.pop();e(i.element()),null===(t=i.selectionSet)||void 0===t||t.selections(!0).forEach((e=>n.push(e)))}}clone(){const e=new b(this.parentType);for(const t of this.selections()){const n=t.clone();e._selections.add(n.key(),n),++e._selectionCount}return e}toOperationString(e,t,n,i=!1,r=!0){const o=r?"":void 0,s=i||!this.fragments||this.fragments.isEmpty()?"":this.fragments.toString(o)+"\n\n";return"query"==e&&!n&&t.isEmpty()?s+this.toString(i,!0,o):s+e+(n?" "+(n+(t.isEmpty()?"":t.toString())):t.isEmpty()?"":" "+t.toString())+" "+this.toString(i,!0,o)}toString(e=!0,t=!0,n){if(void 0===n){const n=this.selections().map((t=>t.toString(e))).join(" ");return t?"{ "+n+" }":n}{const i=t?n+"  ":n,r=this.selections().map((t=>t.toString(e,i))).join("\n");return t?"{\n"+r+"\n"+n+"}":r}}}function _(e,t){return"Field"===e.kind?new S(e,t):new D(e,t)}t.SelectionSet=b,t.allFieldDefinitionsInSelectionSet=function(e){const t=Array.from(e.selections()),n=[];for(;t.length>0;){const e=t.pop();"FieldSelection"===e.kind&&n.push(e.field.definition),e.selectionSet&&t.push(...e.selectionSet.selections())}return n},t.selectionSetOfElement=function(e,t){const n=new b(e.parentType);return n.add(_(e,t)),n},t.selectionOfElement=_;class S extends I{constructor(e,t){super(),this.field=e,this.kind="FieldSelection";const n=(0,r.baseType)(e.definition.type);this.selectionSet=(0,r.isLeafType)(n)?void 0:t?t.cloneIfFrozen():new b(n)}us(){return this}key(){return this.element().responseName()}element(){return this.field}usedVariables(){var e,t;return(0,r.mergeVariables)(this.element().variables(),null!==(t=null===(e=this.selectionSet)||void 0===e?void 0:e.usedVariables())&&void 0!==t?t:[])}collectUsedFragmentNames(e){this.selectionSet&&this.selectionSet.collectUsedFragmentNames(e)}optimize(e){const t=this.selectionSet?this.selectionSet.optimize(e):void 0,n=(0,r.baseType)(this.field.definition.type);if((0,r.isCompositeType)(n)&&t)for(const i of e.maybeApplyingAtType(n))if(t.equals(i.selectionSet)){const t=new A(n,e,i.name);return new S(this.field,E(n,t))}return this.selectionSet===t?this:new S(this.field,t)}filter(e){if(!this.selectionSet)return e(this)?this:void 0;const t=this.selectionSet.filter(e),n=this.selectionSet===t?this:new S(this.field,t);return e(n)?n:void 0}freezeInternals(){var e;null===(e=this.selectionSet)||void 0===e||e.freeze()}expandFragments(e,t=!0){const n=this.selectionSet?this.selectionSet.expandFragments(e,t):void 0;return this.selectionSet===n?this:new S(this.field,n)}fieldArgumentsToAST(){const e=Object.entries(this.field.args);if(0!==e.length)return e.map((([e,t])=>({kind:i.Kind.ARGUMENT,name:{kind:i.Kind.NAME,value:e},value:(0,c.valueToAST)(t,this.field.definition.argument(e).type)})))}validate(){var e;this.field.validate(),l(!(this.selectionSet&&this.selectionSet.isEmpty()),(()=>`Invalid empty selection set for field "${this.field.definition.coordinate}" of non-leaf type ${this.field.definition.type}`),this.field.definition.sourceAST),null===(e=this.selectionSet)||void 0===e||e.validate()}updateForAddingTo(e){var t;const n=this.field.updateForAddingTo(e);if(this.field===n)return this.cloneIfFrozen();const i=(0,r.baseType)(n.definition.type);let o;if(this.selectionSet&&this.selectionSet.parentType!==i){(0,a.assert)((0,r.isCompositeType)(i),`Expected ${i.coordinate} to be composite but ${i.kind}`),o=new b(i);for(const e of this.selectionSet.selections())o.add(e)}else o=null===(t=this.selectionSet)||void 0===t?void 0:t.cloneIfFrozen();return new S(n,o)}toSelectionNode(){var e;const t=this.field.alias?{kind:i.Kind.NAME,value:this.field.alias}:void 0;return{kind:i.Kind.FIELD,name:{kind:i.Kind.NAME,value:this.field.name},alias:t,arguments:this.fieldArgumentsToAST(),directives:this.element().appliedDirectivesToDirectiveNodes(),selectionSet:null===(e=this.selectionSet)||void 0===e?void 0:e.toSelectionSetNode()}}withUpdatedSubSelection(e){return new S(this.field,e)}equals(e){return this===e||!!(e instanceof S&&this.field.equals(e.field))&&(this.selectionSet?!!e.selectionSet&&this.selectionSet.equals(e.selectionSet):!e.selectionSet)}contains(e){return!!(e instanceof S&&this.field.equals(e.field))&&(!e.selectionSet||!!this.selectionSet&&this.selectionSet.contains(e.selectionSet))}namedFragments(){var e;return null===(e=this.selectionSet)||void 0===e?void 0:e.fragments}withoutDefer(e){var t;const n=null===(t=this.selectionSet)||void 0===t?void 0:t.withoutDefer(e);return n===this.selectionSet?this:new S(this.field,n)}withNormalizedDefer(e){var t;const n=null===(t=this.selectionSet)||void 0===t?void 0:t.withNormalizedDefer(e);return n===this.selectionSet?this:new S(this.field,n)}clone(){return this.selectionSet?new S(this.field,this.selectionSet.clone()):this}toString(e=!0,t){return(null!=t?t:"")+this.field+(this.selectionSet?" "+this.selectionSet.toString(e,!0,t):"")}}t.FieldSelection=S;class O extends I{constructor(){super(...arguments),this.kind="FragmentSelection"}us(){return this}validateDeferAndStream(){if(this.element().hasDefer()||this.element().hasStream()){const e=this.element().schema().schemaDefinition,t=this.element().parentType;l(e.rootType("mutation")!==t&&e.rootType("subscription")!==t,(()=>{var n;return`The @defer and @stream directives cannot be used on ${null===(n=e.roots().filter((e=>e.type===t)).pop())||void 0===n?void 0:n.rootKind} root type "${t}"`}))}}usedVariables(){return(0,r.mergeVariables)(this.element().variables(),this.selectionSet.usedVariables())}filter(e){const t=this.selectionSet,n=t.filter(e),i=n===t?this:new D(this.element(),n);return e(i)?i:void 0}freezeInternals(){this.selectionSet.freeze()}equals(e){return this===e||e instanceof O&&this.element().equals(e.element())&&this.selectionSet.equals(e.selectionSet)}contains(e){return e instanceof O&&this.element().equals(e.element())&&this.selectionSet.contains(e.selectionSet)}clone(){return new D(this.element(),this.selectionSet.clone())}}t.FragmentSelection=O;class D extends O{constructor(e,t){super(),this.fragmentElement=e,this._selectionSet=t?t.cloneIfFrozen():new b(e.typeCondition?e.typeCondition:e.parentType)}key(){var e,t;return null!==(t=null===(e=this.element().typeCondition)||void 0===e?void 0:e.name)&&void 0!==t?t:""}validate(){this.validateDeferAndStream(),l(!this.selectionSet.isEmpty(),(()=>`Invalid empty selection set for fragment "${this.element()}"`)),this.selectionSet.validate()}updateForAddingTo(e){var t;const n=this.element().updateForAddingTo(e);if(this.element()===n)return this.cloneIfFrozen();const i=n.castedType();let r;if(this.selectionSet.parentType!==i){r=new b(i);for(const e of this.selectionSet.selections())r.add(e)}else r=null===(t=this.selectionSet)||void 0===t?void 0:t.cloneIfFrozen();return new D(n,r)}get selectionSet(){return this._selectionSet}namedFragments(){return this.selectionSet.fragments}element(){return this.fragmentElement}toSelectionNode(){const e=this.element().typeCondition;return{kind:i.Kind.INLINE_FRAGMENT,typeCondition:e?{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:e.name}}:void 0,directives:this.element().appliedDirectivesToDirectiveNodes(),selectionSet:this.selectionSet.toSelectionSetNode()}}optimize(e){let t=this.selectionSet.optimize(e);const n=this.element().typeCondition;if(n)for(const i of e.maybeApplyingAtType(n))if(t.equals(i.selectionSet)){const r=new A(this.element().parentType,e,i.name);if((0,s.sameType)(n,i.typeCondition))return this.fragmentElement.appliedDirectives.forEach((e=>{r.element().applyDirective(e.definition,e.arguments())})),r;t=E(r.element().parentType,r);break}return this.selectionSet===t?this:new D(this.fragmentElement,t)}expandFragments(e,t=!0){const n=this.selectionSet.expandFragments(e,t);return this.selectionSet===n?this:new D(this.element(),n)}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e)}withoutDefer(e){const t=this.selectionSet.withoutDefer(e),n=this.fragmentElement.deferDirectiveArgs(),i=n&&(!e||n.label&&e.has(n.label));if(t===this.selectionSet&&!i)return this;const r=i?this.fragmentElement.withoutDefer():this.fragmentElement;return r?new D(r,t):t}withNormalizedDefer(e){const t=this.fragmentElement.withNormalizedDefer(e),n=this.selectionSet.withNormalizedDefer(e);return t?t===this.fragmentElement&&n===this.selectionSet?this:new D(t,n):n}withUpdatedSubSelection(e){return new D(this.fragmentElement,e)}toString(e=!0,t){return(null!=t?t:"")+this.fragmentElement+" "+this.selectionSet.toString(e,!0,t)}}class A extends O{constructor(e,t,n){super(),this.fragments=t;const i=t.get(n);l(i,(()=>`Unknown fragment "...${n}"`)),this.namedFragment=i,this._element=new f(e,i.typeCondition);for(const e of i.appliedDirectives)this._element.applyDirective(e.definition,e.arguments())}key(){return"..."+this.namedFragment.name}element(){return this._element}namedFragments(){return this.fragments}get selectionSet(){return this.namedFragment.selectionSet}validate(){this.validateDeferAndStream()}toSelectionNode(){const e=this.spreadDirectives(),t=0===e.length?void 0:e.map((e=>({kind:i.Kind.DIRECTIVE,name:{kind:i.Kind.NAME,value:e.name},arguments:e.argumentsToAST()})));return{kind:i.Kind.FRAGMENT_SPREAD,name:{kind:i.Kind.NAME,value:this.namedFragment.name},directives:t}}optimize(e){return this}updateForAddingTo(e){return this}expandFragments(e,t=!0){if(e&&!e.includes(this.namedFragment.name))return this;const n=this.selectionSet.expandFragments(e,t);return(0,s.sameType)(this._element.parentType,this.namedFragment.typeCondition)&&0===this._element.appliedDirectives.length?n.selections():new D(this._element,n)}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e);const t=e.get(this.namedFragment.name);e.set(this.namedFragment.name,void 0===t?1:t+1)}withoutDefer(e){(0,a.assert)(!1,"Unsupported, see `Operation.withoutDefer`")}withNormalizedDefer(e){(0,a.assert)(!1,"Unsupported, see `Operation.withAllDeferLabelled`")}spreadDirectives(){return this._element.appliedDirectives.slice(this.namedFragment.appliedDirectives.length)}withUpdatedSubSelection(e){(0,a.assert)(!1,"Unssupported")}toString(e=!0,t){if(e)return(null!=t?t:"")+this._element+" "+this.selectionSet.toString(!0,!0,t);{const e=this.spreadDirectives(),n=0==e.length?"":" "+e.join(" ");return(null!=t?t:"")+"..."+this.namedFragment.name+n}}}function R(e,t,n){let s;const a=null==n?void 0:n.operationName,c=new g;t.definitions.forEach((t=>{switch(t.kind){case i.Kind.OPERATION_DEFINITION:l(!s||a,(()=>"Must provide operation name if query contains multiple operations.")),(!a||t.name&&t.name.value===a)&&(s=t);break;case i.Kind.FRAGMENT_DEFINITION:const n=t.name.value,u=t.typeCondition.name.value,p=e.type(u);if(!p)throw o.ERRORS.INVALID_GRAPHQL.err(`Unknown type "${u}" for fragment "${n}"`,{nodes:t});if(!(0,r.isCompositeType)(p))throw o.ERRORS.INVALID_GRAPHQL.err(`Invalid fragment "${n}" on non-composite type "${u}"`,{nodes:t});const d=new T(e,n,p,new b(p,c));v(t.directives,d),c.add(d)}})),l(s,(()=>a?`Unknown operation named "${a}"`:"No operation found in provided document."));const u=s.variableDefinitions?(0,r.variableDefinitionsFromAST)(e,s.variableDefinitions):new r.VariableDefinitions;return t.definitions.forEach((e=>{e.kind===i.Kind.FRAGMENT_DEFINITION&&c.get(e.name.value).selectionSet.addSelectionSetNode(e.selectionSet,u)})),c.validate(),function({schema:e,operation:t,fragments:n,validateInput:i}){var o;const s=e.schemaDefinition.root(t.operation);l(s,(()=>`The schema has no "${t.operation}" root type defined`));const a=t.variableDefinitions?(0,r.variableDefinitionsFromAST)(e,t.variableDefinitions):new r.VariableDefinitions;return new y(t.operation,w({parentType:s.type,source:t.selectionSet,variableDefinitions:a,fragments:n,validate:i}),a,null===(o=t.name)||void 0===o?void 0:o.value)}({schema:e,operation:s,fragments:c,validateInput:null==n?void 0:n.validate})}function w({parentType:e,source:t,variableDefinitions:n,fragments:i,fieldAccessor:o,validate:s=!0}){const a="string"==typeof t?L(t.trim().startsWith("{")?t:`{${t}}`).selectionSet:t,c=new b(e,i);return c.addSelectionSetNode(a,null!=n?n:new r.VariableDefinitions,o),s&&c.validate(),c}function L(e){const t=(0,i.parse)(e);l(1===t.definitions.length,(()=>"Selections should contain a single definitions, found "+t.definitions.length));const n=t.definitions[0];return l(n.kind===i.Kind.OPERATION_DEFINITION,(()=>"Expected an operation definition but got a "+n.kind)),n}t.operationFromDocument=R,t.parseOperation=function(e,t,n){return R(e,(0,i.parse)(t),n)},t.parseSelectionSet=w,t.operationToDocument=function(e){var t;const n={kind:i.Kind.OPERATION_DEFINITION,operation:e.rootKind,name:e.name?{kind:i.Kind.NAME,value:e.name}:void 0,selectionSet:e.selectionSet.toSelectionSetNode(),variableDefinitions:e.variableDefinitions.toVariableDefinitionNodes()},r=e.selectionSet.fragments?null===(t=e.selectionSet.fragments)||void 0===t?void 0:t.toFragmentDefinitionNodes():[];return{kind:i.Kind.DOCUMENT,definitions:[n].concat(r)}}},7678:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.computeShareables=void 0;const i=n(415);t.computeShareables=function(e){const t=(0,i.federationMetadata)(e);(0,i.assert)(t,"Schema should be a federation subgraph");const n=t.keyDirective(),r=t.providesDirective(),o=t.isFed2Schema()?t.shareableDirective():void 0,s=new Set,a=e=>{for(const t of e.appliedDirectivesOf(n))(0,i.collectTargetFields)({parentType:e,directive:t,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>s.add(e.coordinate)))};for(const n of e.objectTypes()){a(n);const e=o?n.appliedDirectivesOf(o):[];for(const a of n.fields()){(o&&a.hasAppliedDirective(o)||e.length>0&&e.some((e=>a.ofExtension()===e.ofExtension())))&&s.add(a.coordinate);for(const e of a.appliedDirectivesOf(r))(0,i.collectTargetFields)({parentType:(0,i.baseType)(a.type),directive:e,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>{t.isFieldExternal(e)&&s.add(e.coordinate)}))}}for(const t of e.interfaceTypes())a(t);return e=>s.has(e.coordinate)}},2850:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printDirectiveDefinition=t.printTypeDefinitionAndExtensions=t.printType=t.printSchema=t.orderPrintedDefinitions=t.defaultPrintOptions=void 0;const i=n(9724),r=n(3421);function o(e,t,n){return function(e,t){return t.mergeTypesAndExtensions?[void 0]:[null,...e.extensions()]}(e,t).map((i=>n(e,t,i))).filter((e=>void 0!==e))}function s(e){return e?"extend ":""}function a(e,t){return void 0===t?e:e.filter((e=>{var n;return(null!==(n=e.ofExtension())&&void 0!==n?n:null)===t}))}function c(e,t,n){let i=a(e.appliedDirectives,n);return t.directiveApplicationFilter&&(i=i.filter(t.directiveApplicationFilter)),i}function l(e,t,n){const i=a(e.roots(),n),r=c(e,t,n);if(!i.length&&!r.length)return;if(!n&&!r.length&&!(o=e).description&&o.roots().every((e=>e.isDefaultRootName())))return;var o;const l=function(e,t){return e.concat().sort(((e,n)=>t.rootTypesOrder.indexOf(e.rootKind)-t.rootTypesOrder.indexOf(n.rootKind)))}(i,t).map((e=>`${t.indentString}${e.rootKind}: ${e.type}`));return f(e,t,n)+s(n)+"schema"+d(r,t,!0,0!==l.length)+(0===r.length?" ":"")+(0===l.length?"":"{\n"+l.join("\n")+"\n}")}function u(e,n=t.defaultPrintOptions){switch(e.kind){case"ScalarType":return o(e,n,h);case"ObjectType":return o(e,n,((e,t,n)=>m("type",e,t,n)));case"InterfaceType":return o(e,n,((e,t,n)=>m("interface",e,t,n)));case"UnionType":return o(e,n,y);case"EnumType":return o(e,n,v);case"InputObjectType":return o(e,n,E)}}function p(e,n=t.defaultPrintOptions){const i=e.locations.join(" | ");return`${f(e,n,null)}directive ${e}${g(e.arguments(),n)}${e.repeatable?" repeatable":""} on ${i}`}function d(e,t,n=!1,i=n){if(0==e.length)return"";const r=n?"\n"+t.indentString:" ",o=e.map((e=>e.toString())).join(r);return n?"\n"+t.indentString+o+(i?"\n":""):" "+o}function f(e,t,n,i="",r=!0){if(n||void 0===e.description||t.noDescriptions)return"";const o=e.description.length>70,s=function(e,t="",n=!1){const i=-1===e.indexOf("\n"),r=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],s="\\"===e[e.length-1],a=!i||o||s||n;let c="";return!a||i&&r||(c+="\n"+t),c+=t?e.replace(/\n/g,"\n"+t):e,a&&(c+="\n"),'"""'+c.replace(/"""/g,'\\"""')+'"""'}(e.description,"",o);return(i&&!r?"\n"+i:i)+s.replace(/\n/g,"\n"+i)+"\n"}function h(e,t,n){const i=c(e,t,n);if(!n||i.length)return`${f(e,t,n)}${s(n)}scalar ${e.name}${d(i,t,!0,!1)}`}function m(e,t,n,i){const r=c(t,n,i),o=a(t.interfaceImplementations(),i);let l=a(t.fields(),i);var u;if(n.fieldFilter&&(l=l.filter(n.fieldFilter)),r.length||o.length||l.length||!i&&t.preserveEmptyDefinition)return f(t,n,i)+s(i)+e+" "+t+((u=o).length?" implements "+u.map((e=>e.interface.name)).join(" & "):"")+d(r,n,!0,l.length>0)+(0===r.length&&l.length>0?" ":"")+T(l,n)}function y(e,t,n){const i=c(e,t,n),r=a(e.members(),n);if(!i.length&&!r.length&&(n||!e.preserveEmptyDefinition))return;const o=r.length?" = "+r.map((e=>e.type)).join(" | "):"";return f(e,t,n)+s(n)+"union "+e+d(i,t,!0,r.length>0)+o}function v(e,t,n){const i=c(e,t,n),r=a(e.values,n);if(!i.length&&!r.length&&(n||!e.preserveEmptyDefinition))return;const o=r.map(((e,i)=>f(e,t,n,t.indentString,!i)+t.indentString+e+d(e.appliedDirectives,t)));return f(e,t,n)+s(n)+"enum "+e+d(i,t,!0,o.length>0)+(0===i.length&&o.length>0?" ":"")+N(o)}function E(e,t,n){const i=c(e,t,n),r=a(e.fields(),n);if(i.length||r.length||!n&&e.preserveEmptyDefinition)return f(e,t,n)+s(n)+"input "+e+d(i,t,!0,r.length>0)+(0===i.length&&r.length>0?" ":"")+T(r,t)}function T(e,t){return N(e.map(((e,n)=>f(e,t,void 0,t.indentString,!n)+t.indentString+function(e,t){const n="FieldDefinition"==e.kind?g(e.arguments(),t,t.indentString):"",i="InputFieldDefinition"===e.kind&&void 0!==e.defaultValue?" = "+(0,r.valueToString)(e.defaultValue,e.type):"";return`${e.name}${n}: ${e.type}${i}`}(e,t)+d(c(e,t),t))))}function g(e,t,n=""){return 0===e.length?"":e.every((e=>!e.description))?"("+e.map((e=>I(e,t))).join(", ")+")":`(\n${e.map(((e,i)=>f(e,t,null,"  "+n,!i)+"  "+n+I(e,t))).join("\n")}\n${n})`}function I(e,t){return`${e}${d(c(e,t),t)}`}function N(e){return 0!==e.length?"{\n"+e.join("\n")+"\n}":""}t.defaultPrintOptions={indentString:"  ",definitionsOrder:["schema","directives","types"],rootTypesOrder:["query","mutation","subscription"],mergeTypesAndExtensions:!1,showAllBuiltIns:!1,noDescriptions:!1,typeFilter:()=>!0,fieldFilter:()=>!0,directiveApplicationFilter:()=>!0},t.orderPrintedDefinitions=function(e){return{...e,typeCompareFn:(e,t)=>e.name.localeCompare(t.name),directiveCompareFn:(e,t)=>e.name.localeCompare(t.name)}},t.printSchema=function(e,n=t.defaultPrintOptions){!function(e){if(!function(e){return 3===e.definitionsOrder.length&&e.definitionsOrder.indexOf("schema")>=0&&e.definitionsOrder.indexOf("types")>=0&&e.definitionsOrder.indexOf("directives")>=0}(e))throw new Error(`'definitionsOrder' should be a 3-element array containing 'schema', 'types' and 'directives' in the desired order (got: [${e.definitionsOrder.join(", ")}])`)}(n);let i=n.showAllBuiltIns?e.allDirectives():e.directives();n.directiveDefinitionFilter&&(i=i.filter(n.directiveDefinitionFilter)),n.directiveCompareFn&&(i=i.concat().sort(n.directiveCompareFn));let r=n.showAllBuiltIns?e.allTypes():e.types();n.typeFilter&&(r=r.filter(n.typeFilter)),n.typeCompareFn&&(r=r.concat().sort(n.typeCompareFn));const s=new Array(3);return s[n.definitionsOrder.indexOf("schema")]=function(e,t){return o(e,t,l)}(e.schemaDefinition,n),s[n.definitionsOrder.indexOf("directives")]=i.map((e=>p(e,n))),s[n.definitionsOrder.indexOf("types")]=r.flatMap((e=>u(e,n))),s.flat().join("\n\n")},t.printType=function(e,n=t.defaultPrintOptions){const r=u(e,n);return(0,i.assert)(1==r.length,`Type ${e} is built from more than 1 definition or extension`),r[0]},t.printTypeDefinitionAndExtensions=u,t.printDirectiveDefinition=p},5015:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.upgradeSubgraphsIfNecessary=t.RemovedTagOnExternal=t.FieldsArgumentCoercionToString=t.ProvidesOnNonCompositeRemoval=t.ProvidesOrRequiresOnInterfaceFieldRemoval=t.KeyOnInterfaceRemoval=t.ShareableTypeAddition=t.ShareableFieldAddition=t.InactiveProvidesOrRequiresFieldsRemoval=t.InactiveProvidesOrRequiresRemoval=t.TypeWithOnlyUnusedExternalRemoval=t.UnusedExternalRemoval=t.ExternalOnInterfaceRemoval=t.TypeExtensionRemoval=t.ExternalOnTypeExtensionRemoval=void 0;const i=n(8929),r=n(8116),o=n(4177),s=n(4408),a=n(9724),c=n(9480),l=n(3421);class u{constructor(e){this.field=e,this.id="EXTERNAL_ON_TYPE_EXTENSION_REMOVAL"}toString(){return`Removed @external from field "${this.field}" as it is a key of an extension type`}}t.ExternalOnTypeExtensionRemoval=u;class p{constructor(e){this.type=e,this.id="TYPE_EXTENSION_REMOVAL"}toString(){return`Switched type "${this.type}" from an extension to a definition`}}t.TypeExtensionRemoval=p;class d{constructor(e){this.field=e,this.id="EXTERNAL_ON_INTERFACE_REMOVAL"}toString(){return`Removed @external directive on interface type field "${this.field}": @external is nonsensical on interface fields`}}t.ExternalOnInterfaceRemoval=d;class f{constructor(e){this.field=e,this.id="UNUSED_EXTERNAL_REMOVAL"}toString(){return`Removed @external field "${this.field}" as it was not used in any @key, @provides or @requires`}}t.UnusedExternalRemoval=f;class h{constructor(e){this.type=e,this.id="TYPE_WITH_ONLY_UNUSED_EXTERNAL_REMOVAL"}toString(){return`Removed type ${this.type} that is not referenced in the schema and only declares unused @external fields`}}t.TypeWithOnlyUnusedExternalRemoval=h;class m{constructor(e,t){this.parent=e,this.removed=t,this.id="INACTIVE_PROVIDES_OR_REQUIRES_REMOVAL"}toString(){return`Removed directive ${this.removed} on "${this.parent}": none of the fields were truly @external`}}t.InactiveProvidesOrRequiresRemoval=m;class y{constructor(e,t,n){this.parent=e,this.original=t,this.updated=n,this.id="INACTIVE_PROVIDES_OR_REQUIRES_FIELDS_REMOVAL"}toString(){return`Updated directive ${this.original} on "${this.parent}" to ${this.updated}: removed fields that were not truly @external`}}t.InactiveProvidesOrRequiresFieldsRemoval=y;class v{constructor(e,t){this.field=e,this.declaringSubgraphs=t,this.id="SHAREABLE_FIELD_ADDITION"}toString(){return`Added @shareable to field "${this.field}": it is also resolved by ${(0,s.printSubgraphNames)(this.declaringSubgraphs)}`}}t.ShareableFieldAddition=v;class E{constructor(e,t){this.type=e,this.declaringSubgraphs=t,this.id="SHAREABLE_TYPE_ADDITION"}toString(){return`Added @shareable to type "${this.type}": it is a "value type" and is also declared in ${(0,s.printSubgraphNames)(this.declaringSubgraphs)}`}}t.ShareableTypeAddition=E;class T{constructor(e){this.type=e,this.id="KEY_ON_INTERFACE_REMOVAL"}toString(){return`Removed @key on interface "${this.type}": while allowed by federation 0.x, @key on interfaces were completely ignored/had no effect`}}t.KeyOnInterfaceRemoval=T;class g{constructor(e,t){this.field=e,this.directive=t,this.id="PROVIDES_OR_REQUIRES_ON_INTERFACE_FIELD_REMOVAL"}toString(){return`Removed @${this.directive} on interface field "${this.field}": while allowed by federation 0.x, @${this.directive} on interface fields were completely ignored/had no effect`}}t.ProvidesOrRequiresOnInterfaceFieldRemoval=g;class I{constructor(e,t){this.field=e,this.type=t,this.id="PROVIDES_ON_NON_COMPOSITE_REMOVAL"}toString(){return`Removed @provides directive on field "${this.field}" as it is of non-composite type "${this.type}": while not rejected by federation 0.x, such @provide is nonsensical and was ignored`}}t.ProvidesOnNonCompositeRemoval=I;class N{constructor(e,t,n,i){this.element=e,this.directive=t,this.before=n,this.after=i,this.id="FIELDS_ARGUMENT_COERCION_TO_STRING"}toString(){return`Coerced "fields" argument for directive @${this.directive} for "${this.element}" into a string: coerced from ${this.before} to ${this.after}`}}t.FieldsArgumentCoercionToString=N;class b{constructor(e,t){this.application=e,this.element=t,this.id="REMOVED_TAG_ON_EXTERNAL"}toString(){return`Removed ${this.application} application on @external "${this.element}" as the @tag application is on another definition`}}function _(e){const t=(0,s.federationMetadata)(e.schema());(0,a.assert)(t,"Should be a subgraph schema");const n=e.hasAppliedDirective(t.extendsDirective());return(e.hasExtensionElements()||n)&&((0,o.isObjectType)(e)||(0,o.isInterfaceType)(e))&&(n||!e.hasNonExtensionElements())}function S(e){const t=(0,s.federationMetadata)(e.schema());return(0,a.assert)(t,"Should be a subgraph schema"),(0,o.isObjectType)(e)&&e.isRootType()&&(e.hasAppliedDirective(t.extendsDirective())||e.hasExtensionElements()&&!e.hasNonExtensionElements())}function O(e,t){const n=e.metadata(),i=e.schema.type(t.parent.name);if(!i||!(0,o.isObjectType)(i))return!1;const r=i.field(t.name);return!!r&&(!n.isFieldExternal(r)||n.isFieldPartiallyExternal(r))}function D(e,t,n){const i=e.type(t);return i&&(0,o.isCompositeType)(i)?i.field(n):void 0}t.RemovedTagOnExternal=b,t.upgradeSubgraphsIfNecessary=function(e){const t=new Map;if(e.values().every((e=>e.isFed2Subgraph())))return{subgraphs:e,changes:t};const n=new s.Subgraphs;let i=[];for(const r of e.values())if(r.isFed2Subgraph())n.add(r);else{const o=e.values().filter((e=>e.name!==r.name)),s=new A(r,o).upgrade();s.errors?i=i.concat(s.errors):(n.add(s.upgraded),t.set(r.name,s.changes))}return 0===i.length?{subgraphs:n,changes:t}:{errors:i}};class A{constructor(e,t){this.originalSubgraph=e,this.otherSubgraphs=t,this.changes=new a.MultiMap,this.errors=[],this.schema=e.schema.clone(),this.renameFederationTypes(),this.subgraph=new s.Subgraph(e.name,e.url,this.schema);try{(0,s.setSchemaAsFed2Subgraph)(this.schema)}catch(e){const t=(0,r.errorCauses)(e);if(!t)throw e;t.forEach((e=>this.addError(e)))}this.metadata=this.subgraph.metadata()}addError(e){this.errors.push((0,s.addSubgraphToError)(e,this.subgraph.name,r.ERRORS.INVALID_GRAPHQL))}renameFederationTypes(){for(const e of c.FEDERATION_SPEC_TYPES){const t=this.originalSubgraph.metadata().federationTypeNameInSchema(e.name),n=this.schema.type(t);n&&n.rename(`federation__${e.name}`)}}external(e){const t=e.appliedDirectivesOf(this.metadata.externalDirective());return 0===t.length?void 0:t[0]}addChange(e){this.changes.add(e.id,e)}checkForExtensionWithNoBase(e){var t;if(S(e)||!_(e))return;const n=null===(t=(0,a.firstOf)(e.extensions().values()))||void 0===t?void 0:t.sourceAST;for(const t of this.otherSubgraphs){const n=t.schema.type(e.name);if(n&&n.hasNonExtensionElements())return}this.addError(r.ERRORS.EXTENSION_WITH_NO_BASE.err(`Type "${e}" is an extension type, but there is no type definition for "${e}" in any subgraph.`,{nodes:n}))}preUpgradeValidations(){for(const e of this.schema.types())this.checkForExtensionWithNoBase(e)}upgrade(){if(this.preUpgradeValidations(),this.fixFederationDirectivesArguments(),this.removeExternalOnInterface(),this.removeExternalOnTypeExtensions(),this.fixInactiveProvidesAndRequires(),this.removeTypeExtensions(),this.removeDirectivesOnInterface(),this.removeProvidesOnNonComposite(),this.removeUnusedExternals(),this.addShareable(),this.removeTagOnExternal(),this.errors.length>0)return{errors:this.errors};try{return this.subgraph.validate(),{upgraded:this.subgraph,changes:this.changes}}catch(e){const t=(0,r.errorCauses)(e);if(!t)throw e;return{errors:t}}}fixFederationDirectivesArguments(){var e;for(const t of[this.metadata.keyDirective(),this.metadata.requiresDirective(),this.metadata.providesDirective()])for(const n of Array.from(t.applications())){const r=n.arguments().fields;if("string"!=typeof r){Array.isArray(r)&&r.every((e=>"string"==typeof e))&&this.replaceFederationDirectiveApplication(n,n.toString(),r.join(" "),t.sourceAST);continue}const o=n.sourceAST;if(o&&"Directive"===o.kind)for(const t of null!==(e=o.arguments)&&void 0!==e?e:[])if("fields"===t.name.value&&t.value.kind===i.Kind.ENUM){this.replaceFederationDirectiveApplication(n,(0,i.print)(o),r,{...o,arguments:[{...t,value:{kind:i.Kind.STRING,value:r}}]});break}}}removeExternalOnInterface(){for(const e of this.schema.interfaceTypes())for(const t of e.fields()){const e=this.external(t);e&&(this.addChange(new d(t.coordinate)),e.remove())}}replaceFederationDirectiveApplication(e,t,n,i){const r=e.definition,o=e.parent;e.remove();const s=o.applyDirective(r,{fields:n});s.sourceAST=i,this.addChange(new N(o.coordinate,r.name,t,s.toString()))}fixInactiveProvidesAndRequires(){(0,s.removeInactiveProvidesAndRequires)(this.schema,((e,t,n)=>{n?this.addChange(new y(e.coordinate,t.toString(),n.toString())):this.addChange(new m(e.coordinate,t.toString()))}))}removeExternalOnTypeExtensions(){for(const e of this.schema.types())if((0,o.isCompositeType)(e)&&(_(e)||S(e)))if(e.appliedDirectivesOf(this.metadata.keyDirective()).length>0)for(const t of e.appliedDirectivesOf(this.metadata.keyDirective()))(0,s.collectTargetFields)({parentType:e,directive:t,includeInterfaceFieldsImplementations:!1,validate:!1}).forEach((t=>{if(t.parent!==e)return;const n=this.external(t);n&&(this.addChange(new u(t.coordinate)),n.remove())}));else for(const t of this.otherSubgraphs){const n=t.schema.type(e.name);if(!n)continue;(0,a.assert)((0,o.isCompositeType)(n),(()=>`Type ${e} is of kind ${e.kind} in ${this.subgraph.name} but ${n.kind} in ${t.name}`));const i=n.appliedDirectivesOf(t.metadata().keyDirective());0!==i.length&&(0,s.collectTargetFields)({parentType:n,directive:i[0],includeInterfaceFieldsImplementations:!1,validate:!1}).forEach((t=>{if(t.parent!==n)return;const i=e.field(t.name);if(!i)return;const r=this.external(i);r&&(this.addChange(new u(i.coordinate)),r.remove())}))}}removeTypeExtensions(){for(const e of this.schema.types())(_(e)||S(e))&&(this.addChange(new p(e.coordinate)),e.removeExtensions())}removeUnusedExternals(){for(const e of this.schema.types())if((0,o.isObjectType)(e)||(0,o.isInterfaceType)(e)){for(const t of e.fields())this.metadata.isFieldExternal(t)&&!this.metadata.isFieldUsed(t)&&(this.addChange(new f(t.coordinate)),t.remove());e.hasFields()||(e.isReferenced()?this.addError(r.ERRORS.TYPE_WITH_ONLY_UNUSED_EXTERNAL.err(`Type ${e} contains only external fields and all those fields are all unused (they do not appear in any @key, @provides or @requires).`,{nodes:e.sourceAST})):(this.addChange(new h(e.name)),e.remove()))}}removeDirectivesOnInterface(){for(const e of this.schema.interfaceTypes()){for(const t of e.appliedDirectivesOf(this.metadata.keyDirective()))this.addChange(new T(e.name)),t.remove();for(const t of e.fields())for(const e of[this.metadata.providesDirective(),this.metadata.requiresDirective()])for(const n of t.appliedDirectivesOf(e))this.addChange(new g(t.coordinate,e.name)),n.remove()}}removeProvidesOnNonComposite(){for(const e of this.schema.objectTypes())for(const t of e.fields())if(!(0,o.isCompositeType)((0,o.baseType)(t.type)))for(const e of t.appliedDirectivesOf(this.metadata.providesDirective()))this.addChange(new I(t.coordinate,t.type.toString())),e.remove()}addShareable(){const e=this.originalSubgraph.metadata(),t=this.metadata.keyDirective(),n=this.metadata.shareableDirective();for(const i of this.schema.objectTypes())if(i.hasAppliedDirective(t)||i.isRootType())for(const t of i.fields()){if(e.isFieldShareable(t))continue;const i=this.otherSubgraphs.filter((e=>O(e,t)));i.length>0&&!t.hasAppliedDirective(n)&&(t.applyDirective(n),this.addChange(new v(t.coordinate,i.map((e=>e.name)))))}else{const e=this.otherSubgraphs.filter((e=>e.schema.type(i.name)));e.length>0&&!i.hasAppliedDirective(n)&&(i.applyDirective(n),this.addChange(new E(i.coordinate,e.map((e=>e.name)))))}}removeTagOnExternal(){const e=this.schema.directive("tag");if(e)for(const t of Array.from(e.applications())){const e=t.parent;e instanceof o.FieldDefinition&&this.external(e)&&this.otherSubgraphs.map((t=>D(t.schema,e.parent.name,e.name))).filter((e=>!(e&&e.hasAppliedDirective("external")))).some((e=>e&&e.appliedDirectivesOf("tag").some((e=>(0,l.valueEquals)(t.arguments(),e.arguments())))))&&(this.addChange(new b(t.toString(),e.coordinate)),t.remove())}}}},5388:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.didYouMean=t.suggestionList=void 0;const r=i(n(9991)),o=n(9724);t.suggestionList=function(e,t){const n=new Map,i=Math.floor(.4*e.length)+1,s=e.toLowerCase();for(const o of t){const t=s===o.toLowerCase()?1:(0,r.default)(e,o);t<=i&&n.set(o,t)}return(0,o.mapKeys)(n).sort(((e,t)=>{const i=n.get(e)-n.get(t);return 0!==i?i:e.localeCompare(t)}))},t.didYouMean=function(e){const t=" Did you mean ",n=e.map((e=>`"${e}"`));switch(e.length){case 0:return"";case 1:return t+n[0]+"?";case 2:return t+n[0]+" or "+n[1]+"?"}const i=n.slice(0,5),r=i.pop();return t+i.join(", ")+", or "+r+"?"}},9624:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFed1Supergraph=t.validateSupergraph=t.buildSupergraphSchema=void 0;const i=n(9209),r=n(4177),o=n(6920),s=n(7964),a=n(8220),c=n(8116),l=new Set(["https://specs.apollo.dev/core/v0.1","https://specs.apollo.dev/core/v0.2","https://specs.apollo.dev/join/v0.1","https://specs.apollo.dev/join/v0.2","https://specs.apollo.dev/tag/v0.1","https://specs.apollo.dev/tag/v0.2","https://specs.apollo.dev/inaccessible/v0.1","https://specs.apollo.dev/inaccessible/v0.2"]),u=i.FeatureUrl.parse("https://specs.apollo.dev/core/v0.1");function p(e){const t=e.coreFeatures;if(!t)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err("Invalid supergraph: must be a core schema");const n=t.getByIdentity(o.joinIdentity);if(!n)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err("Invalid supergraph: must use the join spec");const i=o.JOIN_VERSIONS.find(n.url.version);if(!i)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err(`Invalid supergraph: uses unsupported join spec version ${n.url.version} (supported versions: ${o.JOIN_VERSIONS.versions().join(", ")})`);return[t,i]}t.buildSupergraphSchema=function(e){const t="string"==typeof e?(0,s.buildSchema)(e,{validate:!1}):(0,s.buildSchemaFromAST)(e,{validate:!1}),[n]=p(t);return function(e){const t=[],n=e.coreItself;if(n.url.equals(u)){const i=[...e.allFeatures()].filter((e=>e.purpose));i.length>0&&t.push(c.ERRORS.UNSUPPORTED_LINKED_FEATURE.err(`the \`for:\` argument is unsupported by version ${n.url.version} of the core spec. Please upgrade to at least @core v0.2 (https://specs.apollo.dev/core/v0.2).`,{nodes:(0,r.sourceASTs)(n.directive,...i.map((e=>e.directive)))}))}for(const n of e.allFeatures())(n.url.equals(u)||"EXECUTION"===n.purpose||"SECURITY"===n.purpose)&&(l.has(n.url.base.toString())||t.push(c.ERRORS.UNSUPPORTED_LINKED_FEATURE.err(`feature ${n.url} is for: ${n.purpose} but is unsupported`,{nodes:n.directive.sourceAST})));if(t.length>0)throw(0,i.ErrCoreCheckFailed)(t)}(n),t.validate(),[t,(0,a.extractSubgraphsNamesAndUrlsFromSupergraph)(t)]},t.validateSupergraph=p,t.isFed1Supergraph=function(e){return p(e)[1].version.equals(new i.FeatureVersion(0,1))}},1697:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TAG_VERSIONS=t.TagSpecDefinition=t.tagIdentity=void 0;const i=n(8929),r=n(9209),o=n(4177),s=n(3208),a=n(8116),c=n(5848),l=n(5811);t.tagIdentity="https://specs.apollo.dev/tag";class u extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.tagIdentity,"tag",e)),this.tagLocations=[i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION],this.printedTagDefinition="directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION",this.isV01()||(this.tagLocations.push(i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.SCALAR,i.DirectiveLocation.ENUM,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.INPUT_FIELD_DEFINITION),this.printedTagDefinition="directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION"),this.tagDirectiveSpec=(0,s.createDirectiveSpecification)({name:"tag",locations:this.tagLocations,repeatable:!0,argumentFct:e=>({args:[{name:"name",type:new o.NonNullType(e.stringType())}],errors:[]})})}isV01(){return this.version.equals(new r.FeatureVersion(0,1))}addElementsToSchema(e){return this.addDirectiveSpec(e,this.tagDirectiveSpec)}tagDirective(e){return this.directive(e,"tag")}checkCompatibleDirective(e){const t=Object.keys(e.arguments()).length>1,n=e.argument("name"),i=n&&(0,l.sameType)(n.type,new o.NonNullType(e.schema().stringType())),r=e.locations.every((e=>this.tagLocations.includes(e)));if(t||!i||!r)return a.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Found invalid @tag directive definition. Please ensure the directive definition in your schema's definitions matches the following:\n\t${this.printedTagDefinition}`)}allElementNames(){return["@tag"]}}t.TagSpecDefinition=u,t.TAG_VERSIONS=new r.FeatureDefinitions(t.tagIdentity).add(new u(new r.FeatureVersion(0,1))).add(new u(new r.FeatureVersion(0,2))),(0,c.registerKnownFeature)(t.TAG_VERSIONS)},5811:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isStrictSubtype=t.isSubtype=t.isDirectSubtype=t.sameType=t.DEFAULT_SUBTYPING_RULES=t.ALL_SUBTYPING_RULES=void 0;const i=n(4177);function r(e,t){if(e.kind!==t.kind)return!1;switch(e.kind){case"ListType":case"NonNullType":return r(e.ofType,t.ofType);default:return e.name===t.name}}function o(e,t,n=((e,t)=>e.hasTypeMember(t)),r=((e,t)=>e.implementsInterface(t))){return(0,i.isUnionType)(e)?(0,i.isObjectType)(t)&&n(e,t):r(t,e)}function s(e,n,i=t.DEFAULT_SUBTYPING_RULES,o=((e,t)=>e.hasTypeMember(t)),s=((e,t)=>e.implementsInterface(t))){return r(e,n)||a(e,n,i,o,s)}function a(e,n,r=t.DEFAULT_SUBTYPING_RULES,a=((e,t)=>e.hasTypeMember(t)),c=((e,t)=>e.implementsInterface(t))){switch(n.kind){case"ListType":return r.includes("list_propagation")&&(0,i.isListType)(e)&&s(e.ofType,n.ofType,r,a,c);case"NonNullType":return(0,i.isNonNullType)(e)?r.includes("nonNullable_propagation")&&s(e.ofType,n.ofType,r,a,c):r.includes("nonNullable_downgrade")&&s(e,n.ofType,r,a,c);case"ObjectType":case"InterfaceType":return(0,i.isListType)(e)?r.includes("list_upgrade")&&s(e.ofType,n,r,a,c):r.includes("direct")&&((0,i.isInterfaceType)(e)||(0,i.isUnionType)(e))&&o(e,n,a,c);default:return(0,i.isListType)(e)&&r.includes("list_upgrade")&&s(e.ofType,n,r,a,c)}}t.ALL_SUBTYPING_RULES=["direct","nonNullable_downgrade","list_upgrade","list_propagation","nonNullable_propagation"],t.DEFAULT_SUBTYPING_RULES=t.ALL_SUBTYPING_RULES.filter((e=>"list_upgrade"!==e)),t.sameType=r,t.isDirectSubtype=o,t.isSubtype=s,t.isStrictSubtype=a},9724:(e,t)=>{"use strict";function n(e,t){if(!e)throw new Error("string"==typeof t?t:t())}Object.defineProperty(t,"__esModule",{value:!0}),t.removeArrayElement=t.isDefined=t.printHumanReadableList=t.joinStrings=t.validateStringContainsBoolean=t.copyWitNewLength=t.MapWithCachedArrays=t.setValues=t.mapEntries=t.mapKeys=t.mapValues=t.firstOf=t.arrayEquals=t.OrderedMap=t.SetMultiMap=t.MultiMap=t.assertUnreachable=t.assert=void 0,t.assert=n,t.assertUnreachable=function(e){throw new Error("Didn't expect to get here")};class i extends Map{add(e,t){const n=this.get(e);return n?n.push(t):this.set(e,[t]),this}addAll(e){for(const[t,n]of e.entries())for(const e of n)this.add(t,e);return this}}t.MultiMap=i;class r extends Map{add(e,t){let n=this.get(e);return n||(n=new Set,this.set(e,n)),n.add(t),this}addAll(e){for(const[t,n]of e.entries())for(const e of n)this.add(t,e);return this}}t.SetMultiMap=r;class o{constructor(e=o.defaultCompareFn){this._keys=[],this._values=new Map,this._compareFn=e}static defaultCompareFn(e,t){return e<t?-1:t<e?1:0}add(e,t){this._values.has(e)||this.insertKeyInOrder(e),this._values.set(e,t)}get(e){return this._values.get(e)}has(e){return this._values.has(e)}get size(){return this._keys.length}keys(){return this._keys}values(){return this._keys.map((e=>{const t=this._values.get(e);return n(t,"value for known key not found in OrderedMap"),t}))}insertKeyInOrder(e){let t=0,n=this._keys.length-1;for(;t<=n;){const i=Math.floor((n+t)/2);this._compareFn(this._keys[i],e)<0?t=i+1:n=i-1}this._keys=this._keys.slice(0,t).concat(e).concat(this._keys.slice(t))}*[Symbol.iterator](){for(let e=0;e<this._keys.length;e+=1){const t=this._values.get(this._keys[e]);n(t,"value for known key not found in OrderedMap"),yield t}}}function s(e){const t=new Array(e.size);let n=0;for(const i of e.values())t[n++]=i;return t}function a(e){const t=new Array(e.size);let n=0;for(const i of e.keys())t[n++]=i;return t}function c(e,t=", ",n,i=" and "){if(0==e.length)return"";const r=e[0];if(1==e.length)return r;const o=e[e.length-1];return 2==e.length?r+(n||i)+o:r+(n||t)+e.slice(1,e.length-1)+i+o}t.OrderedMap=o,t.arrayEquals=function(e,t,n){if(e===t)return!0;if(e.length!==t.length)return!1;for(let i=0;i<e.length;++i)if(!(n?n(e[i],t[i]):e[i]===t[i]))return!1;return!0},t.firstOf=function(e){const t=e[Symbol.iterator]().next();return t.done?void 0:t.value},t.mapValues=s,t.mapKeys=a,t.mapEntries=function(e){const t=new Array(e.size);let n=0;for(const i of e.entries())t[n++]=i;return t},t.setValues=function(e){const t=new Array(e.size);let n=0;for(const i of e.values())t[n++]=i;return t},t.MapWithCachedArrays=class{constructor(){this.map=new Map}clearCaches(){this.cachedKeys=void 0,this.cachedValues=void 0}get size(){return this.map.size}has(e){return this.map.has(e)}get(e){return this.map.get(e)}set(e,t){return this.map.set(e,t),this.clearCaches(),this}delete(e){const t=this.map.delete(e);return t&&this.clearCaches(),t}clear(){this.map.clear(),this.clearCaches()}keys(){return this.cachedKeys||(this.cachedKeys=a(this.map)),this.cachedKeys}values(){return this.cachedValues||(this.cachedValues=s(this.map)),this.cachedValues}},t.copyWitNewLength=function(e,t){n(t>=e.length,(()=>`${t} < ${e.length}`));const i=new Array(t);for(let t=0;t<e.length;t++)i[t]=e[t];return i},t.validateStringContainsBoolean=function(e){if(!e)return!1;switch(e.toLocaleLowerCase()){case"true":case"yes":case"1":return!0;case"false":case"no":case"0":return!1;default:return}},t.joinStrings=c,t.printHumanReadableList=function(e,{emptyValue:t,prefix:n,prefixPlural:i,lastSeparator:r,cutoff_output_length:o}){if(0===e.length)return null!=t?t:"";if(1==e.length)return n?n+" "+e[0]:e[0];const s=null!=o?o:100,{lastIdx:a}=e.reduce((({lastIdx:e,length:t},n)=>t+n.length>s?{lastIdx:e,length:t}:{lastIdx:e+1,length:t+n.length}),{lastIdx:0,length:0}),l=e.slice(0,Math.max(1,a)),u=i?i+" ":n?n+" ":"";return l.length===e.length?u+c(l,", ",void 0,r):u+c(l,", ",void 0,", ")+", ..."},t.isDefined=e=>void 0!==e,t.removeArrayElement=function(e,t){const n=t.indexOf(e);return n>=0&&(t.splice(n,1),!0)}},5663:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateSchema=void 0;const i=n(4177),r=n(8929),o=n(3421),s=n(9495),a=n(5811),c=n(8116);t.validateSchema=function(e){return new u(e).validate()};class l{constructor(e){this.onError=e,this.visitedTypes=new Set,this.fieldPath=[],this.fieldPathIndexByTypeName=new Map}detectCycles(e){if(!this.visitedTypes.has(e.name)){this.visitedTypes.add(e.name),this.fieldPathIndexByTypeName.set(e.name,this.fieldPath.length);for(const t of e.fields())if((0,i.isNonNullType)(t.type)&&(0,i.isInputObjectType)(t.type.ofType)){const e=t.type.ofType,n=this.fieldPathIndexByTypeName.get(e.name);if(this.fieldPath.push(t),void 0===n)this.detectCycles(e);else{const t=this.fieldPath.slice(n),r=t.map((e=>e.name)).join(".");this.onError(`Cannot reference Input Object "${e.name}" within itself through a series of non-null fields: "${r}".`,{nodes:(0,i.sourceASTs)(...t)})}this.fieldPath.pop()}this.fieldPathIndexByTypeName.delete(e.name)}}}class u{constructor(e){this.schema=e,this.emptyVariables=new i.VariableDefinitions,this.hasMissingTypes=!1,this.errors=[]}validate(){for(const e of this.schema.types())switch(this.validateName(e),e.kind){case"ObjectType":case"InterfaceType":this.validateObjectOrInterfaceType(e);break;case"InputObjectType":this.validateInputObjectType(e);break;case"UnionType":this.validateUnionType(e);break;case"EnumType":this.validateEnumType(e)}for(const e of this.schema.allDirectives()){this.validateName(e);for(const t of e.arguments())this.validateArg(t);for(const t of e.applications())this.validateDirectiveApplication(e,t)}if(!this.hasMissingTypes){const e=new l(((e,t)=>this.addError(e,t)));for(const t of this.schema.types())switch(t.kind){case"ObjectType":case"InterfaceType":this.validateImplementedInterfaces(t);break;case"InputObjectType":e.detectCycles(t)}}return this.errors}addError(e,t){this.errors.push(c.ERRORS.INVALID_GRAPHQL.err(e,t))}validateHasType(e){return e.type||(this.addError(`Element ${e.coordinate} does not have a type set`,{nodes:e.sourceAST}),this.hasMissingTypes=!1),!!e.type}validateName(e){if(!(0,s.isIntrospectionName)(e.name))try{(0,r.assertName)(e.name)}catch(t){this.addError(t.message,e.sourceAST?{nodes:e.sourceAST}:{})}}validateObjectOrInterfaceType(e){e.hasFields()||this.addError(`Type ${e.name} must define one or more fields.`,{nodes:e.sourceAST});for(const t of e.fields()){this.validateName(t),this.validateHasType(t);for(const e of t.arguments())this.validateArg(e)}}validateImplementedInterfaces(e){e.implementsInterface(e.name)&&this.addError(`Type ${e} cannot implement itself because it would create a circular reference.`,{nodes:(0,i.sourceASTs)(e,e.interfaceImplementation(e.name))});for(const t of e.interfaces()){for(const n of t.fields()){const t=e.field(n.name);if(t){this.validateHasType(n)&&!(0,a.isSubtype)(n.type,t.type)&&this.addError(`Interface field ${n.coordinate} expects type ${n.type} but ${t.coordinate} of type ${t.type} is not a proper subtype.`,{nodes:(0,i.sourceASTs)(n,t)});for(const e of n.arguments()){const n=t.argument(e.name);n?this.validateHasType(e)&&!(0,a.sameType)(e.type,n.type)&&this.addError(`Interface field argument ${e.coordinate} expects type ${e.type} but ${n.coordinate} is type ${n.type}.`,{nodes:(0,i.sourceASTs)(e,n)}):this.addError(`Interface field argument ${e.coordinate} expected but ${t.coordinate} does not provide it.`,{nodes:(0,i.sourceASTs)(e,t)})}for(const e of t.arguments())n.argument(e.name)||e.isRequired()&&this.addError(`Field ${t.coordinate} includes required argument ${e.name} that is missing from the Interface field ${n.coordinate}.`,{nodes:(0,i.sourceASTs)(e,n)})}else this.addError(`Interface field ${n.coordinate} expected but ${e} does not provide it.`,{nodes:(0,i.sourceASTs)(n,e)})}for(const n of t.interfaces())e.implementsInterface(n)||(n===e?this.addError(`Type ${e} cannot implement ${t} because it would create a circular reference.`,{nodes:(0,i.sourceASTs)(e,t)}):this.addError(`Type ${e} must implement ${n} because it is implemented by ${t}.`,{nodes:(0,i.sourceASTs)(e,t,n)}))}}validateInputObjectType(e){e.hasFields()||this.addError(`Input Object type ${e.name} must define one or more fields.`,{nodes:e.sourceAST});for(const t of e.fields())this.validateName(t),this.validateHasType(t)&&(t.isRequired()&&t.isDeprecated()&&this.addError(`Required input field ${t.coordinate} cannot be deprecated.`,{nodes:(0,i.sourceASTs)(t.appliedDirectivesOf("deprecated")[0],t)}),void 0===t.defaultValue||(0,o.isValidValue)(t.defaultValue,t,new i.VariableDefinitions)||this.addError(`Invalid default value (got: ${(0,o.valueToString)(t.defaultValue)}) provided for input field ${t.coordinate} of type ${t.type}.`,{nodes:(0,i.sourceASTs)(t)}))}validateArg(e){this.validateName(e),this.validateHasType(e)&&(e.isRequired()&&e.isDeprecated()&&this.addError(`Required argument ${e.coordinate} cannot be deprecated.`,{nodes:(0,i.sourceASTs)(e.appliedDirectivesOf("deprecated")[0],e)}),void 0===e.defaultValue||(0,o.isValidValue)(e.defaultValue,e,new i.VariableDefinitions)||this.addError(`Invalid default value (got: ${(0,o.valueToString)(e.defaultValue)}) provided for argument ${e.coordinate} of type ${e.type}.`,{nodes:(0,i.sourceASTs)(e)}))}validateUnionType(e){0===e.membersCount()&&this.addError(`Union type ${e.coordinate} must define one or more member types.`,{nodes:e.sourceAST})}validateEnumType(e){0===e.values.length&&this.addError(`Enum type ${e.coordinate} must define one or more values.`,{nodes:e.sourceAST});for(const t of e.values)this.validateName(t),"true"!==t.name&&"false"!==t.name&&"null"!==t.name||this.addError(`Enum type ${e.coordinate} cannot include value: ${t}.`,{nodes:t.sourceAST})}validateDirectiveApplication(e,t){for(const n of e.arguments()){const r=t.arguments()[n.name];if(r&&n.type&&!(0,o.isValidValue)(r,n,this.emptyVariables)){const r=t.parent,o=r instanceof i.NamedSchemaElement?r.coordinate:"schema";this.addError(`Invalid value for "${n.coordinate}" of type "${n.type}" in application of "${e.coordinate}" to "${o}".`,{nodes:(0,i.sourceASTs)(t,n)})}}}}},4150:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownTypeNamesInFederationRule=void 0;const i=n(8929),r=n(5388);t.KnownTypeNamesInFederationRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),s=Object.create(null);for(const t of e.getDocument().definitions)((0,i.isTypeDefinitionNode)(t)||(0,i.isTypeExtensionNode)(t))&&(s[t.name.value]=!0);const a=Object.keys(n).concat(Object.keys(s));return{NamedType(t,c,l,u,p){var d;const f=t.name.value;if(!n[f]&&!s[f]){const n=null!==(d=p[2])&&void 0!==d?d:l,s=null!=n&&(h=n,!Array.isArray(h)&&((0,i.isTypeSystemDefinitionNode)(h)||(0,i.isTypeSystemExtensionNode)(h)));if(s&&function(e){return-1!==o.indexOf(e)}(f))return;const c=(0,r.suggestionList)(f,s?o.concat(a):a);e.reportError(new i.GraphQLError(`Unknown type "${f}".`+(0,r.didYouMean)(c),{nodes:t}))}var h}}};const o=[...i.specifiedScalarTypes,...i.introspectionTypes].map((e=>e.name))},3421:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.variablesInValue=t.argumentsFromAST=t.valueFromASTUntyped=t.valueFromAST=t.isValidValue=t.valueToAST=t.valueNodeToConstValueNode=t.withDefaultValues=t.argumentsEquals=t.valueEquals=t.valueToString=void 0;const i=n(4177),r=n(8929),o=n(5388),s=n(9539),a=n(5811),c=n(9724),l=n(8116);function u(e,t){if(null==e)return"null";if(t&&(0,i.isNonNullType)(t))return u(e,t.ofType);if(t&&(0,i.isCustomScalarType)(t)&&(t=void 0),(0,i.isVariable)(e))return e.toString();if(Array.isArray(e)){let n;return t&&(0,i.isListType)(t)&&(n=t.ofType),"["+e.map((e=>u(e,n))).join(", ")+"]"}if(t&&(0,i.isListType)(t))return u(e,t.ofType);if("object"==typeof e)return t&&!(0,i.isInputObjectType)(t)&&(t=void 0),"{"+Object.keys(e).map((n=>{var i;const r=t?null===(i=t.field(n))||void 0===i?void 0:i.type:void 0;return`${n}: ${u(e[n],r)}`})).join(", ")+"}";if("string"==typeof e){if(t){if((0,i.isEnumType)(t))return t.value(e)?e:JSON.stringify(e);if(t===t.schema().idType()&&m.test(e))return e}return JSON.stringify(e)}return String(e)}function p(e,t){return e===t||(Array.isArray(e)?Array.isArray(t)&&function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;++n)if(!p(e[n],t[n]))return!1;return!0}(e,t):"object"==typeof e?"object"==typeof t&&d(e,t):e===t)}function d(e,t){const n=Object.keys(e),i=Object.keys(t);if(n.length!=i.length)return!1;for(const r of n){const n=e[r],o=t[r];if(void 0===o&&!i.includes(r))return!1;if(!p(n,o))return!1}return!0}function f(e){return new Error(e)}function h(e,t){if((0,i.isVariable)(e))return e;if(null===e){if((0,i.isNonNullType)(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid null value for non-null type ${t} while computing default values`);return null}if((0,i.isNonNullType)(t))return h(e,t.ofType);if((0,i.isListType)(t))return Array.isArray(e)?e.map((e=>h(e,t.ofType))):h(e,t.ofType);if((0,i.isInputObjectType)(t)){if("object"!=typeof e)throw l.ERRORS.INVALID_GRAPHQL.err(`Expected value for type ${t} to be an object, but is ${typeof e}.`);const n=Object.create(null);for(const r of t.fields()){if(!r.type)throw f(`Cannot compute default value for field ${r.name} of ${t} as the field type is undefined`);const o=e[r.name];if(void 0===o){if(void 0!==r.defaultValue)n[r.name]=h(r.defaultValue,r.type);else if((0,i.isNonNullType)(r.type))throw l.ERRORS.INVALID_GRAPHQL.err(`Field "${r.name}" of required type ${t} was not provided.`)}else n[r.name]=h(o,r.type)}for(const n of Object.keys(e))if(!t.field(n)){const e=(0,o.suggestionList)(n,t.fields().map((e=>e.name)));throw l.ERRORS.INVALID_GRAPHQL.err(`Field "${n}" is not defined by type "${t}".`+(0,o.didYouMean)(e))}return n}return e}t.valueToString=u,t.valueEquals=p,t.argumentsEquals=function(e,t){return e===t||d(e,t)},t.withDefaultValues=function(e,t){if(!t.type)throw f(`Cannot compute default value for argument ${t} as the type is undefined`);return void 0===e&&t.defaultValue?h(t.defaultValue,t.type):h(e,t.type)};const m=/^-?(?:0|[1-9][0-9]*)$/;function y(e){if(void 0!==e){if(null===e)return{kind:r.Kind.NULL};if((0,i.isVariable)(e))return{kind:r.Kind.VARIABLE,name:{kind:r.Kind.NAME,value:e.name}};if(Array.isArray(e)){const t=[];for(const n of e){const e=y(n);void 0!==e&&t.push(e)}return{kind:r.Kind.LIST,values:t}}if("object"==typeof e){const t=[];for(const n of Object.keys(e)){const i=y(e[n]);i&&t.push({kind:r.Kind.OBJECT_FIELD,name:{kind:r.Kind.NAME,value:n},value:i})}return{kind:r.Kind.OBJECT,fields:t}}if("boolean"==typeof e)return{kind:r.Kind.BOOLEAN,value:e};if("number"==typeof e&&isFinite(e)){const t=String(e);return m.test(t)?{kind:r.Kind.INT,value:t}:{kind:r.Kind.FLOAT,value:t}}if("string"==typeof e)return{kind:r.Kind.STRING,value:e};throw f(`Invalid value, cannot be converted to AST: ${(0,s.inspect)(e,!0,10,!0)}`)}}function v(e,t){return(0,i.isNonNullType)(t)?!!(0,i.isNonNullType)(e)&&v(e.ofType,t.ofType):(0,i.isNonNullType)(e)?v(e.ofType,t):(0,i.isListType)(t)?!!(0,i.isListType)(e)&&v(e.ofType,t.ofType):!(0,i.isListType)(e)&&(0,a.sameType)(e,t)}function E(e,t,n,r){if((0,i.isVariable)(e)){const o=r.definition(e);return!!o&&function(e,t,n){const r=e.type;if((0,i.isNonNullType)(t)&&!(0,i.isNonNullType)(r)){const i=void 0!==n;return!((void 0===e.defaultValue||null===e.defaultValue)&&!i)&&v(r,t.ofType)}return v(r,t)}(o,t,n)}if((0,i.isNonNullType)(t))return null!==e&&E(e,t.ofType,void 0,r);if(null==e)return!0;if((0,i.isCustomScalarType)(t))return!0;if((0,i.isListType)(t)){const i=t.ofType;return Array.isArray(e)?e.every((e=>E(e,i,void 0,r))):E(e,i,n,r)}if((0,i.isInputObjectType)(t)){if("object"!=typeof e)return!1;const n=new Set(Object.keys(e)),i=t.fields().every((t=>(n.delete(t.name),E(e[t.name],t.type,t.defaultValue,r)))),o=0!==n.size;return i&&!o}const o=t.schema();if("boolean"==typeof e)return t===o.booleanType();if("number"==typeof e&&isFinite(e)){const n=String(e);return t===o.intType()||t===o.idType()?m.test(n):t===o.floatType()}return"string"==typeof e&&((0,i.isEnumType)(t)?void 0!==t.value(e):(0,i.isScalarType)(t)&&t!==o.booleanType()&&t!==o.intType()&&t!==o.floatType())}function T(e,t){if(e.kind===r.Kind.NULL){if((0,i.isNonNullType)(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid null value for non-null type "${t}"`);return null}if(e.kind===r.Kind.VARIABLE)return new i.Variable(e.name.value);if((0,i.isNonNullType)(t)&&(t=t.ofType),(0,i.isListType)(t)){const n=t.ofType;return e.kind===r.Kind.LIST?e.values.map((e=>T(e,n))):[T(e,n)]}if((0,i.isIntType)(t)){if(e.kind!==r.Kind.INT)throw l.ERRORS.INVALID_GRAPHQL.err(`Int cannot represent non-integer value ${(0,r.print)(e)}.`);const t=parseInt(e.value,10);if(t>2147483647||t<-2147483648)throw l.ERRORS.INVALID_GRAPHQL.err(`Int cannot represent non 32-bit signed integer value ${t}.`);return t}if((0,i.isFloatType)(t)){let t;if(e.kind===r.Kind.INT)t=parseInt(e.value,10);else{if(e.kind!==r.Kind.FLOAT)throw l.ERRORS.INVALID_GRAPHQL.err(`Float can only represent integer or float value, but got a ${e.kind}.`);t=parseFloat(e.value)}if(!isFinite(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Float cannot represent non numeric value ${t}.`);return t}if((0,i.isBooleanType)(t)){if(e.kind!==r.Kind.BOOLEAN)throw l.ERRORS.INVALID_GRAPHQL.err(`Boolean cannot represent a non boolean value ${(0,r.print)(e)}.`);return e.value}if((0,i.isStringType)(t)){if(e.kind!==r.Kind.STRING)throw l.ERRORS.INVALID_GRAPHQL.err(`String cannot represent non string value ${(0,r.print)(e)}.`);return e.value}if((0,i.isIDType)(t)){if(e.kind!==r.Kind.STRING&&e.kind!==r.Kind.INT)throw l.ERRORS.INVALID_GRAPHQL.err(`ID cannot represent value ${(0,r.print)(e)}.`);return e.value}if((0,i.isScalarType)(t))return g(e);if((0,i.isInputObjectType)(t)){if(e.kind!==r.Kind.OBJECT)throw l.ERRORS.INVALID_GRAPHQL.err(`Input Object Type ${t} cannot represent non-object value ${(0,r.print)(e)}.`);const n=Object.create(null);for(const i of e.fields){const e=i.name.value,r=t.field(e);if(!r)throw l.ERRORS.INVALID_GRAPHQL.err(`Unknown field "${e}" found in value for Input Object Type "${t}".`);n[e]=T(i.value,r.type)}return n}if((0,i.isEnumType)(t)){if(e.kind!==r.Kind.STRING&&e.kind!==r.Kind.ENUM)throw l.ERRORS.INVALID_GRAPHQL.err(`Enum Type ${t} cannot represent value ${(0,r.print)(e)}.`);if(!t.value(e.value))throw l.ERRORS.INVALID_GRAPHQL.err(`Enum Type ${t} has no value ${e.value}.`);return e.value}(0,c.assert)(!1,(()=>`Unexpected input type ${t} of kind ${t.kind}.`))}function g(e){switch(e.kind){case r.Kind.NULL:return null;case r.Kind.INT:return parseInt(e.value,10);case r.Kind.FLOAT:return parseFloat(e.value);case r.Kind.STRING:case r.Kind.ENUM:case r.Kind.BOOLEAN:return e.value;case r.Kind.LIST:return e.values.map(g);case r.Kind.OBJECT:const t=Object.create(null);return e.fields.forEach((e=>t[e.name.value]=g(e.value))),t;case r.Kind.VARIABLE:return new i.Variable(e.name.value)}}function I(e,t){(0,i.isVariable)(e)?t.some((t=>t.name===e.name))||t.push(e):e&&(Array.isArray(e)&&e.forEach((e=>I(e,t))),"object"==typeof e&&Object.keys(e).forEach((n=>I(e[n],t))))}t.valueNodeToConstValueNode=function e(t){if(t.kind===r.Kind.NULL||t.kind===r.Kind.INT||t.kind===r.Kind.FLOAT||t.kind===r.Kind.STRING||t.kind===r.Kind.BOOLEAN||t.kind===r.Kind.ENUM)return t;if(t.kind===r.Kind.LIST){const n=t.values.map((t=>e(t)));return{...t,values:n}}if(t.kind===r.Kind.OBJECT){const n=t.fields.map((t=>{return n=t,{...n,value:e(n.value)};var n}));return{...t,fields:n}}if(t.kind===r.Kind.VARIABLE)throw new Error("Unexpected VariableNode in const AST");(0,c.assertUnreachable)(t)},t.valueToAST=function e(t,n){if(void 0!==t){if((0,i.isNonNullType)(n)){const i=e(t,n.ofType);if((null==i?void 0:i.kind)===r.Kind.NULL)throw f(`Invalid null value ${u(t)} for non-null type ${n}`);return i}if(null===t)return{kind:r.Kind.NULL};if((0,i.isVariable)(t))return{kind:r.Kind.VARIABLE,name:{kind:r.Kind.NAME,value:t.name}};if((0,i.isCustomScalarType)(n))return y(t);if((0,i.isListType)(n)){const i=n.ofType,o=Array.from(t);if(null!=o){const t=[];for(const n of o){const r=e(n,i);null!=r&&t.push(r)}return{kind:r.Kind.LIST,values:t}}return e(t,i)}if((0,i.isInputObjectType)(n)){if("object"!=typeof t)throw f(`Invalid non-objet value for input type ${n}, cannot be converted to AST: ${(0,s.inspect)(t,!0,10,!0)}`);const i=[];for(const o of n.fields()){if(!o.type)throw f(`Cannot convert value ${u(t)} as field ${o} has no type set`);const n=e(t[o.name],o.type);n&&i.push({kind:r.Kind.OBJECT_FIELD,name:{kind:r.Kind.NAME,value:o.name},value:n})}return{kind:r.Kind.OBJECT,fields:i}}if("boolean"==typeof t)return{kind:r.Kind.BOOLEAN,value:t};if("number"==typeof t&&isFinite(t)){const e=String(t);return m.test(e)?{kind:r.Kind.INT,value:e}:{kind:r.Kind.FLOAT,value:e}}if("string"==typeof t)return(0,i.isEnumType)(n)?{kind:r.Kind.ENUM,value:t}:n===n.schema().idType()&&m.test(t)?{kind:r.Kind.INT,value:t}:{kind:r.Kind.STRING,value:t};throw f(`Invalid value for type ${n}, cannot be converted to AST: ${(0,s.inspect)(t)}`)}},t.isValidValue=function(e,t,n){return E(e,t.type,t.defaultValue,n)},t.valueFromAST=T,t.valueFromASTUntyped=g,t.argumentsFromAST=function(e,t,n){var i;const o=Object.create(null);if(t)for(const s of t){const t=s.name.value,a=null===(i=n.argument(t))||void 0===i?void 0:i.type;if(!a)throw l.ERRORS.INVALID_GRAPHQL.err(`Unknown argument "${t}" found in value: "${e}" has no argument named "${t}"`);try{o[t]=T(s.value,a)}catch(e){if(e instanceof r.GraphQLError)throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid value for argument "${t}": ${e.message}`);throw e}}return o},t.variablesInValue=function(e){const t=[];return I(e,t),t}},3154:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildFederatedSchema=t.buildSubgraphSchema=void 0;const i=n(9539),r=n(8929),o=n(1846),s=n(415),a=n(3647);function c(e){var t;let n;if("typeDefs"in e){const{typeDefs:t,resolvers:i}=e;n=(Array.isArray(t)?t:[t]).map(((e,t)=>{const n={typeDefs:e};return 0===t&&i&&(n.resolvers=i),n}))}else n=e;const i=(0,o.modulesFromSDL)(n),c=(0,r.concatAST)(i.map((e=>e.typeDefs))),l=(0,s.buildSubgraph)(s.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",c,!1),u=(0,s.printSchema)(l.schema),p=l.schema.toGraphQLJSSchema(),d=null===(t=l.schema.schemaDefinition.rootType("query"))||void 0===t?void 0:t.name;(0,s.assert)(d,"A Query root type should have been added by `buildSubgraph`"),(0,o.addResolversToSchema)(p,{[d]:{_service:()=>({sdl:u})}}),l.metadata().entityType()&&(0,o.addResolversToSchema)(p,{[d]:{_entities:(e,{representations:t},n,i)=>(0,a.entitiesResolver)({representations:t,context:n,info:i})},_Entity:{__resolveType:e=>e.__typename}});for(const e of i)e.resolvers&&(0,o.addResolversToSchema)(p,e.resolvers);return p}t.buildSubgraphSchema=c,t.buildFederatedSchema=(0,i.deprecate)(c,"'buildFederatedSchema' is deprecated. Use 'buildSubgraphSchema' instead.")},4903:(e,t,n)=>{"use strict";t.en=void 0;var i=n(3154);Object.defineProperty(t,"en",{enumerable:!0,get:function(){return i.buildSubgraphSchema}});n(5357)},5357:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printBlockString=t.printType=t.printIntrospectionSchema=t.printSubgraphSchema=void 0;const i=n(8929),r=n(415);t.printSubgraphSchema=function(e){const t=(0,r.graphQLJSSchemaToAST)(e);return(0,r.buildSubgraph)(r.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",t,!1).toString()},t.printIntrospectionSchema=function(e){const t=(0,r.graphQLJSSchemaToAST)(e),n=(0,r.buildSubgraph)(r.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",t,!1);return(0,r.printSchema)(n.schema)},t.printType=function(e){const{definition:t,extensions:n}=(0,r.graphQLJSNamedTypeToAST)(e);return(t?[t]:[]).concat(n).map((e=>(0,i.print)(e))).join("\n\n")},t.printBlockString=function(e,t=!1){const n=!e.includes("\n"),i=" "===e[0]||"\t"===e[0],r='"'===e[e.length-1],o="\\"===e[e.length-1],s=!n||r||o||t;let a="";return!s||n&&i||(a+="\n"),a+=e,s&&(a+="\n"),'"""'+a.replace(/"""/g,'\\"""')+'"""'}},6139:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildSchemaFromSDL=t.addResolversToSchema=t.modulesFromSDL=t.isDocumentNode=t.isNode=void 0;const i=n(8929),r=n(1122),o=n(9504),s=n(4710),a=n(863);function c(e){return null!=e}function l(e){return e&&"string"==typeof e.kind}function u(e){return l(e)&&e.kind===i.Kind.DOCUMENT}function p(e,t){const n=Object.create(null);for(const[i,r]of Object.entries(e))n[i]=t(r);return n}t.isNode=l,t.isDocumentNode=u;const d=[r.KnownTypeNamesRule,r.UniqueDirectivesPerLocationRule,r.PossibleTypeExtensionsRule],f=s.specifiedSDLRules.filter((e=>!d.includes(e))),h={[i.Kind.SCALAR_TYPE_EXTENSION]:i.Kind.SCALAR_TYPE_DEFINITION,[i.Kind.OBJECT_TYPE_EXTENSION]:i.Kind.OBJECT_TYPE_DEFINITION,[i.Kind.INTERFACE_TYPE_EXTENSION]:i.Kind.INTERFACE_TYPE_DEFINITION,[i.Kind.UNION_TYPE_EXTENSION]:i.Kind.UNION_TYPE_DEFINITION,[i.Kind.ENUM_TYPE_EXTENSION]:i.Kind.ENUM_TYPE_DEFINITION,[i.Kind.INPUT_OBJECT_TYPE_EXTENSION]:i.Kind.INPUT_OBJECT_TYPE_DEFINITION};function m(e){return Array.isArray(e)?e.map((e=>l(e)&&u(e)?{typeDefs:e}:e)):[{typeDefs:e}]}function y(e,t){var n,r;for(const[o,s]of Object.entries(t)){const t=e.getType(o);if((0,i.isAbstractType)(t)){const e=t.extensions;for(const[i,r]of Object.entries(s))"__resolveReference"===i?t.extensions={...e,apollo:{...e.apollo,subgraph:{...null===(n=e.apollo)||void 0===n?void 0:n.subgraph,resolveReference:r}}}:"__resolveType"===i&&(t.resolveType=r)}if((0,i.isScalarType)(t))for(const e in s)t[e]=s[e];if((0,i.isEnumType)(t)){const e=t.getValues(),n={};e.forEach((e=>{let t=s[e.name];void 0===t&&(t=e.name),n[e.name]={value:t,deprecationReason:e.deprecationReason,description:e.description,astNode:e.astNode,extensions:void 0}})),Object.assign(t,new i.GraphQLEnumType({...t.toConfig(),values:n}))}if(!(0,i.isObjectType)(t))continue;const a=t.getFields(),c=t.extensions;for(const[e,n]of Object.entries(s)){if("__resolveReference"===e){t.extensions={...c,apollo:{...c.apollo,subgraph:{...null===(r=c.apollo)||void 0===r?void 0:r.subgraph,resolveReference:n}}};continue}if("__isTypeOf"===e){t.isTypeOf=n;continue}const i=a[e];i&&(i.resolve="function"==typeof n?n:n.resolve)}}}t.modulesFromSDL=m,t.addResolversToSchema=y,t.buildSchemaFromSDL=function(e,t){const n=m(e),r=(0,i.concatAST)(n.map((e=>e.typeDefs))),s=(0,o.validateSDL)(r,t,f);if(s.length>0)throw new a.GraphQLSchemaValidationError(s);const l=Object.create(null),u=Object.create(null),d=[],v=[],E=[],T=[];let g;for(const e of r.definitions)if((0,i.isTypeDefinitionNode)(e)){const t=e.name.value;l[t]?l[t].push(e):l[t]=[e]}else if((0,i.isTypeExtensionNode)(e)){const t=e.name.value;u[t]?u[t].push(e):u[t]=[e]}else e.kind===i.Kind.DIRECTIVE_DEFINITION?d.push(e):e.kind===i.Kind.SCHEMA_DEFINITION?(v.push(e),T.push(...e.directives?e.directives:[]),g=e.description):e.kind===i.Kind.SCHEMA_EXTENSION&&(E.push(e),T.push(...e.directives?e.directives:[]));let I=t||new i.GraphQLSchema({query:void 0});const N=[];for(const[e,t]of Object.entries(u))if(!l[e]){const e=t[0],n=e.kind,i={kind:h[n],name:e.name};N.push(i)}let b;I=(0,i.extendSchema)(I,{kind:i.Kind.DOCUMENT,definitions:[...Object.values(l).flat(),...N,...d]},{assumeValidSDL:!0}),I=(0,i.extendSchema)(I,{kind:i.Kind.DOCUMENT,definitions:Object.values(u).flat()},{assumeValidSDL:!0});const _=[...v,...E].map((e=>e.operationTypes)).filter(c).flat();if(_.length>0){b={};for(const{operation:e,type:t}of _)b[e]=t.name.value}else b={query:"Query",mutation:"Mutation",subscription:"Subscription"};I=new i.GraphQLSchema({...I.toConfig(),...p(b,(e=>e?I.getType(e):void 0)),description:null==g?void 0:g.value,astNode:{kind:i.Kind.SCHEMA_DEFINITION,description:g,directives:T,operationTypes:[]}});for(const e of n)e.resolvers&&y(I,e.resolvers);return I}},863:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSchemaValidationError=void 0;class n extends Error{constructor(e){super(),this.errors=e,this.name=this.constructor.name,Error.captureStackTrace(this,this.constructor),this.message=e.map((e=>e.message)).join("\n\n")}}t.GraphQLSchemaValidationError=n},1846:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(2601),t),r(n(6139),t),r(n(863),t),r(n(1511),t)},2601:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformSchema=void 0;const i=n(8929);function r(e,t){const n=Object.create(null);for(const[i,r]of Object.entries(e))n[i]=t(r);return n}t.transformSchema=function(e,t){const n=Object.create(null);for(const r of Object.values(e.getTypeMap())){if((0,i.isIntrospectionType)(r))continue;const e=t(r);if(null===e)continue;const o=e||r;n[o.name]=a(o)}const o=e.toConfig();return new i.GraphQLSchema({...o,types:Object.values(n),query:u(o.query),mutation:u(o.mutation),subscription:u(o.subscription),directives:(s=o.directives,s.map((e=>{const t=e.toConfig();return new i.GraphQLDirective({...t,args:d(t.args)})})))});var s;function a(e){if((0,i.isObjectType)(e)){const t=e.toConfig();return new i.GraphQLObjectType({...t,interfaces:()=>t.interfaces.map(l),fields:()=>p(t.fields)})}if((0,i.isInterfaceType)(e)){const t=e.toConfig();return new i.GraphQLInterfaceType({...t,interfaces:()=>t.interfaces.map(l),fields:()=>p(t.fields)})}if((0,i.isUnionType)(e)){const t=e.toConfig();return new i.GraphQLUnionType({...t,types:()=>t.types.map(l)})}if((0,i.isInputObjectType)(e)){const t=e.toConfig();return new i.GraphQLInputObjectType({...t,fields:()=>r(t.fields,(e=>({...e,type:c(e.type)})))})}return e}function c(e){return(0,i.isListType)(e)?new i.GraphQLList(c(e.ofType)):(0,i.isNonNullType)(e)?new i.GraphQLNonNull(c(e.ofType)):l(e)}function l(e){return n[e.name]||e}function u(e){return e?l(e):void 0}function p(e){return r(e,(e=>({...e,type:c(e.type),args:e.args?d(e.args):void 0})))}function d(e){return r(e,(e=>({...e,type:c(e.type)})))}}},3647:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFederationType=t.federationTypes=t.serviceField=t.entitiesField=t.entitiesResolver=t.LinkImportType=t.AnyType=t.ServiceType=t.EntityType=void 0;const i=n(8929),r=n(9825);function o(e,t){return null!==e&&"object"==typeof e&&Object.defineProperty(e,"__typename",{value:t}),e}function s({representations:e,context:t,info:n}){return e.map((e=>{var s,a,c;const{__typename:l}=e,u=n.schema.getType(l);if(!u||!(0,i.isObjectType)(u))throw new Error(`The _entities resolver tried to load an entity for type "${l}", but no object type of that name was found in the schema`);const p=(0,r.maybeCacheControlFromInfo)(n);if(p){const e=p.cacheHintFromType(u);e&&p.cacheHint.restrict(e)}const d=(null!==(c=null===(a=null===(s=u.extensions.apollo)||void 0===s?void 0:s.subgraph)||void 0===a?void 0:a.resolveReference)&&void 0!==c?c:()=>e)(e,t,n);return"function"==typeof(null==(f=d)?void 0:f.then)?d.then((e=>o(e,l))):o(d,l);var f}))}t.EntityType=new i.GraphQLUnionType({name:"_Entity",types:[]}),t.ServiceType=new i.GraphQLObjectType({name:"_Service",fields:{sdl:{type:i.GraphQLString,description:"The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"}}}),t.AnyType=new i.GraphQLScalarType({name:"_Any",serialize:e=>e}),t.LinkImportType=new i.GraphQLScalarType({name:"link__Import",specifiedByURL:null}),t.entitiesResolver=s,t.entitiesField={type:new i.GraphQLNonNull(new i.GraphQLList(t.EntityType)),args:{representations:{type:new i.GraphQLNonNull(new i.GraphQLList(new i.GraphQLNonNull(t.AnyType)))}},resolve:(e,{representations:t},n,i)=>s({representations:t,context:n,info:i})},t.serviceField={type:new i.GraphQLNonNull(t.ServiceType)},t.federationTypes=[t.ServiceType,t.AnyType,t.EntityType,t.LinkImportType],t.isFederationType=function(e){return(0,i.isNamedType)(e)&&t.federationTypes.some((({name:t})=>t===e.name))}},6434:(e,t,n)=>{"use strict";e=n.nmd(e);const i=(e,t)=>(...n)=>`[${e(...n)+t}m`,r=(e,t)=>(...n)=>{const i=e(...n);return`[${38+t};5;${i}m`},o=(e,t)=>(...n)=>{const i=e(...n);return`[${38+t};2;${i[0]};${i[1]};${i[2]}m`},s=e=>e,a=(e,t,n)=>[e,t,n],c=(e,t,n)=>{Object.defineProperty(e,t,{get:()=>{const i=n();return Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0}),i},enumerable:!0,configurable:!0})};let l;const u=(e,t,i,r)=>{void 0===l&&(l=n(2085));const o=r?10:0,s={};for(const[n,r]of Object.entries(l)){const a="ansi16"===n?"ansi":n;n===t?s[a]=e(i,o):"object"==typeof r&&(s[a]=e(r[t],o))}return s};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(const[n,i]of Object.entries(t)){for(const[n,r]of Object.entries(i))t[n]={open:`[${r[0]}m`,close:`[${r[1]}m`},i[n]=t[n],e.set(r[0],r[1]);Object.defineProperty(t,n,{value:i,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="[39m",t.bgColor.close="[49m",c(t.color,"ansi",(()=>u(i,"ansi16",s,!1))),c(t.color,"ansi256",(()=>u(r,"ansi256",s,!1))),c(t.color,"ansi16m",(()=>u(o,"rgb",a,!1))),c(t.bgColor,"ansi",(()=>u(i,"ansi16",s,!0))),c(t.bgColor,"ansi256",(()=>u(r,"ansi256",s,!0))),c(t.bgColor,"ansi16m",(()=>u(o,"rgb",a,!0))),t}})},9282:(e,t,n)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var r,o,s=n(2136).codes,a=s.ERR_AMBIGUOUS_ARGUMENT,c=s.ERR_INVALID_ARG_TYPE,l=s.ERR_INVALID_ARG_VALUE,u=s.ERR_INVALID_RETURN_VALUE,p=s.ERR_MISSING_ARGS,d=n(9363),f=n(9539).inspect,h=n(9539).types,m=h.isPromise,y=h.isRegExp,v=Object.assign?Object.assign:n(8091).assign,E=Object.is?Object.is:n(609);function T(){var e=n(9158);r=e.isDeepEqual,o=e.isDeepStrictEqual}new Map;var g=!1,I=e.exports=S,N={};function b(e){if(e.message instanceof Error)throw e.message;throw new d(e)}function _(e,t,n,i){if(!n){var r=!1;if(0===t)r=!0,i="No value argument passed to `assert.ok()`";else if(i instanceof Error)throw i;var o=new d({actual:n,expected:!0,message:i,operator:"==",stackStartFn:e});throw o.generatedMessage=r,o}}function S(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];_.apply(void 0,[S,t.length].concat(t))}I.fail=function e(t,n,i,r,o){var s,a=arguments.length;if(0===a)s="Failed";else if(1===a)i=t,t=void 0;else{if(!1===g){g=!0;var c=process.emitWarning?process.emitWarning:console.warn.bind(console);c("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}2===a&&(r="!=")}if(i instanceof Error)throw i;var l={actual:t,expected:n,operator:void 0===r?"fail":r,stackStartFn:o||e};void 0!==i&&(l.message=i);var u=new d(l);throw s&&(u.message=s,u.generatedMessage=!0),u},I.AssertionError=d,I.ok=S,I.equal=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");t!=n&&b({actual:t,expected:n,message:i,operator:"==",stackStartFn:e})},I.notEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");t==n&&b({actual:t,expected:n,message:i,operator:"!=",stackStartFn:e})},I.deepEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),r(t,n)||b({actual:t,expected:n,message:i,operator:"deepEqual",stackStartFn:e})},I.notDeepEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),r(t,n)&&b({actual:t,expected:n,message:i,operator:"notDeepEqual",stackStartFn:e})},I.deepStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),o(t,n)||b({actual:t,expected:n,message:i,operator:"deepStrictEqual",stackStartFn:e})},I.notDeepStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),o(t,n)&&b({actual:t,expected:n,message:i,operator:"notDeepStrictEqual",stackStartFn:e})},I.strictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");E(t,n)||b({actual:t,expected:n,message:i,operator:"strictEqual",stackStartFn:e})},I.notStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");E(t,n)&&b({actual:t,expected:n,message:i,operator:"notStrictEqual",stackStartFn:e})};var O=function e(t,n,i){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.forEach((function(e){e in t&&(void 0!==i&&"string"==typeof i[e]&&y(t[e])&&t[e].test(i[e])?r[e]=i[e]:r[e]=t[e])}))};function D(e,t,n,i,r,s){if(!(n in e)||!o(e[n],t[n])){if(!i){var a=new O(e,r),c=new O(t,r,e),l=new d({actual:a,expected:c,operator:"deepStrictEqual",stackStartFn:s});throw l.actual=e,l.expected=t,l.operator=s.name,l}b({actual:e,expected:t,message:i,operator:s.name,stackStartFn:s})}}function A(e,t,n,o){if("function"!=typeof t){if(y(t))return t.test(e);if(2===arguments.length)throw new c("expected",["Function","RegExp"],t);if("object"!==i(e)||null===e){var s=new d({actual:e,expected:t,message:n,operator:"deepStrictEqual",stackStartFn:o});throw s.operator=o.name,s}var a=Object.keys(t);if(t instanceof Error)a.push("name","message");else if(0===a.length)throw new l("error",t,"may not be an empty object");return void 0===r&&T(),a.forEach((function(i){"string"==typeof e[i]&&y(t[i])&&t[i].test(e[i])||D(e,t,i,n,a,o)})),!0}return void 0!==t.prototype&&e instanceof t||!Error.isPrototypeOf(t)&&!0===t.call({},e)}function R(e){if("function"!=typeof e)throw new c("fn","Function",e);try{e()}catch(e){return e}return N}function w(e){return m(e)||null!==e&&"object"===i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function L(e){return Promise.resolve().then((function(){var t;if("function"==typeof e){if(!w(t=e()))throw new u("instance of Promise","promiseFn",t)}else{if(!w(e))throw new c("promiseFn",["Function","Promise"],e);t=e}return Promise.resolve().then((function(){return t})).then((function(){return N})).catch((function(e){return e}))}))}function F(e,t,n,r){if("string"==typeof n){if(4===arguments.length)throw new c("error",["Object","Error","Function","RegExp"],n);if("object"===i(t)&&null!==t){if(t.message===n)throw new a("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===n)throw new a("error/message",'The error "'.concat(t,'" is identical to the message.'));r=n,n=void 0}else if(null!=n&&"object"!==i(n)&&"function"!=typeof n)throw new c("error",["Object","Error","Function","RegExp"],n);if(t===N){var o="";n&&n.name&&(o+=" (".concat(n.name,")")),o+=r?": ".concat(r):".";var s="rejects"===e.name?"rejection":"exception";b({actual:void 0,expected:n,operator:e.name,message:"Missing expected ".concat(s).concat(o),stackStartFn:e})}if(n&&!A(t,n,r,e))throw t}function x(e,t,n,i){if(t!==N){if("string"==typeof n&&(i=n,n=void 0),!n||A(t,n)){var r=i?": ".concat(i):".",o="doesNotReject"===e.name?"rejection":"exception";b({actual:t,expected:n,operator:e.name,message:"Got unwanted ".concat(o).concat(r,"\n")+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}function k(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];_.apply(void 0,[k,t.length].concat(t))}I.throws=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];F.apply(void 0,[e,R(t)].concat(i))},I.rejects=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return L(t).then((function(t){return F.apply(void 0,[e,t].concat(i))}))},I.doesNotThrow=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];x.apply(void 0,[e,R(t)].concat(i))},I.doesNotReject=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return L(t).then((function(t){return x.apply(void 0,[e,t].concat(i))}))},I.ifError=function e(t){if(null!=t){var n="ifError got unwanted exception: ";"object"===i(t)&&"string"==typeof t.message?0===t.message.length&&t.constructor?n+=t.constructor.name:n+=t.message:n+=f(t);var r=new d({actual:t,expected:null,operator:"ifError",message:n,stackStartFn:e}),o=t.stack;if("string"==typeof o){var s=o.split("\n");s.shift();for(var a=r.stack.split("\n"),c=0;c<s.length;c++){var l=a.indexOf(s[c]);if(-1!==l){a=a.slice(0,l);break}}r.stack="".concat(a.join("\n"),"\n").concat(s.join("\n"))}throw r}},I.strict=v(k,I,{equal:I.strictEqual,deepEqual:I.deepStrictEqual,notEqual:I.notStrictEqual,notDeepEqual:I.notDeepStrictEqual}),I.strict.strict=I.strict},9363:(e,t,n)=>{"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?s(e):t}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e){var t="function"==typeof Map?new Map:void 0;return a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return l(e,arguments,p(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),u(i,e)},a(e)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return l=c()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&u(r,n.prototype),r},l.apply(null,arguments)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}var f=n(9539).inspect,h=n(2136).codes.ERR_INVALID_ARG_TYPE;function m(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}var y="",v="",E="",T="",g={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function I(e){var t=Object.keys(e),n=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){n[t]=e[t]})),Object.defineProperty(n,"message",{value:e.message}),n}function N(e){return f(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var b=function(e){function t(e){var n;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"object"!==d(e)||null===e)throw new h("options","Object",e);var i=e.message,r=e.operator,a=e.stackStartFn,c=e.actual,l=e.expected,u=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=i)n=o(this,p(t).call(this,String(i)));else if(process.stderr&&process.stderr.isTTY&&(process.stderr&&process.stderr.getColorDepth&&1!==process.stderr.getColorDepth()?(y="[34m",v="[32m",T="[39m",E="[31m"):(y="",v="",T="",E="")),"object"===d(c)&&null!==c&&"object"===d(l)&&null!==l&&"stack"in c&&c instanceof Error&&"stack"in l&&l instanceof Error&&(c=I(c),l=I(l)),"deepStrictEqual"===r||"strictEqual"===r)n=o(this,p(t).call(this,function(e,t,n){var i="",r="",o=0,s="",a=!1,c=N(e),l=c.split("\n"),u=N(t).split("\n"),p=0,f="";if("strictEqual"===n&&"object"===d(e)&&"object"===d(t)&&null!==e&&null!==t&&(n="strictEqualObject"),1===l.length&&1===u.length&&l[0]!==u[0]){var h=l[0].length+u[0].length;if(h<=10){if(!("object"===d(e)&&null!==e||"object"===d(t)&&null!==t||0===e&&0===t))return"".concat(g[n],"\n\n")+"".concat(l[0]," !== ").concat(u[0],"\n")}else if("strictEqualObject"!==n&&h<(process.stderr&&process.stderr.isTTY?process.stderr.columns:80)){for(;l[0][p]===u[0][p];)p++;p>2&&(f="\n  ".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return"";var n=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,n-e.length)}(" ",p),"^"),p=0)}}for(var I=l[l.length-1],b=u[u.length-1];I===b&&(p++<2?s="\n  ".concat(I).concat(s):i=I,l.pop(),u.pop(),0!==l.length&&0!==u.length);)I=l[l.length-1],b=u[u.length-1];var _=Math.max(l.length,u.length);if(0===_){var S=c.split("\n");if(S.length>30)for(S[26]="".concat(y,"...").concat(T);S.length>27;)S.pop();return"".concat(g.notIdentical,"\n\n").concat(S.join("\n"),"\n")}p>3&&(s="\n".concat(y,"...").concat(T).concat(s),a=!0),""!==i&&(s="\n  ".concat(i).concat(s),i="");var O=0,D=g[n]+"\n".concat(v,"+ actual").concat(T," ").concat(E,"- expected").concat(T),A=" ".concat(y,"...").concat(T," Lines skipped");for(p=0;p<_;p++){var R=p-o;if(l.length<p+1)R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(u[p-2]),O++),r+="\n  ".concat(u[p-1]),O++),o=p,i+="\n".concat(E,"-").concat(T," ").concat(u[p]),O++;else if(u.length<p+1)R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(l[p-2]),O++),r+="\n  ".concat(l[p-1]),O++),o=p,r+="\n".concat(v,"+").concat(T," ").concat(l[p]),O++;else{var w=u[p],L=l[p],F=L!==w&&(!m(L,",")||L.slice(0,-1)!==w);F&&m(w,",")&&w.slice(0,-1)===L&&(F=!1,L+=","),F?(R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(l[p-2]),O++),r+="\n  ".concat(l[p-1]),O++),o=p,r+="\n".concat(v,"+").concat(T," ").concat(L),i+="\n".concat(E,"-").concat(T," ").concat(w),O+=2):(r+=i,i="",1!==R&&0!==p||(r+="\n  ".concat(L),O++))}if(O>20&&p<_-2)return"".concat(D).concat(A,"\n").concat(r,"\n").concat(y,"...").concat(T).concat(i,"\n")+"".concat(y,"...").concat(T)}return"".concat(D).concat(a?A:"","\n").concat(r).concat(i).concat(s).concat(f)}(c,l,r)));else if("notDeepStrictEqual"===r||"notStrictEqual"===r){var f=g[r],b=N(c).split("\n");if("notStrictEqual"===r&&"object"===d(c)&&null!==c&&(f=g.notStrictEqualObject),b.length>30)for(b[26]="".concat(y,"...").concat(T);b.length>27;)b.pop();n=1===b.length?o(this,p(t).call(this,"".concat(f," ").concat(b[0]))):o(this,p(t).call(this,"".concat(f,"\n\n").concat(b.join("\n"),"\n")))}else{var _=N(c),S="",O=g[r];"notDeepEqual"===r||"notEqual"===r?(_="".concat(g[r],"\n\n").concat(_)).length>1024&&(_="".concat(_.slice(0,1021),"...")):(S="".concat(N(l)),_.length>512&&(_="".concat(_.slice(0,509),"...")),S.length>512&&(S="".concat(S.slice(0,509),"...")),"deepEqual"===r||"equal"===r?_="".concat(O,"\n\n").concat(_,"\n\nshould equal\n\n"):S=" ".concat(r," ").concat(S)),n=o(this,p(t).call(this,"".concat(_).concat(S)))}return Error.stackTraceLimit=u,n.generatedMessage=!i,Object.defineProperty(s(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=c,n.expected=l,n.operator=r,Error.captureStackTrace&&Error.captureStackTrace(s(n),a),n.stack,n.name="AssertionError",o(n)}var n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),n=t,a=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:f.custom,value:function(e,t){return f(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){i(e,t,n[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],a&&r(n.prototype,a),t}(a(Error));e.exports=b},2136:(e,t,n)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}function o(e,t){return o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},o(e,t)}var s,a,c={};function l(e,t,n){n||(n=Error);var s=function(n){function s(n,o,a){var c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),c=function(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,r(s).call(this,function(e,n,i){return"string"==typeof t?t:t(e,n,i)}(n,o,a))),c.code=e,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(s,n),s}(n);c[e]=s}function u(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}l("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),l("ERR_INVALID_ARG_TYPE",(function(e,t,r){var o,a,c,l,p;if(void 0===s&&(s=n(9282)),s("string"==typeof e,"'name' must be a string"),"string"==typeof t&&(a="not ",t.substr(0,a.length)===a)?(o="must not be",t=t.replace(/^not /,"")):o="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e," argument"))c="The ".concat(e," ").concat(o," ").concat(u(t,"type"));else{var d=("number"!=typeof p&&(p=0),p+".".length>(l=e).length||-1===l.indexOf(".",p)?"argument":"property");c='The "'.concat(e,'" ').concat(d," ").concat(o," ").concat(u(t,"type"))}return c+". Received type ".concat(i(r))}),TypeError),l("ERR_INVALID_ARG_VALUE",(function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===a&&(a=n(9539));var r=a.inspect(t);return r.length>128&&(r="".concat(r.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(i,". Received ").concat(r)}),TypeError,RangeError),l("ERR_INVALID_RETURN_VALUE",(function(e,t,n){var r;return r=n&&n.constructor&&n.constructor.name?"instance of ".concat(n.constructor.name):"type ".concat(i(n)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(r,".")}),TypeError),l("ERR_MISSING_ARGS",(function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];void 0===s&&(s=n(9282)),s(t.length>0,"At least one arg needs to be specified");var r="The ",o=t.length;switch(t=t.map((function(e){return'"'.concat(e,'"')})),o){case 1:r+="".concat(t[0]," argument");break;case 2:r+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:r+=t.slice(0,o-1).join(", "),r+=", and ".concat(t[o-1]," arguments")}return"".concat(r," must be specified")}),TypeError),e.exports.codes=c},9158:(e,t,n)=>{"use strict";function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==a.return||a.return()}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=void 0!==/a/g.flags,s=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},a=function(e){var t=[];return e.forEach((function(e,n){return t.push([n,e])})),t},c=Object.is?Object.is:n(609),l=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},u=Number.isNaN?Number.isNaN:n(360);function p(e){return e.call.bind(e)}var d=p(Object.prototype.hasOwnProperty),f=p(Object.prototype.propertyIsEnumerable),h=p(Object.prototype.toString),m=n(9539).types,y=m.isAnyArrayBuffer,v=m.isArrayBufferView,E=m.isDate,T=m.isMap,g=m.isRegExp,I=m.isSet,N=m.isNativeError,b=m.isBoxedPrimitive,_=m.isNumberObject,S=m.isStringObject,O=m.isBooleanObject,D=m.isBigIntObject,A=m.isSymbolObject,R=m.isFloat32Array,w=m.isFloat64Array;function L(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var n=e.charCodeAt(t);if(n<48||n>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function F(e){return Object.keys(e).filter(L).concat(l(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function x(e,t){if(e===t)return 0;for(var n=e.length,i=t.length,r=0,o=Math.min(n,i);r<o;++r)if(e[r]!==t[r]){n=e[r],i=t[r];break}return n<i?-1:i<n?1:0}function k(e,t,n,i){if(e===t)return 0!==e||!n||c(e,t);if(n){if("object"!==r(e))return"number"==typeof e&&u(e)&&u(t);if("object"!==r(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||"object"!==r(e))return(null===t||"object"!==r(t))&&e==t;if(null===t||"object"!==r(t))return!1}var s,a,l,p,d=h(e);if(d!==h(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var f=F(e),m=F(t);return f.length===m.length&&C(e,t,n,i,1,f)}if("[object Object]"===d&&(!T(e)&&T(t)||!I(e)&&I(t)))return!1;if(E(e)){if(!E(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(g(e)){if(!g(t)||(l=e,p=t,!(o?l.source===p.source&&l.flags===p.flags:RegExp.prototype.toString.call(l)===RegExp.prototype.toString.call(p))))return!1}else if(N(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(v(e)){if(n||!R(e)&&!w(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===x(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0}(e,t))return!1;var L=F(e),k=F(t);return L.length===k.length&&C(e,t,n,i,0,L)}if(I(e))return!(!I(t)||e.size!==t.size)&&C(e,t,n,i,2);if(T(e))return!(!T(t)||e.size!==t.size)&&C(e,t,n,i,3);if(y(e)){if(a=t,(s=e).byteLength!==a.byteLength||0!==x(new Uint8Array(s),new Uint8Array(a)))return!1}else if(b(e)&&!function(e,t){return _(e)?_(t)&&c(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):S(e)?S(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):O(e)?O(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):D(e)?D(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):A(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return C(e,t,n,i,0)}function $(e,t){return t.filter((function(t){return f(e,t)}))}function C(e,t,n,i,r,o){if(5===arguments.length){o=Object.keys(e);var s=Object.keys(t);if(o.length!==s.length)return!1}for(var a=0;a<o.length;a++)if(!d(t,o[a]))return!1;if(n&&5===arguments.length){var c=l(e);if(0!==c.length){var u=0;for(a=0;a<c.length;a++){var p=c[a];if(f(e,p)){if(!f(t,p))return!1;o.push(p),u++}else if(f(t,p))return!1}var h=l(t);if(c.length!==h.length&&$(t,h).length!==u)return!1}else{var m=l(t);if(0!==m.length&&0!==$(t,m).length)return!1}}if(0===o.length&&(0===r||1===r&&0===e.length||0===e.size))return!0;if(void 0===i)i={val1:new Map,val2:new Map,position:0};else{var y=i.val1.get(e);if(void 0!==y){var v=i.val2.get(t);if(void 0!==v)return y===v}i.position++}i.val1.set(e,i.position),i.val2.set(t,i.position);var E=G(e,t,n,o,i,r);return i.val1.delete(e),i.val2.delete(t),E}function j(e,t,n,i){for(var r=s(e),o=0;o<r.length;o++){var a=r[o];if(k(t,a,n,i))return e.delete(a),!0}return!1}function M(e){switch(r(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(u(e))return!1}return!0}function P(e,t,n){var i=M(n);return null!=i?i:t.has(i)&&!e.has(i)}function U(e,t,n,i,r){var o=M(n);if(null!=o)return o;var s=t.get(o);return!(void 0===s&&!t.has(o)||!k(i,s,!1,r))&&!e.has(o)&&k(i,s,!1,r)}function V(e,t,n,i,r,o){for(var a=s(e),c=0;c<a.length;c++){var l=a[c];if(k(n,l,r,o)&&k(i,t.get(l),r,o))return e.delete(l),!0}return!1}function G(e,t,n,o,c,l){var u=0;if(2===l){if(!function(e,t,n,i){for(var o=null,a=s(e),c=0;c<a.length;c++){var l=a[c];if("object"===r(l)&&null!==l)null===o&&(o=new Set),o.add(l);else if(!t.has(l)){if(n)return!1;if(!P(e,t,l))return!1;null===o&&(o=new Set),o.add(l)}}if(null!==o){for(var u=s(t),p=0;p<u.length;p++){var d=u[p];if("object"===r(d)&&null!==d){if(!j(o,d,n,i))return!1}else if(!n&&!e.has(d)&&!j(o,d,n,i))return!1}return 0===o.size}return!0}(e,t,n,c))return!1}else if(3===l){if(!function(e,t,n,o){for(var s=null,c=a(e),l=0;l<c.length;l++){var u=i(c[l],2),p=u[0],d=u[1];if("object"===r(p)&&null!==p)null===s&&(s=new Set),s.add(p);else{var f=t.get(p);if(void 0===f&&!t.has(p)||!k(d,f,n,o)){if(n)return!1;if(!U(e,t,p,d,o))return!1;null===s&&(s=new Set),s.add(p)}}}if(null!==s){for(var h=a(t),m=0;m<h.length;m++){var y=i(h[m],2),v=(p=y[0],y[1]);if("object"===r(p)&&null!==p){if(!V(s,e,p,v,n,o))return!1}else if(!(n||e.has(p)&&k(e.get(p),v,!1,o)||V(s,e,p,v,!1,o)))return!1}return 0===s.size}return!0}(e,t,n,c))return!1}else if(1===l)for(;u<e.length;u++){if(!d(e,u)){if(d(t,u))return!1;for(var p=Object.keys(e);u<p.length;u++){var f=p[u];if(!d(t,f)||!k(e[f],t[f],n,c))return!1}return p.length===Object.keys(t).length}if(!d(t,u)||!k(e[u],t[u],n,c))return!1}for(u=0;u<o.length;u++){var h=o[u];if(!k(e[h],t[h],n,c))return!1}return!0}e.exports={isDeepEqual:function(e,t){return k(e,t,!1)},isDeepStrictEqual:function(e,t){return k(e,t,!0)}}},1924:(e,t,n)=>{"use strict";var i=n(210),r=n(5559),o=r(i("String.prototype.indexOf"));e.exports=function(e,t){var n=i(e,!!t);return"function"==typeof n&&o(e,".prototype.")>-1?r(n):n}},5559:(e,t,n)=>{"use strict";var i=n(8612),r=n(210),o=r("%Function.prototype.apply%"),s=r("%Function.prototype.call%"),a=r("%Reflect.apply%",!0)||i.call(s,o),c=r("%Object.getOwnPropertyDescriptor%",!0),l=r("%Object.defineProperty%",!0),u=r("%Math.max%");if(l)try{l({},"a",{value:1})}catch(e){l=null}e.exports=function(e){var t=a(i,s,arguments);if(c&&l){var n=c(t,"length");n.configurable&&l(t,"length",{value:1+u(0,e.length-(arguments.length-1))})}return t};var p=function(){return a(i,o,arguments)};l?l(e.exports,"apply",{value:p}):e.exports.apply=p},4061:(e,t,n)=>{"use strict";const i=n(6434),{stdout:r,stderr:o}=n(8555),{stringReplaceAll:s,stringEncaseCRLFWithFirstIndex:a}=n(3559),{isArray:c}=Array,l=["ansi","ansi","ansi256","ansi16m"],u=Object.create(null);class p{constructor(e){return d(e)}}const d=e=>{const t={};return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=r?r.level:0;e.level=void 0===t.level?n:t.level})(t,e),t.template=(...e)=>g(t.template,...e),Object.setPrototypeOf(t,f.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=p,t.template};function f(e){return d(e)}for(const[e,t]of Object.entries(i))u[e]={get(){const n=v(this,y(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:n}),n}};u.visible={get(){const e=v(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const h=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of h)u[e]={get(){const{level:t}=this;return function(...n){const r=y(i.color[l[t]][e](...n),i.color.close,this._styler);return v(this,r,this._isEmpty)}}};for(const e of h)u["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const r=y(i.bgColor[l[t]][e](...n),i.bgColor.close,this._styler);return v(this,r,this._isEmpty)}}};const m=Object.defineProperties((()=>{}),{...u,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),y=(e,t,n)=>{let i,r;return void 0===n?(i=e,r=t):(i=n.openAll+e,r=t+n.closeAll),{open:e,close:t,openAll:i,closeAll:r,parent:n}},v=(e,t,n)=>{const i=(...e)=>c(e[0])&&c(e[0].raw)?E(i,g(i,...e)):E(i,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(i,m),i._generator=e,i._styler=t,i._isEmpty=n,i},E=(e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let n=e._styler;if(void 0===n)return t;const{openAll:i,closeAll:r}=n;if(-1!==t.indexOf(""))for(;void 0!==n;)t=s(t,n.close,n.open),n=n.parent;const o=t.indexOf("\n");return-1!==o&&(t=a(t,r,i,o)),i+t+r};let T;const g=(e,...t)=>{const[i]=t;if(!c(i)||!c(i.raw))return t.join(" ");const r=t.slice(1),o=[i.raw[0]];for(let e=1;e<i.length;e++)o.push(String(r[e-1]).replace(/[{}\\]/g,"\\$&"),String(i.raw[e]));return void 0===T&&(T=n(9515)),T(e,o.join(""))};Object.defineProperties(f.prototype,u);const I=f();I.supportsColor=r,I.stderr=f({level:o?o.level:0}),I.stderr.supportsColor=o,e.exports=I},9515:e=>{"use strict";const t=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,n=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,i=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,r=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,o=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function s(e){const t="u"===e[0],n="{"===e[1];return t&&!n&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):t&&n?String.fromCodePoint(parseInt(e.slice(2,-1),16)):o.get(e)||e}function a(e,t){const n=[],o=t.trim().split(/\s*,\s*/g);let a;for(const t of o){const o=Number(t);if(Number.isNaN(o)){if(!(a=t.match(i)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);n.push(a[2].replace(r,((e,t,n)=>t?s(t):n)))}else n.push(o)}return n}function c(e){n.lastIndex=0;const t=[];let i;for(;null!==(i=n.exec(e));){const e=i[1];if(i[2]){const n=a(e,i[2]);t.push([e].concat(n))}else t.push([e])}return t}function l(e,t){const n={};for(const e of t)for(const t of e.styles)n[t[0]]=e.inverse?null:t.slice(1);let i=e;for(const[e,t]of Object.entries(n))if(Array.isArray(t)){if(!(e in i))throw new Error(`Unknown Chalk style: ${e}`);i=t.length>0?i[e](...t):i[e]}return i}e.exports=(e,n)=>{const i=[],r=[];let o=[];if(n.replace(t,((t,n,a,u,p,d)=>{if(n)o.push(s(n));else if(u){const t=o.join("");o=[],r.push(0===i.length?t:l(e,i)(t)),i.push({inverse:a,styles:c(u)})}else if(p){if(0===i.length)throw new Error("Found extraneous } in Chalk template literal");r.push(l(e,i)(o.join(""))),o=[],i.pop()}else o.push(d)})),r.push(o.join("")),i.length>0){const e=`Chalk template literal is missing ${i.length} closing bracket${1===i.length?"":"s"} (\`}\`)`;throw new Error(e)}return r.join("")}},3559:e=>{"use strict";e.exports={stringReplaceAll:(e,t,n)=>{let i=e.indexOf(t);if(-1===i)return e;const r=t.length;let o=0,s="";do{s+=e.substr(o,i-o)+t+n,o=i+r,i=e.indexOf(t,o)}while(-1!==i);return s+=e.substr(o),s},stringEncaseCRLFWithFirstIndex:(e,t,n,i)=>{let r=0,o="";do{const s="\r"===e[i-1];o+=e.substr(r,(s?i-1:i)-r)+t+(s?"\r\n":"\n")+n,r=i+1,i=e.indexOf("\n",r)}while(-1!==i);return o+=e.substr(r),o}}},8168:(e,t,n)=>{const i=n(8874),r={};for(const e of Object.keys(i))r[i[e]]=e;const o={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=o;for(const e of Object.keys(o)){if(!("channels"in o[e]))throw new Error("missing channels property: "+e);if(!("labels"in o[e]))throw new Error("missing channel labels property: "+e);if(o[e].labels.length!==o[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:n}=o[e];delete o[e].channels,delete o[e].labels,Object.defineProperty(o[e],"channels",{value:t}),Object.defineProperty(o[e],"labels",{value:n})}o.rgb.hsl=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.min(t,n,i),o=Math.max(t,n,i),s=o-r;let a,c;o===r?a=0:t===o?a=(n-i)/s:n===o?a=2+(i-t)/s:i===o&&(a=4+(t-n)/s),a=Math.min(60*a,360),a<0&&(a+=360);const l=(r+o)/2;return c=o===r?0:l<=.5?s/(o+r):s/(2-o-r),[a,100*c,100*l]},o.rgb.hsv=function(e){let t,n,i,r,o;const s=e[0]/255,a=e[1]/255,c=e[2]/255,l=Math.max(s,a,c),u=l-Math.min(s,a,c),p=function(e){return(l-e)/6/u+.5};return 0===u?(r=0,o=0):(o=u/l,t=p(s),n=p(a),i=p(c),s===l?r=i-n:a===l?r=1/3+t-i:c===l&&(r=2/3+n-t),r<0?r+=1:r>1&&(r-=1)),[360*r,100*o,100*l]},o.rgb.hwb=function(e){const t=e[0],n=e[1];let i=e[2];const r=o.rgb.hsl(e)[0],s=1/255*Math.min(t,Math.min(n,i));return i=1-1/255*Math.max(t,Math.max(n,i)),[r,100*s,100*i]},o.rgb.cmyk=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.min(1-t,1-n,1-i);return[100*((1-t-r)/(1-r)||0),100*((1-n-r)/(1-r)||0),100*((1-i-r)/(1-r)||0),100*r]},o.rgb.keyword=function(e){const t=r[e];if(t)return t;let n,o=1/0;for(const t of Object.keys(i)){const r=(a=i[t],((s=e)[0]-a[0])**2+(s[1]-a[1])**2+(s[2]-a[2])**2);r<o&&(o=r,n=t)}var s,a;return n},o.keyword.rgb=function(e){return i[e]},o.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,i=e[2]/255;return t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,i=i>.04045?((i+.055)/1.055)**2.4:i/12.92,[100*(.4124*t+.3576*n+.1805*i),100*(.2126*t+.7152*n+.0722*i),100*(.0193*t+.1192*n+.9505*i)]},o.rgb.lab=function(e){const t=o.rgb.xyz(e);let n=t[0],i=t[1],r=t[2];return n/=95.047,i/=100,r/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,i=i>.008856?i**(1/3):7.787*i+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,[116*i-16,500*(n-i),200*(i-r)]},o.hsl.rgb=function(e){const t=e[0]/360,n=e[1]/100,i=e[2]/100;let r,o,s;if(0===n)return s=255*i,[s,s,s];r=i<.5?i*(1+n):i+n-i*n;const a=2*i-r,c=[0,0,0];for(let e=0;e<3;e++)o=t+1/3*-(e-1),o<0&&o++,o>1&&o--,s=6*o<1?a+6*(r-a)*o:2*o<1?r:3*o<2?a+(r-a)*(2/3-o)*6:a,c[e]=255*s;return c},o.hsl.hsv=function(e){const t=e[0];let n=e[1]/100,i=e[2]/100,r=n;const o=Math.max(i,.01);return i*=2,n*=i<=1?i:2-i,r*=o<=1?o:2-o,[t,100*(0===i?2*r/(o+r):2*n/(i+n)),(i+n)/2*100]},o.hsv.rgb=function(e){const t=e[0]/60,n=e[1]/100;let i=e[2]/100;const r=Math.floor(t)%6,o=t-Math.floor(t),s=255*i*(1-n),a=255*i*(1-n*o),c=255*i*(1-n*(1-o));switch(i*=255,r){case 0:return[i,c,s];case 1:return[a,i,s];case 2:return[s,i,c];case 3:return[s,a,i];case 4:return[c,s,i];case 5:return[i,s,a]}},o.hsv.hsl=function(e){const t=e[0],n=e[1]/100,i=e[2]/100,r=Math.max(i,.01);let o,s;s=(2-n)*i;const a=(2-n)*r;return o=n*r,o/=a<=1?a:2-a,o=o||0,s/=2,[t,100*o,100*s]},o.hwb.rgb=function(e){const t=e[0]/360;let n=e[1]/100,i=e[2]/100;const r=n+i;let o;r>1&&(n/=r,i/=r);const s=Math.floor(6*t),a=1-i;o=6*t-s,0!=(1&s)&&(o=1-o);const c=n+o*(a-n);let l,u,p;switch(s){default:case 6:case 0:l=a,u=c,p=n;break;case 1:l=c,u=a,p=n;break;case 2:l=n,u=a,p=c;break;case 3:l=n,u=c,p=a;break;case 4:l=c,u=n,p=a;break;case 5:l=a,u=n,p=c}return[255*l,255*u,255*p]},o.cmyk.rgb=function(e){const t=e[0]/100,n=e[1]/100,i=e[2]/100,r=e[3]/100;return[255*(1-Math.min(1,t*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(e){const t=e[0]/100,n=e[1]/100,i=e[2]/100;let r,o,s;return r=3.2406*t+-1.5372*n+-.4986*i,o=-.9689*t+1.8758*n+.0415*i,s=.0557*t+-.204*n+1.057*i,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,r=Math.min(Math.max(0,r),1),o=Math.min(Math.max(0,o),1),s=Math.min(Math.max(0,s),1),[255*r,255*o,255*s]},o.xyz.lab=function(e){let t=e[0],n=e[1],i=e[2];return t/=95.047,n/=100,i/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,i=i>.008856?i**(1/3):7.787*i+16/116,[116*n-16,500*(t-n),200*(n-i)]},o.lab.xyz=function(e){let t,n,i;n=(e[0]+16)/116,t=e[1]/500+n,i=n-e[2]/200;const r=n**3,o=t**3,s=i**3;return n=r>.008856?r:(n-16/116)/7.787,t=o>.008856?o:(t-16/116)/7.787,i=s>.008856?s:(i-16/116)/7.787,t*=95.047,n*=100,i*=108.883,[t,n,i]},o.lab.lch=function(e){const t=e[0],n=e[1],i=e[2];let r;return r=360*Math.atan2(i,n)/2/Math.PI,r<0&&(r+=360),[t,Math.sqrt(n*n+i*i),r]},o.lch.lab=function(e){const t=e[0],n=e[1],i=e[2]/360*2*Math.PI;return[t,n*Math.cos(i),n*Math.sin(i)]},o.rgb.ansi16=function(e,t=null){const[n,i,r]=e;let s=null===t?o.rgb.hsv(e)[2]:t;if(s=Math.round(s/50),0===s)return 30;let a=30+(Math.round(r/255)<<2|Math.round(i/255)<<1|Math.round(n/255));return 2===s&&(a+=60),a},o.hsv.ansi16=function(e){return o.rgb.ansi16(o.hsv.rgb(e),e[2])},o.rgb.ansi256=function(e){const t=e[0],n=e[1],i=e[2];return t===n&&n===i?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(e){let t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},o.ansi256.rgb=function(e){if(e>=232){const t=10*(e-232)+8;return[t,t,t]}let t;return e-=16,[Math.floor(e/36)/5*255,Math.floor((t=e%36)/6)/5*255,t%6/5*255]},o.rgb.hex=function(e){const t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},o.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];3===t[0].length&&(n=n.split("").map((e=>e+e)).join(""));const i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.max(Math.max(t,n),i),o=Math.min(Math.min(t,n),i),s=r-o;let a,c;return a=s<1?o/(1-s):0,c=s<=0?0:r===t?(n-i)/s%6:r===n?2+(i-t)/s:4+(t-n)/s,c/=6,c%=1,[360*c,100*s,100*a]},o.hsl.hcg=function(e){const t=e[1]/100,n=e[2]/100,i=n<.5?2*t*n:2*t*(1-n);let r=0;return i<1&&(r=(n-.5*i)/(1-i)),[e[0],100*i,100*r]},o.hsv.hcg=function(e){const t=e[1]/100,n=e[2]/100,i=t*n;let r=0;return i<1&&(r=(n-i)/(1-i)),[e[0],100*i,100*r]},o.hcg.rgb=function(e){const t=e[0]/360,n=e[1]/100,i=e[2]/100;if(0===n)return[255*i,255*i,255*i];const r=[0,0,0],o=t%1*6,s=o%1,a=1-s;let c=0;switch(Math.floor(o)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=a,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=a,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=a}return c=(1-n)*i,[255*(n*r[0]+c),255*(n*r[1]+c),255*(n*r[2]+c)]},o.hcg.hsv=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);let i=0;return n>0&&(i=t/n),[e[0],100*i,100*n]},o.hcg.hsl=function(e){const t=e[1]/100,n=e[2]/100*(1-t)+.5*t;let i=0;return n>0&&n<.5?i=t/(2*n):n>=.5&&n<1&&(i=t/(2*(1-n))),[e[0],100*i,100*n]},o.hcg.hwb=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},o.hwb.hcg=function(e){const t=e[1]/100,n=1-e[2]/100,i=n-t;let r=0;return i<1&&(r=(n-i)/(1-i)),[e[0],100*i,100*r]},o.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},o.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},o.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},o.gray.hsl=function(e){return[0,0,e[0]]},o.gray.hsv=o.gray.hsl,o.gray.hwb=function(e){return[0,100,e[0]]},o.gray.cmyk=function(e){return[0,0,0,e[0]]},o.gray.lab=function(e){return[e[0],0,0]},o.gray.hex=function(e){const t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},2085:(e,t,n)=>{const i=n(8168),r=n(4111),o={};Object.keys(i).forEach((e=>{o[e]={},Object.defineProperty(o[e],"channels",{value:i[e].channels}),Object.defineProperty(o[e],"labels",{value:i[e].labels});const t=r(e);Object.keys(t).forEach((n=>{const i=t[n];o[e][n]=function(e){const t=function(...t){const n=t[0];if(null==n)return n;n.length>1&&(t=n);const i=e(t);if("object"==typeof i)for(let e=i.length,t=0;t<e;t++)i[t]=Math.round(i[t]);return i};return"conversion"in e&&(t.conversion=e.conversion),t}(i),o[e][n].raw=function(e){const t=function(...t){const n=t[0];return null==n?n:(n.length>1&&(t=n),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(i)}))})),e.exports=o},4111:(e,t,n)=>{const i=n(8168);function r(e,t){return function(n){return t(e(n))}}function o(e,t){const n=[t[e].parent,e];let o=i[t[e].parent][e],s=t[e].parent;for(;t[s].parent;)n.unshift(t[s].parent),o=r(i[t[s].parent][s],o),s=t[s].parent;return o.conversion=n,o}e.exports=function(e){const t=function(e){const t=function(){const e={},t=Object.keys(i);for(let n=t.length,i=0;i<n;i++)e[t[i]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;){const e=n.pop(),r=Object.keys(i[e]);for(let i=r.length,o=0;o<i;o++){const i=r[o],s=t[i];-1===s.distance&&(s.distance=t[e].distance+1,s.parent=e,n.unshift(i))}}return t}(e),n={},r=Object.keys(t);for(let e=r.length,i=0;i<e;i++){const e=r[i];null!==t[e].parent&&(n[e]=o(e,t))}return n}},8874:e=>{"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},5108:(e,t,n)=>{var i=n(9539),r=n(9282);function o(){return(new Date).getTime()}var s,a=Array.prototype.slice,c={};s=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var l=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(e){c[e]=o()},"time"],[function(e){var t=c[e];if(!t)throw new Error("No such label: "+e);delete c[e];var n=o()-t;s.log(e+": "+n+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=i.format.apply(null,arguments),s.error(e.stack)},"trace"],[function(e){s.log(i.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=a.call(arguments,1);r.ok(!1,i.format.apply(null,t))}},"assert"]],u=0;u<l.length;u++){var p=l[u],d=p[0],f=p[1];s[f]||(s[f]=d)}e.exports=s},4289:(e,t,n)=>{"use strict";var i=n(2215),r="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,s=Array.prototype.concat,a=Object.defineProperty,c=n(1044)(),l=a&&c,u=function(e,t,n,i){var r;(!(t in e)||"function"==typeof(r=i)&&"[object Function]"===o.call(r)&&i())&&(l?a(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},p=function(e,t){var n=arguments.length>2?arguments[2]:{},o=i(t);r&&(o=s.call(o,Object.getOwnPropertySymbols(t)));for(var a=0;a<o.length;a+=1)u(e,o[a],t[o[a]],n[o[a]])};p.supportsDescriptors=!!l,e.exports=p},8091:e=>{"use strict";function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),i=1;i<arguments.length;i++){var r=arguments[i];if(null!=r)for(var o=Object.keys(Object(r)),s=0,a=o.length;s<a;s++){var c=o[s],l=Object.getOwnPropertyDescriptor(r,c);void 0!==l&&l.enumerable&&(n[c]=r[c])}}return n}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},4029:(e,t,n)=>{"use strict";var i=n(5320),r=Object.prototype.toString,o=Object.prototype.hasOwnProperty,s=function(e,t,n){for(var i=0,r=e.length;i<r;i++)o.call(e,i)&&(null==n?t(e[i],i,e):t.call(n,e[i],i,e))},a=function(e,t,n){for(var i=0,r=e.length;i<r;i++)null==n?t(e.charAt(i),i,e):t.call(n,e.charAt(i),i,e)},c=function(e,t,n){for(var i in e)o.call(e,i)&&(null==n?t(e[i],i,e):t.call(n,e[i],i,e))};e.exports=function(e,t,n){if(!i(t))throw new TypeError("iterator must be a function");var o;arguments.length>=3&&(o=n),"[object Array]"===r.call(e)?s(e,t,o):"string"==typeof e?a(e,t,o):c(e,t,o)}},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,i=Object.prototype.toString,r="[object Function]";e.exports=function(e){var o=this;if("function"!=typeof o||i.call(o)!==r)throw new TypeError(t+o);for(var s,a=n.call(arguments,1),c=function(){if(this instanceof s){var t=o.apply(this,a.concat(n.call(arguments)));return Object(t)===t?t:this}return o.apply(e,a.concat(n.call(arguments)))},l=Math.max(0,o.length-a.length),u=[],p=0;p<l;p++)u.push("$"+p);if(s=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(c),o.prototype){var d=function(){};d.prototype=o.prototype,s.prototype=new d,d.prototype=null}return s}},8612:(e,t,n)=>{"use strict";var i=n(7648);e.exports=Function.prototype.bind||i},210:(e,t,n)=>{"use strict";var i,r=SyntaxError,o=Function,s=TypeError,a=function(e){try{return o('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var l=function(){throw new s},u=c?function(){try{return l}catch(e){try{return c(arguments,"callee").get}catch(e){return l}}}():l,p=n(1405)(),d=Object.getPrototypeOf||function(e){return e.__proto__},f={},h="undefined"==typeof Uint8Array?i:d(Uint8Array),m={"%AggregateError%":"undefined"==typeof AggregateError?i:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?i:ArrayBuffer,"%ArrayIteratorPrototype%":p?d([][Symbol.iterator]()):i,"%AsyncFromSyncIteratorPrototype%":i,"%AsyncFunction%":f,"%AsyncGenerator%":f,"%AsyncGeneratorFunction%":f,"%AsyncIteratorPrototype%":f,"%Atomics%":"undefined"==typeof Atomics?i:Atomics,"%BigInt%":"undefined"==typeof BigInt?i:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?i:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?i:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?i:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?i:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":f,"%Int8Array%":"undefined"==typeof Int8Array?i:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?i:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?i:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":p?d(d([][Symbol.iterator]())):i,"%JSON%":"object"==typeof JSON?JSON:i,"%Map%":"undefined"==typeof Map?i:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&p?d((new Map)[Symbol.iterator]()):i,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?i:Promise,"%Proxy%":"undefined"==typeof Proxy?i:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?i:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?i:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&p?d((new Set)[Symbol.iterator]()):i,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?i:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":p?d(""[Symbol.iterator]()):i,"%Symbol%":p?Symbol:i,"%SyntaxError%":r,"%ThrowTypeError%":u,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?i:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?i:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?i:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?i:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?i:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?i:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?i:WeakSet},y=function e(t){var n;if("%AsyncFunction%"===t)n=a("async function () {}");else if("%GeneratorFunction%"===t)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=a("async function* () {}");else if("%AsyncGenerator%"===t){var i=e("%AsyncGeneratorFunction%");i&&(n=i.prototype)}else if("%AsyncIteratorPrototype%"===t){var r=e("%AsyncGenerator%");r&&(n=d(r.prototype))}return m[t]=n,n},v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},E=n(8612),T=n(7642),g=E.call(Function.call,Array.prototype.concat),I=E.call(Function.apply,Array.prototype.splice),N=E.call(Function.call,String.prototype.replace),b=E.call(Function.call,String.prototype.slice),_=E.call(Function.call,RegExp.prototype.exec),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,O=/\\(\\)?/g,D=function(e){var t=b(e,0,1),n=b(e,-1);if("%"===t&&"%"!==n)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new r("invalid intrinsic syntax, expected opening `%`");var i=[];return N(e,S,(function(e,t,n,r){i[i.length]=n?N(r,O,"$1"):t||e})),i},A=function(e,t){var n,i=e;if(T(v,i)&&(i="%"+(n=v[i])[0]+"%"),T(m,i)){var o=m[i];if(o===f&&(o=y(i)),void 0===o&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:i,value:o}}throw new r("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');if(null===_(/^%?[^%]*%?$/,e))throw new r("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=D(e),i=n.length>0?n[0]:"",o=A("%"+i+"%",t),a=o.name,l=o.value,u=!1,p=o.alias;p&&(i=p[0],I(n,g([0,1],p)));for(var d=1,f=!0;d<n.length;d+=1){var h=n[d],y=b(h,0,1),v=b(h,-1);if(('"'===y||"'"===y||"`"===y||'"'===v||"'"===v||"`"===v)&&y!==v)throw new r("property names with quotes must have matching quotes");if("constructor"!==h&&f||(u=!0),T(m,a="%"+(i+="."+h)+"%"))l=m[a];else if(null!=l){if(!(h in l)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&d+1>=n.length){var E=c(l,h);l=(f=!!E)&&"get"in E&&!("originalValue"in E.get)?E.get:l[h]}else f=T(l,h),l=l[h];f&&!u&&(m[a]=l)}}return l}},7296:(e,t,n)=>{"use strict";var i=n(210)("%Object.getOwnPropertyDescriptor%",!0);if(i)try{i([],"length")}catch(e){i=null}e.exports=i},5822:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLError=void 0,t.formatError=function(e){return e.toJSON()},t.printError=function(e){return e.toString()};var i=n(5690),r=n(9016),o=n(8038);class s extends Error{constructor(e,...t){var n,o,c;const{nodes:l,source:u,positions:p,path:d,originalError:f,extensions:h}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=d?d:void 0,this.originalError=null!=f?f:void 0,this.nodes=a(Array.isArray(l)?l:l?[l]:void 0);const m=a(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=u?u:null==m||null===(o=m[0])||void 0===o?void 0:o.source,this.positions=null!=p?p:null==m?void 0:m.map((e=>e.start)),this.locations=p&&u?p.map((e=>(0,r.getLocation)(u,e))):null==m?void 0:m.map((e=>(0,r.getLocation)(e.source,e.start)));const y=(0,i.isObjectLike)(null==f?void 0:f.extensions)?null==f?void 0:f.extensions:void 0;this.extensions=null!==(c=null!=h?h:y)&&void 0!==c?c:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=f&&f.stack?Object.defineProperty(this,"stack",{value:f.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,s):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const t of this.nodes)t.loc&&(e+="\n\n"+(0,o.printLocation)(t.loc));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+(0,o.printSourceLocation)(this.source,t);return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function a(e){return void 0===e||0===e.length?void 0:e}t.GraphQLError=s},8950:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.collectFields=function(e,t,n,i,r){const o=new Map;return c(e,t,n,i,r,o,new Set),o},t.collectSubfields=function(e,t,n,i,r){const o=new Map,s=new Set;for(const a of r)a.selectionSet&&c(e,t,n,i,a.selectionSet,o,s);return o};var i=n(2828),r=n(5003),o=n(7197),s=n(5115),a=n(8840);function c(e,t,n,r,o,s,a){for(const d of o.selections)switch(d.kind){case i.Kind.FIELD:{if(!l(n,d))continue;const e=(p=d).alias?p.alias.value:p.name.value,t=s.get(e);void 0!==t?t.push(d):s.set(e,[d]);break}case i.Kind.INLINE_FRAGMENT:if(!l(n,d)||!u(e,d,r))continue;c(e,t,n,r,d.selectionSet,s,a);break;case i.Kind.FRAGMENT_SPREAD:{const i=d.name.value;if(a.has(i)||!l(n,d))continue;a.add(i);const o=t[i];if(!o||!u(e,o,r))continue;c(e,t,n,r,o.selectionSet,s,a);break}}var p}function l(e,t){const n=(0,a.getDirectiveValues)(o.GraphQLSkipDirective,t,e);if(!0===(null==n?void 0:n.if))return!1;const i=(0,a.getDirectiveValues)(o.GraphQLIncludeDirective,t,e);return!1!==(null==i?void 0:i.if)}function u(e,t,n){const i=t.typeCondition;if(!i)return!0;const o=(0,s.typeFromAST)(e,i);return o===n||!!(0,r.isAbstractType)(o)&&e.isSubType(o,n)}},8840:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getArgumentValues=f,t.getDirectiveValues=function(e,t,n){var i;const r=null===(i=t.directives)||void 0===i?void 0:i.find((t=>t.name.value===e.name));if(r)return f(e,r,n)},t.getVariableValues=function(e,t,n,r){const a=[],f=null==r?void 0:r.maxErrors;try{const r=function(e,t,n,r){const a={};for(const f of t){const t=f.variable.name.value,m=(0,p.typeFromAST)(e,f.type);if(!(0,l.isInputType)(m)){const e=(0,c.print)(f.type);r(new s.GraphQLError(`Variable "$${t}" expected value of type "${e}" which cannot be used as an input type.`,{nodes:f.type}));continue}if(!h(n,t)){if(f.defaultValue)a[t]=(0,d.valueFromAST)(f.defaultValue,m);else if((0,l.isNonNullType)(m)){const e=(0,i.inspect)(m);r(new s.GraphQLError(`Variable "$${t}" of required type "${e}" was not provided.`,{nodes:f}))}continue}const y=n[t];if(null===y&&(0,l.isNonNullType)(m)){const e=(0,i.inspect)(m);r(new s.GraphQLError(`Variable "$${t}" of non-null type "${e}" must not be null.`,{nodes:f}))}else a[t]=(0,u.coerceInputValue)(y,m,((e,n,a)=>{let c=`Variable "$${t}" got invalid value `+(0,i.inspect)(n);e.length>0&&(c+=` at "${t}${(0,o.printPathArray)(e)}"`),r(new s.GraphQLError(c+"; "+a.message,{nodes:f,originalError:a.originalError}))}))}return a}(e,t,n,(e=>{if(null!=f&&a.length>=f)throw new s.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");a.push(e)}));if(0===a.length)return{coerced:r}}catch(e){a.push(e)}return{errors:a}};var i=n(8002),r=n(2863),o=n(737),s=n(5822),a=n(2828),c=n(3033),l=n(5003),u=n(3679),p=n(5115),d=n(3770);function f(e,t,n){var o;const u={},p=null!==(o=t.arguments)&&void 0!==o?o:[],f=(0,r.keyMap)(p,(e=>e.name.value));for(const r of e.args){const e=r.name,o=r.type,p=f[e];if(!p){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of required type "${(0,i.inspect)(o)}" was not provided.`,{nodes:t});continue}const m=p.value;let y=m.kind===a.Kind.NULL;if(m.kind===a.Kind.VARIABLE){const t=m.name.value;if(null==n||!h(n,t)){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of required type "${(0,i.inspect)(o)}" was provided the variable "$${t}" which was not provided a runtime value.`,{nodes:m});continue}y=null==n[t]}if(y&&(0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of non-null type "${(0,i.inspect)(o)}" must not be null.`,{nodes:m});const v=(0,d.valueFromAST)(m,o,n);if(void 0===v)throw new s.GraphQLError(`Argument "${e}" has invalid value ${(0,c.print)(m)}.`,{nodes:m});u[e]=v}return u}function h(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},7059:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addPath=function(e,t,n){return{prev:e,key:t,typename:n}},t.pathToArray=function(e){const t=[];let n=e;for(;n;)t.push(n.key),n=n.prev;return t.reverse()}},7242:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.devAssert=function(e,t){if(!Boolean(e))throw new Error(t)}},100:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.didYouMean=function(e,t){const[n,i]=t?[e,t]:[void 0,e];let r=" Did you mean ";n&&(r+=n+" ");const o=i.map((e=>`"${e}"`));switch(o.length){case 0:return"";case 1:return r+o[0]+"?";case 2:return r+o[0]+" or "+o[1]+"?"}const s=o.slice(0,5),a=s.pop();return r+s.join(", ")+", or "+a+"?"}},4620:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=function(e,t){const n=new Map;for(const i of e){const e=t(i),r=n.get(e);void 0===r?n.set(e,[i]):r.push(i)}return n}},3317:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.identityFunc=function(e){return e}},8002:(e,t)=>{"use strict";function n(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const i=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:n(t,i)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const i=Math.min(10,e.length),r=e.length-i,o=[];for(let r=0;r<i;++r)o.push(n(e[r],t));return 1===r?o.push("... 1 more item"):r>1&&o.push(`... ${r} more items`),"["+o.join(", ")+"]"}(e,i);return function(e,t){const i=Object.entries(e);if(0===i.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const r=i.map((([e,i])=>e+": "+n(i,t)));return"{ "+r.join(", ")+" }"}(e,i)}(e,t);default:return String(e)}}Object.defineProperty(t,"__esModule",{value:!0}),t.inspect=function(e){return n(e,[])}},5752:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.instanceOf=void 0,n(8002);t.instanceOf=function(e,t){return e instanceof t}},7706:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invariant=function(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}},6609:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIterableObject=function(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}},5690:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isObjectLike=function(e){return"object"==typeof e&&null!==e}},2863:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.keyMap=function(e,t){const n=Object.create(null);for(const i of e)n[t(i)]=i;return n}},7154:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.keyValMap=function(e,t,n){const i=Object.create(null);for(const r of e)i[t(r)]=n(r);return i}},6124:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mapValue=function(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}},5250:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.naturalCompare=function(e,t){let r=0,o=0;for(;r<e.length&&o<t.length;){let s=e.charCodeAt(r),a=t.charCodeAt(o);if(i(s)&&i(a)){let c=0;do{++r,c=10*c+s-n,s=e.charCodeAt(r)}while(i(s)&&c>0);let l=0;do{++o,l=10*l+a-n,a=t.charCodeAt(o)}while(i(a)&&l>0);if(c<l)return-1;if(c>l)return 1}else{if(s<a)return-1;if(s>a)return 1;++r,++o}}return e.length-t.length};const n=48;function i(e){return!isNaN(e)&&n<=e&&e<=57}},737:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printPathArray=function(e){return e.map((e=>"number"==typeof e?"["+e.toString()+"]":"."+e)).join("")}},8070:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.suggestionList=function(e,t){const n=Object.create(null),o=new r(e),s=Math.floor(.4*e.length)+1;for(const e of t){const t=o.measure(e,s);void 0!==t&&(n[e]=t)}return Object.keys(n).sort(((e,t)=>{const r=n[e]-n[t];return 0!==r?r:(0,i.naturalCompare)(e,t)}))};var i=n(5250);class r{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=o(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;const n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=o(n),r=this._inputArray;if(i.length<r.length){const e=i;i=r,r=e}const s=i.length,a=r.length;if(s-a>t)return;const c=this._rows;for(let e=0;e<=a;e++)c[0][e]=e;for(let e=1;e<=s;e++){const n=c[(e-1)%3],o=c[e%3];let s=o[0]=e;for(let t=1;t<=a;t++){const a=i[e-1]===r[t-1]?0:1;let l=Math.min(n[t]+1,o[t-1]+1,n[t-1]+a);if(e>1&&t>1&&i[e-1]===r[t-2]&&i[e-2]===r[t-1]){const n=c[(e-2)%3][t-2];l=Math.min(l,n+1)}l<s&&(s=l),o[t]=l}if(s>t)return}const l=c[s%3][a];return l<=t?l:void 0}}function o(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}},7690:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toObjMap=function(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}},1807:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Token=t.QueryDocumentKeys=t.OperationTypeNode=t.Location=void 0,t.isNode=function(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&o.has(t)};class n{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}t.Location=n;class i{constructor(e,t,n,i,r,o){this.kind=e,this.start=t,this.end=n,this.line=i,this.column=r,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}t.Token=i;const r={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};t.QueryDocumentKeys=r;const o=new Set(Object.keys(r));var s;t.OperationTypeNode=s,function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(s||(t.OperationTypeNode=s={}))},849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dedentBlockStringLines=function(e){var t;let n=Number.MAX_SAFE_INTEGER,i=null,o=-1;for(let t=0;t<e.length;++t){var s;const a=e[t],c=r(a);c!==a.length&&(i=null!==(s=i)&&void 0!==s?s:t,o=t,0!==t&&c<n&&(n=c))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=i)&&void 0!==t?t:0,o+1)},t.isPrintableAsBlockString=function(e){if(""===e)return!0;let t=!0,n=!1,i=!0,r=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 13:return!1;case 10:if(t&&!r)return!1;r=!0,t=!0,n=!1;break;case 9:case 32:n||(n=t);break;default:i&&(i=n),t=!1}return!t&&(!i||!r)},t.printBlockString=function(e,t){const n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),o=1===r.length,s=r.length>1&&r.slice(1).every((e=>0===e.length||(0,i.isWhiteSpace)(e.charCodeAt(0)))),a=n.endsWith('\\"""'),c=e.endsWith('"')&&!a,l=e.endsWith("\\"),u=c||l,p=!(null!=t&&t.minimize)&&(!o||e.length>70||u||s||a);let d="";const f=o&&(0,i.isWhiteSpace)(e.charCodeAt(0));return(p&&!f||s)&&(d+="\n"),d+=n,(p||u)&&(d+="\n"),'"""'+d+'"""'};var i=n(2591);function r(e){let t=0;for(;t<e.length&&(0,i.isWhiteSpace)(e.charCodeAt(t));)++t;return t}},2591:(e,t)=>{"use strict";function n(e){return e>=48&&e<=57}function i(e){return e>=97&&e<=122||e>=65&&e<=90}Object.defineProperty(t,"__esModule",{value:!0}),t.isDigit=n,t.isLetter=i,t.isNameContinue=function(e){return i(e)||n(e)||95===e},t.isNameStart=function(e){return i(e)||95===e},t.isWhiteSpace=function(e){return 9===e||32===e}},8333:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.DirectiveLocation=void 0,t.DirectiveLocation=n,function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(n||(t.DirectiveLocation=n={}))},2828:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Kind=void 0,t.Kind=n,function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(n||(t.Kind=n={}))},9016:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLocation=function(e,t){let n=0,o=1;for(const s of e.body.matchAll(r)){if("number"==typeof s.index||(0,i.invariant)(!1),s.index>=t)break;n=s.index+s[0].length,o+=1}return{line:o,column:t+1-n}};var i=n(7706);const r=/\r\n|[\n\r]/g},1352:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isConstValueNode=function e(t){return o(t)&&(t.kind===i.Kind.LIST?t.values.some(e):t.kind===i.Kind.OBJECT?t.fields.some((t=>e(t.value))):t.kind!==i.Kind.VARIABLE)},t.isDefinitionNode=function(e){return r(e)||s(e)||c(e)},t.isExecutableDefinitionNode=r,t.isSelectionNode=function(e){return e.kind===i.Kind.FIELD||e.kind===i.Kind.FRAGMENT_SPREAD||e.kind===i.Kind.INLINE_FRAGMENT},t.isTypeDefinitionNode=a,t.isTypeExtensionNode=l,t.isTypeNode=function(e){return e.kind===i.Kind.NAMED_TYPE||e.kind===i.Kind.LIST_TYPE||e.kind===i.Kind.NON_NULL_TYPE},t.isTypeSystemDefinitionNode=s,t.isTypeSystemExtensionNode=c,t.isValueNode=o;var i=n(2828);function r(e){return e.kind===i.Kind.OPERATION_DEFINITION||e.kind===i.Kind.FRAGMENT_DEFINITION}function o(e){return e.kind===i.Kind.VARIABLE||e.kind===i.Kind.INT||e.kind===i.Kind.FLOAT||e.kind===i.Kind.STRING||e.kind===i.Kind.BOOLEAN||e.kind===i.Kind.NULL||e.kind===i.Kind.ENUM||e.kind===i.Kind.LIST||e.kind===i.Kind.OBJECT}function s(e){return e.kind===i.Kind.SCHEMA_DEFINITION||a(e)||e.kind===i.Kind.DIRECTIVE_DEFINITION}function a(e){return e.kind===i.Kind.SCALAR_TYPE_DEFINITION||e.kind===i.Kind.OBJECT_TYPE_DEFINITION||e.kind===i.Kind.INTERFACE_TYPE_DEFINITION||e.kind===i.Kind.UNION_TYPE_DEFINITION||e.kind===i.Kind.ENUM_TYPE_DEFINITION||e.kind===i.Kind.INPUT_OBJECT_TYPE_DEFINITION}function c(e){return e.kind===i.Kind.SCHEMA_EXTENSION||l(e)}function l(e){return e.kind===i.Kind.SCALAR_TYPE_EXTENSION||e.kind===i.Kind.OBJECT_TYPE_EXTENSION||e.kind===i.Kind.INTERFACE_TYPE_EXTENSION||e.kind===i.Kind.UNION_TYPE_EXTENSION||e.kind===i.Kind.ENUM_TYPE_EXTENSION||e.kind===i.Kind.INPUT_OBJECT_TYPE_EXTENSION}},8038:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printLocation=function(e){return r(e.source,(0,i.getLocation)(e.source,e.start))},t.printSourceLocation=r;var i=n(9016);function r(e,t){const n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,s=e.locationOffset.line-1,a=t.line+s,c=1===t.line?n:0,l=t.column+c,u=`${e.name}:${a}:${l}\n`,p=i.split(/\r\n|[\n\r]/g),d=p[r];if(d.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<d.length;e+=80)n.push(d.slice(e,e+80));return u+o([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+o([[a-1+" |",p[r-1]],[`${a} |`,d],["|","^".padStart(l)],[`${a+1} |`,p[r+1]]])}function o(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}},8942:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printString=function(e){return`"${e.replace(n,i)}"`};const n=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function i(e){return r[e.charCodeAt(0)]}const r=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"]},3033:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.print=function(e){return(0,o.visit)(e,s)};var i=n(849),r=n(8942),o=n(285);const s={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>a(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=l("(",a(e.variableDefinitions,", "),")"),n=a([e.operation,a([e.name,t]),a(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+l(" = ",n)+l(" ",a(i," "))},SelectionSet:{leave:({selections:e})=>c(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){const o=l("",e,": ")+t;let s=o+l("(",a(n,", "),")");return s.length>80&&(s=o+l("(\n",u(a(n,"\n")),"\n)")),a([s,a(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+l(" ",a(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>a(["...",l("on ",e),a(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${l("(",a(n,", "),")")} on ${t} ${l("",a(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?(0,i.printBlockString)(e):(0,r.printString)(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+a(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+a(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+l("(",a(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>l("",e,"\n")+a(["schema",a(t," "),c(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>l("",e,"\n")+a(["scalar",t,a(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>l("",e,"\n")+a(["type",t,l("implements ",a(n," & ")),a(i," "),c(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>l("",e,"\n")+t+(p(n)?l("(\n",u(a(n,"\n")),"\n)"):l("(",a(n,", "),")"))+": "+i+l(" ",a(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>l("",e,"\n")+a([t+": "+n,l("= ",i),a(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>l("",e,"\n")+a(["interface",t,l("implements ",a(n," & ")),a(i," "),c(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>l("",e,"\n")+a(["union",t,a(n," "),l("= ",a(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>l("",e,"\n")+a(["enum",t,a(n," "),c(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>l("",e,"\n")+a([t,a(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>l("",e,"\n")+a(["input",t,a(n," "),c(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>l("",e,"\n")+"directive @"+t+(p(n)?l("(\n",u(a(n,"\n")),"\n)"):l("(",a(n,", "),")"))+(i?" repeatable":"")+" on "+a(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>a(["extend schema",a(e," "),c(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>a(["extend scalar",e,a(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>a(["extend type",e,l("implements ",a(t," & ")),a(n," "),c(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>a(["extend interface",e,l("implements ",a(t," & ")),a(n," "),c(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>a(["extend union",e,a(t," "),l("= ",a(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>a(["extend enum",e,a(t," "),c(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>a(["extend input",e,a(t," "),c(n)]," ")}};function a(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function c(e){return l("{\n",u(a(e,"\n")),"\n}")}function l(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function u(e){return l("  ",e.replace(/\n/g,"\n  "))}function p(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}},285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BREAK=void 0,t.getEnterLeaveForKind=c,t.getVisitFn=function(e,t,n){const{enter:i,leave:r}=c(e,t);return n?r:i},t.visit=function(e,t,n=o.QueryDocumentKeys){const l=new Map;for(const e of Object.values(s.Kind))l.set(e,c(t,e));let u,p,d,f=Array.isArray(e),h=[e],m=-1,y=[],v=e;const E=[],T=[];do{m++;const e=m===h.length,s=e&&0!==y.length;if(e){if(p=0===T.length?void 0:E[E.length-1],v=d,d=T.pop(),s)if(f){v=v.slice();let e=0;for(const[t,n]of y){const i=t-e;null===n?(v.splice(i,1),e++):v[i]=n}}else{v=Object.defineProperties({},Object.getOwnPropertyDescriptors(v));for(const[e,t]of y)v[e]=t}m=u.index,h=u.keys,y=u.edits,f=u.inArray,u=u.prev}else if(d){if(p=f?m:h[m],v=d[p],null==v)continue;E.push(p)}let c;if(!Array.isArray(v)){var g,I;(0,o.isNode)(v)||(0,i.devAssert)(!1,`Invalid AST Node: ${(0,r.inspect)(v)}.`);const n=e?null===(g=l.get(v.kind))||void 0===g?void 0:g.leave:null===(I=l.get(v.kind))||void 0===I?void 0:I.enter;if(c=null==n?void 0:n.call(t,v,p,d,E,T),c===a)break;if(!1===c){if(!e){E.pop();continue}}else if(void 0!==c&&(y.push([p,c]),!e)){if(!(0,o.isNode)(c)){E.pop();continue}v=c}}var N;void 0===c&&s&&y.push([p,v]),e?E.pop():(u={inArray:f,index:m,keys:h,edits:y,prev:u},f=Array.isArray(v),h=f?v:null!==(N=n[v.kind])&&void 0!==N?N:[],m=-1,y=[],d&&T.push(d),d=v)}while(void 0!==u);return 0!==y.length?y[y.length-1][1]:e},t.visitInParallel=function(e){const t=new Array(e.length).fill(null),n=Object.create(null);for(const i of Object.values(s.Kind)){let r=!1;const o=new Array(e.length).fill(void 0),s=new Array(e.length).fill(void 0);for(let t=0;t<e.length;++t){const{enter:n,leave:a}=c(e[t],i);r||(r=null!=n||null!=a),o[t]=n,s[t]=a}if(!r)continue;const l={enter(...n){const i=n[0];for(let s=0;s<e.length;s++)if(null===t[s]){var r;const c=null===(r=o[s])||void 0===r?void 0:r.apply(e[s],n);if(!1===c)t[s]=i;else if(c===a)t[s]=a;else if(void 0!==c)return c}},leave(...n){const i=n[0];for(let o=0;o<e.length;o++)if(null===t[o]){var r;const i=null===(r=s[o])||void 0===r?void 0:r.apply(e[o],n);if(i===a)t[o]=a;else if(void 0!==i&&!1!==i)return i}else t[o]===i&&(t[o]=null)}};n[i]=l}return n};var i=n(7242),r=n(8002),o=n(1807),s=n(2828);const a=Object.freeze({});function c(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}t.BREAK=a},3058:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertEnumValueName=function(e){if("true"===e||"false"===e||"null"===e)throw new r.GraphQLError(`Enum values cannot be named: ${e}`);return s(e)},t.assertName=s;var i=n(7242),r=n(5822),o=n(2591);function s(e){if(null!=e||(0,i.devAssert)(!1,"Must provide name."),"string"==typeof e||(0,i.devAssert)(!1,"Expected name to be a string."),0===e.length)throw new r.GraphQLError("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!(0,o.isNameContinue)(e.charCodeAt(t)))throw new r.GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!(0,o.isNameStart)(e.charCodeAt(0)))throw new r.GraphQLError(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}},5003:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLUnionType=t.GraphQLScalarType=t.GraphQLObjectType=t.GraphQLNonNull=t.GraphQLList=t.GraphQLInterfaceType=t.GraphQLInputObjectType=t.GraphQLEnumType=void 0,t.argsToArgsConfig=Y,t.assertAbstractType=function(e){if(!F(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL abstract type.`);return e},t.assertCompositeType=function(e){if(!L(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL composite type.`);return e},t.assertEnumType=function(e){if(!_(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Enum type.`);return e},t.assertInputObjectType=function(e){if(!S(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Input Object type.`);return e},t.assertInputType=function(e){if(!A(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL input type.`);return e},t.assertInterfaceType=function(e){if(!N(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Interface type.`);return e},t.assertLeafType=function(e){if(!w(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL leaf type.`);return e},t.assertListType=function(e){if(!O(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL List type.`);return e},t.assertNamedType=function(e){if(!j(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL named type.`);return e},t.assertNonNullType=function(e){if(!D(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Non-Null type.`);return e},t.assertNullableType=function(e){if(!C(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL nullable type.`);return e},t.assertObjectType=function(e){if(!I(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Object type.`);return e},t.assertOutputType=function(e){if(!R(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL output type.`);return e},t.assertScalarType=function(e){if(!g(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Scalar type.`);return e},t.assertType=function(e){if(!T(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL type.`);return e},t.assertUnionType=function(e){if(!b(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Union type.`);return e},t.assertWrappingType=function(e){if(!$(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL wrapping type.`);return e},t.defineArguments=Q,t.getNamedType=function(e){if(e){let t=e;for(;$(t);)t=t.ofType;return t}},t.getNullableType=function(e){if(e)return D(e)?e.ofType:e},t.isAbstractType=F,t.isCompositeType=L,t.isEnumType=_,t.isInputObjectType=S,t.isInputType=A,t.isInterfaceType=N,t.isLeafType=w,t.isListType=O,t.isNamedType=j,t.isNonNullType=D,t.isNullableType=C,t.isObjectType=I,t.isOutputType=R,t.isRequiredArgument=function(e){return D(e.type)&&void 0===e.defaultValue},t.isRequiredInputField=function(e){return D(e.type)&&void 0===e.defaultValue},t.isScalarType=g,t.isType=T,t.isUnionType=b,t.isWrappingType=$,t.resolveObjMapThunk=P,t.resolveReadonlyArrayThunk=M;var i=n(7242),r=n(100),o=n(3317),s=n(8002),a=n(5752),c=n(5690),l=n(2863),u=n(7154),p=n(6124),d=n(8070),f=n(7690),h=n(5822),m=n(2828),y=n(3033),v=n(7784),E=n(3058);function T(e){return g(e)||I(e)||N(e)||b(e)||_(e)||S(e)||O(e)||D(e)}function g(e){return(0,a.instanceOf)(e,U)}function I(e){return(0,a.instanceOf)(e,V)}function N(e){return(0,a.instanceOf)(e,H)}function b(e){return(0,a.instanceOf)(e,X)}function _(e){return(0,a.instanceOf)(e,J)}function S(e){return(0,a.instanceOf)(e,Z)}function O(e){return(0,a.instanceOf)(e,x)}function D(e){return(0,a.instanceOf)(e,k)}function A(e){return g(e)||_(e)||S(e)||$(e)&&A(e.ofType)}function R(e){return g(e)||I(e)||N(e)||b(e)||_(e)||$(e)&&R(e.ofType)}function w(e){return g(e)||_(e)}function L(e){return I(e)||N(e)||b(e)}function F(e){return N(e)||b(e)}class x{constructor(e){T(e)||(0,i.devAssert)(!1,`Expected ${(0,s.inspect)(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}t.GraphQLList=x;class k{constructor(e){C(e)||(0,i.devAssert)(!1,`Expected ${(0,s.inspect)(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function $(e){return O(e)||D(e)}function C(e){return T(e)&&!D(e)}function j(e){return g(e)||I(e)||N(e)||b(e)||_(e)||S(e)}function M(e){return"function"==typeof e?e():e}function P(e){return"function"==typeof e?e():e}t.GraphQLNonNull=k;class U{constructor(e){var t,n,r,a;const c=null!==(t=e.parseValue)&&void 0!==t?t:o.identityFunc;this.name=(0,E.assertName)(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:o.identityFunc,this.parseValue=c,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:(e,t)=>c((0,v.valueFromASTUntyped)(e,t)),this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(a=e.extensionASTNodes)&&void 0!==a?a:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||(0,i.devAssert)(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${(0,s.inspect)(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||(0,i.devAssert)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,i.devAssert)(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}t.GraphQLScalarType=U;class V{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>B(e),this._interfaces=()=>G(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,i.devAssert)(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${(0,s.inspect)(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:q(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function G(e){var t;const n=M(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||(0,i.devAssert)(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function B(e){const t=P(e.fields);return K(t)||(0,i.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.mapValue)(t,((t,n)=>{var r;K(t)||(0,i.devAssert)(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||(0,i.devAssert)(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${(0,s.inspect)(t.resolve)}.`);const o=null!==(r=t.args)&&void 0!==r?r:{};return K(o)||(0,i.devAssert)(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:(0,E.assertName)(n),description:t.description,type:t.type,args:Q(o),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode}}))}function Q(e){return Object.entries(e).map((([e,t])=>({name:(0,E.assertName)(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))}function K(e){return(0,c.isObjectLike)(e)&&!Array.isArray(e)}function q(e){return(0,p.mapValue)(e,(e=>({description:e.description,type:e.type,args:Y(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function Y(e){return(0,u.keyValMap)(e,(e=>e.name),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}t.GraphQLObjectType=V;class H{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=B.bind(void 0,e),this._interfaces=G.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.inspect)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:q(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}t.GraphQLInterfaceType=H;class X{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=z.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.inspect)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function z(e){const t=M(e.types);return Array.isArray(t)||(0,i.devAssert)(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}t.GraphQLUnionType=X;class J{constructor(e){var t,n,r;this.name=(0,E.assertName)(e.name),this.description=e.description,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=(n=this.name,K(r=e.values)||(0,i.devAssert)(!1,`${n} values must be an object with value names as keys.`),Object.entries(r).map((([e,t])=>(K(t)||(0,i.devAssert)(!1,`${n}.${e} must refer to an object with a "value" key representing an internal value but got: ${(0,s.inspect)(t)}.`),{name:(0,E.assertEnumValueName)(e),description:t.description,value:void 0!==t.value?t.value:e,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))),this._valueLookup=new Map(this._values.map((e=>[e.value,e]))),this._nameLookup=(0,l.keyMap)(this._values,(e=>e.name))}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){const t=this._valueLookup.get(e);if(void 0===t)throw new h.GraphQLError(`Enum "${this.name}" cannot represent value: ${(0,s.inspect)(e)}`);return t.name}parseValue(e){if("string"!=typeof e){const t=(0,s.inspect)(e);throw new h.GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${t}.`+W(this,t))}const t=this.getValue(e);if(null==t)throw new h.GraphQLError(`Value "${e}" does not exist in "${this.name}" enum.`+W(this,e));return t.value}parseLiteral(e,t){if(e.kind!==m.Kind.ENUM){const t=(0,y.print)(e);throw new h.GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+W(this,t),{nodes:e})}const n=this.getValue(e.value);if(null==n){const t=(0,y.print)(e);throw new h.GraphQLError(`Value "${t}" does not exist in "${this.name}" enum.`+W(this,t),{nodes:e})}return n.value}toConfig(){const e=(0,u.keyValMap)(this.getValues(),(e=>e.name),(e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function W(e,t){const n=e.getValues().map((e=>e.name)),i=(0,d.suggestionList)(t,n);return(0,r.didYouMean)("the enum value",i)}t.GraphQLEnumType=J;class Z{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ee.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const e=(0,p.mapValue)(this.getFields(),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ee(e){const t=P(e.fields);return K(t)||(0,i.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.mapValue)(t,((t,n)=>(!("resolve"in t)||(0,i.devAssert)(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:(0,E.assertName)(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))}t.GraphQLInputObjectType=Z},7197:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSpecifiedByDirective=t.GraphQLSkipDirective=t.GraphQLIncludeDirective=t.GraphQLDirective=t.GraphQLDeprecatedDirective=t.DEFAULT_DEPRECATION_REASON=void 0,t.assertDirective=function(e){if(!d(e))throw new Error(`Expected ${(0,r.inspect)(e)} to be a GraphQL directive.`);return e},t.isDirective=d,t.isSpecifiedDirective=function(e){return T.some((({name:t})=>t===e.name))},t.specifiedDirectives=void 0;var i=n(7242),r=n(8002),o=n(5752),s=n(5690),a=n(7690),c=n(8333),l=n(3058),u=n(5003),p=n(2229);function d(e){return(0,o.instanceOf)(e,f)}class f{constructor(e){var t,n;this.name=(0,l.assertName)(e.name),this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(t=e.isRepeatable)&&void 0!==t&&t,this.extensions=(0,a.toObjMap)(e.extensions),this.astNode=e.astNode,Array.isArray(e.locations)||(0,i.devAssert)(!1,`@${e.name} locations must be an Array.`);const r=null!==(n=e.args)&&void 0!==n?n:{};(0,s.isObjectLike)(r)&&!Array.isArray(r)||(0,i.devAssert)(!1,`@${e.name} args must be an object with argument names as keys.`),this.args=(0,u.defineArguments)(r)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,u.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}t.GraphQLDirective=f;const h=new f({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[c.DirectiveLocation.FIELD,c.DirectiveLocation.FRAGMENT_SPREAD,c.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new u.GraphQLNonNull(p.GraphQLBoolean),description:"Included when true."}}});t.GraphQLIncludeDirective=h;const m=new f({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[c.DirectiveLocation.FIELD,c.DirectiveLocation.FRAGMENT_SPREAD,c.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new u.GraphQLNonNull(p.GraphQLBoolean),description:"Skipped when true."}}});t.GraphQLSkipDirective=m;const y="No longer supported";t.DEFAULT_DEPRECATION_REASON=y;const v=new f({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[c.DirectiveLocation.FIELD_DEFINITION,c.DirectiveLocation.ARGUMENT_DEFINITION,c.DirectiveLocation.INPUT_FIELD_DEFINITION,c.DirectiveLocation.ENUM_VALUE],args:{reason:{type:p.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:y}}});t.GraphQLDeprecatedDirective=v;const E=new f({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[c.DirectiveLocation.SCALAR],args:{url:{type:new u.GraphQLNonNull(p.GraphQLString),description:"The URL that specifies the behavior of this scalar."}}});t.GraphQLSpecifiedByDirective=E;const T=Object.freeze([h,m,v,E]);t.specifiedDirectives=T},8155:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.introspectionTypes=t.__TypeKind=t.__Type=t.__Schema=t.__InputValue=t.__Field=t.__EnumValue=t.__DirectiveLocation=t.__Directive=t.TypeNameMetaFieldDef=t.TypeMetaFieldDef=t.TypeKind=t.SchemaMetaFieldDef=void 0,t.isIntrospectionType=function(e){return N.some((({name:t})=>e.name===t))};var i=n(8002),r=n(7706),o=n(8333),s=n(3033),a=n(8115),c=n(5003),l=n(2229);const u=new c.GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:l.GraphQLString,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(f))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new c.GraphQLNonNull(f),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:f,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:f,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(p))),resolve:e=>e.getDirectives()}})});t.__Schema=u;const p=new c.GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},isRepeatable:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>e.isRepeatable},locations:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(d))),resolve:e=>e.locations},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))}})});t.__Directive=p;const d=new c.GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:o.DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:o.DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:o.DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:o.DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:o.DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:o.DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:o.DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:o.DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:o.DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:o.DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:o.DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:o.DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:o.DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:o.DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:o.DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:o.DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:o.DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:o.DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:o.DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}});t.__DirectiveLocation=d;const f=new c.GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new c.GraphQLNonNull(E),resolve:e=>(0,c.isScalarType)(e)?v.SCALAR:(0,c.isObjectType)(e)?v.OBJECT:(0,c.isInterfaceType)(e)?v.INTERFACE:(0,c.isUnionType)(e)?v.UNION:(0,c.isEnumType)(e)?v.ENUM:(0,c.isInputObjectType)(e)?v.INPUT_OBJECT:(0,c.isListType)(e)?v.LIST:(0,c.isNonNullType)(e)?v.NON_NULL:void(0,r.invariant)(!1,`Unexpected type: "${(0,i.inspect)(e)}".`)},name:{type:l.GraphQLString,resolve:e=>"name"in e?e.name:void 0},description:{type:l.GraphQLString,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:l.GraphQLString,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new c.GraphQLList(new c.GraphQLNonNull(h)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},interfaces:{type:new c.GraphQLList(new c.GraphQLNonNull(f)),resolve(e){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e))return e.getInterfaces()}},possibleTypes:{type:new c.GraphQLList(new c.GraphQLNonNull(f)),resolve(e,t,n,{schema:i}){if((0,c.isAbstractType)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.GraphQLList(new c.GraphQLNonNull(y)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isEnumType)(e)){const n=e.getValues();return t?n:n.filter((e=>null==e.deprecationReason))}}},inputFields:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isInputObjectType)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},ofType:{type:f,resolve:e=>"ofType"in e?e.ofType:void 0}})});t.__Type=f;const h=new c.GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))},type:{type:new c.GraphQLNonNull(f),resolve:e=>e.type},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});t.__Field=h;const m=new c.GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},type:{type:new c.GraphQLNonNull(f),resolve:e=>e.type},defaultValue:{type:l.GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=(0,a.astFromValue)(n,t);return i?(0,s.print)(i):null}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});t.__InputValue=m;const y=new c.GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});var v;t.__EnumValue=y,t.TypeKind=v,function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(v||(t.TypeKind=v={}));const E=new c.GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:v.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:v.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:v.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:v.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:v.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:v.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:v.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:v.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}});t.__TypeKind=E;const T={name:"__schema",type:new c.GraphQLNonNull(u),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.SchemaMetaFieldDef=T;const g={name:"__type",type:f,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.GraphQLNonNull(l.GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.TypeMetaFieldDef=g;const I={name:"__typename",type:new c.GraphQLNonNull(l.GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.TypeNameMetaFieldDef=I;const N=Object.freeze([u,p,d,f,h,m,y,E]);t.introspectionTypes=N},2229:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLString=t.GraphQLInt=t.GraphQLID=t.GraphQLFloat=t.GraphQLBoolean=t.GRAPHQL_MIN_INT=t.GRAPHQL_MAX_INT=void 0,t.isSpecifiedScalarType=function(e){return y.some((({name:t})=>e.name===t))},t.specifiedScalarTypes=void 0;var i=n(8002),r=n(5690),o=n(5822),s=n(2828),a=n(3033),c=n(5003);const l=2147483647;t.GRAPHQL_MAX_INT=l;const u=-2147483648;t.GRAPHQL_MIN_INT=u;const p=new c.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=v(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,i.inspect)(t)}`);if(n>l||n<u)throw new o.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,i.inspect)(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,i.inspect)(e)}`);if(e>l||e<u)throw new o.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==s.Kind.INT)throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,a.print)(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>l||t<u)throw new o.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}});t.GraphQLInt=p;const d=new c.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=v(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,i.inspect)(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.FLOAT&&e.kind!==s.Kind.INT)throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,a.print)(e)}`,e);return parseFloat(e.value)}});t.GraphQLFloat=d;const f=new c.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=v(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new o.GraphQLError(`String cannot represent value: ${(0,i.inspect)(e)}`)},parseValue(e){if("string"!=typeof e)throw new o.GraphQLError(`String cannot represent a non string value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.STRING)throw new o.GraphQLError(`String cannot represent a non string value: ${(0,a.print)(e)}`,{nodes:e});return e.value}});t.GraphQLString=f;const h=new c.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=v(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,i.inspect)(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.BOOLEAN)throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,a.print)(e)}`,{nodes:e});return e.value}});t.GraphQLBoolean=h;const m=new c.GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=v(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new o.GraphQLError(`ID cannot represent value: ${(0,i.inspect)(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new o.GraphQLError(`ID cannot represent value: ${(0,i.inspect)(e)}`)},parseLiteral(e){if(e.kind!==s.Kind.STRING&&e.kind!==s.Kind.INT)throw new o.GraphQLError("ID cannot represent a non-string and non-integer value: "+(0,a.print)(e),{nodes:e});return e.value}});t.GraphQLID=m;const y=Object.freeze([f,p,d,h,m]);function v(e){if((0,r.isObjectLike)(e)){if("function"==typeof e.valueOf){const t=e.valueOf();if(!(0,r.isObjectLike)(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}t.specifiedScalarTypes=y},6829:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSchema=void 0,t.assertSchema=function(e){if(!d(e))throw new Error(`Expected ${(0,r.inspect)(e)} to be a GraphQL schema.`);return e},t.isSchema=d;var i=n(7242),r=n(8002),o=n(5752),s=n(5690),a=n(7690),c=n(1807),l=n(5003),u=n(7197),p=n(8155);function d(e){return(0,o.instanceOf)(e,f)}class f{constructor(e){var t,n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,s.isObjectLike)(e)||(0,i.devAssert)(!1,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,i.devAssert)(!1,`"types" must be Array if provided but got: ${(0,r.inspect)(e.types)}.`),!e.directives||Array.isArray(e.directives)||(0,i.devAssert)(!1,`"directives" must be Array if provided but got: ${(0,r.inspect)(e.directives)}.`),this.description=e.description,this.extensions=(0,a.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:u.specifiedDirectives;const o=new Set(e.types);if(null!=e.types)for(const t of e.types)o.delete(t),h(t,o);null!=this._queryType&&h(this._queryType,o),null!=this._mutationType&&h(this._mutationType,o),null!=this._subscriptionType&&h(this._subscriptionType,o);for(const e of this._directives)if((0,u.isDirective)(e))for(const t of e.args)h(t.type,o);h(p.__Schema,o),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const e of o){if(null==e)continue;const t=e.name;if(t||(0,i.devAssert)(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[t])throw new Error(`Schema must contain uniquely named types but contains multiple types named "${t}".`);if(this._typeMap[t]=e,(0,l.isInterfaceType)(e)){for(const t of e.getInterfaces())if((0,l.isInterfaceType)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.interfaces.push(e)}}else if((0,l.isObjectType)(e))for(const t of e.getInterfaces())if((0,l.isInterfaceType)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.objects.push(e)}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(e){switch(e){case c.OperationTypeNode.QUERY:return this.getQueryType();case c.OperationTypeNode.MUTATION:return this.getMutationType();case c.OperationTypeNode.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(e){return this.getTypeMap()[e]}getPossibleTypes(e){return(0,l.isUnionType)(e)?e.getTypes():this.getImplementations(e).objects}getImplementations(e){const t=this._implementationsMap[e.name];return null!=t?t:{objects:[],interfaces:[]}}isSubType(e,t){let n=this._subTypeMap[e.name];if(void 0===n){if(n=Object.create(null),(0,l.isUnionType)(e))for(const t of e.getTypes())n[t.name]=!0;else{const t=this.getImplementations(e);for(const e of t.objects)n[e.name]=!0;for(const e of t.interfaces)n[e.name]=!0}this._subTypeMap[e.name]=n}return void 0!==n[t.name]}getDirectives(){return this._directives}getDirective(e){return this.getDirectives().find((t=>t.name===e))}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}function h(e,t){const n=(0,l.getNamedType)(e);if(!t.has(n))if(t.add(n),(0,l.isUnionType)(n))for(const e of n.getTypes())h(e,t);else if((0,l.isObjectType)(n)||(0,l.isInterfaceType)(n)){for(const e of n.getInterfaces())h(e,t);for(const e of Object.values(n.getFields())){h(e.type,t);for(const n of e.args)h(n.type,t)}}else if((0,l.isInputObjectType)(n))for(const e of Object.values(n.getFields()))h(e.type,t);return t}t.GraphQLSchema=f},1671:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertValidSchema=function(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))},t.validateSchema=p;var i=n(8002),r=n(5822),o=n(1807),s=n(298),a=n(5003),c=n(7197),l=n(8155),u=n(6829);function p(e){if((0,u.assertSchema)(e),e.__validationErrors)return e.__validationErrors;const t=new d(e);!function(e){const t=e.schema,n=t.getQueryType();if(n){if(!(0,a.isObjectType)(n)){var r;e.reportError(`Query root type must be Object type, it cannot be ${(0,i.inspect)(n)}.`,null!==(r=f(t,o.OperationTypeNode.QUERY))&&void 0!==r?r:n.astNode)}}else e.reportError("Query root type must be provided.",t.astNode);const s=t.getMutationType();var c;s&&!(0,a.isObjectType)(s)&&e.reportError(`Mutation root type must be Object type if provided, it cannot be ${(0,i.inspect)(s)}.`,null!==(c=f(t,o.OperationTypeNode.MUTATION))&&void 0!==c?c:s.astNode);const l=t.getSubscriptionType();var u;l&&!(0,a.isObjectType)(l)&&e.reportError(`Subscription root type must be Object type if provided, it cannot be ${(0,i.inspect)(l)}.`,null!==(u=f(t,o.OperationTypeNode.SUBSCRIPTION))&&void 0!==u?u:l.astNode)}(t),function(e){for(const n of e.schema.getDirectives())if((0,c.isDirective)(n)){h(e,n);for(const r of n.args){var t;h(e,r),(0,a.isInputType)(r.type)||e.reportError(`The type of @${n.name}(${r.name}:) must be Input Type but got: ${(0,i.inspect)(r.type)}.`,r.astNode),(0,a.isRequiredArgument)(r)&&null!=r.deprecationReason&&e.reportError(`Required argument @${n.name}(${r.name}:) cannot be deprecated.`,[_(r.astNode),null===(t=r.astNode)||void 0===t?void 0:t.type])}}else e.reportError(`Expected directive but got: ${(0,i.inspect)(n)}.`,null==n?void 0:n.astNode)}(t),function(e){const t=function(e){const t=Object.create(null),n=[],i=Object.create(null);return function r(o){if(t[o.name])return;t[o.name]=!0,i[o.name]=n.length;const s=Object.values(o.getFields());for(const t of s)if((0,a.isNonNullType)(t.type)&&(0,a.isInputObjectType)(t.type.ofType)){const o=t.type.ofType,s=i[o.name];if(n.push(t),void 0===s)r(o);else{const t=n.slice(s),i=t.map((e=>e.name)).join(".");e.reportError(`Cannot reference Input Object "${o.name}" within itself through a series of non-null fields: "${i}".`,t.map((e=>e.astNode)))}n.pop()}i[o.name]=void 0}}(e),n=e.schema.getTypeMap();for(const r of Object.values(n))(0,a.isNamedType)(r)?((0,l.isIntrospectionType)(r)||h(e,r),(0,a.isObjectType)(r)||(0,a.isInterfaceType)(r)?(m(e,r),y(e,r)):(0,a.isUnionType)(r)?T(e,r):(0,a.isEnumType)(r)?g(e,r):(0,a.isInputObjectType)(r)&&(I(e,r),t(r))):e.reportError(`Expected GraphQL named type but got: ${(0,i.inspect)(r)}.`,r.astNode)}(t);const n=t.getErrors();return e.__validationErrors=n,n}class d{constructor(e){this._errors=[],this.schema=e}reportError(e,t){const n=Array.isArray(t)?t.filter(Boolean):t;this._errors.push(new r.GraphQLError(e,{nodes:n}))}getErrors(){return this._errors}}function f(e,t){var n;return null===(n=[e.astNode,...e.extensionASTNodes].flatMap((e=>{var t;return null!==(t=null==e?void 0:e.operationTypes)&&void 0!==t?t:[]})).find((e=>e.operation===t)))||void 0===n?void 0:n.type}function h(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function m(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const c of n){var r;h(e,c),(0,a.isOutputType)(c.type)||e.reportError(`The type of ${t.name}.${c.name} must be Output Type but got: ${(0,i.inspect)(c.type)}.`,null===(r=c.astNode)||void 0===r?void 0:r.type);for(const n of c.args){const r=n.name;var o,s;h(e,n),(0,a.isInputType)(n.type)||e.reportError(`The type of ${t.name}.${c.name}(${r}:) must be Input Type but got: ${(0,i.inspect)(n.type)}.`,null===(o=n.astNode)||void 0===o?void 0:o.type),(0,a.isRequiredArgument)(n)&&null!=n.deprecationReason&&e.reportError(`Required argument ${t.name}.${c.name}(${r}:) cannot be deprecated.`,[_(n.astNode),null===(s=n.astNode)||void 0===s?void 0:s.type])}}}function y(e,t){const n=Object.create(null);for(const r of t.getInterfaces())(0,a.isInterfaceType)(r)?t!==r?n[r.name]?e.reportError(`Type ${t.name} can only implement ${r.name} once.`,N(t,r)):(n[r.name]=!0,E(e,t,r),v(e,t,r)):e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,N(t,r)):e.reportError(`Type ${(0,i.inspect)(t)} must only implement Interface types, it cannot implement ${(0,i.inspect)(r)}.`,N(t,r))}function v(e,t,n){const r=t.getFields();for(const p of Object.values(n.getFields())){const d=p.name,f=r[d];if(f){var o,c;(0,s.isTypeSubTypeOf)(e.schema,f.type,p.type)||e.reportError(`Interface field ${n.name}.${d} expects type ${(0,i.inspect)(p.type)} but ${t.name}.${d} is type ${(0,i.inspect)(f.type)}.`,[null===(o=p.astNode)||void 0===o?void 0:o.type,null===(c=f.astNode)||void 0===c?void 0:c.type]);for(const r of p.args){const o=r.name,a=f.args.find((e=>e.name===o));var l,u;a?(0,s.isEqualType)(r.type,a.type)||e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expects type ${(0,i.inspect)(r.type)} but ${t.name}.${d}(${o}:) is type ${(0,i.inspect)(a.type)}.`,[null===(l=r.astNode)||void 0===l?void 0:l.type,null===(u=a.astNode)||void 0===u?void 0:u.type]):e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expected but ${t.name}.${d} does not provide it.`,[r.astNode,f.astNode])}for(const i of f.args){const r=i.name;!p.args.find((e=>e.name===r))&&(0,a.isRequiredArgument)(i)&&e.reportError(`Object field ${t.name}.${d} includes required argument ${r} that is missing from the Interface field ${n.name}.${d}.`,[i.astNode,p.astNode])}}else e.reportError(`Interface field ${n.name}.${d} expected but ${t.name} does not provide it.`,[p.astNode,t.astNode,...t.extensionASTNodes])}}function E(e,t,n){const i=t.getInterfaces();for(const r of n.getInterfaces())i.includes(r)||e.reportError(r===t?`Type ${t.name} cannot implement ${n.name} because it would create a circular reference.`:`Type ${t.name} must implement ${r.name} because it is implemented by ${n.name}.`,[...N(n,r),...N(t,n)])}function T(e,t){const n=t.getTypes();0===n.length&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);const r=Object.create(null);for(const o of n)r[o.name]?e.reportError(`Union type ${t.name} can only include type ${o.name} once.`,b(t,o.name)):(r[o.name]=!0,(0,a.isObjectType)(o)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${(0,i.inspect)(o)}.`,b(t,String(o))))}function g(e,t){const n=t.getValues();0===n.length&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(const t of n)h(e,t)}function I(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const s of n){var r,o;h(e,s),(0,a.isInputType)(s.type)||e.reportError(`The type of ${t.name}.${s.name} must be Input Type but got: ${(0,i.inspect)(s.type)}.`,null===(r=s.astNode)||void 0===r?void 0:r.type),(0,a.isRequiredInputField)(s)&&null!=s.deprecationReason&&e.reportError(`Required input field ${t.name}.${s.name} cannot be deprecated.`,[_(s.astNode),null===(o=s.astNode)||void 0===o?void 0:o.type])}}function N(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.interfaces)&&void 0!==t?t:[]})).filter((e=>e.name.value===t.name))}function b(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.types)&&void 0!==t?t:[]})).filter((e=>e.name.value===t))}function _(e){var t;return null==e||null===(t=e.directives)||void 0===t?void 0:t.find((e=>e.name.value===c.GraphQLDeprecatedDirective.name))}},6226:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypeInfo=void 0,t.visitWithTypeInfo=function(e,t){return{enter(...n){const r=n[0];e.enter(r);const s=(0,o.getEnterLeaveForKind)(t,r.kind).enter;if(s){const o=s.apply(t,n);return void 0!==o&&(e.leave(r),(0,i.isNode)(o)&&e.enter(o)),o}},leave(...n){const i=n[0],r=(0,o.getEnterLeaveForKind)(t,i.kind).leave;let s;return r&&(s=r.apply(t,n)),e.leave(i),s}}};var i=n(1807),r=n(2828),o=n(285),s=n(5003),a=n(8155),c=n(5115);class l{constructor(e,t,n){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:u,t&&((0,s.isInputType)(t)&&this._inputTypeStack.push(t),(0,s.isCompositeType)(t)&&this._parentTypeStack.push(t),(0,s.isOutputType)(t)&&this._typeStack.push(t))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(e){const t=this._schema;switch(e.kind){case r.Kind.SELECTION_SET:{const e=(0,s.getNamedType)(this.getType());this._parentTypeStack.push((0,s.isCompositeType)(e)?e:void 0);break}case r.Kind.FIELD:{const n=this.getParentType();let i,r;n&&(i=this._getFieldDef(t,n,e),i&&(r=i.type)),this._fieldDefStack.push(i),this._typeStack.push((0,s.isOutputType)(r)?r:void 0);break}case r.Kind.DIRECTIVE:this._directive=t.getDirective(e.name.value);break;case r.Kind.OPERATION_DEFINITION:{const n=t.getRootType(e.operation);this._typeStack.push((0,s.isObjectType)(n)?n:void 0);break}case r.Kind.INLINE_FRAGMENT:case r.Kind.FRAGMENT_DEFINITION:{const n=e.typeCondition,i=n?(0,c.typeFromAST)(t,n):(0,s.getNamedType)(this.getType());this._typeStack.push((0,s.isOutputType)(i)?i:void 0);break}case r.Kind.VARIABLE_DEFINITION:{const n=(0,c.typeFromAST)(t,e.type);this._inputTypeStack.push((0,s.isInputType)(n)?n:void 0);break}case r.Kind.ARGUMENT:{var n;let t,i;const r=null!==(n=this.getDirective())&&void 0!==n?n:this.getFieldDef();r&&(t=r.args.find((t=>t.name===e.name.value)),t&&(i=t.type)),this._argument=t,this._defaultValueStack.push(t?t.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(i)?i:void 0);break}case r.Kind.LIST:{const e=(0,s.getNullableType)(this.getInputType()),t=(0,s.isListType)(e)?e.ofType:e;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.isInputType)(t)?t:void 0);break}case r.Kind.OBJECT_FIELD:{const t=(0,s.getNamedType)(this.getInputType());let n,i;(0,s.isInputObjectType)(t)&&(i=t.getFields()[e.name.value],i&&(n=i.type)),this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(n)?n:void 0);break}case r.Kind.ENUM:{const t=(0,s.getNamedType)(this.getInputType());let n;(0,s.isEnumType)(t)&&(n=t.getValue(e.value)),this._enumValue=n;break}}}leave(e){switch(e.kind){case r.Kind.SELECTION_SET:this._parentTypeStack.pop();break;case r.Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case r.Kind.DIRECTIVE:this._directive=null;break;case r.Kind.OPERATION_DEFINITION:case r.Kind.INLINE_FRAGMENT:case r.Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case r.Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case r.Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.Kind.LIST:case r.Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.Kind.ENUM:this._enumValue=null}}}function u(e,t,n){const i=n.name.value;return i===a.SchemaMetaFieldDef.name&&e.getQueryType()===t?a.SchemaMetaFieldDef:i===a.TypeMetaFieldDef.name&&e.getQueryType()===t?a.TypeMetaFieldDef:i===a.TypeNameMetaFieldDef.name&&(0,s.isCompositeType)(t)?a.TypeNameMetaFieldDef:(0,s.isObjectType)(t)||(0,s.isInterfaceType)(t)?t.getFields()[i]:void 0}t.TypeInfo=l},8115:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.astFromValue=function e(t,n){if((0,c.isNonNullType)(n)){const i=e(t,n.ofType);return(null==i?void 0:i.kind)===a.Kind.NULL?null:i}if(null===t)return{kind:a.Kind.NULL};if(void 0===t)return null;if((0,c.isListType)(n)){const i=n.ofType;if((0,o.isIterableObject)(t)){const n=[];for(const r of t){const t=e(r,i);null!=t&&n.push(t)}return{kind:a.Kind.LIST,values:n}}return e(t,i)}if((0,c.isInputObjectType)(n)){if(!(0,s.isObjectLike)(t))return null;const i=[];for(const r of Object.values(n.getFields())){const n=e(t[r.name],r.type);n&&i.push({kind:a.Kind.OBJECT_FIELD,name:{kind:a.Kind.NAME,value:r.name},value:n})}return{kind:a.Kind.OBJECT,fields:i}}if((0,c.isLeafType)(n)){const e=n.serialize(t);if(null==e)return null;if("boolean"==typeof e)return{kind:a.Kind.BOOLEAN,value:e};if("number"==typeof e&&Number.isFinite(e)){const t=String(e);return u.test(t)?{kind:a.Kind.INT,value:t}:{kind:a.Kind.FLOAT,value:t}}if("string"==typeof e)return(0,c.isEnumType)(n)?{kind:a.Kind.ENUM,value:e}:n===l.GraphQLID&&u.test(e)?{kind:a.Kind.INT,value:e}:{kind:a.Kind.STRING,value:e};throw new TypeError(`Cannot convert value to AST: ${(0,i.inspect)(e)}.`)}(0,r.invariant)(!1,"Unexpected input type: "+(0,i.inspect)(n))};var i=n(8002),r=n(7706),o=n(6609),s=n(5690),a=n(2828),c=n(5003),l=n(2229);const u=/^-?(?:0|[1-9][0-9]*)$/},3679:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.coerceInputValue=function(e,t,n=f){return h(e,t,n,void 0)};var i=n(100),r=n(8002),o=n(7706),s=n(6609),a=n(5690),c=n(7059),l=n(737),u=n(8070),p=n(5822),d=n(5003);function f(e,t,n){let i="Invalid value "+(0,r.inspect)(t);throw e.length>0&&(i+=` at "value${(0,l.printPathArray)(e)}"`),n.message=i+": "+n.message,n}function h(e,t,n,l){if((0,d.isNonNullType)(t))return null!=e?h(e,t.ofType,n,l):void n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected non-nullable type "${(0,r.inspect)(t)}" not to be null.`));if(null==e)return null;if((0,d.isListType)(t)){const i=t.ofType;return(0,s.isIterableObject)(e)?Array.from(e,((e,t)=>{const r=(0,c.addPath)(l,t,void 0);return h(e,i,n,r)})):[h(e,i,n,l)]}if((0,d.isInputObjectType)(t)){if(!(0,a.isObjectLike)(e))return void n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}" to be an object.`));const o={},s=t.getFields();for(const i of Object.values(s)){const s=e[i.name];if(void 0!==s)o[i.name]=h(s,i.type,n,(0,c.addPath)(l,i.name,t.name));else if(void 0!==i.defaultValue)o[i.name]=i.defaultValue;else if((0,d.isNonNullType)(i.type)){const t=(0,r.inspect)(i.type);n((0,c.pathToArray)(l),e,new p.GraphQLError(`Field "${i.name}" of required type "${t}" was not provided.`))}}for(const r of Object.keys(e))if(!s[r]){const o=(0,u.suggestionList)(r,Object.keys(t.getFields()));n((0,c.pathToArray)(l),e,new p.GraphQLError(`Field "${r}" is not defined by type "${t.name}".`+(0,i.didYouMean)(o)))}return o}if((0,d.isLeafType)(t)){let i;try{i=t.parseValue(e)}catch(i){return void(i instanceof p.GraphQLError?n((0,c.pathToArray)(l),e,i):n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}". `+i.message,{originalError:i})))}return void 0===i&&n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}".`)),i}(0,o.invariant)(!1,"Unexpected input type: "+(0,r.inspect)(t))}},6830:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sortValueNode=function e(t){switch(t.kind){case r.Kind.OBJECT:return{...t,fields:(n=t.fields,n.map((t=>({...t,value:e(t.value)}))).sort(((e,t)=>(0,i.naturalCompare)(e.name.value,t.name.value))))};case r.Kind.LIST:return{...t,values:t.values.map(e)};case r.Kind.INT:case r.Kind.FLOAT:case r.Kind.STRING:case r.Kind.BOOLEAN:case r.Kind.NULL:case r.Kind.ENUM:case r.Kind.VARIABLE:return t}var n};var i=n(5250),r=n(2828)},298:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doTypesOverlap=function(e,t,n){return t===n||((0,i.isAbstractType)(t)?(0,i.isAbstractType)(n)?e.getPossibleTypes(t).some((t=>e.isSubType(n,t))):e.isSubType(t,n):!!(0,i.isAbstractType)(n)&&e.isSubType(n,t))},t.isEqualType=function e(t,n){return t===n||((0,i.isNonNullType)(t)&&(0,i.isNonNullType)(n)||!(!(0,i.isListType)(t)||!(0,i.isListType)(n)))&&e(t.ofType,n.ofType)},t.isTypeSubTypeOf=function e(t,n,r){return n===r||((0,i.isNonNullType)(r)?!!(0,i.isNonNullType)(n)&&e(t,n.ofType,r.ofType):(0,i.isNonNullType)(n)?e(t,n.ofType,r):(0,i.isListType)(r)?!!(0,i.isListType)(n)&&e(t,n.ofType,r.ofType):!(0,i.isListType)(n)&&((0,i.isAbstractType)(r)&&((0,i.isInterfaceType)(n)||(0,i.isObjectType)(n))&&t.isSubType(r,n)))};var i=n(5003)},5115:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.typeFromAST=function e(t,n){switch(n.kind){case i.Kind.LIST_TYPE:{const i=e(t,n.type);return i&&new r.GraphQLList(i)}case i.Kind.NON_NULL_TYPE:{const i=e(t,n.type);return i&&new r.GraphQLNonNull(i)}case i.Kind.NAMED_TYPE:return t.getType(n.name.value)}};var i=n(2828),r=n(5003)},3770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueFromAST=function e(t,n,l){if(t){if(t.kind===s.Kind.VARIABLE){const e=t.name.value;if(null==l||void 0===l[e])return;const i=l[e];if(null===i&&(0,a.isNonNullType)(n))return;return i}if((0,a.isNonNullType)(n)){if(t.kind===s.Kind.NULL)return;return e(t,n.ofType,l)}if(t.kind===s.Kind.NULL)return null;if((0,a.isListType)(n)){const i=n.ofType;if(t.kind===s.Kind.LIST){const n=[];for(const r of t.values)if(c(r,l)){if((0,a.isNonNullType)(i))return;n.push(null)}else{const t=e(r,i,l);if(void 0===t)return;n.push(t)}return n}const r=e(t,i,l);if(void 0===r)return;return[r]}if((0,a.isInputObjectType)(n)){if(t.kind!==s.Kind.OBJECT)return;const i=Object.create(null),r=(0,o.keyMap)(t.fields,(e=>e.name.value));for(const t of Object.values(n.getFields())){const n=r[t.name];if(!n||c(n.value,l)){if(void 0!==t.defaultValue)i[t.name]=t.defaultValue;else if((0,a.isNonNullType)(t.type))return;continue}const o=e(n.value,t.type,l);if(void 0===o)return;i[t.name]=o}return i}if((0,a.isLeafType)(n)){let e;try{e=n.parseLiteral(t,l)}catch(e){return}if(void 0===e)return;return e}(0,r.invariant)(!1,"Unexpected input type: "+(0,i.inspect)(n))}};var i=n(8002),r=n(7706),o=n(2863),s=n(2828),a=n(5003);function c(e,t){return e.kind===s.Kind.VARIABLE&&(null==t||void 0===t[e.name.value])}},7784:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueFromASTUntyped=function e(t,n){switch(t.kind){case r.Kind.NULL:return null;case r.Kind.INT:return parseInt(t.value,10);case r.Kind.FLOAT:return parseFloat(t.value);case r.Kind.STRING:case r.Kind.ENUM:case r.Kind.BOOLEAN:return t.value;case r.Kind.LIST:return t.values.map((t=>e(t,n)));case r.Kind.OBJECT:return(0,i.keyValMap)(t.fields,(e=>e.name.value),(t=>e(t.value,n)));case r.Kind.VARIABLE:return null==n?void 0:n[t.name.value]}};var i=n(7154),r=n(2828)},3955:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationContext=t.SDLValidationContext=t.ASTValidationContext=void 0;var i=n(2828),r=n(285),o=n(6226);class s{constructor(e,t){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=t}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(e){this._onError(e)}getDocument(){return this._ast}getFragment(e){let t;if(this._fragments)t=this._fragments;else{t=Object.create(null);for(const e of this.getDocument().definitions)e.kind===i.Kind.FRAGMENT_DEFINITION&&(t[e.name.value]=e);this._fragments=t}return t[e]}getFragmentSpreads(e){let t=this._fragmentSpreads.get(e);if(!t){t=[];const n=[e];let r;for(;r=n.pop();)for(const e of r.selections)e.kind===i.Kind.FRAGMENT_SPREAD?t.push(e):e.selectionSet&&n.push(e.selectionSet);this._fragmentSpreads.set(e,t)}return t}getRecursivelyReferencedFragments(e){let t=this._recursivelyReferencedFragments.get(e);if(!t){t=[];const n=Object.create(null),i=[e.selectionSet];let r;for(;r=i.pop();)for(const e of this.getFragmentSpreads(r)){const r=e.name.value;if(!0!==n[r]){n[r]=!0;const e=this.getFragment(r);e&&(t.push(e),i.push(e.selectionSet))}}this._recursivelyReferencedFragments.set(e,t)}return t}}t.ASTValidationContext=s;class a extends s{constructor(e,t,n){super(e,n),this._schema=t}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}t.SDLValidationContext=a;class c extends s{constructor(e,t,n,i){super(t,i),this._schema=e,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(e){let t=this._variableUsages.get(e);if(!t){const n=[],i=new o.TypeInfo(this._schema);(0,r.visit)(e,(0,o.visitWithTypeInfo)(i,{VariableDefinition:()=>!1,Variable(e){n.push({node:e,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),t=n,this._variableUsages.set(e,t)}return t}getRecursiveVariableUsages(e){let t=this._recursiveVariableUsages.get(e);if(!t){t=this.getVariableUsages(e);for(const n of this.getRecursivelyReferencedFragments(e))t=t.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(e,t)}return t}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}t.ValidationContext=c},1122:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ExecutableDefinitionsRule",{enumerable:!0,get:function(){return s.ExecutableDefinitionsRule}}),Object.defineProperty(t,"FieldsOnCorrectTypeRule",{enumerable:!0,get:function(){return a.FieldsOnCorrectTypeRule}}),Object.defineProperty(t,"FragmentsOnCompositeTypesRule",{enumerable:!0,get:function(){return c.FragmentsOnCompositeTypesRule}}),Object.defineProperty(t,"KnownArgumentNamesRule",{enumerable:!0,get:function(){return l.KnownArgumentNamesRule}}),Object.defineProperty(t,"KnownDirectivesRule",{enumerable:!0,get:function(){return u.KnownDirectivesRule}}),Object.defineProperty(t,"KnownFragmentNamesRule",{enumerable:!0,get:function(){return p.KnownFragmentNamesRule}}),Object.defineProperty(t,"KnownTypeNamesRule",{enumerable:!0,get:function(){return d.KnownTypeNamesRule}}),Object.defineProperty(t,"LoneAnonymousOperationRule",{enumerable:!0,get:function(){return f.LoneAnonymousOperationRule}}),Object.defineProperty(t,"LoneSchemaDefinitionRule",{enumerable:!0,get:function(){return F.LoneSchemaDefinitionRule}}),Object.defineProperty(t,"NoDeprecatedCustomRule",{enumerable:!0,get:function(){return U.NoDeprecatedCustomRule}}),Object.defineProperty(t,"NoFragmentCyclesRule",{enumerable:!0,get:function(){return h.NoFragmentCyclesRule}}),Object.defineProperty(t,"NoSchemaIntrospectionCustomRule",{enumerable:!0,get:function(){return V.NoSchemaIntrospectionCustomRule}}),Object.defineProperty(t,"NoUndefinedVariablesRule",{enumerable:!0,get:function(){return m.NoUndefinedVariablesRule}}),Object.defineProperty(t,"NoUnusedFragmentsRule",{enumerable:!0,get:function(){return y.NoUnusedFragmentsRule}}),Object.defineProperty(t,"NoUnusedVariablesRule",{enumerable:!0,get:function(){return v.NoUnusedVariablesRule}}),Object.defineProperty(t,"OverlappingFieldsCanBeMergedRule",{enumerable:!0,get:function(){return E.OverlappingFieldsCanBeMergedRule}}),Object.defineProperty(t,"PossibleFragmentSpreadsRule",{enumerable:!0,get:function(){return T.PossibleFragmentSpreadsRule}}),Object.defineProperty(t,"PossibleTypeExtensionsRule",{enumerable:!0,get:function(){return P.PossibleTypeExtensionsRule}}),Object.defineProperty(t,"ProvidedRequiredArgumentsRule",{enumerable:!0,get:function(){return g.ProvidedRequiredArgumentsRule}}),Object.defineProperty(t,"ScalarLeafsRule",{enumerable:!0,get:function(){return I.ScalarLeafsRule}}),Object.defineProperty(t,"SingleFieldSubscriptionsRule",{enumerable:!0,get:function(){return N.SingleFieldSubscriptionsRule}}),Object.defineProperty(t,"UniqueArgumentDefinitionNamesRule",{enumerable:!0,get:function(){return j.UniqueArgumentDefinitionNamesRule}}),Object.defineProperty(t,"UniqueArgumentNamesRule",{enumerable:!0,get:function(){return b.UniqueArgumentNamesRule}}),Object.defineProperty(t,"UniqueDirectiveNamesRule",{enumerable:!0,get:function(){return M.UniqueDirectiveNamesRule}}),Object.defineProperty(t,"UniqueDirectivesPerLocationRule",{enumerable:!0,get:function(){return _.UniqueDirectivesPerLocationRule}}),Object.defineProperty(t,"UniqueEnumValueNamesRule",{enumerable:!0,get:function(){return $.UniqueEnumValueNamesRule}}),Object.defineProperty(t,"UniqueFieldDefinitionNamesRule",{enumerable:!0,get:function(){return C.UniqueFieldDefinitionNamesRule}}),Object.defineProperty(t,"UniqueFragmentNamesRule",{enumerable:!0,get:function(){return S.UniqueFragmentNamesRule}}),Object.defineProperty(t,"UniqueInputFieldNamesRule",{enumerable:!0,get:function(){return O.UniqueInputFieldNamesRule}}),Object.defineProperty(t,"UniqueOperationNamesRule",{enumerable:!0,get:function(){return D.UniqueOperationNamesRule}}),Object.defineProperty(t,"UniqueOperationTypesRule",{enumerable:!0,get:function(){return x.UniqueOperationTypesRule}}),Object.defineProperty(t,"UniqueTypeNamesRule",{enumerable:!0,get:function(){return k.UniqueTypeNamesRule}}),Object.defineProperty(t,"UniqueVariableNamesRule",{enumerable:!0,get:function(){return A.UniqueVariableNamesRule}}),Object.defineProperty(t,"ValidationContext",{enumerable:!0,get:function(){return r.ValidationContext}}),Object.defineProperty(t,"ValuesOfCorrectTypeRule",{enumerable:!0,get:function(){return R.ValuesOfCorrectTypeRule}}),Object.defineProperty(t,"VariablesAreInputTypesRule",{enumerable:!0,get:function(){return w.VariablesAreInputTypesRule}}),Object.defineProperty(t,"VariablesInAllowedPositionRule",{enumerable:!0,get:function(){return L.VariablesInAllowedPositionRule}}),Object.defineProperty(t,"specifiedRules",{enumerable:!0,get:function(){return o.specifiedRules}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return i.validate}});var i=n(9504),r=n(3955),o=n(4710),s=n(5285),a=n(9426),c=n(3558),l=n(9989),u=n(2826),p=n(1843),d=n(5961),f=n(870),h=n(658),m=n(7459),y=n(7317),v=n(8769),E=n(4331),T=n(5904),g=n(4312),I=n(7168),N=n(4666),b=n(4986),_=n(3576),S=n(5883),O=n(4313),D=n(2139),A=n(4243),R=n(6869),w=n(4942),L=n(8034),F=n(3411),x=n(856),k=n(1686),$=n(6400),C=n(4046),j=n(3878),M=n(6753),P=n(5715),U=n(2860),V=n(2276)},5285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExecutableDefinitionsRule=function(e){return{Document(t){for(const n of t.definitions)if(!(0,o.isExecutableDefinitionNode)(n)){const t=n.kind===r.Kind.SCHEMA_DEFINITION||n.kind===r.Kind.SCHEMA_EXTENSION?"schema":'"'+n.name.value+'"';e.reportError(new i.GraphQLError(`The ${t} definition is not executable.`,{nodes:n}))}return!1}}};var i=n(5822),r=n(2828),o=n(1352)},9426:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FieldsOnCorrectTypeRule=function(e){return{Field(t){const n=e.getParentType();if(n&&!e.getFieldDef()){const c=e.getSchema(),l=t.name.value;let u=(0,i.didYouMean)("to use an inline fragment on",function(e,t,n){if(!(0,a.isAbstractType)(t))return[];const i=new Set,o=Object.create(null);for(const r of e.getPossibleTypes(t))if(r.getFields()[n]){i.add(r),o[r.name]=1;for(const e of r.getInterfaces()){var s;e.getFields()[n]&&(i.add(e),o[e.name]=(null!==(s=o[e.name])&&void 0!==s?s:0)+1)}}return[...i].sort(((t,n)=>{const i=o[n.name]-o[t.name];return 0!==i?i:(0,a.isInterfaceType)(t)&&e.isSubType(t,n)?-1:(0,a.isInterfaceType)(n)&&e.isSubType(n,t)?1:(0,r.naturalCompare)(t.name,n.name)})).map((e=>e.name))}(c,n,l));""===u&&(u=(0,i.didYouMean)(function(e,t){if((0,a.isObjectType)(e)||(0,a.isInterfaceType)(e)){const n=Object.keys(e.getFields());return(0,o.suggestionList)(t,n)}return[]}(n,l))),e.reportError(new s.GraphQLError(`Cannot query field "${l}" on type "${n.name}".`+u,{nodes:t}))}}}};var i=n(100),r=n(5250),o=n(8070),s=n(5822),a=n(5003)},3558:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FragmentsOnCompositeTypesRule=function(e){return{InlineFragment(t){const n=t.typeCondition;if(n){const t=(0,s.typeFromAST)(e.getSchema(),n);if(t&&!(0,o.isCompositeType)(t)){const t=(0,r.print)(n);e.reportError(new i.GraphQLError(`Fragment cannot condition on non composite type "${t}".`,{nodes:n}))}}},FragmentDefinition(t){const n=(0,s.typeFromAST)(e.getSchema(),t.typeCondition);if(n&&!(0,o.isCompositeType)(n)){const n=(0,r.print)(t.typeCondition);e.reportError(new i.GraphQLError(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}};var i=n(5822),r=n(3033),o=n(5003),s=n(5115)},9989:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownArgumentNamesOnDirectivesRule=c,t.KnownArgumentNamesRule=function(e){return{...c(e),Argument(t){const n=e.getArgument(),s=e.getFieldDef(),a=e.getParentType();if(!n&&s&&a){const n=t.name.value,c=s.args.map((e=>e.name)),l=(0,r.suggestionList)(n,c);e.reportError(new o.GraphQLError(`Unknown argument "${n}" on field "${a.name}.${s.name}".`+(0,i.didYouMean)(l),{nodes:t}))}}}};var i=n(100),r=n(8070),o=n(5822),s=n(2828),a=n(7197);function c(e){const t=Object.create(null),n=e.getSchema(),c=n?n.getDirectives():a.specifiedDirectives;for(const e of c)t[e.name]=e.args.map((e=>e.name));const l=e.getDocument().definitions;for(const e of l)if(e.kind===s.Kind.DIRECTIVE_DEFINITION){var u;const n=null!==(u=e.arguments)&&void 0!==u?u:[];t[e.name.value]=n.map((e=>e.name.value))}return{Directive(n){const s=n.name.value,a=t[s];if(n.arguments&&a)for(const t of n.arguments){const n=t.name.value;if(!a.includes(n)){const c=(0,r.suggestionList)(n,a);e.reportError(new o.GraphQLError(`Unknown argument "${n}" on directive "@${s}".`+(0,i.didYouMean)(c),{nodes:t}))}}return!1}}}},2826:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownDirectivesRule=function(e){const t=Object.create(null),n=e.getSchema(),u=n?n.getDirectives():l.specifiedDirectives;for(const e of u)t[e.name]=e.locations;const p=e.getDocument().definitions;for(const e of p)e.kind===c.Kind.DIRECTIVE_DEFINITION&&(t[e.name.value]=e.locations.map((e=>e.value)));return{Directive(n,l,u,p,d){const f=n.name.value,h=t[f];if(!h)return void e.reportError(new o.GraphQLError(`Unknown directive "@${f}".`,{nodes:n}));const m=function(e){const t=e[e.length-1];switch("kind"in t||(0,r.invariant)(!1),t.kind){case c.Kind.OPERATION_DEFINITION:return function(e){switch(e){case s.OperationTypeNode.QUERY:return a.DirectiveLocation.QUERY;case s.OperationTypeNode.MUTATION:return a.DirectiveLocation.MUTATION;case s.OperationTypeNode.SUBSCRIPTION:return a.DirectiveLocation.SUBSCRIPTION}}(t.operation);case c.Kind.FIELD:return a.DirectiveLocation.FIELD;case c.Kind.FRAGMENT_SPREAD:return a.DirectiveLocation.FRAGMENT_SPREAD;case c.Kind.INLINE_FRAGMENT:return a.DirectiveLocation.INLINE_FRAGMENT;case c.Kind.FRAGMENT_DEFINITION:return a.DirectiveLocation.FRAGMENT_DEFINITION;case c.Kind.VARIABLE_DEFINITION:return a.DirectiveLocation.VARIABLE_DEFINITION;case c.Kind.SCHEMA_DEFINITION:case c.Kind.SCHEMA_EXTENSION:return a.DirectiveLocation.SCHEMA;case c.Kind.SCALAR_TYPE_DEFINITION:case c.Kind.SCALAR_TYPE_EXTENSION:return a.DirectiveLocation.SCALAR;case c.Kind.OBJECT_TYPE_DEFINITION:case c.Kind.OBJECT_TYPE_EXTENSION:return a.DirectiveLocation.OBJECT;case c.Kind.FIELD_DEFINITION:return a.DirectiveLocation.FIELD_DEFINITION;case c.Kind.INTERFACE_TYPE_DEFINITION:case c.Kind.INTERFACE_TYPE_EXTENSION:return a.DirectiveLocation.INTERFACE;case c.Kind.UNION_TYPE_DEFINITION:case c.Kind.UNION_TYPE_EXTENSION:return a.DirectiveLocation.UNION;case c.Kind.ENUM_TYPE_DEFINITION:case c.Kind.ENUM_TYPE_EXTENSION:return a.DirectiveLocation.ENUM;case c.Kind.ENUM_VALUE_DEFINITION:return a.DirectiveLocation.ENUM_VALUE;case c.Kind.INPUT_OBJECT_TYPE_DEFINITION:case c.Kind.INPUT_OBJECT_TYPE_EXTENSION:return a.DirectiveLocation.INPUT_OBJECT;case c.Kind.INPUT_VALUE_DEFINITION:{const t=e[e.length-3];return"kind"in t||(0,r.invariant)(!1),t.kind===c.Kind.INPUT_OBJECT_TYPE_DEFINITION?a.DirectiveLocation.INPUT_FIELD_DEFINITION:a.DirectiveLocation.ARGUMENT_DEFINITION}default:(0,r.invariant)(!1,"Unexpected kind: "+(0,i.inspect)(t.kind))}}(d);m&&!h.includes(m)&&e.reportError(new o.GraphQLError(`Directive "@${f}" may not be used on ${m}.`,{nodes:n}))}}};var i=n(8002),r=n(7706),o=n(5822),s=n(1807),a=n(8333),c=n(2828),l=n(7197)},1843:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownFragmentNamesRule=function(e){return{FragmentSpread(t){const n=t.name.value;e.getFragment(n)||e.reportError(new i.GraphQLError(`Unknown fragment "${n}".`,{nodes:t.name}))}}};var i=n(5822)},5961:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownTypeNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),a=Object.create(null);for(const t of e.getDocument().definitions)(0,s.isTypeDefinitionNode)(t)&&(a[t.name.value]=!0);const l=[...Object.keys(n),...Object.keys(a)];return{NamedType(t,u,p,d,f){const h=t.name.value;if(!n[h]&&!a[h]){var m;const n=null!==(m=f[2])&&void 0!==m?m:p,a=null!=n&&"kind"in(y=n)&&((0,s.isTypeSystemDefinitionNode)(y)||(0,s.isTypeSystemExtensionNode)(y));if(a&&c.includes(h))return;const u=(0,r.suggestionList)(h,a?c.concat(l):l);e.reportError(new o.GraphQLError(`Unknown type "${h}".`+(0,i.didYouMean)(u),{nodes:t}))}var y}}};var i=n(100),r=n(8070),o=n(5822),s=n(1352),a=n(8155);const c=[...n(2229).specifiedScalarTypes,...a.introspectionTypes].map((e=>e.name))},870:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoneAnonymousOperationRule=function(e){let t=0;return{Document(e){t=e.definitions.filter((e=>e.kind===r.Kind.OPERATION_DEFINITION)).length},OperationDefinition(n){!n.name&&t>1&&e.reportError(new i.GraphQLError("This anonymous operation must be the only defined operation.",{nodes:n}))}}};var i=n(5822),r=n(2828)},3411:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoneSchemaDefinitionRule=function(e){var t,n,r;const o=e.getSchema(),s=null!==(t=null!==(n=null!==(r=null==o?void 0:o.astNode)&&void 0!==r?r:null==o?void 0:o.getQueryType())&&void 0!==n?n:null==o?void 0:o.getMutationType())&&void 0!==t?t:null==o?void 0:o.getSubscriptionType();let a=0;return{SchemaDefinition(t){s?e.reportError(new i.GraphQLError("Cannot define a new schema within a schema extension.",{nodes:t})):(a>0&&e.reportError(new i.GraphQLError("Must provide only one schema definition.",{nodes:t})),++a)}}};var i=n(5822)},658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoFragmentCyclesRule=function(e){const t=Object.create(null),n=[],r=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition:e=>(o(e),!1)};function o(s){if(t[s.name.value])return;const a=s.name.value;t[a]=!0;const c=e.getFragmentSpreads(s.selectionSet);if(0!==c.length){r[a]=n.length;for(const t of c){const s=t.name.value,a=r[s];if(n.push(t),void 0===a){const t=e.getFragment(s);t&&o(t)}else{const t=n.slice(a),r=t.slice(0,-1).map((e=>'"'+e.name.value+'"')).join(", ");e.reportError(new i.GraphQLError(`Cannot spread fragment "${s}" within itself`+(""!==r?` via ${r}.`:"."),{nodes:t}))}n.pop()}r[a]=void 0}}};var i=n(5822)},7459:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUndefinedVariablesRule=function(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const r=e.getRecursiveVariableUsages(n);for(const{node:o}of r){const r=o.name.value;!0!==t[r]&&e.reportError(new i.GraphQLError(n.name?`Variable "$${r}" is not defined by operation "${n.name.value}".`:`Variable "$${r}" is not defined.`,{nodes:[o,n]}))}}},VariableDefinition(e){t[e.variable.name.value]=!0}}};var i=n(5822)},7317:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUnusedFragmentsRule=function(e){const t=[],n=[];return{OperationDefinition:e=>(t.push(e),!1),FragmentDefinition:e=>(n.push(e),!1),Document:{leave(){const r=Object.create(null);for(const n of t)for(const t of e.getRecursivelyReferencedFragments(n))r[t.name.value]=!0;for(const t of n){const n=t.name.value;!0!==r[n]&&e.reportError(new i.GraphQLError(`Fragment "${n}" is never used.`,{nodes:t}))}}}}};var i=n(5822)},8769:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUnusedVariablesRule=function(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(n){const r=Object.create(null),o=e.getRecursiveVariableUsages(n);for(const{node:e}of o)r[e.name.value]=!0;for(const o of t){const t=o.variable.name.value;!0!==r[t]&&e.reportError(new i.GraphQLError(n.name?`Variable "$${t}" is never used in operation "${n.name.value}".`:`Variable "$${t}" is never used.`,{nodes:o}))}}},VariableDefinition(e){t.push(e)}}};var i=n(5822)},4331:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OverlappingFieldsCanBeMergedRule=function(e){const t=new g,n=new Map;return{SelectionSet(i){const o=function(e,t,n,i,r){const o=[],[s,a]=v(e,t,i,r);if(function(e,t,n,i,r){for(const[o,s]of Object.entries(r))if(s.length>1)for(let r=0;r<s.length;r++)for(let a=r+1;a<s.length;a++){const c=h(e,n,i,!1,o,s[r],s[a]);c&&t.push(c)}}(e,o,t,n,s),0!==a.length)for(let i=0;i<a.length;i++){p(e,o,t,n,!1,s,a[i]);for(let r=i+1;r<a.length;r++)d(e,o,t,n,!1,a[i],a[r])}return o}(e,n,t,e.getParentType(),i);for(const[[t,n],i,s]of o){const o=u(n);e.reportError(new r.GraphQLError(`Fields "${t}" conflict because ${o}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:i.concat(s)}))}}}};var i=n(8002),r=n(5822),o=n(2828),s=n(3033),a=n(5003),c=n(6830),l=n(5115);function u(e){return Array.isArray(e)?e.map((([e,t])=>`subfields "${e}" conflict because `+u(t))).join(" and "):e}function p(e,t,n,i,r,o,s){const a=e.getFragment(s);if(!a)return;const[c,l]=E(e,n,a);if(o!==c){f(e,t,n,i,r,o,c);for(const a of l)i.has(a,s,r)||(i.add(a,s,r),p(e,t,n,i,r,o,a))}}function d(e,t,n,i,r,o,s){if(o===s)return;if(i.has(o,s,r))return;i.add(o,s,r);const a=e.getFragment(o),c=e.getFragment(s);if(!a||!c)return;const[l,u]=E(e,n,a),[p,h]=E(e,n,c);f(e,t,n,i,r,l,p);for(const s of h)d(e,t,n,i,r,o,s);for(const o of u)d(e,t,n,i,r,o,s)}function f(e,t,n,i,r,o,s){for(const[a,c]of Object.entries(o)){const o=s[a];if(o)for(const s of c)for(const c of o){const o=h(e,n,i,r,a,s,c);o&&t.push(o)}}}function h(e,t,n,r,o,s,c){const[l,u,h]=s,[E,T,g]=c,I=r||l!==E&&(0,a.isObjectType)(l)&&(0,a.isObjectType)(E);if(!I){const e=u.name.value,t=T.name.value;if(e!==t)return[[o,`"${e}" and "${t}" are different fields`],[u],[T]];if(m(u)!==m(T))return[[o,"they have differing arguments"],[u],[T]]}const N=null==h?void 0:h.type,b=null==g?void 0:g.type;if(N&&b&&y(N,b))return[[o,`they return conflicting types "${(0,i.inspect)(N)}" and "${(0,i.inspect)(b)}"`],[u],[T]];const _=u.selectionSet,S=T.selectionSet;if(_&&S){const i=function(e,t,n,i,r,o,s,a){const c=[],[l,u]=v(e,t,r,o),[h,m]=v(e,t,s,a);f(e,c,t,n,i,l,h);for(const r of m)p(e,c,t,n,i,l,r);for(const r of u)p(e,c,t,n,i,h,r);for(const r of u)for(const o of m)d(e,c,t,n,i,r,o);return c}(e,t,n,I,(0,a.getNamedType)(N),_,(0,a.getNamedType)(b),S);return function(e,t,n,i){if(e.length>0)return[[t,e.map((([e])=>e))],[n,...e.map((([,e])=>e)).flat()],[i,...e.map((([,,e])=>e)).flat()]]}(i,o,u,T)}}function m(e){var t;const n=null!==(t=e.arguments)&&void 0!==t?t:[],i={kind:o.Kind.OBJECT,fields:n.map((e=>({kind:o.Kind.OBJECT_FIELD,name:e.name,value:e.value})))};return(0,s.print)((0,c.sortValueNode)(i))}function y(e,t){return(0,a.isListType)(e)?!(0,a.isListType)(t)||y(e.ofType,t.ofType):!!(0,a.isListType)(t)||((0,a.isNonNullType)(e)?!(0,a.isNonNullType)(t)||y(e.ofType,t.ofType):!!(0,a.isNonNullType)(t)||!(!(0,a.isLeafType)(e)&&!(0,a.isLeafType)(t))&&e!==t)}function v(e,t,n,i){const r=t.get(i);if(r)return r;const o=Object.create(null),s=Object.create(null);T(e,n,i,o,s);const a=[o,Object.keys(s)];return t.set(i,a),a}function E(e,t,n){const i=t.get(n.selectionSet);if(i)return i;const r=(0,l.typeFromAST)(e.getSchema(),n.typeCondition);return v(e,t,r,n.selectionSet)}function T(e,t,n,i,r){for(const s of n.selections)switch(s.kind){case o.Kind.FIELD:{const e=s.name.value;let n;((0,a.isObjectType)(t)||(0,a.isInterfaceType)(t))&&(n=t.getFields()[e]);const r=s.alias?s.alias.value:e;i[r]||(i[r]=[]),i[r].push([t,s,n]);break}case o.Kind.FRAGMENT_SPREAD:r[s.name.value]=!0;break;case o.Kind.INLINE_FRAGMENT:{const n=s.typeCondition,o=n?(0,l.typeFromAST)(e.getSchema(),n):t;T(e,o,s.selectionSet,i,r);break}}}class g{constructor(){this._data=new Map}has(e,t,n){var i;const[r,o]=e<t?[e,t]:[t,e],s=null===(i=this._data.get(r))||void 0===i?void 0:i.get(o);return void 0!==s&&(!!n||n===s)}add(e,t,n){const[i,r]=e<t?[e,t]:[t,e],o=this._data.get(i);void 0===o?this._data.set(i,new Map([[r,n]])):o.set(r,n)}}},5904:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PossibleFragmentSpreadsRule=function(e){return{InlineFragment(t){const n=e.getType(),a=e.getParentType();if((0,o.isCompositeType)(n)&&(0,o.isCompositeType)(a)&&!(0,s.doTypesOverlap)(e.getSchema(),n,a)){const o=(0,i.inspect)(a),s=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Fragment cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}},FragmentSpread(t){const n=t.name.value,c=function(e,t){const n=e.getFragment(t);if(n){const t=(0,a.typeFromAST)(e.getSchema(),n.typeCondition);if((0,o.isCompositeType)(t))return t}}(e,n),l=e.getParentType();if(c&&l&&!(0,s.doTypesOverlap)(e.getSchema(),c,l)){const o=(0,i.inspect)(l),s=(0,i.inspect)(c);e.reportError(new r.GraphQLError(`Fragment "${n}" cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}}}};var i=n(8002),r=n(5822),o=n(5003),s=n(298),a=n(5115)},5715:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PossibleTypeExtensionsRule=function(e){const t=e.getSchema(),n=Object.create(null);for(const t of e.getDocument().definitions)(0,l.isTypeDefinitionNode)(t)&&(n[t.name.value]=t);return{ScalarTypeExtension:d,ObjectTypeExtension:d,InterfaceTypeExtension:d,UnionTypeExtension:d,EnumTypeExtension:d,InputObjectTypeExtension:d};function d(l){const d=l.name.value,f=n[d],h=null==t?void 0:t.getType(d);let m;if(f?m=p[f.kind]:h&&(y=h,m=(0,u.isScalarType)(y)?c.Kind.SCALAR_TYPE_EXTENSION:(0,u.isObjectType)(y)?c.Kind.OBJECT_TYPE_EXTENSION:(0,u.isInterfaceType)(y)?c.Kind.INTERFACE_TYPE_EXTENSION:(0,u.isUnionType)(y)?c.Kind.UNION_TYPE_EXTENSION:(0,u.isEnumType)(y)?c.Kind.ENUM_TYPE_EXTENSION:(0,u.isInputObjectType)(y)?c.Kind.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.invariant)(!1,"Unexpected type: "+(0,r.inspect)(y))),m){if(m!==l.kind){const t=function(e){switch(e){case c.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case c.Kind.OBJECT_TYPE_EXTENSION:return"object";case c.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case c.Kind.UNION_TYPE_EXTENSION:return"union";case c.Kind.ENUM_TYPE_EXTENSION:return"enum";case c.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:(0,o.invariant)(!1,"Unexpected kind: "+(0,r.inspect)(e))}}(l.kind);e.reportError(new a.GraphQLError(`Cannot extend non-${t} type "${d}".`,{nodes:f?[f,l]:l}))}}else{const r=Object.keys({...n,...null==t?void 0:t.getTypeMap()}),o=(0,s.suggestionList)(d,r);e.reportError(new a.GraphQLError(`Cannot extend type "${d}" because it is not defined.`+(0,i.didYouMean)(o),{nodes:l.name}))}var y}};var i=n(100),r=n(8002),o=n(7706),s=n(8070),a=n(5822),c=n(2828),l=n(1352),u=n(5003);const p={[c.Kind.SCALAR_TYPE_DEFINITION]:c.Kind.SCALAR_TYPE_EXTENSION,[c.Kind.OBJECT_TYPE_DEFINITION]:c.Kind.OBJECT_TYPE_EXTENSION,[c.Kind.INTERFACE_TYPE_DEFINITION]:c.Kind.INTERFACE_TYPE_EXTENSION,[c.Kind.UNION_TYPE_DEFINITION]:c.Kind.UNION_TYPE_EXTENSION,[c.Kind.ENUM_TYPE_DEFINITION]:c.Kind.ENUM_TYPE_EXTENSION,[c.Kind.INPUT_OBJECT_TYPE_DEFINITION]:c.Kind.INPUT_OBJECT_TYPE_EXTENSION}},4312:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProvidedRequiredArgumentsOnDirectivesRule=u,t.ProvidedRequiredArgumentsRule=function(e){return{...u(e),Field:{leave(t){var n;const r=e.getFieldDef();if(!r)return!1;const s=new Set(null===(n=t.arguments)||void 0===n?void 0:n.map((e=>e.name.value)));for(const n of r.args)if(!s.has(n.name)&&(0,c.isRequiredArgument)(n)){const s=(0,i.inspect)(n.type);e.reportError(new o.GraphQLError(`Field "${r.name}" argument "${n.name}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}};var i=n(8002),r=n(2863),o=n(5822),s=n(2828),a=n(3033),c=n(5003),l=n(7197);function u(e){var t;const n=Object.create(null),u=e.getSchema(),d=null!==(t=null==u?void 0:u.getDirectives())&&void 0!==t?t:l.specifiedDirectives;for(const e of d)n[e.name]=(0,r.keyMap)(e.args.filter(c.isRequiredArgument),(e=>e.name));const f=e.getDocument().definitions;for(const e of f)if(e.kind===s.Kind.DIRECTIVE_DEFINITION){var h;const t=null!==(h=e.arguments)&&void 0!==h?h:[];n[e.name.value]=(0,r.keyMap)(t.filter(p),(e=>e.name.value))}return{Directive:{leave(t){const r=t.name.value,s=n[r];if(s){var l;const n=null!==(l=t.arguments)&&void 0!==l?l:[],u=new Set(n.map((e=>e.name.value)));for(const[n,l]of Object.entries(s))if(!u.has(n)){const s=(0,c.isType)(l.type)?(0,i.inspect)(l.type):(0,a.print)(l.type);e.reportError(new o.GraphQLError(`Directive "@${r}" argument "${n}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}}function p(e){return e.type.kind===s.Kind.NON_NULL_TYPE&&null==e.defaultValue}},7168:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ScalarLeafsRule=function(e){return{Field(t){const n=e.getType(),s=t.selectionSet;if(n)if((0,o.isLeafType)((0,o.getNamedType)(n))){if(s){const o=t.name.value,a=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Field "${o}" must not have a selection since type "${a}" has no subfields.`,{nodes:s}))}}else if(!s){const o=t.name.value,s=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Field "${o}" of type "${s}" must have a selection of subfields. Did you mean "${o} { ... }"?`,{nodes:t}))}}}};var i=n(8002),r=n(5822),o=n(5003)},4666:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleFieldSubscriptionsRule=function(e){return{OperationDefinition(t){if("subscription"===t.operation){const n=e.getSchema(),s=n.getSubscriptionType();if(s){const a=t.name?t.name.value:null,c=Object.create(null),l=e.getDocument(),u=Object.create(null);for(const e of l.definitions)e.kind===r.Kind.FRAGMENT_DEFINITION&&(u[e.name.value]=e);const p=(0,o.collectFields)(n,u,c,s,t.selectionSet);if(p.size>1){const t=[...p.values()].slice(1).flat();e.reportError(new i.GraphQLError(null!=a?`Subscription "${a}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:t}))}for(const t of p.values())t[0].name.value.startsWith("__")&&e.reportError(new i.GraphQLError(null!=a?`Subscription "${a}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:t}))}}}}};var i=n(5822),r=n(2828),o=n(8950)},3878:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueArgumentDefinitionNamesRule=function(e){return{DirectiveDefinition(e){var t;const i=null!==(t=e.arguments)&&void 0!==t?t:[];return n(`@${e.name.value}`,i)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(e){var t;const i=e.name.value,r=null!==(t=e.fields)&&void 0!==t?t:[];for(const e of r){var o;n(`${i}.${e.name.value}`,null!==(o=e.arguments)&&void 0!==o?o:[])}return!1}function n(t,n){const o=(0,i.groupBy)(n,(e=>e.name.value));for(const[n,i]of o)i.length>1&&e.reportError(new r.GraphQLError(`Argument "${t}(${n}:)" can only be defined once.`,{nodes:i.map((e=>e.name))}));return!1}};var i=n(4620),r=n(5822)},4986:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueArgumentNamesRule=function(e){return{Field:t,Directive:t};function t(t){var n;const o=null!==(n=t.arguments)&&void 0!==n?n:[],s=(0,i.groupBy)(o,(e=>e.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.GraphQLError(`There can be only one argument named "${t}".`,{nodes:n.map((e=>e.name))}))}};var i=n(4620),r=n(5822)},6753:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueDirectiveNamesRule=function(e){const t=Object.create(null),n=e.getSchema();return{DirectiveDefinition(r){const o=r.name.value;if(null==n||!n.getDirective(o))return t[o]?e.reportError(new i.GraphQLError(`There can be only one directive named "@${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.GraphQLError(`Directive "@${o}" already exists in the schema. It cannot be redefined.`,{nodes:r.name}))}}};var i=n(5822)},3576:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueDirectivesPerLocationRule=function(e){const t=Object.create(null),n=e.getSchema(),a=n?n.getDirectives():s.specifiedDirectives;for(const e of a)t[e.name]=!e.isRepeatable;const c=e.getDocument().definitions;for(const e of c)e.kind===r.Kind.DIRECTIVE_DEFINITION&&(t[e.name.value]=!e.repeatable);const l=Object.create(null),u=Object.create(null);return{enter(n){if(!("directives"in n)||!n.directives)return;let s;if(n.kind===r.Kind.SCHEMA_DEFINITION||n.kind===r.Kind.SCHEMA_EXTENSION)s=l;else if((0,o.isTypeDefinitionNode)(n)||(0,o.isTypeExtensionNode)(n)){const e=n.name.value;s=u[e],void 0===s&&(u[e]=s=Object.create(null))}else s=Object.create(null);for(const r of n.directives){const n=r.name.value;t[n]&&(s[n]?e.reportError(new i.GraphQLError(`The directive "@${n}" can only be used once at this location.`,{nodes:[s[n],r]})):s[n]=r)}}}};var i=n(5822),r=n(2828),o=n(1352),s=n(7197)},6400:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueEnumValueNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:s,EnumTypeExtension:s};function s(t){var s;const a=t.name.value;o[a]||(o[a]=Object.create(null));const c=null!==(s=t.values)&&void 0!==s?s:[],l=o[a];for(const t of c){const o=t.name.value,s=n[a];(0,r.isEnumType)(s)&&s.getValue(o)?e.reportError(new i.GraphQLError(`Enum value "${a}.${o}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[o]?e.reportError(new i.GraphQLError(`Enum value "${a}.${o}" can only be defined once.`,{nodes:[l[o],t.name]})):l[o]=t.name}return!1}};var i=n(5822),r=n(5003)},4046:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueFieldDefinitionNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),r=Object.create(null);return{InputObjectTypeDefinition:s,InputObjectTypeExtension:s,InterfaceTypeDefinition:s,InterfaceTypeExtension:s,ObjectTypeDefinition:s,ObjectTypeExtension:s};function s(t){var s;const a=t.name.value;r[a]||(r[a]=Object.create(null));const c=null!==(s=t.fields)&&void 0!==s?s:[],l=r[a];for(const t of c){const r=t.name.value;o(n[a],r)?e.reportError(new i.GraphQLError(`Field "${a}.${r}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[r]?e.reportError(new i.GraphQLError(`Field "${a}.${r}" can only be defined once.`,{nodes:[l[r],t.name]})):l[r]=t.name}return!1}};var i=n(5822),r=n(5003);function o(e,t){return!!((0,r.isObjectType)(e)||(0,r.isInterfaceType)(e)||(0,r.isInputObjectType)(e))&&null!=e.getFields()[t]}},5883:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueFragmentNamesRule=function(e){const t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(n){const r=n.name.value;return t[r]?e.reportError(new i.GraphQLError(`There can be only one fragment named "${r}".`,{nodes:[t[r],n.name]})):t[r]=n.name,!1}}};var i=n(5822)},4313:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueInputFieldNamesRule=function(e){const t=[];let n=Object.create(null);return{ObjectValue:{enter(){t.push(n),n=Object.create(null)},leave(){const e=t.pop();e||(0,i.invariant)(!1),n=e}},ObjectField(t){const i=t.name.value;n[i]?e.reportError(new r.GraphQLError(`There can be only one input field named "${i}".`,{nodes:[n[i],t.name]})):n[i]=t.name}}};var i=n(7706),r=n(5822)},2139:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueOperationNamesRule=function(e){const t=Object.create(null);return{OperationDefinition(n){const r=n.name;return r&&(t[r.value]?e.reportError(new i.GraphQLError(`There can be only one operation named "${r.value}".`,{nodes:[t[r.value],r]})):t[r.value]=r),!1},FragmentDefinition:()=>!1}};var i=n(5822)},856:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueOperationTypesRule=function(e){const t=e.getSchema(),n=Object.create(null),r=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(t){var o;const s=null!==(o=t.operationTypes)&&void 0!==o?o:[];for(const t of s){const o=t.operation,s=n[o];r[o]?e.reportError(new i.GraphQLError(`Type for ${o} already defined in the schema. It cannot be redefined.`,{nodes:t})):s?e.reportError(new i.GraphQLError(`There can be only one ${o} type in schema.`,{nodes:[s,t]})):n[o]=t}return!1}};var i=n(5822)},1686:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueTypeNamesRule=function(e){const t=Object.create(null),n=e.getSchema();return{ScalarTypeDefinition:r,ObjectTypeDefinition:r,InterfaceTypeDefinition:r,UnionTypeDefinition:r,EnumTypeDefinition:r,InputObjectTypeDefinition:r};function r(r){const o=r.name.value;if(null==n||!n.getType(o))return t[o]?e.reportError(new i.GraphQLError(`There can be only one type named "${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.GraphQLError(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:r.name}))}};var i=n(5822)},4243:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueVariableNamesRule=function(e){return{OperationDefinition(t){var n;const o=null!==(n=t.variableDefinitions)&&void 0!==n?n:[],s=(0,i.groupBy)(o,(e=>e.variable.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.GraphQLError(`There can be only one variable named "$${t}".`,{nodes:n.map((e=>e.variable.name))}))}}};var i=n(4620),r=n(5822)},6869:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValuesOfCorrectTypeRule=function(e){return{ListValue(t){const n=(0,l.getNullableType)(e.getParentInputType());if(!(0,l.isListType)(n))return u(e,t),!1},ObjectValue(t){const n=(0,l.getNamedType)(e.getInputType());if(!(0,l.isInputObjectType)(n))return u(e,t),!1;const i=(0,o.keyMap)(t.fields,(e=>e.name.value));for(const o of Object.values(n.getFields()))if(!i[o.name]&&(0,l.isRequiredInputField)(o)){const i=(0,r.inspect)(o.type);e.reportError(new a.GraphQLError(`Field "${n.name}.${o.name}" of required type "${i}" was not provided.`,{nodes:t}))}},ObjectField(t){const n=(0,l.getNamedType)(e.getParentInputType());if(!e.getInputType()&&(0,l.isInputObjectType)(n)){const r=(0,s.suggestionList)(t.name.value,Object.keys(n.getFields()));e.reportError(new a.GraphQLError(`Field "${t.name.value}" is not defined by type "${n.name}".`+(0,i.didYouMean)(r),{nodes:t}))}},NullValue(t){const n=e.getInputType();(0,l.isNonNullType)(n)&&e.reportError(new a.GraphQLError(`Expected value of type "${(0,r.inspect)(n)}", found ${(0,c.print)(t)}.`,{nodes:t}))},EnumValue:t=>u(e,t),IntValue:t=>u(e,t),FloatValue:t=>u(e,t),StringValue:t=>u(e,t),BooleanValue:t=>u(e,t)}};var i=n(100),r=n(8002),o=n(2863),s=n(8070),a=n(5822),c=n(3033),l=n(5003);function u(e,t){const n=e.getInputType();if(!n)return;const i=(0,l.getNamedType)(n);if((0,l.isLeafType)(i))try{if(void 0===i.parseLiteral(t,void 0)){const i=(0,r.inspect)(n);e.reportError(new a.GraphQLError(`Expected value of type "${i}", found ${(0,c.print)(t)}.`,{nodes:t}))}}catch(i){const o=(0,r.inspect)(n);i instanceof a.GraphQLError?e.reportError(i):e.reportError(new a.GraphQLError(`Expected value of type "${o}", found ${(0,c.print)(t)}; `+i.message,{nodes:t,originalError:i}))}else{const i=(0,r.inspect)(n);e.reportError(new a.GraphQLError(`Expected value of type "${i}", found ${(0,c.print)(t)}.`,{nodes:t}))}}},4942:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VariablesAreInputTypesRule=function(e){return{VariableDefinition(t){const n=(0,s.typeFromAST)(e.getSchema(),t.type);if(void 0!==n&&!(0,o.isInputType)(n)){const n=t.variable.name.value,o=(0,r.print)(t.type);e.reportError(new i.GraphQLError(`Variable "$${n}" cannot be non-input type "${o}".`,{nodes:t.type}))}}}};var i=n(5822),r=n(3033),o=n(5003),s=n(5115)},8034:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VariablesInAllowedPositionRule=function(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const o=e.getRecursiveVariableUsages(n);for(const{node:n,type:s,defaultValue:a}of o){const o=n.name.value,u=t[o];if(u&&s){const t=e.getSchema(),p=(0,c.typeFromAST)(t,u.type);if(p&&!l(t,p,u.defaultValue,s,a)){const t=(0,i.inspect)(p),a=(0,i.inspect)(s);e.reportError(new r.GraphQLError(`Variable "$${o}" of type "${t}" used in position expecting type "${a}".`,{nodes:[u,n]}))}}}}},VariableDefinition(e){t[e.variable.name.value]=e}}};var i=n(8002),r=n(5822),o=n(2828),s=n(5003),a=n(298),c=n(5115);function l(e,t,n,i,r){if((0,s.isNonNullType)(i)&&!(0,s.isNonNullType)(t)){const s=void 0!==r;if((null==n||n.kind===o.Kind.NULL)&&!s)return!1;const c=i.ofType;return(0,a.isTypeSubTypeOf)(e,t,c)}return(0,a.isTypeSubTypeOf)(e,t,i)}},2860:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoDeprecatedCustomRule=function(e){return{Field(t){const n=e.getFieldDef(),o=null==n?void 0:n.deprecationReason;if(n&&null!=o){const s=e.getParentType();null!=s||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`The field ${s.name}.${n.name} is deprecated. ${o}`,{nodes:t}))}},Argument(t){const n=e.getArgument(),o=null==n?void 0:n.deprecationReason;if(n&&null!=o){const s=e.getDirective();if(null!=s)e.reportError(new r.GraphQLError(`Directive "@${s.name}" argument "${n.name}" is deprecated. ${o}`,{nodes:t}));else{const s=e.getParentType(),a=e.getFieldDef();null!=s&&null!=a||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`Field "${s.name}.${a.name}" argument "${n.name}" is deprecated. ${o}`,{nodes:t}))}}},ObjectField(t){const n=(0,o.getNamedType)(e.getParentInputType());if((0,o.isInputObjectType)(n)){const i=n.getFields()[t.name.value],o=null==i?void 0:i.deprecationReason;null!=o&&e.reportError(new r.GraphQLError(`The input field ${n.name}.${i.name} is deprecated. ${o}`,{nodes:t}))}},EnumValue(t){const n=e.getEnumValue(),s=null==n?void 0:n.deprecationReason;if(n&&null!=s){const a=(0,o.getNamedType)(e.getInputType());null!=a||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`The enum value "${a.name}.${n.name}" is deprecated. ${s}`,{nodes:t}))}}}};var i=n(7706),r=n(5822),o=n(5003)},2276:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoSchemaIntrospectionCustomRule=function(e){return{Field(t){const n=(0,r.getNamedType)(e.getType());n&&(0,o.isIntrospectionType)(n)&&e.reportError(new i.GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}};var i=n(5822),r=n(5003),o=n(8155)},4710:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.specifiedSDLRules=t.specifiedRules=void 0;var i=n(5285),r=n(9426),o=n(3558),s=n(9989),a=n(2826),c=n(1843),l=n(5961),u=n(870),p=n(3411),d=n(658),f=n(7459),h=n(7317),m=n(8769),y=n(4331),v=n(5904),E=n(5715),T=n(4312),g=n(7168),I=n(4666),N=n(3878),b=n(4986),_=n(6753),S=n(3576),O=n(6400),D=n(4046),A=n(5883),R=n(4313),w=n(2139),L=n(856),F=n(1686),x=n(4243),k=n(6869),$=n(4942),C=n(8034);const j=Object.freeze([i.ExecutableDefinitionsRule,w.UniqueOperationNamesRule,u.LoneAnonymousOperationRule,I.SingleFieldSubscriptionsRule,l.KnownTypeNamesRule,o.FragmentsOnCompositeTypesRule,$.VariablesAreInputTypesRule,g.ScalarLeafsRule,r.FieldsOnCorrectTypeRule,A.UniqueFragmentNamesRule,c.KnownFragmentNamesRule,h.NoUnusedFragmentsRule,v.PossibleFragmentSpreadsRule,d.NoFragmentCyclesRule,x.UniqueVariableNamesRule,f.NoUndefinedVariablesRule,m.NoUnusedVariablesRule,a.KnownDirectivesRule,S.UniqueDirectivesPerLocationRule,s.KnownArgumentNamesRule,b.UniqueArgumentNamesRule,k.ValuesOfCorrectTypeRule,T.ProvidedRequiredArgumentsRule,C.VariablesInAllowedPositionRule,y.OverlappingFieldsCanBeMergedRule,R.UniqueInputFieldNamesRule]);t.specifiedRules=j;const M=Object.freeze([p.LoneSchemaDefinitionRule,L.UniqueOperationTypesRule,F.UniqueTypeNamesRule,O.UniqueEnumValueNamesRule,D.UniqueFieldDefinitionNamesRule,N.UniqueArgumentDefinitionNamesRule,_.UniqueDirectiveNamesRule,l.KnownTypeNamesRule,a.KnownDirectivesRule,S.UniqueDirectivesPerLocationRule,E.PossibleTypeExtensionsRule,s.KnownArgumentNamesOnDirectivesRule,b.UniqueArgumentNamesRule,R.UniqueInputFieldNamesRule,T.ProvidedRequiredArgumentsOnDirectivesRule]);t.specifiedSDLRules=M},9504:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertValidSDL=function(e){const t=u(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))},t.assertValidSDLExtension=function(e,t){const n=u(e,t);if(0!==n.length)throw new Error(n.map((e=>e.message)).join("\n\n"))},t.validate=function(e,t,n=c.specifiedRules,u,p=new a.TypeInfo(e)){var d;const f=null!==(d=null==u?void 0:u.maxErrors)&&void 0!==d?d:100;t||(0,i.devAssert)(!1,"Must provide document."),(0,s.assertValidSchema)(e);const h=Object.freeze({}),m=[],y=new l.ValidationContext(e,t,p,(e=>{if(m.length>=f)throw m.push(new r.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),h;m.push(e)})),v=(0,o.visitInParallel)(n.map((e=>e(y))));try{(0,o.visit)(t,(0,a.visitWithTypeInfo)(p,v))}catch(e){if(e!==h)throw e}return m},t.validateSDL=u;var i=n(7242),r=n(5822),o=n(285),s=n(1671),a=n(6226),c=n(4710),l=n(3955);function u(e,t,n=c.specifiedSDLRules){const i=[],r=new l.SDLValidationContext(e,t,(e=>{i.push(e)})),s=n.map((e=>e(r)));return(0,o.visit)(e,(0,o.visitInParallel)(s)),i}},1044:(e,t,n)=>{"use strict";var i=n(210)("%Object.defineProperty%",!0),r=function(){if(i)try{return i({},"a",{value:1}),!0}catch(e){return!1}return!1};r.hasArrayLengthDefineBug=function(){if(!r())return null;try{return 1!==i([],"length",{value:1}).length}catch(e){return!0}},e.exports=r},1405:(e,t,n)=>{"use strict";var i="undefined"!=typeof Symbol&&Symbol,r=n(5419);e.exports=function(){return"function"==typeof i&&"function"==typeof Symbol&&"symbol"==typeof i("foo")&&"symbol"==typeof Symbol("bar")&&r()}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var i=Object.getOwnPropertySymbols(e);if(1!==i.length||i[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var r=Object.getOwnPropertyDescriptor(e,t);if(42!==r.value||!0!==r.enumerable)return!1}return!0}},6410:(e,t,n)=>{"use strict";var i=n(5419);e.exports=function(){return i()&&!!Symbol.toStringTag}},7642:(e,t,n)=>{"use strict";var i=n(8612);e.exports=i.call(Function.call,Object.prototype.hasOwnProperty)},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},2584:(e,t,n)=>{"use strict";var i=n(6410)(),r=n(1924)("Object.prototype.toString"),o=function(e){return!(i&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===r(e)},s=function(e){return!!o(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==r(e)&&"[object Function]"===r(e.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,e.exports=a?o:s},5320:e=>{"use strict";var t,n,i=Function.prototype.toString,r="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof r&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw n}}),n={},r((function(){throw 42}),null,t)}catch(e){e!==n&&(r=null)}else r=null;var o=/^\s*class\b/,s=function(e){try{var t=i.call(e);return o.test(t)}catch(e){return!1}},a=function(e){try{return!s(e)&&(i.call(e),!0)}catch(e){return!1}},c=Object.prototype.toString,l="function"==typeof Symbol&&!!Symbol.toStringTag,u=!(0 in[,]),p=function(){return!1};if("object"==typeof document){var d=document.all;c.call(d)===c.call(document.all)&&(p=function(e){if((u||!e)&&(void 0===e||"object"==typeof e))try{var t=c.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=r?function(e){if(p(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{r(e,null,t)}catch(e){if(e!==n)return!1}return!s(e)&&a(e)}:function(e){if(p(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(l)return a(e);if(s(e))return!1;var t=c.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&a(e)}},8662:(e,t,n)=>{"use strict";var i,r=Object.prototype.toString,o=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=n(6410)(),c=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(s.test(o.call(e)))return!0;if(!a)return"[object GeneratorFunction]"===r.call(e);if(!c)return!1;if(void 0===i){var t=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(e){}}();i=!!t&&c(t)}return c(e)===i}},8611:e=>{"use strict";e.exports=function(e){return e!=e}},360:(e,t,n)=>{"use strict";var i=n(5559),r=n(4289),o=n(8611),s=n(9415),a=n(3194),c=i(s(),Number);r(c,{getPolyfill:s,implementation:o,shim:a}),e.exports=c},9415:(e,t,n)=>{"use strict";var i=n(8611);e.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:i}},3194:(e,t,n)=>{"use strict";var i=n(4289),r=n(9415);e.exports=function(){var e=r();return i(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},5692:(e,t,n)=>{"use strict";var i=n(4029),r=n(3083),o=n(1924),s=o("Object.prototype.toString"),a=n(6410)(),c=n(7296),l="undefined"==typeof globalThis?n.g:globalThis,u=r(),p=o("Array.prototype.indexOf",!0)||function(e,t){for(var n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1},d=o("String.prototype.slice"),f={},h=Object.getPrototypeOf;a&&c&&h&&i(u,(function(e){var t=new l[e];if(Symbol.toStringTag in t){var n=h(t),i=c(n,Symbol.toStringTag);if(!i){var r=h(n);i=c(r,Symbol.toStringTag)}f[e]=i.get}})),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a||!(Symbol.toStringTag in e)){var t=d(s(e),8,-1);return p(u,t)>-1}return!!c&&function(e){var t=!1;return i(f,(function(n,i){if(!t)try{t=n.call(e)===i}catch(e){}})),t}(e)}},9991:e=>{"use strict";e.exports=function(){function e(e,t,n,i,r){return e<t||n<t?e>n?n+1:e+1:i===r?t:t+1}return function(t,n){if(t===n)return 0;if(t.length>n.length){var i=t;t=n,n=i}for(var r=t.length,o=n.length;r>0&&t.charCodeAt(r-1)===n.charCodeAt(o-1);)r--,o--;for(var s=0;s<r&&t.charCodeAt(s)===n.charCodeAt(s);)s++;if(o-=s,0==(r-=s)||o<3)return o;var a,c,l,u,p,d,f,h,m,y,v,E,T=0,g=[];for(a=0;a<r;a++)g.push(a+1),g.push(t.charCodeAt(s+a));for(var I=g.length-1;T<o-3;)for(m=n.charCodeAt(s+(c=T)),y=n.charCodeAt(s+(l=T+1)),v=n.charCodeAt(s+(u=T+2)),E=n.charCodeAt(s+(p=T+3)),d=T+=4,a=0;a<I;a+=2)c=e(f=g[a],c,l,m,h=g[a+1]),l=e(c,l,u,y,h),u=e(l,u,p,v,h),d=e(u,p,d,E,h),g[a]=d,p=u,u=l,l=c,c=f;for(;T<o;)for(m=n.charCodeAt(s+(c=T)),d=++T,a=0;a<I;a+=2)f=g[a],g[a]=d=e(f,c,d,m,g[a+1]),c=f;return d}}()},3339:e=>{"use strict";var t=function(e){return e!=e};e.exports=function(e,n){return 0===e&&0===n?1/e==1/n:e===n||!(!t(e)||!t(n))}},609:(e,t,n)=>{"use strict";var i=n(4289),r=n(5559),o=n(3339),s=n(5624),a=n(2281),c=r(s(),Object);i(c,{getPolyfill:s,implementation:o,shim:a}),e.exports=c},5624:(e,t,n)=>{"use strict";var i=n(3339);e.exports=function(){return"function"==typeof Object.is?Object.is:i}},2281:(e,t,n)=>{"use strict";var i=n(5624),r=n(4289);e.exports=function(){var e=i();return r(Object,{is:e},{is:function(){return Object.is!==e}}),e}},8987:(e,t,n)=>{"use strict";var i;if(!Object.keys){var r=Object.prototype.hasOwnProperty,o=Object.prototype.toString,s=n(1414),a=Object.prototype.propertyIsEnumerable,c=!a.call({toString:null},"toString"),l=a.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(e){var t=e.constructor;return t&&t.prototype===e},d={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},f=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!d["$"+e]&&r.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{p(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();i=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===o.call(e),i=s(e),a=t&&"[object String]"===o.call(e),d=[];if(!t&&!n&&!i)throw new TypeError("Object.keys called on a non-object");var h=l&&n;if(a&&e.length>0&&!r.call(e,0))for(var m=0;m<e.length;++m)d.push(String(m));if(i&&e.length>0)for(var y=0;y<e.length;++y)d.push(String(y));else for(var v in e)h&&"prototype"===v||!r.call(e,v)||d.push(String(v));if(c)for(var E=function(e){if("undefined"==typeof window||!f)return p(e);try{return p(e)}catch(e){return!1}}(e),T=0;T<u.length;++T)E&&"constructor"===u[T]||!r.call(e,u[T])||d.push(u[T]);return d}}e.exports=i},2215:(e,t,n)=>{"use strict";var i=Array.prototype.slice,r=n(1414),o=Object.keys,s=o?function(e){return o(e)}:n(8987),a=Object.keys;s.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return r(e)?a(i.call(e)):a(e)})}else Object.keys=s;return Object.keys||s},e.exports=s},1414:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),i="[object Arguments]"===n;return i||(i="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),i}},6470:e=>{"use strict";function t(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function n(e,t){for(var n,i="",r=0,o=-1,s=0,a=0;a<=e.length;++a){if(a<e.length)n=e.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(i.length<2||2!==r||46!==i.charCodeAt(i.length-1)||46!==i.charCodeAt(i.length-2))if(i.length>2){var c=i.lastIndexOf("/");if(c!==i.length-1){-1===c?(i="",r=0):r=(i=i.slice(0,c)).length-1-i.lastIndexOf("/"),o=a,s=0;continue}}else if(2===i.length||1===i.length){i="",r=0,o=a,s=0;continue}t&&(i.length>0?i+="/..":i="..",r=2)}else i.length>0?i+="/"+e.slice(o+1,a):i=e.slice(o+1,a),r=a-o-1;o=a,s=0}else 46===n&&-1!==s?++s:s=-1}return i}var i={resolve:function(){for(var e,i="",r=!1,o=arguments.length-1;o>=-1&&!r;o--){var s;o>=0?s=arguments[o]:(void 0===e&&(e=process.cwd()),s=e),t(s),0!==s.length&&(i=s+"/"+i,r=47===s.charCodeAt(0))}return i=n(i,!r),r?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(t(e),0===e.length)return".";var i=47===e.charCodeAt(0),r=47===e.charCodeAt(e.length-1);return 0!==(e=n(e,!i)).length||i||(e="."),e.length>0&&r&&(e+="/"),i?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,n=0;n<arguments.length;++n){var r=arguments[n];t(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":i.normalize(e)},relative:function(e,n){if(t(e),t(n),e===n)return"";if((e=i.resolve(e))===(n=i.resolve(n)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var o=e.length,s=o-r,a=1;a<n.length&&47===n.charCodeAt(a);++a);for(var c=n.length-a,l=s<c?s:c,u=-1,p=0;p<=l;++p){if(p===l){if(c>l){if(47===n.charCodeAt(a+p))return n.slice(a+p+1);if(0===p)return n.slice(a+p)}else s>l&&(47===e.charCodeAt(r+p)?u=p:0===p&&(u=0));break}var d=e.charCodeAt(r+p);if(d!==n.charCodeAt(a+p))break;47===d&&(u=p)}var f="";for(p=r+u+1;p<=o;++p)p!==o&&47!==e.charCodeAt(p)||(0===f.length?f+="..":f+="/..");return f.length>0?f+n.slice(a+u):(a+=u,47===n.charCodeAt(a)&&++a,n.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var n=e.charCodeAt(0),i=47===n,r=-1,o=!0,s=e.length-1;s>=1;--s)if(47===(n=e.charCodeAt(s))){if(!o){r=s;break}}else o=!1;return-1===r?i?"/":".":i&&1===r?"//":e.slice(0,r)},basename:function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');t(e);var i,r=0,o=-1,s=!0;if(void 0!==n&&n.length>0&&n.length<=e.length){if(n.length===e.length&&n===e)return"";var a=n.length-1,c=-1;for(i=e.length-1;i>=0;--i){var l=e.charCodeAt(i);if(47===l){if(!s){r=i+1;break}}else-1===c&&(s=!1,c=i+1),a>=0&&(l===n.charCodeAt(a)?-1==--a&&(o=i):(a=-1,o=c))}return r===o?o=c:-1===o&&(o=e.length),e.slice(r,o)}for(i=e.length-1;i>=0;--i)if(47===e.charCodeAt(i)){if(!s){r=i+1;break}}else-1===o&&(s=!1,o=i+1);return-1===o?"":e.slice(r,o)},extname:function(e){t(e);for(var n=-1,i=0,r=-1,o=!0,s=0,a=e.length-1;a>=0;--a){var c=e.charCodeAt(a);if(47!==c)-1===r&&(o=!1,r=a+1),46===c?-1===n?n=a:1!==s&&(s=1):-1!==n&&(s=-1);else if(!o){i=a+1;break}}return-1===n||-1===r||0===s||1===s&&n===r-1&&n===i+1?"":e.slice(n,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,i=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+i:n+"/"+i:i}(0,e)},parse:function(e){t(e);var n={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return n;var i,r=e.charCodeAt(0),o=47===r;o?(n.root="/",i=1):i=0;for(var s=-1,a=0,c=-1,l=!0,u=e.length-1,p=0;u>=i;--u)if(47!==(r=e.charCodeAt(u)))-1===c&&(l=!1,c=u+1),46===r?-1===s?s=u:1!==p&&(p=1):-1!==s&&(p=-1);else if(!l){a=u+1;break}return-1===s||-1===c||0===p||1===p&&s===c-1&&s===a+1?-1!==c&&(n.base=n.name=0===a&&o?e.slice(1,c):e.slice(a,c)):(0===a&&o?(n.name=e.slice(1,s),n.base=e.slice(1,c)):(n.name=e.slice(a,s),n.base=e.slice(a,c)),n.ext=e.slice(s,c)),a>0?n.dir=e.slice(0,a-1):o&&(n.dir="/"),n},sep:"/",delimiter:":",win32:null,posix:null};i.posix=i,e.exports=i},7129:(e,t)=>{"use strict";var n=Object.prototype.hasOwnProperty;function i(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function r(e){try{return encodeURIComponent(e)}catch(e){return null}}t.stringify=function(e,t){t=t||"";var i,o,s=[];for(o in"string"!=typeof t&&(t="?"),e)if(n.call(e,o)){if((i=e[o])||null!=i&&!isNaN(i)||(i=""),o=r(o),i=r(i),null===o||null===i)continue;s.push(o+"="+i)}return s.length?t+s.join("&"):""},t.parse=function(e){for(var t,n=/([^=?#&]+)=?([^&]*)/g,r={};t=n.exec(e);){var o=i(t[1]),s=i(t[2]);null===o||null===s||o in r||(r[o]=s)}return r}},7418:e=>{"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},8555:e=>{"use strict";e.exports={stdout:!1,stderr:!1}},4564:(e,t,n)=>{"use strict";var i=n(7418),r=n(7129),o=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,s=/[\n\r\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,c=/:\d+$/,l=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,u=/^[a-zA-Z]:/;function p(e){return(e||"").toString().replace(o,"")}var d=[["#","hash"],["?","query"],function(e,t){return m(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],f={hash:1,query:1};function h(e){var t,i=("undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{}).location||{},r={},o=typeof(e=e||i);if("blob:"===e.protocol)r=new v(unescape(e.pathname),{});else if("string"===o)for(t in r=new v(e,{}),f)delete r[t];else if("object"===o){for(t in e)t in f||(r[t]=e[t]);void 0===r.slashes&&(r.slashes=a.test(e.href))}return r}function m(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function y(e,t){e=(e=p(e)).replace(s,""),t=t||{};var n,i=l.exec(e),r=i[1]?i[1].toLowerCase():"",o=!!i[2],a=!!i[3],c=0;return o?a?(n=i[2]+i[3]+i[4],c=i[2].length+i[3].length):(n=i[2]+i[4],c=i[2].length):a?(n=i[3]+i[4],c=i[3].length):n=i[4],"file:"===r?c>=2&&(n=n.slice(2)):m(r)?n=i[4]:r?o&&(n=n.slice(2)):c>=2&&m(t.protocol)&&(n=i[4]),{protocol:r,slashes:o||m(r),slashesCount:c,rest:n}}function v(e,t,n){if(e=(e=p(e)).replace(s,""),!(this instanceof v))return new v(e,t,n);var o,a,c,l,f,E,T=d.slice(),g=typeof t,I=this,N=0;for("object"!==g&&"string"!==g&&(n=t,t=null),n&&"function"!=typeof n&&(n=r.parse),o=!(a=y(e||"",t=h(t))).protocol&&!a.slashes,I.slashes=a.slashes||o&&t.slashes,I.protocol=a.protocol||t.protocol||"",e=a.rest,("file:"===a.protocol&&(2!==a.slashesCount||u.test(e))||!a.slashes&&(a.protocol||a.slashesCount<2||!m(I.protocol)))&&(T[3]=[/(.*)/,"pathname"]);N<T.length;N++)"function"!=typeof(l=T[N])?(c=l[0],E=l[1],c!=c?I[E]=e:"string"==typeof c?~(f="@"===c?e.lastIndexOf(c):e.indexOf(c))&&("number"==typeof l[2]?(I[E]=e.slice(0,f),e=e.slice(f+l[2])):(I[E]=e.slice(f),e=e.slice(0,f))):(f=c.exec(e))&&(I[E]=f[1],e=e.slice(0,f.index)),I[E]=I[E]||o&&l[3]&&t[E]||"",l[4]&&(I[E]=I[E].toLowerCase())):e=l(e,I);n&&(I.query=n(I.query)),o&&t.slashes&&"/"!==I.pathname.charAt(0)&&(""!==I.pathname||""!==t.pathname)&&(I.pathname=function(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),i=n.length,r=n[i-1],o=!1,s=0;i--;)"."===n[i]?n.splice(i,1):".."===n[i]?(n.splice(i,1),s++):s&&(0===i&&(o=!0),n.splice(i,1),s--);return o&&n.unshift(""),"."!==r&&".."!==r||n.push(""),n.join("/")}(I.pathname,t.pathname)),"/"!==I.pathname.charAt(0)&&m(I.protocol)&&(I.pathname="/"+I.pathname),i(I.port,I.protocol)||(I.host=I.hostname,I.port=""),I.username=I.password="",I.auth&&(~(f=I.auth.indexOf(":"))?(I.username=I.auth.slice(0,f),I.username=encodeURIComponent(decodeURIComponent(I.username)),I.password=I.auth.slice(f+1),I.password=encodeURIComponent(decodeURIComponent(I.password))):I.username=encodeURIComponent(decodeURIComponent(I.auth)),I.auth=I.password?I.username+":"+I.password:I.username),I.origin="file:"!==I.protocol&&m(I.protocol)&&I.host?I.protocol+"//"+I.host:"null",I.href=I.toString()}v.prototype={set:function(e,t,n){var o=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||r.parse)(t)),o[e]=t;break;case"port":o[e]=t,i(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="");break;case"hostname":o[e]=t,o.port&&(t+=":"+o.port),o.host=t;break;case"host":o[e]=t,c.test(t)?(t=t.split(":"),o.port=t.pop(),o.hostname=t.join(":")):(o.hostname=t,o.port="");break;case"protocol":o.protocol=t.toLowerCase(),o.slashes=!n;break;case"pathname":case"hash":if(t){var s="pathname"===e?"/":"#";o[e]=t.charAt(0)!==s?s+t:t}else o[e]=t;break;case"username":case"password":o[e]=encodeURIComponent(t);break;case"auth":var a=t.indexOf(":");~a?(o.username=t.slice(0,a),o.username=encodeURIComponent(decodeURIComponent(o.username)),o.password=t.slice(a+1),o.password=encodeURIComponent(decodeURIComponent(o.password))):o.username=encodeURIComponent(decodeURIComponent(t))}for(var l=0;l<d.length;l++){var u=d[l];u[4]&&(o[u[1]]=o[u[1]].toLowerCase())}return o.auth=o.password?o.username+":"+o.password:o.username,o.origin="file:"!==o.protocol&&m(o.protocol)&&o.host?o.protocol+"//"+o.host:"null",o.href=o.toString(),o},toString:function(e){e&&"function"==typeof e||(e=r.stringify);var t,n=this,i=n.host,o=n.protocol;o&&":"!==o.charAt(o.length-1)&&(o+=":");var s=o+(n.protocol&&n.slashes||m(n.protocol)?"//":"");return n.username?(s+=n.username,n.password&&(s+=":"+n.password),s+="@"):n.password?(s+=":"+n.password,s+="@"):"file:"!==n.protocol&&m(n.protocol)&&!i&&"/"!==n.pathname&&(s+="@"),(":"===i[i.length-1]||c.test(n.hostname)&&!n.port)&&(i+=":"),s+=i+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(s+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(s+=n.hash),s}},v.extractProtocol=y,v.location=h,v.trimLeft=p,v.qs=r,e.exports=v},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},5955:(e,t,n)=>{"use strict";var i=n(2584),r=n(8662),o=n(6430),s=n(5692);function a(e){return e.call.bind(e)}var c="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,u=a(Object.prototype.toString),p=a(Number.prototype.valueOf),d=a(String.prototype.valueOf),f=a(Boolean.prototype.valueOf);if(c)var h=a(BigInt.prototype.valueOf);if(l)var m=a(Symbol.prototype.valueOf);function y(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function v(e){return"[object Map]"===u(e)}function E(e){return"[object Set]"===u(e)}function T(e){return"[object WeakMap]"===u(e)}function g(e){return"[object WeakSet]"===u(e)}function I(e){return"[object ArrayBuffer]"===u(e)}function N(e){return"undefined"!=typeof ArrayBuffer&&(I.working?I(e):e instanceof ArrayBuffer)}function b(e){return"[object DataView]"===u(e)}function _(e){return"undefined"!=typeof DataView&&(b.working?b(e):e instanceof DataView)}t.isArgumentsObject=i,t.isGeneratorFunction=r,t.isTypedArray=s,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):s(e)||_(e)},t.isUint8Array=function(e){return"Uint8Array"===o(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===o(e)},t.isUint16Array=function(e){return"Uint16Array"===o(e)},t.isUint32Array=function(e){return"Uint32Array"===o(e)},t.isInt8Array=function(e){return"Int8Array"===o(e)},t.isInt16Array=function(e){return"Int16Array"===o(e)},t.isInt32Array=function(e){return"Int32Array"===o(e)},t.isFloat32Array=function(e){return"Float32Array"===o(e)},t.isFloat64Array=function(e){return"Float64Array"===o(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===o(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===o(e)},v.working="undefined"!=typeof Map&&v(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(v.working?v(e):e instanceof Map)},E.working="undefined"!=typeof Set&&E(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(E.working?E(e):e instanceof Set)},T.working="undefined"!=typeof WeakMap&&T(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(T.working?T(e):e instanceof WeakMap)},g.working="undefined"!=typeof WeakSet&&g(new WeakSet),t.isWeakSet=function(e){return g(e)},I.working="undefined"!=typeof ArrayBuffer&&I(new ArrayBuffer),t.isArrayBuffer=N,b.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&b(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=_;var S="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function O(e){return"[object SharedArrayBuffer]"===u(e)}function D(e){return void 0!==S&&(void 0===O.working&&(O.working=O(new S)),O.working?O(e):e instanceof S)}function A(e){return y(e,p)}function R(e){return y(e,d)}function w(e){return y(e,f)}function L(e){return c&&y(e,h)}function F(e){return l&&y(e,m)}t.isSharedArrayBuffer=D,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===u(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===u(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===u(e)},t.isGeneratorObject=function(e){return"[object Generator]"===u(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===u(e)},t.isNumberObject=A,t.isStringObject=R,t.isBooleanObject=w,t.isBigIntObject=L,t.isSymbolObject=F,t.isBoxedPrimitive=function(e){return A(e)||R(e)||w(e)||L(e)||F(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(N(e)||D(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},9539:(e,t,n)=>{var i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++)n[t[i]]=Object.getOwnPropertyDescriptor(e,t[i]);return n},r=/%[sdj%]/g;t.format=function(e){if(!E(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,o=i.length,s=String(e).replace(r,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}})),a=i[n];n<o;a=i[++n])y(a)||!I(a)?s+=" "+a:s+=" "+c(a);return s},t.deprecate=function(e,n){if("undefined"!=typeof process&&!0===process.noDeprecation)return e;if("undefined"==typeof process)return function(){return t.deprecate(e,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(process.throwDeprecation)throw new Error(n);process.traceDeprecation?console.trace(n):console.error(n),i=!0}return e.apply(this,arguments)}};var o={},s=/^$/;if(process.env.NODE_DEBUG){var a=process.env.NODE_DEBUG;a=a.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+a+"$","i")}function c(e,n){var i={seen:[],stylize:u};return arguments.length>=3&&(i.depth=arguments[2]),arguments.length>=4&&(i.colors=arguments[3]),m(n)?i.showHidden=n:n&&t._extend(i,n),T(i.showHidden)&&(i.showHidden=!1),T(i.depth)&&(i.depth=2),T(i.colors)&&(i.colors=!1),T(i.customInspect)&&(i.customInspect=!0),i.colors&&(i.stylize=l),p(i,e,i.depth)}function l(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function u(e,t){return e}function p(e,n,i){if(e.customInspect&&n&&_(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var r=n.inspect(i,e);return E(r)||(r=p(e,r,i)),r}var o=function(e,t){if(T(t))return e.stylize("undefined","undefined");if(E(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return v(t)?e.stylize(""+t,"number"):m(t)?e.stylize(""+t,"boolean"):y(t)?e.stylize("null","null"):void 0}(e,n);if(o)return o;var s=Object.keys(n),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),b(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return d(n);if(0===s.length){if(_(n)){var c=n.name?": "+n.name:"";return e.stylize("[Function"+c+"]","special")}if(g(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(N(n))return e.stylize(Date.prototype.toString.call(n),"date");if(b(n))return d(n)}var l,u="",I=!1,S=["{","}"];return h(n)&&(I=!0,S=["[","]"]),_(n)&&(u=" [Function"+(n.name?": "+n.name:"")+"]"),g(n)&&(u=" "+RegExp.prototype.toString.call(n)),N(n)&&(u=" "+Date.prototype.toUTCString.call(n)),b(n)&&(u=" "+d(n)),0!==s.length||I&&0!=n.length?i<0?g(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=I?function(e,t,n,i,r){for(var o=[],s=0,a=t.length;s<a;++s)R(t,String(s))?o.push(f(e,t,n,i,String(s),!0)):o.push("");return r.forEach((function(r){r.match(/^\d+$/)||o.push(f(e,t,n,i,r,!0))})),o}(e,n,i,a,s):s.map((function(t){return f(e,n,i,a,t,I)})),e.seen.pop(),function(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(l,u,S)):S[0]+u+S[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,i,r,o){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),R(i,r)||(s="["+r+"]"),a||(e.seen.indexOf(c.value)<0?(a=y(n)?p(e,c.value,null):p(e,c.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),T(s)){if(o&&r.match(/^\d+$/))return a;(s=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function h(e){return Array.isArray(e)}function m(e){return"boolean"==typeof e}function y(e){return null===e}function v(e){return"number"==typeof e}function E(e){return"string"==typeof e}function T(e){return void 0===e}function g(e){return I(e)&&"[object RegExp]"===S(e)}function I(e){return"object"==typeof e&&null!==e}function N(e){return I(e)&&"[object Date]"===S(e)}function b(e){return I(e)&&("[object Error]"===S(e)||e instanceof Error)}function _(e){return"function"==typeof e}function S(e){return Object.prototype.toString.call(e)}function O(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!o[e])if(s.test(e)){var n=process.pid;o[e]=function(){var i=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,i)}}else o[e]=function(){};return o[e]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=n(5955),t.isArray=h,t.isBoolean=m,t.isNull=y,t.isNullOrUndefined=function(e){return null==e},t.isNumber=v,t.isString=E,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=T,t.isRegExp=g,t.types.isRegExp=g,t.isObject=I,t.isDate=N,t.types.isDate=N,t.isError=b,t.types.isNativeError=b,t.isFunction=_,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(384);var D=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var e=new Date,t=[O(e.getHours()),O(e.getMinutes()),O(e.getSeconds())].join(":");return[e.getDate(),D[e.getMonth()],t].join(" ")}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",A(),t.format.apply(t,arguments))},t.inherits=n(5717),t._extend=function(e,t){if(!t||!I(t))return e;for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e};var w="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function L(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(w&&e[w]){var t;if("function"!=typeof(t=e[w]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,i=new Promise((function(e,i){t=e,n=i})),r=[],o=0;o<arguments.length;o++)r.push(arguments[o]);r.push((function(e,i){e?n(e):t(i)}));try{e.apply(this,r)}catch(e){n(e)}return i}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),w&&Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=w,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]);var i=t.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var r=this,o=function(){return i.apply(r,arguments)};e.apply(this,t).then((function(e){process.nextTick(o.bind(null,null,e))}),(function(e){process.nextTick(L.bind(null,e,o))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,i(e)),t}},6430:(e,t,n)=>{"use strict";var i=n(4029),r=n(3083),o=n(1924),s=n(7296),a=o("Object.prototype.toString"),c=n(6410)(),l="undefined"==typeof globalThis?n.g:globalThis,u=r(),p=o("String.prototype.slice"),d={},f=Object.getPrototypeOf;c&&s&&f&&i(u,(function(e){if("function"==typeof l[e]){var t=new l[e];if(Symbol.toStringTag in t){var n=f(t),i=s(n,Symbol.toStringTag);if(!i){var r=f(n);i=s(r,Symbol.toStringTag)}d[e]=i.get}}}));var h=n(5692);e.exports=function(e){return!!h(e)&&(c&&Symbol.toStringTag in e?function(e){var t=!1;return i(d,(function(n,i){if(!t)try{var r=n.call(e);r===i&&(t=r)}catch(e){}})),t}(e):p(a(e),8,-1))}},4888:(e,t,n)=>{"use strict";n.r(t),n.d(t,{URL:()=>i});let i=n(4564)},8222:()=>{},3083:(e,t,n)=>{"use strict";var i=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],r="undefined"==typeof globalThis?n.g:globalThis;e.exports=function(){for(var e=[],t=0;t<i.length;t++)"function"==typeof r[i[t]]&&(e[e.length]=i[t]);return e}},8087:(e,t,n)=>{"use strict";n.d(t,{OS:()=>c,Z:()=>l,__:()=>s});var i=n(8495),r=n(7867),o=n(850);class s extends Error{constructor(e,...t){var n,o,c;const{nodes:l,source:u,positions:p,path:d,originalError:f,extensions:h}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=d?d:void 0,this.originalError=null!=f?f:void 0,this.nodes=a(Array.isArray(l)?l:l?[l]:void 0);const m=a(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=u?u:null==m||null===(o=m[0])||void 0===o?void 0:o.source,this.positions=null!=p?p:null==m?void 0:m.map((e=>e.start)),this.locations=p&&u?p.map((e=>(0,r.k)(u,e))):null==m?void 0:m.map((e=>(0,r.k)(e.source,e.start)));const y=(0,i.y)(null==f?void 0:f.extensions)?null==f?void 0:f.extensions:void 0;this.extensions=null!==(c=null!=h?h:y)&&void 0!==c?c:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=f&&f.stack?Object.defineProperty(this,"stack",{value:f.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,s):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const t of this.nodes)t.loc&&(e+="\n\n"+(0,o.Q)(t.loc));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+(0,o.z)(this.source,t);return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function a(e){return void 0===e||0===e.length?void 0:e}function c(e){return e.toString()}function l(e){return e.toJSON()}},4181:(e,t,n)=>{"use strict";n.d(t,{y:()=>s});var i=n(5821);class r extends Error{constructor(e){super("Unexpected error value: "+(0,i.X)(e)),this.name="NonErrorThrown",this.thrownValue=e}}var o=n(8087);function s(e,t,n){var i;const s=(a=e)instanceof Error?a:new r(a);var a,c;return c=s,Array.isArray(c.path)?s:new o.__(s.message,{nodes:null!==(i=s.nodes)&&void 0!==i?i:t,source:s.source,positions:s.positions,path:n,originalError:s})}},5219:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var i=n(8087);function r(e,t,n){return new i.__(`Syntax Error: ${n}`,{source:e,positions:[t]})}},7677:(e,t,n)=>{"use strict";n.d(t,{g:()=>c,w:()=>l});var i=n(7359),r=n(398),o=n(8238),s=n(77),a=n(6422);function c(e,t,n,i,r){const o=new Map;return u(e,t,n,i,r,o,new Set),o}function l(e,t,n,i,r){const o=new Map,s=new Set;for(const a of r)a.selectionSet&&u(e,t,n,i,a.selectionSet,o,s);return o}function u(e,t,n,r,o,s,a){for(const l of o.selections)switch(l.kind){case i.h.FIELD:{if(!p(n,l))continue;const e=(c=l).alias?c.alias.value:c.name.value,t=s.get(e);void 0!==t?t.push(l):s.set(e,[l]);break}case i.h.INLINE_FRAGMENT:if(!p(n,l)||!d(e,l,r))continue;u(e,t,n,r,l.selectionSet,s,a);break;case i.h.FRAGMENT_SPREAD:{const i=l.name.value;if(a.has(i)||!p(n,l))continue;a.add(i);const o=t[i];if(!o||!d(e,o,r))continue;u(e,t,n,r,o.selectionSet,s,a);break}}var c}function p(e,t){const n=(0,a.zu)(o.QE,t,e);if(!0===(null==n?void 0:n.if))return!1;const i=(0,a.zu)(o.Yf,t,e);return!1!==(null==i?void 0:i.if)}function d(e,t,n){const i=t.typeCondition;if(!i)return!0;const o=(0,s._)(e,i);return o===n||!!(0,r.m0)(o)&&e.isSubType(o,n)}},5329:(e,t,n)=>{"use strict";n.d(t,{td:()=>b,VZ:()=>_,p$:()=>A,El:()=>$,mn:()=>k,ht:()=>g,p0:()=>I,Vm:()=>C});var i=n(7826),r=n(5821),o=n(9551),s=n(3831),a=n(8495),c=n(8659),l=n(9380),u=n(8087),p=n(4181),d=n(2380),f=n(7359),h=n(398),m=n(2433),y=n(9655),v=n(7677),E=n(6422);const T=function(e){let t;return function(e,n,i){void 0===t&&(t=new WeakMap);let r=t.get(e);void 0===r&&(r=new WeakMap,t.set(e,r));let o=r.get(n);void 0===o&&(o=new WeakMap,r.set(n,o));let s=o.get(i);return void 0===s&&(a=e,c=n,l=i,s=(0,v.w)(a.schema,a.fragments,a.variableValues,c,l),o.set(i,s)),s;var a,c,l}}();function g(e){arguments.length<2||(0,i.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,document:n,variableValues:r,rootValue:o}=e;b(t,n,r);const s=_(e);if(!("schema"in s))return{errors:s};try{const{operation:e}=s,t=S(s,e,o);return(0,c.t)(t)?t.then((e=>N(e,s.errors)),(e=>(s.errors.push(e),N(null,s.errors)))):N(t,s.errors)}catch(e){return s.errors.push(e),N(null,s.errors)}}function I(e){const t=g(e);if((0,c.t)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function N(e,t){return 0===t.length?{data:e}:{errors:t,data:e}}function b(e,t,n){t||(0,i.a)(!1,"Must provide document."),(0,y.J)(e),null==n||(0,a.y)(n)||(0,i.a)(!1,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function _(e){var t,n;const{schema:i,document:r,rootValue:o,contextValue:s,variableValues:a,operationName:c,fieldResolver:l,typeResolver:p,subscribeFieldResolver:d}=e;let h;const m=Object.create(null);for(const e of r.definitions)switch(e.kind){case f.h.OPERATION_DEFINITION:if(null==c){if(void 0!==h)return[new u.__("Must provide operation name if query contains multiple operations.")];h=e}else(null===(t=e.name)||void 0===t?void 0:t.value)===c&&(h=e);break;case f.h.FRAGMENT_DEFINITION:m[e.name.value]=e}if(!h)return null!=c?[new u.__(`Unknown operation named "${c}".`)]:[new u.__("Must provide an operation.")];const y=null!==(n=h.variableDefinitions)&&void 0!==n?n:[],v=(0,E.QF)(i,y,null!=a?a:{},{maxErrors:50});return v.errors?v.errors:{schema:i,fragments:m,rootValue:o,contextValue:s,operation:h,variableValues:v.coerced,fieldResolver:null!=l?l:$,typeResolver:null!=p?p:k,subscribeFieldResolver:null!=d?d:$,errors:[]}}function S(e,t,n){const i=e.schema.getRootType(t.operation);if(null==i)throw new u.__(`Schema is not configured to execute ${t.operation} operation.`,{nodes:t});const r=(0,v.g)(e.schema,e.fragments,e.variableValues,i,t.selectionSet),o=void 0;switch(t.operation){case d.ku.QUERY:return O(e,i,n,o,r);case d.ku.MUTATION:return function(e,t,n,i,r){return function(e,t,n){let i=Object.create(null);for(const n of e)i=(0,c.t)(i)?i.then((e=>t(e,n))):t(i,n);return i}(r.entries(),((i,[r,o])=>{const s=(0,l.Q)(undefined,r,t.name),a=D(e,t,n,o,s);return void 0===a?i:(0,c.t)(a)?a.then((e=>(i[r]=e,i))):(i[r]=a,i)}))}(e,i,n,0,r);case d.ku.SUBSCRIPTION:return O(e,i,n,o,r)}}function O(e,t,n,i,r){const o=Object.create(null);let s=!1;for(const[a,u]of r.entries()){const r=D(e,t,n,u,(0,l.Q)(i,a,t.name));void 0!==r&&(o[a]=r,(0,c.t)(r)&&(s=!0))}return s?(a=o,Promise.all(Object.values(a)).then((e=>{const t=Object.create(null);for(const[n,i]of Object.keys(a).entries())t[i]=e[n];return t}))):o;var a}function D(e,t,n,i,r){var o;const s=C(e.schema,t,i[0]);if(!s)return;const a=s.type,u=null!==(o=s.resolve)&&void 0!==o?o:e.fieldResolver,d=A(e,s,i,t,r);try{const t=u(n,(0,E.LX)(s,i[0],e.variableValues),e.contextValue,d);let o;return o=(0,c.t)(t)?t.then((t=>w(e,a,i,d,r,t))):w(e,a,i,d,r,t),(0,c.t)(o)?o.then(void 0,(t=>R((0,p.y)(t,i,(0,l.N)(r)),a,e))):o}catch(t){return R((0,p.y)(t,i,(0,l.N)(r)),a,e)}}function A(e,t,n,i,r){return{fieldName:t.name,fieldNodes:n,returnType:t.type,parentType:i,path:r,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function R(e,t,n){if((0,h.zM)(t))throw e;return n.errors.push(e),null}function w(e,t,n,i,a,d){if(d instanceof Error)throw d;if((0,h.zM)(t)){const r=w(e,t.ofType,n,i,a,d);if(null===r)throw new Error(`Cannot return null for non-nullable field ${i.parentType.name}.${i.fieldName}.`);return r}return null==d?null:(0,h.HG)(t)?function(e,t,n,i,r,o){if(!(0,s.i)(o))throw new u.__(`Expected Iterable, but did not find one for field "${i.parentType.name}.${i.fieldName}".`);const a=t.ofType;let d=!1;const f=Array.from(o,((t,o)=>{const s=(0,l.Q)(r,o,void 0);try{let r;return r=(0,c.t)(t)?t.then((t=>w(e,a,n,i,s,t))):w(e,a,n,i,s,t),(0,c.t)(r)?(d=!0,r.then(void 0,(t=>R((0,p.y)(t,n,(0,l.N)(s)),a,e)))):r}catch(t){return R((0,p.y)(t,n,(0,l.N)(s)),a,e)}}));return d?Promise.all(f):f}(e,t,n,i,a,d):(0,h.UT)(t)?function(e,t){const n=e.serialize(t);if(null==n)throw new Error(`Expected \`${(0,r.X)(e)}.serialize(${(0,r.X)(t)})\` to return non-nullable value, returned: ${(0,r.X)(n)}`);return n}(t,d):(0,h.m0)(t)?function(e,t,n,i,r,o){var s;const a=null!==(s=t.resolveType)&&void 0!==s?s:e.typeResolver,l=e.contextValue,u=a(o,l,i,t);return(0,c.t)(u)?u.then((s=>F(e,L(s,e,t,n,i,o),n,i,r,o))):F(e,L(u,e,t,n,i,o),n,i,r,o)}(e,t,n,i,a,d):(0,h.lp)(t)?F(e,t,n,i,a,d):void(0,o.k)(!1,"Cannot complete value of unexpected output type: "+(0,r.X)(t))}function L(e,t,n,i,o,s){if(null==e)throw new u.__(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${o.parentType.name}.${o.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,i);if((0,h.lp)(e))throw new u.__("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");if("string"!=typeof e)throw new u.__(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${o.parentType.name}.${o.fieldName}" with value ${(0,r.X)(s)}, received "${(0,r.X)(e)}".`);const a=t.schema.getType(e);if(null==a)throw new u.__(`Abstract type "${n.name}" was resolved to a type "${e}" that does not exist inside the schema.`,{nodes:i});if(!(0,h.lp)(a))throw new u.__(`Abstract type "${n.name}" was resolved to a non-object type "${e}".`,{nodes:i});if(!t.schema.isSubType(n,a))throw new u.__(`Runtime Object type "${a.name}" is not a possible type for "${n.name}".`,{nodes:i});return a}function F(e,t,n,i,r,o){const s=T(e,t,n);if(t.isTypeOf){const a=t.isTypeOf(o,e.contextValue,i);if((0,c.t)(a))return a.then((i=>{if(!i)throw x(t,o,n);return O(e,t,o,r,s)}));if(!a)throw x(t,o,n)}return O(e,t,o,r,s)}function x(e,t,n){return new u.__(`Expected value of type "${e.name}" but got: ${(0,r.X)(t)}.`,{nodes:n})}const k=function(e,t,n,i){if((0,a.y)(e)&&"string"==typeof e.__typename)return e.__typename;const r=n.schema.getPossibleTypes(i),o=[];for(let i=0;i<r.length;i++){const s=r[i];if(s.isTypeOf){const r=s.isTypeOf(e,t,n);if((0,c.t)(r))o[i]=r;else if(r)return s.name}}return o.length?Promise.all(o).then((e=>{for(let t=0;t<e.length;t++)if(e[t])return r[t].name})):void 0},$=function(e,t,n,i){if((0,a.y)(e)||"function"==typeof e){const r=e[i.fieldName];return"function"==typeof r?e[i.fieldName](t,n,i):r}};function C(e,t,n){const i=n.name.value;return i===m.Az.name&&e.getQueryType()===t?m.Az:i===m.tF.name&&e.getQueryType()===t?m.tF:i===m.hU.name?m.hU:t.getFields()[i]}},6422:(e,t,n)=>{"use strict";n.d(t,{LX:()=>h,QF:()=>f,zu:()=>m});var i=n(5821),r=n(3498),o=n(4244),s=n(8087),a=n(7359),c=n(3486),l=n(398),u=n(7816),p=n(77),d=n(2221);function f(e,t,n,r){const a=[],f=null==r?void 0:r.maxErrors;try{const r=function(e,t,n,r){const a={};for(const f of t){const t=f.variable.name.value,h=(0,p._)(e,f.type);if(!(0,l.j$)(h)){const e=(0,c.S)(f.type);r(new s.__(`Variable "$${t}" expected value of type "${e}" which cannot be used as an input type.`,{nodes:f.type}));continue}if(!y(n,t)){if(f.defaultValue)a[t]=(0,d.u)(f.defaultValue,h);else if((0,l.zM)(h)){const e=(0,i.X)(h);r(new s.__(`Variable "$${t}" of required type "${e}" was not provided.`,{nodes:f}))}continue}const m=n[t];if(null===m&&(0,l.zM)(h)){const e=(0,i.X)(h);r(new s.__(`Variable "$${t}" of non-null type "${e}" must not be null.`,{nodes:f}))}else a[t]=(0,u.K)(m,h,((e,n,a)=>{let c=`Variable "$${t}" got invalid value `+(0,i.X)(n);e.length>0&&(c+=` at "${t}${(0,o.F)(e)}"`),r(new s.__(c+"; "+a.message,{nodes:f,originalError:a.originalError}))}))}return a}(e,t,n,(e=>{if(null!=f&&a.length>=f)throw new s.__("Too many errors processing variables, error limit reached. Execution aborted.");a.push(e)}));if(0===a.length)return{coerced:r}}catch(e){a.push(e)}return{errors:a}}function h(e,t,n){var o;const u={},p=null!==(o=t.arguments)&&void 0!==o?o:[],f=(0,r.P)(p,(e=>e.name.value));for(const r of e.args){const e=r.name,o=r.type,p=f[e];if(!p){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.zM)(o))throw new s.__(`Argument "${e}" of required type "${(0,i.X)(o)}" was not provided.`,{nodes:t});continue}const h=p.value;let m=h.kind===a.h.NULL;if(h.kind===a.h.VARIABLE){const t=h.name.value;if(null==n||!y(n,t)){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.zM)(o))throw new s.__(`Argument "${e}" of required type "${(0,i.X)(o)}" was provided the variable "$${t}" which was not provided a runtime value.`,{nodes:h});continue}m=null==n[t]}if(m&&(0,l.zM)(o))throw new s.__(`Argument "${e}" of non-null type "${(0,i.X)(o)}" must not be null.`,{nodes:h});const v=(0,d.u)(h,o,n);if(void 0===v)throw new s.__(`Argument "${e}" has invalid value ${(0,c.S)(h)}.`,{nodes:h});u[e]=v}return u}function m(e,t,n){var i;const r=null===(i=t.directives)||void 0===i?void 0:i.find((t=>t.name.value===e.name));if(r)return h(e,r,n)}function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},2244:(e,t,n)=>{"use strict";n.d(t,{B:()=>l,V:()=>u});var i=n(7826),r=n(8659),o=n(4275),s=n(9655),a=n(6584),c=n(5329);function l(e){return new Promise((t=>t(p(e))))}function u(e){const t=p(e);if((0,r.t)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function p(e){arguments.length<2||(0,i.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,source:n,rootValue:r,contextValue:l,variableValues:u,operationName:p,fieldResolver:d,typeResolver:f}=e,h=(0,s.F)(t);if(h.length>0)return{errors:h};let m;try{m=(0,o.Qc)(n)}catch(e){return{errors:[e]}}const y=(0,a.Gu)(t,m);return y.length>0?{errors:y}:(0,c.ht)({schema:t,document:m,rootValue:r,contextValue:l,variableValues:u,operationName:p,fieldResolver:d,typeResolver:f})}},8929:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BREAK:()=>I.$_,BreakingChangeType:()=>ot,DEFAULT_DEPRECATION_REASON:()=>c.SY,DangerousChangeType:()=>st,DirectiveLocation:()=>b.B,ExecutableDefinitionsRule:()=>B.i,FieldsOnCorrectTypeRule:()=>Q.A,FragmentsOnCompositeTypesRule:()=>K.T,GRAPHQL_MAX_INT:()=>l.HI,GRAPHQL_MIN_INT:()=>l.st,GraphQLBoolean:()=>l.EZ,GraphQLDeprecatedDirective:()=>c.fg,GraphQLDirective:()=>c.NZ,GraphQLEnumType:()=>s.mR,GraphQLError:()=>R.__,GraphQLFloat:()=>l.av,GraphQLID:()=>l.km,GraphQLIncludeDirective:()=>c.Yf,GraphQLInputObjectType:()=>s.sR,GraphQLInt:()=>l._o,GraphQLInterfaceType:()=>s.oW,GraphQLList:()=>s.p2,GraphQLNonNull:()=>s.bM,GraphQLObjectType:()=>s.h6,GraphQLScalarType:()=>s.n2,GraphQLSchema:()=>a.XO,GraphQLSkipDirective:()=>c.QE,GraphQLSpecifiedByDirective:()=>c.df,GraphQLString:()=>l.kH,GraphQLUnionType:()=>s.Gp,Kind:()=>N.h,KnownArgumentNamesRule:()=>q.e,KnownDirectivesRule:()=>Y.J,KnownFragmentNamesRule:()=>H.a,KnownTypeNamesRule:()=>X.I,Lexer:()=>v.h,Location:()=>f.Ye,LoneAnonymousOperationRule:()=>z.F,LoneSchemaDefinitionRule:()=>me.t,NoDeprecatedCustomRule:()=>M,NoFragmentCyclesRule:()=>J.H,NoSchemaIntrospectionCustomRule:()=>P,NoUndefinedVariablesRule:()=>W.$,NoUnusedFragmentsRule:()=>Z.J,NoUnusedVariablesRule:()=>ee.p,OperationTypeNode:()=>f.ku,OverlappingFieldsCanBeMergedRule:()=>te.y,PossibleFragmentSpreadsRule:()=>ne.a,PossibleTypeExtensionsRule:()=>Ne.g,ProvidedRequiredArgumentsRule:()=>ie.s,ScalarLeafsRule:()=>re.O,SchemaMetaFieldDef:()=>u.Az,SingleFieldSubscriptionsRule:()=>oe.Z,Source:()=>h.H,Token:()=>f.WU,TokenKind:()=>E.T,TypeInfo:()=>Rt.a,TypeKind:()=>u.zU,TypeMetaFieldDef:()=>u.tF,TypeNameMetaFieldDef:()=>u.hU,UniqueArgumentDefinitionNamesRule:()=>ge.L,UniqueArgumentNamesRule:()=>se.L,UniqueDirectiveNamesRule:()=>Ie.o,UniqueDirectivesPerLocationRule:()=>ae.k,UniqueEnumValueNamesRule:()=>Ee.L,UniqueFieldDefinitionNamesRule:()=>Te.y,UniqueFragmentNamesRule:()=>ce.N,UniqueInputFieldNamesRule:()=>le.P,UniqueOperationNamesRule:()=>ue.H,UniqueOperationTypesRule:()=>ye.q,UniqueTypeNamesRule:()=>ve.P,UniqueVariableNamesRule:()=>pe.H,ValidationContext:()=>V._t,ValuesOfCorrectTypeRule:()=>de.j,VariablesAreInputTypesRule:()=>fe.I,VariablesInAllowedPositionRule:()=>he.w,__Directive:()=>u.l3,__DirectiveLocation:()=>u.x2,__EnumValue:()=>u.jT,__Field:()=>u.e_,__InputValue:()=>u.XQ,__Schema:()=>u.TK,__Type:()=>u.qz,__TypeKind:()=>u.PX,assertAbstractType:()=>s.fU,assertCompositeType:()=>s.M_,assertDirective:()=>c.CO,assertEnumType:()=>s.Zu,assertEnumValueName:()=>d.g,assertInputObjectType:()=>s.U8,assertInputType:()=>s.qT,assertInterfaceType:()=>s.k2,assertLeafType:()=>s.H5,assertListType:()=>s.kS,assertName:()=>d.i,assertNamedType:()=>s.rM,assertNonNullType:()=>s.E$,assertNullableType:()=>s.i_,assertObjectType:()=>s.Z6,assertOutputType:()=>s.Gt,assertScalarType:()=>s.Pt,assertSchema:()=>a.EO,assertType:()=>s.p_,assertUnionType:()=>s.rc,assertValidName:()=>it,assertValidSchema:()=>p.J,assertWrappingType:()=>s.vX,astFromValue:()=>Me.J,buildASTSchema:()=>St.M,buildClientSchema:()=>Le,buildSchema:()=>St.I,coerceInputValue:()=>wt.K,concatAST:()=>We,createSourceEventStream:()=>C,defaultFieldResolver:()=>F.El,defaultTypeResolver:()=>F.mn,doTypesOverlap:()=>Lt.zR,execute:()=>F.ht,executeSync:()=>F.p0,extendSchema:()=>Ot.a,findBreakingChanges:()=>lt,findDangerousChanges:()=>ut,formatError:()=>R.Z,getArgumentValues:()=>k.LX,getDirectiveValues:()=>k.zu,getEnterLeaveForKind:()=>I.Eu,getIntrospectionQuery:()=>_e,getLocation:()=>m.k,getNamedType:()=>s.xC,getNullableType:()=>s.tf,getOperationAST:()=>Se,getOperationRootType:()=>Oe,getVariableValues:()=>k.QF,getVisitFn:()=>I.CK,graphql:()=>o.B,graphqlSync:()=>o.V,introspectionFromSchema:()=>De,introspectionTypes:()=>u.nL,isAbstractType:()=>s.m0,isCompositeType:()=>s.Gv,isConstValueNode:()=>_.Of,isDefinitionNode:()=>_.Ir,isDirective:()=>c.wX,isEnumType:()=>s.EM,isEqualType:()=>Lt._7,isExecutableDefinitionNode:()=>_.Wk,isInputObjectType:()=>s.hL,isInputType:()=>s.j$,isInterfaceType:()=>s.oT,isIntrospectionType:()=>u.s9,isLeafType:()=>s.UT,isListType:()=>s.HG,isNamedType:()=>s.Zs,isNonNullType:()=>s.zM,isNullableType:()=>s.zP,isObjectType:()=>s.lp,isOutputType:()=>s.SZ,isRequiredArgument:()=>s.dK,isRequiredInputField:()=>s.Wd,isScalarType:()=>s.KA,isSchema:()=>a.nN,isSelectionNode:()=>_.pO,isSpecifiedDirective:()=>c.xg,isSpecifiedScalarType:()=>l.u1,isType:()=>s.P9,isTypeDefinitionNode:()=>_.zT,isTypeExtensionNode:()=>_.D$,isTypeNode:()=>_.VB,isTypeSubTypeOf:()=>Lt.uJ,isTypeSystemDefinitionNode:()=>_.G4,isTypeSystemExtensionNode:()=>_.aU,isUnionType:()=>s.EN,isValidNameError:()=>rt,isValueNode:()=>_.nr,isWrappingType:()=>s.fw,lexicographicSortSchema:()=>xe,locatedError:()=>w.y,parse:()=>T.Qc,parseConstValue:()=>T.tl,parseType:()=>T.gZ,parseValue:()=>T.H2,print:()=>g.S,printError:()=>R.OS,printIntrospectionSchema:()=>Ue,printLocation:()=>y.Q,printSchema:()=>Pe,printSourceLocation:()=>y.z,printType:()=>Qe,resolveObjMapThunk:()=>s.WB,resolveReadonlyArrayThunk:()=>s._9,responsePathAsArray:()=>A.N,separateOperations:()=>Ze,specifiedDirectives:()=>c.V4,specifiedRules:()=>G.i,specifiedScalarTypes:()=>l.HS,stripIgnoredCharacters:()=>nt,subscribe:()=>$,syntaxError:()=>be.h,typeFromAST:()=>Dt._,validate:()=>U.Gu,validateSchema:()=>p.F,valueFromAST:()=>we.u,valueFromASTUntyped:()=>At.M,version:()=>i,versionInfo:()=>r,visit:()=>I.Vn,visitInParallel:()=>I.j1,visitWithTypeInfo:()=>Rt.y});const i="16.6.0",r=Object.freeze({major:16,minor:6,patch:0,preReleaseTag:null});var o=n(2244),s=n(398),a=n(9678),c=n(8238),l=n(3801),u=n(2433),p=n(9655),d=n(6303),f=n(2380),h=n(7926),m=n(7867),y=n(850),v=n(2105),E=n(4635),T=n(4275),g=n(3486),I=n(7304),N=n(7359),b=n(9878),_=n(5844),S=n(7826),O=n(5821);function D(e){return"function"==typeof(null==e?void 0:e[Symbol.asyncIterator])}var A=n(9380),R=n(8087),w=n(4181),L=n(7677),F=n(5329);function x(e,t){const n=e[Symbol.asyncIterator]();async function i(e){if(e.done)return e;try{return{value:await t(e.value),done:!1}}catch(e){if("function"==typeof n.return)try{await n.return()}catch(e){}throw e}}return{next:async()=>i(await n.next()),return:async()=>"function"==typeof n.return?i(await n.return()):{value:void 0,done:!0},async throw(e){if("function"==typeof n.throw)return i(await n.throw(e));throw e},[Symbol.asyncIterator](){return this}}}var k=n(6422);async function $(e){arguments.length<2||(0,S.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const t=await C(e);if(!D(t))return t;const n=t=>(0,F.ht)({...e,rootValue:t});return x(t,n)}async function C(...e){const t=function(e){const t=e[0];return t&&"document"in t?t:{schema:t,document:e[1],rootValue:e[2],contextValue:e[3],variableValues:e[4],operationName:e[5],subscribeFieldResolver:e[6]}}(e),{schema:n,document:i,variableValues:r}=t;(0,F.td)(n,i,r);const o=(0,F.VZ)(t);if(!("schema"in o))return{errors:o};try{const e=await async function(e){const{schema:t,fragments:n,operation:i,variableValues:r,rootValue:o}=e,s=t.getSubscriptionType();if(null==s)throw new R.__("Schema is not configured to execute subscription operation.",{nodes:i});const a=(0,L.g)(t,n,r,s,i.selectionSet),[c,l]=[...a.entries()][0],u=(0,F.Vm)(t,s,l[0]);if(!u){const e=l[0].name.value;throw new R.__(`The subscription field "${e}" is not defined.`,{nodes:l})}const p=(0,A.Q)(void 0,c,s.name),d=(0,F.p$)(e,u,l,s,p);try{var f;const t=(0,k.LX)(u,l[0],r),n=e.contextValue,i=null!==(f=u.subscribe)&&void 0!==f?f:e.subscribeFieldResolver,s=await i(o,t,n,d);if(s instanceof Error)throw s;return s}catch(e){throw(0,w.y)(e,l,(0,A.N)(p))}}(o);if(!D(e))throw new Error(`Subscription field must return Async Iterable. Received: ${(0,O.X)(e)}.`);return e}catch(e){if(e instanceof R.__)return{errors:[e]};throw e}}var j=n(9551);function M(e){return{Field(t){const n=e.getFieldDef(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=e.getParentType();null!=r||(0,j.k)(!1),e.reportError(new R.__(`The field ${r.name}.${n.name} is deprecated. ${i}`,{nodes:t}))}},Argument(t){const n=e.getArgument(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=e.getDirective();if(null!=r)e.reportError(new R.__(`Directive "@${r.name}" argument "${n.name}" is deprecated. ${i}`,{nodes:t}));else{const r=e.getParentType(),o=e.getFieldDef();null!=r&&null!=o||(0,j.k)(!1),e.reportError(new R.__(`Field "${r.name}.${o.name}" argument "${n.name}" is deprecated. ${i}`,{nodes:t}))}}},ObjectField(t){const n=(0,s.xC)(e.getParentInputType());if((0,s.hL)(n)){const i=n.getFields()[t.name.value],r=null==i?void 0:i.deprecationReason;null!=r&&e.reportError(new R.__(`The input field ${n.name}.${i.name} is deprecated. ${r}`,{nodes:t}))}},EnumValue(t){const n=e.getEnumValue(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=(0,s.xC)(e.getInputType());null!=r||(0,j.k)(!1),e.reportError(new R.__(`The enum value "${r.name}.${n.name}" is deprecated. ${i}`,{nodes:t}))}}}}function P(e){return{Field(t){const n=(0,s.xC)(e.getType());n&&(0,u.s9)(n)&&e.reportError(new R.__(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}}var U=n(6584),V=n(2734),G=n(4196),B=n(8081),Q=n(8741),K=n(7143),q=n(7815),Y=n(4873),H=n(5311),X=n(5580),z=n(7898),J=n(1422),W=n(4790),Z=n(1294),ee=n(2283),te=n(4203),ne=n(3259),ie=n(1967),re=n(1954),oe=n(423),se=n(2266),ae=n(6300),ce=n(5591),le=n(2767),ue=n(2621),pe=n(1564),de=n(9831),fe=n(5972),he=n(9701),me=n(2877),ye=n(7990),ve=n(9538),Ee=n(3201),Te=n(2618),ge=n(2337),Ie=n(3274),Ne=n(4800),be=n(5219);function _e(e){const t={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,...e},n=t.descriptions?"description":"",i=t.specifiedByUrl?"specifiedByURL":"",r=t.directiveIsRepeatable?"isRepeatable":"";function o(e){return t.inputValueDeprecation?e:""}return`\n    query IntrospectionQuery {\n      __schema {\n        ${t.schemaDescription?n:""}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${n}\n          ${r}\n          locations\n          args${o("(includeDeprecated: true)")} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${n}\n      ${i}\n      fields(includeDeprecated: true) {\n        name\n        ${n}\n        args${o("(includeDeprecated: true)")} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${o("(includeDeprecated: true)")} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${n}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${n}\n      type { ...TypeRef }\n      defaultValue\n      ${o("isDeprecated")}\n      ${o("deprecationReason")}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `}function Se(e,t){let n=null;for(const r of e.definitions){var i;if(r.kind===N.h.OPERATION_DEFINITION)if(null==t){if(n)return null;n=r}else if((null===(i=r.name)||void 0===i?void 0:i.value)===t)return r}return n}function Oe(e,t){if("query"===t.operation){const n=e.getQueryType();if(!n)throw new R.__("Schema does not define the required query root type.",{nodes:t});return n}if("mutation"===t.operation){const n=e.getMutationType();if(!n)throw new R.__("Schema is not configured for mutations.",{nodes:t});return n}if("subscription"===t.operation){const n=e.getSubscriptionType();if(!n)throw new R.__("Schema is not configured for subscriptions.",{nodes:t});return n}throw new R.__("Can only have query, mutation and subscription operations.",{nodes:t})}function De(e,t){const n={specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0,...t},i=(0,T.Qc)(_e(n)),r=(0,F.p0)({schema:e,document:i});return!r.errors&&r.data||(0,j.k)(!1),r.data}var Ae=n(8495),Re=n(4950),we=n(2221);function Le(e,t){(0,Ae.y)(e)&&(0,Ae.y)(e.__schema)||(0,S.a)(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0,O.X)(e)}.`);const n=e.__schema,i=(0,Re.w)(n.types,(e=>e.name),(e=>function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case u.zU.SCALAR:return i=e,new s.n2({name:i.name,description:i.description,specifiedByURL:i.specifiedByURL});case u.zU.OBJECT:return n=e,new s.h6({name:n.name,description:n.description,interfaces:()=>v(n),fields:()=>E(n)});case u.zU.INTERFACE:return t=e,new s.oW({name:t.name,description:t.description,interfaces:()=>v(t),fields:()=>E(t)});case u.zU.UNION:return function(e){if(!e.possibleTypes){const t=(0,O.X)(e);throw new Error(`Introspection result missing possibleTypes: ${t}.`)}return new s.Gp({name:e.name,description:e.description,types:()=>e.possibleTypes.map(m)})}(e);case u.zU.ENUM:return function(e){if(!e.enumValues){const t=(0,O.X)(e);throw new Error(`Introspection result missing enumValues: ${t}.`)}return new s.mR({name:e.name,description:e.description,values:(0,Re.w)(e.enumValues,(e=>e.name),(e=>({description:e.description,deprecationReason:e.deprecationReason})))})}(e);case u.zU.INPUT_OBJECT:return function(e){if(!e.inputFields){const t=(0,O.X)(e);throw new Error(`Introspection result missing inputFields: ${t}.`)}return new s.sR({name:e.name,description:e.description,fields:()=>I(e.inputFields)})}(e)}var t,n,i;const r=(0,O.X)(e);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${r}.`)}(e)));for(const e of[...l.HS,...u.nL])i[e.name]&&(i[e.name]=e);const r=n.queryType?m(n.queryType):null,o=n.mutationType?m(n.mutationType):null,p=n.subscriptionType?m(n.subscriptionType):null,d=n.directives?n.directives.map((function(e){if(!e.args){const t=(0,O.X)(e);throw new Error(`Introspection result missing directive args: ${t}.`)}if(!e.locations){const t=(0,O.X)(e);throw new Error(`Introspection result missing directive locations: ${t}.`)}return new c.NZ({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:I(e.args)})})):[];return new a.XO({description:n.description,query:r,mutation:o,subscription:p,types:Object.values(i),directives:d,assumeValid:null==t?void 0:t.assumeValid});function f(e){if(e.kind===u.zU.LIST){const t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");return new s.p2(f(t))}if(e.kind===u.zU.NON_NULL){const t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");const n=f(t);return new s.bM((0,s.i_)(n))}return h(e)}function h(e){const t=e.name;if(!t)throw new Error(`Unknown type reference: ${(0,O.X)(e)}.`);const n=i[t];if(!n)throw new Error(`Invalid or incomplete schema, unknown type: ${t}. Ensure that a full introspection query is used in order to build a client schema.`);return n}function m(e){return(0,s.Z6)(h(e))}function y(e){return(0,s.k2)(h(e))}function v(e){if(null===e.interfaces&&e.kind===u.zU.INTERFACE)return[];if(!e.interfaces){const t=(0,O.X)(e);throw new Error(`Introspection result missing interfaces: ${t}.`)}return e.interfaces.map(y)}function E(e){if(!e.fields)throw new Error(`Introspection result missing fields: ${(0,O.X)(e)}.`);return(0,Re.w)(e.fields,(e=>e.name),g)}function g(e){const t=f(e.type);if(!(0,s.SZ)(t)){const e=(0,O.X)(t);throw new Error(`Introspection must provide output type for fields, but received: ${e}.`)}if(!e.args){const t=(0,O.X)(e);throw new Error(`Introspection result missing field args: ${t}.`)}return{description:e.description,deprecationReason:e.deprecationReason,type:t,args:I(e.args)}}function I(e){return(0,Re.w)(e,(e=>e.name),N)}function N(e){const t=f(e.type);if(!(0,s.j$)(t)){const e=(0,O.X)(t);throw new Error(`Introspection must provide input type for arguments, but received: ${e}.`)}const n=null!=e.defaultValue?(0,we.u)((0,T.H2)(e.defaultValue),t):void 0;return{description:e.description,type:t,defaultValue:n,deprecationReason:e.deprecationReason}}}var Fe=n(8224);function xe(e){const t=e.toConfig(),n=(0,Re.w)($e(t.types),(e=>e.name),(function(e){if((0,s.KA)(e)||(0,u.s9)(e))return e;if((0,s.lp)(e)){const t=e.toConfig();return new s.h6({...t,interfaces:()=>d(t.interfaces),fields:()=>p(t.fields)})}if((0,s.oT)(e)){const t=e.toConfig();return new s.oW({...t,interfaces:()=>d(t.interfaces),fields:()=>p(t.fields)})}if((0,s.EN)(e)){const t=e.toConfig();return new s.Gp({...t,types:()=>d(t.types)})}if((0,s.EM)(e)){const t=e.toConfig();return new s.mR({...t,values:ke(t.values,(e=>e))})}if((0,s.hL)(e)){const t=e.toConfig();return new s.sR({...t,fields:()=>ke(t.fields,(e=>({...e,type:i(e.type)})))})}(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}));return new a.XO({...t,types:Object.values(n),directives:$e(t.directives).map((function(e){const t=e.toConfig();return new c.NZ({...t,locations:Ce(t.locations,(e=>e)),args:l(t.args)})})),query:o(t.query),mutation:o(t.mutation),subscription:o(t.subscription)});function i(e){return(0,s.HG)(e)?new s.p2(i(e.ofType)):(0,s.zM)(e)?new s.bM(i(e.ofType)):r(e)}function r(e){return n[e.name]}function o(e){return e&&r(e)}function l(e){return ke(e,(e=>({...e,type:i(e.type)})))}function p(e){return ke(e,(e=>({...e,type:i(e.type),args:e.args&&l(e.args)})))}function d(e){return $e(e).map(r)}}function ke(e,t){const n=Object.create(null);for(const i of Object.keys(e).sort(Fe.K))n[i]=t(e[i]);return n}function $e(e){return Ce(e,(e=>e.name))}function Ce(e,t){return e.slice().sort(((e,n)=>{const i=t(e),r=t(n);return(0,Fe.K)(i,r)}))}var je=n(7392),Me=n(8631);function Pe(e){return Ge(e,(e=>!(0,c.xg)(e)),Ve)}function Ue(e){return Ge(e,c.xg,u.s9)}function Ve(e){return!(0,l.u1)(e)&&!(0,u.s9)(e)}function Ge(e,t,n){const i=e.getDirectives().filter(t),r=Object.values(e.getTypeMap()).filter(n);return[Be(e),...i.map((e=>function(e){return Je(e)+"directive @"+e.name+He(e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}(e))),...r.map((e=>Qe(e)))].filter(Boolean).join("\n\n")}function Be(e){if(null==e.description&&function(e){const t=e.getQueryType();if(t&&"Query"!==t.name)return!1;const n=e.getMutationType();if(n&&"Mutation"!==n.name)return!1;const i=e.getSubscriptionType();return!i||"Subscription"===i.name}(e))return;const t=[],n=e.getQueryType();n&&t.push(`  query: ${n.name}`);const i=e.getMutationType();i&&t.push(`  mutation: ${i.name}`);const r=e.getSubscriptionType();return r&&t.push(`  subscription: ${r.name}`),Je(e)+`schema {\n${t.join("\n")}\n}`}function Qe(e){return(0,s.KA)(e)?function(e){return Je(e)+`scalar ${e.name}`+(null==(t=e).specifiedByURL?"":` @specifiedBy(url: ${(0,g.S)({kind:N.h.STRING,value:t.specifiedByURL})})`);var t}(e):(0,s.lp)(e)?function(e){return Je(e)+`type ${e.name}`+Ke(e)+qe(e)}(e):(0,s.oT)(e)?function(e){return Je(e)+`interface ${e.name}`+Ke(e)+qe(e)}(e):(0,s.EN)(e)?function(e){const t=e.getTypes(),n=t.length?" = "+t.join(" | "):"";return Je(e)+"union "+e.name+n}(e):(0,s.EM)(e)?function(e){const t=e.getValues().map(((e,t)=>Je(e,"  ",!t)+"  "+e.name+ze(e.deprecationReason)));return Je(e)+`enum ${e.name}`+Ye(t)}(e):(0,s.hL)(e)?function(e){const t=Object.values(e.getFields()).map(((e,t)=>Je(e,"  ",!t)+"  "+Xe(e)));return Je(e)+`input ${e.name}`+Ye(t)}(e):void(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}function Ke(e){const t=e.getInterfaces();return t.length?" implements "+t.map((e=>e.name)).join(" & "):""}function qe(e){return Ye(Object.values(e.getFields()).map(((e,t)=>Je(e,"  ",!t)+"  "+e.name+He(e.args,"  ")+": "+String(e.type)+ze(e.deprecationReason))))}function Ye(e){return 0!==e.length?" {\n"+e.join("\n")+"\n}":""}function He(e,t=""){return 0===e.length?"":e.every((e=>!e.description))?"("+e.map(Xe).join(", ")+")":"(\n"+e.map(((e,n)=>Je(e,"  "+t,!n)+"  "+t+Xe(e))).join("\n")+"\n"+t+")"}function Xe(e){const t=(0,Me.J)(e.defaultValue,e.type);let n=e.name+": "+String(e.type);return t&&(n+=` = ${(0,g.S)(t)}`),n+ze(e.deprecationReason)}function ze(e){return null==e?"":e!==c.SY?` @deprecated(reason: ${(0,g.S)({kind:N.h.STRING,value:e})})`:" @deprecated"}function Je(e,t="",n=!0){const{description:i}=e;return null==i?"":(t&&!n?"\n"+t:t)+(0,g.S)({kind:N.h.STRING,value:i,block:(0,je.MZ)(i)}).replace(/\n/g,"\n"+t)+"\n"}function We(e){const t=[];for(const n of e)t.push(...n.definitions);return{kind:N.h.DOCUMENT,definitions:t}}function Ze(e){const t=[],n=Object.create(null);for(const i of e.definitions)switch(i.kind){case N.h.OPERATION_DEFINITION:t.push(i);break;case N.h.FRAGMENT_DEFINITION:n[i.name.value]=tt(i.selectionSet)}const i=Object.create(null);for(const r of t){const t=new Set;for(const e of tt(r.selectionSet))et(t,n,e);i[r.name?r.name.value:""]={kind:N.h.DOCUMENT,definitions:e.definitions.filter((e=>e===r||e.kind===N.h.FRAGMENT_DEFINITION&&t.has(e.name.value)))}}return i}function et(e,t,n){if(!e.has(n)){e.add(n);const i=t[n];if(void 0!==i)for(const n of i)et(e,t,n)}}function tt(e){const t=[];return(0,I.Vn)(e,{FragmentSpread(e){t.push(e.name.value)}}),t}function nt(e){const t=(0,h.T)(e)?e:new h.H(e),n=t.body,i=new v.h(t);let r="",o=!1;for(;i.advance().kind!==E.T.EOF;){const e=i.token,t=e.kind,s=!(0,v.u)(e.kind);o&&(s||e.kind===E.T.SPREAD)&&(r+=" ");const a=n.slice(e.start,e.end);t===E.T.BLOCK_STRING?r+=(0,je.LZ)(e.value,{minimize:!0}):r+=a,o=s}return r}function it(e){const t=rt(e);if(t)throw t;return e}function rt(e){if("string"==typeof e||(0,S.a)(!1,"Expected name to be a string."),e.startsWith("__"))return new R.__(`Name "${e}" must not begin with "__", which is reserved by GraphQL introspection.`);try{(0,d.i)(e)}catch(e){return e}}var ot,st,at=n(3498),ct=n(8360);function lt(e,t){return pt(e,t).filter((e=>e.type in ot))}function ut(e,t){return pt(e,t).filter((e=>e.type in st))}function pt(e,t){return[...ft(e,t),...dt(e,t)]}function dt(e,t){const n=[],i=_t(e.getDirectives(),t.getDirectives());for(const e of i.removed)n.push({type:ot.DIRECTIVE_REMOVED,description:`${e.name} was removed.`});for(const[e,t]of i.persisted){const i=_t(e.args,t.args);for(const t of i.added)(0,s.dK)(t)&&n.push({type:ot.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${t.name} on directive ${e.name} was added.`});for(const t of i.removed)n.push({type:ot.DIRECTIVE_ARG_REMOVED,description:`${t.name} was removed from ${e.name}.`});e.isRepeatable&&!t.isRepeatable&&n.push({type:ot.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${e.name}.`});for(const i of e.locations)t.locations.includes(i)||n.push({type:ot.DIRECTIVE_LOCATION_REMOVED,description:`${i} was removed from ${e.name}.`})}return n}function ft(e,t){const n=[],i=_t(Object.values(e.getTypeMap()),Object.values(t.getTypeMap()));for(const e of i.removed)n.push({type:ot.TYPE_REMOVED,description:(0,l.u1)(e)?`Standard scalar ${e.name} was removed because it is not referenced anymore.`:`${e.name} was removed.`});for(const[e,t]of i.persisted)(0,s.EM)(e)&&(0,s.EM)(t)?n.push(...yt(e,t)):(0,s.EN)(e)&&(0,s.EN)(t)?n.push(...mt(e,t)):(0,s.hL)(e)&&(0,s.hL)(t)?n.push(...ht(e,t)):(0,s.lp)(e)&&(0,s.lp)(t)||(0,s.oT)(e)&&(0,s.oT)(t)?n.push(...Et(e,t),...vt(e,t)):e.constructor!==t.constructor&&n.push({type:ot.TYPE_CHANGED_KIND,description:`${e.name} changed from ${Nt(e)} to ${Nt(t)}.`});return n}function ht(e,t){const n=[],i=_t(Object.values(e.getFields()),Object.values(t.getFields()));for(const t of i.added)(0,s.Wd)(t)?n.push({type:ot.REQUIRED_INPUT_FIELD_ADDED,description:`A required field ${t.name} on input type ${e.name} was added.`}):n.push({type:st.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${t.name} on input type ${e.name} was added.`});for(const t of i.removed)n.push({type:ot.FIELD_REMOVED,description:`${e.name}.${t.name} was removed.`});for(const[t,r]of i.persisted)It(t.type,r.type)||n.push({type:ot.FIELD_CHANGED_KIND,description:`${e.name}.${t.name} changed type from ${String(t.type)} to ${String(r.type)}.`});return n}function mt(e,t){const n=[],i=_t(e.getTypes(),t.getTypes());for(const t of i.added)n.push({type:st.TYPE_ADDED_TO_UNION,description:`${t.name} was added to union type ${e.name}.`});for(const t of i.removed)n.push({type:ot.TYPE_REMOVED_FROM_UNION,description:`${t.name} was removed from union type ${e.name}.`});return n}function yt(e,t){const n=[],i=_t(e.getValues(),t.getValues());for(const t of i.added)n.push({type:st.VALUE_ADDED_TO_ENUM,description:`${t.name} was added to enum type ${e.name}.`});for(const t of i.removed)n.push({type:ot.VALUE_REMOVED_FROM_ENUM,description:`${t.name} was removed from enum type ${e.name}.`});return n}function vt(e,t){const n=[],i=_t(e.getInterfaces(),t.getInterfaces());for(const t of i.added)n.push({type:st.IMPLEMENTED_INTERFACE_ADDED,description:`${t.name} added to interfaces implemented by ${e.name}.`});for(const t of i.removed)n.push({type:ot.IMPLEMENTED_INTERFACE_REMOVED,description:`${e.name} no longer implements interface ${t.name}.`});return n}function Et(e,t){const n=[],i=_t(Object.values(e.getFields()),Object.values(t.getFields()));for(const t of i.removed)n.push({type:ot.FIELD_REMOVED,description:`${e.name}.${t.name} was removed.`});for(const[t,r]of i.persisted)n.push(...Tt(e,t,r)),gt(t.type,r.type)||n.push({type:ot.FIELD_CHANGED_KIND,description:`${e.name}.${t.name} changed type from ${String(t.type)} to ${String(r.type)}.`});return n}function Tt(e,t,n){const i=[],r=_t(t.args,n.args);for(const n of r.removed)i.push({type:ot.ARG_REMOVED,description:`${e.name}.${t.name} arg ${n.name} was removed.`});for(const[n,o]of r.persisted)if(It(n.type,o.type)){if(void 0!==n.defaultValue)if(void 0===o.defaultValue)i.push({type:st.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${n.name} defaultValue was removed.`});else{const r=bt(n.defaultValue,n.type),s=bt(o.defaultValue,o.type);r!==s&&i.push({type:st.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${n.name} has changed defaultValue from ${r} to ${s}.`})}}else i.push({type:ot.ARG_CHANGED_KIND,description:`${e.name}.${t.name} arg ${n.name} has changed type from ${String(n.type)} to ${String(o.type)}.`});for(const n of r.added)(0,s.dK)(n)?i.push({type:ot.REQUIRED_ARG_ADDED,description:`A required arg ${n.name} on ${e.name}.${t.name} was added.`}):i.push({type:st.OPTIONAL_ARG_ADDED,description:`An optional arg ${n.name} on ${e.name}.${t.name} was added.`});return i}function gt(e,t){return(0,s.HG)(e)?(0,s.HG)(t)&&gt(e.ofType,t.ofType)||(0,s.zM)(t)&&gt(e,t.ofType):(0,s.zM)(e)?(0,s.zM)(t)&&gt(e.ofType,t.ofType):(0,s.Zs)(t)&&e.name===t.name||(0,s.zM)(t)&&gt(e,t.ofType)}function It(e,t){return(0,s.HG)(e)?(0,s.HG)(t)&&It(e.ofType,t.ofType):(0,s.zM)(e)?(0,s.zM)(t)&&It(e.ofType,t.ofType)||!(0,s.zM)(t)&&It(e.ofType,t):(0,s.Zs)(t)&&e.name===t.name}function Nt(e){return(0,s.KA)(e)?"a Scalar type":(0,s.lp)(e)?"an Object type":(0,s.oT)(e)?"an Interface type":(0,s.EN)(e)?"a Union type":(0,s.EM)(e)?"an Enum type":(0,s.hL)(e)?"an Input type":void(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}function bt(e,t){const n=(0,Me.J)(e,t);return null!=n||(0,j.k)(!1),(0,g.S)((0,ct.n)(n))}function _t(e,t){const n=[],i=[],r=[],o=(0,at.P)(e,(({name:e})=>e)),s=(0,at.P)(t,(({name:e})=>e));for(const t of e){const e=s[t.name];void 0===e?i.push(t):r.push([t,e])}for(const e of t)void 0===o[e.name]&&n.push(e);return{added:n,persisted:r,removed:i}}!function(e){e.TYPE_REMOVED="TYPE_REMOVED",e.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND",e.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION",e.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM",e.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED",e.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED",e.FIELD_REMOVED="FIELD_REMOVED",e.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND",e.REQUIRED_ARG_ADDED="REQUIRED_ARG_ADDED",e.ARG_REMOVED="ARG_REMOVED",e.ARG_CHANGED_KIND="ARG_CHANGED_KIND",e.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED",e.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED",e.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED",e.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED",e.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"}(ot||(ot={})),function(e){e.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM",e.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION",e.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED",e.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED",e.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED",e.ARG_DEFAULT_VALUE_CHANGE="ARG_DEFAULT_VALUE_CHANGE"}(st||(st={}));var St=n(6535),Ot=n(9557),Dt=n(77),At=n(2319),Rt=n(2676),wt=n(7816),Lt=n(316)},9380:(e,t,n)=>{"use strict";function i(e,t,n){return{prev:e,key:t,typename:n}}function r(e){const t=[];let n=e;for(;n;)t.push(n.key),n=n.prev;return t.reverse()}n.d(t,{N:()=>r,Q:()=>i})},7826:(e,t,n)=>{"use strict";function i(e,t){if(!Boolean(e))throw new Error(t)}n.d(t,{a:()=>i})},3177:(e,t,n)=>{"use strict";function i(e,t){const[n,i]=t?[e,t]:[void 0,e];let r=" Did you mean ";n&&(r+=n+" ");const o=i.map((e=>`"${e}"`));switch(o.length){case 0:return"";case 1:return r+o[0]+"?";case 2:return r+o[0]+" or "+o[1]+"?"}const s=o.slice(0,5),a=s.pop();return r+s.join(", ")+", or "+a+"?"}n.d(t,{l:()=>i})},3231:(e,t,n)=>{"use strict";function i(e,t){const n=new Map;for(const i of e){const e=t(i),r=n.get(e);void 0===r?n.set(e,[i]):r.push(i)}return n}n.d(t,{v:()=>i})},5821:(e,t,n)=>{"use strict";function i(e){return r(e,[])}function r(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const n=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:r(t,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const n=Math.min(10,e.length),i=e.length-n,o=[];for(let i=0;i<n;++i)o.push(r(e[i],t));return 1===i?o.push("... 1 more item"):i>1&&o.push(`... ${i} more items`),"["+o.join(", ")+"]"}(e,n);return function(e,t){const n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const i=n.map((([e,n])=>e+": "+r(n,t)));return"{ "+i.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}n.d(t,{X:()=>i})},8306:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});const i=function(e,t){return e instanceof t}},9551:(e,t,n)=>{"use strict";function i(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}n.d(t,{k:()=>i})},3831:(e,t,n)=>{"use strict";function i(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}n.d(t,{i:()=>i})},8495:(e,t,n)=>{"use strict";function i(e){return"object"==typeof e&&null!==e}n.d(t,{y:()=>i})},8659:(e,t,n)=>{"use strict";function i(e){return"function"==typeof(null==e?void 0:e.then)}n.d(t,{t:()=>i})},3498:(e,t,n)=>{"use strict";function i(e,t){const n=Object.create(null);for(const i of e)n[t(i)]=i;return n}n.d(t,{P:()=>i})},4950:(e,t,n)=>{"use strict";function i(e,t,n){const i=Object.create(null);for(const r of e)i[t(r)]=n(r);return i}n.d(t,{w:()=>i})},5723:(e,t,n)=>{"use strict";function i(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}n.d(t,{j:()=>i})},8224:(e,t,n)=>{"use strict";function i(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let s=e.charCodeAt(n),a=t.charCodeAt(i);if(o(s)&&o(a)){let c=0;do{++n,c=10*c+s-r,s=e.charCodeAt(n)}while(o(s)&&c>0);let l=0;do{++i,l=10*l+a-r,a=t.charCodeAt(i)}while(o(a)&&l>0);if(c<l)return-1;if(c>l)return 1}else{if(s<a)return-1;if(s>a)return 1;++n,++i}}return e.length-t.length}n.d(t,{K:()=>i});const r=48;function o(e){return!isNaN(e)&&r<=e&&e<=57}},4244:(e,t,n)=>{"use strict";function i(e){return e.map((e=>"number"==typeof e?"["+e.toString()+"]":"."+e)).join("")}n.d(t,{F:()=>i})},3294:(e,t,n)=>{"use strict";n.d(t,{D:()=>r});var i=n(8224);function r(e,t){const n=Object.create(null),r=new o(e),s=Math.floor(.4*e.length)+1;for(const e of t){const t=r.measure(e,s);void 0!==t&&(n[e]=t)}return Object.keys(n).sort(((e,t)=>{const r=n[e]-n[t];return 0!==r?r:(0,i.K)(e,t)}))}class o{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=s(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;const n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=s(n),r=this._inputArray;if(i.length<r.length){const e=i;i=r,r=e}const o=i.length,a=r.length;if(o-a>t)return;const c=this._rows;for(let e=0;e<=a;e++)c[0][e]=e;for(let e=1;e<=o;e++){const n=c[(e-1)%3],o=c[e%3];let s=o[0]=e;for(let t=1;t<=a;t++){const a=i[e-1]===r[t-1]?0:1;let l=Math.min(n[t]+1,o[t-1]+1,n[t-1]+a);if(e>1&&t>1&&i[e-1]===r[t-2]&&i[e-2]===r[t-1]){const n=c[(e-2)%3][t-2];l=Math.min(l,n+1)}l<s&&(s=l),o[t]=l}if(s>t)return}const l=c[o%3][a];return l<=t?l:void 0}}function s(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}},8824:(e,t,n)=>{"use strict";function i(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}n.d(t,{u:()=>i})},2380:(e,t,n)=>{"use strict";n.d(t,{UG:()=>a,WU:()=>r,Ye:()=>i,h8:()=>o,ku:()=>c});class i{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class r{constructor(e,t,n,i,r,o){this.kind=e,this.start=t,this.end=n,this.line=i,this.column=r,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},s=new Set(Object.keys(o));function a(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&s.has(t)}var c;!function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(c||(c={}))},7392:(e,t,n)=>{"use strict";n.d(t,{LZ:()=>a,MZ:()=>s,wv:()=>r});var i=n(8297);function r(e){var t;let n=Number.MAX_SAFE_INTEGER,i=null,r=-1;for(let t=0;t<e.length;++t){var s;const a=e[t],c=o(a);c!==a.length&&(i=null!==(s=i)&&void 0!==s?s:t,r=t,0!==t&&c<n&&(n=c))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=i)&&void 0!==t?t:0,r+1)}function o(e){let t=0;for(;t<e.length&&(0,i.FD)(e.charCodeAt(t));)++t;return t}function s(e){if(""===e)return!0;let t=!0,n=!1,i=!0,r=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 13:return!1;case 10:if(t&&!r)return!1;r=!0,t=!0,n=!1;break;case 9:case 32:n||(n=t);break;default:i&&(i=n),t=!1}return!(t||i&&r)}function a(e,t){const n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),o=1===r.length,s=r.length>1&&r.slice(1).every((e=>0===e.length||(0,i.FD)(e.charCodeAt(0)))),a=n.endsWith('\\"""'),c=e.endsWith('"')&&!a,l=e.endsWith("\\"),u=c||l,p=!(null!=t&&t.minimize)&&(!o||e.length>70||u||s||a);let d="";const f=o&&(0,i.FD)(e.charCodeAt(0));return(p&&!f||s)&&(d+="\n"),d+=n,(p||u)&&(d+="\n"),'"""'+d+'"""'}},8297:(e,t,n)=>{"use strict";function i(e){return 9===e||32===e}function r(e){return e>=48&&e<=57}function o(e){return e>=97&&e<=122||e>=65&&e<=90}function s(e){return o(e)||95===e}function a(e){return o(e)||r(e)||95===e}n.d(t,{FD:()=>i,HQ:()=>a,LQ:()=>s,X1:()=>r})},9878:(e,t,n)=>{"use strict";var i;n.d(t,{B:()=>i}),function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(i||(i={}))},7359:(e,t,n)=>{"use strict";var i;n.d(t,{h:()=>i}),function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(i||(i={}))},2105:(e,t,n)=>{"use strict";n.d(t,{h:()=>c,u:()=>l});var i=n(5219),r=n(2380),o=n(7392),s=n(8297),a=n(4635);class c{constructor(e){const t=new r.WU(a.T.SOF,0,0,0,0);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let e=this.token;if(e.kind!==a.T.EOF)do{if(e.next)e=e.next;else{const t=y(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===a.T.COMMENT);return e}}function l(e){return e===a.T.BANG||e===a.T.DOLLAR||e===a.T.AMP||e===a.T.PAREN_L||e===a.T.PAREN_R||e===a.T.SPREAD||e===a.T.COLON||e===a.T.EQUALS||e===a.T.AT||e===a.T.BRACKET_L||e===a.T.BRACKET_R||e===a.T.BRACE_L||e===a.T.PIPE||e===a.T.BRACE_R}function u(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function p(e,t){return d(e.charCodeAt(t))&&f(e.charCodeAt(t+1))}function d(e){return e>=55296&&e<=56319}function f(e){return e>=56320&&e<=57343}function h(e,t){const n=e.source.body.codePointAt(t);if(void 0===n)return a.T.EOF;if(n>=32&&n<=126){const e=String.fromCodePoint(n);return'"'===e?"'\"'":`"${e}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function m(e,t,n,i,o){const s=e.line,a=1+n-e.lineStart;return new r.WU(t,n,i,s,a,o)}function y(e,t){const n=e.source.body,r=n.length;let o=t;for(;o<r;){const t=n.charCodeAt(o);switch(t){case 65279:case 9:case 32:case 44:++o;continue;case 10:++o,++e.line,e.lineStart=o;continue;case 13:10===n.charCodeAt(o+1)?o+=2:++o,++e.line,e.lineStart=o;continue;case 35:return v(e,o);case 33:return m(e,a.T.BANG,o,o+1);case 36:return m(e,a.T.DOLLAR,o,o+1);case 38:return m(e,a.T.AMP,o,o+1);case 40:return m(e,a.T.PAREN_L,o,o+1);case 41:return m(e,a.T.PAREN_R,o,o+1);case 46:if(46===n.charCodeAt(o+1)&&46===n.charCodeAt(o+2))return m(e,a.T.SPREAD,o,o+3);break;case 58:return m(e,a.T.COLON,o,o+1);case 61:return m(e,a.T.EQUALS,o,o+1);case 64:return m(e,a.T.AT,o,o+1);case 91:return m(e,a.T.BRACKET_L,o,o+1);case 93:return m(e,a.T.BRACKET_R,o,o+1);case 123:return m(e,a.T.BRACE_L,o,o+1);case 124:return m(e,a.T.PIPE,o,o+1);case 125:return m(e,a.T.BRACE_R,o,o+1);case 34:return 34===n.charCodeAt(o+1)&&34===n.charCodeAt(o+2)?O(e,o):g(e,o)}if((0,s.X1)(t)||45===t)return E(e,o,t);if((0,s.LQ)(t))return D(e,o);throw(0,i.h)(e.source,o,39===t?"Unexpected single quote character ('), did you mean to use a double quote (\")?":u(t)||p(n,o)?`Unexpected character: ${h(e,o)}.`:`Invalid character: ${h(e,o)}.`)}return m(e,a.T.EOF,r,r)}function v(e,t){const n=e.source.body,i=n.length;let r=t+1;for(;r<i;){const e=n.charCodeAt(r);if(10===e||13===e)break;if(u(e))++r;else{if(!p(n,r))break;r+=2}}return m(e,a.T.COMMENT,t,r,n.slice(t+1,r))}function E(e,t,n){const r=e.source.body;let o=t,c=n,l=!1;if(45===c&&(c=r.charCodeAt(++o)),48===c){if(c=r.charCodeAt(++o),(0,s.X1)(c))throw(0,i.h)(e.source,o,`Invalid number, unexpected digit after 0: ${h(e,o)}.`)}else o=T(e,o,c),c=r.charCodeAt(o);if(46===c&&(l=!0,c=r.charCodeAt(++o),o=T(e,o,c),c=r.charCodeAt(o)),69!==c&&101!==c||(l=!0,c=r.charCodeAt(++o),43!==c&&45!==c||(c=r.charCodeAt(++o)),o=T(e,o,c),c=r.charCodeAt(o)),46===c||(0,s.LQ)(c))throw(0,i.h)(e.source,o,`Invalid number, expected digit but got: ${h(e,o)}.`);return m(e,l?a.T.FLOAT:a.T.INT,t,o,r.slice(t,o))}function T(e,t,n){if(!(0,s.X1)(n))throw(0,i.h)(e.source,t,`Invalid number, expected digit but got: ${h(e,t)}.`);const r=e.source.body;let o=t+1;for(;(0,s.X1)(r.charCodeAt(o));)++o;return o}function g(e,t){const n=e.source.body,r=n.length;let o=t+1,s=o,c="";for(;o<r;){const r=n.charCodeAt(o);if(34===r)return c+=n.slice(s,o),m(e,a.T.STRING,t,o+1,c);if(92!==r){if(10===r||13===r)break;if(u(r))++o;else{if(!p(n,o))throw(0,i.h)(e.source,o,`Invalid character within String: ${h(e,o)}.`);o+=2}}else{c+=n.slice(s,o);const t=117===n.charCodeAt(o+1)?123===n.charCodeAt(o+2)?I(e,o):N(e,o):S(e,o);c+=t.value,o+=t.size,s=o}}throw(0,i.h)(e.source,o,"Unterminated string.")}function I(e,t){const n=e.source.body;let r=0,o=3;for(;o<12;){const e=n.charCodeAt(t+o++);if(125===e){if(o<5||!u(r))break;return{value:String.fromCodePoint(r),size:o}}if(r=r<<4|_(e),r<0)break}throw(0,i.h)(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+o)}".`)}function N(e,t){const n=e.source.body,r=b(n,t+2);if(u(r))return{value:String.fromCodePoint(r),size:6};if(d(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){const e=b(n,t+8);if(f(e))return{value:String.fromCodePoint(r,e),size:12}}throw(0,i.h)(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function b(e,t){return _(e.charCodeAt(t))<<12|_(e.charCodeAt(t+1))<<8|_(e.charCodeAt(t+2))<<4|_(e.charCodeAt(t+3))}function _(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function S(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw(0,i.h)(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function O(e,t){const n=e.source.body,r=n.length;let s=e.lineStart,c=t+3,l=c,d="";const f=[];for(;c<r;){const r=n.charCodeAt(c);if(34===r&&34===n.charCodeAt(c+1)&&34===n.charCodeAt(c+2)){d+=n.slice(l,c),f.push(d);const i=m(e,a.T.BLOCK_STRING,t,c+3,(0,o.wv)(f).join("\n"));return e.line+=f.length-1,e.lineStart=s,i}if(92!==r||34!==n.charCodeAt(c+1)||34!==n.charCodeAt(c+2)||34!==n.charCodeAt(c+3))if(10!==r&&13!==r)if(u(r))++c;else{if(!p(n,c))throw(0,i.h)(e.source,c,`Invalid character within String: ${h(e,c)}.`);c+=2}else d+=n.slice(l,c),f.push(d),13===r&&10===n.charCodeAt(c+1)?c+=2:++c,d="",l=c,s=c;else d+=n.slice(l,c),l=c+1,c+=4}throw(0,i.h)(e.source,c,"Unterminated string.")}function D(e,t){const n=e.source.body,i=n.length;let r=t+1;for(;r<i;){const e=n.charCodeAt(r);if(!(0,s.HQ)(e))break;++r}return m(e,a.T.NAME,t,r,n.slice(t,r))}},7867:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var i=n(9551);const r=/\r\n|[\n\r]/g;function o(e,t){let n=0,o=1;for(const s of e.body.matchAll(r)){if("number"==typeof s.index||(0,i.k)(!1),s.index>=t)break;n=s.index+s[0].length,o+=1}return{line:o,column:t+1-n}}},4275:(e,t,n)=>{"use strict";n.d(t,{H2:()=>p,Qc:()=>u,gZ:()=>f,tl:()=>d});var i=n(5219),r=n(2380),o=n(9878),s=n(7359),a=n(2105),c=n(7926),l=n(4635);function u(e,t){return new h(e,t).parseDocument()}function p(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseValueLiteral(!1);return n.expectToken(l.T.EOF),i}function d(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseConstValueLiteral();return n.expectToken(l.T.EOF),i}function f(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseTypeReference();return n.expectToken(l.T.EOF),i}class h{constructor(e,t={}){const n=(0,c.T)(e)?e:new c.H(e);this._lexer=new a.h(n),this._options=t,this._tokenCounter=0}parseName(){const e=this.expectToken(l.T.NAME);return this.node(e,{kind:s.h.NAME,value:e.value})}parseDocument(){return this.node(this._lexer.token,{kind:s.h.DOCUMENT,definitions:this.many(l.T.SOF,this.parseDefinition,l.T.EOF)})}parseDefinition(){if(this.peek(l.T.BRACE_L))return this.parseOperationDefinition();const e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===l.T.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw(0,i.h)(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}parseOperationDefinition(){const e=this._lexer.token;if(this.peek(l.T.BRACE_L))return this.node(e,{kind:s.h.OPERATION_DEFINITION,operation:r.ku.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const t=this.parseOperationType();let n;return this.peek(l.T.NAME)&&(n=this.parseName()),this.node(e,{kind:s.h.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const e=this.expectToken(l.T.NAME);switch(e.value){case"query":return r.ku.QUERY;case"mutation":return r.ku.MUTATION;case"subscription":return r.ku.SUBSCRIPTION}throw this.unexpected(e)}parseVariableDefinitions(){return this.optionalMany(l.T.PAREN_L,this.parseVariableDefinition,l.T.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:s.h.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(l.T.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(l.T.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const e=this._lexer.token;return this.expectToken(l.T.DOLLAR),this.node(e,{kind:s.h.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:s.h.SELECTION_SET,selections:this.many(l.T.BRACE_L,this.parseSelection,l.T.BRACE_R)})}parseSelection(){return this.peek(l.T.SPREAD)?this.parseFragment():this.parseField()}parseField(){const e=this._lexer.token,t=this.parseName();let n,i;return this.expectOptionalToken(l.T.COLON)?(n=t,i=this.parseName()):i=t,this.node(e,{kind:s.h.FIELD,alias:n,name:i,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(l.T.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(e){const t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(l.T.PAREN_L,t,l.T.PAREN_R)}parseArgument(e=!1){const t=this._lexer.token,n=this.parseName();return this.expectToken(l.T.COLON),this.node(t,{kind:s.h.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const e=this._lexer.token;this.expectToken(l.T.SPREAD);const t=this.expectOptionalKeyword("on");return!t&&this.peek(l.T.NAME)?this.node(e,{kind:s.h.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:s.h.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:s.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:s.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(e){const t=this._lexer.token;switch(t.kind){case l.T.BRACKET_L:return this.parseList(e);case l.T.BRACE_L:return this.parseObject(e);case l.T.INT:return this.advanceLexer(),this.node(t,{kind:s.h.INT,value:t.value});case l.T.FLOAT:return this.advanceLexer(),this.node(t,{kind:s.h.FLOAT,value:t.value});case l.T.STRING:case l.T.BLOCK_STRING:return this.parseStringLiteral();case l.T.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:s.h.BOOLEAN,value:!0});case"false":return this.node(t,{kind:s.h.BOOLEAN,value:!1});case"null":return this.node(t,{kind:s.h.NULL});default:return this.node(t,{kind:s.h.ENUM,value:t.value})}case l.T.DOLLAR:if(e){if(this.expectToken(l.T.DOLLAR),this._lexer.token.kind===l.T.NAME){const e=this._lexer.token.value;throw(0,i.h)(this._lexer.source,t.start,`Unexpected variable "$${e}" in constant value.`)}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:s.h.STRING,value:e.value,block:e.kind===l.T.BLOCK_STRING})}parseList(e){return this.node(this._lexer.token,{kind:s.h.LIST,values:this.any(l.T.BRACKET_L,(()=>this.parseValueLiteral(e)),l.T.BRACKET_R)})}parseObject(e){return this.node(this._lexer.token,{kind:s.h.OBJECT,fields:this.any(l.T.BRACE_L,(()=>this.parseObjectField(e)),l.T.BRACE_R)})}parseObjectField(e){const t=this._lexer.token,n=this.parseName();return this.expectToken(l.T.COLON),this.node(t,{kind:s.h.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}parseDirectives(e){const t=[];for(;this.peek(l.T.AT);)t.push(this.parseDirective(e));return t}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(e){const t=this._lexer.token;return this.expectToken(l.T.AT),this.node(t,{kind:s.h.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}parseTypeReference(){const e=this._lexer.token;let t;if(this.expectOptionalToken(l.T.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(l.T.BRACKET_R),t=this.node(e,{kind:s.h.LIST_TYPE,type:n})}else t=this.parseNamedType();return this.expectOptionalToken(l.T.BANG)?this.node(e,{kind:s.h.NON_NULL_TYPE,type:t}):t}parseNamedType(){return this.node(this._lexer.token,{kind:s.h.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(l.T.STRING)||this.peek(l.T.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),i=this.many(l.T.BRACE_L,this.parseOperationTypeDefinition,l.T.BRACE_R);return this.node(e,{kind:s.h.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:i})}parseOperationTypeDefinition(){const e=this._lexer.token,t=this.parseOperationType();this.expectToken(l.T.COLON);const n=this.parseNamedType();return this.node(e,{kind:s.h.OPERATION_TYPE_DEFINITION,operation:t,type:n})}parseScalarTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),i=this.parseConstDirectives();return this.node(e,{kind:s.h.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:i})}parseObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),i=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:s.h.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:i,directives:r,fields:o})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(l.T.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseFieldDefinition,l.T.BRACE_R)}parseFieldDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),i=this.parseArgumentDefs();this.expectToken(l.T.COLON);const r=this.parseTypeReference(),o=this.parseConstDirectives();return this.node(e,{kind:s.h.FIELD_DEFINITION,description:t,name:n,arguments:i,type:r,directives:o})}parseArgumentDefs(){return this.optionalMany(l.T.PAREN_L,this.parseInputValueDef,l.T.PAREN_R)}parseInputValueDef(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(l.T.COLON);const i=this.parseTypeReference();let r;this.expectOptionalToken(l.T.EQUALS)&&(r=this.parseConstValueLiteral());const o=this.parseConstDirectives();return this.node(e,{kind:s.h.INPUT_VALUE_DEFINITION,description:t,name:n,type:i,defaultValue:r,directives:o})}parseInterfaceTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),i=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:s.h.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:i,directives:r,fields:o})}parseUnionTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseUnionMemberTypes();return this.node(e,{kind:s.h.UNION_TYPE_DEFINITION,description:t,name:n,directives:i,types:r})}parseUnionMemberTypes(){return this.expectOptionalToken(l.T.EQUALS)?this.delimitedMany(l.T.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();return this.node(e,{kind:s.h.ENUM_TYPE_DEFINITION,description:t,name:n,directives:i,values:r})}parseEnumValuesDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseEnumValueDefinition,l.T.BRACE_R)}parseEnumValueDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),i=this.parseConstDirectives();return this.node(e,{kind:s.h.ENUM_VALUE_DEFINITION,description:t,name:n,directives:i})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw(0,i.h)(this._lexer.source,this._lexer.token.start,`${m(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();return this.node(e,{kind:s.h.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:i,fields:r})}parseInputFieldsDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseInputValueDef,l.T.BRACE_R)}parseTypeSystemExtension(){const e=this._lexer.lookahead();if(e.kind===l.T.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}parseSchemaExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const t=this.parseConstDirectives(),n=this.optionalMany(l.T.BRACE_L,this.parseOperationTypeDefinition,l.T.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:s.h.SCHEMA_EXTENSION,directives:t,operationTypes:n})}parseScalarTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:s.h.SCALAR_TYPE_EXTENSION,name:t,directives:n})}parseObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const t=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(0===n.length&&0===i.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:s.h.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:i,fields:r})}parseInterfaceTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const t=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(0===n.length&&0===i.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:s.h.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:i,fields:r})}parseUnionTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseUnionMemberTypes();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.UNION_TYPE_EXTENSION,name:t,directives:n,types:i})}parseEnumTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.ENUM_TYPE_EXTENSION,name:t,directives:n,values:i})}parseInputObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:i})}parseDirectiveDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(l.T.AT);const n=this.parseName(),i=this.parseArgumentDefs(),r=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const o=this.parseDirectiveLocations();return this.node(e,{kind:s.h.DIRECTIVE_DEFINITION,description:t,name:n,arguments:i,repeatable:r,locations:o})}parseDirectiveLocations(){return this.delimitedMany(l.T.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(o.B,t.value))return t;throw this.unexpected(e)}node(e,t){return!0!==this._options.noLocation&&(t.loc=new r.Ye(e,this._lexer.lastToken,this._lexer.source)),t}peek(e){return this._lexer.token.kind===e}expectToken(e){const t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw(0,i.h)(this._lexer.source,t.start,`Expected ${y(e)}, found ${m(t)}.`)}expectOptionalToken(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}expectKeyword(e){const t=this._lexer.token;if(t.kind!==l.T.NAME||t.value!==e)throw(0,i.h)(this._lexer.source,t.start,`Expected "${e}", found ${m(t)}.`);this.advanceLexer()}expectOptionalKeyword(e){const t=this._lexer.token;return t.kind===l.T.NAME&&t.value===e&&(this.advanceLexer(),!0)}unexpected(e){const t=null!=e?e:this._lexer.token;return(0,i.h)(this._lexer.source,t.start,`Unexpected ${m(t)}.`)}any(e,t,n){this.expectToken(e);const i=[];for(;!this.expectOptionalToken(n);)i.push(t.call(this));return i}optionalMany(e,t,n){if(this.expectOptionalToken(e)){const e=[];do{e.push(t.call(this))}while(!this.expectOptionalToken(n));return e}return[]}many(e,t,n){this.expectToken(e);const i=[];do{i.push(t.call(this))}while(!this.expectOptionalToken(n));return i}delimitedMany(e,t){this.expectOptionalToken(e);const n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}advanceLexer(){const{maxTokens:e}=this._options,t=this._lexer.advance();if(void 0!==e&&t.kind!==l.T.EOF&&(++this._tokenCounter,this._tokenCounter>e))throw(0,i.h)(this._lexer.source,t.start,`Document contains more that ${e} tokens. Parsing aborted.`)}}function m(e){const t=e.value;return y(e.kind)+(null!=t?` "${t}"`:"")}function y(e){return(0,a.u)(e)?`"${e}"`:e}},5844:(e,t,n)=>{"use strict";n.d(t,{D$:()=>f,G4:()=>u,Ir:()=>r,Of:()=>c,VB:()=>l,Wk:()=>o,aU:()=>d,nr:()=>a,pO:()=>s,zT:()=>p});var i=n(7359);function r(e){return o(e)||u(e)||d(e)}function o(e){return e.kind===i.h.OPERATION_DEFINITION||e.kind===i.h.FRAGMENT_DEFINITION}function s(e){return e.kind===i.h.FIELD||e.kind===i.h.FRAGMENT_SPREAD||e.kind===i.h.INLINE_FRAGMENT}function a(e){return e.kind===i.h.VARIABLE||e.kind===i.h.INT||e.kind===i.h.FLOAT||e.kind===i.h.STRING||e.kind===i.h.BOOLEAN||e.kind===i.h.NULL||e.kind===i.h.ENUM||e.kind===i.h.LIST||e.kind===i.h.OBJECT}function c(e){return a(e)&&(e.kind===i.h.LIST?e.values.some(c):e.kind===i.h.OBJECT?e.fields.some((e=>c(e.value))):e.kind!==i.h.VARIABLE)}function l(e){return e.kind===i.h.NAMED_TYPE||e.kind===i.h.LIST_TYPE||e.kind===i.h.NON_NULL_TYPE}function u(e){return e.kind===i.h.SCHEMA_DEFINITION||p(e)||e.kind===i.h.DIRECTIVE_DEFINITION}function p(e){return e.kind===i.h.SCALAR_TYPE_DEFINITION||e.kind===i.h.OBJECT_TYPE_DEFINITION||e.kind===i.h.INTERFACE_TYPE_DEFINITION||e.kind===i.h.UNION_TYPE_DEFINITION||e.kind===i.h.ENUM_TYPE_DEFINITION||e.kind===i.h.INPUT_OBJECT_TYPE_DEFINITION}function d(e){return e.kind===i.h.SCHEMA_EXTENSION||f(e)}function f(e){return e.kind===i.h.SCALAR_TYPE_EXTENSION||e.kind===i.h.OBJECT_TYPE_EXTENSION||e.kind===i.h.INTERFACE_TYPE_EXTENSION||e.kind===i.h.UNION_TYPE_EXTENSION||e.kind===i.h.ENUM_TYPE_EXTENSION||e.kind===i.h.INPUT_OBJECT_TYPE_EXTENSION}},850:(e,t,n)=>{"use strict";n.d(t,{Q:()=>r,z:()=>o});var i=n(7867);function r(e){return o(e.source,(0,i.k)(e.source,e.start))}function o(e,t){const n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,o=e.locationOffset.line-1,a=t.line+o,c=1===t.line?n:0,l=t.column+c,u=`${e.name}:${a}:${l}\n`,p=i.split(/\r\n|[\n\r]/g),d=p[r];if(d.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<d.length;e+=80)n.push(d.slice(e,e+80));return u+s([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+s([[a-1+" |",p[r-1]],[`${a} |`,d],["|","^".padStart(l)],[`${a+1} |`,p[r+1]]])}function s(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}},3486:(e,t,n)=>{"use strict";n.d(t,{S:()=>c});var i=n(7392);const r=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function o(e){return s[e.charCodeAt(0)]}const s=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];var a=n(7304);function c(e){return(0,a.Vn)(e,l)}const l={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>u(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=d("(",u(e.variableDefinitions,", "),")"),n=u([e.operation,u([e.name,t]),u(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+d(" = ",n)+d(" ",u(i," "))},SelectionSet:{leave:({selections:e})=>p(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){const o=d("",e,": ")+t;let s=o+d("(",u(n,", "),")");return s.length>80&&(s=o+d("(\n",f(u(n,"\n")),"\n)")),u([s,u(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+d(" ",u(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>u(["...",d("on ",e),u(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${d("(",u(n,", "),")")} on ${t} ${d("",u(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?(0,i.LZ)(e):`"${e.replace(r,o)}"`},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+u(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+u(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+d("(",u(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>d("",e,"\n")+u(["schema",u(t," "),p(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>d("",e,"\n")+u(["scalar",t,u(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>d("",e,"\n")+u(["type",t,d("implements ",u(n," & ")),u(i," "),p(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>d("",e,"\n")+t+(h(n)?d("(\n",f(u(n,"\n")),"\n)"):d("(",u(n,", "),")"))+": "+i+d(" ",u(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>d("",e,"\n")+u([t+": "+n,d("= ",i),u(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>d("",e,"\n")+u(["interface",t,d("implements ",u(n," & ")),u(i," "),p(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>d("",e,"\n")+u(["union",t,u(n," "),d("= ",u(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>d("",e,"\n")+u(["enum",t,u(n," "),p(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>d("",e,"\n")+u([t,u(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>d("",e,"\n")+u(["input",t,u(n," "),p(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>d("",e,"\n")+"directive @"+t+(h(n)?d("(\n",f(u(n,"\n")),"\n)"):d("(",u(n,", "),")"))+(i?" repeatable":"")+" on "+u(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>u(["extend schema",u(e," "),p(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>u(["extend scalar",e,u(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>u(["extend type",e,d("implements ",u(t," & ")),u(n," "),p(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>u(["extend interface",e,d("implements ",u(t," & ")),u(n," "),p(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>u(["extend union",e,u(t," "),d("= ",u(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>u(["extend enum",e,u(t," "),p(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>u(["extend input",e,u(t," "),p(n)]," ")}};function u(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function p(e){return d("{\n",f(u(e,"\n")),"\n}")}function d(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function f(e){return d("  ",e.replace(/\n/g,"\n  "))}function h(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}},7926:(e,t,n)=>{"use strict";n.d(t,{H:()=>s,T:()=>a});var i=n(7826),r=n(5821),o=n(8306);class s{constructor(e,t="GraphQL request",n={line:1,column:1}){"string"==typeof e||(0,i.a)(!1,`Body must be a string. Received: ${(0,r.X)(e)}.`),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||(0,i.a)(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,i.a)(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function a(e){return(0,o.n)(e,s)}},4635:(e,t,n)=>{"use strict";var i;n.d(t,{T:()=>i}),function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"}(i||(i={}))},7304:(e,t,n)=>{"use strict";n.d(t,{$_:()=>a,CK:()=>p,Eu:()=>u,Vn:()=>c,j1:()=>l});var i=n(7826),r=n(5821),o=n(2380),s=n(7359);const a=Object.freeze({});function c(e,t,n=o.h8){const c=new Map;for(const e of Object.values(s.h))c.set(e,u(t,e));let l,p,d,f=Array.isArray(e),h=[e],m=-1,y=[],v=e;const E=[],T=[];do{m++;const e=m===h.length,s=e&&0!==y.length;if(e){if(p=0===T.length?void 0:E[E.length-1],v=d,d=T.pop(),s)if(f){v=v.slice();let e=0;for(const[t,n]of y){const i=t-e;null===n?(v.splice(i,1),e++):v[i]=n}}else{v=Object.defineProperties({},Object.getOwnPropertyDescriptors(v));for(const[e,t]of y)v[e]=t}m=l.index,h=l.keys,y=l.edits,f=l.inArray,l=l.prev}else if(d){if(p=f?m:h[m],v=d[p],null==v)continue;E.push(p)}let u;if(!Array.isArray(v)){var g,I;(0,o.UG)(v)||(0,i.a)(!1,`Invalid AST Node: ${(0,r.X)(v)}.`);const n=e?null===(g=c.get(v.kind))||void 0===g?void 0:g.leave:null===(I=c.get(v.kind))||void 0===I?void 0:I.enter;if(u=null==n?void 0:n.call(t,v,p,d,E,T),u===a)break;if(!1===u){if(!e){E.pop();continue}}else if(void 0!==u&&(y.push([p,u]),!e)){if(!(0,o.UG)(u)){E.pop();continue}v=u}}var N;void 0===u&&s&&y.push([p,v]),e?E.pop():(l={inArray:f,index:m,keys:h,edits:y,prev:l},f=Array.isArray(v),h=f?v:null!==(N=n[v.kind])&&void 0!==N?N:[],m=-1,y=[],d&&T.push(d),d=v)}while(void 0!==l);return 0!==y.length?y[y.length-1][1]:e}function l(e){const t=new Array(e.length).fill(null),n=Object.create(null);for(const i of Object.values(s.h)){let r=!1;const o=new Array(e.length).fill(void 0),s=new Array(e.length).fill(void 0);for(let t=0;t<e.length;++t){const{enter:n,leave:a}=u(e[t],i);r||(r=null!=n||null!=a),o[t]=n,s[t]=a}if(!r)continue;const c={enter(...n){const i=n[0];for(let s=0;s<e.length;s++)if(null===t[s]){var r;const c=null===(r=o[s])||void 0===r?void 0:r.apply(e[s],n);if(!1===c)t[s]=i;else if(c===a)t[s]=a;else if(void 0!==c)return c}},leave(...n){const i=n[0];for(let o=0;o<e.length;o++)if(null===t[o]){var r;const i=null===(r=s[o])||void 0===r?void 0:r.apply(e[o],n);if(i===a)t[o]=a;else if(void 0!==i&&!1!==i)return i}else t[o]===i&&(t[o]=null)}};n[i]=c}return n}function u(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function p(e,t,n){const{enter:i,leave:r}=u(e,t);return n?r:i}},6303:(e,t,n)=>{"use strict";n.d(t,{g:()=>a,i:()=>s});var i=n(7826),r=n(8087),o=n(8297);function s(e){if(null!=e||(0,i.a)(!1,"Must provide name."),"string"==typeof e||(0,i.a)(!1,"Expected name to be a string."),0===e.length)throw new r.__("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!(0,o.HQ)(e.charCodeAt(t)))throw new r.__(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!(0,o.LQ)(e.charCodeAt(0)))throw new r.__(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function a(e){if("true"===e||"false"===e||"null"===e)throw new r.__(`Enum values cannot be named: ${e}`);return s(e)}},398:(e,t,n)=>{"use strict";n.d(t,{mR:()=>ve,sR:()=>Te,oW:()=>he,p2:()=>Y,bM:()=>H,h6:()=>se,n2:()=>oe,Gp:()=>me,DM:()=>de,fU:()=>q,M_:()=>Q,Zu:()=>w,U8:()=>F,qT:()=>M,k2:()=>O,H5:()=>G,kS:()=>k,rM:()=>te,E$:()=>C,i_:()=>W,Z6:()=>_,Gt:()=>U,Pt:()=>N,p_:()=>g,rc:()=>A,vX:()=>z,WO:()=>le,xC:()=>ne,tf:()=>Z,m0:()=>K,Gv:()=>B,EM:()=>R,hL:()=>L,j$:()=>j,oT:()=>S,UT:()=>V,HG:()=>x,Zs:()=>ee,zM:()=>$,zP:()=>J,lp:()=>b,SZ:()=>P,dK:()=>fe,Wd:()=>Ie,KA:()=>I,P9:()=>T,EN:()=>D,fw:()=>X,WB:()=>re,_9:()=>ie});var i=n(7826),r=n(3177);function o(e){return e}var s=n(5821),a=n(8306),c=n(8495),l=n(3498),u=n(4950),p=n(5723),d=n(3294),f=n(8824),h=n(8087),m=n(7359),y=n(3486),v=n(2319),E=n(6303);function T(e){return I(e)||b(e)||S(e)||D(e)||R(e)||L(e)||x(e)||$(e)}function g(e){if(!T(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL type.`);return e}function I(e){return(0,a.n)(e,oe)}function N(e){if(!I(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Scalar type.`);return e}function b(e){return(0,a.n)(e,se)}function _(e){if(!b(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Object type.`);return e}function S(e){return(0,a.n)(e,he)}function O(e){if(!S(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Interface type.`);return e}function D(e){return(0,a.n)(e,me)}function A(e){if(!D(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Union type.`);return e}function R(e){return(0,a.n)(e,ve)}function w(e){if(!R(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Enum type.`);return e}function L(e){return(0,a.n)(e,Te)}function F(e){if(!L(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Input Object type.`);return e}function x(e){return(0,a.n)(e,Y)}function k(e){if(!x(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL List type.`);return e}function $(e){return(0,a.n)(e,H)}function C(e){if(!$(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Non-Null type.`);return e}function j(e){return I(e)||R(e)||L(e)||X(e)&&j(e.ofType)}function M(e){if(!j(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL input type.`);return e}function P(e){return I(e)||b(e)||S(e)||D(e)||R(e)||X(e)&&P(e.ofType)}function U(e){if(!P(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL output type.`);return e}function V(e){return I(e)||R(e)}function G(e){if(!V(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL leaf type.`);return e}function B(e){return b(e)||S(e)||D(e)}function Q(e){if(!B(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL composite type.`);return e}function K(e){return S(e)||D(e)}function q(e){if(!K(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL abstract type.`);return e}class Y{constructor(e){T(e)||(0,i.a)(!1,`Expected ${(0,s.X)(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class H{constructor(e){J(e)||(0,i.a)(!1,`Expected ${(0,s.X)(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function X(e){return x(e)||$(e)}function z(e){if(!X(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL wrapping type.`);return e}function J(e){return T(e)&&!$(e)}function W(e){if(!J(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL nullable type.`);return e}function Z(e){if(e)return $(e)?e.ofType:e}function ee(e){return I(e)||b(e)||S(e)||D(e)||R(e)||L(e)}function te(e){if(!ee(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL named type.`);return e}function ne(e){if(e){let t=e;for(;X(t);)t=t.ofType;return t}}function ie(e){return"function"==typeof e?e():e}function re(e){return"function"==typeof e?e():e}class oe{constructor(e){var t,n,r,a;const c=null!==(t=e.parseValue)&&void 0!==t?t:o;this.name=(0,E.i)(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:o,this.parseValue=c,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:(e,t)=>c((0,v.M)(e,t)),this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(a=e.extensionASTNodes)&&void 0!==a?a:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||(0,i.a)(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${(0,s.X)(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||(0,i.a)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,i.a)(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class se{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>ce(e),this._interfaces=()=>ae(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,i.a)(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${(0,s.X)(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:pe(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ae(e){var t;const n=ie(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||(0,i.a)(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function ce(e){const t=re(e.fields);return ue(t)||(0,i.a)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.j)(t,((t,n)=>{var r;ue(t)||(0,i.a)(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||(0,i.a)(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${(0,s.X)(t.resolve)}.`);const o=null!==(r=t.args)&&void 0!==r?r:{};return ue(o)||(0,i.a)(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:(0,E.i)(n),description:t.description,type:t.type,args:le(o),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode}}))}function le(e){return Object.entries(e).map((([e,t])=>({name:(0,E.i)(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))}function ue(e){return(0,c.y)(e)&&!Array.isArray(e)}function pe(e){return(0,p.j)(e,(e=>({description:e.description,type:e.type,args:de(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function de(e){return(0,u.w)(e,(e=>e.name),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function fe(e){return $(e.type)&&void 0===e.defaultValue}class he{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ce.bind(void 0,e),this._interfaces=ae.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.a)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.X)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:pe(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class me{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=ye.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.a)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.X)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ye(e){const t=ie(e.types);return Array.isArray(t)||(0,i.a)(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}class ve{constructor(e){var t,n,r;this.name=(0,E.i)(e.name),this.description=e.description,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=(n=this.name,ue(r=e.values)||(0,i.a)(!1,`${n} values must be an object with value names as keys.`),Object.entries(r).map((([e,t])=>(ue(t)||(0,i.a)(!1,`${n}.${e} must refer to an object with a "value" key representing an internal value but got: ${(0,s.X)(t)}.`),{name:(0,E.g)(e),description:t.description,value:void 0!==t.value?t.value:e,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))),this._valueLookup=new Map(this._values.map((e=>[e.value,e]))),this._nameLookup=(0,l.P)(this._values,(e=>e.name))}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){const t=this._valueLookup.get(e);if(void 0===t)throw new h.__(`Enum "${this.name}" cannot represent value: ${(0,s.X)(e)}`);return t.name}parseValue(e){if("string"!=typeof e){const t=(0,s.X)(e);throw new h.__(`Enum "${this.name}" cannot represent non-string value: ${t}.`+Ee(this,t))}const t=this.getValue(e);if(null==t)throw new h.__(`Value "${e}" does not exist in "${this.name}" enum.`+Ee(this,e));return t.value}parseLiteral(e,t){if(e.kind!==m.h.ENUM){const t=(0,y.S)(e);throw new h.__(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+Ee(this,t),{nodes:e})}const n=this.getValue(e.value);if(null==n){const t=(0,y.S)(e);throw new h.__(`Value "${t}" does not exist in "${this.name}" enum.`+Ee(this,t),{nodes:e})}return n.value}toConfig(){const e=(0,u.w)(this.getValues(),(e=>e.name),(e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Ee(e,t){const n=e.getValues().map((e=>e.name)),i=(0,d.D)(t,n);return(0,r.l)("the enum value",i)}class Te{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ge.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const e=(0,p.j)(this.getFields(),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ge(e){const t=re(e.fields);return ue(t)||(0,i.a)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.j)(t,((t,n)=>(!("resolve"in t)||(0,i.a)(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:(0,E.i)(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))}function Ie(e){return $(e.type)&&void 0===e.defaultValue}},8238:(e,t,n)=>{"use strict";n.d(t,{CO:()=>f,NZ:()=>h,QE:()=>y,SY:()=>v,V4:()=>g,Yf:()=>m,df:()=>T,fg:()=>E,wX:()=>d,xg:()=>I});var i=n(7826),r=n(5821),o=n(8306),s=n(8495),a=n(8824),c=n(9878),l=n(6303),u=n(398),p=n(3801);function d(e){return(0,o.n)(e,h)}function f(e){if(!d(e))throw new Error(`Expected ${(0,r.X)(e)} to be a GraphQL directive.`);return e}class h{constructor(e){var t,n;this.name=(0,l.i)(e.name),this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(t=e.isRepeatable)&&void 0!==t&&t,this.extensions=(0,a.u)(e.extensions),this.astNode=e.astNode,Array.isArray(e.locations)||(0,i.a)(!1,`@${e.name} locations must be an Array.`);const r=null!==(n=e.args)&&void 0!==n?n:{};(0,s.y)(r)&&!Array.isArray(r)||(0,i.a)(!1,`@${e.name} args must be an object with argument names as keys.`),this.args=(0,u.WO)(r)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,u.DM)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const m=new h({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[c.B.FIELD,c.B.FRAGMENT_SPREAD,c.B.INLINE_FRAGMENT],args:{if:{type:new u.bM(p.EZ),description:"Included when true."}}}),y=new h({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[c.B.FIELD,c.B.FRAGMENT_SPREAD,c.B.INLINE_FRAGMENT],args:{if:{type:new u.bM(p.EZ),description:"Skipped when true."}}}),v="No longer supported",E=new h({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[c.B.FIELD_DEFINITION,c.B.ARGUMENT_DEFINITION,c.B.INPUT_FIELD_DEFINITION,c.B.ENUM_VALUE],args:{reason:{type:p.kH,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:v}}}),T=new h({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[c.B.SCALAR],args:{url:{type:new u.bM(p.kH),description:"The URL that specifies the behavior of this scalar."}}}),g=Object.freeze([m,y,E,T]);function I(e){return g.some((({name:t})=>t===e.name))}},2433:(e,t,n)=>{"use strict";n.d(t,{Az:()=>T,PX:()=>E,TK:()=>u,XQ:()=>m,e_:()=>h,hU:()=>I,jT:()=>y,l3:()=>p,nL:()=>N,qz:()=>f,s9:()=>b,tF:()=>g,x2:()=>d,zU:()=>v});var i=n(5821),r=n(9551),o=n(9878),s=n(3486),a=n(8631),c=n(398),l=n(3801);const u=new c.h6({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:l.kH,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new c.bM(new c.p2(new c.bM(f))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new c.bM(f),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:f,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:f,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new c.bM(new c.p2(new c.bM(p))),resolve:e=>e.getDirectives()}})}),p=new c.h6({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},isRepeatable:{type:new c.bM(l.EZ),resolve:e=>e.isRepeatable},locations:{type:new c.bM(new c.p2(new c.bM(d))),resolve:e=>e.locations},args:{type:new c.bM(new c.p2(new c.bM(m))),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))}})}),d=new c.mR({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:o.B.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:o.B.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:o.B.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:o.B.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:o.B.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:o.B.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:o.B.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:o.B.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:o.B.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:o.B.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:o.B.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:o.B.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:o.B.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:o.B.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:o.B.UNION,description:"Location adjacent to a union definition."},ENUM:{value:o.B.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:o.B.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:o.B.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:o.B.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),f=new c.h6({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new c.bM(E),resolve:e=>(0,c.KA)(e)?v.SCALAR:(0,c.lp)(e)?v.OBJECT:(0,c.oT)(e)?v.INTERFACE:(0,c.EN)(e)?v.UNION:(0,c.EM)(e)?v.ENUM:(0,c.hL)(e)?v.INPUT_OBJECT:(0,c.HG)(e)?v.LIST:(0,c.zM)(e)?v.NON_NULL:void(0,r.k)(!1,`Unexpected type: "${(0,i.X)(e)}".`)},name:{type:l.kH,resolve:e=>"name"in e?e.name:void 0},description:{type:l.kH,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:l.kH,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new c.p2(new c.bM(h)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.lp)(e)||(0,c.oT)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},interfaces:{type:new c.p2(new c.bM(f)),resolve(e){if((0,c.lp)(e)||(0,c.oT)(e))return e.getInterfaces()}},possibleTypes:{type:new c.p2(new c.bM(f)),resolve(e,t,n,{schema:i}){if((0,c.m0)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.p2(new c.bM(y)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.EM)(e)){const n=e.getValues();return t?n:n.filter((e=>null==e.deprecationReason))}}},inputFields:{type:new c.p2(new c.bM(m)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.hL)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},ofType:{type:f,resolve:e=>"ofType"in e?e.ofType:void 0}})}),h=new c.h6({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},args:{type:new c.bM(new c.p2(new c.bM(m))),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))},type:{type:new c.bM(f),resolve:e=>e.type},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})}),m=new c.h6({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},type:{type:new c.bM(f),resolve:e=>e.type},defaultValue:{type:l.kH,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=(0,a.J)(n,t);return i?(0,s.S)(i):null}},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})}),y=new c.h6({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})});var v;!function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(v||(v={}));const E=new c.mR({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:v.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:v.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:v.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:v.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:v.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:v.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:v.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:v.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),T={name:"__schema",type:new c.bM(u),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},g={name:"__type",type:f,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.bM(l.kH),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},I={name:"__typename",type:new c.bM(l.kH),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},N=Object.freeze([u,p,d,f,h,m,y,E]);function b(e){return N.some((({name:t})=>e.name===t))}},3801:(e,t,n)=>{"use strict";n.d(t,{EZ:()=>h,HI:()=>l,HS:()=>y,_o:()=>p,av:()=>d,kH:()=>f,km:()=>m,st:()=>u,u1:()=>v});var i=n(5821),r=n(8495),o=n(8087),s=n(7359),a=n(3486),c=n(398);const l=2147483647,u=-2147483648,p=new c.n2({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=E(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new o.__(`Int cannot represent non-integer value: ${(0,i.X)(t)}`);if(n>l||n<u)throw new o.__("Int cannot represent non 32-bit signed integer value: "+(0,i.X)(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new o.__(`Int cannot represent non-integer value: ${(0,i.X)(e)}`);if(e>l||e<u)throw new o.__(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==s.h.INT)throw new o.__(`Int cannot represent non-integer value: ${(0,a.S)(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>l||t<u)throw new o.__(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),d=new c.n2({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=E(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new o.__(`Float cannot represent non numeric value: ${(0,i.X)(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new o.__(`Float cannot represent non numeric value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.FLOAT&&e.kind!==s.h.INT)throw new o.__(`Float cannot represent non numeric value: ${(0,a.S)(e)}`,e);return parseFloat(e.value)}}),f=new c.n2({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=E(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new o.__(`String cannot represent value: ${(0,i.X)(e)}`)},parseValue(e){if("string"!=typeof e)throw new o.__(`String cannot represent a non string value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.STRING)throw new o.__(`String cannot represent a non string value: ${(0,a.S)(e)}`,{nodes:e});return e.value}}),h=new c.n2({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=E(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new o.__(`Boolean cannot represent a non boolean value: ${(0,i.X)(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new o.__(`Boolean cannot represent a non boolean value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.BOOLEAN)throw new o.__(`Boolean cannot represent a non boolean value: ${(0,a.S)(e)}`,{nodes:e});return e.value}}),m=new c.n2({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=E(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new o.__(`ID cannot represent value: ${(0,i.X)(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new o.__(`ID cannot represent value: ${(0,i.X)(e)}`)},parseLiteral(e){if(e.kind!==s.h.STRING&&e.kind!==s.h.INT)throw new o.__("ID cannot represent a non-string and non-integer value: "+(0,a.S)(e),{nodes:e});return e.value}}),y=Object.freeze([f,p,d,h,m]);function v(e){return y.some((({name:t})=>e.name===t))}function E(e){if((0,r.y)(e)){if("function"==typeof e.valueOf){const t=e.valueOf();if(!(0,r.y)(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}},9678:(e,t,n)=>{"use strict";n.d(t,{EO:()=>f,XO:()=>h,nN:()=>d});var i=n(7826),r=n(5821),o=n(8306),s=n(8495),a=n(8824),c=n(2380),l=n(398),u=n(8238),p=n(2433);function d(e){return(0,o.n)(e,h)}function f(e){if(!d(e))throw new Error(`Expected ${(0,r.X)(e)} to be a GraphQL schema.`);return e}class h{constructor(e){var t,n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,s.y)(e)||(0,i.a)(!1,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,i.a)(!1,`"types" must be Array if provided but got: ${(0,r.X)(e.types)}.`),!e.directives||Array.isArray(e.directives)||(0,i.a)(!1,`"directives" must be Array if provided but got: ${(0,r.X)(e.directives)}.`),this.description=e.description,this.extensions=(0,a.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:u.V4;const o=new Set(e.types);if(null!=e.types)for(const t of e.types)o.delete(t),m(t,o);null!=this._queryType&&m(this._queryType,o),null!=this._mutationType&&m(this._mutationType,o),null!=this._subscriptionType&&m(this._subscriptionType,o);for(const e of this._directives)if((0,u.wX)(e))for(const t of e.args)m(t.type,o);m(p.TK,o),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const e of o){if(null==e)continue;const t=e.name;if(t||(0,i.a)(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[t])throw new Error(`Schema must contain uniquely named types but contains multiple types named "${t}".`);if(this._typeMap[t]=e,(0,l.oT)(e)){for(const t of e.getInterfaces())if((0,l.oT)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.interfaces.push(e)}}else if((0,l.lp)(e))for(const t of e.getInterfaces())if((0,l.oT)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.objects.push(e)}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(e){switch(e){case c.ku.QUERY:return this.getQueryType();case c.ku.MUTATION:return this.getMutationType();case c.ku.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(e){return this.getTypeMap()[e]}getPossibleTypes(e){return(0,l.EN)(e)?e.getTypes():this.getImplementations(e).objects}getImplementations(e){const t=this._implementationsMap[e.name];return null!=t?t:{objects:[],interfaces:[]}}isSubType(e,t){let n=this._subTypeMap[e.name];if(void 0===n){if(n=Object.create(null),(0,l.EN)(e))for(const t of e.getTypes())n[t.name]=!0;else{const t=this.getImplementations(e);for(const e of t.objects)n[e.name]=!0;for(const e of t.interfaces)n[e.name]=!0}this._subTypeMap[e.name]=n}return void 0!==n[t.name]}getDirectives(){return this._directives}getDirective(e){return this.getDirectives().find((t=>t.name===e))}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}function m(e,t){const n=(0,l.xC)(e);if(!t.has(n))if(t.add(n),(0,l.EN)(n))for(const e of n.getTypes())m(e,t);else if((0,l.lp)(n)||(0,l.oT)(n)){for(const e of n.getInterfaces())m(e,t);for(const e of Object.values(n.getFields())){m(e.type,t);for(const n of e.args)m(n.type,t)}}else if((0,l.hL)(n))for(const e of Object.values(n.getFields()))m(e.type,t);return t}},9655:(e,t,n)=>{"use strict";n.d(t,{F:()=>p,J:()=>d});var i=n(5821),r=n(8087),o=n(2380),s=n(316),a=n(398),c=n(8238),l=n(2433),u=n(9678);function p(e){if((0,u.EO)(e),e.__validationErrors)return e.__validationErrors;const t=new f(e);!function(e){const t=e.schema,n=t.getQueryType();if(n){if(!(0,a.lp)(n)){var r;e.reportError(`Query root type must be Object type, it cannot be ${(0,i.X)(n)}.`,null!==(r=h(t,o.ku.QUERY))&&void 0!==r?r:n.astNode)}}else e.reportError("Query root type must be provided.",t.astNode);const s=t.getMutationType();var c;s&&!(0,a.lp)(s)&&e.reportError(`Mutation root type must be Object type if provided, it cannot be ${(0,i.X)(s)}.`,null!==(c=h(t,o.ku.MUTATION))&&void 0!==c?c:s.astNode);const l=t.getSubscriptionType();var u;l&&!(0,a.lp)(l)&&e.reportError(`Subscription root type must be Object type if provided, it cannot be ${(0,i.X)(l)}.`,null!==(u=h(t,o.ku.SUBSCRIPTION))&&void 0!==u?u:l.astNode)}(t),function(e){for(const n of e.schema.getDirectives())if((0,c.wX)(n)){m(e,n);for(const r of n.args){var t;m(e,r),(0,a.j$)(r.type)||e.reportError(`The type of @${n.name}(${r.name}:) must be Input Type but got: ${(0,i.X)(r.type)}.`,r.astNode),(0,a.dK)(r)&&null!=r.deprecationReason&&e.reportError(`Required argument @${n.name}(${r.name}:) cannot be deprecated.`,[S(r.astNode),null===(t=r.astNode)||void 0===t?void 0:t.type])}}else e.reportError(`Expected directive but got: ${(0,i.X)(n)}.`,null==n?void 0:n.astNode)}(t),function(e){const t=function(e){const t=Object.create(null),n=[],i=Object.create(null);return function r(o){if(t[o.name])return;t[o.name]=!0,i[o.name]=n.length;const s=Object.values(o.getFields());for(const t of s)if((0,a.zM)(t.type)&&(0,a.hL)(t.type.ofType)){const o=t.type.ofType,s=i[o.name];if(n.push(t),void 0===s)r(o);else{const t=n.slice(s),i=t.map((e=>e.name)).join(".");e.reportError(`Cannot reference Input Object "${o.name}" within itself through a series of non-null fields: "${i}".`,t.map((e=>e.astNode)))}n.pop()}i[o.name]=void 0}}(e),n=e.schema.getTypeMap();for(const r of Object.values(n))(0,a.Zs)(r)?((0,l.s9)(r)||m(e,r),(0,a.lp)(r)||(0,a.oT)(r)?(y(e,r),v(e,r)):(0,a.EN)(r)?g(e,r):(0,a.EM)(r)?I(e,r):(0,a.hL)(r)&&(N(e,r),t(r))):e.reportError(`Expected GraphQL named type but got: ${(0,i.X)(r)}.`,r.astNode)}(t);const n=t.getErrors();return e.__validationErrors=n,n}function d(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))}class f{constructor(e){this._errors=[],this.schema=e}reportError(e,t){const n=Array.isArray(t)?t.filter(Boolean):t;this._errors.push(new r.__(e,{nodes:n}))}getErrors(){return this._errors}}function h(e,t){var n;return null===(n=[e.astNode,...e.extensionASTNodes].flatMap((e=>{var t;return null!==(t=null==e?void 0:e.operationTypes)&&void 0!==t?t:[]})).find((e=>e.operation===t)))||void 0===n?void 0:n.type}function m(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function y(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const c of n){var r;m(e,c),(0,a.SZ)(c.type)||e.reportError(`The type of ${t.name}.${c.name} must be Output Type but got: ${(0,i.X)(c.type)}.`,null===(r=c.astNode)||void 0===r?void 0:r.type);for(const n of c.args){const r=n.name;var o,s;m(e,n),(0,a.j$)(n.type)||e.reportError(`The type of ${t.name}.${c.name}(${r}:) must be Input Type but got: ${(0,i.X)(n.type)}.`,null===(o=n.astNode)||void 0===o?void 0:o.type),(0,a.dK)(n)&&null!=n.deprecationReason&&e.reportError(`Required argument ${t.name}.${c.name}(${r}:) cannot be deprecated.`,[S(n.astNode),null===(s=n.astNode)||void 0===s?void 0:s.type])}}}function v(e,t){const n=Object.create(null);for(const r of t.getInterfaces())(0,a.oT)(r)?t!==r?n[r.name]?e.reportError(`Type ${t.name} can only implement ${r.name} once.`,b(t,r)):(n[r.name]=!0,T(e,t,r),E(e,t,r)):e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,b(t,r)):e.reportError(`Type ${(0,i.X)(t)} must only implement Interface types, it cannot implement ${(0,i.X)(r)}.`,b(t,r))}function E(e,t,n){const r=t.getFields();for(const p of Object.values(n.getFields())){const d=p.name,f=r[d];if(f){var o,c;(0,s.uJ)(e.schema,f.type,p.type)||e.reportError(`Interface field ${n.name}.${d} expects type ${(0,i.X)(p.type)} but ${t.name}.${d} is type ${(0,i.X)(f.type)}.`,[null===(o=p.astNode)||void 0===o?void 0:o.type,null===(c=f.astNode)||void 0===c?void 0:c.type]);for(const r of p.args){const o=r.name,a=f.args.find((e=>e.name===o));var l,u;a?(0,s._7)(r.type,a.type)||e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expects type ${(0,i.X)(r.type)} but ${t.name}.${d}(${o}:) is type ${(0,i.X)(a.type)}.`,[null===(l=r.astNode)||void 0===l?void 0:l.type,null===(u=a.astNode)||void 0===u?void 0:u.type]):e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expected but ${t.name}.${d} does not provide it.`,[r.astNode,f.astNode])}for(const i of f.args){const r=i.name;!p.args.find((e=>e.name===r))&&(0,a.dK)(i)&&e.reportError(`Object field ${t.name}.${d} includes required argument ${r} that is missing from the Interface field ${n.name}.${d}.`,[i.astNode,p.astNode])}}else e.reportError(`Interface field ${n.name}.${d} expected but ${t.name} does not provide it.`,[p.astNode,t.astNode,...t.extensionASTNodes])}}function T(e,t,n){const i=t.getInterfaces();for(const r of n.getInterfaces())i.includes(r)||e.reportError(r===t?`Type ${t.name} cannot implement ${n.name} because it would create a circular reference.`:`Type ${t.name} must implement ${r.name} because it is implemented by ${n.name}.`,[...b(n,r),...b(t,n)])}function g(e,t){const n=t.getTypes();0===n.length&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);const r=Object.create(null);for(const o of n)r[o.name]?e.reportError(`Union type ${t.name} can only include type ${o.name} once.`,_(t,o.name)):(r[o.name]=!0,(0,a.lp)(o)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${(0,i.X)(o)}.`,_(t,String(o))))}function I(e,t){const n=t.getValues();0===n.length&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(const t of n)m(e,t)}function N(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const s of n){var r,o;m(e,s),(0,a.j$)(s.type)||e.reportError(`The type of ${t.name}.${s.name} must be Input Type but got: ${(0,i.X)(s.type)}.`,null===(r=s.astNode)||void 0===r?void 0:r.type),(0,a.Wd)(s)&&null!=s.deprecationReason&&e.reportError(`Required input field ${t.name}.${s.name} cannot be deprecated.`,[S(s.astNode),null===(o=s.astNode)||void 0===o?void 0:o.type])}}function b(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.interfaces)&&void 0!==t?t:[]})).filter((e=>e.name.value===t.name))}function _(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.types)&&void 0!==t?t:[]})).filter((e=>e.name.value===t))}function S(e){var t;return null==e||null===(t=e.directives)||void 0===t?void 0:t.find((e=>e.name.value===c.fg.name))}},2676:(e,t,n)=>{"use strict";n.d(t,{a:()=>l,y:()=>p});var i=n(2380),r=n(7359),o=n(7304),s=n(398),a=n(2433),c=n(77);class l{constructor(e,t,n){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:u,t&&((0,s.j$)(t)&&this._inputTypeStack.push(t),(0,s.Gv)(t)&&this._parentTypeStack.push(t),(0,s.SZ)(t)&&this._typeStack.push(t))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(e){const t=this._schema;switch(e.kind){case r.h.SELECTION_SET:{const e=(0,s.xC)(this.getType());this._parentTypeStack.push((0,s.Gv)(e)?e:void 0);break}case r.h.FIELD:{const n=this.getParentType();let i,r;n&&(i=this._getFieldDef(t,n,e),i&&(r=i.type)),this._fieldDefStack.push(i),this._typeStack.push((0,s.SZ)(r)?r:void 0);break}case r.h.DIRECTIVE:this._directive=t.getDirective(e.name.value);break;case r.h.OPERATION_DEFINITION:{const n=t.getRootType(e.operation);this._typeStack.push((0,s.lp)(n)?n:void 0);break}case r.h.INLINE_FRAGMENT:case r.h.FRAGMENT_DEFINITION:{const n=e.typeCondition,i=n?(0,c._)(t,n):(0,s.xC)(this.getType());this._typeStack.push((0,s.SZ)(i)?i:void 0);break}case r.h.VARIABLE_DEFINITION:{const n=(0,c._)(t,e.type);this._inputTypeStack.push((0,s.j$)(n)?n:void 0);break}case r.h.ARGUMENT:{var n;let t,i;const r=null!==(n=this.getDirective())&&void 0!==n?n:this.getFieldDef();r&&(t=r.args.find((t=>t.name===e.name.value)),t&&(i=t.type)),this._argument=t,this._defaultValueStack.push(t?t.defaultValue:void 0),this._inputTypeStack.push((0,s.j$)(i)?i:void 0);break}case r.h.LIST:{const e=(0,s.tf)(this.getInputType()),t=(0,s.HG)(e)?e.ofType:e;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.j$)(t)?t:void 0);break}case r.h.OBJECT_FIELD:{const t=(0,s.xC)(this.getInputType());let n,i;(0,s.hL)(t)&&(i=t.getFields()[e.name.value],i&&(n=i.type)),this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push((0,s.j$)(n)?n:void 0);break}case r.h.ENUM:{const t=(0,s.xC)(this.getInputType());let n;(0,s.EM)(t)&&(n=t.getValue(e.value)),this._enumValue=n;break}}}leave(e){switch(e.kind){case r.h.SELECTION_SET:this._parentTypeStack.pop();break;case r.h.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case r.h.DIRECTIVE:this._directive=null;break;case r.h.OPERATION_DEFINITION:case r.h.INLINE_FRAGMENT:case r.h.FRAGMENT_DEFINITION:this._typeStack.pop();break;case r.h.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case r.h.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.h.LIST:case r.h.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.h.ENUM:this._enumValue=null}}}function u(e,t,n){const i=n.name.value;return i===a.Az.name&&e.getQueryType()===t?a.Az:i===a.tF.name&&e.getQueryType()===t?a.tF:i===a.hU.name&&(0,s.Gv)(t)?a.hU:(0,s.lp)(t)||(0,s.oT)(t)?t.getFields()[i]:void 0}function p(e,t){return{enter(...n){const r=n[0];e.enter(r);const s=(0,o.Eu)(t,r.kind).enter;if(s){const o=s.apply(t,n);return void 0!==o&&(e.leave(r),(0,i.UG)(o)&&e.enter(o)),o}},leave(...n){const i=n[0],r=(0,o.Eu)(t,i.kind).leave;let s;return r&&(s=r.apply(t,n)),e.leave(i),s}}}},8631:(e,t,n)=>{"use strict";n.d(t,{J:()=>u});var i=n(5821),r=n(9551),o=n(3831),s=n(8495),a=n(7359),c=n(398),l=n(3801);function u(e,t){if((0,c.zM)(t)){const n=u(e,t.ofType);return(null==n?void 0:n.kind)===a.h.NULL?null:n}if(null===e)return{kind:a.h.NULL};if(void 0===e)return null;if((0,c.HG)(t)){const n=t.ofType;if((0,o.i)(e)){const t=[];for(const i of e){const e=u(i,n);null!=e&&t.push(e)}return{kind:a.h.LIST,values:t}}return u(e,n)}if((0,c.hL)(t)){if(!(0,s.y)(e))return null;const n=[];for(const i of Object.values(t.getFields())){const t=u(e[i.name],i.type);t&&n.push({kind:a.h.OBJECT_FIELD,name:{kind:a.h.NAME,value:i.name},value:t})}return{kind:a.h.OBJECT,fields:n}}if((0,c.UT)(t)){const n=t.serialize(e);if(null==n)return null;if("boolean"==typeof n)return{kind:a.h.BOOLEAN,value:n};if("number"==typeof n&&Number.isFinite(n)){const e=String(n);return p.test(e)?{kind:a.h.INT,value:e}:{kind:a.h.FLOAT,value:e}}if("string"==typeof n)return(0,c.EM)(t)?{kind:a.h.ENUM,value:n}:t===l.km&&p.test(n)?{kind:a.h.INT,value:n}:{kind:a.h.STRING,value:n};throw new TypeError(`Cannot convert value to AST: ${(0,i.X)(n)}.`)}(0,r.k)(!1,"Unexpected input type: "+(0,i.X)(t))}const p=/^-?(?:0|[1-9][0-9]*)$/},6535:(e,t,n)=>{"use strict";n.d(t,{I:()=>p,M:()=>u});var i=n(7826),r=n(7359),o=n(4275),s=n(8238),a=n(9678),c=n(6584),l=n(9557);function u(e,t){null!=e&&e.kind===r.h.DOCUMENT||(0,i.a)(!1,"Must provide valid Document AST."),!0!==(null==t?void 0:t.assumeValid)&&!0!==(null==t?void 0:t.assumeValidSDL)&&(0,c.zo)(e);const n={description:void 0,types:[],directives:[],extensions:Object.create(null),extensionASTNodes:[],assumeValid:!1},o=(0,l.w)(n,e,t);if(null==o.astNode)for(const e of o.types)switch(e.name){case"Query":o.query=e;break;case"Mutation":o.mutation=e;break;case"Subscription":o.subscription=e}const u=[...o.directives,...s.V4.filter((e=>o.directives.every((t=>t.name!==e.name))))];return new a.XO({...o,directives:u})}function p(e,t){return u((0,o.Qc)(e,{noLocation:null==t?void 0:t.noLocation,allowLegacyFragmentVariables:null==t?void 0:t.allowLegacyFragmentVariables}),{assumeValidSDL:null==t?void 0:t.assumeValidSDL,assumeValid:null==t?void 0:t.assumeValid})}},7816:(e,t,n)=>{"use strict";n.d(t,{K:()=>f});var i=n(3177),r=n(5821),o=n(9551),s=n(3831),a=n(8495),c=n(9380),l=n(4244),u=n(3294),p=n(8087),d=n(398);function f(e,t,n=h){return m(e,t,n,void 0)}function h(e,t,n){let i="Invalid value "+(0,r.X)(t);throw e.length>0&&(i+=` at "value${(0,l.F)(e)}"`),n.message=i+": "+n.message,n}function m(e,t,n,l){if((0,d.zM)(t))return null!=e?m(e,t.ofType,n,l):void n((0,c.N)(l),e,new p.__(`Expected non-nullable type "${(0,r.X)(t)}" not to be null.`));if(null==e)return null;if((0,d.HG)(t)){const i=t.ofType;return(0,s.i)(e)?Array.from(e,((e,t)=>{const r=(0,c.Q)(l,t,void 0);return m(e,i,n,r)})):[m(e,i,n,l)]}if((0,d.hL)(t)){if(!(0,a.y)(e))return void n((0,c.N)(l),e,new p.__(`Expected type "${t.name}" to be an object.`));const o={},s=t.getFields();for(const i of Object.values(s)){const s=e[i.name];if(void 0!==s)o[i.name]=m(s,i.type,n,(0,c.Q)(l,i.name,t.name));else if(void 0!==i.defaultValue)o[i.name]=i.defaultValue;else if((0,d.zM)(i.type)){const t=(0,r.X)(i.type);n((0,c.N)(l),e,new p.__(`Field "${i.name}" of required type "${t}" was not provided.`))}}for(const r of Object.keys(e))if(!s[r]){const o=(0,u.D)(r,Object.keys(t.getFields()));n((0,c.N)(l),e,new p.__(`Field "${r}" is not defined by type "${t.name}".`+(0,i.l)(o)))}return o}if((0,d.UT)(t)){let i;try{i=t.parseValue(e)}catch(i){return void(i instanceof p.__?n((0,c.N)(l),e,i):n((0,c.N)(l),e,new p.__(`Expected type "${t.name}". `+i.message,{originalError:i})))}return void 0===i&&n((0,c.N)(l),e,new p.__(`Expected type "${t.name}".`)),i}(0,o.k)(!1,"Unexpected input type: "+(0,r.X)(t))}},9557:(e,t,n)=>{"use strict";n.d(t,{a:()=>E,w:()=>T});var i=n(7826),r=n(5821),o=n(9551),s=n(3498),a=n(5723),c=n(7359),l=n(5844),u=n(398),p=n(8238),d=n(2433),f=n(3801),h=n(9678),m=n(6584),y=n(6422),v=n(2221);function E(e,t,n){(0,h.EO)(e),null!=t&&t.kind===c.h.DOCUMENT||(0,i.a)(!1,"Must provide valid Document AST."),!0!==(null==n?void 0:n.assumeValid)&&!0!==(null==n?void 0:n.assumeValidSDL)&&(0,m.ED)(t,e);const r=e.toConfig(),o=T(r,t,n);return r===o?e:new h.XO(o)}function T(e,t,n){var i,s,h,m;const y=[],E=Object.create(null),T=[];let b;const _=[];for(const e of t.definitions)if(e.kind===c.h.SCHEMA_DEFINITION)b=e;else if(e.kind===c.h.SCHEMA_EXTENSION)_.push(e);else if((0,l.zT)(e))y.push(e);else if((0,l.D$)(e)){const t=e.name.value,n=E[t];E[t]=n?n.concat([e]):[e]}else e.kind===c.h.DIRECTIVE_DEFINITION&&T.push(e);if(0===Object.keys(E).length&&0===y.length&&0===T.length&&0===_.length&&null==b)return e;const S=Object.create(null);for(const t of e.types)S[t.name]=(O=t,(0,d.s9)(O)||(0,f.u1)(O)?O:(0,u.KA)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];let r=n.specifiedByURL;for(const e of i){var o;r=null!==(o=N(e))&&void 0!==o?o:r}return new u.n2({...n,specifiedByURL:r,extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.lp)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.h6({...n,interfaces:()=>[...e.getInterfaces().map(w),...U(i)],fields:()=>({...(0,a.j)(n.fields,L),...C(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.oT)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.oW({...n,interfaces:()=>[...e.getInterfaces().map(w),...U(i)],fields:()=>({...(0,a.j)(n.fields,L),...C(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.EN)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.Gp({...n,types:()=>[...e.getTypes().map(w),...V(i)],extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.EM)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[e.name])&&void 0!==t?t:[];return new u.mR({...n,values:{...n.values,...P(i)},extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.hL)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.sR({...n,fields:()=>({...(0,a.j)(n.fields,(e=>({...e,type:R(e.type)}))),...M(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):void(0,o.k)(!1,"Unexpected type: "+(0,r.X)(O)));var O;for(const e of y){var D;const t=e.name.value;S[t]=null!==(D=g[t])&&void 0!==D?D:G(e)}const A={query:e.query&&w(e.query),mutation:e.mutation&&w(e.mutation),subscription:e.subscription&&w(e.subscription),...b&&x([b]),...x(_)};return{description:null===(i=b)||void 0===i||null===(s=i.description)||void 0===s?void 0:s.value,...A,types:Object.values(S),directives:[...e.directives.map((function(e){const t=e.toConfig();return new p.NZ({...t,args:(0,a.j)(t.args,F)})})),...T.map((function(e){var t;return new p.NZ({name:e.name.value,description:null===(t=e.description)||void 0===t?void 0:t.value,locations:e.locations.map((({value:e})=>e)),isRepeatable:e.repeatable,args:j(e.arguments),astNode:e})}))],extensions:Object.create(null),astNode:null!==(h=b)&&void 0!==h?h:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(_),assumeValid:null!==(m=null==n?void 0:n.assumeValid)&&void 0!==m&&m};function R(e){return(0,u.HG)(e)?new u.p2(R(e.ofType)):(0,u.zM)(e)?new u.bM(R(e.ofType)):w(e)}function w(e){return S[e.name]}function L(e){return{...e,type:R(e.type),args:e.args&&(0,a.j)(e.args,F)}}function F(e){return{...e,type:R(e.type)}}function x(e){const t={};for(const i of e){var n;const e=null!==(n=i.operationTypes)&&void 0!==n?n:[];for(const n of e)t[n.operation]=k(n.type)}return t}function k(e){var t;const n=e.name.value,i=null!==(t=g[n])&&void 0!==t?t:S[n];if(void 0===i)throw new Error(`Unknown type: "${n}".`);return i}function $(e){return e.kind===c.h.LIST_TYPE?new u.p2($(e.type)):e.kind===c.h.NON_NULL_TYPE?new u.bM($(e.type)):k(e)}function C(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.fields)&&void 0!==n?n:[];for(const n of e){var i;t[n.name.value]={type:$(n.type),description:null===(i=n.description)||void 0===i?void 0:i.value,args:j(n.arguments),deprecationReason:I(n),astNode:n}}}return t}function j(e){const t=null!=e?e:[],n=Object.create(null);for(const e of t){var i;const t=$(e.type);n[e.name.value]={type:t,description:null===(i=e.description)||void 0===i?void 0:i.value,defaultValue:(0,v.u)(e.defaultValue,t),deprecationReason:I(e),astNode:e}}return n}function M(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.fields)&&void 0!==n?n:[];for(const n of e){var i;const e=$(n.type);t[n.name.value]={type:e,description:null===(i=n.description)||void 0===i?void 0:i.value,defaultValue:(0,v.u)(n.defaultValue,e),deprecationReason:I(n),astNode:n}}}return t}function P(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.values)&&void 0!==n?n:[];for(const n of e){var i;t[n.name.value]={description:null===(i=n.description)||void 0===i?void 0:i.value,deprecationReason:I(n),astNode:n}}}return t}function U(e){return e.flatMap((e=>{var t,n;return null!==(t=null===(n=e.interfaces)||void 0===n?void 0:n.map(k))&&void 0!==t?t:[]}))}function V(e){return e.flatMap((e=>{var t,n;return null!==(t=null===(n=e.types)||void 0===n?void 0:n.map(k))&&void 0!==t?t:[]}))}function G(e){var t;const n=e.name.value,i=null!==(t=E[n])&&void 0!==t?t:[];switch(e.kind){case c.h.OBJECT_TYPE_DEFINITION:{var r;const t=[e,...i];return new u.h6({name:n,description:null===(r=e.description)||void 0===r?void 0:r.value,interfaces:()=>U(t),fields:()=>C(t),astNode:e,extensionASTNodes:i})}case c.h.INTERFACE_TYPE_DEFINITION:{var o;const t=[e,...i];return new u.oW({name:n,description:null===(o=e.description)||void 0===o?void 0:o.value,interfaces:()=>U(t),fields:()=>C(t),astNode:e,extensionASTNodes:i})}case c.h.ENUM_TYPE_DEFINITION:{var s;const t=[e,...i];return new u.mR({name:n,description:null===(s=e.description)||void 0===s?void 0:s.value,values:P(t),astNode:e,extensionASTNodes:i})}case c.h.UNION_TYPE_DEFINITION:{var a;const t=[e,...i];return new u.Gp({name:n,description:null===(a=e.description)||void 0===a?void 0:a.value,types:()=>V(t),astNode:e,extensionASTNodes:i})}case c.h.SCALAR_TYPE_DEFINITION:var l;return new u.n2({name:n,description:null===(l=e.description)||void 0===l?void 0:l.value,specifiedByURL:N(e),astNode:e,extensionASTNodes:i});case c.h.INPUT_OBJECT_TYPE_DEFINITION:{var p;const t=[e,...i];return new u.sR({name:n,description:null===(p=e.description)||void 0===p?void 0:p.value,fields:()=>M(t),astNode:e,extensionASTNodes:i})}}}}const g=(0,s.P)([...f.HS,...d.nL],(e=>e.name));function I(e){const t=(0,y.zu)(p.fg,e);return null==t?void 0:t.reason}function N(e){const t=(0,y.zu)(p.df,e);return null==t?void 0:t.url}},8360:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var i=n(8224),r=n(7359);function o(e){switch(e.kind){case r.h.OBJECT:return{...e,fields:(t=e.fields,t.map((e=>({...e,value:o(e.value)}))).sort(((e,t)=>(0,i.K)(e.name.value,t.name.value))))};case r.h.LIST:return{...e,values:e.values.map(o)};case r.h.INT:case r.h.FLOAT:case r.h.STRING:case r.h.BOOLEAN:case r.h.NULL:case r.h.ENUM:case r.h.VARIABLE:return e}var t}},316:(e,t,n)=>{"use strict";n.d(t,{_7:()=>r,uJ:()=>o,zR:()=>s});var i=n(398);function r(e,t){return e===t||((0,i.zM)(e)&&(0,i.zM)(t)||!(!(0,i.HG)(e)||!(0,i.HG)(t)))&&r(e.ofType,t.ofType)}function o(e,t,n){return t===n||((0,i.zM)(n)?!!(0,i.zM)(t)&&o(e,t.ofType,n.ofType):(0,i.zM)(t)?o(e,t.ofType,n):(0,i.HG)(n)?!!(0,i.HG)(t)&&o(e,t.ofType,n.ofType):!(0,i.HG)(t)&&(0,i.m0)(n)&&((0,i.oT)(t)||(0,i.lp)(t))&&e.isSubType(n,t))}function s(e,t,n){return t===n||((0,i.m0)(t)?(0,i.m0)(n)?e.getPossibleTypes(t).some((t=>e.isSubType(n,t))):e.isSubType(t,n):!!(0,i.m0)(n)&&e.isSubType(n,t))}},77:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var i=n(7359),r=n(398);function o(e,t){switch(t.kind){case i.h.LIST_TYPE:{const n=o(e,t.type);return n&&new r.p2(n)}case i.h.NON_NULL_TYPE:{const n=o(e,t.type);return n&&new r.bM(n)}case i.h.NAMED_TYPE:return e.getType(t.name.value)}}},2221:(e,t,n)=>{"use strict";n.d(t,{u:()=>c});var i=n(5821),r=n(9551),o=n(3498),s=n(7359),a=n(398);function c(e,t,n){if(e){if(e.kind===s.h.VARIABLE){const i=e.name.value;if(null==n||void 0===n[i])return;const r=n[i];if(null===r&&(0,a.zM)(t))return;return r}if((0,a.zM)(t)){if(e.kind===s.h.NULL)return;return c(e,t.ofType,n)}if(e.kind===s.h.NULL)return null;if((0,a.HG)(t)){const i=t.ofType;if(e.kind===s.h.LIST){const t=[];for(const r of e.values)if(l(r,n)){if((0,a.zM)(i))return;t.push(null)}else{const e=c(r,i,n);if(void 0===e)return;t.push(e)}return t}const r=c(e,i,n);if(void 0===r)return;return[r]}if((0,a.hL)(t)){if(e.kind!==s.h.OBJECT)return;const i=Object.create(null),r=(0,o.P)(e.fields,(e=>e.name.value));for(const e of Object.values(t.getFields())){const t=r[e.name];if(!t||l(t.value,n)){if(void 0!==e.defaultValue)i[e.name]=e.defaultValue;else if((0,a.zM)(e.type))return;continue}const o=c(t.value,e.type,n);if(void 0===o)return;i[e.name]=o}return i}if((0,a.UT)(t)){let i;try{i=t.parseLiteral(e,n)}catch(e){return}if(void 0===i)return;return i}(0,r.k)(!1,"Unexpected input type: "+(0,i.X)(t))}}function l(e,t){return e.kind===s.h.VARIABLE&&(null==t||void 0===t[e.name.value])}},2319:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var i=n(4950),r=n(7359);function o(e,t){switch(e.kind){case r.h.NULL:return null;case r.h.INT:return parseInt(e.value,10);case r.h.FLOAT:return parseFloat(e.value);case r.h.STRING:case r.h.ENUM:case r.h.BOOLEAN:return e.value;case r.h.LIST:return e.values.map((e=>o(e,t)));case r.h.OBJECT:return(0,i.w)(e.fields,(e=>e.name.value),(e=>o(e.value,t)));case r.h.VARIABLE:return null==t?void 0:t[e.name.value]}}},2734:(e,t,n)=>{"use strict";n.d(t,{_t:()=>c,yv:()=>a});var i=n(7359),r=n(7304),o=n(2676);class s{constructor(e,t){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=t}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(e){this._onError(e)}getDocument(){return this._ast}getFragment(e){let t;if(this._fragments)t=this._fragments;else{t=Object.create(null);for(const e of this.getDocument().definitions)e.kind===i.h.FRAGMENT_DEFINITION&&(t[e.name.value]=e);this._fragments=t}return t[e]}getFragmentSpreads(e){let t=this._fragmentSpreads.get(e);if(!t){t=[];const n=[e];let r;for(;r=n.pop();)for(const e of r.selections)e.kind===i.h.FRAGMENT_SPREAD?t.push(e):e.selectionSet&&n.push(e.selectionSet);this._fragmentSpreads.set(e,t)}return t}getRecursivelyReferencedFragments(e){let t=this._recursivelyReferencedFragments.get(e);if(!t){t=[];const n=Object.create(null),i=[e.selectionSet];let r;for(;r=i.pop();)for(const e of this.getFragmentSpreads(r)){const r=e.name.value;if(!0!==n[r]){n[r]=!0;const e=this.getFragment(r);e&&(t.push(e),i.push(e.selectionSet))}}this._recursivelyReferencedFragments.set(e,t)}return t}}class a extends s{constructor(e,t,n){super(e,n),this._schema=t}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}class c extends s{constructor(e,t,n,i){super(t,i),this._schema=e,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(e){let t=this._variableUsages.get(e);if(!t){const n=[],i=new o.a(this._schema);(0,r.Vn)(e,(0,o.y)(i,{VariableDefinition:()=>!1,Variable(e){n.push({node:e,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),t=n,this._variableUsages.set(e,t)}return t}getRecursiveVariableUsages(e){let t=this._recursiveVariableUsages.get(e);if(!t){t=this.getVariableUsages(e);for(const n of this.getRecursivelyReferencedFragments(e))t=t.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(e,t)}return t}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}},8081:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var i=n(8087),r=n(7359),o=n(5844);function s(e){return{Document(t){for(const n of t.definitions)if(!(0,o.Wk)(n)){const t=n.kind===r.h.SCHEMA_DEFINITION||n.kind===r.h.SCHEMA_EXTENSION?"schema":'"'+n.name.value+'"';e.reportError(new i.__(`The ${t} definition is not executable.`,{nodes:n}))}return!1}}}},8741:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var i=n(3177),r=n(8224),o=n(3294),s=n(8087),a=n(398);function c(e){return{Field(t){const n=e.getParentType();if(n&&!e.getFieldDef()){const c=e.getSchema(),l=t.name.value;let u=(0,i.l)("to use an inline fragment on",function(e,t,n){if(!(0,a.m0)(t))return[];const i=new Set,o=Object.create(null);for(const r of e.getPossibleTypes(t))if(r.getFields()[n]){i.add(r),o[r.name]=1;for(const e of r.getInterfaces()){var s;e.getFields()[n]&&(i.add(e),o[e.name]=(null!==(s=o[e.name])&&void 0!==s?s:0)+1)}}return[...i].sort(((t,n)=>{const i=o[n.name]-o[t.name];return 0!==i?i:(0,a.oT)(t)&&e.isSubType(t,n)?-1:(0,a.oT)(n)&&e.isSubType(n,t)?1:(0,r.K)(t.name,n.name)})).map((e=>e.name))}(c,n,l));""===u&&(u=(0,i.l)(function(e,t){if((0,a.lp)(e)||(0,a.oT)(e)){const n=Object.keys(e.getFields());return(0,o.D)(t,n)}return[]}(n,l))),e.reportError(new s.__(`Cannot query field "${l}" on type "${n.name}".`+u,{nodes:t}))}}}}},7143:(e,t,n)=>{"use strict";n.d(t,{T:()=>a});var i=n(8087),r=n(3486),o=n(398),s=n(77);function a(e){return{InlineFragment(t){const n=t.typeCondition;if(n){const t=(0,s._)(e.getSchema(),n);if(t&&!(0,o.Gv)(t)){const t=(0,r.S)(n);e.reportError(new i.__(`Fragment cannot condition on non composite type "${t}".`,{nodes:n}))}}},FragmentDefinition(t){const n=(0,s._)(e.getSchema(),t.typeCondition);if(n&&!(0,o.Gv)(n)){const n=(0,r.S)(t.typeCondition);e.reportError(new i.__(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}}},7815:(e,t,n)=>{"use strict";n.d(t,{e:()=>c,o:()=>l});var i=n(3177),r=n(3294),o=n(8087),s=n(7359),a=n(8238);function c(e){return{...l(e),Argument(t){const n=e.getArgument(),s=e.getFieldDef(),a=e.getParentType();if(!n&&s&&a){const n=t.name.value,c=s.args.map((e=>e.name)),l=(0,r.D)(n,c);e.reportError(new o.__(`Unknown argument "${n}" on field "${a.name}.${s.name}".`+(0,i.l)(l),{nodes:t}))}}}}function l(e){const t=Object.create(null),n=e.getSchema(),c=n?n.getDirectives():a.V4;for(const e of c)t[e.name]=e.args.map((e=>e.name));const l=e.getDocument().definitions;for(const e of l)if(e.kind===s.h.DIRECTIVE_DEFINITION){var u;const n=null!==(u=e.arguments)&&void 0!==u?u:[];t[e.name.value]=n.map((e=>e.name.value))}return{Directive(n){const s=n.name.value,a=t[s];if(n.arguments&&a)for(const t of n.arguments){const n=t.name.value;if(!a.includes(n)){const c=(0,r.D)(n,a);e.reportError(new o.__(`Unknown argument "${n}" on directive "@${s}".`+(0,i.l)(c),{nodes:t}))}}return!1}}}},4873:(e,t,n)=>{"use strict";n.d(t,{J:()=>u});var i=n(5821),r=n(9551),o=n(8087),s=n(2380),a=n(9878),c=n(7359),l=n(8238);function u(e){const t=Object.create(null),n=e.getSchema(),u=n?n.getDirectives():l.V4;for(const e of u)t[e.name]=e.locations;const p=e.getDocument().definitions;for(const e of p)e.kind===c.h.DIRECTIVE_DEFINITION&&(t[e.name.value]=e.locations.map((e=>e.value)));return{Directive(n,l,u,p,d){const f=n.name.value,h=t[f];if(!h)return void e.reportError(new o.__(`Unknown directive "@${f}".`,{nodes:n}));const m=function(e){const t=e[e.length-1];switch("kind"in t||(0,r.k)(!1),t.kind){case c.h.OPERATION_DEFINITION:return function(e){switch(e){case s.ku.QUERY:return a.B.QUERY;case s.ku.MUTATION:return a.B.MUTATION;case s.ku.SUBSCRIPTION:return a.B.SUBSCRIPTION}}(t.operation);case c.h.FIELD:return a.B.FIELD;case c.h.FRAGMENT_SPREAD:return a.B.FRAGMENT_SPREAD;case c.h.INLINE_FRAGMENT:return a.B.INLINE_FRAGMENT;case c.h.FRAGMENT_DEFINITION:return a.B.FRAGMENT_DEFINITION;case c.h.VARIABLE_DEFINITION:return a.B.VARIABLE_DEFINITION;case c.h.SCHEMA_DEFINITION:case c.h.SCHEMA_EXTENSION:return a.B.SCHEMA;case c.h.SCALAR_TYPE_DEFINITION:case c.h.SCALAR_TYPE_EXTENSION:return a.B.SCALAR;case c.h.OBJECT_TYPE_DEFINITION:case c.h.OBJECT_TYPE_EXTENSION:return a.B.OBJECT;case c.h.FIELD_DEFINITION:return a.B.FIELD_DEFINITION;case c.h.INTERFACE_TYPE_DEFINITION:case c.h.INTERFACE_TYPE_EXTENSION:return a.B.INTERFACE;case c.h.UNION_TYPE_DEFINITION:case c.h.UNION_TYPE_EXTENSION:return a.B.UNION;case c.h.ENUM_TYPE_DEFINITION:case c.h.ENUM_TYPE_EXTENSION:return a.B.ENUM;case c.h.ENUM_VALUE_DEFINITION:return a.B.ENUM_VALUE;case c.h.INPUT_OBJECT_TYPE_DEFINITION:case c.h.INPUT_OBJECT_TYPE_EXTENSION:return a.B.INPUT_OBJECT;case c.h.INPUT_VALUE_DEFINITION:{const t=e[e.length-3];return"kind"in t||(0,r.k)(!1),t.kind===c.h.INPUT_OBJECT_TYPE_DEFINITION?a.B.INPUT_FIELD_DEFINITION:a.B.ARGUMENT_DEFINITION}default:(0,r.k)(!1,"Unexpected kind: "+(0,i.X)(t.kind))}}(d);m&&!h.includes(m)&&e.reportError(new o.__(`Directive "@${f}" may not be used on ${m}.`,{nodes:n}))}}}},5311:(e,t,n)=>{"use strict";n.d(t,{a:()=>r});var i=n(8087);function r(e){return{FragmentSpread(t){const n=t.name.value;e.getFragment(n)||e.reportError(new i.__(`Unknown fragment "${n}".`,{nodes:t.name}))}}}},5580:(e,t,n)=>{"use strict";n.d(t,{I:()=>c});var i=n(3177),r=n(3294),o=n(8087),s=n(5844),a=n(2433);function c(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),a=Object.create(null);for(const t of e.getDocument().definitions)(0,s.zT)(t)&&(a[t.name.value]=!0);const c=[...Object.keys(n),...Object.keys(a)];return{NamedType(t,u,p,d,f){const h=t.name.value;if(!n[h]&&!a[h]){var m;const n=null!==(m=f[2])&&void 0!==m?m:p,a=null!=n&&"kind"in(y=n)&&((0,s.G4)(y)||(0,s.aU)(y));if(a&&l.includes(h))return;const u=(0,r.D)(h,a?l.concat(c):c);e.reportError(new o.__(`Unknown type "${h}".`+(0,i.l)(u),{nodes:t}))}var y}}}const l=[...n(3801).HS,...a.nL].map((e=>e.name))},7898:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var i=n(8087),r=n(7359);function o(e){let t=0;return{Document(e){t=e.definitions.filter((e=>e.kind===r.h.OPERATION_DEFINITION)).length},OperationDefinition(n){!n.name&&t>1&&e.reportError(new i.__("This anonymous operation must be the only defined operation.",{nodes:n}))}}}},2877:(e,t,n)=>{"use strict";n.d(t,{t:()=>r});var i=n(8087);function r(e){var t,n,r;const o=e.getSchema(),s=null!==(t=null!==(n=null!==(r=null==o?void 0:o.astNode)&&void 0!==r?r:null==o?void 0:o.getQueryType())&&void 0!==n?n:null==o?void 0:o.getMutationType())&&void 0!==t?t:null==o?void 0:o.getSubscriptionType();let a=0;return{SchemaDefinition(t){s?e.reportError(new i.__("Cannot define a new schema within a schema extension.",{nodes:t})):(a>0&&e.reportError(new i.__("Must provide only one schema definition.",{nodes:t})),++a)}}}},1422:(e,t,n)=>{"use strict";n.d(t,{H:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=[],r=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition:e=>(o(e),!1)};function o(s){if(t[s.name.value])return;const a=s.name.value;t[a]=!0;const c=e.getFragmentSpreads(s.selectionSet);if(0!==c.length){r[a]=n.length;for(const t of c){const s=t.name.value,a=r[s];if(n.push(t),void 0===a){const t=e.getFragment(s);t&&o(t)}else{const t=n.slice(a),r=t.slice(0,-1).map((e=>'"'+e.name.value+'"')).join(", ");e.reportError(new i.__(`Cannot spread fragment "${s}" within itself`+(""!==r?` via ${r}.`:"."),{nodes:t}))}n.pop()}r[a]=void 0}}}},4790:(e,t,n)=>{"use strict";n.d(t,{$:()=>r});var i=n(8087);function r(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const r=e.getRecursiveVariableUsages(n);for(const{node:o}of r){const r=o.name.value;!0!==t[r]&&e.reportError(new i.__(n.name?`Variable "$${r}" is not defined by operation "${n.name.value}".`:`Variable "$${r}" is not defined.`,{nodes:[o,n]}))}}},VariableDefinition(e){t[e.variable.name.value]=!0}}}},1294:(e,t,n)=>{"use strict";n.d(t,{J:()=>r});var i=n(8087);function r(e){const t=[],n=[];return{OperationDefinition:e=>(t.push(e),!1),FragmentDefinition:e=>(n.push(e),!1),Document:{leave(){const r=Object.create(null);for(const n of t)for(const t of e.getRecursivelyReferencedFragments(n))r[t.name.value]=!0;for(const t of n){const n=t.name.value;!0!==r[n]&&e.reportError(new i.__(`Fragment "${n}" is never used.`,{nodes:t}))}}}}}},2283:(e,t,n)=>{"use strict";n.d(t,{p:()=>r});var i=n(8087);function r(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(n){const r=Object.create(null),o=e.getRecursiveVariableUsages(n);for(const{node:e}of o)r[e.name.value]=!0;for(const o of t){const t=o.variable.name.value;!0!==r[t]&&e.reportError(new i.__(n.name?`Variable "$${t}" is never used in operation "${n.name.value}".`:`Variable "$${t}" is never used.`,{nodes:o}))}}},VariableDefinition(e){t.push(e)}}}},4203:(e,t,n)=>{"use strict";n.d(t,{y:()=>p});var i=n(5821),r=n(8087),o=n(7359),s=n(3486),a=n(398),c=n(8360),l=n(77);function u(e){return Array.isArray(e)?e.map((([e,t])=>`subfields "${e}" conflict because `+u(t))).join(" and "):e}function p(e){const t=new I,n=new Map;return{SelectionSet(i){const o=function(e,t,n,i,r){const o=[],[s,a]=E(e,t,i,r);if(function(e,t,n,i,r){for(const[o,s]of Object.entries(r))if(s.length>1)for(let r=0;r<s.length;r++)for(let a=r+1;a<s.length;a++){const c=m(e,n,i,!1,o,s[r],s[a]);c&&t.push(c)}}(e,o,t,n,s),0!==a.length)for(let i=0;i<a.length;i++){d(e,o,t,n,!1,s,a[i]);for(let r=i+1;r<a.length;r++)f(e,o,t,n,!1,a[i],a[r])}return o}(e,n,t,e.getParentType(),i);for(const[[t,n],i,s]of o){const o=u(n);e.reportError(new r.__(`Fields "${t}" conflict because ${o}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:i.concat(s)}))}}}}function d(e,t,n,i,r,o,s){const a=e.getFragment(s);if(!a)return;const[c,l]=T(e,n,a);if(o!==c){h(e,t,n,i,r,o,c);for(const a of l)i.has(a,s,r)||(i.add(a,s,r),d(e,t,n,i,r,o,a))}}function f(e,t,n,i,r,o,s){if(o===s)return;if(i.has(o,s,r))return;i.add(o,s,r);const a=e.getFragment(o),c=e.getFragment(s);if(!a||!c)return;const[l,u]=T(e,n,a),[p,d]=T(e,n,c);h(e,t,n,i,r,l,p);for(const s of d)f(e,t,n,i,r,o,s);for(const o of u)f(e,t,n,i,r,o,s)}function h(e,t,n,i,r,o,s){for(const[a,c]of Object.entries(o)){const o=s[a];if(o)for(const s of c)for(const c of o){const o=m(e,n,i,r,a,s,c);o&&t.push(o)}}}function m(e,t,n,r,o,s,c){const[l,u,p]=s,[m,T,g]=c,I=r||l!==m&&(0,a.lp)(l)&&(0,a.lp)(m);if(!I){const e=u.name.value,t=T.name.value;if(e!==t)return[[o,`"${e}" and "${t}" are different fields`],[u],[T]];if(y(u)!==y(T))return[[o,"they have differing arguments"],[u],[T]]}const N=null==p?void 0:p.type,b=null==g?void 0:g.type;if(N&&b&&v(N,b))return[[o,`they return conflicting types "${(0,i.X)(N)}" and "${(0,i.X)(b)}"`],[u],[T]];const _=u.selectionSet,S=T.selectionSet;if(_&&S){const i=function(e,t,n,i,r,o,s,a){const c=[],[l,u]=E(e,t,r,o),[p,m]=E(e,t,s,a);h(e,c,t,n,i,l,p);for(const r of m)d(e,c,t,n,i,l,r);for(const r of u)d(e,c,t,n,i,p,r);for(const r of u)for(const o of m)f(e,c,t,n,i,r,o);return c}(e,t,n,I,(0,a.xC)(N),_,(0,a.xC)(b),S);return function(e,t,n,i){if(e.length>0)return[[t,e.map((([e])=>e))],[n,...e.map((([,e])=>e)).flat()],[i,...e.map((([,,e])=>e)).flat()]]}(i,o,u,T)}}function y(e){var t;const n=null!==(t=e.arguments)&&void 0!==t?t:[],i={kind:o.h.OBJECT,fields:n.map((e=>({kind:o.h.OBJECT_FIELD,name:e.name,value:e.value})))};return(0,s.S)((0,c.n)(i))}function v(e,t){return(0,a.HG)(e)?!(0,a.HG)(t)||v(e.ofType,t.ofType):!!(0,a.HG)(t)||((0,a.zM)(e)?!(0,a.zM)(t)||v(e.ofType,t.ofType):!!(0,a.zM)(t)||!(!(0,a.UT)(e)&&!(0,a.UT)(t))&&e!==t)}function E(e,t,n,i){const r=t.get(i);if(r)return r;const o=Object.create(null),s=Object.create(null);g(e,n,i,o,s);const a=[o,Object.keys(s)];return t.set(i,a),a}function T(e,t,n){const i=t.get(n.selectionSet);if(i)return i;const r=(0,l._)(e.getSchema(),n.typeCondition);return E(e,t,r,n.selectionSet)}function g(e,t,n,i,r){for(const s of n.selections)switch(s.kind){case o.h.FIELD:{const e=s.name.value;let n;((0,a.lp)(t)||(0,a.oT)(t))&&(n=t.getFields()[e]);const r=s.alias?s.alias.value:e;i[r]||(i[r]=[]),i[r].push([t,s,n]);break}case o.h.FRAGMENT_SPREAD:r[s.name.value]=!0;break;case o.h.INLINE_FRAGMENT:{const n=s.typeCondition,o=n?(0,l._)(e.getSchema(),n):t;g(e,o,s.selectionSet,i,r);break}}}class I{constructor(){this._data=new Map}has(e,t,n){var i;const[r,o]=e<t?[e,t]:[t,e],s=null===(i=this._data.get(r))||void 0===i?void 0:i.get(o);return void 0!==s&&(!!n||n===s)}add(e,t,n){const[i,r]=e<t?[e,t]:[t,e],o=this._data.get(i);void 0===o?this._data.set(i,new Map([[r,n]])):o.set(r,n)}}},3259:(e,t,n)=>{"use strict";n.d(t,{a:()=>c});var i=n(5821),r=n(8087),o=n(398),s=n(316),a=n(77);function c(e){return{InlineFragment(t){const n=e.getType(),a=e.getParentType();if((0,o.Gv)(n)&&(0,o.Gv)(a)&&!(0,s.zR)(e.getSchema(),n,a)){const o=(0,i.X)(a),s=(0,i.X)(n);e.reportError(new r.__(`Fragment cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}},FragmentSpread(t){const n=t.name.value,c=function(e,t){const n=e.getFragment(t);if(n){const t=(0,a._)(e.getSchema(),n.typeCondition);if((0,o.Gv)(t))return t}}(e,n),l=e.getParentType();if(c&&l&&!(0,s.zR)(e.getSchema(),c,l)){const o=(0,i.X)(l),s=(0,i.X)(c);e.reportError(new r.__(`Fragment "${n}" cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}}}}},4800:(e,t,n)=>{"use strict";n.d(t,{g:()=>p});var i=n(3177),r=n(5821),o=n(9551),s=n(3294),a=n(8087),c=n(7359),l=n(5844),u=n(398);function p(e){const t=e.getSchema(),n=Object.create(null);for(const t of e.getDocument().definitions)(0,l.zT)(t)&&(n[t.name.value]=t);return{ScalarTypeExtension:p,ObjectTypeExtension:p,InterfaceTypeExtension:p,UnionTypeExtension:p,EnumTypeExtension:p,InputObjectTypeExtension:p};function p(l){const p=l.name.value,f=n[p],h=null==t?void 0:t.getType(p);let m;if(f?m=d[f.kind]:h&&(y=h,m=(0,u.KA)(y)?c.h.SCALAR_TYPE_EXTENSION:(0,u.lp)(y)?c.h.OBJECT_TYPE_EXTENSION:(0,u.oT)(y)?c.h.INTERFACE_TYPE_EXTENSION:(0,u.EN)(y)?c.h.UNION_TYPE_EXTENSION:(0,u.EM)(y)?c.h.ENUM_TYPE_EXTENSION:(0,u.hL)(y)?c.h.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.k)(!1,"Unexpected type: "+(0,r.X)(y))),m){if(m!==l.kind){const t=function(e){switch(e){case c.h.SCALAR_TYPE_EXTENSION:return"scalar";case c.h.OBJECT_TYPE_EXTENSION:return"object";case c.h.INTERFACE_TYPE_EXTENSION:return"interface";case c.h.UNION_TYPE_EXTENSION:return"union";case c.h.ENUM_TYPE_EXTENSION:return"enum";case c.h.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:(0,o.k)(!1,"Unexpected kind: "+(0,r.X)(e))}}(l.kind);e.reportError(new a.__(`Cannot extend non-${t} type "${p}".`,{nodes:f?[f,l]:l}))}}else{const r=Object.keys({...n,...null==t?void 0:t.getTypeMap()}),o=(0,s.D)(p,r);e.reportError(new a.__(`Cannot extend type "${p}" because it is not defined.`+(0,i.l)(o),{nodes:l.name}))}var y}}const d={[c.h.SCALAR_TYPE_DEFINITION]:c.h.SCALAR_TYPE_EXTENSION,[c.h.OBJECT_TYPE_DEFINITION]:c.h.OBJECT_TYPE_EXTENSION,[c.h.INTERFACE_TYPE_DEFINITION]:c.h.INTERFACE_TYPE_EXTENSION,[c.h.UNION_TYPE_DEFINITION]:c.h.UNION_TYPE_EXTENSION,[c.h.ENUM_TYPE_DEFINITION]:c.h.ENUM_TYPE_EXTENSION,[c.h.INPUT_OBJECT_TYPE_DEFINITION]:c.h.INPUT_OBJECT_TYPE_EXTENSION}},1967:(e,t,n)=>{"use strict";n.d(t,{c:()=>p,s:()=>u});var i=n(5821),r=n(3498),o=n(8087),s=n(7359),a=n(3486),c=n(398),l=n(8238);function u(e){return{...p(e),Field:{leave(t){var n;const r=e.getFieldDef();if(!r)return!1;const s=new Set(null===(n=t.arguments)||void 0===n?void 0:n.map((e=>e.name.value)));for(const n of r.args)if(!s.has(n.name)&&(0,c.dK)(n)){const s=(0,i.X)(n.type);e.reportError(new o.__(`Field "${r.name}" argument "${n.name}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}function p(e){var t;const n=Object.create(null),u=e.getSchema(),p=null!==(t=null==u?void 0:u.getDirectives())&&void 0!==t?t:l.V4;for(const e of p)n[e.name]=(0,r.P)(e.args.filter(c.dK),(e=>e.name));const f=e.getDocument().definitions;for(const e of f)if(e.kind===s.h.DIRECTIVE_DEFINITION){var h;const t=null!==(h=e.arguments)&&void 0!==h?h:[];n[e.name.value]=(0,r.P)(t.filter(d),(e=>e.name.value))}return{Directive:{leave(t){const r=t.name.value,s=n[r];if(s){var l;const n=null!==(l=t.arguments)&&void 0!==l?l:[],u=new Set(n.map((e=>e.name.value)));for(const[n,l]of Object.entries(s))if(!u.has(n)){const s=(0,c.P9)(l.type)?(0,i.X)(l.type):(0,a.S)(l.type);e.reportError(new o.__(`Directive "@${r}" argument "${n}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}}function d(e){return e.type.kind===s.h.NON_NULL_TYPE&&null==e.defaultValue}},1954:(e,t,n)=>{"use strict";n.d(t,{O:()=>s});var i=n(5821),r=n(8087),o=n(398);function s(e){return{Field(t){const n=e.getType(),s=t.selectionSet;if(n)if((0,o.UT)((0,o.xC)(n))){if(s){const o=t.name.value,a=(0,i.X)(n);e.reportError(new r.__(`Field "${o}" must not have a selection since type "${a}" has no subfields.`,{nodes:s}))}}else if(!s){const o=t.name.value,s=(0,i.X)(n);e.reportError(new r.__(`Field "${o}" of type "${s}" must have a selection of subfields. Did you mean "${o} { ... }"?`,{nodes:t}))}}}}},423:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8087),r=n(7359),o=n(7677);function s(e){return{OperationDefinition(t){if("subscription"===t.operation){const n=e.getSchema(),s=n.getSubscriptionType();if(s){const a=t.name?t.name.value:null,c=Object.create(null),l=e.getDocument(),u=Object.create(null);for(const e of l.definitions)e.kind===r.h.FRAGMENT_DEFINITION&&(u[e.name.value]=e);const p=(0,o.g)(n,u,c,s,t.selectionSet);if(p.size>1){const t=[...p.values()].slice(1).flat();e.reportError(new i.__(null!=a?`Subscription "${a}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:t}))}for(const t of p.values())t[0].name.value.startsWith("__")&&e.reportError(new i.__(null!=a?`Subscription "${a}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:t}))}}}}}},2337:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(3231),r=n(8087);function o(e){return{DirectiveDefinition(e){var t;const i=null!==(t=e.arguments)&&void 0!==t?t:[];return n(`@${e.name.value}`,i)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(e){var t;const i=e.name.value,r=null!==(t=e.fields)&&void 0!==t?t:[];for(const e of r){var o;n(`${i}.${e.name.value}`,null!==(o=e.arguments)&&void 0!==o?o:[])}return!1}function n(t,n){const o=(0,i.v)(n,(e=>e.name.value));for(const[n,i]of o)i.length>1&&e.reportError(new r.__(`Argument "${t}(${n}:)" can only be defined once.`,{nodes:i.map((e=>e.name))}));return!1}}},2266:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(3231),r=n(8087);function o(e){return{Field:t,Directive:t};function t(t){var n;const o=null!==(n=t.arguments)&&void 0!==n?n:[],s=(0,i.v)(o,(e=>e.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.__(`There can be only one argument named "${t}".`,{nodes:n.map((e=>e.name))}))}}},3274:(e,t,n)=>{"use strict";n.d(t,{o:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=e.getSchema();return{DirectiveDefinition(r){const o=r.name.value;if(null==n||!n.getDirective(o))return t[o]?e.reportError(new i.__(`There can be only one directive named "@${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.__(`Directive "@${o}" already exists in the schema. It cannot be redefined.`,{nodes:r.name}))}}}},6300:(e,t,n)=>{"use strict";n.d(t,{k:()=>a});var i=n(8087),r=n(7359),o=n(5844),s=n(8238);function a(e){const t=Object.create(null),n=e.getSchema(),a=n?n.getDirectives():s.V4;for(const e of a)t[e.name]=!e.isRepeatable;const c=e.getDocument().definitions;for(const e of c)e.kind===r.h.DIRECTIVE_DEFINITION&&(t[e.name.value]=!e.repeatable);const l=Object.create(null),u=Object.create(null);return{enter(n){if(!("directives"in n)||!n.directives)return;let s;if(n.kind===r.h.SCHEMA_DEFINITION||n.kind===r.h.SCHEMA_EXTENSION)s=l;else if((0,o.zT)(n)||(0,o.D$)(n)){const e=n.name.value;s=u[e],void 0===s&&(u[e]=s=Object.create(null))}else s=Object.create(null);for(const r of n.directives){const n=r.name.value;t[n]&&(s[n]?e.reportError(new i.__(`The directive "@${n}" can only be used once at this location.`,{nodes:[s[n],r]})):s[n]=r)}}}}},3201:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(8087),r=n(398);function o(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:s,EnumTypeExtension:s};function s(t){var s;const a=t.name.value;o[a]||(o[a]=Object.create(null));const c=null!==(s=t.values)&&void 0!==s?s:[],l=o[a];for(const t of c){const o=t.name.value,s=n[a];(0,r.EM)(s)&&s.getValue(o)?e.reportError(new i.__(`Enum value "${a}.${o}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[o]?e.reportError(new i.__(`Enum value "${a}.${o}" can only be defined once.`,{nodes:[l[o],t.name]})):l[o]=t.name}return!1}}},2618:(e,t,n)=>{"use strict";n.d(t,{y:()=>o});var i=n(8087),r=n(398);function o(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),r=Object.create(null);return{InputObjectTypeDefinition:o,InputObjectTypeExtension:o,InterfaceTypeDefinition:o,InterfaceTypeExtension:o,ObjectTypeDefinition:o,ObjectTypeExtension:o};function o(t){var o;const a=t.name.value;r[a]||(r[a]=Object.create(null));const c=null!==(o=t.fields)&&void 0!==o?o:[],l=r[a];for(const t of c){const r=t.name.value;s(n[a],r)?e.reportError(new i.__(`Field "${a}.${r}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[r]?e.reportError(new i.__(`Field "${a}.${r}" can only be defined once.`,{nodes:[l[r],t.name]})):l[r]=t.name}return!1}}function s(e,t){return!!((0,r.lp)(e)||(0,r.oT)(e)||(0,r.hL)(e))&&null!=e.getFields()[t]}},5591:(e,t,n)=>{"use strict";n.d(t,{N:()=>r});var i=n(8087);function r(e){const t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(n){const r=n.name.value;return t[r]?e.reportError(new i.__(`There can be only one fragment named "${r}".`,{nodes:[t[r],n.name]})):t[r]=n.name,!1}}}},2767:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var i=n(9551),r=n(8087);function o(e){const t=[];let n=Object.create(null);return{ObjectValue:{enter(){t.push(n),n=Object.create(null)},leave(){const e=t.pop();e||(0,i.k)(!1),n=e}},ObjectField(t){const i=t.name.value;n[i]?e.reportError(new r.__(`There can be only one input field named "${i}".`,{nodes:[n[i],t.name]})):n[i]=t.name}}}},2621:(e,t,n)=>{"use strict";n.d(t,{H:()=>r});var i=n(8087);function r(e){const t=Object.create(null);return{OperationDefinition(n){const r=n.name;return r&&(t[r.value]?e.reportError(new i.__(`There can be only one operation named "${r.value}".`,{nodes:[t[r.value],r]})):t[r.value]=r),!1},FragmentDefinition:()=>!1}}},7990:(e,t,n)=>{"use strict";n.d(t,{q:()=>r});var i=n(8087);function r(e){const t=e.getSchema(),n=Object.create(null),r=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(t){var o;const s=null!==(o=t.operationTypes)&&void 0!==o?o:[];for(const t of s){const o=t.operation,s=n[o];r[o]?e.reportError(new i.__(`Type for ${o} already defined in the schema. It cannot be redefined.`,{nodes:t})):s?e.reportError(new i.__(`There can be only one ${o} type in schema.`,{nodes:[s,t]})):n[o]=t}return!1}}},9538:(e,t,n)=>{"use strict";n.d(t,{P:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=e.getSchema();return{ScalarTypeDefinition:r,ObjectTypeDefinition:r,InterfaceTypeDefinition:r,UnionTypeDefinition:r,EnumTypeDefinition:r,InputObjectTypeDefinition:r};function r(r){const o=r.name.value;if(null==n||!n.getType(o))return t[o]?e.reportError(new i.__(`There can be only one type named "${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.__(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:r.name}))}}},1564:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var i=n(3231),r=n(8087);function o(e){return{OperationDefinition(t){var n;const o=null!==(n=t.variableDefinitions)&&void 0!==n?n:[],s=(0,i.v)(o,(e=>e.variable.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.__(`There can be only one variable named "$${t}".`,{nodes:n.map((e=>e.variable.name))}))}}}},9831:(e,t,n)=>{"use strict";n.d(t,{j:()=>u});var i=n(3177),r=n(5821),o=n(3498),s=n(3294),a=n(8087),c=n(3486),l=n(398);function u(e){return{ListValue(t){const n=(0,l.tf)(e.getParentInputType());if(!(0,l.HG)(n))return p(e,t),!1},ObjectValue(t){const n=(0,l.xC)(e.getInputType());if(!(0,l.hL)(n))return p(e,t),!1;const i=(0,o.P)(t.fields,(e=>e.name.value));for(const o of Object.values(n.getFields()))if(!i[o.name]&&(0,l.Wd)(o)){const i=(0,r.X)(o.type);e.reportError(new a.__(`Field "${n.name}.${o.name}" of required type "${i}" was not provided.`,{nodes:t}))}},ObjectField(t){const n=(0,l.xC)(e.getParentInputType());if(!e.getInputType()&&(0,l.hL)(n)){const r=(0,s.D)(t.name.value,Object.keys(n.getFields()));e.reportError(new a.__(`Field "${t.name.value}" is not defined by type "${n.name}".`+(0,i.l)(r),{nodes:t}))}},NullValue(t){const n=e.getInputType();(0,l.zM)(n)&&e.reportError(new a.__(`Expected value of type "${(0,r.X)(n)}", found ${(0,c.S)(t)}.`,{nodes:t}))},EnumValue:t=>p(e,t),IntValue:t=>p(e,t),FloatValue:t=>p(e,t),StringValue:t=>p(e,t),BooleanValue:t=>p(e,t)}}function p(e,t){const n=e.getInputType();if(!n)return;const i=(0,l.xC)(n);if((0,l.UT)(i))try{if(void 0===i.parseLiteral(t,void 0)){const i=(0,r.X)(n);e.reportError(new a.__(`Expected value of type "${i}", found ${(0,c.S)(t)}.`,{nodes:t}))}}catch(i){const o=(0,r.X)(n);i instanceof a.__?e.reportError(i):e.reportError(new a.__(`Expected value of type "${o}", found ${(0,c.S)(t)}; `+i.message,{nodes:t,originalError:i}))}else{const i=(0,r.X)(n);e.reportError(new a.__(`Expected value of type "${i}", found ${(0,c.S)(t)}.`,{nodes:t}))}}},5972:(e,t,n)=>{"use strict";n.d(t,{I:()=>a});var i=n(8087),r=n(3486),o=n(398),s=n(77);function a(e){return{VariableDefinition(t){const n=(0,s._)(e.getSchema(),t.type);if(void 0!==n&&!(0,o.j$)(n)){const n=t.variable.name.value,o=(0,r.S)(t.type);e.reportError(new i.__(`Variable "$${n}" cannot be non-input type "${o}".`,{nodes:t.type}))}}}}},9701:(e,t,n)=>{"use strict";n.d(t,{w:()=>l});var i=n(5821),r=n(8087),o=n(7359),s=n(398),a=n(316),c=n(77);function l(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const o=e.getRecursiveVariableUsages(n);for(const{node:n,type:s,defaultValue:a}of o){const o=n.name.value,l=t[o];if(l&&s){const t=e.getSchema(),p=(0,c._)(t,l.type);if(p&&!u(t,p,l.defaultValue,s,a)){const t=(0,i.X)(p),a=(0,i.X)(s);e.reportError(new r.__(`Variable "$${o}" of type "${t}" used in position expecting type "${a}".`,{nodes:[l,n]}))}}}}},VariableDefinition(e){t[e.variable.name.value]=e}}}function u(e,t,n,i,r){if((0,s.zM)(i)&&!(0,s.zM)(t)){const s=void 0!==r;if((null==n||n.kind===o.h.NULL)&&!s)return!1;const c=i.ofType;return(0,a.uJ)(e,t,c)}return(0,a.uJ)(e,t,i)}},4196:(e,t,n)=>{"use strict";n.d(t,{M:()=>M,i:()=>j});var i=n(8081),r=n(8741),o=n(7143),s=n(7815),a=n(4873),c=n(5311),l=n(5580),u=n(7898),p=n(2877),d=n(1422),f=n(4790),h=n(1294),m=n(2283),y=n(4203),v=n(3259),E=n(4800),T=n(1967),g=n(1954),I=n(423),N=n(2337),b=n(2266),_=n(3274),S=n(6300),O=n(3201),D=n(2618),A=n(5591),R=n(2767),w=n(2621),L=n(7990),F=n(9538),x=n(1564),k=n(9831),$=n(5972),C=n(9701);const j=Object.freeze([i.i,w.H,u.F,I.Z,l.I,o.T,$.I,g.O,r.A,A.N,c.a,h.J,v.a,d.H,x.H,f.$,m.p,a.J,S.k,s.e,b.L,k.j,T.s,C.w,y.y,R.P]),M=Object.freeze([p.t,L.q,F.P,O.L,D.y,N.L,_.o,l.I,a.J,S.k,E.g,s.o,b.L,R.P,T.c])},6584:(e,t,n)=>{"use strict";n.d(t,{ED:()=>f,Gu:()=>u,zo:()=>d});var i=n(7826),r=n(8087),o=n(7304),s=n(9655),a=n(2676),c=n(4196),l=n(2734);function u(e,t,n=c.i,u,p=new a.a(e)){var d;const f=null!==(d=null==u?void 0:u.maxErrors)&&void 0!==d?d:100;t||(0,i.a)(!1,"Must provide document."),(0,s.J)(e);const h=Object.freeze({}),m=[],y=new l._t(e,t,p,(e=>{if(m.length>=f)throw m.push(new r.__("Too many validation errors, error limit reached. Validation aborted.")),h;m.push(e)})),v=(0,o.j1)(n.map((e=>e(y))));try{(0,o.Vn)(t,(0,a.y)(p,v))}catch(e){if(e!==h)throw e}return m}function p(e,t,n=c.M){const i=[],r=new l.yv(e,t,(e=>{i.push(e)})),s=n.map((e=>e(r)));return(0,o.Vn)(e,(0,o.j1)(s)),i}function d(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))}function f(e,t){const n=p(e,t);if(0!==n.length)throw new Error(n.map((e=>e.message)).join("\n\n"))}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var i={};(()=>{"use strict";n.r(i),n.d(i,{API:()=>j,main:()=>M});class e extends Error{constructor(e,t){super(`[${e}] ${t}`),this.status=e,this.baseMessage=t}}var t=n(398);function r(e){return void 0!==e&&e.length>0}const o=/\${([^}]+)}|(\\\$)/g;class s{constructor(e){this.str=e}toString(){return this.str}}class a extends s{constructor(e){super(e)}expand(e,t){return this.str}}class c extends s{constructor(e){super(e)}expand(t,n){return this.str.replace(o,((i,r,o)=>{if(o)return"$";if(r.startsWith("context.user.name"))return t?t.name??"":"";if(!r.startsWith("args."))throw new e(503,"Bad config: Invalid channel/role pattern '${"+r+"} in 'allow'");{let t=r.slice(5),i=n?n[t]:void 0;switch(typeof i){case"undefined":throw new e(503,"Bad config: Unknown arg in channel/role pattern '${"+r+"} in 'allow'");case"string":return i;case"number":return String(i);default:throw new e(400,"Value of arg '"+t+"' must be a string or number")}}}))}toString(){return"Pattern<"+this.str+">"}}function l(e){return r(e)?e.map((e=>function(e){return e.match(o)?new c(e):new a(e)}(e))):void 0}function u(e,t,n,i){return r(t)&&e.some((e=>t.includes(e.expand(n,i))))}class p{constructor(e){this.name=e}fail(){throw new e(403,`Access forbidden to function '${this.name}'`)}}class d extends p{authorize(e,t){e.isAdmin||this.fail()}}class f extends p{authorize(e){}}class h extends p{constructor(e,t){super(e),this.users=l(t.users),this.roles=l(t.roles),this.channels=l(t.channels)}authorize(t,n){if(console.assert(void 0!==t.defaultCollection),!(t.isAdmin||this.users&&function(e,t,n,i){return e.some((e=>t==e.expand(n,i)))}(this.users,t.name,t,n)||this.roles&&u(this.roles,t.roles,t,n)||this.channels&&u(this.channels,t.channels,t,n)))throw new e(403,`Access forbidden to function '${this.name}' ... user = ${t.name} ... user.channels=${t.channels} ... this.users=${this.users} ... this.channels=${this.channels}`)}}function m(e,t,n){return t?t.users||t.roles||t.channels?t.users&&t.users.includes("*")||t.roles&&t.roles.includes("*")||t.channels&&t.channels.includes("*")?new f(e):new h(e,t):new d(e):n?new f(e):new d(e)}function y(t){if(!t.code.match(/^\s*\(*SELECT\b/i))throw new e(500,"only SELECT queries are allowed");return t.code}function v(e,t,n){throw e instanceof Error?(e.message=`${e.message} (thrown by ${t} ${n})`,e):Error(`${e} (thrown by ${t} ${n})`)}function E(t,n,i){let o=m(t,n.allow,!1),s=function(t,n){if(r(n)){let i=new Set;for(let e of n)i.add(e);let r=i.size;if(r!=n.length)throw new e(500,`Function/resolver ${t} has duplicate arg names`);return o=>{if(!o)throw new e(400,`Function "${t}" called without arguments, but requires ${n}`);for(let i of n)if(void 0===o[i])throw new e(400,`Missing argument "${i}" in call to ${t}`);let s=Object.getOwnPropertyNames(o);if(s.length!=r)for(let n of s)if(!i.has(n))throw new e(400,`Undeclared argument "${n}" passed to ${t}`)}}return n=>{if(n){let i=Object.getOwnPropertyNames(n);if(i.length>0)throw new e(400,`Undeclared arguments '${i.join("', '")}' passed to ${t}`)}}}(t,n.args);switch(n.type){case"query":let r=y(n);return function(e,n){return s(n),o.authorize(e.user,n),console.debug(`QUERY ${t}`),n&&(n={args:n}),i.query(e,t,r,n)};case"javascript":let a=n.mutating??!1,c=N(0,n,2);return function(e,n){console.debug(`FUNC ${t}`),s(n),o.authorize(e.user,n),a||R(e);try{return c(e,n)}catch(e){v(e,"function",t)}finally{a||w(e)}};default:throw new e(500,"unknown or missing 'type'")}}function T(n,i,r,o,s){let a=`${i}.${r}`,c="Mutation"==i,l=m(a,o.allow,!0);if(o.args)throw new e(500,"should not have an 'args' declaration");switch(o.type){case"query":let i=y(o),r=n.type;t.zM(r)&&(r=r.ofType);let u=t.HG(r),p=t.KA(r);n.resolve=function(t,r,o,c){l.authorize(o.user,r);try{let c=s.query(o,a,i,{args:r,parent:t});if(u)return c;if(0==c.length)return null;{let t=c[0];if(p){let i=Object.getOwnPropertyNames(t);if(1==i.length)return t[i[0]];throw new e(500,`resolver returns scalar type ${n.type}, but its N1QL query returns ${i.length} columns, not 1`)}return t}}catch(e){v(e,"resolver",a)}};break;case"javascript":let d=N(0,o,4);n.resolve=function(e,t,n,i){console.debug(`RESOLVE ${a}`),l.authorize(n.user,t),c||R(n);try{return d(e,t,n,function(e){return Object.defineProperty(e,"selectedFieldNames",{get:function(){let e=[];if(this.fieldNodes.length>0){let t=this.fieldNodes[0].selectionSet;if(t)for(let n of t.selections)"Field"==n.kind&&"Name"==n.name.kind&&e.push(n.name.value)}return e}}),e}(i))}catch(e){v(e,"resolver",a)}finally{c||w(n)}};break;default:throw new e(500,"unknown or missing 'type'")}}function g(t,n,i){if("javascript"!=n.type)throw new e(500,"type-name resolvers must be implemented in JavaScript");if(void 0!==n.allow)throw new e(500,"type-name resolver must not have an 'allow' config");let r=N(0,n,4);return(e,t,n)=>r(t,e,n)}function I(t,n,i){if("javascript"!=n.type)throw new e(500,"entity reference resolvers must be implemented in JavaScript");if(void 0!==n.allow)throw new e(500,"entity reference resolver must not have an 'allow' config");let r=N(0,n,3);return function(e,t,n){return r(t,e,n)}}function N(t,n,i){let r;try{r=Function(`"use strict"; return (${n.code})`)()}catch(t){throw new e(500,`failed to compile: ${t}`)}if("function"!=typeof r)throw new e(500,"code does not compile to a JS function");if(r.length<2||r.length>i)throw new e(500,`should have 2-${i} JavaScript arguments`);return r}var b=n(4275),_=n(6535),S=n(2244),O=n(4903);class D{constructor(e){this.upstream=e,this.functions={};let t=new x(this,null,!0);this.superUserContext=new A(t,t,!0),t.context=this.superUserContext}configure(e,t){let n=new k;if(console.log("Initializing GraphQL/functions..."),e){let t=0,i=e.max_code_size;for(let r of Object.getOwnPropertyNames(e.definitions)){let o=e.definitions[r];void 0!==i&&o.code.length>i?n.complain(`function ${r}: code is too large (> ${i} bytes)`):n.try(`function ${r}: `,(()=>{this.functions[r]=E(r,o,this),++t}))}void 0!==e.max_function_count&&t>e.max_function_count&&n.complain(`too many functions (> ${e.max_function_count})`)}return t&&(t.schema?void 0!==t.max_schema_size&&t.schema.length>t.max_schema_size?n.complain(`GraphQL schema too large (> ${t.max_schema_size} bytes)`):(n.try("GraphQL schema: ",(()=>{if(t.subgraph){let e=b.Qc('\n    extend schema @link(\n        url: "https://specs.apollo.dev/federation/v2.0",\n        import: ["@extends", "@external", "@inaccessible", "@key", "@override", "@provides",\n                 "@requires", "@shareable", "@tag"]\n    )\n\n\n'+t.schema),i=this.createApolloResolverMap(t,n);this.schema=(0,O.en)({typeDefs:e,resolvers:i})}else this.schema=_.I(t.schema)})),this.schema&&this.configureResolvers(t,n)):n.complain("GraphQL schema is missing")),n.errors.length>0?(console.error(`Found ${n.errors.length} error[s] in configuration!`),n.errors):null}configureResolvers(e,n){let i=e.max_resolver_count??1e9;if(e.resolvers)for(let i of Object.getOwnPropertyNames(e.resolvers)){let o=e.resolvers[i],s=this.schema.getType(i);if(s)if(s instanceof t.h6){let t=s.getFields();for(let s of Object.getOwnPropertyNames(o)){let a=o[s];if(r(i,s,a)){if(e.subgraph&&"__resolveReference"==s)continue;let r=t[s];r?n.try(`GraphQL resolver ${i}.${s}: `,(()=>{T(r,i,s,a,this)})):n.complain(`GraphQL resolver ${i}.${s}: no such field in the schema`)}}}else if(s instanceof t.oW||s instanceof t.Gp){let e=s;for(let t of Object.getOwnPropertyNames(o)){let s=o[t];r(i,t,s)&&("__typename"==t?n.try(`GraphQL resolver ${i}.${t}: `,(()=>{e.resolveType=g(0,s)})):n.complain(`GraphQL resolver ${i}.${t}: abstract types may only have a '__typename' resolver`))}}else n.complain(`GraphQL type ${i}: not an object or interface, so cannot have resolvers`);else n.complain(`GraphQL resolver type '${i}': no such type in the schema`)}function r(t,r,o){if(0==--i)return n.complain(`too many GraphQL resolvers (> ${e.max_resolver_count})`),!1;let s=e.max_code_size;return!(void 0!==s&&o.code.length>s&&(n.complain(`GraphQL resolver ${t}.${r}: code is too large (> ${s} bytes)`),1))}}createApolloResolverMap(e,t){let n={};for(let[t,i]of Object.entries(e.resolvers)){let e=i.__resolveReference;if(e){let i=I(0,e);n[t]={__resolveReference:i}}}return n}makeContext(e,t){let n=new x(this,e),i=new A(n,this.superUserContext.user,t);return n.context=i,i}getFunction(t){let n=this.functions[t];if(!n)throw new e(404,`No such function ${t}`);return n}callFunction(e,t,n){return this.getFunction(t)(e,n)}query(e,t,n,i){return this.upstream.query(t,n,i,e.user)}graphql(t,n,i,r){if(console.debug(`GRAPHQL ${n}`),!this.schema)throw new e(404,"No GraphQL schema");return S.B({contextValue:t,schema:this.schema,source:n,variableValues:i,operationName:r})}get(e,t){return this.upstream.get(e,t)}save(e,t,n){return this.upstream.save(e,t,n)}delete(e,t,n){return this.upstream.delete(e,t,n)}}class A{constructor(e,t,n){this.user=e,this.admin=t,this.readOnlyLevel=0,n||this.readOnlyLevel++}checkUser(e){return this.user.isAdmin||$(e,this.user.name)}requireUser(t){if(!this.checkUser(t))throw new e(403,"Permission denied (user)")}checkAdmin(){return this.user.isAdmin}requireAdmin(){if(!this.checkAdmin())throw new e(403,"Permission denied (admin only)")}checkRole(e){if(this.user.isAdmin)return!0;for(let t of this.user.roles)if($(e,t))return!0;return!1}requireRole(t){if(!this.checkRole(t))throw new e(403,"Permission denied (role)")}checkAccess(e){if(this.user.isAdmin)return!0;for(let t of this.user.channels)if($(e,t))return!0;return!1}requireAccess(t){if(!this.checkAccess(t))throw new e(403,"Permission denied (channel)")}checkAllowed(e){return this.user.isAdmin||void 0!==e&&(void 0!==e.users&&e.users.includes(this.user.name)||void 0!==e.roles&&this.checkRole(e.roles)||void 0!==e.channels&&this.checkAccess(e.channels))}requireAllowed(t){if(!this.checkAllowed(t))throw new e(403,"Permission denied")}checkMutating(){return 0==this.readOnlyLevel}requireMutating(){if(!this.checkMutating())throw new e(403,"Permission denied (mutating)")}}function R(e){e.user.isSuperUser||e.readOnlyLevel++}function w(e){e.user.isSuperUser||e.readOnlyLevel--}class L{constructor(e,t,n){this.db=e,this.user=n}get(e){return this.db.get(e,this.user)}save(t,n){if(!this.user.canMutate)throw new e(403,"save() is not allowed in a read-only context");return this.db.save(t,n,this.user)}delete(t){if(!this.user.canMutate)throw new e(403,"delete() is not allowed in a read-only context");if("string"==typeof t)return this.db.delete(t,void 0,this.user);{let e=t._id;if(!e)throw"delete() called with doc object that has no '_id' property";return this.db.delete(e,t._rev,this.user)}}}let F=1;class x{constructor(e,t,n=!1){this.db=e,this.isSuperUser=n,t&&([this.name,this.roles,this.channels]=t,n=!1),this.defaultCollection=new L(e,"_default",this)}get isAdmin(){return void 0===this.name}get canMutate(){return this.isSuperUser||this.context.checkMutating()}function(t,n){let i=this.db.getFunction(t);if(++F>20){let n=`User function recursion too deep (calling function("${t}")`;throw console.error(n),new e(508,n)}try{return i(this.context,n)}finally{--F}}async graphql(t,n){if(++F>20){let t="User function recursion too deep (calling graphql())";throw console.error(t),new e(508,t)}try{let e=await this.db.graphql(this.context,t,n);if(e.errors){let t=e.errors[0];if(t.originalError)throw t.originalError;throw Error(t.message)}return void 0===e.data?null:e.data}finally{--F}}toJSON(e){return this.isAdmin?{}:{name:this.name,roles:this.roles,channels:this.channels}}}class k{constructor(){this.errors=[]}complain(e){console.error(e),this.errors.push(e)}try(e,t){try{t()}catch(t){t instanceof Error?e+=t.message:e+=String(t),this.complain(e)}}}function $(e,t){return"string"==typeof e?e==t:e.includes(t)}class C{constructor(e){this.native=e}query(e,t,n,i){let r=this.native.query(e,t,this.stringify(n),i.isAdmin);return JSON.parse(r)}get(e,t){let n=this.native.get(e,t.isAdmin);return null===n?n:this.parseDoc(n)}save(e,t,n){return this.native.save(JSON.stringify(e),t,n.isAdmin)}delete(e,t,n){return this.native.delete(e,t,n.isAdmin)}stringify(e){return e?JSON.stringify(e):void 0}parseDoc(e){let t=JSON.parse(e);if("object"!=typeof t)throw Error("NativeAPI returned JSON that's not an Object");return t}}class j{constructor(e,t){console.debug=(...e)=>t.log(4,...e),console.log=(...e)=>t.log(3,...e),console.warn=(...e)=>t.log(2,...e),console.error=(...e)=>t.log(1,...e);let n=JSON.parse(e),[i,r]=function(e,t,n){let i;i=new D(n);let r=i.configure(e,t);return r&&(i=null),[i,r]}(n.functions,n.graphql,new C(t));null!==i&&(this.db=i),this.errors=r}callFunction(e,t,n,i,r,o){let s=t?JSON.parse(t):void 0,a=this.makeContext(n,i,r,o),c=this.db.callFunction(a,e,s);return c instanceof Promise?c.then((e=>JSON.stringify(e))):JSON.stringify(c)}graphql(e,t,n,i,r,o,s){""===t&&(t=void 0);let a=n?JSON.parse(n):void 0,c=this.makeContext(i,r,o,s);return this.db.graphql(c,e,a,t).then((e=>JSON.stringify(e)))}makeContext(e,t,n,i){var r=null;return void 0!==e&&(r=[e,t?.split(",")??[],n?.split(",")??[]]),this.db.makeContext(r,i)}}function M(e,t){return new j(e,t)}})(),SG_Engine=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,