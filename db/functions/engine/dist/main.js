/*! For license information please see main.js.LICENSE.txt */
var SG_Engine;(()=>{var e={9825:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cacheControlFromInfo=t.maybeCacheControlFromInfo=void 0,t.maybeCacheControlFromInfo=function(e){var t,n;return(null===(n=null===(t=e.cacheControl)||void 0===t?void 0:t.cacheHint)||void 0===n?void 0:n.restrict)?e.cacheControl:null},t.cacheControlFromInfo=function(e){var t,n;if(!("cacheControl"in e))throw new Error("The `info` argument does not appear to have a cacheControl field. Check that you are using Apollo Server 3 or newer and that you aren't using ApolloServerPluginCacheControlDisabled.");if(!(null===(n=null===(t=e.cacheControl)||void 0===t?void 0:t.cacheHint)||void 0===n?void 0:n.restrict))throw new Error("The `info` argument has a cacheControl field but it does not appear to be from ApolloServer 3 or newer. Check that you are using Apollo Server 3 or newer and that you aren't using ApolloServerPluginCacheControlDisabled.");return e.cacheControl}},7964:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.builtTypeReference=t.buildSchemaFromAST=t.buildSchema=void 0;const i=n(8929),r=n(3421),o=n(4177),s=n(8116);function a(e){return e?(0,r.valueFromASTUntyped)(e):void 0}function c(e,t){var n;const r=[],a=new o.Schema(null==t?void 0:t.blueprint),{directiveDefinitions:c,typeDefinitions:u,typeExtensions:d,schemaDefinitions:f,schemaExtensions:y}=function(e,t,n){const i=[],r=[],a=[],c=[],u=[];for(const p of e.definitions)switch(p.kind){case"OperationDefinition":case"FragmentDefinition":n.push(s.ERRORS.INVALID_GRAPHQL.err("Invalid executable definition found while building schema",{nodes:p}));continue;case"SchemaDefinition":c.push(p),t.schemaDefinition.preserveEmptyDefinition=!0;break;case"SchemaExtension":u.push(p);break;case"ScalarTypeDefinition":case"ObjectTypeDefinition":case"InterfaceTypeDefinition":case"UnionTypeDefinition":case"EnumTypeDefinition":case"InputObjectTypeDefinition":r.push(p);let e=t.type(p.name.value);if(!e||e.isBuiltIn)e=t.addType((0,o.newNamedType)(l(p.kind),p.name.value));else if(e.preserveEmptyDefinition)throw s.ERRORS.INVALID_GRAPHQL.err(`There can be only one type named "${p.name.value}"`);e.preserveEmptyDefinition=!0;break;case"ScalarTypeExtension":case"ObjectTypeExtension":case"InterfaceTypeExtension":case"UnionTypeExtension":case"EnumTypeExtension":case"InputObjectTypeExtension":a.push(p);const d=t.type(p.name.value);if(d){if(d.isBuiltIn)throw s.ERRORS.INVALID_GRAPHQL.err(`Cannot extend built-in type "${p.name.value}"`)}else t.addType((0,o.newNamedType)(l(p.kind),p.name.value));break;case"DirectiveDefinition":i.push(p),t.addDirectiveDefinition(p.name.value)}return{directiveDefinitions:i,typeDefinitions:r,typeExtensions:a,schemaDefinitions:c,schemaExtensions:u}}(e,a,r);for(const e of u)e.kind===i.Kind.ENUM_TYPE_DEFINITION&&m(e,a.type(e.name.value));for(const e of d)if(e.kind===i.Kind.ENUM_TYPE_EXTENSION){const t=a.type(e.name.value).newExtension();t.sourceAST=e,m(e,a.type(e.name.value),t)}for(const e of c)N(e,a.directive(e.name.value),r);for(const e of f)p(e,a.schemaDefinition,r);for(const e of y)p(e,a.schemaDefinition,r,a.schemaDefinition.newExtension());r.push(...a.blueprint.onDirectiveDefinitionAndSchemaParsed(a));for(const e of c)b(e,a.directive(e.name.value),r);for(const e of u)h(e,a.type(e.name.value),a.blueprint,r);for(const e of d){const t=a.type(e.name.value),n=t.newExtension();n.sourceAST=e,h(e,t,a.blueprint,r,n)}if(r.length>0)throw(0,o.ErrGraphQLValidationFailed)(r);return(null===(n=null==t?void 0:t.validate)||void 0===n||n)&&a.validate(),a}function l(e){const t=e.endsWith("Definition")?"Definition":"Extension";return e.slice(0,e.length-t.length)}function u(e,t,n){try{e()}catch(e){const i=(0,s.errorCauses)(e);if(!i)throw e;for(const e of i){const i=e.nodes?[t,...e.nodes]:t;n.push((0,s.withModifiedErrorNodes)(e,i))}}}function p(e,t,n,i){var r,o;for(const o of null!==(r=e.operationTypes)&&void 0!==r?r:[])u((()=>t.setRoot(o.operation,o.type.name.value).setOfExtension(i)),o,n);t.sourceAST=e,"description"in e&&(t.description=null===(o=e.description)||void 0===o?void 0:o.value),d(e,t,n,i)}function d(e,t,n,i){var r;for(const o of null!==(r=e.directives)&&void 0!==r?r:[])u((()=>{if(t===t.schema().schemaDefinition&&"link"!==o.name.value&&t.schema().blueprint.applyDirectivesAfterParsing())t.addUnappliedDirective({extension:i,directive:o,args:f(o),nameOrDef:o.name.value});else{const e=t.applyDirective(o.name.value,f(o));e.setOfExtension(i),e.sourceAST=o}}),o,n)}function f(e){var t;const n=Object.create(null);for(const i of null!==(t=e.arguments)&&void 0!==t?t:[])n[i.name.value]=a(i.value);return n}function h(e,t,n,i,r){var o,a,c,l,p;switch(e.kind){case"EnumTypeDefinition":case"EnumTypeExtension":const f=t;for(const t of null!==(o=e.values)&&void 0!==o?o:[])d(t,f.value(t.name.value),i);break;case"ObjectTypeDefinition":case"ObjectTypeExtension":case"InterfaceTypeDefinition":case"InterfaceTypeExtension":const h=t;for(const o of null!==(a=e.fields)&&void 0!==a?a:[]){if(n.ignoreParsedField(t,o.name.value))continue;const e=h.addField(o.name.value);e.setOfExtension(r),v(o,e,i)}for(const n of null!==(c=e.interfaces)&&void 0!==c?c:[])u((()=>{const e=n.name.value;if(h.implementsInterface(e))throw s.ERRORS.INVALID_GRAPHQL.err(`Type "${t}" can only implement "${e}" once.`);h.addImplementedInterface(e).setOfExtension(r)}),n,i);break;case"UnionTypeDefinition":case"UnionTypeExtension":const m=t;for(const t of null!==(l=e.types)&&void 0!==l?l:[])u((()=>{const e=t.name.value;if(m.hasTypeMember(e))throw s.ERRORS.INVALID_GRAPHQL.err(`Union type "${m}" can only include type "${e}" once.`);m.addType(e).setOfExtension(r)}),t,i);break;case"InputObjectTypeDefinition":case"InputObjectTypeExtension":const y=t;for(const t of null!==(p=e.fields)&&void 0!==p?p:[]){const e=y.addField(t.name.value);e.setOfExtension(r),I(t,e,i)}}d(e,t,i,r),y(e,t)}function m(e,t,n){var i;const r=t;for(const t of null!==(i=e.values)&&void 0!==i?i:[]){const e=r.addValue(t.name.value);t.description&&(e.description=t.description.value),e.setOfExtension(n)}y(e,t)}function y(e,t){e.description&&(t.description=e.description.value),t.sourceAST=e}function v(e,t,n){var i,r;const a=T(e.type,t.schema());t.type=function(e,t,n,i){return(0,o.isOutputType)(e)?e:void i.push(s.ERRORS.INVALID_GRAPHQL.err(`The type of "${t}" must be Output Type but got "${e}", a ${e.kind}.`,{nodes:n}))}(a,t.coordinate,e,n);for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])g(r,t.addArgument(r.name.value),n,!0);d(e,t,n),t.description=null===(r=e.description)||void 0===r?void 0:r.value,t.sourceAST=e}function E(e,t,n,i){return(0,o.isInputType)(e)?e:void i.push(s.ERRORS.INVALID_GRAPHQL.err(`The type of "${t}" must be Input Type but got "${e}", a ${e.kind}.`,{nodes:n}))}function T(e,t){switch(e.kind){case i.Kind.LIST_TYPE:return new o.ListType(T(e.type,t));case i.Kind.NON_NULL_TYPE:const n=T(e.type,t);if(n.kind==i.Kind.NON_NULL_TYPE)throw s.ERRORS.INVALID_GRAPHQL.err("Cannot apply the non-null operator (!) twice to the same type",{nodes:e});return new o.NonNullType(n);default:return function(e,t){const n=t.type(e.name.value);if(!n)throw s.ERRORS.INVALID_GRAPHQL.err(`Unknown type ${e.name.value}`,{nodes:e});return n}(e,t)}}function g(e,t,n,i){var r;const o=T(e.type,t.schema());t.type=E(o,t.coordinate,e,n),t.defaultValue=a(e.defaultValue),i&&d(e,t,n),t.description=null===(r=e.description)||void 0===r?void 0:r.value,t.sourceAST=e}function I(e,t,n){var i;const r=T(e.type,t.schema());t.type=E(r,t.coordinate,e,n),t.defaultValue=a(e.defaultValue),d(e,t,n),t.description=null===(i=e.description)||void 0===i?void 0:i.value,t.sourceAST=e}function N(e,t,n){var i;for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])g(r,t.addArgument(r.name.value),n,!1);t.repeatable=e.repeatable;const r=e.locations.map((({value:e})=>e));t.addLocations(...r),y(e,t)}function b(e,t,n){var i;for(const r of null!==(i=e.arguments)&&void 0!==i?i:[])d(r,t.argument(r.name.value),n)}t.buildSchema=function(e,t){return c((0,i.parse)(e),t)},t.buildSchemaFromAST=c,t.builtTypeReference=function(e,t){return T((0,i.parseType)(e),t)}},9209:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeAllCoreFeatures=t.LINK_VERSIONS=t.CORE_VERSIONS=t.findCoreSpecVersion=t.FeatureUrl=t.FeatureVersion=t.FeatureDefinitions=t.CoreSpecDefinition=t.isCoreSpecDirectiveApplication=t.extractCoreFeatureImports=t.FeatureDefinition=t.corePurposes=t.ErrCoreCheckFailed=t.linkDirectiveDefaultName=t.linkIdentity=t.coreIdentity=void 0;const i=n(8929),r=n(4888),o=n(4177),s=n(5811),a=n(9724),c=n(8116),l=n(3421),u=n(5848),p=n(5388),d=n(3208);function f(e){return new Error(e)}function h(e){switch(e){case"SECURITY":return"`SECURITY` features provide metadata necessary to securely resolve fields.";case"EXECUTION":return"`EXECUTION` features provide metadata necessary for operation execution."}}t.coreIdentity="https://specs.apollo.dev/core",t.linkIdentity="https://specs.apollo.dev/link",t.linkDirectiveDefaultName="link",t.ErrCoreCheckFailed=e=>(0,c.aggregateError)("CheckFailed","one or more checks failed",e),t.corePurposes=["SECURITY","EXECUTION"];class m{constructor(e){this.url="string"==typeof e?N.parse(e):e}get identity(){return this.url.identity}get version(){return this.url.version}isSpecType(e){const t=this.nameInSchema(e.schema());return void 0!==t&&e.name.startsWith(`${t}__`)}isSpecDirective(e){const t=this.nameInSchema(e.schema());return null!=t&&(e.name===t||e.name.startsWith(`${t}__`))}nameInSchema(e){const t=this.featureInSchema(e);return null==t?void 0:t.nameInSchema}directiveNameInSchema(e,t){const n=this.featureInSchema(e);return n?n.directiveNameInSchema(t):void 0}typeNameInSchema(e,t){const n=this.featureInSchema(e);return n?n.typeNameInSchema(t):void 0}rootDirective(e){const t=this.nameInSchema(e);return t?e.directive(t):void 0}directive(e,t){const n=this.directiveNameInSchema(e,t);return n?e.directive(n):void 0}type(e,t){const n=this.typeNameInSchema(e,t);return n?e.type(n):void 0}addRootDirective(e){return e.addDirectiveDefinition(this.nameInSchema(e))}addDirective(e,t){return e.addDirectiveDefinition(this.directiveNameInSchema(e,t))}addDirectiveSpec(e,t){return t.checkOrAdd(e,this.directiveNameInSchema(e,t.name))}addTypeSpec(e,t){return t.checkOrAdd(e,this.typeNameInSchema(e,t.name))}addScalarType(e,t){return e.addType(new o.ScalarType(this.typeNameInSchema(e,t)))}addEnumType(e,t){return e.addType(new o.EnumType(this.typeNameInSchema(e,t)))}featureInSchema(e){const t=e.coreFeatures;if(!t)throw f("Schema is not a core schema (add @core first)");return t.getByIdentity(this.identity)}get defaultCorePurpose(){}toString(){return`${this.identity}/${this.version}`}}function y(e,t,n,i){if(t&&!t.includes(e)){let r="";if(!e.startsWith("@")&&t.includes("@"+e))r=` Did you mean directive "@${e}"?`;else{const n=(0,p.suggestionList)(e,t);n&&(r=(0,p.didYouMean)(n))}n.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Cannot import unknown element "${e}".${r}`,{nodes:i.sourceAST}))}}t.FeatureDefinition=m,t.extractCoreFeatureImports=function(e,t){const n=t.arguments();if(!("import"in n)||!n.import)return[];const i=n.import,r=(0,u.coreFeatureDefinitionIfKnown)(e),s=null==r?void 0:r.allElementNames(),a=[],p=[];e:for(const e of i){if("string"==typeof e){p.push({name:e}),y(e,s,a,t);continue}if("object"!=typeof e){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid sub-value ${(0,l.valueToString)(e)} for @link(import:) argument: values should be either strings or input object values of the form { name: "<importedElement>", as: "<alias>" }.`,{nodes:t.sourceAST}));continue}let n;for(const[i,r]of Object.entries(e))switch(i){case"name":if("string"!=typeof r){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid value for the "name" field for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument: must be a string.`,{nodes:t.sourceAST}));continue e}n=r;break;case"as":if("string"!=typeof r){a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid value for the "as" field for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument: must be a string.`,{nodes:t.sourceAST}));continue e}break;default:a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Unknown field "${i}" for sub-value ${(0,l.valueToString)(e)} of @link(import:) argument.`,{nodes:t.sourceAST}));continue e}if(n){const i=e;p.push(i),i.as&&("@"===i.name.charAt(0)&&"@"!==i.as.charAt(0)?a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid @link import renaming: directive "${i.name}" imported name should start with a '@' character, but got "${i.as}".`,{nodes:t.sourceAST})):"@"!==i.name.charAt(0)&&"@"===i.as.charAt(0)&&a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid @link import renaming: type "${i.name}" imported name should not start with a '@' character, but got "${i.as}" (or, if @${i.name} is a directive, then it should be referred to with a '@').`,{nodes:t.sourceAST}))),y(n,s,a,t)}else a.push(c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Invalid sub-value ${(0,l.valueToString)(e)} for @link(import:) argument: missing mandatory "name" field.`,{nodes:t.sourceAST}))}if(a.length>0)throw(0,o.ErrGraphQLValidationFailed)(a);return p},t.isCoreSpecDirectiveApplication=function(e){var n,r,a;const c=e.definition;if(!c)return!1;const l=c.argument("as");if(l&&!(0,s.sameType)(l.type,e.schema().stringType()))return!1;if(!c.repeatable||1!==c.locations.length||c.locations[0]!==i.DirectiveLocation.SCHEMA)return!1;const u=null!==(n=c.argument("url"))&&void 0!==n?n:c.argument("feature");if(!u||(p=u.type,d=e.schema(),!(0,s.sameType)(p,d.stringType())&&!(0,s.sameType)(p,new o.NonNullType(d.stringType()))))return!1;var p,d;const f=e.arguments();try{const n=N.parse(f[u.name]);return n.identity===t.coreIdentity?e.name===(null!==(r=f.as)&&void 0!==r?r:"core"):n.identity===t.linkIdentity&&e.name===(null!==(a=f.as)&&void 0!==a?a:t.linkDirectiveDefaultName)}catch(e){return!1}};const v=(0,d.createEnumTypeSpecification)({name:"Purpose",values:t.corePurposes.map((e=>({name:e,description:h(e)})))}),E=(0,d.createScalarTypeSpecification)({name:"Import"});class T extends m{constructor(e,n=t.linkIdentity,r=t.linkDirectiveDefaultName){super(new N(n,r,e)),this.directiveDefinitionSpec=(0,d.createDirectiveSpecification)({name:r,locations:[i.DirectiveLocation.SCHEMA],repeatable:!0,argumentFct:(e,t)=>this.createDefinitionArgumentSpecifications(e,t)})}createDefinitionArgumentSpecifications(e,t){const n=[{name:this.urlArgName(),type:e.stringType()},{name:"as",type:e.stringType()}];if(this.supportPurposes()){const i=`${null!=t?t:this.url.name}__${v.name}`,r=v.checkOrAdd(e,i);if(r.length>0)return{args:n,errors:r};n.push({name:"for",type:e.type(i)})}if(this.supportImport()){const i=`${null!=t?t:this.url.name}__${E.name}`,r=E.checkOrAdd(e,i);if(r.length>0)return{args:n,errors:r};n.push({name:"import",type:new o.ListType(e.type(i))})}return{args:n,errors:[]}}addElementsToSchema(e){return[]}addToSchema(e,t){const n=this.addDefinitionsToSchema(e,t);if(n.length>0)return n;const i={[this.urlArgName()]:this.toString()};t&&(i.as=t);const r=e.schemaDefinition,o=r.hasNonExtensionElements(),s=r.applyDirective(null!=t?t:this.url.name,i,!0);if(!o&&r.hasExtensionElements()){const e=(0,a.firstOf)(r.extensions());(0,a.assert)(e,"`hasExtensionElements` should not have been `true`"),s.setOfExtension(e)}return[]}addDefinitionsToSchema(e,t){const n=e.coreFeatures;if(n)return n.coreItself.url.identity===this.identity?[]:[c.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Cannot add feature ${this} to the schema, it already uses ${n.coreItself.url}`)];const i=null!=t?t:this.url.name;return this.directiveDefinitionSpec.checkOrAdd(e,i)}allElementNames(){const e=[`@${this.url.name}`];return this.supportPurposes()&&e.push("Purpose"),this.supportImport()&&e.push("Import"),e}supportPurposes(){return this.version.strictlyGreaterThan(new I(0,1))}supportImport(){return this.url.name===t.linkDirectiveDefaultName}extractFeature(e){const t=e.coreFeatures;if(!t)throw f("Schema is not a core schema (add @core first)");if(!t.coreItself.url.version.equals(this.version))throw f(`Cannot use this version of @core (${this.version}), the schema uses version ${t.coreItself.url.version}`);return t.coreItself}coreDirective(e){const t=this.extractFeature(e);return e.directive(t.nameInSchema)}coreVersion(e){return this.extractFeature(e).url.version}applyFeatureToSchema(e,t,n,i){const r=this.coreDirective(e),o={[this.urlArgName()]:t.toString(),as:n};return this.supportPurposes()&&i&&(o.for=i),e.schemaDefinition.applyDirective(r,o),t.addElementsToSchema(e)}extractFeatureUrl(e){return N.parse(e[this.urlArgName()])}urlArgName(){return"core"===this.url.name?"feature":"url"}}t.CoreSpecDefinition=T;class g{constructor(e){this.identity=e,this._definitions=[]}add(e){if(e.identity!==this.identity)throw f(`Cannot add definition for ${e} to the versions of definitions for ${this.identity}`);return this._definitions.find((t=>e.version.equals(t.version)))||(this._definitions.push(e),this._definitions.sort(((e,t)=>-e.version.compareTo(t.version)))),this}find(e){return this._definitions.find((t=>t.version.satisfies(e)))}versions(){return this._definitions.map((e=>e.version))}latest(){return(0,a.assert)(this._definitions.length>0,"Trying to get latest when no definitions exist"),this._definitions[0]}}t.FeatureDefinitions=g;class I{constructor(e,t){this.major=e,this.minor=t}static parse(e){const t=e.match(this.VERSION_RE);if(!t)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Expected a version string (of the form v1.2), got ${e}`);return new this(+t[1],+t[2])}satisfies(e){const{major:t,minor:n}=this,{major:i,minor:r}=e;return i==t&&(0==t?r==n:r<=n)}get series(){const{major:e}=this;return e>0?`${e}.x`:String(this)}compareTo(e){return this.major>e.major?1:this.major<e.major?-1:this.minor>e.minor?1:this.minor<e.minor?-1:0}strictlyGreaterThan(e){return this.compareTo(e)>0}toString(){return`v${this.major}.${this.minor}`}equals(e){return this.major===e.major&&this.minor===e.minor}}t.FeatureVersion=I,I.VERSION_RE=/^v(\d+)\.(\d+)$/;class N{constructor(e,t,n,i){this.identity=e,this.name=t,this.version=n,this.element=i}static parse(e,t){const n=new r.URL(e);if(!n.pathname||"/"===n.pathname)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing path in feature url '${n}'`,{nodes:t});const i=n.pathname.split("/"),o=i.pop();if(!o)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing version component in feature url '${n}'`,{nodes:t});const s=I.parse(o),a=i[i.length-1];if(!a)throw c.ERRORS.INVALID_LINK_IDENTIFIER.err(`Missing feature name component in feature url '${n}'`,{nodes:t});const l=n.hash?n.hash.slice(1):void 0;return n.hash="",n.search="",n.password="",n.username="",n.pathname=i.join("/"),new N(n.toString(),a,s,l)}static decode(e){return this.parse(e.value,e)}satisfies(e){return e.identity===this.identity&&this.version.satisfies(e.version)}equals(e){return this.identity===e.identity&&this.version.equals(e.version)}get url(){return this.element?`${this.identity}/${this.version}#${this.element}`:`${this.identity}/${this.version}`}get isDirective(){var e;return null===(e=this.element)||void 0===e?void 0:e.startsWith("@")}get elementName(){var e;return this.isDirective?null===(e=this.element)||void 0===e?void 0:e.slice(1):this.element}get base(){return this.element?new N(this.identity,this.name,this.version):this}toString(){return this.url}}t.FeatureUrl=N,t.findCoreSpecVersion=function(e){return"core"===e.name?t.CORE_VERSIONS.find(e.version):e.name===t.linkDirectiveDefaultName?t.LINK_VERSIONS.find(e.version):void 0},t.CORE_VERSIONS=new g(t.coreIdentity).add(new T(new I(0,1),t.coreIdentity,"core")).add(new T(new I(0,2),t.coreIdentity,"core")),t.LINK_VERSIONS=new g(t.linkIdentity).add(new T(new I(1,0))),(0,u.registerKnownFeature)(t.CORE_VERSIONS),(0,u.registerKnownFeature)(t.LINK_VERSIONS),t.removeAllCoreFeatures=function(e){var t,n;const i=[...null!==(n=null===(t=e.coreFeatures)||void 0===t?void 0:t.allFeatures())&&void 0!==n?n:[]],r=[];for(const t of i)e.directives().filter((e=>t.isFeatureDefinition(e))).forEach((e=>e.remove().forEach((e=>e.remove())))),e.types().filter((e=>t.isFeatureDefinition(e))).forEach((e=>{const n=e.remove();n.length>0&&r.push({feature:t,type:e,references:n})}));const s=[];for(const{feature:e,type:t,references:n}of r){const i=n.filter((e=>e.isAttached()));i.length>0&&s.push(c.ERRORS.REFERENCED_INACCESSIBLE.err(`Cannot remove elements of feature ${e} as feature type ${t} is referenced by elements: ${i.join(", ")}`,{nodes:(0,o.sourceASTs)(...n)}))}if(s.length>0)throw(0,o.ErrGraphQLAPISchemaValidationFailed)(s)}},2116:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DebugLogger=t.newDebugLogger=void 0;const r=i(n(4061)),o=n(9724);function s(e){let t="";for(let n=0;n<e;n++)t+=r.default.blackBright("⎸ ");return t}let a=0,c="",l=0;const u=[];t.newDebugLogger=function(e){const t=function(e){const t=process.env.APOLLO_FEDERATION_DEBUG,n=(0,o.validateStringContainsBoolean)(t);return void 0!==n?n:t.split(",").map((e=>e.trim())).includes(e)}(e),i=new p(e,t);if(t){n.g.console=n(5108),u.push(i),l=Math.max(l,e.length);for(const e of u)p.prototype.updateHeader.call(e,l)}return i};class p{constructor(e,t){this.name=e,this.enabled=t,this.header=r.default.blackBright(`[${e}] `)}updateHeader(e){let t="";if(e>this.name.length){const n=e-this.name.length;for(let e=0;e<n;e++)t+=" "}this.header=r.default.blackBright("["+t+this.name+"] ")}doLog(e){const t=this.header+c,n=e.replace(/\n/g,"\n"+t+"  ");console.log(t+n)}log(e,t=r.default.yellow("• ")){return this.enabled?("string"!=typeof e&&(e=e()),this.doLog(t+e),this):this}groupedValues(e,t,n){if(!this.enabled)return this;this.group(n);for(const n of e)this.doLog("- "+t(n));return this.groupEnd()}groupedEntries(e,t,n){if(!this.enabled)return this;this.group();for(const[i,r]of e.entries())this.doLog("- "+t(i)+": "+n(r));return this.groupEnd()}group(e){return this.enabled&&(e&&this.log(e,r.default.blue("‣ ")),a++,c=s(a)),this}groupEnd(e){return this.enabled?(a>0&&(a--,c=s(a)),e&&this.log(e,r.default.green("⇒ ")),this):this}}t.DebugLogger=p},4177:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CoreFeatures=t.CoreFeature=t.defaultSchemaBlueprint=t.SchemaBlueprint=t.NamedSchemaElementWithType=t.NamedSchemaElement=t.SchemaElement=t.Extension=t.sourceASTs=t.DirectiveTargetElement=t.isLeafType=t.typeFromAST=t.typeToAST=t.isTypeSystemDirectiveLocation=t.typeSystemDirectiveLocations=t.isExecutableDirectiveLocation=t.executableDirectiveLocations=t.isConditionalDirective=t.runtimeTypesIntersects=t.possibleRuntimeTypes=t.isCompositeType=t.isAbstractType=t.isNullableType=t.baseType=t.filterTypesOfKind=t.isTypeOfKind=t.isInputType=t.isOutputType=t.isInputObjectType=t.isUnionType=t.isEnumType=t.isInterfaceType=t.isObjectType=t.isIDType=t.isBooleanType=t.isFloatType=t.isStringType=t.isIntType=t.isCustomScalarType=t.isScalarType=t.isNonNullType=t.isListType=t.isWrapperType=t.isNamedType=t.isSchemaRootType=t.defaultRootName=t.allSchemaRootKinds=t.typenameFieldName=t.ErrGraphQLAPISchemaValidationFailed=t.ErrGraphQLValidationFailed=void 0,t.copyDirectiveDefinitionToSchema=t.newNamedType=t.variableDefinitionFromAST=t.variableDefinitionsFromAST=t.VariableDefinitions=t.VariableDefinition=t.variablesInArguments=t.isVariable=t.containsVariable=t.mergeVariables=t.Variable=t.directiveApplicationsSubstraction=t.isDirectiveApplicationsSubset=t.sameDirectiveApplications=t.sameDirectiveApplication=t.Directive=t.DirectiveDefinition=t.EnumValue=t.ArgumentDefinition=t.InputFieldDefinition=t.FieldDefinition=t.NonNullType=t.ListType=t.InputObjectType=t.EnumType=t.UnionType=t.UnionMember=t.InterfaceType=t.ObjectType=t.InterfaceImplementation=t.ScalarType=t.SchemaDefinition=t.RootType=t.Schema=void 0;const i=n(8929),r=n(9209),o=n(9724),s=n(3421),a=n(5322),c=n(2850),l=n(5811),u=n(9495),p=n(9504),d=n(4710),f=n(5663),h=n(3208),m=n(5388),y=n(8116);function v(e){return e.charAt(0).toUpperCase()+e.slice(1)}function E(e){return T(e)||g(e)}function T(e){return"ListType"==e.kind}function g(e){return"NonNullType"==e.kind}function I(e){return"ScalarType"==e.kind}function N(e){return"ObjectType"==e.kind}function b(e){return"InterfaceType"==e.kind}function _(e){return"EnumType"==e.kind}function S(e){return"UnionType"==e.kind}function O(e){switch(w(e).kind){case"ScalarType":case"ObjectType":case"UnionType":case"EnumType":case"InterfaceType":return!0;default:return!1}}function D(e){switch(w(e).kind){case"ScalarType":case"EnumType":case"InputObjectType":return!0;default:return!1}}function A(e,t){return e.kind===t}function R(e,t){return e.reduce(((e,n)=>(A(n,t)&&e.push(n),e)),[])}function w(e){return E(e)?e.baseType():e}function L(e){switch(e.kind){case"InterfaceType":return e.possibleRuntimeTypes();case"UnionType":return e.types();case"ObjectType":return[e]}}t.ErrGraphQLValidationFailed=(e,t="The schema is not a valid GraphQL schema.")=>(0,y.aggregateError)("GraphQLValidationFailed",t,e),t.ErrGraphQLAPISchemaValidationFailed=e=>(0,y.aggregateError)("GraphQLAPISchemaValidationFailed","The supergraph schema failed to produce a valid API schema",e),t.typenameFieldName="__typename",t.allSchemaRootKinds=["query","mutation","subscription"],t.defaultRootName=v,t.isSchemaRootType=function(e){return N(e)&&e.isRootType()},t.isNamedType=function(e){return e instanceof B},t.isWrapperType=E,t.isListType=T,t.isNonNullType=g,t.isScalarType=I,t.isCustomScalarType=function(e){return I(e)&&!X.includes(e.name)},t.isIntType=function(e){return e===e.schema().intType()},t.isStringType=function(e){return e===e.schema().stringType()},t.isFloatType=function(e){return e===e.schema().floatType()},t.isBooleanType=function(e){return e===e.schema().booleanType()},t.isIDType=function(e){return e===e.schema().idType()},t.isObjectType=N,t.isInterfaceType=b,t.isEnumType=_,t.isUnionType=S,t.isInputObjectType=function(e){return"InputObjectType"==e.kind},t.isOutputType=O,t.isInputType=D,t.isTypeOfKind=A,t.filterTypesOfKind=R,t.baseType=w,t.isNullableType=function(e){return!g(e)},t.isAbstractType=function(e){return b(e)||S(e)},t.isCompositeType=function(e){return N(e)||b(e)||S(e)},t.possibleRuntimeTypes=L,t.runtimeTypesIntersects=function(e,t){const n=L(e),i=L(t);for(const e of n)if(i.some((t=>e.name===t.name)))return!0;return!1},t.isConditionalDirective=function(e){return["include","skip"].includes(e.name)},t.executableDirectiveLocations=[i.DirectiveLocation.QUERY,i.DirectiveLocation.MUTATION,i.DirectiveLocation.SUBSCRIPTION,i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_DEFINITION,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT,i.DirectiveLocation.VARIABLE_DEFINITION];const F=new Set(t.executableDirectiveLocations);function x(e){return F.has(e)}t.isExecutableDirectiveLocation=x,t.typeSystemDirectiveLocations=[i.DirectiveLocation.SCHEMA,i.DirectiveLocation.SCALAR,i.DirectiveLocation.OBJECT,i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.INPUT_FIELD_DEFINITION];const k=new Set(t.typeSystemDirectiveLocations);function $(e){return k.has(e)}function C(e){switch(e.kind){case"ListType":return{kind:i.Kind.LIST_TYPE,type:C(e.ofType)};case"NonNullType":return{kind:i.Kind.NON_NULL_TYPE,type:C(e.ofType)};default:return{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:e.name}}}}function j(e,t){switch(t.kind){case i.Kind.LIST_TYPE:return new de(j(e,t.type));case i.Kind.NON_NULL_TYPE:return new fe(j(e,t.type));default:const n=e.type(t.name.value);if(!n)throw y.ERRORS.INVALID_GRAPHQL.err(`Unknown type "${t.name.value}"`,{nodes:t});return n}}t.isTypeSystemDirectiveLocation=$,t.typeToAST=C,t.typeFromAST=j,t.isLeafType=function(e){return I(e)||_(e)};class M{constructor(e){this._schema=e}schema(){return this._schema}appliedDirectivesOf(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.filter((e=>e.name==t))}get appliedDirectives(){var e;return null!==(e=this._appliedDirectives)&&void 0!==e?e:[]}hasAppliedDirective(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.some((e=>e.name==t))}applyDirective(e,t){let n;if(e instanceof Te){if(e.schema()!=this.schema())throw new Error(`Cannot add directive ${e} to ${this} as it is attached to another schema`);n=e,t&&n.setArguments(t)}else n=new Te(e.name,null!=t?t:Object.create(null));return P.prototype.setParent.call(n,this),this._appliedDirectives?this._appliedDirectives.push(n):this._appliedDirectives=[n],n}appliedDirectivesToDirectiveNodes(){if(0!=this.appliedDirectives.length)return this.appliedDirectives.map((e=>({kind:i.Kind.DIRECTIVE,name:{kind:i.Kind.NAME,value:e.name},arguments:e.argumentsToAST()})))}appliedDirectivesToString(){return 0==this.appliedDirectives.length?"":" "+this.appliedDirectives.join(" ")}variablesInAppliedDirectives(){return this.appliedDirectives.reduce(((e,t)=>Ne(e,_e(t.arguments()))),[])}}t.DirectiveTargetElement=M,t.sourceASTs=function(...e){return e.map((e=>null==e?void 0:e.sourceAST)).filter((e=>void 0!==e))};class P{schema(){const e=this.schemaInternal();return(0,o.assert)(e,"requested schema does not exist. Probably because the element is unattached"),e}schemaInternal(){if(this._parent)return this._parent instanceof Z?this._parent:this._parent instanceof V?this._parent.schemaInternal():this._parent instanceof M?this._parent.schema():void(0,o.assert)(!1,"unreachable code. parent is of unknown type")}get parent(){return(0,o.assert)(this._parent,"trying to access non-existent parent"),this._parent}isAttached(){return!!this._parent}setParent(e){(0,o.assert)(!this._parent,"Cannot set parent of an already attached element"),this._parent=e,this.onAttached()}onAttached(){}checkUpdate(){(0,o.assert)(this.isAttached(),(()=>`Cannot modify detached element ${this}`))}}class U{get extendedElement(){return this._extendedElement}setExtendedElement(e){(0,o.assert)(!this._extendedElement,"Cannot attached already attached extension"),this._extendedElement=e}}t.Extension=U;class V extends P{addUnappliedDirective({nameOrDef:e,args:t,extension:n,directive:i}){const r={nameOrDef:e,args:null!=t?t:{},extension:n,directive:i};this._unappliedDirectives?this._unappliedDirectives.push(r):this._unappliedDirectives=[r]}processUnappliedDirectives(){var e;for(const{nameOrDef:t,args:n,extension:i,directive:r}of null!==(e=this._unappliedDirectives)&&void 0!==e?e:[]){const e=this.applyDirective(t,n);e.setOfExtension(i),e.sourceAST=r}this._unappliedDirectives=void 0}get appliedDirectives(){var e;return null!==(e=this._appliedDirectives)&&void 0!==e?e:[]}appliedDirectivesOf(e){const t="string"==typeof e?e:e.name;return this.appliedDirectives.filter((e=>e.name==t))}hasAppliedDirective(e){return 0!==this.appliedDirectivesOf(e).length}applyDirective(e,n,i=!1){var r;let o;if("string"==typeof e){this.checkUpdate();const i=null!==(r=this.schema().directive(e))&&void 0!==r?r:this.schema().blueprint.onMissingDirectiveDefinition(this.schema(),e,n);if(!i)throw this.schema().blueprint.onGraphQLJSValidationError(this.schema(),y.ERRORS.INVALID_GRAPHQL.err(`Unknown directive "@${e}".`));if(Array.isArray(i))throw(0,t.ErrGraphQLValidationFailed)(i);o=e}else this.checkUpdate(e),o=e.name;const s=new Te(o,null!=n?n:Object.create(null));return P.prototype.setParent.call(s,this),this._appliedDirectives?i?this._appliedDirectives.unshift(s):this._appliedDirectives.push(s):this._appliedDirectives=[s],Ee.prototype.addReferencer.call(s.definition,s),this.onModification(),s}removeAppliedDirectives(){this._appliedDirectives&&this._appliedDirectives.concat().forEach((e=>e.remove()))}onModification(){const e=this.schemaInternal();e&&Z.prototype.onModification.call(e)}isElementBuiltIn(){return!1}removeTypeReferenceInternal(e){this.removeTypeReference(e)}checkRemoval(){(0,o.assert)(!this.isElementBuiltIn()||Z.prototype.canModifyBuiltIn.call(this.schema()),(()=>`Cannot modify built-in ${this}`))}checkUpdate(e){if(super.checkUpdate(),!Z.prototype.canModifyBuiltIn.call(this.schema())){let e=this;for(;e&&e instanceof V;)(0,o.assert)(!e.isElementBuiltIn(),(()=>`Cannot modify built-in (or part of built-in) ${this}`)),e=e.parent}if(e&&e.isAttached()){const t=e.schema();(0,o.assert)(!t||t===this.schema(),(()=>`Cannot add element ${e} to ${this} as it is attached to another schema`))}}}t.SchemaElement=V;class G extends V{constructor(e){super(),this._name=e}get name(){return this._name}}t.NamedSchemaElement=G;class B extends G{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.preserveEmptyDefinition=!1}addReferencer(e){this._referencers?this._referencers.includes(e)||this._referencers.push(e):this._referencers=[e]}removeReferencer(e){this._referencers&&(0,o.removeArrayElement)(e,this._referencers)}get coordinate(){return this.name}*allChildElements(){}extensions(){var e;return null!==(e=this._extensions)&&void 0!==e?e:[]}hasExtension(e){var t,n;return null!==(n=null===(t=this._extensions)||void 0===t?void 0:t.includes(e))&&void 0!==n&&n}newExtension(){return this.addExtension(new U)}addExtension(e){return this.checkUpdate(),this.hasExtension(e)||((0,o.assert)(!e.extendedElement,(()=>`Cannot add extension to type ${this}: it is already added to another type`)),this._extensions?this._extensions.push(e):this._extensions=[e],U.prototype.setExtendedElement.call(e,this),this.onModification()),e}removeExtensions(){if(this._extensions){this._extensions=void 0;for(const e of this.appliedDirectives)e.removeOfExtension();this.removeInnerElementsExtensions()}}isIntrospectionType(){return(0,u.isIntrospectionName)(this.name)}hasExtensionElements(){return!!this._extensions}hasNonExtensionElements(){return this.preserveEmptyDefinition||this.appliedDirectives.some((e=>void 0===e.ofExtension()))||this.hasNonExtensionInnerElements()}isElementBuiltIn(){return this.isBuiltIn}rename(e){this.checkUpdate();const t=this._name;this._name=e,Z.prototype.renameTypeInternal.call(this._parent,t,e),this.onModification()}remove(){var e,t;if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.removeAppliedDirectives(),this.removeInnerElements();const n=null!==(t=null===(e=this._referencers)||void 0===e?void 0:e.map((e=>(V.prototype.removeTypeReferenceInternal.call(e,this),e))))&&void 0!==t?t:[];return this._referencers=void 0,Z.prototype.removeTypeInternal.call(this._parent,this),this._parent=void 0,n}removeRecursive(){this.remove().forEach((e=>this.removeReferenceRecursive(e)))}referencers(){var e;return null!==(e=this._referencers)&&void 0!==e?e:[]}isReferenced(){return!!this._referencers}toString(){return this.name}}class Q extends G{get type(){return this._type}set type(e){e?this.checkUpdate(e):this.checkRemoval(),this._type&&Re(this,this._type),this._type=e,e&&Ae(this,e)}removeTypeReference(e){(0,o.assert)(this._type&&w(this._type)===e,(()=>`Cannot remove reference to type ${e} on ${this} as its type is ${this._type}`)),this._type=void 0}}t.NamedSchemaElementWithType=Q;class K extends P{ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot set object as part of the provided extension: it is not an extension of parent ${this.parent}`)),this._extension=e}remove(){this.removeInner(),Z.prototype.onModification.call(this.schema()),this._extension=void 0,this._parent=void 0}}class q{onMissingDirectiveDefinition(e,t,n){}onDirectiveDefinitionAndSchemaParsed(e){return[]}ignoreParsedField(e,t){return!1}onConstructed(e){}onAddedCoreFeature(e,t){}onInvalidation(e){}onValidation(e){return[]}validationRules(){return d.specifiedSDLRules}onGraphQLJSValidationError(e,t){var n;const i=/^Unknown directive "@(?<directive>[_A-Za-z][_0-9A-Za-z]*)"\.$/.exec(t.message),r=null===(n=null==i?void 0:i.groups)||void 0===n?void 0:n.directive;if(!r)return t;const o=e.allDirectives().map((e=>e.name)),s=(0,m.suggestionList)(r,o);return 0===s.length?this.onUnknownDirectiveValidationError(e,r,t):(0,y.withModifiedErrorMessage)(t,`${t.message}${(0,m.didYouMean)(s.map((e=>"@"+e)))}`)}onUnknownDirectiveValidationError(e,t,n){return n}applyDirectivesAfterParsing(){return!1}}t.SchemaBlueprint=q,t.defaultSchemaBlueprint=new q;class Y{constructor(e,t,n,i,r){this.url=e,this.nameInSchema=t,this.directive=n,this.imports=i,this.purpose=r}isFeatureDefinition(e){const t="DirectiveDefinition"===e.kind?"@"+e.name:e.name;return e.name.startsWith(this.nameInSchema+"__")||"DirectiveDefinition"===e.kind&&e.name===this.nameInSchema||!!this.imports.find((e=>{var n;return t===(null!==(n=e.as)&&void 0!==n?n:e.name)}))}directiveNameInSchema(e){var t,n;const i=this.imports.find((t=>"@"===t.name.charAt(0)&&t.name.slice(1)===e));return i?null!==(n=null===(t=i.as)||void 0===t?void 0:t.slice(1))&&void 0!==n?n:e:e===this.url.name?this.nameInSchema:this.nameInSchema+"__"+e}typeNameInSchema(e){var t;const n=this.imports.find((t=>t.name===e));return n?null!==(t=n.as)&&void 0!==t?t:e:this.nameInSchema+"__"+e}}t.CoreFeature=Y;class H{constructor(e){this.coreItself=e,this.byAlias=new Map,this.byIdentity=new Map,this.add(e);const t=(0,r.findCoreSpecVersion)(e.url);if(!t)throw y.ERRORS.UNKNOWN_LINK_VERSION.err(`Schema uses unknown version ${e.url.version} of the ${e.url.name} spec`);this.coreDefinition=t}getByIdentity(e){return this.byIdentity.get(e)}allFeatures(){return this.byIdentity.values()}removeFeature(e){const t=this.byIdentity.get(e);t&&(this.byIdentity.delete(e),this.byAlias.delete(t.nameInSchema))}maybeAddFeature(e){var t,n;if((null===(t=e.definition)||void 0===t?void 0:t.name)!==this.coreItself.nameInSchema)return;const i=e,o=i.arguments(),s=this.coreDefinition.extractFeatureUrl(o);if(this.byIdentity.get(s.identity))throw y.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err(`Duplicate inclusion of feature ${s.identity}`);const a=(0,r.extractCoreFeatureImports)(s,i),c=new Y(s,null!==(n=o.as)&&void 0!==n?n:s.name,e,a,o.for);return this.add(c),e.schema().blueprint.onAddedCoreFeature(e.schema(),c),c}add(e){this.byAlias.set(e.nameInSchema,e),this.byIdentity.set(e.url.identity,e)}sourceFeature(e){var t,n;const i=e instanceof Ee||e instanceof Te,r=e.name.split("__");if(r.length>1){const e=this.byAlias.get(r[0]);return e?{feature:e,nameInFeature:r[1],isImported:!1}:void 0}{const r=this.byAlias.get(e.name);if(r&&i)return{feature:r,nameInFeature:null!==(n=null===(t=r.imports.find((t=>t.as===`@${e.name}`)))||void 0===t?void 0:t.name.slice(1))&&void 0!==n?n:e.name,isImported:!0};const o=i?"@"+e.name:e.name,s=[this.coreItself,...this.byIdentity.values()];for(const e of s)for(const{as:t,name:n}of e.imports)if((null!=t?t:n)===o)return{feature:e,nameInFeature:n.slice(1),isImported:!0};return}}}t.CoreFeatures=H;const X=["Int","Float","String","Boolean","ID"],z=X.map((e=>(0,h.createScalarTypeSpecification)({name:e}))),J=[(0,h.createDirectiveSpecification)({name:"include",locations:[i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"if",type:new fe(e.booleanType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"skip",locations:[i.DirectiveLocation.FIELD,i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"if",type:new fe(e.booleanType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"deprecated",locations:[i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.INPUT_FIELD_DEFINITION],argumentFct:e=>({args:[{name:"reason",type:e.stringType(),defaultValue:"No longer supported"}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"specifiedBy",locations:[i.DirectiveLocation.SCALAR],argumentFct:e=>({args:[{name:"url",type:new fe(e.stringType())}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"defer",locations:[i.DirectiveLocation.FRAGMENT_SPREAD,i.DirectiveLocation.INLINE_FRAGMENT],argumentFct:e=>({args:[{name:"label",type:e.stringType()},{name:"if",type:new fe(e.booleanType()),defaultValue:!0}],errors:[]})}),(0,h.createDirectiveSpecification)({name:"stream",locations:[i.DirectiveLocation.FIELD],argumentFct:e=>({args:[{name:"label",type:e.stringType()},{name:"initialCount",type:e.intType(),defaultValue:0},{name:"if",type:new fe(e.booleanType()),defaultValue:!0}],errors:[]})})],W=/^@?[_A-Za-z][_0-9A-Za-z]*(\.[_A-Za-z][_0-9A-Za-z]*)?(\([_A-Za-z][_0-9A-Za-z]*:\))?$/;class Z{constructor(e=t.defaultSchemaBlueprint,n={}){this.blueprint=e,this.config=n,this._builtInTypes=new o.MapWithCachedArrays,this._types=new o.MapWithCachedArrays,this._builtInDirectives=new o.MapWithCachedArrays,this._directives=new o.MapWithCachedArrays,this.isConstructed=!1,this.isValidated=!1,this._schemaDefinition=new te,P.prototype.setParent.call(this._schemaDefinition,this),z.forEach((e=>e.checkOrAdd(this,void 0,!0))),J.forEach((e=>e.checkOrAdd(this,void 0,!0))),e.onConstructed(this),this.isConstructed=!0}canModifyBuiltIn(){return!this.isConstructed}runWithBuiltInModificationAllowed(e){const t=this.isConstructed;this.isConstructed=!1,e(),this.isConstructed=t}renameTypeInternal(e,t){this._types.set(t,this._types.get(e)),this._types.delete(e)}removeTypeInternal(e){this._types.delete(e.name)}removeDirectiveInternal(e){this._directives.delete(e.name)}markAsCoreSchema(e){this._coreFeatures=new H(e)}unmarkAsCoreSchema(){this._coreFeatures=void 0}onModification(){this.isConstructed&&(this.invalidate(),this.cachedDocument=void 0,this.apiSchema=void 0)}isCoreSchema(){return void 0!==this.coreFeatures}get coreFeatures(){return this._coreFeatures}toAST(){var e;if(!this.cachedDocument){const t=(0,i.parse)((0,c.printSchema)(this),{noLocation:!0});if(null===(e=this.config.cacheAST)||void 0===e||!e)return t;this.cachedDocument=t}return this.cachedDocument}toAPISchema(){if(!this.apiSchema){this.validate();const e=this.clone();for(const t of["defer","stream"]){const n=e.directive(t);n&&!n.isBuiltIn&&n.removeRecursive()}(0,a.removeInaccessibleElements)(e),(0,r.removeAllCoreFeatures)(e),(0,o.assert)(!e.isCoreSchema(),"The API schema shouldn't be a core schema"),e.validate(),this.apiSchema=e}return this.apiSchema}emptyASTDefinitionsForExtensionsWithoutDefinition(){const e=[];if(this.schemaDefinition.hasExtensionElements()&&!this.schemaDefinition.hasNonExtensionElements()){const t={kind:i.Kind.SCHEMA_DEFINITION,operationTypes:[]};e.push(t)}for(const t of this.types())if(t.hasExtensionElements()&&!t.hasNonExtensionElements()){const n={kind:t.astDefinitionKind,name:{kind:i.Kind.NAME,value:t.name}};e.push(n)}return e}toGraphQLJSSchema(e){var t,n;const r=null!==(t=null==e?void 0:e.includeDefer)&&void 0!==t&&t,o=null!==(n=null==e?void 0:e.includeStream)&&void 0!==n&&n;let s=this.toAST();const a=this.emptyASTDefinitionsForExtensionsWithoutDefinition();r&&a.push(this.deferDirective().toAST()),o&&a.push(this.streamDirective().toAST()),a.length>0&&(s={kind:i.Kind.DOCUMENT,definitions:s.definitions.concat(a)});const c=(0,i.buildASTSchema)(s);if(a.length>0)for(const e of a)switch(e.kind){case i.Kind.SCHEMA_DEFINITION:c.astNode=void 0;break;case i.Kind.SCALAR_TYPE_DEFINITION:case i.Kind.OBJECT_TYPE_DEFINITION:case i.Kind.INTERFACE_TYPE_DEFINITION:case i.Kind.ENUM_TYPE_DEFINITION:case i.Kind.UNION_TYPE_DEFINITION:case i.Kind.INPUT_OBJECT_TYPE_DEFINITION:const t=c.getType(e.name.value);t&&(t.astNode=void 0)}return c}get schemaDefinition(){return this._schemaDefinition}types(){return this._types.values()}interfaceTypes(){return R(this.types(),"InterfaceType")}objectTypes(){return R(this.types(),"ObjectType")}unionTypes(){return R(this.types(),"UnionType")}scalarTypes(){return R(this.types(),"ScalarType")}inputTypes(){return R(this.types(),"InputObjectType")}enumTypes(){return R(this.types(),"EnumType")}builtInTypes(e=!1){const t=this._builtInTypes.values();return e?t:t.filter((e=>!this.isShadowedBuiltInType(e)))}isShadowedBuiltInType(e){return e.isBuiltIn&&this._types.has(e.name)}allTypes(){return this.builtInTypes().concat(this.types())}type(e){return this._types.get(e)||this._builtInTypes.get(e)}typeOfKind(e,t){const n=this.type(e);return n&&n.kind===t?n:void 0}intType(){return this._builtInTypes.get("Int")}floatType(){return this._builtInTypes.get("Float")}stringType(){return this._builtInTypes.get("String")}booleanType(){return this._builtInTypes.get("Boolean")}idType(){return this._builtInTypes.get("ID")}addType(e){const t=this.type(e.name);if(t&&(0,o.assert)(t.isBuiltIn,(()=>`Type ${e} already exists in this schema`)),e.isAttached())return(0,o.assert)(e.parent==this,(()=>`Cannot add type ${e} to this schema; it is already attached to another schema`)),e;e.isBuiltIn?((0,o.assert)(!this.isConstructed,`Cannot add built-in ${e} to this schema (built-ins can only be added at schema construction time)`),this._builtInTypes.set(e.name,e)):this._types.set(e.name,e),P.prototype.setParent.call(e,this);const n=function(e){if("ObjectType"===e.kind)switch(e.name){case"Query":return"query";case"Mutation":return"mutation";case"Subscription":return"subscription";default:return}}(e);return n&&!this.schemaDefinition.root(n)&&this.schemaDefinition.setRoot(n,e),this.onModification(),e}directives(){return this._directives.values()}builtInDirectives(e=!1){return e?this._builtInDirectives.values():this._builtInDirectives.values().filter((e=>!this.isShadowedBuiltInDirective(e)))}allDirectives(){return this.builtInDirectives().concat(this.directives())}isShadowedBuiltInDirective(e){return e.isBuiltIn&&this._directives.has(e.name)}directive(e){return this._directives.get(e)||this.builtInDirective(e)}builtInDirective(e){return this._builtInDirectives.get(e)}*allNamedSchemaElement(){for(const e of this.types())yield e,yield*e.allChildElements();for(const e of this.directives())yield e,yield*e.arguments()}*allSchemaElement(){yield this._schemaDefinition,yield*this.allNamedSchemaElement()}addDirectiveDefinition(e){const t="string"==typeof e?new Ee(e):e,n=this.directive(t.name);return(0,o.assert)(!n||n.isBuiltIn,(()=>`Directive ${t} already exists in this schema`)),t.isAttached()?((0,o.assert)(t.parent==this,(()=>`Cannot add directive ${t} to this schema; it is already attached to another schema`)),t):(t.isBuiltIn?((0,o.assert)(!this.isConstructed,(()=>`Cannot add built-in ${t} to this schema (built-ins can only be added at schema construction time)`)),this._builtInDirectives.set(t.name,t)):this._directives.set(t.name,t),P.prototype.setParent.call(t,this),this.onModification(),t)}invalidate(){this.isValidated&&this.blueprint.onInvalidation(this),this.isValidated=!1}validate(){if(this.isValidated)return;this.runWithBuiltInModificationAllowed((()=>{(0,u.addIntrospectionFields)(this)}));let e=(0,p.validateSDL)(this.toAST(),void 0,this.blueprint.validationRules()).map((e=>this.blueprint.onGraphQLJSValidationError(this,e)));if(e=e.concat((0,f.validateSchema)(this)),0===e.length&&this.runWithBuiltInModificationAllowed((()=>{e=this.blueprint.onValidation(this)})),e.length>0)throw(0,t.ErrGraphQLValidationFailed)(e);this.isValidated=!0}clone(e){const t=new Z(null!=e?e:this.blueprint);return function(e,t){for(const n of Le(e,t))t.addType(we(n.kind,n.name));for(const n of Fe(e,t))t.addDirectiveDefinition(n.name);for(const n of Fe(e,t))Ge(n,t.directive(n.name));!function(e,t){t.preserveEmptyDefinition=e.preserveEmptyDefinition;const n=xe(e,t);for(const i of e.roots())ke(n,i,t.setRoot(i.rootKind,i.type.name));for(const i of e.appliedDirectives)ke(n,i,je(i,t));t.description=e.description,t.sourceAST=e.sourceAST}(e.schemaDefinition,t.schemaDefinition);for(const n of Le(e,t))$e(n,t.type(n.name))}(this,t),this.isValidated&&t.validate(),t}getBuiltInDirective(e){const t=this.directive(e);return(0,o.assert)(t,`The provided schema has not be built with the ${e} directive built-in`),t}includeDirective(){return this.getBuiltInDirective("include")}skipDirective(){return this.getBuiltInDirective("skip")}deprecatedDirective(){return this.getBuiltInDirective("deprecated")}specifiedByDirective(){return this.getBuiltInDirective("specifiedBy")}deferDirective(){return this.getBuiltInDirective("defer")}streamDirective(){return this.getBuiltInDirective("stream")}elementByCoordinate(e){if(!e.match(W))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);const t=e.indexOf("("),n=t<0?e:e.slice(0,t),i=t<0?void 0:e.slice(t+1,e.length-2),r=n.split("."),o=r[0],s=r[1];if(o.startsWith("@")){if(s)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);const t=this.directive(o.slice(1));return i?null==t?void 0:t.argument(i):t}{const t=this.type(o);if(!t||!s)return t;switch(t.kind){case"ObjectType":case"InterfaceType":const n=t.field(s);return i?null==n?void 0:n.argument(i):n;case"InputObjectType":if(i)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);return t.field(s);case"EnumType":if(i)throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`);return t.value(s);default:throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid argument "${e}: it is not a syntactically valid graphQL coordinate."`)}}}}t.Schema=Z;class ee extends K{constructor(e,t){super(),this.rootKind=e,this.type=t}isDefaultRootName(){return v(this.rootKind)==this.type.name}removeInner(){te.prototype.removeRootType.call(this._parent,this)}}t.RootType=ee;class te extends V{constructor(){super(...arguments),this.kind="SchemaDefinition",this._roots=new o.MapWithCachedArrays,this.preserveEmptyDefinition=!1}roots(){return this._roots.values()}applyDirective(e,t,n=!1){var i,o;const s=super.applyDirective(e,t,n),a=this.schema(),c=a.coreFeatures;if((0,r.isCoreSpecDirectiveApplication)(s)){if(c)throw y.ERRORS.INVALID_LINK_DIRECTIVE_USAGE.err("Invalid duplicate application of @core/@link");const e=s,t=e.arguments(),n=r.FeatureUrl.parse(null!==(i=t.url)&&void 0!==i?i:t.feature),l=(0,r.extractCoreFeatureImports)(n,e),u=new Y(n,null!==(o=t.as)&&void 0!==o?o:n.name,e,l,t.for);Z.prototype.markAsCoreSchema.call(a,u),this.appliedDirectives.filter((e=>e!==s)).forEach((e=>H.prototype.maybeAddFeature.call(a.coreFeatures,e)))}else c&&H.prototype.maybeAddFeature.call(c,s);return this.onModification(),s}root(e){return this._roots.get(e)}rootType(e){var t;return null===(t=this.root(e))||void 0===t?void 0:t.type}setRoot(e,t){let n;if("string"==typeof t){this.checkUpdate();const i=this.schema().type(t);if(!i)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot set schema ${e} root to unknown type ${t}`);if("ObjectType"!=i.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`${v(e)} root type must be an Object type${"query"===e?"":" if provided"}, it cannot be set to ${t} (an ${i.kind}).`);n=new ee(e,i)}else this.checkUpdate(t),n=new ee(e,t);const i=this._roots.get(e);return i&&Re(this,i.type),this._roots.set(e,n),P.prototype.setParent.call(n,this),Ae(this,n.type),this.onModification(),n}extensions(){var e;return null!==(e=this._extensions)&&void 0!==e?e:[]}hasExtension(e){var t,n;return null!==(n=null===(t=this._extensions)||void 0===t?void 0:t.includes(e))&&void 0!==n&&n}newExtension(){return this.addExtension(new U)}addExtension(e){return this.checkUpdate(),this.hasExtension(e)||((0,o.assert)(!e.extendedElement,"Cannot add extension to this schema: extension is already added to another schema"),this._extensions?this._extensions.push(e):this._extensions=[e],U.prototype.setExtendedElement.call(e,this),this.onModification()),e}hasExtensionElements(){return!!this._extensions}hasNonExtensionElements(){return this.preserveEmptyDefinition||this.appliedDirectives.some((e=>void 0===e.ofExtension()))||this.roots().some((e=>void 0===e.ofExtension()))}removeRootType(e){this._roots.delete(e.rootKind),Re(this,e.type)}removeTypeReference(e){for(const t of this.roots())t.type==e&&this._roots.delete(t.rootKind)}toString(){return`schema[${this._roots.keys().join(", ")}]`}}t.SchemaDefinition=te;class ne extends B{constructor(){super(...arguments),this.kind="ScalarType",this.astDefinitionKind=i.Kind.SCALAR_TYPE_DEFINITION}removeTypeReference(e){(0,o.assert)(!1,`Scalar type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}hasNonExtensionInnerElements(){return!1}removeInnerElementsExtensions(){}removeInnerElements(){}removeReferenceRecursive(e){e.remove()}}t.ScalarType=ne;class ie extends K{constructor(e){super(),this.interface=e}removeInner(){re.prototype.removeInterfaceImplementation.call(this._parent,this.interface)}toString(){return`'implements ${this.interface}'`}}t.InterfaceImplementation=ie;class re extends B{constructor(){super(...arguments),this._fields=new o.MapWithCachedArrays}onAttached(){Z.prototype.runWithBuiltInModificationAllowed.call(this.schema(),(()=>{this.addField(new he(t.typenameFieldName,!0),new fe(this.schema().stringType()))}))}removeFieldInternal(e){this._fields.delete(e.name),this._cachedNonBuiltInFields=void 0}interfaceImplementations(){var e,t;return null!==(t=null===(e=this._interfaceImplementations)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}interfaceImplementation(e){return this._interfaceImplementations?this._interfaceImplementations.get("string"==typeof e?e:e.name):void 0}interfaces(){return this.interfaceImplementations().map((e=>e.interface))}implementsInterface(e){var t,n;return null!==(n=null===(t=this._interfaceImplementations)||void 0===t?void 0:t.has("string"==typeof e?e:e.name))&&void 0!==n&&n}addImplementedInterface(e){var t;let n;if(e instanceof ie)this.checkUpdate(e),n=e;else{let t;if("string"==typeof e){this.checkUpdate();const n=this.schema().type(e);if(!n)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot implement unknown type ${e}`);if("InterfaceType"!=n.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot implement non-interface type ${e} (of type ${n.kind})`);t=n}else t=e;n=new ie(t)}return(null===(t=this._interfaceImplementations)||void 0===t?void 0:t.get(n.interface.name))||(this._interfaceImplementations||(this._interfaceImplementations=new o.MapWithCachedArrays),this._interfaceImplementations.set(n.interface.name,n),Ae(this,n.interface),P.prototype.setParent.call(n,this),this.onModification(),n)}fields(){return this._cachedNonBuiltInFields||(this._cachedNonBuiltInFields=this._fields.values().filter((e=>!e.isBuiltIn))),this._cachedNonBuiltInFields}hasFields(){return this.fields().length>0}builtInFields(){return this.allFields().filter((e=>e.isBuiltIn))}allFields(){return this._fields.values()}field(e){return this._fields.get(e)}typenameField(){return this.field(t.typenameFieldName)}addField(e,t){let n;if("string"==typeof e?(this.checkUpdate(),n=new he(e)):(this.checkUpdate(e),n=e),this.field(n.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Field ${n.name} already exists on ${this}`);if(t&&!O(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid input type ${t} for field ${n.name}: object and interface field types should be output types.`);return this._fields.set(n.name,n),this._cachedNonBuiltInFields=void 0,P.prototype.setParent.call(n,this),t&&(n.type=t),this.onModification(),n}*allChildElements(){for(const e of this._fields.values())yield e,yield*e.arguments()}removeInterfaceImplementation(e){var t;null===(t=this._interfaceImplementations)||void 0===t||t.delete(e.name),Re(this,e)}removeTypeReference(e){var t;null===(t=this._interfaceImplementations)||void 0===t||t.delete(e.name)}removeInnerElements(){for(const e of this.interfaceImplementations())e.remove();for(const e of this.allFields())e.isBuiltIn?he.prototype.removeParent.call(e):e.remove()}hasNonExtensionInnerElements(){return this.interfaceImplementations().some((e=>void 0===e.ofExtension()))||this.fields().some((e=>void 0===e.ofExtension()))}removeInnerElementsExtensions(){this.interfaceImplementations().forEach((e=>e.removeOfExtension())),this.fields().forEach((e=>e.removeOfExtension()))}}class oe extends re{constructor(){super(...arguments),this.kind="ObjectType",this.astDefinitionKind=i.Kind.OBJECT_TYPE_DEFINITION}isRootType(){return this.schema().schemaDefinition.roots().some((e=>e.type==this))}isQueryRootType(){var e;return(null===(e=this.schema().schemaDefinition.root("query"))||void 0===e?void 0:e.type)===this}removeReferenceRecursive(e){switch(e.kind){case"FieldDefinition":e.removeRecursive();break;case"UnionType":0===e.membersCount()&&e.removeRecursive()}}}t.ObjectType=oe;class se extends re{constructor(){super(...arguments),this.kind="InterfaceType",this.astDefinitionKind=i.Kind.INTERFACE_TYPE_DEFINITION}allImplementations(){return this.referencers().filter((e=>"ObjectType"===e.kind||"InterfaceType"===e.kind))}possibleRuntimeTypes(){return this.allImplementations().filter((e=>"ObjectType"===e.kind))}isPossibleRuntimeType(e){const t="string"==typeof e?e:e.name;return this.possibleRuntimeTypes().some((e=>e.name==t))}removeReferenceRecursive(e){"FieldDefinition"===e.kind&&e.removeRecursive()}}t.InterfaceType=se;class ae extends K{constructor(e){super(),this.type=e}removeInner(){ce.prototype.removeMember.call(this._parent,this.type)}}t.UnionMember=ae;class ce extends B{constructor(){super(...arguments),this.kind="UnionType",this.astDefinitionKind=i.Kind.UNION_TYPE_DEFINITION,this._members=new o.MapWithCachedArrays}onAttached(){Z.prototype.runWithBuiltInModificationAllowed.call(this.schema(),(()=>{this._typenameField=new he(t.typenameFieldName,!0),P.prototype.setParent.call(this._typenameField,this),this._typenameField.type=new fe(this.schema().stringType())}))}types(){return this.members().map((e=>e.type))}members(){return this._members.values()}membersCount(){return this._members.size}hasTypeMember(e){return this._members.has("string"==typeof e?e:e.name)}addType(e){let t;if(e instanceof ae)this.checkUpdate(e),t=e;else{let n;if("string"==typeof e){this.checkUpdate();const t=this.schema().type(e);if(!t)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot add unknown type ${e} as member of union type ${this.name}`);if("ObjectType"!=t.kind)throw y.ERRORS.INVALID_GRAPHQL.err(`Cannot add non-object type ${e} (of type ${t.kind}) as member of union type ${this.name}`);n=t}else this.checkUpdate(e),n=e;t=new ae(n)}return this._members.get(t.type.name)||(this._members.set(t.type.name,t),P.prototype.setParent.call(t,this),Ae(this,t.type),this.onModification(),t)}clearTypes(){for(const e of this.types())this.removeMember(e);this.onModification()}field(e){if(e===t.typenameFieldName&&this._typenameField)return this._typenameField}typenameField(){return this._typenameField}removeMember(e){this._members.delete(e.name),Re(this,e)}removeTypeReference(e){this._members.delete(e.name)}removeInnerElements(){for(const e of this.members())e.remove()}hasNonExtensionInnerElements(){return this.members().some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){e.removeRecursive()}removeInnerElementsExtensions(){this.members().forEach((e=>e.removeOfExtension()))}}t.UnionType=ce;class le extends B{constructor(){super(...arguments),this.kind="EnumType",this.astDefinitionKind=i.Kind.ENUM_TYPE_DEFINITION,this._values=[]}get values(){return Array.from(this._values)}value(e){return this._values.find((t=>t.name===e))}addValue(e){let t;"string"==typeof e?(this.checkUpdate(),t=new ve(e)):(this.checkUpdate(e),t=e);return this.value(t.name)||(this._values.push(t),P.prototype.setParent.call(t,this),this.onModification(),t)}removeTypeReference(e){(0,o.assert)(!1,`Eum type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}removeValueInternal(e){(0,o.removeArrayElement)(e,this._values)}removeInnerElements(){const e=this.values;for(const t of e)t.remove()}hasNonExtensionInnerElements(){return this._values.some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){e.removeRecursive()}removeInnerElementsExtensions(){this._values.forEach((e=>e.removeOfExtension()))}}t.EnumType=le;class ue extends B{constructor(){super(...arguments),this.kind="InputObjectType",this.astDefinitionKind=i.Kind.INPUT_OBJECT_TYPE_DEFINITION,this._fields=new Map}fields(){return this._cachedFieldsArray||(this._cachedFieldsArray=(0,o.mapValues)(this._fields)),this._cachedFieldsArray}field(e){return this._fields.get(e)}addField(e,t){const n="string"==typeof e?new me(e):e;if(this.checkUpdate(n),this.field(n.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Field ${n.name} already exists on ${this}`);if(t&&!D(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid output type ${t} for field ${n.name}: input field types should be input types.`);return this._fields.set(n.name,n),this._cachedFieldsArray=void 0,P.prototype.setParent.call(n,this),"string"==typeof e&&t&&(n.type=t),this.onModification(),n}hasFields(){return this._fields.size>0}*allChildElements(){yield*this._fields.values()}removeTypeReference(e){(0,o.assert)(!1,`Input Object type ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}removeInnerElements(){for(const e of this.fields())e.remove()}removeFieldInternal(e){this._fields.delete(e.name),this._cachedFieldsArray=void 0}hasNonExtensionInnerElements(){return this.fields().some((e=>void 0===e.ofExtension()))}removeReferenceRecursive(e){"ArgumentDefinition"===e.kind?e.parent().removeRecursive():e.removeRecursive()}removeInnerElementsExtensions(){this.fields().forEach((e=>e.removeOfExtension()))}}t.InputObjectType=ue;class pe{constructor(e){this._type=e,(0,o.assert)(this._type,"Cannot wrap an undefined/null type")}schema(){return this.baseType().schema()}isAttached(){return this.baseType().isAttached()}get ofType(){return this._type}baseType(){return w(this._type)}}class de extends pe{constructor(e){super(e),this.kind="ListType"}toString(){return`[${this.ofType}]`}}t.ListType=de;class fe extends pe{constructor(e){super(e),this.kind="NonNullType"}toString(){return`${this.ofType}!`}}t.NonNullType=fe;class he extends Q{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.kind="FieldDefinition"}isElementBuiltIn(){return this.isBuiltIn}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}hasArguments(){return!!this._args&&this._args.size>0}arguments(){var e,t;return null!==(t=null===(e=this._args)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}argument(e){var t;return null===(t=this._args)||void 0===t?void 0:t.get(e)}addArgument(e,t,n){let i;"string"==typeof e?(this.checkUpdate(),i=new ye(e),i.defaultValue=n):(this.checkUpdate(e),i=e);const r=this.argument(i.name);if(r){if(t&&r.type&&!(0,l.sameType)(t,r.type))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name} with a different type (${r.type})`);if(n&&(!r.defaultValue||!(0,s.valueEquals)(n,r.defaultValue)))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name} with a different default value (${(0,s.valueToString)(r.defaultValue)})`);return r}if(t&&!D(t))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid output type ${t} for argument ${i.name} of ${this}: arguments should be input types.`);return this._args||(this._args=new o.MapWithCachedArrays),this._args.set(i.name,i),P.prototype.setParent.call(i,this),"string"==typeof e&&(i.type=t),this.onModification(),i}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`)),this._extension=e,this.onModification()}isIntrospectionField(){return(0,u.isIntrospectionName)(this.name)}isSchemaIntrospectionField(){return u.introspectionFieldNames.includes(this.name)}removeArgumentInternal(e){this._args&&this._args.delete(e)}removeParent(){this._parent=void 0}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.removeAppliedDirectives();for(const e of this.arguments())e.remove();return re.prototype.removeFieldInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]}removeRecursive(){const e=this._parent;this.remove(),e&&!S(e)&&0===e.fields().length&&e.removeRecursive()}toString(){const e=this.hasArguments()?"("+this.arguments().map((e=>e.toString())).join(", ")+")":"";return`${this.name}${e}: ${this.type}`}}t.FieldDefinition=he;class me extends Q{constructor(){super(...arguments),this.kind="InputFieldDefinition"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}isRequired(){return g(this.type)&&void 0===this.defaultValue}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`)),this._extension=e,this.onModification()}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.defaultValue=void 0,this.removeAppliedDirectives(),ue.prototype.removeFieldInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]):[]}removeRecursive(){const e=this._parent;this.remove(),e&&0===e.fields().length&&e.removeRecursive()}toString(){const e=void 0===this.defaultValue?"":` = ${(0,s.valueToString)(this.defaultValue,this.type)}`;return`${this.name}: ${this.type}${e}`}}t.InputFieldDefinition=me;class ye extends Q{constructor(e){super(e),this.kind="ArgumentDefinition"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}(${this.name}:)`}isRequired(){return g(this.type)&&void 0===this.defaultValue}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.type=void 0,this.defaultValue=void 0,this.removeAppliedDirectives(),this._parent instanceof he?he.prototype.removeArgumentInternal.call(this._parent,this.name):Ee.prototype.removeArgumentInternal.call(this._parent,this.name),this._parent=void 0,[]):[]}toString(){const e=void 0===this.defaultValue?"":` = ${(0,s.valueToString)(this.defaultValue,this.type)}`;return`${this.name}: ${this.type}${e}`}}t.ArgumentDefinition=ye;class ve extends G{constructor(){super(...arguments),this.kind="EnumValue"}get coordinate(){const e=this._parent;return`${null==e?"<detached>":e.coordinate}.${this.name}`}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){var t;this.checkUpdate(),(0,o.assert)(!e||(null===(t=this._parent)||void 0===t?void 0:t.hasExtension(e)),(()=>`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of enum value parent type ${this.parent}`)),this._extension=e,this.onModification()}isDeprecated(){return this.hasAppliedDirective("deprecated")}remove(){return this._parent?(this.checkRemoval(),this.onModification(),this.sourceAST=void 0,this.removeAppliedDirectives(),le.prototype.removeValueInternal.call(this._parent,this),this._parent=void 0,this._extension=void 0,[]):[]}removeTypeReference(e){(0,o.assert)(!1,`Enum value ${this} can't reference other types; shouldn't be asked to remove reference to ${e}`)}toString(){return`${this.name}`}}t.EnumValue=ve;class Ee extends G{constructor(e,t=!1){super(e),this.isBuiltIn=t,this.kind="DirectiveDefinition",this.repeatable=!1,this._locations=[]}get coordinate(){return`@${this.name}`}arguments(){var e,t;return null!==(t=null===(e=this._args)||void 0===e?void 0:e.values())&&void 0!==t?t:[]}argument(e){var t;return null===(t=this._args)||void 0===t?void 0:t.get(e)}addArgument(e,t,n){let i;if("string"==typeof e?(this.checkUpdate(),i=new ye(e),i.defaultValue=n):(this.checkUpdate(e),i=e),this.argument(i.name))throw y.ERRORS.INVALID_GRAPHQL.err(`Argument ${i.name} already exists on field ${this.name}`);return this._args||(this._args=new o.MapWithCachedArrays),this._args.set(i.name,i),P.prototype.setParent.call(i,this),"string"==typeof e&&(i.type=t),this.onModification(),i}removeArgumentInternal(e){var t;null===(t=this._args)||void 0===t||t.delete(e)}get locations(){return this._locations}addLocations(...e){let t=!1;for(const n of e)this._locations.includes(n)||(this._locations.push(n),t=!0);return t&&this.onModification(),this}addAllLocations(){return this.addLocations(...Object.values(i.DirectiveLocation))}addAllTypeLocations(){return this.addLocations(i.DirectiveLocation.SCALAR,i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.INPUT_OBJECT)}removeLocations(...e){let t=!1;for(const n of e)t||(t=(0,o.removeArrayElement)(n,this._locations));return t&&this.onModification(),this}hasExecutableLocations(){return this.locations.some((e=>x(e)))}hasTypeSystemLocations(){return this.locations.some((e=>$(e)))}applications(){var e;return null!==(e=this._referencers)&&void 0!==e?e:[]}addReferencer(e){(0,o.assert)(e,"Referencer should exists"),this._referencers?this._referencers.includes(e)||this._referencers.push(e):this._referencers=[e]}removeReferencer(e){this._referencers&&(0,o.removeArrayElement)(e,this._referencers)}removeTypeReference(e){(0,o.assert)(!1,`Directive definition ${this} can't reference other types (it's arguments can); shouldn't be asked to remove reference to ${e}`)}remove(){var e;if(!this._parent)return[];this.checkRemoval(),this.onModification(),this.sourceAST=void 0,(0,o.assert)(!this._appliedDirectives||0===this._appliedDirectives.length,"Directive definition should not have directive applied to it");for(const e of this.arguments())e.remove();const t=null!==(e=this._referencers)&&void 0!==e?e:[];return this._referencers=void 0,Z.prototype.removeDirectiveInternal.call(this._parent,this),this._parent=void 0,t}removeRecursive(){this.remove().forEach((e=>e.remove()))}toAST(){return(0,i.parse)((0,c.printDirectiveDefinition)(this)).definitions[0]}toString(){return`@${this.name}`}}t.DirectiveDefinition=Ee;class Te extends P{constructor(e,t){super(),this.name=e,this._args=t}schema(){return this.parent.schema()}get definition(){if(this.isAttached())return this.schema().directive(this.name)}arguments(e=!1){if(!e)return this._args;const t=this.definition;(0,o.assert)(t,(()=>`Cannot include default values for arguments: cannot find directive definition for ${this.name}`));const n=Object.create(null);for(const e of t.arguments()){const t=(0,s.withDefaultValues)(this._args[e.name],e);void 0!==t&&(n[e.name]=t)}return n}onModification(){this.isAttachedToSchemaElement()&&Z.prototype.onModification.call(this.schema())}isAttachedToSchemaElement(){return this.isAttached()}setArguments(e){this._args=e,this.onModification()}argumentType(e){var t,n;return null===(n=null===(t=this.definition)||void 0===t?void 0:t.argument(e))||void 0===n?void 0:n.type}matchArguments(e){const t=Object.entries(this._args);if(t.length!==Object.keys(e).length)return!1;for(const[n,i]of t){if(!(n in e))return!1;const t=e[n];if(!(0,s.valueEquals)(t,i))return!1}return!0}ofExtension(){return this._extension}removeOfExtension(){this._extension=void 0}setOfExtension(e){if(this.checkUpdate(),e){const t=this.parent;(0,o.assert)(t instanceof te||t instanceof B,"Can only mark directive parts of extensions when directly apply to type or schema definition."),(0,o.assert)(t.hasExtension(e),(()=>`Cannot mark directive ${this.name} as part of the provided extension: it is not an extension of parent ${t}`))}this._extension=e,this.onModification()}argumentsToAST(){const e=Object.entries(this._args);if(0===e.length)return;const t=this.definition;return(0,o.assert)(t,(()=>`Cannot convert arguments of detached directive ${this}`)),e.map((([e,n])=>({kind:i.Kind.ARGUMENT,name:{kind:i.Kind.NAME,value:e},value:(0,s.valueToAST)(n,t.argument(e).type)})))}remove(){if(!this._parent)return!1;this.onModification();const e=this.schema().coreFeatures;if(e&&this.name===e.coreItself.nameInSchema){const t=r.FeatureUrl.parse(this._args[e.coreDefinition.urlArgName()]);if(t.identity===e.coreItself.url.identity){Z.prototype.unmarkAsCoreSchema.call(this.schema());for(const t of this.schema().schemaDefinition.appliedDirectivesOf(e.coreItself.nameInSchema))t.removeInternal();return!0}H.prototype.removeFeature.call(e,t.identity)}return this.removeInternal()}removeInternal(){if(!this._parent)return!1;const e=this.definition;e&&this.isAttachedToSchemaElement()&&Ee.prototype.removeReferencer.call(e,this);const t=this._parent.appliedDirectives,n=(0,o.removeArrayElement)(this,t);return(0,o.assert)(n,(()=>`Directive ${this} lists ${this._parent} as parent, but that parent doesn't list it as applied directive`)),this._parent=void 0,this._extension=void 0,!0}toString(){const e=Object.entries(this._args).filter((([e,t])=>void 0!==t)),t=0==e.length?"":"("+e.map((([e,t])=>`${e}: ${(0,s.valueToString)(t,this.argumentType(e))}`)).join(", ")+")";return`@${this.name}${t}`}}function ge(e,t,n=["defer"]){return e.name===t.name&&!n.includes(e.name)&&!n.includes(t.name)&&(0,s.argumentsEquals)(e.arguments(),t.arguments())}t.Directive=Te,t.sameDirectiveApplication=ge,t.sameDirectiveApplications=function(e,t,n=["defer"]){if(e.length!==t.length)return!1;for(const i of e)if(!t.some((e=>ge(i,e,n))))return!1;return!0},t.isDirectiveApplicationsSubset=function(e,t){if(t.length>e.length)return!1;for(const n of t)if(!e.some((e=>ge(n,e))))return!1;return!0},t.directiveApplicationsSubstraction=function(e,t){return e.filter((e=>!t.some((t=>ge(e,t)))))};class Ie{constructor(e){this.name=e}toVariableNode(){return{kind:i.Kind.VARIABLE,name:{kind:i.Kind.NAME,value:this.name}}}toString(){return"$"+this.name}}function Ne(e,t){if(0==e.length)return t;if(0==t.length)return e;const n=e.concat();for(const i of t)be(e,i)||n.push(i);return n}function be(e,t){return e.some((e=>e.name==t.name))}function _e(e){let t=[];for(const n of Object.values(e))t=Ne(t,(0,s.variablesInValue)(n));return t}t.Variable=Ie,t.mergeVariables=Ne,t.containsVariable=be,t.isVariable=function(e){return e instanceof Ie},t.variablesInArguments=_e;class Se extends M{constructor(e,t,n,i){super(e),this.variable=t,this.type=n,this.defaultValue=i}toVariableDefinitionNode(){const e=(0,s.valueToAST)(this.defaultValue,this.type);return{kind:i.Kind.VARIABLE_DEFINITION,variable:this.variable.toVariableNode(),type:C(this.type),defaultValue:void 0!==e?(0,s.valueNodeToConstValueNode)(e):void 0,directives:this.appliedDirectivesToDirectiveNodes()}}toString(){let e=this.variable+": "+this.type;return this.defaultValue&&(e=e+" = "+(0,s.valueToString)(this.defaultValue,this.type)),e+this.appliedDirectivesToString()}}t.VariableDefinition=Se;class Oe{constructor(){this._definitions=new o.MapWithCachedArrays}add(e){return!this._definitions.has(e.variable.name)&&(this._definitions.set(e.variable.name,e),!0)}addAll(e){for(const t of e._definitions.values())this.add(t)}definition(e){const t="string"==typeof e?e:e.name;return this._definitions.get(t)}isEmpty(){return 0===this._definitions.size}definitions(){return this._definitions.values()}filter(e){if(0===e.length)return new Oe;const t=new Oe;for(const n of e){const e=this.definition(n);if(!e)throw new Error(`Cannot find variable ${n} in definitions ${this}`);t.add(e)}return t}toVariableDefinitionNodes(){if(0!==this._definitions.size)return this.definitions().map((e=>e.toVariableDefinitionNode()))}toString(){return"("+this.definitions().join(", ")+")"}}function De(e,t){const n=new Ie(t.variable.name.value),i=j(e,t.type);if(!D(i))throw y.ERRORS.INVALID_GRAPHQL.err(`Invalid type "${i}" for variable $${n}: not an input type`,{nodes:t.type});return new Se(e,n,i,t.defaultValue?(0,s.valueFromAST)(t.defaultValue,i):void 0)}function Ae(e,t){switch(t.kind){case"ListType":case"NonNullType":Ae(e,t.baseType());break;default:B.prototype.addReferencer.call(t,e)}}function Re(e,t){switch(t.kind){case"ListType":case"NonNullType":Re(e,t.baseType());break;default:B.prototype.removeReferencer.call(t,e)}}function we(e,t){switch(e){case"ScalarType":return new ne(t);case"ObjectType":return new oe(t);case"InterfaceType":return new se(t);case"UnionType":return new ce(t);case"EnumType":return new le(t);case"InputObjectType":return new ue(t);default:(0,o.assert)(!1,`Unhandled kind ${e} for type ${t}`)}}function*Le(e,t){var n;for(const i of e.builtInTypes())i.isIntrospectionType()||(null===(n=t.type(i.name))||void 0===n?void 0:n.isBuiltIn)||(yield i);yield*e.types()}function*Fe(e,t){var n;for(const i of e.builtInDirectives())(null===(n=t.directive(i.name))||void 0===n?void 0:n.isBuiltIn)||(yield i);yield*e.directives()}function xe(e,t){const n=new Map;for(const i of e.extensions()){const e=new U;t.addExtension(e),n.set(i,e)}return n}function ke(e,t,n){const i=t.ofExtension();i&&n.setOfExtension(e.get(i))}function $e(e,t){t.preserveEmptyDefinition=e.preserveEmptyDefinition;const n=xe(e,t);for(const i of e.appliedDirectives)ke(n,i,je(i,t));switch(t.description=e.description,t.sourceAST=e.sourceAST,e.kind){case"ObjectType":case"InterfaceType":const i=t;for(const t of e.fields()){const e=i.addField(new he(t.name));ke(n,t,e),Me(t,e)}for(const t of e.interfaceImplementations())ke(n,t,i.addImplementedInterface(t.interface.name));break;case"UnionType":const r=t;for(const t of e.members())ke(n,t,r.addType(t.type.name));break;case"EnumType":const o=t;for(const t of e.values){const e=o.addValue(t.name);e.description=t.description,ke(n,t,e),Ce(t,e)}break;case"InputObjectType":const s=t;for(const t of e.fields()){const e=s.addField(new me(t.name));ke(n,t,e),Pe(t,e)}}}function Ce(e,t){e.appliedDirectives.forEach((e=>je(e,t)))}function je(e,t){const n=t.applyDirective(e.name,{...e.arguments()});return n.sourceAST=e.sourceAST,n}function Me(e,t){const n=Ue(e.type,t.schema());t.type=n;for(const n of e.arguments()){const e=Ue(n.type,t.schema());Ve(n,t.addArgument(n.name,e))}Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Pe(e,t){const n=Ue(e.type,t.schema());t.type=n,t.defaultValue=e.defaultValue,Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Ue(e,t){if(e)switch(e.kind){case"ListType":return new de(Ue(e.ofType,t));case"NonNullType":return new fe(Ue(e.ofType,t));default:return t.type(e.name)}}function Ve(e,t,n=!0){const i=Ue(e.type,t.schema());t.type=i,t.defaultValue=e.defaultValue,n&&Ce(e,t),t.description=e.description,t.sourceAST=e.sourceAST}function Ge(e,t,n=!0,i){let r=e.locations;if(i&&(r=r.filter((e=>i(e)))),0!==r.length){for(const i of e.arguments()){const e=Ue(i.type,t.schema());Ve(i,t.addArgument(i.name,e),n)}t.repeatable=e.repeatable,t.addLocations(...r),t.sourceAST=e.sourceAST,t.description=e.description}}t.VariableDefinitions=Oe,t.variableDefinitionsFromAST=function(e,t){const n=new Oe;for(const i of t)if(!n.add(De(e,i))){const e=i.variable.name.value;throw y.ERRORS.INVALID_GRAPHQL.err(`Duplicate definition for variable ${e}`,{nodes:t.filter((t=>t.variable.name.value===e))})}return n},t.variableDefinitionFromAST=De,t.newNamedType=we,t.copyDirectiveDefinitionToSchema=function({definition:e,schema:t,copyDirectiveApplicationsInArguments:n=!0,locationFilter:i}){Ge(e,t.addDirectiveDefinition(e.name),n,i)}},3208:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createEnumTypeSpecification=t.createUnionTypeSpecification=t.createObjectTypeSpecification=t.createScalarTypeSpecification=t.createDirectiveSpecification=void 0;const i=n(4177),r=n(8116),o=n(3421),s=n(5811),a=n(9724);function c(e,t){return e===t.kind?[]:[r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for type ${t.name}: ${t.name} should be a ${e} but is defined as a ${t.kind}`,{nodes:t.sourceAST})]}function l(e,t,n,a){var c;const l=null!==(c=e.args)&&void 0!==c?c:[],p=[];for(const{name:e,type:c,defaultValue:d}of l){const l=t.argument(e);if(!l){(0,i.isNonNullType)(c)&&void 0===d&&p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: missing required argument "${e}"`,{nodes:a}));continue}let f=l.type;(0,i.isNonNullType)(f)&&!(0,i.isNonNullType)(c)&&(f=f.ofType),(0,s.sameType)(c,f)||u(c,f)?(0,i.isNonNullType)(l.type)||(0,o.valueEquals)(d,l.defaultValue)||p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: argument "${e}" should have default value ${(0,o.valueToString)(d)} but found default value ${(0,o.valueToString)(l.defaultValue)}`,{nodes:l.sourceAST})):p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: argument "${e}" should have type "${c}" but found type "${l.type}"`,{nodes:l.sourceAST}))}for(const e of t.arguments())l.some((t=>t.name===e.name))||p.push(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for ${n}: unknown/unsupported argument "${e.name}"`,{nodes:e.sourceAST}));return p}function u(e,t){return(0,i.isListType)(e)?(0,i.isListType)(t)&&u(e.ofType,t.ofType):(0,i.isNonNullType)(e)?(0,i.isNonNullType)(t)&&u(e.ofType,t.ofType):(0,i.isCustomScalarType)(e)&&!(0,i.isCustomScalarType)(t)}t.createDirectiveSpecification=function({name:e,locations:t,repeatable:n=!1,argumentFct:o}){return{name:e,checkOrAdd:(s,a,c)=>{const u=null!=a?a:e,{args:p,errors:d}=o?o(s,u):{args:[],errors:[]};if(d.length>0)return d;const f=s.directive(u);if(f)return function(e,t){const n=`"@${e.name}"`;let i=l(e,t,`directive ${n}`);return!e.repeatable&&t.repeatable&&(i=i.concat(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for directive ${n}: ${n} should${e.repeatable?"":" not"} be repeatable`,{nodes:t.sourceAST}))),t.locations.every((t=>e.locations.includes(t)))||(i=i.concat(r.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Invalid definition for directive ${n}: ${n} should have locations ${e.locations.join(", ")}, but found (non-subset) ${t.locations.join(", ")}`,{nodes:t.sourceAST}))),i}({name:u,locations:t,repeatable:n,args:p},f);{const e=s.addDirectiveDefinition(new i.DirectiveDefinition(u,c));e.repeatable=n,e.addLocations(...t);for(const{name:t,type:n,defaultValue:i}of p)e.addArgument(t,n,i);return[]}}}},t.createScalarTypeSpecification=function({name:e}){return{name:e,checkOrAdd:(t,n,r)=>{const o=null!=n?n:e,s=t.type(o);return s?c("ScalarType",s):(t.addType(new i.ScalarType(o,r)),[])}}},t.createObjectTypeSpecification=function({name:e,fieldsFct:t}){return{name:e,checkOrAdd:(n,o,u)=>{const p=null!=o?o:e,d=t(n),f=n.type(p);if(f){let e=c("ObjectType",f);if(e.length>0)return e;(0,a.assert)((0,i.isObjectType)(f),"Should be an object type");for(const{name:t,type:n,args:o}of d){const a=f.field(t);if(!a){e=e.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${t}: missing field ${t}`,{nodes:f.sourceAST}));continue}let c=a.type;!(0,i.isNonNullType)(n)&&(0,i.isNonNullType)(c)&&(c=c.ofType),(0,s.sameType)(n,c)||(e=e.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for field ${t} of type ${t}: should have type ${n} but found type ${a.type}`,{nodes:a.sourceAST}))),e=e.concat(l({name:t,args:o},a,`field "${a.coordinate}"`))}return e}{const e=n.addType(new i.ObjectType(p,u));for(const{name:t,type:n,args:i}of d){const r=e.addField(t,n);for(const{name:e,type:t,defaultValue:n}of null!=i?i:[])r.addArgument(e,t,n)}return[]}}}},t.createUnionTypeSpecification=function({name:e,membersFct:t}){return{name:e,checkOrAdd:(n,o,s)=>{const l=null!=o?o:e,u=n.type(l),p=t(n).sort(((e,t)=>e.localeCompare(t)));if(0===p.length)return u?[r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${e}: expected the union type to not exist/have no members but it is defined.`,{nodes:u.sourceAST})]:[];if(u){let t=c("UnionType",u);if(t.length>0)return t;(0,a.assert)((0,i.isUnionType)(u),"Should be an union type");const n=u.members().map((e=>e.type.name)).sort(((e,t)=>e.localeCompare(t)));return(0,a.arrayEquals)(p,n)||(t=t.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition of type ${e}: expected members [${p}] but found [${n}].`,{nodes:u.sourceAST}))),t}{const e=n.addType(new i.UnionType(l,s));for(const t of p)e.addType(t);return[]}}}},t.createEnumTypeSpecification=function({name:e,values:t}){return{name:e,checkOrAdd:(n,o,s)=>{const l=null!=o?o:e,u=n.type(l),p=t.map((e=>e.name)).sort(((e,t)=>e.localeCompare(t)));if(u){let t=c("EnumType",u);if(t.length>0)return t;(0,a.assert)((0,i.isEnumType)(u),"Should be an enum type");const n=u.values.map((e=>e.name)).sort(((e,t)=>e.localeCompare(t)));return(0,a.arrayEquals)(p,n)||(t=t.concat(r.ERRORS.TYPE_DEFINITION_INVALID.err(`Invalid definition for type "${e}": expected values [${p.join(", ")}] but found [${n.join(", ")}].`,{nodes:u.sourceAST}))),t}{const e=n.addType(new i.EnumType(l,s));for(const{name:n,description:i}of t)e.addValue(n).description=i;return[]}}}}},8116:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.REMOVED_ERRORS=t.ERRORS=t.ERROR_CATEGORIES=t.withModifiedErrorNodes=t.withModifiedErrorMessage=t.errorCodeDef=t.errorCode=t.printErrors=t.printGraphQLErrorsOrRethrow=t.errorCauses=t.aggregateError=t.extractGraphQLErrorOptions=void 0;const i=n(8929),r=n(9724),o="0.x",s=(e,t,n=l)=>({code:e,description:t,metadata:n,err:(t,n)=>new i.GraphQLError(t,{...n,extensions:{...null==n?void 0:n.extensions,code:e}})});t.extractGraphQLErrorOptions=function(e){return{nodes:e.nodes,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions}};class a extends i.GraphQLError{constructor(e,t,n,i){super(t+". Caused by:\n"+n.map((e=>e.toString())).join("\n\n"),{...i,extensions:{code:e}}),this.causes=n}toString(){let e=`[${this.extensions.code}] ${super.toString()}`;e+="\ncaused by:";for(const t of this.causes)e+="\n\n  - ",e+=t.toString().split("\n").join("\n    ");return e}}function c(e){return e instanceof a?e.causes:e instanceof i.GraphQLError?[e]:void 0}t.aggregateError=function(e,t,n){return new a(e,t,n)},t.errorCauses=c,t.printGraphQLErrorsOrRethrow=function(e){const t=c(e);if(!t)throw e;return t.map((e=>e.toString())).join("\n\n")},t.printErrors=function(e){return e.map((e=>e.toString())).join("\n\n")};const l={addedIn:"2.0.0"},u=(e,t,n=l)=>({createCode:i=>s(e(i),t(i),n),get:t=>{const n=je[e(t)];return(0,r.assert)(n,`Unexpected element: ${t}`),n}}),p=(e,t,n=l)=>u((t=>`${t.toLocaleUpperCase()}_${e}`),t,n);function d(e){if(e.extensions&&"code"in e.extensions)return e.extensions.code}t.errorCode=d,t.errorCodeDef=function(e){const t="string"==typeof e?e:d(e);return t?je[t]:void 0},t.withModifiedErrorMessage=function(e,t){return new i.GraphQLError(t,{nodes:e.nodes,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions})},t.withModifiedErrorNodes=function(e,t){return new i.GraphQLError(e.message,{nodes:t,source:e.source,positions:e.positions,path:e.path,originalError:e.originalError,extensions:e.extensions})};const f=s("INVALID_GRAPHQL","A schema is invalid GraphQL: it violates one of the rule of the specification."),h=s("DIRECTIVE_DEFINITION_INVALID","A built-in or federation directive has an invalid definition in the schema.",{...l,replaces:["TAG_DEFINITION_INVALID"]}),m=s("TYPE_DEFINITION_INVALID","A built-in or federation type has an invalid definition in the schema."),y=s("UNSUPPORTED_LINKED_FEATURE","Indicates that a feature used in a @link is either unsupported or is used with unsupported options."),v=s("UNKNOWN_FEDERATION_LINK_VERSION","The version of federation in a @link directive on the schema is unknown."),E=s("UNKNOWN_LINK_VERSION","The version of @link set on the schema is unknown.",{addedIn:"2.1.0"}),T=p("FIELDS_HAS_ARGS",(e=>`The \`fields\` argument of a \`@${e}\` directive includes a field defined with arguments (which is not currently supported).`)),g=T.createCode("key"),I=T.createCode("provides"),N=p("FIELDS_MISSING_EXTERNAL",(e=>`The \`fields\` argument of a \`@${e}\` directive includes a field that is not marked as \`@external\`.`),{addedIn:o}),b=N.createCode("provides"),_=N.createCode("requires"),S=p("UNSUPPORTED_ON_INTERFACE",(e=>`A \`@${e}\` directive is used on an interface, which is not (yet) supported.`)),O=S.createCode("key"),D=S.createCode("provides"),A=S.createCode("requires"),R=p("DIRECTIVE_IN_FIELDS_ARG",(e=>`The \`fields\` argument of a \`@${e}\` directive includes some directive applications. This is not supported`),{addedIn:"2.1.0"}),w=R.createCode("key"),L=R.createCode("provides"),F=R.createCode("requires"),x=s("EXTERNAL_UNUSED","An `@external` field is not being used by any instance of `@key`, `@requires`, `@provides` or to satisfy an interface implementation.",{addedIn:o}),k=s("TYPE_WITH_ONLY_UNUSED_EXTERNAL",`A federation 1 schema has a composite type comprised only of unused external fields. Note that this error can _only_ be raised for federation 1 schema as federation 2 schema do not allow unused external fields (and errors with code ${x.code} will be raised in that case). But when federation 1 schema are automatically migrated to federation 2 ones, unused external fields are automatically removed, and in rare case this can leave a type empty. If that happens, an error with this code will be raised`),$=s("PROVIDES_ON_NON_OBJECT_FIELD","A `@provides` directive is used to mark a field whose base type is not an object type."),C=p("INVALID_FIELDS_TYPE",(e=>`The value passed to the \`fields\` argument of a \`@${e}\` directive is not a string.`)),j=C.createCode("key"),M=C.createCode("provides"),P=C.createCode("requires"),U=p("INVALID_FIELDS",(e=>`The \`fields\` argument of a \`@${e}\` directive is invalid (it has invalid syntax, includes unknown fields, ...).`)),V=U.createCode("key"),G=U.createCode("provides"),B=U.createCode("requires"),Q=s("KEY_FIELDS_SELECT_INVALID_TYPE","The `fields` argument of `@key` directive includes a field whose type is a list, interface, or union type. Fields of these types cannot be part of a `@key`",{addedIn:o}),K=u((e=>`ROOT_${e.toLocaleUpperCase()}_USED`),(e=>`A subgraph's schema defines a type with the name \`${e}\`, while also specifying a _different_ type name as the root query object. This is not allowed.`),{addedIn:o}),q=K.createCode("query"),Y=K.createCode("mutation"),H=K.createCode("subscription"),X=s("INVALID_SUBGRAPH_NAME",'A subgraph name is invalid (subgraph names cannot be a single underscore ("_")).'),z=s("NO_QUERIES","None of the composed subgraphs expose any query."),J=s("INTERFACE_FIELD_NO_IMPLEM","After subgraph merging, an implementation is missing a field of one of the interface it implements (which can happen for valid subgraphs)."),W=s("TYPE_KIND_MISMATCH","A type has the same name in different subgraphs, but a different kind. For instance, one definition is an object type but another is an interface.",{...l,replaces:["VALUE_TYPE_KIND_MISMATCH","EXTENSION_OF_WRONG_KIND","ENUM_MISMATCH_TYPE"]}),Z=s("EXTERNAL_TYPE_MISMATCH","An `@external` field has a type that is incompatible with the declaration(s) of that field in other subgraphs.",{addedIn:o}),ee=s("EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE","The @external directive collides with other directives in some situations.",{addedIn:"2.1.0"}),te=s("EXTERNAL_ARGUMENT_MISSING","An `@external` field is missing some arguments present in the declaration(s) of that field in other subgraphs."),ne=s("EXTERNAL_ARGUMENT_TYPE_MISMATCH","An `@external` field declares an argument with a type that is incompatible with the corresponding argument in the declaration(s) of that field in other subgraphs."),ie=s("EXTERNAL_ARGUMENT_DEFAULT_MISMATCH","An `@external` field declares an argument with a default that is incompatible with the corresponding argument in the declaration(s) of that field in other subgraphs."),re=s("EXTERNAL_ON_INTERFACE",'The field of an interface type is marked with `@external`: as external is about marking field not resolved by the subgraph and as interface field are not resolved (only implementations of those fields are), an "external" interface field is nonsensical'),oe=s("MERGED_DIRECTIVE_APPLICATION_ON_EXTERNAL","In a subgraph, a field is both marked @external and has a merged directive applied to it"),se=s("FIELD_TYPE_MISMATCH","A field has a type that is incompatible with other declarations of that field in other subgraphs.",{...l,replaces:["VALUE_TYPE_FIELD_TYPE_MISMATCH"]}),ae=s("FIELD_ARGUMENT_TYPE_MISMATCH","An argument (of a field/directive) has a type that is incompatible with that of other declarations of that same argument in other subgraphs.",{...l,replaces:["VALUE_TYPE_INPUT_VALUE_MISMATCH"]}),ce=s("INPUT_FIELD_DEFAULT_MISMATCH","An input field has a default value that is incompatible with other declarations of that field in other subgraphs."),le=s("FIELD_ARGUMENT_DEFAULT_MISMATCH","An argument (of a field/directive) has a default value that is incompatible with that of other declarations of that same argument in other subgraphs."),ue=s("EXTENSION_WITH_NO_BASE","A subgraph is attempting to `extend` a type that is not originally defined in any known subgraph.",{addedIn:o}),pe=s("EXTERNAL_MISSING_ON_BASE","A field is marked as `@external` in a subgraph but with no non-external declaration in any other subgraph.",{addedIn:o}),de=s("INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH","For an interface field, some of its concrete implementations have @external or @requires and there is difference in those implementations return type (which is currently not supported; see https://github.com/apollographql/federation/issues/1257)"),fe=s("INVALID_FIELD_SHARING","A field that is non-shareable in at least one subgraph is resolved by multiple subgraphs."),he=s("INVALID_LINK_DIRECTIVE_USAGE","An application of the @link directive is invalid/does not respect the specification."),me=s("INVALID_LINK_IDENTIFIER","A url/version for a @link feature is invalid/does not respect the specification.",{addedIn:"2.1.0"}),ye=s("LINK_IMPORT_NAME_MISMATCH","The import name for a merged directive (as declared by the relevant `@link(import:)` argument) is inconsistent between subgraphs."),ve=s("REFERENCED_INACCESSIBLE","An element is marked as @inaccessible but is referenced by an element visible in the API schema."),Ee=s("DEFAULT_VALUE_USES_INACCESSIBLE","An element is marked as @inaccessible but is used in the default value of an element visible in the API schema."),Te=s("QUERY_ROOT_TYPE_INACCESSIBLE","An element is marked as @inaccessible but is the query root type, which must be visible in the API schema."),ge=s("REQUIRED_INACCESSIBLE","An element is marked as @inaccessible but is required by an element visible in the API schema."),Ie=s("IMPLEMENTED_BY_INACCESSIBLE","An element is marked as @inaccessible but implements an element visible in the API schema."),Ne=s("DISALLOWED_INACCESSIBLE","An element is marked as @inaccessible that is not allowed to be @inaccessible."),be=s("ONLY_INACCESSIBLE_CHILDREN","A type visible in the API schema has only @inaccessible children."),_e=s("REQUIRED_INPUT_FIELD_MISSING_IN_SOME_SUBGRAPH","A field of an input object type is mandatory in some subgraphs, but the field is not defined in all the subgraphs that define the input object type."),Se=s("REQUIRED_ARGUMENT_MISSING_IN_SOME_SUBGRAPH","An argument of a field or directive definition is mandatory in some subgraphs, but the argument is not defined in all the subgraphs that define the field or directive definition."),Oe=s("EMPTY_MERGED_INPUT_TYPE","An input object type has no field common to all the subgraphs that define the type. Merging that type would result in an invalid empty input object type."),De=s("ENUM_VALUE_MISMATCH","An enum type that is used as both an input and output type has a value that is not defined in all the subgraphs that define the enum type."),Ae=s("EMPTY_MERGED_ENUM_TYPE","An enum type has no value common to all the subgraphs that define the type. Merging that type would result in an invalid empty enum type."),Re=s("SATISFIABILITY_ERROR","Subgraphs can be merged, but the resulting supergraph API would have queries that cannot be satisfied by those subgraphs."),we=s("OVERRIDE_FROM_SELF_ERROR",'Field with `@override` directive has "from" location that references its own subgraph.'),Le=s("OVERRIDE_SOURCE_HAS_OVERRIDE","Field which is overridden to another subgraph is also marked @override."),Fe=s("OVERRIDE_COLLISION_WITH_ANOTHER_DIRECTIVE","The @override directive cannot be used on external fields, nor to override fields with either @external, @provides, or @requires."),xe=s("UNSUPPORTED_FEATURE","Indicates an error due to feature currently unsupported by federation.",{addedIn:"2.1.0"}),ke=s("INVALID_FEDERATION_SUPERGRAPH","Indicates that a schema provided for an Apollo Federation supergraph is not a valid supergraph schema.",{addedIn:"2.1.0"}),$e=s("DOWNSTREAM_SERVICE_ERROR","Indicates an error in a subgraph service query during query execution in a federated service.",{addedIn:o}),Ce=s("DIRECTIVE_COMPOSITION_ERROR","Error when composing custom directives.",{addedIn:"2.1.0"});t.ERROR_CATEGORIES={DIRECTIVE_FIELDS_MISSING_EXTERNAL:N,DIRECTIVE_UNSUPPORTED_ON_INTERFACE:S,DIRECTIVE_INVALID_FIELDS_TYPE:C,DIRECTIVE_INVALID_FIELDS:U,FIELDS_HAS_ARGS:T,ROOT_TYPE_USED:K,DIRECTIVE_IN_FIELDS_ARG:R},t.ERRORS={INVALID_GRAPHQL:f,DIRECTIVE_DEFINITION_INVALID:h,TYPE_DEFINITION_INVALID:m,UNSUPPORTED_LINKED_FEATURE:y,UNKNOWN_FEDERATION_LINK_VERSION:v,UNKNOWN_LINK_VERSION:E,KEY_FIELDS_HAS_ARGS:g,PROVIDES_FIELDS_HAS_ARGS:I,PROVIDES_MISSING_EXTERNAL:b,REQUIRES_MISSING_EXTERNAL:_,KEY_UNSUPPORTED_ON_INTERFACE:O,PROVIDES_UNSUPPORTED_ON_INTERFACE:D,REQUIRES_UNSUPPORTED_ON_INTERFACE:A,EXTERNAL_UNUSED:x,EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE:ee,TYPE_WITH_ONLY_UNUSED_EXTERNAL:k,PROVIDES_ON_NON_OBJECT_FIELD:$,KEY_INVALID_FIELDS_TYPE:j,PROVIDES_INVALID_FIELDS_TYPE:M,REQUIRES_INVALID_FIELDS_TYPE:P,KEY_INVALID_FIELDS:V,PROVIDES_INVALID_FIELDS:G,REQUIRES_INVALID_FIELDS:B,KEY_FIELDS_SELECT_INVALID_TYPE:Q,ROOT_QUERY_USED:q,ROOT_MUTATION_USED:Y,ROOT_SUBSCRIPTION_USED:H,INVALID_SUBGRAPH_NAME:X,NO_QUERIES:z,INTERFACE_FIELD_NO_IMPLEM:J,TYPE_KIND_MISMATCH:W,EXTERNAL_TYPE_MISMATCH:Z,EXTERNAL_ARGUMENT_MISSING:te,EXTERNAL_ARGUMENT_TYPE_MISMATCH:ne,EXTERNAL_ARGUMENT_DEFAULT_MISMATCH:ie,EXTERNAL_ON_INTERFACE:re,MERGED_DIRECTIVE_APPLICATION_ON_EXTERNAL:oe,FIELD_TYPE_MISMATCH:se,ARGUMENT_TYPE_MISMATCH:ae,INPUT_FIELD_DEFAULT_MISMATCH:ce,ARGUMENT_DEFAULT_MISMATCH:le,EXTENSION_WITH_NO_BASE:ue,EXTERNAL_MISSING_ON_BASE:pe,INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH:de,INVALID_FIELD_SHARING:fe,INVALID_LINK_DIRECTIVE_USAGE:he,INVALID_LINK_IDENTIFIER:me,LINK_IMPORT_NAME_MISMATCH:ye,REFERENCED_INACCESSIBLE:ve,DEFAULT_VALUE_USES_INACCESSIBLE:Ee,QUERY_ROOT_TYPE_INACCESSIBLE:Te,REQUIRED_INACCESSIBLE:ge,DISALLOWED_INACCESSIBLE:Ne,IMPLEMENTED_BY_INACCESSIBLE:Ie,ONLY_INACCESSIBLE_CHILDREN:be,REQUIRED_ARGUMENT_MISSING_IN_SOME_SUBGRAPH:Se,REQUIRED_INPUT_FIELD_MISSING_IN_SOME_SUBGRAPH:_e,EMPTY_MERGED_INPUT_TYPE:Oe,ENUM_VALUE_MISMATCH:De,EMPTY_MERGED_ENUM_TYPE:Ae,SATISFIABILITY_ERROR:Re,OVERRIDE_COLLISION_WITH_ANOTHER_DIRECTIVE:Fe,OVERRIDE_FROM_SELF_ERROR:we,OVERRIDE_SOURCE_HAS_OVERRIDE:Le,UNSUPPORTED_FEATURE:xe,INVALID_FEDERATION_SUPERGRAPH:ke,DOWNSTREAM_SERVICE_ERROR:$e,KEY_HAS_DIRECTIVE_IN_FIELDS_ARGS:w,PROVIDES_HAS_DIRECTIVE_IN_FIELDS_ARGS:L,REQUIRES_HAS_DIRECTIVE_IN_FIELDS_ARGS:F,DIRECTIVE_COMPOSITION_ERROR:Ce};const je=Object.values(t.ERRORS).reduce(((e,t)=>(e[t.code]=t,e)),{});t.REMOVED_ERRORS=[["KEY_FIELDS_MISSING_ON_BASE","Keys can now use any field from any other subgraph."],["KEY_FIELDS_MISSING_EXTERNAL","Using `@external` for key fields is now discouraged, unless the field is truly meant to be external."],["KEY_MISSING_ON_BASE","Each subgraph is now free to declare a key only if it needs it."],["MULTIPLE_KEYS_ON_EXTENSION","Every subgraph can have multiple keys, as necessary."],["KEY_NOT_SPECIFIED","Each subgraph can declare key independently of any other subgraph."],["EXTERNAL_USED_ON_BASE","As there is not type ownership anymore, there is also no particular limitation as to where a field can be external."],["PROVIDES_NOT_ON_ENTITY","@provides can now be used on any type."],["REQUIRES_FIELDS_MISSING_ON_BASE","Fields in @requires can now be from any subgraph."],["REQUIRES_USED_ON_BASE","As there is not type ownership anymore, there is also no particular limitation as to which subgraph can use a @requires."],["DUPLICATE_SCALAR_DEFINITION","As duplicate scalar definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["DUPLICATE_ENUM_DEFINITION","As duplicate enum definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["DUPLICATE_ENUM_VALUE","As duplicate enum values is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`"],["ENUM_MISMATCH","Subgraph definitions for an enum are now merged by composition"],["VALUE_TYPE_NO_ENTITY","There is no strong different between entity and value types in the model (they are just usage pattern) and a type can have keys in one subgraph but not another."],["VALUE_TYPE_UNION_TYPES_MISMATCH","Subgraph definitions for an union are now merged by composition"],["PROVIDES_FIELDS_SELECT_INVALID_TYPE","@provides can now be used on field of interface, union and list types"],["RESERVED_FIELD_USED","This error was previously not correctly enforced: the _service and _entities, if present, were overridden; this is still the case"],["NON_REPEATABLE_DIRECTIVE_ARGUMENTS_MISMATCH","Since federation 2.1.0, the case this error used to cover is now a warning (with code `INCONSISTENT_NON_REPEATABLE_DIRECTIVE_ARGUMENTS`) instead of an error"],["REQUIRES_FIELDS_HAS_ARGS","Since federation 2.1.1, using fields with arguments in a @requires is fully supported"]]},8220:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.extractSubgraphsFromSupergraph=t.extractSubgraphsNamesAndUrlsFromSupergraph=void 0;const r=n(4177),o=n(4408),s=n(9209),a=n(4408),c=n(9724),l=n(9624),u=n(7964),p=n(5811),d=n(2850),f=n(758),h=i(n(8222)),m=i(n(6470)),y=n(9724),v=n(415);function E(e,t,n){return e.types().filter((e=>!t.isSpecType(e)&&!n.isSpecType(e)))}function T(e,t){const n=new a.Subgraphs,i=t.graphDirective(e),r=t.graphEnum(e),s=new Map;for(const e of r.values){const t=e.appliedDirectivesOf(i);if(!t.length)throw new Error(`Value ${e} of join__Graph enum has no @join__graph directive`);const r=t[0].arguments(),c=new a.Subgraph(r.name,r.url,(0,o.newEmptyFederation2Schema)());n.add(c),s.set(e.name,r.name)}return[n,s]}t.extractSubgraphsNamesAndUrlsFromSupergraph=function(e){const[t,n]=(0,l.validateSupergraph)(e),[i]=T(e,n);return i.values().map((e=>({name:e.name,url:e.url})))};class g{constructor(e,t){this.originalError=e,this.subgraph=t}}function I(e,t,n,i,o){const s=new Set,a=e.schemaDefinition.roots().map((e=>e.type));for(const n of e.types()){const{isEntityWithKeyInSubgraph:e,typesInFederationDirectives:i}=o(n,t);e&&a.push(n),i.forEach((e=>a.push(e)))}for(;a.length>0;){const e=a.pop();if(n(e),!s.has(e.name))switch(s.add(e.name),e.kind){case"InterfaceType":e.allImplementations().forEach((e=>a.push(e)));case"ObjectType":e.interfaces().forEach((e=>a.push(e)));for(const n of e.fields()){const{isInSubgraph:e,typesInFederationDirectives:o}=i(n,t);e&&(n.arguments().forEach((e=>a.push((0,r.baseType)(e.type)))),a.push((0,r.baseType)(n.type)),o.forEach((e=>a.push(e))))}break;case"InputObjectType":for(const n of e.fields()){const{isInSubgraph:e,typesInFederationDirectives:o}=i(n,t);e&&(a.push((0,r.baseType)(n.type)),o.forEach((e=>a.push(e))))}break;case"UnionType":e.members().forEach((e=>a.push(e.type)))}}for(const t of e.directives())t.hasExecutableLocations()&&t.arguments().forEach((e=>a.push((0,r.baseType)(e.type))))}function N(e,t){if(!e)return[];const n=[];return(0,f.parseSelectionSet)({parentType:t,source:e,fieldAccessor:(e,t)=>{const i=e.field(t);return i&&n.push((0,r.baseType)(i.type)),i},validate:!1}),n}function b(e){const t=(0,v.errorCauses)(e);return t?(0,v.printErrors)(t):String(e)}function _(e,t,n){return e instanceof r.FieldDefinition?S(e,t,n):function(e,t,n){const i=t.schema.type(e.parent.name);if(i){const r=n?O(n,t.schema,t.name):D(e.type,t.schema,t.name);return i.addField(e.name,r)}}(e,t,n)}function S(e,t,n){const i=t.schema.type(e.parent.name);if(i){const r=n?O(n,t.schema,t.name):D(e.type,t.schema,t.name),o=i.addField(e.name,r);for(const n of e.arguments())o.addArgument(n.name,D(n.type,t.schema,t.name),n.defaultValue);return o}}function O(e,t,n){try{return(0,u.builtTypeReference)(e,t)}catch(t){(0,c.assert)(!1,(()=>`Cannot parse type "${e}" in subgraph ${n}: ${t}`))}}function D(e,t,n){switch(e.kind){case"ListType":return new r.ListType(D(e.ofType,t,n));case"NonNullType":return new r.NonNullType(D(e.ofType,t,n));default:const i=t.type(e.name);return(0,c.assert)(i,(()=>`Cannot find type "${e.name}" in subgraph "${n}"`)),i}}function A(e,t,n){const i=e.metadata();for(const o of e.schema.types())if((0,r.isObjectType)(o)||(0,r.isInterfaceType)(o)){for(const r of o.appliedDirectivesOf(i.keyDirective())){const i=n||!!r.ofExtension();R(e,o,r,t,i)}for(const n of o.fields()){for(const r of n.appliedDirectivesOf(i.requiresDirective()))R(e,o,r,t);const s=(0,r.baseType)(n.type);for(const o of n.appliedDirectivesOf(i.providesDirective()))(0,c.assert)((0,r.isObjectType)(s)||(0,r.isInterfaceType)(s),(()=>`Found @provides on field ${n.coordinate} whose type ${n.type} (${s.kind}) is not an object or interface `)),R(e,s,o,t)}w(i,o)}}function R(e,t,n,i,s=!1){const a=e.metadata().externalDirective(),l=function(t,n){const o=t.field(n);if(o)return s&&o.hasAppliedDirective(a)&&o.appliedDirectivesOf(a).forEach((e=>e.remove())),o;(0,c.assert)(!(0,r.isUnionType)(t),(()=>`Shouldn't select field ${n} from union type ${t}`));const l=i.type(t.name).field(n);(0,c.assert)(l,(()=>`No field named ${n} found on type ${t.name} in the supergraph`));const u=S(l,e);return s||u.applyDirective(a),u};try{(0,o.parseFieldSetArgument)({parentType:t,directive:n,fieldAccessor:l,validate:!1})}catch(e){}}function w(e,t){for(const n of t.interfaces())for(const i of n.fields()){const n=t.field(i.name);n?n.hasAppliedDirective(e.externalDirective())&&F(n,i):L(e,i,t)}}function L(e,t,n){const i=n.addField(t.name,t.type);for(const e of t.arguments())i.addArgument(e.name,e.type,e.defaultValue);i.applyDirective(e.externalDirective())}function F(e,t){(0,p.isSubtype)(t.type,e.type)||((0,c.assert)((0,p.isSubtype)(e.type,t.type),(()=>`For ${e.coordinate}, expected ${t.type} and ${e.type} to be in a subtyping relationship`)),e.type=t.type)}t.extractSubgraphsFromSupergraph=function(e){const[t,n]=(0,l.validateSupergraph)(e),i=n.version.equals(new s.FeatureVersion(0,1));try{const[s,a]=T(e,n),l=n.typeDirective(e),u=n.implementsDirective(e),p=n.ownerDirective(e),d=n.fieldDirective(e),f=e=>a.get(e.arguments().graph);let h=()=>!0;if(i){const t=function(e,t,n,i){const r=new Map;for(const o of t){const t=new Set;I(e,o,(e=>t.add(e.name)),n,i),r.set(o,t)}return r}(e,s.names(),((e,t)=>{const n=e.appliedDirectivesOf(d);if(n.length){const i=n.find((e=>f(e)===t));if(i){const t=i.arguments();return{isInSubgraph:!0,typesInFederationDirectives:N(t.provides,(0,r.baseType)(e.type)).concat(N(t.requires,e.parent))}}return{isInSubgraph:!1,typesInFederationDirectives:[]}}{const n=p?e.parent.appliedDirectivesOf(p):[];return{isInSubgraph:!n.length||f(n[0])==t,typesInFederationDirectives:[]}}}),((e,t)=>{const n=e.appliedDirectivesOf(l).find((e=>e.arguments().key&&f(e)===t));return n?{isEntityWithKeyInSubgraph:!0,typesInFederationDirectives:N(n.arguments().key,e)}:{isEntityWithKeyInSubgraph:!1,typesInFederationDirectives:[]}}));h=(e,n)=>{var i,r;return null!==(r=null===(i=t.get(n))||void 0===i?void 0:i.has(e.name))&&void 0!==r&&r}}for(const i of E(e,n,t.coreDefinition)){const e=i.appliedDirectivesOf(l);if(e.length)for(const t of e){const e=t.arguments(),n=f(t),o=s.get(n).schema;let a=o.type(i.name);if(a||(a=o.addType((0,r.newNamedType)(i.kind,i.name))),e.key){const{resolvable:t}=e,n=a.applyDirective("key",{fields:e.key,resolvable:t});e.extension&&n.setOfExtension(a.newExtension())}}else s.values().filter((e=>h(i,e.name))).map((e=>e.schema)).forEach((e=>e.addType((0,r.newNamedType)(i.kind,i.name))))}for(const i of E(e,n,t.coreDefinition))switch(i.kind){case"ObjectType":case"InterfaceType":const e=[],t=u?i.appliedDirectivesOf(u):[];for(const n of t){const t=n.arguments();s.get(a.get(t.graph)).schema.type(i.name).addImplementedInterface(t.interface),e.push(t.interface)}for(const t of i.interfaceImplementations()){const n=t.interface.name;if(!e.includes(n))for(const e of s){const t=e.schema.type(i.name),r=e.schema.type(n);t&&r&&t.addImplementedInterface(n)}}case"InputObjectType":for(const e of i.fields()){const t=e.appliedDirectivesOf(d);if(t.length)for(const n of t){const t=n.arguments(),r=s.get(a.get(t.graph)),o=_(e,r,t.type);o?(t.requires&&o.applyDirective(r.metadata().requiresDirective(),{fields:t.requires}),t.provides&&o.applyDirective(r.metadata().providesDirective(),{fields:t.provides}),t.external&&o.applyDirective(r.metadata().externalDirective()),t.usedOverridden&&o.applyDirective(r.metadata().externalDirective(),{reason:"[overridden]"}),t.override&&o.applyDirective(r.metadata().overrideDirective(),{from:t.override})):(0,c.assert)(!h(i,r.name),(()=>`Found join__field directive for graph ${r.name} on field ${e.coordinate} but no corresponding join__type on ${i}`))}else{const t=p?i.appliedDirectivesOf(p):[];if(t.length){(0,c.assert)(1==t.length,(()=>`Found multiple join__owner directives on type ${i}`));const n=s.get(a.get(t[0].arguments().graph)),r=_(e,n);(0,c.assert)(r,(()=>`Found join__owner directive on ${i} but no corresponding join__type`))}else{const t=(0,r.baseType)(e.type);for(const n of s)n.schema.type(t.name)&&_(e,n)}}}break;case"EnumType":for(const e of s){const t=e.schema.type(i.name);if(t){(0,c.assert)((0,r.isEnumType)(t),(()=>`${t} should be an enum but found a ${t.kind}`));for(const e of i.values)t.addValue(e.name)}}break;case"UnionType":for(const e of s){const t=e.schema.type(i.name);if(t){(0,c.assert)((0,r.isUnionType)(t),(()=>`${t} should be an enum but found a ${t.kind}`));for(const n of i.types()){const i=e.schema.type(n.name);i&&t.addType(i)}}}}const m=e.directives().filter((e=>e.hasExecutableLocations()));for(const t of s){i&&A(t,e,i),(0,o.removeInactiveProvidesAndRequires)(t.schema);for(const e of t.schema.types())switch(e.kind){case"ObjectType":case"InterfaceType":case"InputObjectType":e.hasFields()||e.removeRecursive();break;case"UnionType":0===e.membersCount()&&e.removeRecursive()}for(const e of m)(0,r.copyDirectiveDefinitionToSchema)({definition:e,schema:t.schema,copyDirectiveApplicationsInArguments:!1,locationFilter:e=>(0,r.isExecutableDirectiveLocation)(e)})}if(i)for(const e of s)for(const t of e.schema.interfaceTypes()){const e=t.possibleRuntimeTypes();for(const n of t.fields())e.every((e=>e.field(n.name)))||n.remove();t.hasFields()||t.remove()}for(const e of s)try{e.validate()}catch(t){throw new g(t,e)}return s}catch(e){let t,n=e;e instanceof g&&(n=e.originalError,t=e.subgraph);const r=t?`subgraph "${t.name}"`:"subgraphs";if(i)throw new Error(`Error extracting ${r} from the supergraph: this might be due to errors in subgraphs that were mistakenly ignored by federation 0.x versions but are rejected by federation 2.\nPlease try composing your subgraphs with federation 2: this should help precisely pinpoint the problems and, once fixed, generate a correct federation 2 supergraph.\n\nDetails:\n${b(n)}`);{const e=`Unexpected error extracting ${r} from the supergraph: this is either a bug, or the supergraph has been corrupted`,i=t?"\n\n"+function(e){if(!(0,y.validateStringContainsBoolean)(process.env.APOLLO_FEDERATION_DEBUG_SUBGRAPHS))return"Re-run with environment variable 'APOLLO_FEDERATION_DEBUG_SUBGRAPHS' set to 'true' to extract the invalid subgraph";try{const t=`extracted-subgraph-${e.name}-${Date.now()}.graphql`,n=m.default.resolve(t);if(h.default.existsSync(n))throw new Error(`candidate file ${t} already existed`);return h.default.writeFileSync(n,(0,d.printSchema)(e.schema)),`The (invalid) extracted subgraph has been written in: ${n}.`}catch(t){return`Was not able to print generated subgraph for "${e.name}" because: ${b(t)}`}}(t):"";throw new Error(`${e}.\n\nDetails:\n${b(n)}${i}`)}}}},4408:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeInactiveProvidesAndRequires=t.addSubgraphToError=t.addSubgraphToASTNode=t.Subgraph=t.FEDERATION_OPERATION_FIELDS=t.entitiesFieldName=t.serviceFieldName=t.FEDERATION_OPERATION_TYPES=t.entityTypeSpec=t.serviceTypeSpec=t.anyTypeSpec=t.Subgraphs=t.subgraphsFromServiceList=t.collectTargetFields=t.parseFieldSetArgument=t.newEmptyFederation2Schema=t.buildSubgraph=t.isEntityType=t.isFederationField=t.isFederationSubgraphSchema=t.federationMetadata=t.printSubgraphNames=t.asFed2SubgraphDocument=t.FEDERATION2_LINK_WTH_FULL_IMPORTS=t.setSchemaAsFed2Subgraph=t.FederationBlueprint=t.FederationMetadata=t.collectUsedFields=t.FEDERATION_UNNAMED_SUBGRAPH_NAME=t.FEDERATION_RESERVED_SUBGRAPH_NAME=void 0;const i=n(4177),r=n(9724),o=n(4710),s=n(8929),a=n(4150),c=n(7964),l=n(758),u=n(1697),p=n(5322),d=n(8116),f=n(7678),h=n(9209),m=n(9480),y=n(2850),v=n(3208),E=n(5388),T=h.LINK_VERSIONS.latest(),g=u.TAG_VERSIONS.latest(),I=p.INACCESSIBLE_VERSIONS.latest(),N=m.FEDERATION_VERSIONS.latest();t.FEDERATION_RESERVED_SUBGRAPH_NAME="_",t.FEDERATION_UNNAMED_SUBGRAPH_NAME="<unnamed>";const b=[s.PossibleTypeExtensionsRule,s.KnownTypeNamesRule],_=[a.KnownTypeNamesInFederationRule],S=o.specifiedSDLRules.filter((e=>!b.includes(e))).concat(_);function O({directiveName:e,selectionSet:t,hasExternalInParents:n,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a}){for(const c of t.selections()){const t=c.element().appliedDirectives;if(t.length>0&&o(d.ERROR_CATEGORIES.DIRECTIVE_IN_FIELDS_ARG.get(e).err(`cannot have directive applications in the @${e}(fields:) argument but found ${t.join(", ")}.`)),"FieldSelection"===c.kind){const t=c.element().definition,l=r.isFieldExternal(t);!a&&t.hasArguments()&&o(d.ERROR_CATEGORIES.FIELDS_HAS_ARGS.get(e).err(`field ${t.coordinate} cannot be included because it has arguments (fields with argument are not allowed in @${e})`,{nodes:t.sourceAST}));const u=!c.selectionSet&&!s&&!n;if(!l&&u){const n=d.ERROR_CATEGORIES.DIRECTIVE_FIELDS_MISSING_EXTERNAL.get(e);r.isFieldFakeExternal(t)?o(n.err(`field "${t.coordinate}" should not be part of a @${e} since it is already "effectively" provided by this subgraph (while it is marked @${m.externalDirectiveSpec.name}, it is a @${m.keyDirectiveSpec.name} field of an extension type, which are not internally considered external for historical/backward compatibility reasons)`,{nodes:t.sourceAST})):o(n.err(`field "${t.coordinate}" should not be part of a @${e} since it is already provided by this subgraph (it is not marked @${m.externalDirectiveSpec.name})`,{nodes:t.sourceAST}))}if(c.selectionSet){let u=n||l;const p=t.parent;if(!u&&(0,i.isInterfaceType)(p))for(const e of p.possibleRuntimeTypes()){const n=e.field(t.name);if(n&&r.isFieldExternal(n)){u=!0;break}}O({directiveName:e,selectionSet:c.selectionSet,hasExternalInParents:u,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a})}}else O({directiveName:e,selectionSet:c.selectionSet,hasExternalInParents:n,metadata:r,onError:o,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a})}}function D({type:e,directive:t,metadata:n,errorCollector:i,allowOnNonExternalLeafFields:r,allowFieldsWithArguments:o,onFields:a}){try{const s=a?(e,t)=>{const n=e.field(t);return n&&a(n),n}:void 0,c=Y({parentType:e,directive:t,fieldAccessor:s});O({directiveName:t.name,selectionSet:c,hasExternalInParents:!1,metadata:n,onError:e=>i.push(A(t,e)),allowOnNonExternalLeafFields:r,allowFieldsWithArguments:o})}catch(e){if(!(e instanceof s.GraphQLError))throw e;i.push(e)}}function A(e,t,n){const r=(0,i.sourceASTs)(e);t.nodes&&r.push(...t.nodes);let o=(0,d.errorCodeDef)(t);o&&o!==d.ERRORS.INVALID_GRAPHQL||(o=d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS.get(e.name));let a=t.message.trim();return n&&(a=n(a)),o.err(`${function(e){return`On ${R(e)}, for ${function(e){return e.sourceAST?(0,s.print)(e.sourceAST):e.toString()}(e)}`}(e)}: ${a}`,{nodes:r,originalError:t})}function R(e){var t;return`${e.parent instanceof i.FieldDefinition?"field":"type"} "${null===(t=e.parent)||void 0===t?void 0:t.coordinate}"`}function w({definition:e,targetTypeExtractor:t,errorCollector:n,metadata:r,isOnParentType:o=!1,allowOnNonExternalLeafFields:s=!1,allowFieldsWithArguments:a=!1,onFields:c}){for(const l of e.applications()){const u=l.parent,p=t(u),f=o?p:u.parent;if((0,i.isInterfaceType)(f)){const t=d.ERROR_CATEGORIES.DIRECTIVE_UNSUPPORTED_ON_INTERFACE.get(e.name);n.push(t.err(o?`Cannot use ${e.coordinate} on interface "${f.coordinate}": ${e.coordinate} is not yet supported on interfaces`:`Cannot use ${e.coordinate} on ${R(l)} of parent type "${f}": ${e.coordinate} is not yet supported within interfaces`,{nodes:(0,i.sourceASTs)(l).concat(o?[]:(0,i.sourceASTs)(p))}))}D({type:p,directive:l,metadata:r,errorCollector:n,allowOnNonExternalLeafFields:s,allowFieldsWithArguments:a,onFields:c})}}function L(e){const t=new Set;F(e.keyDirective(),(e=>e),t),F(e.requiresDirective(),(e=>e.parent),t),F(e.providesDirective(),(e=>{const t=(0,i.baseType)(e.type);return(0,i.isCompositeType)(t)?t:void 0}),t);for(const n of e.schema.interfaceTypes()){const e=n.possibleRuntimeTypes();for(const i of n.fields())for(const n of e){const e=n.field(i.name);e&&t.add(e)}}return t}function F(e,t,n){for(const i of e.applications()){const e=t(i.parent);e&&H({parentType:e,directive:i,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>n.add(e)))}}function x(e,t,n){var i;const o=null===(i=P(e.schema()))||void 0===i?void 0:i.requiresDirective();(0,r.assert)(o,"Schema should be a federation subgraph, but @requires directive not found");const s=e.possibleRuntimeTypes();for(const i of e.fields()){const e=[],a=new r.MultiMap,c=[];for(const n of s){const r=n.field(i.name);if(!r)continue;r.sourceAST&&c.push(r.sourceAST),(t.isFieldExternal(r)||r.hasAppliedDirective(o))&&e.push(r);const s=r.type;a.add(s.toString(),r)}if(e.length>0&&a.size>1){const t=[...a.entries()];n.push(d.ERRORS.INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH.err(`Some of the runtime implementations of interface field "${i.coordinate}" are marked @external or have a @require (${e.map(k)}) so all the implementations should use the same type (a current limitation of federation; see https://github.com/apollographql/federation/issues/1257), but ${$(t[0])} while ${(0,r.joinStrings)(t.slice(1).map($)," and ")}.`,{nodes:c}))}}}t.collectUsedFields=L;const k=e=>`"${e.coordinate}"`;function $([e,t]){return`${(0,r.joinStrings)(t.map(k))} ${1==t.length?"has":"have"} type "${e}"`}class C{constructor(e){this.schema=e}onInvalidate(){this._externalTester=void 0,this._sharingPredicate=void 0,this._isFed2Schema=void 0,this._fieldUsedPredicate=void 0}isFed2Schema(){if(!this._isFed2Schema){const e=this.federationFeature();this._isFed2Schema=!!e&&e.url.version.satisfies(new h.FeatureVersion(2,0))}return this._isFed2Schema}federationFeature(){var e;return null===(e=this.schema.coreFeatures)||void 0===e?void 0:e.getByIdentity(N.identity)}externalTester(){return this._externalTester||(this._externalTester=new ee(this.schema)),this._externalTester}sharingPredicate(){return this._sharingPredicate||(this._sharingPredicate=(0,f.computeShareables)(this.schema)),this._sharingPredicate}fieldUsedPredicate(){if(!this._fieldUsedPredicate){const e=L(this);this._fieldUsedPredicate=t=>!!e.has(t)}return this._fieldUsedPredicate}isFieldUsed(e){return this.fieldUsedPredicate()(e)}isFieldExternal(e){return this.externalTester().isExternal(e)}isFieldPartiallyExternal(e){return this.externalTester().isPartiallyExternal(e)}isFieldFullyExternal(e){return this.externalTester().isFullyExternal(e)}isFieldFakeExternal(e){return this.externalTester().isFakeExternal(e)}selectionSelectsAnyExternalField(e){return this.externalTester().selectsAnyExternalField(e)}isFieldShareable(e){return this.sharingPredicate()(e)}federationDirectiveNameInSchema(e){if(this.isFed2Schema()){const t=this.schema.coreFeatures;(0,r.assert)(t,"Schema should be a core schema");const n=t.getByIdentity(N.identity);return(0,r.assert)(n,"Schema should have the federation feature"),n.directiveNameInSchema(e)}return e}federationTypeNameInSchema(e){if("_"===e.charAt(0))return e;if(this.isFed2Schema()){const t=this.schema.coreFeatures;(0,r.assert)(t,"Schema should be a core schema");const n=t.getByIdentity(N.identity);return(0,r.assert)(n,"Schema should have the federation feature"),n.typeNameInSchema(e)}return"_"+e}getFederationDirective(e){const t=this.schema.directive(this.federationDirectiveNameInSchema(e));return(0,r.assert)(t,`The provided schema does not have federation directive @${e}`),t}keyDirective(){return this.getFederationDirective(m.keyDirectiveSpec.name)}overrideDirective(){return this.getFederationDirective(m.overrideDirectiveSpec.name)}extendsDirective(){return this.getFederationDirective(m.extendsDirectiveSpec.name)}externalDirective(){return this.getFederationDirective(m.externalDirectiveSpec.name)}requiresDirective(){return this.getFederationDirective(m.requiresDirectiveSpec.name)}providesDirective(){return this.getFederationDirective(m.providesDirectiveSpec.name)}shareableDirective(){return this.getFederationDirective(m.shareableDirectiveSpec.name)}tagDirective(){return this.getFederationDirective(g.tagDirectiveSpec.name)}composeDirective(){return this.getFederationDirective(m.composeDirectiveSpec.name)}inaccessibleDirective(){return this.getFederationDirective(I.inaccessibleDirectiveSpec.name)}allFederationDirectives(){const e=[this.keyDirective(),this.externalDirective(),this.requiresDirective(),this.providesDirective(),this.tagDirective(),this.extendsDirective()];return this.isFed2Schema()?e.concat(this.shareableDirective(),this.inaccessibleDirective(),this.overrideDirective(),this.composeDirective()):e}entityType(){return this.schema.type(this.federationTypeNameInSchema(t.entityTypeSpec.name))}anyType(){return this.schema.type(this.federationTypeNameInSchema(t.anyTypeSpec.name))}serviceType(){return this.schema.type(this.federationTypeNameInSchema(t.serviceTypeSpec.name))}fieldSetType(){return this.schema.type(this.federationTypeNameInSchema(m.fieldSetTypeSpec.name))}allFederationTypes(){const e=[this.anyType(),this.serviceType(),this.fieldSetType()],t=this.entityType();return t&&e.push(t),e}}t.FederationMetadata=C;class j extends i.SchemaBlueprint{constructor(e){super(),this.withRootTypeRenaming=e}onAddedCoreFeature(e,t){if(super.onAddedCoreFeature(e,t),t.url.identity===m.federationIdentity){const n=m.FEDERATION_VERSIONS.find(t.url.version);n&&n.addElementsToSchema(e)}}onMissingDirectiveDefinition(e,t,n){if(t===h.linkDirectiveDefaultName){const i=n&&n.url,r=i&&i.startsWith(T.identity)?n.as:void 0,o=T.addDefinitionsToSchema(e,r);return o.length>0?o:e.directive(t)}return super.onMissingDirectiveDefinition(e,t,n)}ignoreParsedField(e,n){if(!t.FEDERATION_OPERATION_FIELDS.includes(n))return!1;const i=P(e.schema());return!!i&&!i.isFed2Schema()}onConstructed(e){P(e)||(e._federationMetadata=new C(e))}onDirectiveDefinitionAndSchemaParsed(e){const t=B(e);return e.schemaDefinition.processUnappliedDirectives(),t}onInvalidation(e){super.onInvalidation(e);const t=P(e);(0,r.assert)(t,"Federation schema should have had its metadata set on construction"),C.prototype.onInvalidate.call(t)}onValidation(e){var t;const n=super.onValidation(e);if(this.withRootTypeRenaming)for(const r of i.allSchemaRootKinds){const o=null===(t=e.schemaDefinition.root(r))||void 0===t?void 0:t.type,s=(0,i.defaultRootName)(r);if(o&&o.name!==s){const t=e.type(s);t&&n.push(d.ERROR_CATEGORIES.ROOT_TYPE_USED.get(r).err(`The schema has a type named "${s}" but it is not set as the ${r} root type ("${o.name}" is instead): this is not supported by federation. If a root type does not use its default name, there should be no other type with that default name.`,{nodes:(0,i.sourceASTs)(o,t)})),o.rename(s)}}const o=P(e);if((0,r.assert)(o,"Federation schema should have had its metadata set on construction"),!o.isFed2Schema())return n;w({definition:o.keyDirective(),targetTypeExtractor:e=>e,errorCollector:n,metadata:o,isOnParentType:!0,allowOnNonExternalLeafFields:!0,onFields:e=>{const t=(0,i.baseType)(e.type);if((0,i.isUnionType)(t)||(0,i.isInterfaceType)(t)){let n=t.kind;throw n=n.slice(0,n.length-"Type".length),d.ERRORS.KEY_FIELDS_SELECT_INVALID_TYPE.err(`field "${e.coordinate}" is a ${n} type which is not allowed in @key`)}}}),w({definition:o.requiresDirective(),targetTypeExtractor:e=>e.parent,errorCollector:n,metadata:o,allowFieldsWithArguments:!0}),w({definition:o.providesDirective(),targetTypeExtractor:e=>{if(o.isFieldExternal(e))throw d.ERRORS.EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE.err(`Cannot have both @provides and @external on field "${e.coordinate}"`,{nodes:e.sourceAST});const t=(0,i.baseType)(e.type);if(!(0,i.isCompositeType)(t))throw d.ERRORS.PROVIDES_ON_NON_OBJECT_FIELD.err(`Invalid @provides directive on field "${e.coordinate}": field has type "${e.type}" which is not a Composite Type`,{nodes:e.sourceAST});return t},errorCollector:n,metadata:o}),function(e,t){for(const n of e.schema.interfaceTypes())for(const i of n.fields())e.isFieldExternal(i)&&t.push(d.ERRORS.EXTERNAL_ON_INTERFACE.err(`Interface type field "${i.coordinate}" is marked @external but @external is not allowed on interface fields (it is nonsensical).`,{nodes:i.sourceAST}))}(o,n),function(e,t){for(const n of e.schema.types())if((0,i.isObjectType)(n)||(0,i.isInterfaceType)(n))for(const i of n.fields())e.isFieldExternal(i)&&!e.isFieldUsed(i)&&t.push(d.ERRORS.EXTERNAL_UNUSED.err(`Field "${i.coordinate}" is marked @external but is not used in any federation directive (@key, @provides, @requires) or to satisfy an interface; the field declaration has no use and should be removed (or the field should not be @external).`,{nodes:i.sourceAST}))}(o,n);const s=o.tagDirective();if(s){const e=g.checkCompatibleDirective(s);e&&n.push(e)}for(const t of e.interfaceTypes())x(t,o,n);return n}validationRules(){return S}onUnknownDirectiveValidationError(e,t,n){const i=P(e);if((0,r.assert)(i,"This method should only have been called on a subgraph schema"),m.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES.includes(t)){if(i.isFed2Schema()){const e=i.federationFeature();(0,r.assert)(e,"Fed2 subgraph _must_ link to the federation feature");const o=e.directiveNameInSchema(t);return o.startsWith(e.nameInSchema+"__")?(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation directive, you should use fully-qualified name "@${o}" or add "@${t}" to the \`import\` argument of the @link to the federation specification.`):(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation directive, you should use "@${o}" as it is imported under that name in the @link to the federation specification of this schema.`)}return(0,d.withModifiedErrorMessage)(n,`${n.message} If you meant the "@${t}" federation 2 directive, note that this schema is a federation 1 schema. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`)}if(!i.isFed2Schema()){const e=(0,E.suggestionList)(t,m.FEDERATION2_ONLY_SPEC_DIRECTIVES.map((e=>e.name)));if(e.length>0)return(0,d.withModifiedErrorMessage)(n,`${n.message}${(0,E.didYouMean)(e.map((e=>"@"+e)))} If so, note that ${1===e.length?"it is a federation 2 directive":"they are federation 2 directives"} but this schema is a federation 1 one. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`)}return n}applyDirectivesAfterParsing(){return!0}}function M(e){let t,n=e.coreFeatures;if(n)t=n.coreDefinition,(0,r.assert)(t.url.version.satisfies(T.version),`Fed2 schema must use @link with version >= 1.0, but schema uses ${t.url}`);else{const o=function(e){if(!e.directive(T.url.name))return;const t=T.url.name;for(;;){const n=t+1;if(!e.directive(n))return n}}(e),s=T.addToSchema(e,o);if(s.length>0)throw(0,i.ErrGraphQLValidationFailed)(s);t=T,n=e.coreFeatures,(0,r.assert)(n,"Schema should now be a core schema")}(0,r.assert)(!n.getByIdentity(N.identity),"Schema already set as a federation subgraph"),e.schemaDefinition.applyDirective(n.coreItself.nameInSchema,{url:N.url.toString(),import:m.FEDERATION2_SPEC_DIRECTIVES.map((e=>`@${e.name}`))});const o=B(e);if(o.length>0)throw(0,i.ErrGraphQLValidationFailed)(o)}function P(e){return e._federationMetadata}function U(e){var n;return e.parent===(null===(n=e.schema().schemaDefinition.root("query"))||void 0===n?void 0:n.type)&&t.FEDERATION_OPERATION_FIELDS.includes(e.name)}function V(e){if("ObjectType"!==e.kind)return!1;const t=P(e.schema());return!!t&&e.hasAppliedDirective(t.keyDirective())}function G(e,n,i,r=!0){const o={blueprint:new j(r),validate:!1};let a;try{const t="string"==typeof i?(0,c.buildSchema)(new s.Source(i,e),o):(0,c.buildSchemaFromAST)(i,o);a=new J(e,n,t)}catch(n){throw n instanceof s.GraphQLError&&e!==t.FEDERATION_UNNAMED_SUBGRAPH_NAME?Z(n,e,d.ERRORS.INVALID_GRAPHQL):n}return a.validate()}function B(e){const t=e.coreFeatures;if(t)return t.getByIdentity(m.federationIdentity)?q(e):K(e);if(e.schemaDefinition.appliedDirectivesOf(h.linkDirectiveDefaultName).find(Q)){const t=T.addToSchema(e);return t.length>0?t:q(e)}return K(e)}function Q(e){const t=e.arguments();return e.name===h.linkDirectiveDefaultName&&t.url&&t.url.startsWith(m.federationIdentity)}function K(e){var t,n;for(const i of[m.keyDirectiveSpec,m.providesDirectiveSpec,m.requiresDirectiveSpec]){const o=e.directive(i.name);if(!o)continue;(0,r.assert)(0===o.applications().length,`${o} shouldn't have had validation at that places`);const s=null===(n=null===(t=o.argument("fields"))||void 0===t?void 0:t.type)||void 0===n?void 0:n.toString(),a=!!s&&1===o.arguments().length&&("String"===s||"_FieldSet"===s||"FieldSet"===s);(0===o.arguments().length||a)&&o.remove()}return[m.fieldSetTypeSpec.checkOrAdd(e,"_"+m.fieldSetTypeSpec.name),m.keyDirectiveSpec.checkOrAdd(e),m.requiresDirectiveSpec.checkOrAdd(e),m.providesDirectiveSpec.checkOrAdd(e),m.extendsDirectiveSpec.checkOrAdd(e),m.externalDirectiveSpec.checkOrAdd(e),g.tagDirectiveSpec.checkOrAdd(e)].flat()}function q(e){const t=e.coreFeatures;(0,r.assert)(t,"This method should not have been called on a non-core schema");const n=t.getByIdentity(m.federationIdentity);(0,r.assert)(n,"This method should not have been called on a schema with no @link for federation");const i=m.FEDERATION_VERSIONS.find(n.url.version);return i?i.addElementsToSchema(e):[d.ERRORS.UNKNOWN_FEDERATION_LINK_VERSION.err(`Invalid version ${n.url.version} for the federation feature in @link direction on schema`,{nodes:n.directive.sourceAST})]}function Y({parentType:e,directive:t,fieldAccessor:n,validate:i,decorateValidationErrors:r=!0}){try{const r=(0,l.parseSelectionSet)({parentType:e,source:X(t),fieldAccessor:n,validate:i});return(null==i||i)&&r.forEachElement((e=>{if("Field"===e.kind&&e.alias)throw new s.GraphQLError(`Cannot use alias "${e.alias}" in "${e}": aliases are not currently supported in @${t.name}`)})),r}catch(e){if(!(e instanceof s.GraphQLError&&r))throw e;throw A(t,e,(e=>(e.startsWith("Cannot query field")&&(e.endsWith(".")&&(e=e.slice(0,e.length-1)),t.name===m.keyDirectiveSpec.name?e+=" (the field should either be added to this subgraph or, if it should not be resolved by this subgraph, you need to add it to this subgraph with @external).":e+=" (if the field is defined in another subgraph, you need to add it to this subgraph with @external)."),e)))}}function H({parentType:e,directive:t,includeInterfaceFieldsImplementations:n,validate:r=!0}){const o=[];try{Y({parentType:e,directive:t,fieldAccessor:(e,t)=>{const r=e.field(t);if(r&&(o.push(r),n&&(0,i.isInterfaceType)(e)))for(const n of e.possibleRuntimeTypes()){const e=n.field(t);e&&o.push(e)}return r},validate:r})}catch(e){if(void 0===(0,d.errorCauses)(e)||r)throw e}return o}function X(e){var t;const n=e.arguments().fields,i=e.sourceAST;if("string"!=typeof n)throw d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(e.name).err(`Invalid value for argument "${e.definition.argument("fields").name}": must be a string.`,{nodes:i});if(i&&"Directive"===i.kind)for(const n of null!==(t=i.arguments)&&void 0!==t?t:[])if("fields"===n.name.value){if("StringValue"!==n.value.kind)throw d.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(e.name).err(`Invalid value for argument "${e.definition.argument("fields").name}": must be a string.`,{nodes:i});break}return n}t.FederationBlueprint=j,t.setSchemaAsFed2Subgraph=M,t.FEDERATION2_LINK_WTH_FULL_IMPORTS='@link(url: "https://specs.apollo.dev/federation/v2.1", import: ["@key", "@requires", "@provides", "@external", "@tag", "@extends", "@shareable", "@inaccessible", "@override", "@composeDirective"])',t.asFed2SubgraphDocument=function(e){const t={kind:s.Kind.SCHEMA_EXTENSION,directives:[{kind:s.Kind.DIRECTIVE,name:{kind:s.Kind.NAME,value:h.linkDirectiveDefaultName},arguments:[{kind:s.Kind.ARGUMENT,name:{kind:s.Kind.NAME,value:"url"},value:{kind:s.Kind.STRING,value:N.url.toString()}},{kind:s.Kind.ARGUMENT,name:{kind:s.Kind.NAME,value:"import"},value:{kind:s.Kind.LIST,values:m.FEDERATION2_SPEC_DIRECTIVES.map((e=>({kind:s.Kind.STRING,value:`@${e.name}`})))}}]}]};return{kind:s.Kind.DOCUMENT,loc:e.loc,definitions:e.definitions.concat(t)}},t.printSubgraphNames=function(e){return(0,r.printHumanReadableList)(e.map((e=>`"${e}"`)),{prefix:"subgraph",prefixPlural:"subgraphs"})},t.federationMetadata=P,t.isFederationSubgraphSchema=function(e){return!!P(e)},t.isFederationField=U,t.isEntityType=V,t.buildSubgraph=G,t.newEmptyFederation2Schema=function(e){const t=new i.Schema(new j(!0),e);return M(t),t},t.parseFieldSetArgument=Y,t.collectTargetFields=H,t.subgraphsFromServiceList=function(e){var t;let n=[];const i=new z;for(const r of e)try{i.add(G(r.name,null!==(t=r.url)&&void 0!==t?t:"",r.typeDefs))}catch(e){const t=(0,d.errorCauses)(e);if(!t)throw e;n=n.concat(t)}return 0===n.length?i:n};class z{constructor(){this.subgraphs=new r.OrderedMap}add(e){if(this.subgraphs.has(e.name))throw new Error(`A subgraph named ${e.name} already exists`+(e.url?` (with url '${e.url}')`:""));return this.subgraphs.add(e.name,e),e}get(e){return this.subgraphs.get(e)}size(){return this.subgraphs.size}names(){return this.subgraphs.keys()}values(){return this.subgraphs.values()}*[Symbol.iterator](){for(const e of this.subgraphs)yield e}validate(){let e=[];for(const t of this.values())try{t.validate()}catch(t){const n=(0,d.errorCauses)(t);if(!n)throw t;e=e.concat(n)}return 0===e.length?void 0:e}toString(){return"["+this.subgraphs.keys().join(", ")+"]"}}t.Subgraphs=z,t.anyTypeSpec=(0,v.createScalarTypeSpecification)({name:"_Any"}),t.serviceTypeSpec=(0,v.createObjectTypeSpecification)({name:"_Service",fieldsFct:e=>[{name:"sdl",type:e.stringType()}]}),t.entityTypeSpec=(0,v.createUnionTypeSpecification)({name:"_Entity",membersFct:e=>e.objectTypes().filter(V).map((e=>e.name))}),t.FEDERATION_OPERATION_TYPES=[t.anyTypeSpec,t.serviceTypeSpec,t.entityTypeSpec],t.serviceFieldName="_service",t.entitiesFieldName="_entities",t.FEDERATION_OPERATION_FIELDS=[t.serviceFieldName,t.entitiesFieldName];class J{constructor(e,n,i){if(this.name=e,this.url=n,this.schema=i,e===t.FEDERATION_RESERVED_SUBGRAPH_NAME)throw d.ERRORS.INVALID_SUBGRAPH_NAME.err(`Invalid name ${t.FEDERATION_RESERVED_SUBGRAPH_NAME} for a subgraph: this name is reserved`)}metadata(){const e=P(this.schema);return(0,r.assert)(e,"The subgraph schema should have built with the federation built-ins."),e}isFed2Subgraph(){return this.metadata().isFed2Schema()}addFederationOperations(){const e=this.metadata();for(const e of t.FEDERATION_OPERATION_TYPES)e.checkOrAdd(this.schema);const n=this.schema.schemaDefinition.root("query"),r=n?n.type:this.schema.addType(new i.ObjectType("Query")),o=r.field(t.entitiesFieldName),s=e.entityType();if(s){const n=new i.NonNullType(new i.ListType(s));o?o.type||(o.type=s):r.addField(t.entitiesFieldName,n).addArgument("representations",new i.NonNullType(new i.ListType(new i.NonNullType(e.anyType()))))}else o&&o.remove();r.field(t.serviceFieldName)||r.addField(t.serviceFieldName,new i.NonNullType(e.serviceType()))}validate(){try{return this.addFederationOperations(),this.schema.validate(),this}catch(e){throw e instanceof s.GraphQLError?Z(e,this.name,d.ERRORS.INVALID_GRAPHQL):e}}isPrintedDirective(e){var t;if(this.metadata().allFederationDirectives().includes(e))return!1;const n=this.schema.coreFeatures;return!n||(null===(t=n.sourceFeature(e))||void 0===t?void 0:t.feature.url.identity)!==h.linkIdentity}isPrintedType(e){var t;if(this.metadata().allFederationTypes().includes(e))return!1;if((0,i.isObjectType)(e)&&e.isQueryRootType()&&0===e.fields().filter((e=>!U(e))).length)return!1;const n=this.schema.coreFeatures;return!n||(null===(t=n.sourceFeature(e))||void 0===t?void 0:t.feature.url.identity)!==h.linkIdentity}isPrintedDirectiveApplication(e){if(!this.schema.coreFeatures||e.name!==T.url.name)return!0;const t=e.arguments();let n;if("url"in t)try{n=h.FeatureUrl.parse(t.url)}catch(e){}return!((null==n?void 0:n.identity)===h.linkIdentity&&1===Object.keys(t).length)}toString(e=y.defaultPrintOptions){return(0,y.printSchema)(this.schema,{...e,directiveDefinitionFilter:e=>this.isPrintedDirective(e),typeFilter:e=>this.isPrintedType(e),fieldFilter:e=>!U(e),directiveApplicationFilter:e=>this.isPrintedDirectiveApplication(e)})}}function W(e,t){return"subgraph"in e?e:{...e,subgraph:t}}function Z(e,t,n){const r=(0,d.errorCauses)(e).map((e=>{var i;const r=`[${t}] ${e.message}`,o=e.nodes?e.nodes.map((e=>W(e,t))):void 0,a=null!==(i=(0,d.errorCodeDef)(e))&&void 0!==i?i:n,c={...(0,d.extractGraphQLErrorOptions)(e),nodes:o,originalError:e};return a?a.err(r,c):new s.GraphQLError(r,c)}));return 1===r.length?r[0]:(0,i.ErrGraphQLValidationFailed)(r)}t.Subgraph=J,t.addSubgraphToASTNode=W,t.addSubgraphToError=Z;class ee{constructor(e){this.schema=e,this.fakeExternalFields=new Set,this.providedFields=new Set,this.externalDirective=this.metadata().externalDirective(),this.collectFakeExternals(),this.collectProvidedFields()}metadata(){const e=P(this.schema);return(0,r.assert)(e,"Schema should be a subgraphs schema"),e}collectFakeExternals(){const e=this.metadata(),t=e.extendsDirective();for(const n of e.keyDirective().applications()){const e=n.parent;(n.ofExtension()||e.hasAppliedDirective(t))&&H({parentType:e,directive:n,includeInterfaceFieldsImplementations:!1,validate:!1}).filter((e=>e.hasAppliedDirective(this.externalDirective))).forEach((e=>this.fakeExternalFields.add(e.coordinate)))}}collectProvidedFields(){for(const e of this.metadata().providesDirective().applications()){const t=e.parent;H({parentType:(0,i.baseType)(t.type),directive:e,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>this.providedFields.add(e.coordinate)))}}isExternal(e){return e.hasAppliedDirective(this.externalDirective)&&!this.isFakeExternal(e)}isFakeExternal(e){return this.fakeExternalFields.has(e.coordinate)}selectsAnyExternalField(e){for(const t of e.selections()){if("FieldSelection"===t.kind&&this.isExternal(t.element().definition))return!0;if(t.selectionSet&&this.selectsAnyExternalField(t.selectionSet))return!0}return!1}isPartiallyExternal(e){return this.isExternal(e)&&this.providedFields.has(e.coordinate)}isFullyExternal(e){return this.isExternal(e)&&!this.providedFields.has(e.coordinate)}}function te(e,t,n,i){for(const r of t.appliedDirectivesOf(e)){let o;try{o=Y({parentType:n,directive:r})}catch(e){continue}if(ie(o)){r.remove();const n=re(o);if(n.isEmpty())i(t,r);else{const o=t.applyDirective(e,{fields:n.toString(!0,!1)});i(t,r,o)}}}}function ne(e){const t=P(e.schema());if(!t)return!1;if(e.hasAppliedDirective(t.externalDirective()))return!0;const n=e.parent;if((0,i.isInterfaceType)(n))for(const i of n.possibleRuntimeTypes()){const n=i.field(e.name);if(n&&n.hasAppliedDirective(t.externalDirective()))return!0}return!1}function ie(e){return e.selections().some((e=>"FieldSelection"===e.kind?!ne(e.field.definition)&&(!e.selectionSet||ie(e.selectionSet)):ie(e.selectionSet)))}function re(e){const t=new l.SelectionSet(e.parentType);for(const n of e.selections())if("FieldSelection"===n.kind&&ne(n.field.definition))t.add(n);else if(n.selectionSet){const e=re(n.selectionSet);e.isEmpty()||t.add((0,l.selectionOfElement)(n.element(),e))}return t}t.removeInactiveProvidesAndRequires=function(e,t=(()=>{})){const n=P(e);if(!n)return;const r=n.providesDirective(),o=n.requiresDirective();for(const n of e.types())if((0,i.isObjectType)(n)||(0,i.isInterfaceType)(n))for(const e of n.fields())te(r,e,(0,i.baseType)(e.type),t),te(o,e,n,t)}},9480:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FEDERATION_VERSIONS=t.FederationSpecDefinition=t.FEDERATION_SPEC_TYPES=t.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES=t.FEDERATION2_SPEC_DIRECTIVES=t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES=t.FEDERATION2_ONLY_SPEC_DIRECTIVES=t.composeDirectiveSpec=t.overrideDirectiveSpec=t.shareableDirectiveSpec=t.providesDirectiveSpec=t.requiresDirectiveSpec=t.externalDirectiveSpec=t.extendsDirectiveSpec=t.keyDirectiveSpec=t.fieldSetTypeSpec=t.federationIdentity=void 0;const i=n(4177),r=n(9209),o=n(3208),s=n(8929),a=n(9724),c=n(1697),l=n(4408),u=n(5848),p=n(5322);function d(e){return{name:"fields",type:f(e)}}function f(e){const t=(0,l.federationMetadata)(e);return(0,a.assert)(t,"The schema is not a federation subgraph"),new i.NonNullType(t.fieldSetType())}t.federationIdentity="https://specs.apollo.dev/federation",t.fieldSetTypeSpec=(0,o.createScalarTypeSpecification)({name:"FieldSet"}),t.keyDirectiveSpec=(0,o.createDirectiveSpecification)({name:"key",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.INTERFACE],repeatable:!0,argumentFct:e=>({args:[d(e),{name:"resolvable",type:e.booleanType(),defaultValue:!0}],errors:[]})}),t.extendsDirectiveSpec=(0,o.createDirectiveSpecification)({name:"extends",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.INTERFACE]}),t.externalDirectiveSpec=(0,o.createDirectiveSpecification)({name:"external",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[{name:"reason",type:e.stringType()}],errors:[]})}),t.requiresDirectiveSpec=(0,o.createDirectiveSpecification)({name:"requires",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[d(e)],errors:[]})}),t.providesDirectiveSpec=(0,o.createDirectiveSpecification)({name:"provides",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[d(e)],errors:[]})}),t.shareableDirectiveSpec=(0,o.createDirectiveSpecification)({name:"shareable",locations:[s.DirectiveLocation.OBJECT,s.DirectiveLocation.FIELD_DEFINITION]}),t.overrideDirectiveSpec=(0,o.createDirectiveSpecification)({name:"override",locations:[s.DirectiveLocation.FIELD_DEFINITION],argumentFct:e=>({args:[{name:"from",type:new i.NonNullType(e.stringType())}],errors:[]})}),t.composeDirectiveSpec=(0,o.createDirectiveSpecification)({name:"composeDirective",locations:[s.DirectiveLocation.SCHEMA],repeatable:!0,argumentFct:e=>({args:[{name:"name",type:e.stringType()}],errors:[]})}),t.FEDERATION2_ONLY_SPEC_DIRECTIVES=[t.shareableDirectiveSpec,p.INACCESSIBLE_VERSIONS.latest().inaccessibleDirectiveSpec,t.overrideDirectiveSpec],t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES=[t.composeDirectiveSpec];const h=[t.keyDirectiveSpec,t.requiresDirectiveSpec,t.providesDirectiveSpec,t.externalDirectiveSpec,c.TAG_VERSIONS.latest().tagDirectiveSpec,t.extendsDirectiveSpec];t.FEDERATION2_SPEC_DIRECTIVES=[...h,...t.FEDERATION2_ONLY_SPEC_DIRECTIVES,...t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES],t.ALL_FEDERATION_DIRECTIVES_DEFAULT_NAMES=t.FEDERATION2_SPEC_DIRECTIVES.map((e=>e.name)),t.FEDERATION_SPEC_TYPES=[t.fieldSetTypeSpec];class m extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.federationIdentity,"federation",e))}allFedDirectives(){return h.concat(t.FEDERATION2_ONLY_SPEC_DIRECTIVES).concat(this.url.version>=new r.FeatureVersion(2,1)?t.FEDERATION2_1_ONLY_SPEC_DIRECTIVES:[])}addElementsToSchema(e){const n=this.featureInSchema(e);(0,a.assert)(n,"The federation specification should have been added to the schema before this is called");let i=[];i=i.concat(this.addTypeSpec(e,t.fieldSetTypeSpec));for(const t of this.allFedDirectives())i=i.concat(this.addDirectiveSpec(e,t));return i}allElementNames(){return this.allFedDirectives().map((e=>`@${e.name}`)).concat([t.fieldSetTypeSpec.name])}}t.FederationSpecDefinition=m,t.FEDERATION_VERSIONS=new r.FeatureDefinitions(t.federationIdentity).add(new m(new r.FeatureVersion(2,0))).add(new m(new r.FeatureVersion(2,1))),(0,u.registerKnownFeature)(t.FEDERATION_VERSIONS)},9535:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.graphQLJSDirectiveToAST=t.graphQLJSNamedTypeToAST=t.graphQLJSSchemaToAST=void 0;const i=n(8929),r=n(4177),o=[i.OperationTypeNode.QUERY,i.OperationTypeNode.MUTATION,i.OperationTypeNode.SUBSCRIPTION];function s({definition:e,extensions:t}){return e?[e,...t]:t}function a(e){return e||void 0}function c(e){return e.astNode||e.extensionASTNodes.length>0?{definition:a(e.astNode),extensions:e.extensionASTNodes}:{definition:(0,i.parse)((0,i.printType)(e)).definitions[0],extensions:[]}}function l(e){if(e.astNode)return e.astNode;{const t=new i.GraphQLSchema({directives:[e],assumeValid:!0});return(0,i.parse)((0,i.printSchema)(t)).definitions.find((e=>e.kind===i.Kind.DIRECTIVE_DEFINITION))}}t.graphQLJSSchemaToAST=function(e){const t=Object.values(e.getTypeMap()).filter((e=>!(0,i.isIntrospectionType)(e)&&!(0,i.isSpecifiedScalarType)(e))),n=e.getDirectives().filter((e=>!(0,i.isSpecifiedDirective)(e))),u=s(function(e){if(e.astNode||e.extensionASTNodes.length>0)return{definition:a(e.astNode),extensions:e.extensionASTNodes};{let t;if(function(e){return o.some((t=>{return i=t,!!(n=e.getRootType(t))&&n.name!==(0,r.defaultRootName)(i);var n,i}))}(e)){const n=[];for(const t of o){const r=e.getRootType(t);r&&n.push({kind:i.Kind.OPERATION_TYPE_DEFINITION,operation:t,type:{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:r.name}}})}t={kind:i.Kind.SCHEMA_DEFINITION,description:e.description?{kind:i.Kind.STRING,value:e.description}:void 0,operationTypes:n}}return{definition:t,extensions:[]}}}(e)),p=t.map((e=>s(c(e)))).flat(),d=n.map((e=>l(e)));return{kind:i.Kind.DOCUMENT,definitions:[...u,...p,...d]}},t.graphQLJSNamedTypeToAST=c,t.graphQLJSDirectiveToAST=l},5322:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeInaccessibleElements=t.INACCESSIBLE_VERSIONS=t.InaccessibleSpecDefinition=t.inaccessibleIdentity=void 0;const i=n(9209),r=n(4177),o=n(8929),s=n(5848),a=n(8116),c=n(3208),l=n(9724);t.inaccessibleIdentity="https://specs.apollo.dev/inaccessible";class u extends i.FeatureDefinition{constructor(e){super(new i.FeatureUrl(t.inaccessibleIdentity,"inaccessible",e)),this.inaccessibleLocations=[o.DirectiveLocation.FIELD_DEFINITION,o.DirectiveLocation.OBJECT,o.DirectiveLocation.INTERFACE,o.DirectiveLocation.UNION],this.printedInaccessibleDefinition="directive @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION",this.isV01()||(this.inaccessibleLocations.push(o.DirectiveLocation.ARGUMENT_DEFINITION,o.DirectiveLocation.SCALAR,o.DirectiveLocation.ENUM,o.DirectiveLocation.ENUM_VALUE,o.DirectiveLocation.INPUT_OBJECT,o.DirectiveLocation.INPUT_FIELD_DEFINITION),this.printedInaccessibleDefinition="directive @inaccessible on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION"),this.inaccessibleDirectiveSpec=(0,c.createDirectiveSpecification)({name:"inaccessible",locations:this.inaccessibleLocations})}isV01(){return this.version.equals(new i.FeatureVersion(0,1))}addElementsToSchema(e){return this.addDirectiveSpec(e,this.inaccessibleDirectiveSpec)}inaccessibleDirective(e){return this.directive(e,"inaccessible")}checkCompatibleDirective(e){const t=Object.keys(e.arguments()).length>0,n=e.repeatable,i=e.locations.every((e=>this.inaccessibleLocations.includes(e)));if(t||n||!i)return a.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Found invalid @inaccessible directive definition. Please ensure the directive definition in your schema's definitions matches the following:\n\t${this.printedInaccessibleDefinition}`)}allElementNames(){return["@inaccessible"]}get defaultCorePurpose(){return"SECURITY"}}function p(e){const t=[];return d(e.defaultValue,function(e){const t=e.type;return(0,l.assert)(t,"Schema should have been valid, but argument/input field did not have type."),t}(e),t),t}function d(e,t,n){if(null!=e){if((0,r.isNonNullType)(t))return d(e,t.ofType,n);if(!(0,r.isScalarType)(t)&&!(0,r.isVariable)(e))if(Array.isArray(e)){if((0,r.isListType)(t)){const i=t.ofType;for(const t of e)d(t,i,n)}}else{if((0,r.isListType)(t))return d(e,t.ofType,n);if("object"!=typeof e){if("string"!=typeof e);else if((0,r.isEnumType)(t)){const i=t.value(e);void 0!==i&&n.push(i)}}else if((0,r.isInputObjectType)(t))for(const i of t.fields()){const t=e[i.name];void 0!==t&&(n.push(i),d(t,i.type,n))}}}}function f(e){const t=e.schema();return e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.EnumType||e instanceof r.InputObjectType?t.builtInTypes(!0).some((t=>t.name===e.name)):e instanceof r.DirectiveDefinition?t.builtInDirectives(!0).some((t=>t.name===e.name)):void(0,l.assert)(!1,"Unreachable code, element is of unknown type.")}t.InaccessibleSpecDefinition=u,t.INACCESSIBLE_VERSIONS=new i.FeatureDefinitions(t.inaccessibleIdentity).add(new u(new i.FeatureVersion(0,1))).add(new u(new i.FeatureVersion(0,2))),(0,s.registerKnownFeature)(t.INACCESSIBLE_VERSIONS),t.removeInaccessibleElements=function(e){e.validate();const n=e.coreFeatures;if(!n)return;const i=n.getByIdentity(t.inaccessibleIdentity);if(!i)return;const s=t.INACCESSIBLE_VERSIONS.find(i.url.version);if(!s)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([new o.GraphQLError(`Cannot remove inaccessible elements: the schema uses unsupported inaccessible spec version ${i.url.version} (supported versions: ${t.INACCESSIBLE_VERSIONS.versions().join(", ")})`)]);const c=s.inaccessibleDirective(e);if(!c)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([new o.GraphQLError(`Invalid schema: declares ${s.url} spec but does not define a @inaccessible directive.`)]);const u=s.checkCompatibleDirective(c);if(u)throw(0,r.ErrGraphQLAPISchemaValidationFailed)([u]);!function(e,t,n,i){var o,s,c;function u(e){return e.hasAppliedDirective(i)}const d=[...t.allFeatures()];function h(e){return d.some((t=>t.isFeatureDefinition(e)))}function m(e){return(e instanceof r.DirectiveDefinition||!u(e))&&(e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.EnumType||e instanceof r.InputObjectType||e instanceof r.DirectiveDefinition||(e instanceof r.FieldDefinition||e instanceof r.ArgumentDefinition||e instanceof r.InputFieldDefinition||e instanceof r.EnumValue?m(e.parent):void(0,l.assert)(!1,"Unreachable code, element is of unknown type.")))}function y(e){const t=[];if(u(e)&&t.push(e),e instanceof r.ObjectType||e instanceof r.InterfaceType||e instanceof r.InputObjectType){for(const n of e.fields())t.push(...y(n));return t}if(e instanceof r.EnumType){for(const n of e.values)t.push(...y(n));return t}if(e instanceof r.DirectiveDefinition||e instanceof r.FieldDefinition){for(const n of e.arguments())t.push(...y(n));return t}if(e instanceof r.UnionType||e instanceof r.ScalarType||e instanceof r.ArgumentDefinition||e instanceof r.InputFieldDefinition||e instanceof r.EnumValue)return t;(0,l.assert)(!1,"Unreachable code, element is of unknown type.")}const v=[];let E;n.isV01()||(E=function(e){const t=new Map;function n(e,n){var i;const r=null!==(i=t.get(e))&&void 0!==i?i:[];0===r.length&&t.set(e,r),r.push(n)}for(const t of e.allTypes())if(!f(t)){if(t instanceof r.ObjectType||t instanceof r.InterfaceType)for(const e of t.fields())for(const t of e.arguments())for(const e of p(t))n(e,t);if(t instanceof r.InputObjectType)for(const e of t.fields())for(const t of p(e))n(t,e)}for(const t of e.allDirectives())if(!f(t))for(const e of t.arguments())for(const t of p(e))n(t,e);return t}(e));for(const t of e.allTypes())if(f(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Built-in type "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(h(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Core feature type "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(u(t)){const e=t.referencers();for(const n of e)n instanceof r.FieldDefinition||n instanceof r.ArgumentDefinition||n instanceof r.InputFieldDefinition?m(n)&&v.push(a.ERRORS.REFERENCED_INACCESSIBLE.err(`Type "${t.coordinate}" is @inaccessible but is referenced by "${n.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[n.coordinate]}})):n instanceof r.SchemaDefinition&&t===n.rootType("query")&&v.push(a.ERRORS.QUERY_ROOT_TYPE_INACCESSIBLE.err(`Type "${t.coordinate}" is @inaccessible but is the root query type, which must be in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate]}}))}else{if(t instanceof r.ObjectType||t instanceof r.InterfaceType||t instanceof r.InputObjectType){let e=!0;for(const n of t.fields())u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its ${t instanceof r.InputObjectType?"input ":""}fields are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.fields().map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(t instanceof r.UnionType){let e=!0;for(const n of t.types())u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its members are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.types().map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(t instanceof r.EnumType){let e=!0;for(const n of t.values)u(n)||(e=!1);e&&v.push(a.ERRORS.ONLY_INACCESSIBLE_CHILDREN.err(`Type "${t.coordinate}" is in the API schema but all of its values are @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:t.values.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}if(t instanceof r.ObjectType||t instanceof r.InterfaceType){const e=t.interfaces(),n=[];if(t instanceof r.InterfaceType)for(const e of t.referencers())(e instanceof r.ObjectType||e instanceof r.InterfaceType)&&n.push(e);for(const i of t.fields())if(u(i))for(const t of e){const e=t.field(i.name);e&&m(e)&&v.push(a.ERRORS.IMPLEMENTED_BY_INACCESSIBLE.err(`Field "${i.coordinate}" is @inaccessible but implements the interface field "${e.coordinate}", which is in the API schema.`,{nodes:i.sourceAST,extensions:{inaccessible_elements:[i.coordinate],inaccessible_referencers:[e.coordinate]}}))}else for(const t of i.arguments())if(u(t)){t.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but is a required argument of its field.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[t.coordinate]}}));for(const e of n){const n=e.field(i.name);(0,l.assert)(n,"Schema should have been valid, but an implementing type did not implement one of this type's fields.");const r=n.argument(t.name);(0,l.assert)(r,"Schema should have been valid, but an implementing type did not implement one of this type's field's arguments."),m(r)&&r.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but is implemented by the required argument "${r.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[r.coordinate]}}))}for(const n of e){const e=null===(o=n.field(i.name))||void 0===o?void 0:o.argument(t.name);e&&m(e)&&v.push(a.ERRORS.IMPLEMENTED_BY_INACCESSIBLE.err(`Argument "${t.coordinate}" is @inaccessible but implements the interface argument "${e.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[e.coordinate]}}))}}}else if(t instanceof r.InputObjectType){for(const e of t.fields())if(u(e)){e.isRequired()&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Input field "${e.coordinate}" is @inaccessible but is a required input field of its type.`,{nodes:e.sourceAST,extensions:{inaccessible_elements:[e.coordinate],inaccessible_referencers:[e.coordinate]}})),(0,l.assert)(E,"Input fields can't be @inaccessible in v0.1, but default value referencers weren't computed (which is only skipped for v0.1).");const n=null!==(s=E.get(e))&&void 0!==s?s:[];for(const i of n)m(i)&&v.push(a.ERRORS.DEFAULT_VALUE_USES_INACCESSIBLE.err(`Input field "${e.coordinate}" is @inaccessible but is used in the default value of "${i.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[i.coordinate]}}))}}else if(t instanceof r.EnumType)for(const e of t.values)if(u(e)){(0,l.assert)(E,"Enum values can't be @inaccessible in v0.1, but default value referencers weren't computed (which is only skipped for v0.1).");const n=null!==(c=E.get(e))&&void 0!==c?c:[];for(const i of n)m(i)&&v.push(a.ERRORS.DEFAULT_VALUE_USES_INACCESSIBLE.err(`Enum value "${e.coordinate}" is @inaccessible but is used in the default value of "${i.coordinate}", which is in the API schema.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:[t.coordinate],inaccessible_referencers:[i.coordinate]}}))}}for(const t of e.allDirectives()){const e=t.locations.filter((e=>(0,r.isTypeSystemDirectiveLocation)(e)));if(f(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Built-in directive "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(h(t)){const e=y(t);e.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Core feature directive "${t.coordinate}" cannot use @inaccessible.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:e.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else if(e.length>0){const n=y(t);n.length>0&&v.push(a.ERRORS.DISALLOWED_INACCESSIBLE.err(`Directive "${t.coordinate}" cannot use @inaccessible because it may be applied to these type-system locations: ${e.join(", ")}.`,{nodes:t.sourceAST,extensions:{inaccessible_elements:n.map((e=>e.coordinate)),inaccessible_referencers:[t.coordinate]}}))}else for(const e of t.arguments())e.isRequired()&&u(e)&&v.push(a.ERRORS.REQUIRED_INACCESSIBLE.err(`Argument "${e.coordinate}" is @inaccessible but is a required argument of its directive.`,{nodes:e.sourceAST,extensions:{inaccessible_elements:[e.coordinate],inaccessible_referencers:[e.coordinate]}}))}if(v.length>0)throw(0,r.ErrGraphQLAPISchemaValidationFailed)(v)}(e,n,s,c),function(e,t){function n(e){return e.hasAppliedDirective(t)}for(const t of e.types())if(n(t))t.remove();else if(t instanceof r.ObjectType||t instanceof r.InterfaceType)for(const e of t.fields())if(n(e))e.remove();else for(const t of e.arguments())n(t)&&t.remove();else if(t instanceof r.InputObjectType)for(const e of t.fields())n(e)&&e.remove();else if(t instanceof r.EnumType)for(const e of t.values)n(e)&&e.remove();for(const t of e.directives())for(const e of t.arguments())n(e)&&e.remove()}(e,c)}},415:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(4177),t),r(n(7964),t),r(n(2850),t),r(n(3421),t),r(n(4408),t),r(n(5811),t),r(n(758),t),r(n(9724),t),r(n(2116),t),r(n(9209),t),r(n(6920),t),r(n(1697),t),r(n(5322),t),r(n(9480),t),r(n(9624),t),r(n(8220),t),r(n(8116),t),r(n(5015),t),r(n(5388),t),r(n(9535),t)},9495:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addIntrospectionFields=t.isIntrospectionName=t.introspectionFieldNames=void 0;const i=n(8929),r=n(4177);t.introspectionFieldNames=["__schema","__type"],t.isIntrospectionName=function(e){return e.startsWith("__")},t.addIntrospectionFields=function(e){if(e.type("__Schema"))return;const t=e.addType(new r.EnumType("__TypeKind",!0));t.addValue("SCALAR"),t.addValue("OBJECT"),t.addValue("INTERFACE"),t.addValue("UNION"),t.addValue("ENUM"),t.addValue("INPUT_OBJECT"),t.addValue("LIST"),t.addValue("NON_NULL");const n=e.addType(new r.ObjectType("__InputValue",!0)),o=e.addType(new r.ObjectType("__Field",!0)),s=e.addType(new r.ObjectType("__Type",!0)),a=e.addType(new r.ObjectType("__EnumValue",!0));s.addField("kind",new r.NonNullType(t)),s.addField("name",e.stringType()),s.addField("description",e.stringType()),s.addField("fields",new r.ListType(new r.NonNullType(o))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("interfaces",new r.ListType(new r.NonNullType(s))),s.addField("possibleTypes",new r.ListType(new r.NonNullType(s))),s.addField("enumValues",new r.ListType(new r.NonNullType(a))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("inputFields",new r.ListType(new r.NonNullType(n))).addArgument("includeDeprecated",e.booleanType(),!1),s.addField("ofType",s),s.addField("specifiedByURL",e.stringType()),o.addField("name",new r.NonNullType(e.stringType())),o.addField("description",e.stringType()),o.addField("args",new r.NonNullType(new r.ListType(new r.NonNullType(n)))).addArgument("includeDeprecated",e.booleanType(),!1),o.addField("type",new r.NonNullType(s)),o.addField("isDeprecated",new r.NonNullType(e.booleanType())),o.addField("deprecationReason",e.stringType()),n.addField("name",new r.NonNullType(e.stringType())),n.addField("description",e.stringType()),n.addField("type",new r.NonNullType(s)),n.addField("defaultValue",e.stringType()),n.addField("isDeprecated",new r.NonNullType(e.booleanType())),n.addField("deprecationReason",e.stringType()),a.addField("name",new r.NonNullType(e.stringType())),a.addField("description",e.stringType()),a.addField("isDeprecated",new r.NonNullType(e.booleanType())),a.addField("deprecationReason",e.stringType());const c=e.addType(new r.EnumType("__DirectiveLocation",!0));for(const e of Object.values(i.DirectiveLocation))c.addValue(e);const l=e.addType(new r.ObjectType("__Directive",!0));l.addField("name",new r.NonNullType(e.stringType())),l.addField("description",e.stringType()),l.addField("locations",new r.NonNullType(new r.ListType(new r.NonNullType(c)))),l.addField("args",new r.NonNullType(new r.ListType(new r.NonNullType(n)))).addArgument("includeDeprecated",e.booleanType(),!1),l.addField("isRepeatable",new r.NonNullType(e.booleanType()));const u=e.addType(new r.ObjectType("__Schema",!0));u.addField("description",e.stringType()),u.addField("types",new r.NonNullType(new r.ListType(new r.NonNullType(s)))),u.addField("queryType",new r.NonNullType(s)),u.addField("mutationType",new r.NonNullType(s)),u.addField("subscriptionType",new r.NonNullType(s)),u.addField("directives",new r.NonNullType(new r.ListType(new r.NonNullType(l))));let p=e.schemaDefinition.rootType("query");p||(p=e.addType(new r.ObjectType("Query")),e.schemaDefinition.setRoot("query",p)),p.addField(new r.FieldDefinition("__schema",!0),new r.NonNullType(u)),p.addField(new r.FieldDefinition("__type",!0),s).addArgument("name",new r.NonNullType(e.stringType()))}},6920:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JOIN_VERSIONS=t.JoinSpecDefinition=t.joinIdentity=void 0;const i=n(8929),r=n(9209),o=n(4177),s=n(5848),a=n(9724);function c(e){const t=e.replace(/[\W]/g,"_"),n=t.match(/^\d/)?"_"+t:t;return(n.match(/_\d+$/)?n+"_":n).toLocaleUpperCase()}t.joinIdentity="https://specs.apollo.dev/join";class l extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.joinIdentity,"join",e))}isV01(){return this.version.equals(new r.FeatureVersion(0,1))}addElementsToSchema(e){const t=this.addDirective(e,"graph").addLocations(i.DirectiveLocation.ENUM_VALUE);t.addArgument("name",new o.NonNullType(e.stringType())),t.addArgument("url",new o.NonNullType(e.stringType()));const n=this.addEnumType(e,"Graph"),r=this.addScalarType(e,"FieldSet"),s=this.addDirective(e,"type").addLocations(i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION,i.DirectiveLocation.ENUM,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.SCALAR);this.isV01()||(s.repeatable=!0),s.addArgument("graph",new o.NonNullType(n)),s.addArgument("key",r),this.isV01()||(s.addArgument("extension",new o.NonNullType(e.booleanType()),!1),s.addArgument("resolvable",new o.NonNullType(e.booleanType()),!0));const a=this.addDirective(e,"field").addLocations(i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.INPUT_FIELD_DEFINITION);if(a.repeatable=!0,a.addArgument("graph",new o.NonNullType(n)),a.addArgument("requires",r),a.addArgument("provides",r),this.isV01()||(a.addArgument("type",e.stringType()),a.addArgument("external",e.booleanType()),a.addArgument("override",e.stringType()),a.addArgument("usedOverridden",e.booleanType())),!this.isV01()){const t=this.addDirective(e,"implements").addLocations(i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE);t.repeatable=!0,t.addArgument("graph",new o.NonNullType(n)),t.addArgument("interface",new o.NonNullType(e.stringType()))}return this.isV01()&&this.addDirective(e,"owner").addLocations(i.DirectiveLocation.OBJECT).addArgument("graph",new o.NonNullType(n)),[]}allElementNames(){const e=["graph","Graph","FieldSet","@type","@field"];return this.isV01()?e.push("@owner"):e.push("@implements"),e}populateGraphEnum(e,t){const n=new a.MultiMap;for(const e of t){const t=c(e.name);n.add(t,e)}const i=new Map;for(const[e,t]of n)if(1===t.length)i.set(t[0].name,e);else for(const[n,r]of t.entries())i.set(r.name,`${e}_${n+1}`);const r=this.graphEnum(e),o=this.graphDirective(e);for(const e of t)r.addValue(i.get(e.name)).applyDirective(o,{name:e.name,url:e.url});return i}fieldSetScalar(e){return this.type(e,"FieldSet")}graphEnum(e){return this.type(e,"Graph")}graphDirective(e){return this.directive(e,"graph")}typeDirective(e){return this.directive(e,"type")}implementsDirective(e){return this.directive(e,"implements")}fieldDirective(e){return this.directive(e,"field")}ownerDirective(e){return this.directive(e,"owner")}get defaultCorePurpose(){return"EXECUTION"}}t.JoinSpecDefinition=l,t.JOIN_VERSIONS=new r.FeatureDefinitions(t.joinIdentity).add(new l(new r.FeatureVersion(0,1))).add(new l(new r.FeatureVersion(0,2))),(0,s.registerKnownFeature)(t.JOIN_VERSIONS)},5848:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.coreFeatureDefinitionIfKnown=t.registerKnownFeature=void 0;const n=new Map;t.registerKnownFeature=function(e){n.has(e.identity)||n.set(e.identity,e)},t.coreFeatureDefinitionIfKnown=function(e){var t;return null===(t=n.get(e.identity))||void 0===t?void 0:t.find(e.version)}},758:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.operationToDocument=t.parseSelectionSet=t.parseOperation=t.operationFromDocument=t.FragmentSelection=t.FieldSelection=t.selectionOfElement=t.selectionSetOfElement=t.allFieldDefinitionsInSelectionSet=t.SelectionSet=t.NamedFragments=t.NamedFragmentDefinition=t.selectionSetOf=t.Operation=t.concatOperationPaths=t.conditionalDirectivesInOperationPath=t.sameOperationPaths=t.FragmentElement=t.Field=void 0;const i=n(8929),r=n(4177),o=n(8116),s=n(5811),a=n(9724),c=n(3421);function l(e,t,n){if(!e)throw o.ERRORS.INVALID_GRAPHQL.err(t(),{nodes:n})}function u(e,t){return(0,r.sameDirectiveApplications)(e.appliedDirectives,t.appliedDirectives)}class p extends r.DirectiveTargetElement{constructor(e,t){super(e),this.variablesInElement=t}variables(){return(0,r.mergeVariables)(this.variablesInElement,this.variablesInAppliedDirectives())}addAttachement(e,t){this.attachements||(this.attachements=new Map),this.attachements.set(e,t)}getAttachement(e){var t;return null===(t=this.attachements)||void 0===t?void 0:t.get(e)}copyAttachementsTo(e){if(this.attachements)for(const[t,n]of this.attachements.entries())e.addAttachement(t,n)}}class d extends p{constructor(e,t=Object.create(null),n=new r.VariableDefinitions,i){super(e.schema(),(0,r.variablesInArguments)(t)),this.definition=e,this.args=t,this.variableDefinitions=n,this.alias=i,this.kind="Field"}get name(){return this.definition.name}responseName(){return this.alias?this.alias:this.name}get parentType(){return this.definition.parent}withUpdatedDefinition(e){const t=new d(e,this.args,this.variableDefinitions,this.alias);for(const e of this.appliedDirectives)t.applyDirective(e.definition,e.arguments());return this.copyAttachementsTo(t),t}appliesTo(e){const t=e.field(this.name);return!!t&&this.selects(t)}selects(e,t=!1){if(e==this.definition)return!0;if(this.name!==e.name)return!1;for(const n of e.arguments()){const e=this.args[n.name];if(void 0===e){if(void 0===n.defaultValue&&!(0,r.isNullableType)(n.type))return!1}else if(!t&&!(0,c.isValidValue)(e,n,this.variableDefinitions))return!1}if(!t)for(const[t,n]of Object.entries(this.args))if(null!==n&&void 0===e.argument(t))return!1;return!0}validate(){l(this.name===this.definition.name,(()=>`Field name "${this.name}" cannot select field "${this.definition.coordinate}: name mismatch"`));for(const e of this.definition.arguments()){const t=this.args[e.name];void 0===t?l(void 0!==e.defaultValue||(0,r.isNullableType)(e.type),(()=>`Missing mandatory value for argument "${e.name}" of field "${this.definition.coordinate}" in selection "${this}"`)):l((0,c.isValidValue)(t,e,this.variableDefinitions),(()=>`Invalid value ${(0,c.valueToString)(t)} for argument "${e.coordinate}" of type ${e.type}`))}for(const[e,t]of Object.entries(this.args))l(null===t||void 0!==this.definition.argument(e),(()=>`Unknown argument "${e}" in field application of "${this.name}"`))}updateForAddingTo(e){const t=e.parentType,n=this.definition.parent;if(t===n)return this;if(this.name===r.typenameFieldName)return this.withUpdatedDefinition(t.typenameField());l(t.name==n.name||(0,r.isInterfaceType)(n)&&n.allImplementations().some((e=>e.name==t.name)),(()=>`Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${e.parentType}"`));const i=t.field(this.name);return l(i,(()=>`Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${t}" (that does not declare that field)`)),this.withUpdatedDefinition(i)}hasDefer(){return!1}deferDirectiveArgs(){}withoutDefer(){return this}equals(e){return this===e||"Field"===e.kind&&this.name===e.name&&this.alias===e.alias&&(0,c.argumentsEquals)(this.args,e.args)&&u(this,e)}toString(){const e=this.alias?this.alias+": ":"",t=Object.entries(this.args),n=0==t.length?"":"("+t.map((([e,t])=>{var n;return`${e}: ${(0,c.valueToString)(t,null===(n=this.definition.argument(e))||void 0===n?void 0:n.type)}`})).join(", ")+")";return e+this.name+n+this.appliedDirectivesToString()}}t.Field=d;class f extends p{constructor(e,t){super(e.schema(),[]),this.sourceType=e,this.kind="FragmentElement",this.typeCondition=void 0!==t&&"string"==typeof t?this.schema().type(t):t}get parentType(){return this.sourceType}castedType(){return this.typeCondition?this.typeCondition:this.sourceType}withUpdatedSourceType(e){var t;const n=new f(e,null===(t=this.typeCondition)||void 0===t?void 0:t.name);for(const e of this.appliedDirectives)n.applyDirective(e.definition,e.arguments());return this.copyAttachementsTo(n),n}updateForAddingTo(e){const t=e.parentType,n=this.parentType,i=this.typeCondition;return t!=n?(l(!i||(0,r.runtimeTypesIntersects)(t,i),(()=>`Cannot add fragment of parent type "${this.parentType}" to selection set of parent type "${e.parentType}"`)),this.withUpdatedSourceType(t)):this}hasDefer(){return this.hasAppliedDirective("defer")}hasStream(){return this.hasAppliedDirective("stream")}deferDirectiveArgs(){var e;return null===(e=this.appliedDirectivesOf(this.schema().deferDirective())[0])||void 0===e?void 0:e.arguments()}withoutDefer(){const e=this.schema().deferDirective().name,t=this.appliedDirectives.filter((t=>t.name!==e));if(!this.typeCondition&&0===t.length)return;if(t.length===this.appliedDirectives.length)return this;const n=new f(this.sourceType,this.typeCondition);return this.copyAttachementsTo(n),t.forEach((e=>n.applyDirective(e.definition,e.arguments()))),n}withNormalizedDefer(e){const t=this.deferDirectiveArgs();if(!t)return this;let n,i;if(void 0!==t.if)if("boolean"==typeof t.if){if(!t.if)return this.withoutDefer();n={...t,if:void 0}}else i=t.if;let r=t.label;if(r||(r=e.newLabel(),n?n.label=r:n={...t,label:r}),i&&e.registerCondition(r,i),!n)return this;const o=new f(this.sourceType,this.typeCondition);this.copyAttachementsTo(o);const s=this.schema().deferDirective();return this.appliedDirectives.filter((e=>e.name!==s.name)).forEach((e=>o.applyDirective(e.definition,e.arguments()))),o.applyDirective(this.schema().deferDirective(),n),o}equals(e){var t,n;return this===e||"FragmentElement"===e.kind&&(null===(t=this.typeCondition)||void 0===t?void 0:t.name)===(null===(n=e.typeCondition)||void 0===n?void 0:n.name)&&u(this,e)}toString(){return"..."+(this.typeCondition?" on "+this.typeCondition:"")+this.appliedDirectivesToString()}}function h(e){return e.map((e=>e.appliedDirectives)).flat().filter((e=>(0,r.isConditionalDirective)(e)))}function m(e,t,n){const i="Field"===e.kind?(0,r.baseType)(e.definition.type):e.typeCondition;return!!i&&"FragmentElement"===t.kind&&!!t.typeCondition&&(0===t.appliedDirectives.length||(0,r.isDirectiveApplicationsSubset)(n,t.appliedDirectives))&&(0,s.sameType)(i,t.typeCondition)}t.FragmentElement=f,t.sameOperationPaths=function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].equals(t[n]))return!1;return!0},t.conditionalDirectivesInOperationPath=h,t.concatOperationPaths=function(e,t){if(0===e.length)return t;if(0===t.length)return e;const n=e[e.length-1],i=h(e);let r=t[0];for(;r&&m(n,r,i);)r=(t=t.slice(1))[0];return e.concat(t)};class y{constructor(e,t,n,i){this.rootKind=e,this.selectionSet=t,this.variableDefinitions=n,this.name=i}optimize(e,t=2){if((0,a.assert)(t>=1,`Expected 'minUsagesToOptimize' to be at least 1, but got ${t}`),!e||e.isEmpty())return this;let n=this.selectionSet.optimize(e);if(n===this.selectionSet)return this;const i=new Map;n.collectUsedFragmentNames(i);for(const t of e.names())i.has(t)||i.set(t,0);const r=(0,a.mapEntries)(i).filter((([e,n])=>n<t)).map((([e])=>e));return n=n.expandFragments(r),new y(this.rootKind,n,this.variableDefinitions,this.name)}expandAllFragments(){const e=this.selectionSet.expandFragments();return e===this.selectionSet?this:new y(this.rootKind,e,this.variableDefinitions,this.name)}withoutDefer(e){(0,a.assert)(!this.selectionSet.fragments||this.selectionSet.fragments.isEmpty(),'Removing @defer currently only work on "expanded" selections (no named fragments)');const t=this.selectionSet.withoutDefer(e);return t==this.selectionSet?this:new y(this.rootKind,t,this.variableDefinitions,this.name)}withNormalizedDefer(){(0,a.assert)(!this.selectionSet.fragments||this.selectionSet.fragments.isEmpty(),'Assigning @defer lables currently only work on "expanded" selections (no named fragments)');const e=new N,{hasDefers:t,hasNonLabelledOrConditionalDefers:n}=e.init(this.selectionSet);let i=this;if(n){const t=this.selectionSet.withNormalizedDefer(e);i=new y(this.rootKind,t,this.variableDefinitions,this.name)}return{operation:i,hasDefers:t,assignedDeferLabels:e.assignedLabels,deferConditions:e.deferConditions}}toString(e=!1,t=!0){return this.selectionSet.toOperationString(this.rootKind,this.variableDefinitions,this.name,e,t)}}function v(e,t){if(!e)return;const n=t.schema();for(const i of e){const e=n.directive(i.name.value);l(e,(()=>`Unknown directive "@${i.name.value}" in selection`)),t.applyDirective(e,(0,c.argumentsFromAST)(e.coordinate,i.arguments,e))}}function E(e,t){const n=new b(e);return n.add(t),n}t.Operation=y,t.selectionSetOf=E;class T extends r.DirectiveTargetElement{constructor(e,t,n,i){super(e),this.name=t,this.typeCondition=n,this.selectionSet=i}withUpdatedSelectionSet(e){return new T(this.schema(),this.name,this.typeCondition,e)}variables(){return(0,r.mergeVariables)(this.variablesInAppliedDirectives(),this.selectionSet.usedVariables())}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e)}toFragmentDefinitionNode(){return{kind:i.Kind.FRAGMENT_DEFINITION,name:{kind:i.Kind.NAME,value:this.name},typeCondition:{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:this.typeCondition.name}},selectionSet:this.selectionSet.toSelectionSetNode()}}canApplyAtType(e){return(0,s.sameType)(this.typeCondition,e)||(0,r.isAbstractType)(this.typeCondition)&&!(0,r.isUnionType)(e)&&(0,s.isDirectSubtype)(this.typeCondition,e)}toString(e){return(null!=e?e:"")+`fragment ${this.name} on ${this.typeCondition}${this.appliedDirectivesToString()} ${this.selectionSet.toString(!1,!0,e)}`}}t.NamedFragmentDefinition=T;class g{constructor(){this.fragments=new a.MapWithCachedArrays}isEmpty(){return 0===this.fragments.size}variables(){let e=[];for(const t of this.fragments.values())e=(0,r.mergeVariables)(e,t.variables());return e}names(){return this.fragments.keys()}add(e){if(this.fragments.has(e.name))throw o.ERRORS.INVALID_GRAPHQL.err(`Duplicate fragment name '${e}'`);this.fragments.set(e.name,e)}addIfNotExist(e){this.fragments.has(e.name)||this.fragments.set(e.name,e)}maybeApplyingAtType(e){return this.fragments.values().filter((t=>t.canApplyAtType(e)))}without(e){if(!e.some((e=>this.fragments.has(e))))return this;const t=new g;for(const n of this.fragments.values())if(!e.includes(n.name)){const i=n.selectionSet.expandFragments(e,!1),r=i===n.selectionSet?n:new T(n.schema(),n.name,n.typeCondition,i);t.add(r)}return t}get(e){return this.fragments.get(e)}has(e){return this.fragments.has(e)}definitions(){return this.fragments.values()}validate(){for(const e of this.fragments.values())e.selectionSet.validate()}toFragmentDefinitionNodes(){return this.definitions().map((e=>e.toFragmentDefinitionNode()))}toString(e){return this.definitions().map((t=>t.toString(e))).join("\n\n")}}t.NamedFragments=g;class I{constructor(){this._isFrozen=!1}freeze(){return this.isFrozen()||(this.freezeInternals(),this._isFrozen=!0),this.us()}isFrozen(){return this._isFrozen}cloneIfFrozen(){return this.isFrozen()?this.clone():this.us()}}class N{constructor(){this.index=0,this.assignedLabels=new Set,this.deferConditions=new a.SetMultiMap,this.usedLabels=new Set}init(e){let t=!1,n=!1;const i=e.selections().concat();for(;i.length>0;){const e=i.pop();if("FragmentSelection"===e.kind){const i=e.element().deferDirectiveArgs();i&&(n=!0,i.label&&void 0===i.if||(t=!0),i.label&&this.usedLabels.add(i.label))}e.selectionSet&&e.selectionSet.selections().forEach((e=>i.push(e)))}return{hasDefers:n,hasNonLabelledOrConditionalDefers:t}}nextLabel(){return"qp__"+this.index++}newLabel(){let e=this.nextLabel();for(;this.usedLabels.has(e);)e=this.nextLabel();return this.assignedLabels.add(e),e}registerCondition(e,t){this.deferConditions.add(t.name,e)}}class b extends I{constructor(e,t){super(),this.parentType=e,this.fragments=t,this._selections=new a.MultiMap,this._selectionCount=0,l(!(0,r.isLeafType)(e),(()=>`Cannot have selection on non-leaf type ${e}`))}us(){return this}selections(e=!1){if(!this._cachedSelections){const e=new Array(this._selectionCount);let t=0;for(const n of this._selections.values())for(const i of n)e[t++]=i;this._cachedSelections=e}if((0,a.assert)(this._cachedSelections,"Cache should have been populated"),e&&this._cachedSelections.length>1){const e=new Array(this._selectionCount);for(let t=0;t<this._selectionCount;t++)e[t]=this._cachedSelections[this._selectionCount-t-1];return e}return this._cachedSelections}usedVariables(){let e=[];for(const t of this._selections.values())for(const n of t)e=(0,r.mergeVariables)(e,n.usedVariables());return this.fragments&&(e=(0,r.mergeVariables)(e,this.fragments.variables())),e}collectUsedFragmentNames(e){for(const t of this._selections.values())for(const n of t)n.collectUsedFragmentNames(e)}optimize(e){if(!e||e.isEmpty())return this;if(this.fragments&&this.fragments.definitions().some((t=>e.get(t.name))))return this;const t=new b(this.parentType,e);for(const n of this.selections())t.add(n.optimize(e));return t}expandFragments(e,t=!0){var n;if(e&&0===e.length)return this;const i=t?e?null===(n=this.fragments)||void 0===n?void 0:n.without(e):void 0:this.fragments,r=new b(this.parentType,i);for(const n of this.selections()){const i=n.expandFragments(e,t);Array.isArray(i)?r.addAll(i):r.add(i)}return r}lazyMap(e){let t;const n=this.selections();for(let i=0;i<n.length;i++){const r=n[i],o=e(r);if(o!==r&&!t){t=[];for(let e=0;e<i;e++)t.push(n[e])}o&&t&&(o instanceof b?o.selections().forEach((e=>t.push(e))):t.push(o))}return t?new b(this.parentType,this.fragments).addAll(t):this}withoutDefer(e){return(0,a.assert)(!this.fragments,"Not yet supported"),this.lazyMap((t=>t.withoutDefer(e)))}withNormalizedDefer(e){return(0,a.assert)(!this.fragments,"Not yet supported"),this.lazyMap((t=>t.withNormalizedDefer(e)))}filter(e){return this.lazyMap((t=>t.filter(e)))}withoutEmptyBranches(){const e=this.filter((e=>{var t;return!0!==(null===(t=e.selectionSet)||void 0===t?void 0:t.isEmpty())}));return e.isEmpty()?void 0:e}freezeInternals(){for(const e of this.selections())e.freeze()}mergeIn(e){for(const t of e.selections())this.add(t)}addAll(e){return e.forEach((e=>this.add(e))),this}add(e){(0,a.assert)(!this.isFrozen(),(()=>`Cannot add to frozen selection: ${this}`));const t=e.updateForAddingTo(this),n=t.key(),i=this._selections.get(n);if(i)for(const e of i)if(e.kind===t.kind&&u(e.element(),t.element()))return t.selectionSet&&e.selectionSet.mergeIn(t.selectionSet),e;return this._selections.add(n,t),++this._selectionCount,this._cachedSelections=void 0,t}addPath(e,t){let n=this,i=this;for(const t of e){l(i,(()=>`Cannot apply selection ${t} to non-selectable parent type "${n.parentType}"`));const e=i.add(_(t));n=i,i=e.selectionSet}t&&t(i)}addSelectionSetNode(e,t,n=((e,t)=>e.field(t))){if(e)for(const i of e.selections)this.addSelectionNode(i,t,n)}addSelectionNode(e,t,n=((e,t)=>e.field(t))){this.add(this.nodeToSelection(e,t,n))}nodeToSelection(e,t,n){var o,s;let a;switch(e.kind){case i.Kind.FIELD:const u=n(this.parentType,e.name.value);l(u,(()=>`Cannot query field "${e.name.value}" on type "${this.parentType}".`),this.parentType.sourceAST);const p=(0,r.baseType)(u.type);a=new S(new d(u,(0,c.argumentsFromAST)(u.coordinate,e.arguments,u),t,null===(o=e.alias)||void 0===o?void 0:o.value),(0,r.isLeafType)(p)?void 0:new b(p,this.fragments)),e.selectionSet&&(l(a.selectionSet,(()=>`Unexpected selection set on leaf field "${a.element()}"`),a.element().definition.sourceAST),a.selectionSet.addSelectionSetNode(e.selectionSet,t,n));break;case i.Kind.INLINE_FRAGMENT:const h=new f(this.parentType,null===(s=e.typeCondition)||void 0===s?void 0:s.name.value);a=new D(h,new b(h.typeCondition?h.typeCondition:h.parentType,this.fragments)),a.selectionSet.addSelectionSetNode(e.selectionSet,t,n);break;case i.Kind.FRAGMENT_SPREAD:const m=e.name.value;l(this.fragments,(()=>`Cannot find fragment name "${m}" (no fragments were provided)`)),a=new A(this.parentType,this.fragments,m)}return v(e.directives,a.element()),a}equals(e){if(this===e)return!0;if(this._selections.size!==e._selections.size)return!1;for(const[t,n]of this._selections){const i=e._selections.get(t);if(!i||n.length!==i.length||!n.every((e=>i.some((t=>e.equals(t))))))return!1}return!0}contains(e){if(this._selections.size<e._selections.size)return!1;for(const[t,n]of e._selections){const e=this._selections.get(t);if(!e||e.length<n.length||!n.every((t=>e.some((e=>e.contains(t))))))return!1}return!0}validate(){l(!this.isEmpty(),(()=>"Invalid empty selection set"));for(const e of this.selections())e.validate()}isEmpty(){return 0===this._selections.size}toSelectionSetNode(){return this.isEmpty()?{kind:i.Kind.SELECTION_SET,selections:[{kind:i.Kind.FIELD,name:{kind:i.Kind.NAME,value:"..."}}]}:{kind:i.Kind.SELECTION_SET,selections:Array.from(this.selectionsInPrintOrder(),(e=>e.toSelectionNode()))}}selectionsInPrintOrder(){const e=this._selections.get(r.typenameFieldName);return e?e.concat(this.selections().filter((e=>!(e=>"FieldSelection"===e.kind&&!e.field.alias&&e.field.name===r.typenameFieldName)(e)))):this.selections()}toOperationPaths(){return this.toOperationPathsInternal([])}toOperationPathsInternal(e){return this.selections().flatMap((t=>{const n=e.map((e=>e.concat(t.element())));return t.selectionSet?t.selectionSet.toOperationPathsInternal(n):n}))}forEachElement(e){var t;const n=this.selections().concat();for(;n.length>0;){const i=n.pop();e(i.element()),null===(t=i.selectionSet)||void 0===t||t.selections(!0).forEach((e=>n.push(e)))}}clone(){const e=new b(this.parentType);for(const t of this.selections()){const n=t.clone();e._selections.add(n.key(),n),++e._selectionCount}return e}toOperationString(e,t,n,i=!1,r=!0){const o=r?"":void 0,s=i||!this.fragments||this.fragments.isEmpty()?"":this.fragments.toString(o)+"\n\n";return"query"==e&&!n&&t.isEmpty()?s+this.toString(i,!0,o):s+e+(n?" "+(n+(t.isEmpty()?"":t.toString())):t.isEmpty()?"":" "+t.toString())+" "+this.toString(i,!0,o)}toString(e=!0,t=!0,n){if(void 0===n){const n=this.selections().map((t=>t.toString(e))).join(" ");return t?"{ "+n+" }":n}{const i=t?n+"  ":n,r=this.selections().map((t=>t.toString(e,i))).join("\n");return t?"{\n"+r+"\n"+n+"}":r}}}function _(e,t){return"Field"===e.kind?new S(e,t):new D(e,t)}t.SelectionSet=b,t.allFieldDefinitionsInSelectionSet=function(e){const t=Array.from(e.selections()),n=[];for(;t.length>0;){const e=t.pop();"FieldSelection"===e.kind&&n.push(e.field.definition),e.selectionSet&&t.push(...e.selectionSet.selections())}return n},t.selectionSetOfElement=function(e,t){const n=new b(e.parentType);return n.add(_(e,t)),n},t.selectionOfElement=_;class S extends I{constructor(e,t){super(),this.field=e,this.kind="FieldSelection";const n=(0,r.baseType)(e.definition.type);this.selectionSet=(0,r.isLeafType)(n)?void 0:t?t.cloneIfFrozen():new b(n)}us(){return this}key(){return this.element().responseName()}element(){return this.field}usedVariables(){var e,t;return(0,r.mergeVariables)(this.element().variables(),null!==(t=null===(e=this.selectionSet)||void 0===e?void 0:e.usedVariables())&&void 0!==t?t:[])}collectUsedFragmentNames(e){this.selectionSet&&this.selectionSet.collectUsedFragmentNames(e)}optimize(e){const t=this.selectionSet?this.selectionSet.optimize(e):void 0,n=(0,r.baseType)(this.field.definition.type);if((0,r.isCompositeType)(n)&&t)for(const i of e.maybeApplyingAtType(n))if(t.equals(i.selectionSet)){const t=new A(n,e,i.name);return new S(this.field,E(n,t))}return this.selectionSet===t?this:new S(this.field,t)}filter(e){if(!this.selectionSet)return e(this)?this:void 0;const t=this.selectionSet.filter(e),n=this.selectionSet===t?this:new S(this.field,t);return e(n)?n:void 0}freezeInternals(){var e;null===(e=this.selectionSet)||void 0===e||e.freeze()}expandFragments(e,t=!0){const n=this.selectionSet?this.selectionSet.expandFragments(e,t):void 0;return this.selectionSet===n?this:new S(this.field,n)}fieldArgumentsToAST(){const e=Object.entries(this.field.args);if(0!==e.length)return e.map((([e,t])=>({kind:i.Kind.ARGUMENT,name:{kind:i.Kind.NAME,value:e},value:(0,c.valueToAST)(t,this.field.definition.argument(e).type)})))}validate(){var e;this.field.validate(),l(!(this.selectionSet&&this.selectionSet.isEmpty()),(()=>`Invalid empty selection set for field "${this.field.definition.coordinate}" of non-leaf type ${this.field.definition.type}`),this.field.definition.sourceAST),null===(e=this.selectionSet)||void 0===e||e.validate()}updateForAddingTo(e){var t;const n=this.field.updateForAddingTo(e);if(this.field===n)return this.cloneIfFrozen();const i=(0,r.baseType)(n.definition.type);let o;if(this.selectionSet&&this.selectionSet.parentType!==i){(0,a.assert)((0,r.isCompositeType)(i),`Expected ${i.coordinate} to be composite but ${i.kind}`),o=new b(i);for(const e of this.selectionSet.selections())o.add(e)}else o=null===(t=this.selectionSet)||void 0===t?void 0:t.cloneIfFrozen();return new S(n,o)}toSelectionNode(){var e;const t=this.field.alias?{kind:i.Kind.NAME,value:this.field.alias}:void 0;return{kind:i.Kind.FIELD,name:{kind:i.Kind.NAME,value:this.field.name},alias:t,arguments:this.fieldArgumentsToAST(),directives:this.element().appliedDirectivesToDirectiveNodes(),selectionSet:null===(e=this.selectionSet)||void 0===e?void 0:e.toSelectionSetNode()}}withUpdatedSubSelection(e){return new S(this.field,e)}equals(e){return this===e||!!(e instanceof S&&this.field.equals(e.field))&&(this.selectionSet?!!e.selectionSet&&this.selectionSet.equals(e.selectionSet):!e.selectionSet)}contains(e){return!!(e instanceof S&&this.field.equals(e.field))&&(!e.selectionSet||!!this.selectionSet&&this.selectionSet.contains(e.selectionSet))}namedFragments(){var e;return null===(e=this.selectionSet)||void 0===e?void 0:e.fragments}withoutDefer(e){var t;const n=null===(t=this.selectionSet)||void 0===t?void 0:t.withoutDefer(e);return n===this.selectionSet?this:new S(this.field,n)}withNormalizedDefer(e){var t;const n=null===(t=this.selectionSet)||void 0===t?void 0:t.withNormalizedDefer(e);return n===this.selectionSet?this:new S(this.field,n)}clone(){return this.selectionSet?new S(this.field,this.selectionSet.clone()):this}toString(e=!0,t){return(null!=t?t:"")+this.field+(this.selectionSet?" "+this.selectionSet.toString(e,!0,t):"")}}t.FieldSelection=S;class O extends I{constructor(){super(...arguments),this.kind="FragmentSelection"}us(){return this}validateDeferAndStream(){if(this.element().hasDefer()||this.element().hasStream()){const e=this.element().schema().schemaDefinition,t=this.element().parentType;l(e.rootType("mutation")!==t&&e.rootType("subscription")!==t,(()=>{var n;return`The @defer and @stream directives cannot be used on ${null===(n=e.roots().filter((e=>e.type===t)).pop())||void 0===n?void 0:n.rootKind} root type "${t}"`}))}}usedVariables(){return(0,r.mergeVariables)(this.element().variables(),this.selectionSet.usedVariables())}filter(e){const t=this.selectionSet,n=t.filter(e),i=n===t?this:new D(this.element(),n);return e(i)?i:void 0}freezeInternals(){this.selectionSet.freeze()}equals(e){return this===e||e instanceof O&&this.element().equals(e.element())&&this.selectionSet.equals(e.selectionSet)}contains(e){return e instanceof O&&this.element().equals(e.element())&&this.selectionSet.contains(e.selectionSet)}clone(){return new D(this.element(),this.selectionSet.clone())}}t.FragmentSelection=O;class D extends O{constructor(e,t){super(),this.fragmentElement=e,this._selectionSet=t?t.cloneIfFrozen():new b(e.typeCondition?e.typeCondition:e.parentType)}key(){var e,t;return null!==(t=null===(e=this.element().typeCondition)||void 0===e?void 0:e.name)&&void 0!==t?t:""}validate(){this.validateDeferAndStream(),l(!this.selectionSet.isEmpty(),(()=>`Invalid empty selection set for fragment "${this.element()}"`)),this.selectionSet.validate()}updateForAddingTo(e){var t;const n=this.element().updateForAddingTo(e);if(this.element()===n)return this.cloneIfFrozen();const i=n.castedType();let r;if(this.selectionSet.parentType!==i){r=new b(i);for(const e of this.selectionSet.selections())r.add(e)}else r=null===(t=this.selectionSet)||void 0===t?void 0:t.cloneIfFrozen();return new D(n,r)}get selectionSet(){return this._selectionSet}namedFragments(){return this.selectionSet.fragments}element(){return this.fragmentElement}toSelectionNode(){const e=this.element().typeCondition;return{kind:i.Kind.INLINE_FRAGMENT,typeCondition:e?{kind:i.Kind.NAMED_TYPE,name:{kind:i.Kind.NAME,value:e.name}}:void 0,directives:this.element().appliedDirectivesToDirectiveNodes(),selectionSet:this.selectionSet.toSelectionSetNode()}}optimize(e){let t=this.selectionSet.optimize(e);const n=this.element().typeCondition;if(n)for(const i of e.maybeApplyingAtType(n))if(t.equals(i.selectionSet)){const r=new A(this.element().parentType,e,i.name);if((0,s.sameType)(n,i.typeCondition))return this.fragmentElement.appliedDirectives.forEach((e=>{r.element().applyDirective(e.definition,e.arguments())})),r;t=E(r.element().parentType,r);break}return this.selectionSet===t?this:new D(this.fragmentElement,t)}expandFragments(e,t=!0){const n=this.selectionSet.expandFragments(e,t);return this.selectionSet===n?this:new D(this.element(),n)}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e)}withoutDefer(e){const t=this.selectionSet.withoutDefer(e),n=this.fragmentElement.deferDirectiveArgs(),i=n&&(!e||n.label&&e.has(n.label));if(t===this.selectionSet&&!i)return this;const r=i?this.fragmentElement.withoutDefer():this.fragmentElement;return r?new D(r,t):t}withNormalizedDefer(e){const t=this.fragmentElement.withNormalizedDefer(e),n=this.selectionSet.withNormalizedDefer(e);return t?t===this.fragmentElement&&n===this.selectionSet?this:new D(t,n):n}withUpdatedSubSelection(e){return new D(this.fragmentElement,e)}toString(e=!0,t){return(null!=t?t:"")+this.fragmentElement+" "+this.selectionSet.toString(e,!0,t)}}class A extends O{constructor(e,t,n){super(),this.fragments=t;const i=t.get(n);l(i,(()=>`Unknown fragment "...${n}"`)),this.namedFragment=i,this._element=new f(e,i.typeCondition);for(const e of i.appliedDirectives)this._element.applyDirective(e.definition,e.arguments())}key(){return"..."+this.namedFragment.name}element(){return this._element}namedFragments(){return this.fragments}get selectionSet(){return this.namedFragment.selectionSet}validate(){this.validateDeferAndStream()}toSelectionNode(){const e=this.spreadDirectives(),t=0===e.length?void 0:e.map((e=>({kind:i.Kind.DIRECTIVE,name:{kind:i.Kind.NAME,value:e.name},arguments:e.argumentsToAST()})));return{kind:i.Kind.FRAGMENT_SPREAD,name:{kind:i.Kind.NAME,value:this.namedFragment.name},directives:t}}optimize(e){return this}updateForAddingTo(e){return this}expandFragments(e,t=!0){if(e&&!e.includes(this.namedFragment.name))return this;const n=this.selectionSet.expandFragments(e,t);return(0,s.sameType)(this._element.parentType,this.namedFragment.typeCondition)&&0===this._element.appliedDirectives.length?n.selections():new D(this._element,n)}collectUsedFragmentNames(e){this.selectionSet.collectUsedFragmentNames(e);const t=e.get(this.namedFragment.name);e.set(this.namedFragment.name,void 0===t?1:t+1)}withoutDefer(e){(0,a.assert)(!1,"Unsupported, see `Operation.withoutDefer`")}withNormalizedDefer(e){(0,a.assert)(!1,"Unsupported, see `Operation.withAllDeferLabelled`")}spreadDirectives(){return this._element.appliedDirectives.slice(this.namedFragment.appliedDirectives.length)}withUpdatedSubSelection(e){(0,a.assert)(!1,"Unssupported")}toString(e=!0,t){if(e)return(null!=t?t:"")+this._element+" "+this.selectionSet.toString(!0,!0,t);{const e=this.spreadDirectives(),n=0==e.length?"":" "+e.join(" ");return(null!=t?t:"")+"..."+this.namedFragment.name+n}}}function R(e,t,n){let s;const a=null==n?void 0:n.operationName,c=new g;t.definitions.forEach((t=>{switch(t.kind){case i.Kind.OPERATION_DEFINITION:l(!s||a,(()=>"Must provide operation name if query contains multiple operations.")),(!a||t.name&&t.name.value===a)&&(s=t);break;case i.Kind.FRAGMENT_DEFINITION:const n=t.name.value,u=t.typeCondition.name.value,p=e.type(u);if(!p)throw o.ERRORS.INVALID_GRAPHQL.err(`Unknown type "${u}" for fragment "${n}"`,{nodes:t});if(!(0,r.isCompositeType)(p))throw o.ERRORS.INVALID_GRAPHQL.err(`Invalid fragment "${n}" on non-composite type "${u}"`,{nodes:t});const d=new T(e,n,p,new b(p,c));v(t.directives,d),c.add(d)}})),l(s,(()=>a?`Unknown operation named "${a}"`:"No operation found in provided document."));const u=s.variableDefinitions?(0,r.variableDefinitionsFromAST)(e,s.variableDefinitions):new r.VariableDefinitions;return t.definitions.forEach((e=>{e.kind===i.Kind.FRAGMENT_DEFINITION&&c.get(e.name.value).selectionSet.addSelectionSetNode(e.selectionSet,u)})),c.validate(),function({schema:e,operation:t,fragments:n,validateInput:i}){var o;const s=e.schemaDefinition.root(t.operation);l(s,(()=>`The schema has no "${t.operation}" root type defined`));const a=t.variableDefinitions?(0,r.variableDefinitionsFromAST)(e,t.variableDefinitions):new r.VariableDefinitions;return new y(t.operation,w({parentType:s.type,source:t.selectionSet,variableDefinitions:a,fragments:n,validate:i}),a,null===(o=t.name)||void 0===o?void 0:o.value)}({schema:e,operation:s,fragments:c,validateInput:null==n?void 0:n.validate})}function w({parentType:e,source:t,variableDefinitions:n,fragments:i,fieldAccessor:o,validate:s=!0}){const a="string"==typeof t?L(t.trim().startsWith("{")?t:`{${t}}`).selectionSet:t,c=new b(e,i);return c.addSelectionSetNode(a,null!=n?n:new r.VariableDefinitions,o),s&&c.validate(),c}function L(e){const t=(0,i.parse)(e);l(1===t.definitions.length,(()=>"Selections should contain a single definitions, found "+t.definitions.length));const n=t.definitions[0];return l(n.kind===i.Kind.OPERATION_DEFINITION,(()=>"Expected an operation definition but got a "+n.kind)),n}t.operationFromDocument=R,t.parseOperation=function(e,t,n){return R(e,(0,i.parse)(t),n)},t.parseSelectionSet=w,t.operationToDocument=function(e){var t;const n={kind:i.Kind.OPERATION_DEFINITION,operation:e.rootKind,name:e.name?{kind:i.Kind.NAME,value:e.name}:void 0,selectionSet:e.selectionSet.toSelectionSetNode(),variableDefinitions:e.variableDefinitions.toVariableDefinitionNodes()},r=e.selectionSet.fragments?null===(t=e.selectionSet.fragments)||void 0===t?void 0:t.toFragmentDefinitionNodes():[];return{kind:i.Kind.DOCUMENT,definitions:[n].concat(r)}}},7678:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.computeShareables=void 0;const i=n(415);t.computeShareables=function(e){const t=(0,i.federationMetadata)(e);(0,i.assert)(t,"Schema should be a federation subgraph");const n=t.keyDirective(),r=t.providesDirective(),o=t.isFed2Schema()?t.shareableDirective():void 0,s=new Set,a=e=>{for(const t of e.appliedDirectivesOf(n))(0,i.collectTargetFields)({parentType:e,directive:t,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>s.add(e.coordinate)))};for(const n of e.objectTypes()){a(n);const e=o?n.appliedDirectivesOf(o):[];for(const a of n.fields()){(o&&a.hasAppliedDirective(o)||e.length>0&&e.some((e=>a.ofExtension()===e.ofExtension())))&&s.add(a.coordinate);for(const e of a.appliedDirectivesOf(r))(0,i.collectTargetFields)({parentType:(0,i.baseType)(a.type),directive:e,includeInterfaceFieldsImplementations:!0,validate:!1}).forEach((e=>{t.isFieldExternal(e)&&s.add(e.coordinate)}))}}for(const t of e.interfaceTypes())a(t);return e=>s.has(e.coordinate)}},2850:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printDirectiveDefinition=t.printTypeDefinitionAndExtensions=t.printType=t.printSchema=t.orderPrintedDefinitions=t.defaultPrintOptions=void 0;const i=n(9724),r=n(3421);function o(e,t,n){return function(e,t){return t.mergeTypesAndExtensions?[void 0]:[null,...e.extensions()]}(e,t).map((i=>n(e,t,i))).filter((e=>void 0!==e))}function s(e){return e?"extend ":""}function a(e,t){return void 0===t?e:e.filter((e=>{var n;return(null!==(n=e.ofExtension())&&void 0!==n?n:null)===t}))}function c(e,t,n){let i=a(e.appliedDirectives,n);return t.directiveApplicationFilter&&(i=i.filter(t.directiveApplicationFilter)),i}function l(e,t,n){const i=a(e.roots(),n),r=c(e,t,n);if(!i.length&&!r.length)return;if(!n&&!r.length&&!(o=e).description&&o.roots().every((e=>e.isDefaultRootName())))return;var o;const l=function(e,t){return e.concat().sort(((e,n)=>t.rootTypesOrder.indexOf(e.rootKind)-t.rootTypesOrder.indexOf(n.rootKind)))}(i,t).map((e=>`${t.indentString}${e.rootKind}: ${e.type}`));return f(e,t,n)+s(n)+"schema"+d(r,t,!0,0!==l.length)+(0===r.length?" ":"")+(0===l.length?"":"{\n"+l.join("\n")+"\n}")}function u(e,n=t.defaultPrintOptions){switch(e.kind){case"ScalarType":return o(e,n,h);case"ObjectType":return o(e,n,((e,t,n)=>m("type",e,t,n)));case"InterfaceType":return o(e,n,((e,t,n)=>m("interface",e,t,n)));case"UnionType":return o(e,n,y);case"EnumType":return o(e,n,v);case"InputObjectType":return o(e,n,E)}}function p(e,n=t.defaultPrintOptions){const i=e.locations.join(" | ");return`${f(e,n,null)}directive ${e}${g(e.arguments(),n)}${e.repeatable?" repeatable":""} on ${i}`}function d(e,t,n=!1,i=n){if(0==e.length)return"";const r=n?"\n"+t.indentString:" ",o=e.map((e=>e.toString())).join(r);return n?"\n"+t.indentString+o+(i?"\n":""):" "+o}function f(e,t,n,i="",r=!0){if(n||void 0===e.description||t.noDescriptions)return"";const o=e.description.length>70,s=function(e,t="",n=!1){const i=-1===e.indexOf("\n"),r=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],s="\\"===e[e.length-1],a=!i||o||s||n;let c="";return!a||i&&r||(c+="\n"+t),c+=t?e.replace(/\n/g,"\n"+t):e,a&&(c+="\n"),'"""'+c.replace(/"""/g,'\\"""')+'"""'}(e.description,"",o);return(i&&!r?"\n"+i:i)+s.replace(/\n/g,"\n"+i)+"\n"}function h(e,t,n){const i=c(e,t,n);if(!n||i.length)return`${f(e,t,n)}${s(n)}scalar ${e.name}${d(i,t,!0,!1)}`}function m(e,t,n,i){const r=c(t,n,i),o=a(t.interfaceImplementations(),i);let l=a(t.fields(),i);var u;if(n.fieldFilter&&(l=l.filter(n.fieldFilter)),r.length||o.length||l.length||!i&&t.preserveEmptyDefinition)return f(t,n,i)+s(i)+e+" "+t+((u=o).length?" implements "+u.map((e=>e.interface.name)).join(" & "):"")+d(r,n,!0,l.length>0)+(0===r.length&&l.length>0?" ":"")+T(l,n)}function y(e,t,n){const i=c(e,t,n),r=a(e.members(),n);if(!i.length&&!r.length&&(n||!e.preserveEmptyDefinition))return;const o=r.length?" = "+r.map((e=>e.type)).join(" | "):"";return f(e,t,n)+s(n)+"union "+e+d(i,t,!0,r.length>0)+o}function v(e,t,n){const i=c(e,t,n),r=a(e.values,n);if(!i.length&&!r.length&&(n||!e.preserveEmptyDefinition))return;const o=r.map(((e,i)=>f(e,t,n,t.indentString,!i)+t.indentString+e+d(e.appliedDirectives,t)));return f(e,t,n)+s(n)+"enum "+e+d(i,t,!0,o.length>0)+(0===i.length&&o.length>0?" ":"")+N(o)}function E(e,t,n){const i=c(e,t,n),r=a(e.fields(),n);if(i.length||r.length||!n&&e.preserveEmptyDefinition)return f(e,t,n)+s(n)+"input "+e+d(i,t,!0,r.length>0)+(0===i.length&&r.length>0?" ":"")+T(r,t)}function T(e,t){return N(e.map(((e,n)=>f(e,t,void 0,t.indentString,!n)+t.indentString+function(e,t){const n="FieldDefinition"==e.kind?g(e.arguments(),t,t.indentString):"",i="InputFieldDefinition"===e.kind&&void 0!==e.defaultValue?" = "+(0,r.valueToString)(e.defaultValue,e.type):"";return`${e.name}${n}: ${e.type}${i}`}(e,t)+d(c(e,t),t))))}function g(e,t,n=""){return 0===e.length?"":e.every((e=>!e.description))?"("+e.map((e=>I(e,t))).join(", ")+")":`(\n${e.map(((e,i)=>f(e,t,null,"  "+n,!i)+"  "+n+I(e,t))).join("\n")}\n${n})`}function I(e,t){return`${e}${d(c(e,t),t)}`}function N(e){return 0!==e.length?"{\n"+e.join("\n")+"\n}":""}t.defaultPrintOptions={indentString:"  ",definitionsOrder:["schema","directives","types"],rootTypesOrder:["query","mutation","subscription"],mergeTypesAndExtensions:!1,showAllBuiltIns:!1,noDescriptions:!1,typeFilter:()=>!0,fieldFilter:()=>!0,directiveApplicationFilter:()=>!0},t.orderPrintedDefinitions=function(e){return{...e,typeCompareFn:(e,t)=>e.name.localeCompare(t.name),directiveCompareFn:(e,t)=>e.name.localeCompare(t.name)}},t.printSchema=function(e,n=t.defaultPrintOptions){!function(e){if(!function(e){return 3===e.definitionsOrder.length&&e.definitionsOrder.indexOf("schema")>=0&&e.definitionsOrder.indexOf("types")>=0&&e.definitionsOrder.indexOf("directives")>=0}(e))throw new Error(`'definitionsOrder' should be a 3-element array containing 'schema', 'types' and 'directives' in the desired order (got: [${e.definitionsOrder.join(", ")}])`)}(n);let i=n.showAllBuiltIns?e.allDirectives():e.directives();n.directiveDefinitionFilter&&(i=i.filter(n.directiveDefinitionFilter)),n.directiveCompareFn&&(i=i.concat().sort(n.directiveCompareFn));let r=n.showAllBuiltIns?e.allTypes():e.types();n.typeFilter&&(r=r.filter(n.typeFilter)),n.typeCompareFn&&(r=r.concat().sort(n.typeCompareFn));const s=new Array(3);return s[n.definitionsOrder.indexOf("schema")]=function(e,t){return o(e,t,l)}(e.schemaDefinition,n),s[n.definitionsOrder.indexOf("directives")]=i.map((e=>p(e,n))),s[n.definitionsOrder.indexOf("types")]=r.flatMap((e=>u(e,n))),s.flat().join("\n\n")},t.printType=function(e,n=t.defaultPrintOptions){const r=u(e,n);return(0,i.assert)(1==r.length,`Type ${e} is built from more than 1 definition or extension`),r[0]},t.printTypeDefinitionAndExtensions=u,t.printDirectiveDefinition=p},5015:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.upgradeSubgraphsIfNecessary=t.RemovedTagOnExternal=t.FieldsArgumentCoercionToString=t.ProvidesOnNonCompositeRemoval=t.ProvidesOrRequiresOnInterfaceFieldRemoval=t.KeyOnInterfaceRemoval=t.ShareableTypeAddition=t.ShareableFieldAddition=t.InactiveProvidesOrRequiresFieldsRemoval=t.InactiveProvidesOrRequiresRemoval=t.TypeWithOnlyUnusedExternalRemoval=t.UnusedExternalRemoval=t.ExternalOnInterfaceRemoval=t.TypeExtensionRemoval=t.ExternalOnTypeExtensionRemoval=void 0;const i=n(8929),r=n(8116),o=n(4177),s=n(4408),a=n(9724),c=n(9480),l=n(3421);class u{constructor(e){this.field=e,this.id="EXTERNAL_ON_TYPE_EXTENSION_REMOVAL"}toString(){return`Removed @external from field "${this.field}" as it is a key of an extension type`}}t.ExternalOnTypeExtensionRemoval=u;class p{constructor(e){this.type=e,this.id="TYPE_EXTENSION_REMOVAL"}toString(){return`Switched type "${this.type}" from an extension to a definition`}}t.TypeExtensionRemoval=p;class d{constructor(e){this.field=e,this.id="EXTERNAL_ON_INTERFACE_REMOVAL"}toString(){return`Removed @external directive on interface type field "${this.field}": @external is nonsensical on interface fields`}}t.ExternalOnInterfaceRemoval=d;class f{constructor(e){this.field=e,this.id="UNUSED_EXTERNAL_REMOVAL"}toString(){return`Removed @external field "${this.field}" as it was not used in any @key, @provides or @requires`}}t.UnusedExternalRemoval=f;class h{constructor(e){this.type=e,this.id="TYPE_WITH_ONLY_UNUSED_EXTERNAL_REMOVAL"}toString(){return`Removed type ${this.type} that is not referenced in the schema and only declares unused @external fields`}}t.TypeWithOnlyUnusedExternalRemoval=h;class m{constructor(e,t){this.parent=e,this.removed=t,this.id="INACTIVE_PROVIDES_OR_REQUIRES_REMOVAL"}toString(){return`Removed directive ${this.removed} on "${this.parent}": none of the fields were truly @external`}}t.InactiveProvidesOrRequiresRemoval=m;class y{constructor(e,t,n){this.parent=e,this.original=t,this.updated=n,this.id="INACTIVE_PROVIDES_OR_REQUIRES_FIELDS_REMOVAL"}toString(){return`Updated directive ${this.original} on "${this.parent}" to ${this.updated}: removed fields that were not truly @external`}}t.InactiveProvidesOrRequiresFieldsRemoval=y;class v{constructor(e,t){this.field=e,this.declaringSubgraphs=t,this.id="SHAREABLE_FIELD_ADDITION"}toString(){return`Added @shareable to field "${this.field}": it is also resolved by ${(0,s.printSubgraphNames)(this.declaringSubgraphs)}`}}t.ShareableFieldAddition=v;class E{constructor(e,t){this.type=e,this.declaringSubgraphs=t,this.id="SHAREABLE_TYPE_ADDITION"}toString(){return`Added @shareable to type "${this.type}": it is a "value type" and is also declared in ${(0,s.printSubgraphNames)(this.declaringSubgraphs)}`}}t.ShareableTypeAddition=E;class T{constructor(e){this.type=e,this.id="KEY_ON_INTERFACE_REMOVAL"}toString(){return`Removed @key on interface "${this.type}": while allowed by federation 0.x, @key on interfaces were completely ignored/had no effect`}}t.KeyOnInterfaceRemoval=T;class g{constructor(e,t){this.field=e,this.directive=t,this.id="PROVIDES_OR_REQUIRES_ON_INTERFACE_FIELD_REMOVAL"}toString(){return`Removed @${this.directive} on interface field "${this.field}": while allowed by federation 0.x, @${this.directive} on interface fields were completely ignored/had no effect`}}t.ProvidesOrRequiresOnInterfaceFieldRemoval=g;class I{constructor(e,t){this.field=e,this.type=t,this.id="PROVIDES_ON_NON_COMPOSITE_REMOVAL"}toString(){return`Removed @provides directive on field "${this.field}" as it is of non-composite type "${this.type}": while not rejected by federation 0.x, such @provide is nonsensical and was ignored`}}t.ProvidesOnNonCompositeRemoval=I;class N{constructor(e,t,n,i){this.element=e,this.directive=t,this.before=n,this.after=i,this.id="FIELDS_ARGUMENT_COERCION_TO_STRING"}toString(){return`Coerced "fields" argument for directive @${this.directive} for "${this.element}" into a string: coerced from ${this.before} to ${this.after}`}}t.FieldsArgumentCoercionToString=N;class b{constructor(e,t){this.application=e,this.element=t,this.id="REMOVED_TAG_ON_EXTERNAL"}toString(){return`Removed ${this.application} application on @external "${this.element}" as the @tag application is on another definition`}}function _(e){const t=(0,s.federationMetadata)(e.schema());(0,a.assert)(t,"Should be a subgraph schema");const n=e.hasAppliedDirective(t.extendsDirective());return(e.hasExtensionElements()||n)&&((0,o.isObjectType)(e)||(0,o.isInterfaceType)(e))&&(n||!e.hasNonExtensionElements())}function S(e){const t=(0,s.federationMetadata)(e.schema());return(0,a.assert)(t,"Should be a subgraph schema"),(0,o.isObjectType)(e)&&e.isRootType()&&(e.hasAppliedDirective(t.extendsDirective())||e.hasExtensionElements()&&!e.hasNonExtensionElements())}function O(e,t){const n=e.metadata(),i=e.schema.type(t.parent.name);if(!i||!(0,o.isObjectType)(i))return!1;const r=i.field(t.name);return!!r&&(!n.isFieldExternal(r)||n.isFieldPartiallyExternal(r))}function D(e,t,n){const i=e.type(t);return i&&(0,o.isCompositeType)(i)?i.field(n):void 0}t.RemovedTagOnExternal=b,t.upgradeSubgraphsIfNecessary=function(e){const t=new Map;if(e.values().every((e=>e.isFed2Subgraph())))return{subgraphs:e,changes:t};const n=new s.Subgraphs;let i=[];for(const r of e.values())if(r.isFed2Subgraph())n.add(r);else{const o=e.values().filter((e=>e.name!==r.name)),s=new A(r,o).upgrade();s.errors?i=i.concat(s.errors):(n.add(s.upgraded),t.set(r.name,s.changes))}return 0===i.length?{subgraphs:n,changes:t}:{errors:i}};class A{constructor(e,t){this.originalSubgraph=e,this.otherSubgraphs=t,this.changes=new a.MultiMap,this.errors=[],this.schema=e.schema.clone(),this.renameFederationTypes(),this.subgraph=new s.Subgraph(e.name,e.url,this.schema);try{(0,s.setSchemaAsFed2Subgraph)(this.schema)}catch(e){const t=(0,r.errorCauses)(e);if(!t)throw e;t.forEach((e=>this.addError(e)))}this.metadata=this.subgraph.metadata()}addError(e){this.errors.push((0,s.addSubgraphToError)(e,this.subgraph.name,r.ERRORS.INVALID_GRAPHQL))}renameFederationTypes(){for(const e of c.FEDERATION_SPEC_TYPES){const t=this.originalSubgraph.metadata().federationTypeNameInSchema(e.name),n=this.schema.type(t);n&&n.rename(`federation__${e.name}`)}}external(e){const t=e.appliedDirectivesOf(this.metadata.externalDirective());return 0===t.length?void 0:t[0]}addChange(e){this.changes.add(e.id,e)}checkForExtensionWithNoBase(e){var t;if(S(e)||!_(e))return;const n=null===(t=(0,a.firstOf)(e.extensions().values()))||void 0===t?void 0:t.sourceAST;for(const t of this.otherSubgraphs){const n=t.schema.type(e.name);if(n&&n.hasNonExtensionElements())return}this.addError(r.ERRORS.EXTENSION_WITH_NO_BASE.err(`Type "${e}" is an extension type, but there is no type definition for "${e}" in any subgraph.`,{nodes:n}))}preUpgradeValidations(){for(const e of this.schema.types())this.checkForExtensionWithNoBase(e)}upgrade(){if(this.preUpgradeValidations(),this.fixFederationDirectivesArguments(),this.removeExternalOnInterface(),this.removeExternalOnTypeExtensions(),this.fixInactiveProvidesAndRequires(),this.removeTypeExtensions(),this.removeDirectivesOnInterface(),this.removeProvidesOnNonComposite(),this.removeUnusedExternals(),this.addShareable(),this.removeTagOnExternal(),this.errors.length>0)return{errors:this.errors};try{return this.subgraph.validate(),{upgraded:this.subgraph,changes:this.changes}}catch(e){const t=(0,r.errorCauses)(e);if(!t)throw e;return{errors:t}}}fixFederationDirectivesArguments(){var e;for(const t of[this.metadata.keyDirective(),this.metadata.requiresDirective(),this.metadata.providesDirective()])for(const n of Array.from(t.applications())){const r=n.arguments().fields;if("string"!=typeof r){Array.isArray(r)&&r.every((e=>"string"==typeof e))&&this.replaceFederationDirectiveApplication(n,n.toString(),r.join(" "),t.sourceAST);continue}const o=n.sourceAST;if(o&&"Directive"===o.kind)for(const t of null!==(e=o.arguments)&&void 0!==e?e:[])if("fields"===t.name.value&&t.value.kind===i.Kind.ENUM){this.replaceFederationDirectiveApplication(n,(0,i.print)(o),r,{...o,arguments:[{...t,value:{kind:i.Kind.STRING,value:r}}]});break}}}removeExternalOnInterface(){for(const e of this.schema.interfaceTypes())for(const t of e.fields()){const e=this.external(t);e&&(this.addChange(new d(t.coordinate)),e.remove())}}replaceFederationDirectiveApplication(e,t,n,i){const r=e.definition,o=e.parent;e.remove();const s=o.applyDirective(r,{fields:n});s.sourceAST=i,this.addChange(new N(o.coordinate,r.name,t,s.toString()))}fixInactiveProvidesAndRequires(){(0,s.removeInactiveProvidesAndRequires)(this.schema,((e,t,n)=>{n?this.addChange(new y(e.coordinate,t.toString(),n.toString())):this.addChange(new m(e.coordinate,t.toString()))}))}removeExternalOnTypeExtensions(){for(const e of this.schema.types())if((0,o.isCompositeType)(e)&&(_(e)||S(e)))if(e.appliedDirectivesOf(this.metadata.keyDirective()).length>0)for(const t of e.appliedDirectivesOf(this.metadata.keyDirective()))(0,s.collectTargetFields)({parentType:e,directive:t,includeInterfaceFieldsImplementations:!1,validate:!1}).forEach((t=>{if(t.parent!==e)return;const n=this.external(t);n&&(this.addChange(new u(t.coordinate)),n.remove())}));else for(const t of this.otherSubgraphs){const n=t.schema.type(e.name);if(!n)continue;(0,a.assert)((0,o.isCompositeType)(n),(()=>`Type ${e} is of kind ${e.kind} in ${this.subgraph.name} but ${n.kind} in ${t.name}`));const i=n.appliedDirectivesOf(t.metadata().keyDirective());0!==i.length&&(0,s.collectTargetFields)({parentType:n,directive:i[0],includeInterfaceFieldsImplementations:!1,validate:!1}).forEach((t=>{if(t.parent!==n)return;const i=e.field(t.name);if(!i)return;const r=this.external(i);r&&(this.addChange(new u(i.coordinate)),r.remove())}))}}removeTypeExtensions(){for(const e of this.schema.types())(_(e)||S(e))&&(this.addChange(new p(e.coordinate)),e.removeExtensions())}removeUnusedExternals(){for(const e of this.schema.types())if((0,o.isObjectType)(e)||(0,o.isInterfaceType)(e)){for(const t of e.fields())this.metadata.isFieldExternal(t)&&!this.metadata.isFieldUsed(t)&&(this.addChange(new f(t.coordinate)),t.remove());e.hasFields()||(e.isReferenced()?this.addError(r.ERRORS.TYPE_WITH_ONLY_UNUSED_EXTERNAL.err(`Type ${e} contains only external fields and all those fields are all unused (they do not appear in any @key, @provides or @requires).`,{nodes:e.sourceAST})):(this.addChange(new h(e.name)),e.remove()))}}removeDirectivesOnInterface(){for(const e of this.schema.interfaceTypes()){for(const t of e.appliedDirectivesOf(this.metadata.keyDirective()))this.addChange(new T(e.name)),t.remove();for(const t of e.fields())for(const e of[this.metadata.providesDirective(),this.metadata.requiresDirective()])for(const n of t.appliedDirectivesOf(e))this.addChange(new g(t.coordinate,e.name)),n.remove()}}removeProvidesOnNonComposite(){for(const e of this.schema.objectTypes())for(const t of e.fields())if(!(0,o.isCompositeType)((0,o.baseType)(t.type)))for(const e of t.appliedDirectivesOf(this.metadata.providesDirective()))this.addChange(new I(t.coordinate,t.type.toString())),e.remove()}addShareable(){const e=this.originalSubgraph.metadata(),t=this.metadata.keyDirective(),n=this.metadata.shareableDirective();for(const i of this.schema.objectTypes())if(i.hasAppliedDirective(t)||i.isRootType())for(const t of i.fields()){if(e.isFieldShareable(t))continue;const i=this.otherSubgraphs.filter((e=>O(e,t)));i.length>0&&!t.hasAppliedDirective(n)&&(t.applyDirective(n),this.addChange(new v(t.coordinate,i.map((e=>e.name)))))}else{const e=this.otherSubgraphs.filter((e=>e.schema.type(i.name)));e.length>0&&!i.hasAppliedDirective(n)&&(i.applyDirective(n),this.addChange(new E(i.coordinate,e.map((e=>e.name)))))}}removeTagOnExternal(){const e=this.schema.directive("tag");if(e)for(const t of Array.from(e.applications())){const e=t.parent;e instanceof o.FieldDefinition&&this.external(e)&&this.otherSubgraphs.map((t=>D(t.schema,e.parent.name,e.name))).filter((e=>!(e&&e.hasAppliedDirective("external")))).some((e=>e&&e.appliedDirectivesOf("tag").some((e=>(0,l.valueEquals)(t.arguments(),e.arguments())))))&&(this.addChange(new b(t.toString(),e.coordinate)),t.remove())}}}},5388:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.didYouMean=t.suggestionList=void 0;const r=i(n(9991)),o=n(9724);t.suggestionList=function(e,t){const n=new Map,i=Math.floor(.4*e.length)+1,s=e.toLowerCase();for(const o of t){const t=s===o.toLowerCase()?1:(0,r.default)(e,o);t<=i&&n.set(o,t)}return(0,o.mapKeys)(n).sort(((e,t)=>{const i=n.get(e)-n.get(t);return 0!==i?i:e.localeCompare(t)}))},t.didYouMean=function(e){const t=" Did you mean ",n=e.map((e=>`"${e}"`));switch(e.length){case 0:return"";case 1:return t+n[0]+"?";case 2:return t+n[0]+" or "+n[1]+"?"}const i=n.slice(0,5),r=i.pop();return t+i.join(", ")+", or "+r+"?"}},9624:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFed1Supergraph=t.validateSupergraph=t.buildSupergraphSchema=void 0;const i=n(9209),r=n(4177),o=n(6920),s=n(7964),a=n(8220),c=n(8116),l=new Set(["https://specs.apollo.dev/core/v0.1","https://specs.apollo.dev/core/v0.2","https://specs.apollo.dev/join/v0.1","https://specs.apollo.dev/join/v0.2","https://specs.apollo.dev/tag/v0.1","https://specs.apollo.dev/tag/v0.2","https://specs.apollo.dev/inaccessible/v0.1","https://specs.apollo.dev/inaccessible/v0.2"]),u=i.FeatureUrl.parse("https://specs.apollo.dev/core/v0.1");function p(e){const t=e.coreFeatures;if(!t)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err("Invalid supergraph: must be a core schema");const n=t.getByIdentity(o.joinIdentity);if(!n)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err("Invalid supergraph: must use the join spec");const i=o.JOIN_VERSIONS.find(n.url.version);if(!i)throw c.ERRORS.INVALID_FEDERATION_SUPERGRAPH.err(`Invalid supergraph: uses unsupported join spec version ${n.url.version} (supported versions: ${o.JOIN_VERSIONS.versions().join(", ")})`);return[t,i]}t.buildSupergraphSchema=function(e){const t="string"==typeof e?(0,s.buildSchema)(e,{validate:!1}):(0,s.buildSchemaFromAST)(e,{validate:!1}),[n]=p(t);return function(e){const t=[],n=e.coreItself;if(n.url.equals(u)){const i=[...e.allFeatures()].filter((e=>e.purpose));i.length>0&&t.push(c.ERRORS.UNSUPPORTED_LINKED_FEATURE.err(`the \`for:\` argument is unsupported by version ${n.url.version} of the core spec. Please upgrade to at least @core v0.2 (https://specs.apollo.dev/core/v0.2).`,{nodes:(0,r.sourceASTs)(n.directive,...i.map((e=>e.directive)))}))}for(const n of e.allFeatures())(n.url.equals(u)||"EXECUTION"===n.purpose||"SECURITY"===n.purpose)&&(l.has(n.url.base.toString())||t.push(c.ERRORS.UNSUPPORTED_LINKED_FEATURE.err(`feature ${n.url} is for: ${n.purpose} but is unsupported`,{nodes:n.directive.sourceAST})));if(t.length>0)throw(0,i.ErrCoreCheckFailed)(t)}(n),t.validate(),[t,(0,a.extractSubgraphsNamesAndUrlsFromSupergraph)(t)]},t.validateSupergraph=p,t.isFed1Supergraph=function(e){return p(e)[1].version.equals(new i.FeatureVersion(0,1))}},1697:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TAG_VERSIONS=t.TagSpecDefinition=t.tagIdentity=void 0;const i=n(8929),r=n(9209),o=n(4177),s=n(3208),a=n(8116),c=n(5848),l=n(5811);t.tagIdentity="https://specs.apollo.dev/tag";class u extends r.FeatureDefinition{constructor(e){super(new r.FeatureUrl(t.tagIdentity,"tag",e)),this.tagLocations=[i.DirectiveLocation.FIELD_DEFINITION,i.DirectiveLocation.OBJECT,i.DirectiveLocation.INTERFACE,i.DirectiveLocation.UNION],this.printedTagDefinition="directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION",this.isV01()||(this.tagLocations.push(i.DirectiveLocation.ARGUMENT_DEFINITION,i.DirectiveLocation.SCALAR,i.DirectiveLocation.ENUM,i.DirectiveLocation.ENUM_VALUE,i.DirectiveLocation.INPUT_OBJECT,i.DirectiveLocation.INPUT_FIELD_DEFINITION),this.printedTagDefinition="directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION"),this.tagDirectiveSpec=(0,s.createDirectiveSpecification)({name:"tag",locations:this.tagLocations,repeatable:!0,argumentFct:e=>({args:[{name:"name",type:new o.NonNullType(e.stringType())}],errors:[]})})}isV01(){return this.version.equals(new r.FeatureVersion(0,1))}addElementsToSchema(e){return this.addDirectiveSpec(e,this.tagDirectiveSpec)}tagDirective(e){return this.directive(e,"tag")}checkCompatibleDirective(e){const t=Object.keys(e.arguments()).length>1,n=e.argument("name"),i=n&&(0,l.sameType)(n.type,new o.NonNullType(e.schema().stringType())),r=e.locations.every((e=>this.tagLocations.includes(e)));if(t||!i||!r)return a.ERRORS.DIRECTIVE_DEFINITION_INVALID.err(`Found invalid @tag directive definition. Please ensure the directive definition in your schema's definitions matches the following:\n\t${this.printedTagDefinition}`)}allElementNames(){return["@tag"]}}t.TagSpecDefinition=u,t.TAG_VERSIONS=new r.FeatureDefinitions(t.tagIdentity).add(new u(new r.FeatureVersion(0,1))).add(new u(new r.FeatureVersion(0,2))),(0,c.registerKnownFeature)(t.TAG_VERSIONS)},5811:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isStrictSubtype=t.isSubtype=t.isDirectSubtype=t.sameType=t.DEFAULT_SUBTYPING_RULES=t.ALL_SUBTYPING_RULES=void 0;const i=n(4177);function r(e,t){if(e.kind!==t.kind)return!1;switch(e.kind){case"ListType":case"NonNullType":return r(e.ofType,t.ofType);default:return e.name===t.name}}function o(e,t,n=((e,t)=>e.hasTypeMember(t)),r=((e,t)=>e.implementsInterface(t))){return(0,i.isUnionType)(e)?(0,i.isObjectType)(t)&&n(e,t):r(t,e)}function s(e,n,i=t.DEFAULT_SUBTYPING_RULES,o=((e,t)=>e.hasTypeMember(t)),s=((e,t)=>e.implementsInterface(t))){return r(e,n)||a(e,n,i,o,s)}function a(e,n,r=t.DEFAULT_SUBTYPING_RULES,a=((e,t)=>e.hasTypeMember(t)),c=((e,t)=>e.implementsInterface(t))){switch(n.kind){case"ListType":return r.includes("list_propagation")&&(0,i.isListType)(e)&&s(e.ofType,n.ofType,r,a,c);case"NonNullType":return(0,i.isNonNullType)(e)?r.includes("nonNullable_propagation")&&s(e.ofType,n.ofType,r,a,c):r.includes("nonNullable_downgrade")&&s(e,n.ofType,r,a,c);case"ObjectType":case"InterfaceType":return(0,i.isListType)(e)?r.includes("list_upgrade")&&s(e.ofType,n,r,a,c):r.includes("direct")&&((0,i.isInterfaceType)(e)||(0,i.isUnionType)(e))&&o(e,n,a,c);default:return(0,i.isListType)(e)&&r.includes("list_upgrade")&&s(e.ofType,n,r,a,c)}}t.ALL_SUBTYPING_RULES=["direct","nonNullable_downgrade","list_upgrade","list_propagation","nonNullable_propagation"],t.DEFAULT_SUBTYPING_RULES=t.ALL_SUBTYPING_RULES.filter((e=>"list_upgrade"!==e)),t.sameType=r,t.isDirectSubtype=o,t.isSubtype=s,t.isStrictSubtype=a},9724:(e,t)=>{"use strict";function n(e,t){if(!e)throw new Error("string"==typeof t?t:t())}Object.defineProperty(t,"__esModule",{value:!0}),t.removeArrayElement=t.isDefined=t.printHumanReadableList=t.joinStrings=t.validateStringContainsBoolean=t.copyWitNewLength=t.MapWithCachedArrays=t.setValues=t.mapEntries=t.mapKeys=t.mapValues=t.firstOf=t.arrayEquals=t.OrderedMap=t.SetMultiMap=t.MultiMap=t.assertUnreachable=t.assert=void 0,t.assert=n,t.assertUnreachable=function(e){throw new Error("Didn't expect to get here")};class i extends Map{add(e,t){const n=this.get(e);return n?n.push(t):this.set(e,[t]),this}addAll(e){for(const[t,n]of e.entries())for(const e of n)this.add(t,e);return this}}t.MultiMap=i;class r extends Map{add(e,t){let n=this.get(e);return n||(n=new Set,this.set(e,n)),n.add(t),this}addAll(e){for(const[t,n]of e.entries())for(const e of n)this.add(t,e);return this}}t.SetMultiMap=r;class o{constructor(e=o.defaultCompareFn){this._keys=[],this._values=new Map,this._compareFn=e}static defaultCompareFn(e,t){return e<t?-1:t<e?1:0}add(e,t){this._values.has(e)||this.insertKeyInOrder(e),this._values.set(e,t)}get(e){return this._values.get(e)}has(e){return this._values.has(e)}get size(){return this._keys.length}keys(){return this._keys}values(){return this._keys.map((e=>{const t=this._values.get(e);return n(t,"value for known key not found in OrderedMap"),t}))}insertKeyInOrder(e){let t=0,n=this._keys.length-1;for(;t<=n;){const i=Math.floor((n+t)/2);this._compareFn(this._keys[i],e)<0?t=i+1:n=i-1}this._keys=this._keys.slice(0,t).concat(e).concat(this._keys.slice(t))}*[Symbol.iterator](){for(let e=0;e<this._keys.length;e+=1){const t=this._values.get(this._keys[e]);n(t,"value for known key not found in OrderedMap"),yield t}}}function s(e){const t=new Array(e.size);let n=0;for(const i of e.values())t[n++]=i;return t}function a(e){const t=new Array(e.size);let n=0;for(const i of e.keys())t[n++]=i;return t}function c(e,t=", ",n,i=" and "){if(0==e.length)return"";const r=e[0];if(1==e.length)return r;const o=e[e.length-1];return 2==e.length?r+(n||i)+o:r+(n||t)+e.slice(1,e.length-1)+i+o}t.OrderedMap=o,t.arrayEquals=function(e,t,n){if(e===t)return!0;if(e.length!==t.length)return!1;for(let i=0;i<e.length;++i)if(!(n?n(e[i],t[i]):e[i]===t[i]))return!1;return!0},t.firstOf=function(e){const t=e[Symbol.iterator]().next();return t.done?void 0:t.value},t.mapValues=s,t.mapKeys=a,t.mapEntries=function(e){const t=new Array(e.size);let n=0;for(const i of e.entries())t[n++]=i;return t},t.setValues=function(e){const t=new Array(e.size);let n=0;for(const i of e.values())t[n++]=i;return t},t.MapWithCachedArrays=class{constructor(){this.map=new Map}clearCaches(){this.cachedKeys=void 0,this.cachedValues=void 0}get size(){return this.map.size}has(e){return this.map.has(e)}get(e){return this.map.get(e)}set(e,t){return this.map.set(e,t),this.clearCaches(),this}delete(e){const t=this.map.delete(e);return t&&this.clearCaches(),t}clear(){this.map.clear(),this.clearCaches()}keys(){return this.cachedKeys||(this.cachedKeys=a(this.map)),this.cachedKeys}values(){return this.cachedValues||(this.cachedValues=s(this.map)),this.cachedValues}},t.copyWitNewLength=function(e,t){n(t>=e.length,(()=>`${t} < ${e.length}`));const i=new Array(t);for(let t=0;t<e.length;t++)i[t]=e[t];return i},t.validateStringContainsBoolean=function(e){if(!e)return!1;switch(e.toLocaleLowerCase()){case"true":case"yes":case"1":return!0;case"false":case"no":case"0":return!1;default:return}},t.joinStrings=c,t.printHumanReadableList=function(e,{emptyValue:t,prefix:n,prefixPlural:i,lastSeparator:r,cutoff_output_length:o}){if(0===e.length)return null!=t?t:"";if(1==e.length)return n?n+" "+e[0]:e[0];const s=null!=o?o:100,{lastIdx:a}=e.reduce((({lastIdx:e,length:t},n)=>t+n.length>s?{lastIdx:e,length:t}:{lastIdx:e+1,length:t+n.length}),{lastIdx:0,length:0}),l=e.slice(0,Math.max(1,a)),u=i?i+" ":n?n+" ":"";return l.length===e.length?u+c(l,", ",void 0,r):u+c(l,", ",void 0,", ")+", ..."},t.isDefined=e=>void 0!==e,t.removeArrayElement=function(e,t){const n=t.indexOf(e);return n>=0&&(t.splice(n,1),!0)}},5663:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateSchema=void 0;const i=n(4177),r=n(8929),o=n(3421),s=n(9495),a=n(5811),c=n(8116);t.validateSchema=function(e){return new u(e).validate()};class l{constructor(e){this.onError=e,this.visitedTypes=new Set,this.fieldPath=[],this.fieldPathIndexByTypeName=new Map}detectCycles(e){if(!this.visitedTypes.has(e.name)){this.visitedTypes.add(e.name),this.fieldPathIndexByTypeName.set(e.name,this.fieldPath.length);for(const t of e.fields())if((0,i.isNonNullType)(t.type)&&(0,i.isInputObjectType)(t.type.ofType)){const e=t.type.ofType,n=this.fieldPathIndexByTypeName.get(e.name);if(this.fieldPath.push(t),void 0===n)this.detectCycles(e);else{const t=this.fieldPath.slice(n),r=t.map((e=>e.name)).join(".");this.onError(`Cannot reference Input Object "${e.name}" within itself through a series of non-null fields: "${r}".`,{nodes:(0,i.sourceASTs)(...t)})}this.fieldPath.pop()}this.fieldPathIndexByTypeName.delete(e.name)}}}class u{constructor(e){this.schema=e,this.emptyVariables=new i.VariableDefinitions,this.hasMissingTypes=!1,this.errors=[]}validate(){for(const e of this.schema.types())switch(this.validateName(e),e.kind){case"ObjectType":case"InterfaceType":this.validateObjectOrInterfaceType(e);break;case"InputObjectType":this.validateInputObjectType(e);break;case"UnionType":this.validateUnionType(e);break;case"EnumType":this.validateEnumType(e)}for(const e of this.schema.allDirectives()){this.validateName(e);for(const t of e.arguments())this.validateArg(t);for(const t of e.applications())this.validateDirectiveApplication(e,t)}if(!this.hasMissingTypes){const e=new l(((e,t)=>this.addError(e,t)));for(const t of this.schema.types())switch(t.kind){case"ObjectType":case"InterfaceType":this.validateImplementedInterfaces(t);break;case"InputObjectType":e.detectCycles(t)}}return this.errors}addError(e,t){this.errors.push(c.ERRORS.INVALID_GRAPHQL.err(e,t))}validateHasType(e){return e.type||(this.addError(`Element ${e.coordinate} does not have a type set`,{nodes:e.sourceAST}),this.hasMissingTypes=!1),!!e.type}validateName(e){if(!(0,s.isIntrospectionName)(e.name))try{(0,r.assertName)(e.name)}catch(t){this.addError(t.message,e.sourceAST?{nodes:e.sourceAST}:{})}}validateObjectOrInterfaceType(e){e.hasFields()||this.addError(`Type ${e.name} must define one or more fields.`,{nodes:e.sourceAST});for(const t of e.fields()){this.validateName(t),this.validateHasType(t);for(const e of t.arguments())this.validateArg(e)}}validateImplementedInterfaces(e){e.implementsInterface(e.name)&&this.addError(`Type ${e} cannot implement itself because it would create a circular reference.`,{nodes:(0,i.sourceASTs)(e,e.interfaceImplementation(e.name))});for(const t of e.interfaces()){for(const n of t.fields()){const t=e.field(n.name);if(t){this.validateHasType(n)&&!(0,a.isSubtype)(n.type,t.type)&&this.addError(`Interface field ${n.coordinate} expects type ${n.type} but ${t.coordinate} of type ${t.type} is not a proper subtype.`,{nodes:(0,i.sourceASTs)(n,t)});for(const e of n.arguments()){const n=t.argument(e.name);n?this.validateHasType(e)&&!(0,a.sameType)(e.type,n.type)&&this.addError(`Interface field argument ${e.coordinate} expects type ${e.type} but ${n.coordinate} is type ${n.type}.`,{nodes:(0,i.sourceASTs)(e,n)}):this.addError(`Interface field argument ${e.coordinate} expected but ${t.coordinate} does not provide it.`,{nodes:(0,i.sourceASTs)(e,t)})}for(const e of t.arguments())n.argument(e.name)||e.isRequired()&&this.addError(`Field ${t.coordinate} includes required argument ${e.name} that is missing from the Interface field ${n.coordinate}.`,{nodes:(0,i.sourceASTs)(e,n)})}else this.addError(`Interface field ${n.coordinate} expected but ${e} does not provide it.`,{nodes:(0,i.sourceASTs)(n,e)})}for(const n of t.interfaces())e.implementsInterface(n)||(n===e?this.addError(`Type ${e} cannot implement ${t} because it would create a circular reference.`,{nodes:(0,i.sourceASTs)(e,t)}):this.addError(`Type ${e} must implement ${n} because it is implemented by ${t}.`,{nodes:(0,i.sourceASTs)(e,t,n)}))}}validateInputObjectType(e){e.hasFields()||this.addError(`Input Object type ${e.name} must define one or more fields.`,{nodes:e.sourceAST});for(const t of e.fields())this.validateName(t),this.validateHasType(t)&&(t.isRequired()&&t.isDeprecated()&&this.addError(`Required input field ${t.coordinate} cannot be deprecated.`,{nodes:(0,i.sourceASTs)(t.appliedDirectivesOf("deprecated")[0],t)}),void 0===t.defaultValue||(0,o.isValidValue)(t.defaultValue,t,new i.VariableDefinitions)||this.addError(`Invalid default value (got: ${(0,o.valueToString)(t.defaultValue)}) provided for input field ${t.coordinate} of type ${t.type}.`,{nodes:(0,i.sourceASTs)(t)}))}validateArg(e){this.validateName(e),this.validateHasType(e)&&(e.isRequired()&&e.isDeprecated()&&this.addError(`Required argument ${e.coordinate} cannot be deprecated.`,{nodes:(0,i.sourceASTs)(e.appliedDirectivesOf("deprecated")[0],e)}),void 0===e.defaultValue||(0,o.isValidValue)(e.defaultValue,e,new i.VariableDefinitions)||this.addError(`Invalid default value (got: ${(0,o.valueToString)(e.defaultValue)}) provided for argument ${e.coordinate} of type ${e.type}.`,{nodes:(0,i.sourceASTs)(e)}))}validateUnionType(e){0===e.membersCount()&&this.addError(`Union type ${e.coordinate} must define one or more member types.`,{nodes:e.sourceAST})}validateEnumType(e){0===e.values.length&&this.addError(`Enum type ${e.coordinate} must define one or more values.`,{nodes:e.sourceAST});for(const t of e.values)this.validateName(t),"true"!==t.name&&"false"!==t.name&&"null"!==t.name||this.addError(`Enum type ${e.coordinate} cannot include value: ${t}.`,{nodes:t.sourceAST})}validateDirectiveApplication(e,t){for(const n of e.arguments()){const r=t.arguments()[n.name];if(r&&n.type&&!(0,o.isValidValue)(r,n,this.emptyVariables)){const r=t.parent,o=r instanceof i.NamedSchemaElement?r.coordinate:"schema";this.addError(`Invalid value for "${n.coordinate}" of type "${n.type}" in application of "${e.coordinate}" to "${o}".`,{nodes:(0,i.sourceASTs)(t,n)})}}}}},4150:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownTypeNamesInFederationRule=void 0;const i=n(8929),r=n(5388);t.KnownTypeNamesInFederationRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),s=Object.create(null);for(const t of e.getDocument().definitions)((0,i.isTypeDefinitionNode)(t)||(0,i.isTypeExtensionNode)(t))&&(s[t.name.value]=!0);const a=Object.keys(n).concat(Object.keys(s));return{NamedType(t,c,l,u,p){var d;const f=t.name.value;if(!n[f]&&!s[f]){const n=null!==(d=p[2])&&void 0!==d?d:l,s=null!=n&&(h=n,!Array.isArray(h)&&((0,i.isTypeSystemDefinitionNode)(h)||(0,i.isTypeSystemExtensionNode)(h)));if(s&&function(e){return-1!==o.indexOf(e)}(f))return;const c=(0,r.suggestionList)(f,s?o.concat(a):a);e.reportError(new i.GraphQLError(`Unknown type "${f}".`+(0,r.didYouMean)(c),{nodes:t}))}var h}}};const o=[...i.specifiedScalarTypes,...i.introspectionTypes].map((e=>e.name))},3421:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.variablesInValue=t.argumentsFromAST=t.valueFromASTUntyped=t.valueFromAST=t.isValidValue=t.valueToAST=t.valueNodeToConstValueNode=t.withDefaultValues=t.argumentsEquals=t.valueEquals=t.valueToString=void 0;const i=n(4177),r=n(8929),o=n(5388),s=n(9539),a=n(5811),c=n(9724),l=n(8116);function u(e,t){if(null==e)return"null";if(t&&(0,i.isNonNullType)(t))return u(e,t.ofType);if(t&&(0,i.isCustomScalarType)(t)&&(t=void 0),(0,i.isVariable)(e))return e.toString();if(Array.isArray(e)){let n;return t&&(0,i.isListType)(t)&&(n=t.ofType),"["+e.map((e=>u(e,n))).join(", ")+"]"}if(t&&(0,i.isListType)(t))return u(e,t.ofType);if("object"==typeof e)return t&&!(0,i.isInputObjectType)(t)&&(t=void 0),"{"+Object.keys(e).map((n=>{var i;const r=t?null===(i=t.field(n))||void 0===i?void 0:i.type:void 0;return`${n}: ${u(e[n],r)}`})).join(", ")+"}";if("string"==typeof e){if(t){if((0,i.isEnumType)(t))return t.value(e)?e:JSON.stringify(e);if(t===t.schema().idType()&&m.test(e))return e}return JSON.stringify(e)}return String(e)}function p(e,t){return e===t||(Array.isArray(e)?Array.isArray(t)&&function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;++n)if(!p(e[n],t[n]))return!1;return!0}(e,t):"object"==typeof e?"object"==typeof t&&d(e,t):e===t)}function d(e,t){const n=Object.keys(e),i=Object.keys(t);if(n.length!=i.length)return!1;for(const r of n){const n=e[r],o=t[r];if(void 0===o&&!i.includes(r))return!1;if(!p(n,o))return!1}return!0}function f(e){return new Error(e)}function h(e,t){if((0,i.isVariable)(e))return e;if(null===e){if((0,i.isNonNullType)(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid null value for non-null type ${t} while computing default values`);return null}if((0,i.isNonNullType)(t))return h(e,t.ofType);if((0,i.isListType)(t))return Array.isArray(e)?e.map((e=>h(e,t.ofType))):h(e,t.ofType);if((0,i.isInputObjectType)(t)){if("object"!=typeof e)throw l.ERRORS.INVALID_GRAPHQL.err(`Expected value for type ${t} to be an object, but is ${typeof e}.`);const n=Object.create(null);for(const r of t.fields()){if(!r.type)throw f(`Cannot compute default value for field ${r.name} of ${t} as the field type is undefined`);const o=e[r.name];if(void 0===o){if(void 0!==r.defaultValue)n[r.name]=h(r.defaultValue,r.type);else if((0,i.isNonNullType)(r.type))throw l.ERRORS.INVALID_GRAPHQL.err(`Field "${r.name}" of required type ${t} was not provided.`)}else n[r.name]=h(o,r.type)}for(const n of Object.keys(e))if(!t.field(n)){const e=(0,o.suggestionList)(n,t.fields().map((e=>e.name)));throw l.ERRORS.INVALID_GRAPHQL.err(`Field "${n}" is not defined by type "${t}".`+(0,o.didYouMean)(e))}return n}return e}t.valueToString=u,t.valueEquals=p,t.argumentsEquals=function(e,t){return e===t||d(e,t)},t.withDefaultValues=function(e,t){if(!t.type)throw f(`Cannot compute default value for argument ${t} as the type is undefined`);return void 0===e&&t.defaultValue?h(t.defaultValue,t.type):h(e,t.type)};const m=/^-?(?:0|[1-9][0-9]*)$/;function y(e){if(void 0!==e){if(null===e)return{kind:r.Kind.NULL};if((0,i.isVariable)(e))return{kind:r.Kind.VARIABLE,name:{kind:r.Kind.NAME,value:e.name}};if(Array.isArray(e)){const t=[];for(const n of e){const e=y(n);void 0!==e&&t.push(e)}return{kind:r.Kind.LIST,values:t}}if("object"==typeof e){const t=[];for(const n of Object.keys(e)){const i=y(e[n]);i&&t.push({kind:r.Kind.OBJECT_FIELD,name:{kind:r.Kind.NAME,value:n},value:i})}return{kind:r.Kind.OBJECT,fields:t}}if("boolean"==typeof e)return{kind:r.Kind.BOOLEAN,value:e};if("number"==typeof e&&isFinite(e)){const t=String(e);return m.test(t)?{kind:r.Kind.INT,value:t}:{kind:r.Kind.FLOAT,value:t}}if("string"==typeof e)return{kind:r.Kind.STRING,value:e};throw f(`Invalid value, cannot be converted to AST: ${(0,s.inspect)(e,!0,10,!0)}`)}}function v(e,t){return(0,i.isNonNullType)(t)?!!(0,i.isNonNullType)(e)&&v(e.ofType,t.ofType):(0,i.isNonNullType)(e)?v(e.ofType,t):(0,i.isListType)(t)?!!(0,i.isListType)(e)&&v(e.ofType,t.ofType):!(0,i.isListType)(e)&&(0,a.sameType)(e,t)}function E(e,t,n,r){if((0,i.isVariable)(e)){const o=r.definition(e);return!!o&&function(e,t,n){const r=e.type;if((0,i.isNonNullType)(t)&&!(0,i.isNonNullType)(r)){const i=void 0!==n;return!((void 0===e.defaultValue||null===e.defaultValue)&&!i)&&v(r,t.ofType)}return v(r,t)}(o,t,n)}if((0,i.isNonNullType)(t))return null!==e&&E(e,t.ofType,void 0,r);if(null==e)return!0;if((0,i.isCustomScalarType)(t))return!0;if((0,i.isListType)(t)){const i=t.ofType;return Array.isArray(e)?e.every((e=>E(e,i,void 0,r))):E(e,i,n,r)}if((0,i.isInputObjectType)(t)){if("object"!=typeof e)return!1;const n=new Set(Object.keys(e)),i=t.fields().every((t=>(n.delete(t.name),E(e[t.name],t.type,t.defaultValue,r)))),o=0!==n.size;return i&&!o}const o=t.schema();if("boolean"==typeof e)return t===o.booleanType();if("number"==typeof e&&isFinite(e)){const n=String(e);return t===o.intType()||t===o.idType()?m.test(n):t===o.floatType()}return"string"==typeof e&&((0,i.isEnumType)(t)?void 0!==t.value(e):(0,i.isScalarType)(t)&&t!==o.booleanType()&&t!==o.intType()&&t!==o.floatType())}function T(e,t){if(e.kind===r.Kind.NULL){if((0,i.isNonNullType)(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid null value for non-null type "${t}"`);return null}if(e.kind===r.Kind.VARIABLE)return new i.Variable(e.name.value);if((0,i.isNonNullType)(t)&&(t=t.ofType),(0,i.isListType)(t)){const n=t.ofType;return e.kind===r.Kind.LIST?e.values.map((e=>T(e,n))):[T(e,n)]}if((0,i.isIntType)(t)){if(e.kind!==r.Kind.INT)throw l.ERRORS.INVALID_GRAPHQL.err(`Int cannot represent non-integer value ${(0,r.print)(e)}.`);const t=parseInt(e.value,10);if(t>2147483647||t<-2147483648)throw l.ERRORS.INVALID_GRAPHQL.err(`Int cannot represent non 32-bit signed integer value ${t}.`);return t}if((0,i.isFloatType)(t)){let t;if(e.kind===r.Kind.INT)t=parseInt(e.value,10);else{if(e.kind!==r.Kind.FLOAT)throw l.ERRORS.INVALID_GRAPHQL.err(`Float can only represent integer or float value, but got a ${e.kind}.`);t=parseFloat(e.value)}if(!isFinite(t))throw l.ERRORS.INVALID_GRAPHQL.err(`Float cannot represent non numeric value ${t}.`);return t}if((0,i.isBooleanType)(t)){if(e.kind!==r.Kind.BOOLEAN)throw l.ERRORS.INVALID_GRAPHQL.err(`Boolean cannot represent a non boolean value ${(0,r.print)(e)}.`);return e.value}if((0,i.isStringType)(t)){if(e.kind!==r.Kind.STRING)throw l.ERRORS.INVALID_GRAPHQL.err(`String cannot represent non string value ${(0,r.print)(e)}.`);return e.value}if((0,i.isIDType)(t)){if(e.kind!==r.Kind.STRING&&e.kind!==r.Kind.INT)throw l.ERRORS.INVALID_GRAPHQL.err(`ID cannot represent value ${(0,r.print)(e)}.`);return e.value}if((0,i.isScalarType)(t))return g(e);if((0,i.isInputObjectType)(t)){if(e.kind!==r.Kind.OBJECT)throw l.ERRORS.INVALID_GRAPHQL.err(`Input Object Type ${t} cannot represent non-object value ${(0,r.print)(e)}.`);const n=Object.create(null);for(const i of e.fields){const e=i.name.value,r=t.field(e);if(!r)throw l.ERRORS.INVALID_GRAPHQL.err(`Unknown field "${e}" found in value for Input Object Type "${t}".`);n[e]=T(i.value,r.type)}return n}if((0,i.isEnumType)(t)){if(e.kind!==r.Kind.STRING&&e.kind!==r.Kind.ENUM)throw l.ERRORS.INVALID_GRAPHQL.err(`Enum Type ${t} cannot represent value ${(0,r.print)(e)}.`);if(!t.value(e.value))throw l.ERRORS.INVALID_GRAPHQL.err(`Enum Type ${t} has no value ${e.value}.`);return e.value}(0,c.assert)(!1,(()=>`Unexpected input type ${t} of kind ${t.kind}.`))}function g(e){switch(e.kind){case r.Kind.NULL:return null;case r.Kind.INT:return parseInt(e.value,10);case r.Kind.FLOAT:return parseFloat(e.value);case r.Kind.STRING:case r.Kind.ENUM:case r.Kind.BOOLEAN:return e.value;case r.Kind.LIST:return e.values.map(g);case r.Kind.OBJECT:const t=Object.create(null);return e.fields.forEach((e=>t[e.name.value]=g(e.value))),t;case r.Kind.VARIABLE:return new i.Variable(e.name.value)}}function I(e,t){(0,i.isVariable)(e)?t.some((t=>t.name===e.name))||t.push(e):e&&(Array.isArray(e)&&e.forEach((e=>I(e,t))),"object"==typeof e&&Object.keys(e).forEach((n=>I(e[n],t))))}t.valueNodeToConstValueNode=function e(t){if(t.kind===r.Kind.NULL||t.kind===r.Kind.INT||t.kind===r.Kind.FLOAT||t.kind===r.Kind.STRING||t.kind===r.Kind.BOOLEAN||t.kind===r.Kind.ENUM)return t;if(t.kind===r.Kind.LIST){const n=t.values.map((t=>e(t)));return{...t,values:n}}if(t.kind===r.Kind.OBJECT){const n=t.fields.map((t=>{return n=t,{...n,value:e(n.value)};var n}));return{...t,fields:n}}if(t.kind===r.Kind.VARIABLE)throw new Error("Unexpected VariableNode in const AST");(0,c.assertUnreachable)(t)},t.valueToAST=function e(t,n){if(void 0!==t){if((0,i.isNonNullType)(n)){const i=e(t,n.ofType);if((null==i?void 0:i.kind)===r.Kind.NULL)throw f(`Invalid null value ${u(t)} for non-null type ${n}`);return i}if(null===t)return{kind:r.Kind.NULL};if((0,i.isVariable)(t))return{kind:r.Kind.VARIABLE,name:{kind:r.Kind.NAME,value:t.name}};if((0,i.isCustomScalarType)(n))return y(t);if((0,i.isListType)(n)){const i=n.ofType,o=Array.from(t);if(null!=o){const t=[];for(const n of o){const r=e(n,i);null!=r&&t.push(r)}return{kind:r.Kind.LIST,values:t}}return e(t,i)}if((0,i.isInputObjectType)(n)){if("object"!=typeof t)throw f(`Invalid non-objet value for input type ${n}, cannot be converted to AST: ${(0,s.inspect)(t,!0,10,!0)}`);const i=[];for(const o of n.fields()){if(!o.type)throw f(`Cannot convert value ${u(t)} as field ${o} has no type set`);const n=e(t[o.name],o.type);n&&i.push({kind:r.Kind.OBJECT_FIELD,name:{kind:r.Kind.NAME,value:o.name},value:n})}return{kind:r.Kind.OBJECT,fields:i}}if("boolean"==typeof t)return{kind:r.Kind.BOOLEAN,value:t};if("number"==typeof t&&isFinite(t)){const e=String(t);return m.test(e)?{kind:r.Kind.INT,value:e}:{kind:r.Kind.FLOAT,value:e}}if("string"==typeof t)return(0,i.isEnumType)(n)?{kind:r.Kind.ENUM,value:t}:n===n.schema().idType()&&m.test(t)?{kind:r.Kind.INT,value:t}:{kind:r.Kind.STRING,value:t};throw f(`Invalid value for type ${n}, cannot be converted to AST: ${(0,s.inspect)(t)}`)}},t.isValidValue=function(e,t,n){return E(e,t.type,t.defaultValue,n)},t.valueFromAST=T,t.valueFromASTUntyped=g,t.argumentsFromAST=function(e,t,n){var i;const o=Object.create(null);if(t)for(const s of t){const t=s.name.value,a=null===(i=n.argument(t))||void 0===i?void 0:i.type;if(!a)throw l.ERRORS.INVALID_GRAPHQL.err(`Unknown argument "${t}" found in value: "${e}" has no argument named "${t}"`);try{o[t]=T(s.value,a)}catch(e){if(e instanceof r.GraphQLError)throw l.ERRORS.INVALID_GRAPHQL.err(`Invalid value for argument "${t}": ${e.message}`);throw e}}return o},t.variablesInValue=function(e){const t=[];return I(e,t),t}},3154:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildFederatedSchema=t.buildSubgraphSchema=void 0;const i=n(9539),r=n(8929),o=n(1846),s=n(415),a=n(3647);function c(e){var t;let n;if("typeDefs"in e){const{typeDefs:t,resolvers:i}=e;n=(Array.isArray(t)?t:[t]).map(((e,t)=>{const n={typeDefs:e};return 0===t&&i&&(n.resolvers=i),n}))}else n=e;const i=(0,o.modulesFromSDL)(n),c=(0,r.concatAST)(i.map((e=>e.typeDefs))),l=(0,s.buildSubgraph)(s.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",c,!1),u=(0,s.printSchema)(l.schema),p=l.schema.toGraphQLJSSchema(),d=null===(t=l.schema.schemaDefinition.rootType("query"))||void 0===t?void 0:t.name;(0,s.assert)(d,"A Query root type should have been added by `buildSubgraph`"),(0,o.addResolversToSchema)(p,{[d]:{_service:()=>({sdl:u})}}),l.metadata().entityType()&&(0,o.addResolversToSchema)(p,{[d]:{_entities:(e,{representations:t},n,i)=>(0,a.entitiesResolver)({representations:t,context:n,info:i})},_Entity:{__resolveType:e=>e.__typename}});for(const e of i)e.resolvers&&(0,o.addResolversToSchema)(p,e.resolvers);return p}t.buildSubgraphSchema=c,t.buildFederatedSchema=(0,i.deprecate)(c,"'buildFederatedSchema' is deprecated. Use 'buildSubgraphSchema' instead.")},4903:(e,t,n)=>{"use strict";t.en=void 0;var i=n(3154);Object.defineProperty(t,"en",{enumerable:!0,get:function(){return i.buildSubgraphSchema}});n(5357)},5357:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printBlockString=t.printType=t.printIntrospectionSchema=t.printSubgraphSchema=void 0;const i=n(8929),r=n(415);t.printSubgraphSchema=function(e){const t=(0,r.graphQLJSSchemaToAST)(e);return(0,r.buildSubgraph)(r.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",t,!1).toString()},t.printIntrospectionSchema=function(e){const t=(0,r.graphQLJSSchemaToAST)(e),n=(0,r.buildSubgraph)(r.FEDERATION_UNNAMED_SUBGRAPH_NAME,"",t,!1);return(0,r.printSchema)(n.schema)},t.printType=function(e){const{definition:t,extensions:n}=(0,r.graphQLJSNamedTypeToAST)(e);return(t?[t]:[]).concat(n).map((e=>(0,i.print)(e))).join("\n\n")},t.printBlockString=function(e,t=!1){const n=!e.includes("\n"),i=" "===e[0]||"\t"===e[0],r='"'===e[e.length-1],o="\\"===e[e.length-1],s=!n||r||o||t;let a="";return!s||n&&i||(a+="\n"),a+=e,s&&(a+="\n"),'"""'+a.replace(/"""/g,'\\"""')+'"""'}},6139:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildSchemaFromSDL=t.addResolversToSchema=t.modulesFromSDL=t.isDocumentNode=t.isNode=void 0;const i=n(8929),r=n(1122),o=n(9504),s=n(4710),a=n(863);function c(e){return null!=e}function l(e){return e&&"string"==typeof e.kind}function u(e){return l(e)&&e.kind===i.Kind.DOCUMENT}function p(e,t){const n=Object.create(null);for(const[i,r]of Object.entries(e))n[i]=t(r);return n}t.isNode=l,t.isDocumentNode=u;const d=[r.KnownTypeNamesRule,r.UniqueDirectivesPerLocationRule,r.PossibleTypeExtensionsRule],f=s.specifiedSDLRules.filter((e=>!d.includes(e))),h={[i.Kind.SCALAR_TYPE_EXTENSION]:i.Kind.SCALAR_TYPE_DEFINITION,[i.Kind.OBJECT_TYPE_EXTENSION]:i.Kind.OBJECT_TYPE_DEFINITION,[i.Kind.INTERFACE_TYPE_EXTENSION]:i.Kind.INTERFACE_TYPE_DEFINITION,[i.Kind.UNION_TYPE_EXTENSION]:i.Kind.UNION_TYPE_DEFINITION,[i.Kind.ENUM_TYPE_EXTENSION]:i.Kind.ENUM_TYPE_DEFINITION,[i.Kind.INPUT_OBJECT_TYPE_EXTENSION]:i.Kind.INPUT_OBJECT_TYPE_DEFINITION};function m(e){return Array.isArray(e)?e.map((e=>l(e)&&u(e)?{typeDefs:e}:e)):[{typeDefs:e}]}function y(e,t){var n,r;for(const[o,s]of Object.entries(t)){const t=e.getType(o);if((0,i.isAbstractType)(t)){const e=t.extensions;for(const[i,r]of Object.entries(s))"__resolveReference"===i?t.extensions={...e,apollo:{...e.apollo,subgraph:{...null===(n=e.apollo)||void 0===n?void 0:n.subgraph,resolveReference:r}}}:"__resolveType"===i&&(t.resolveType=r)}if((0,i.isScalarType)(t))for(const e in s)t[e]=s[e];if((0,i.isEnumType)(t)){const e=t.getValues(),n={};e.forEach((e=>{let t=s[e.name];void 0===t&&(t=e.name),n[e.name]={value:t,deprecationReason:e.deprecationReason,description:e.description,astNode:e.astNode,extensions:void 0}})),Object.assign(t,new i.GraphQLEnumType({...t.toConfig(),values:n}))}if(!(0,i.isObjectType)(t))continue;const a=t.getFields(),c=t.extensions;for(const[e,n]of Object.entries(s)){if("__resolveReference"===e){t.extensions={...c,apollo:{...c.apollo,subgraph:{...null===(r=c.apollo)||void 0===r?void 0:r.subgraph,resolveReference:n}}};continue}if("__isTypeOf"===e){t.isTypeOf=n;continue}const i=a[e];i&&(i.resolve="function"==typeof n?n:n.resolve)}}}t.modulesFromSDL=m,t.addResolversToSchema=y,t.buildSchemaFromSDL=function(e,t){const n=m(e),r=(0,i.concatAST)(n.map((e=>e.typeDefs))),s=(0,o.validateSDL)(r,t,f);if(s.length>0)throw new a.GraphQLSchemaValidationError(s);const l=Object.create(null),u=Object.create(null),d=[],v=[],E=[],T=[];let g;for(const e of r.definitions)if((0,i.isTypeDefinitionNode)(e)){const t=e.name.value;l[t]?l[t].push(e):l[t]=[e]}else if((0,i.isTypeExtensionNode)(e)){const t=e.name.value;u[t]?u[t].push(e):u[t]=[e]}else e.kind===i.Kind.DIRECTIVE_DEFINITION?d.push(e):e.kind===i.Kind.SCHEMA_DEFINITION?(v.push(e),T.push(...e.directives?e.directives:[]),g=e.description):e.kind===i.Kind.SCHEMA_EXTENSION&&(E.push(e),T.push(...e.directives?e.directives:[]));let I=t||new i.GraphQLSchema({query:void 0});const N=[];for(const[e,t]of Object.entries(u))if(!l[e]){const e=t[0],n=e.kind,i={kind:h[n],name:e.name};N.push(i)}let b;I=(0,i.extendSchema)(I,{kind:i.Kind.DOCUMENT,definitions:[...Object.values(l).flat(),...N,...d]},{assumeValidSDL:!0}),I=(0,i.extendSchema)(I,{kind:i.Kind.DOCUMENT,definitions:Object.values(u).flat()},{assumeValidSDL:!0});const _=[...v,...E].map((e=>e.operationTypes)).filter(c).flat();if(_.length>0){b={};for(const{operation:e,type:t}of _)b[e]=t.name.value}else b={query:"Query",mutation:"Mutation",subscription:"Subscription"};I=new i.GraphQLSchema({...I.toConfig(),...p(b,(e=>e?I.getType(e):void 0)),description:null==g?void 0:g.value,astNode:{kind:i.Kind.SCHEMA_DEFINITION,description:g,directives:T,operationTypes:[]}});for(const e of n)e.resolvers&&y(I,e.resolvers);return I}},863:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSchemaValidationError=void 0;class n extends Error{constructor(e){super(),this.errors=e,this.name=this.constructor.name,Error.captureStackTrace(this,this.constructor),this.message=e.map((e=>e.message)).join("\n\n")}}t.GraphQLSchemaValidationError=n},1846:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(2601),t),r(n(6139),t),r(n(863),t),r(n(1511),t)},2601:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformSchema=void 0;const i=n(8929);function r(e,t){const n=Object.create(null);for(const[i,r]of Object.entries(e))n[i]=t(r);return n}t.transformSchema=function(e,t){const n=Object.create(null);for(const r of Object.values(e.getTypeMap())){if((0,i.isIntrospectionType)(r))continue;const e=t(r);if(null===e)continue;const o=e||r;n[o.name]=a(o)}const o=e.toConfig();return new i.GraphQLSchema({...o,types:Object.values(n),query:u(o.query),mutation:u(o.mutation),subscription:u(o.subscription),directives:(s=o.directives,s.map((e=>{const t=e.toConfig();return new i.GraphQLDirective({...t,args:d(t.args)})})))});var s;function a(e){if((0,i.isObjectType)(e)){const t=e.toConfig();return new i.GraphQLObjectType({...t,interfaces:()=>t.interfaces.map(l),fields:()=>p(t.fields)})}if((0,i.isInterfaceType)(e)){const t=e.toConfig();return new i.GraphQLInterfaceType({...t,interfaces:()=>t.interfaces.map(l),fields:()=>p(t.fields)})}if((0,i.isUnionType)(e)){const t=e.toConfig();return new i.GraphQLUnionType({...t,types:()=>t.types.map(l)})}if((0,i.isInputObjectType)(e)){const t=e.toConfig();return new i.GraphQLInputObjectType({...t,fields:()=>r(t.fields,(e=>({...e,type:c(e.type)})))})}return e}function c(e){return(0,i.isListType)(e)?new i.GraphQLList(c(e.ofType)):(0,i.isNonNullType)(e)?new i.GraphQLNonNull(c(e.ofType)):l(e)}function l(e){return n[e.name]||e}function u(e){return e?l(e):void 0}function p(e){return r(e,(e=>({...e,type:c(e.type),args:e.args?d(e.args):void 0})))}function d(e){return r(e,(e=>({...e,type:c(e.type)})))}}},3647:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFederationType=t.federationTypes=t.serviceField=t.entitiesField=t.entitiesResolver=t.LinkImportType=t.AnyType=t.ServiceType=t.EntityType=void 0;const i=n(8929),r=n(9825);function o(e,t){return null!==e&&"object"==typeof e&&Object.defineProperty(e,"__typename",{value:t}),e}function s({representations:e,context:t,info:n}){return e.map((e=>{var s,a,c;const{__typename:l}=e,u=n.schema.getType(l);if(!u||!(0,i.isObjectType)(u))throw new Error(`The _entities resolver tried to load an entity for type "${l}", but no object type of that name was found in the schema`);const p=(0,r.maybeCacheControlFromInfo)(n);if(p){const e=p.cacheHintFromType(u);e&&p.cacheHint.restrict(e)}const d=(null!==(c=null===(a=null===(s=u.extensions.apollo)||void 0===s?void 0:s.subgraph)||void 0===a?void 0:a.resolveReference)&&void 0!==c?c:()=>e)(e,t,n);return"function"==typeof(null==(f=d)?void 0:f.then)?d.then((e=>o(e,l))):o(d,l);var f}))}t.EntityType=new i.GraphQLUnionType({name:"_Entity",types:[]}),t.ServiceType=new i.GraphQLObjectType({name:"_Service",fields:{sdl:{type:i.GraphQLString,description:"The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"}}}),t.AnyType=new i.GraphQLScalarType({name:"_Any",serialize:e=>e}),t.LinkImportType=new i.GraphQLScalarType({name:"link__Import",specifiedByURL:null}),t.entitiesResolver=s,t.entitiesField={type:new i.GraphQLNonNull(new i.GraphQLList(t.EntityType)),args:{representations:{type:new i.GraphQLNonNull(new i.GraphQLList(new i.GraphQLNonNull(t.AnyType)))}},resolve:(e,{representations:t},n,i)=>s({representations:t,context:n,info:i})},t.serviceField={type:new i.GraphQLNonNull(t.ServiceType)},t.federationTypes=[t.ServiceType,t.AnyType,t.EntityType,t.LinkImportType],t.isFederationType=function(e){return(0,i.isNamedType)(e)&&t.federationTypes.some((({name:t})=>t===e.name))}},6434:(e,t,n)=>{"use strict";e=n.nmd(e);const i=(e,t)=>(...n)=>`[${e(...n)+t}m`,r=(e,t)=>(...n)=>{const i=e(...n);return`[${38+t};5;${i}m`},o=(e,t)=>(...n)=>{const i=e(...n);return`[${38+t};2;${i[0]};${i[1]};${i[2]}m`},s=e=>e,a=(e,t,n)=>[e,t,n],c=(e,t,n)=>{Object.defineProperty(e,t,{get:()=>{const i=n();return Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0}),i},enumerable:!0,configurable:!0})};let l;const u=(e,t,i,r)=>{void 0===l&&(l=n(2085));const o=r?10:0,s={};for(const[n,r]of Object.entries(l)){const a="ansi16"===n?"ansi":n;n===t?s[a]=e(i,o):"object"==typeof r&&(s[a]=e(r[t],o))}return s};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(const[n,i]of Object.entries(t)){for(const[n,r]of Object.entries(i))t[n]={open:`[${r[0]}m`,close:`[${r[1]}m`},i[n]=t[n],e.set(r[0],r[1]);Object.defineProperty(t,n,{value:i,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="[39m",t.bgColor.close="[49m",c(t.color,"ansi",(()=>u(i,"ansi16",s,!1))),c(t.color,"ansi256",(()=>u(r,"ansi256",s,!1))),c(t.color,"ansi16m",(()=>u(o,"rgb",a,!1))),c(t.bgColor,"ansi",(()=>u(i,"ansi16",s,!0))),c(t.bgColor,"ansi256",(()=>u(r,"ansi256",s,!0))),c(t.bgColor,"ansi16m",(()=>u(o,"rgb",a,!0))),t}})},9282:(e,t,n)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var r,o,s=n(2136).codes,a=s.ERR_AMBIGUOUS_ARGUMENT,c=s.ERR_INVALID_ARG_TYPE,l=s.ERR_INVALID_ARG_VALUE,u=s.ERR_INVALID_RETURN_VALUE,p=s.ERR_MISSING_ARGS,d=n(9363),f=n(9539).inspect,h=n(9539).types,m=h.isPromise,y=h.isRegExp,v=Object.assign?Object.assign:n(8091).assign,E=Object.is?Object.is:n(609);function T(){var e=n(9158);r=e.isDeepEqual,o=e.isDeepStrictEqual}new Map;var g=!1,I=e.exports=S,N={};function b(e){if(e.message instanceof Error)throw e.message;throw new d(e)}function _(e,t,n,i){if(!n){var r=!1;if(0===t)r=!0,i="No value argument passed to `assert.ok()`";else if(i instanceof Error)throw i;var o=new d({actual:n,expected:!0,message:i,operator:"==",stackStartFn:e});throw o.generatedMessage=r,o}}function S(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];_.apply(void 0,[S,t.length].concat(t))}I.fail=function e(t,n,i,r,o){var s,a=arguments.length;if(0===a)s="Failed";else if(1===a)i=t,t=void 0;else{if(!1===g){g=!0;var c=process.emitWarning?process.emitWarning:console.warn.bind(console);c("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}2===a&&(r="!=")}if(i instanceof Error)throw i;var l={actual:t,expected:n,operator:void 0===r?"fail":r,stackStartFn:o||e};void 0!==i&&(l.message=i);var u=new d(l);throw s&&(u.message=s,u.generatedMessage=!0),u},I.AssertionError=d,I.ok=S,I.equal=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");t!=n&&b({actual:t,expected:n,message:i,operator:"==",stackStartFn:e})},I.notEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");t==n&&b({actual:t,expected:n,message:i,operator:"!=",stackStartFn:e})},I.deepEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),r(t,n)||b({actual:t,expected:n,message:i,operator:"deepEqual",stackStartFn:e})},I.notDeepEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),r(t,n)&&b({actual:t,expected:n,message:i,operator:"notDeepEqual",stackStartFn:e})},I.deepStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),o(t,n)||b({actual:t,expected:n,message:i,operator:"deepStrictEqual",stackStartFn:e})},I.notDeepStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");void 0===r&&T(),o(t,n)&&b({actual:t,expected:n,message:i,operator:"notDeepStrictEqual",stackStartFn:e})},I.strictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");E(t,n)||b({actual:t,expected:n,message:i,operator:"strictEqual",stackStartFn:e})},I.notStrictEqual=function e(t,n,i){if(arguments.length<2)throw new p("actual","expected");E(t,n)&&b({actual:t,expected:n,message:i,operator:"notStrictEqual",stackStartFn:e})};var O=function e(t,n,i){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.forEach((function(e){e in t&&(void 0!==i&&"string"==typeof i[e]&&y(t[e])&&t[e].test(i[e])?r[e]=i[e]:r[e]=t[e])}))};function D(e,t,n,i,r,s){if(!(n in e)||!o(e[n],t[n])){if(!i){var a=new O(e,r),c=new O(t,r,e),l=new d({actual:a,expected:c,operator:"deepStrictEqual",stackStartFn:s});throw l.actual=e,l.expected=t,l.operator=s.name,l}b({actual:e,expected:t,message:i,operator:s.name,stackStartFn:s})}}function A(e,t,n,o){if("function"!=typeof t){if(y(t))return t.test(e);if(2===arguments.length)throw new c("expected",["Function","RegExp"],t);if("object"!==i(e)||null===e){var s=new d({actual:e,expected:t,message:n,operator:"deepStrictEqual",stackStartFn:o});throw s.operator=o.name,s}var a=Object.keys(t);if(t instanceof Error)a.push("name","message");else if(0===a.length)throw new l("error",t,"may not be an empty object");return void 0===r&&T(),a.forEach((function(i){"string"==typeof e[i]&&y(t[i])&&t[i].test(e[i])||D(e,t,i,n,a,o)})),!0}return void 0!==t.prototype&&e instanceof t||!Error.isPrototypeOf(t)&&!0===t.call({},e)}function R(e){if("function"!=typeof e)throw new c("fn","Function",e);try{e()}catch(e){return e}return N}function w(e){return m(e)||null!==e&&"object"===i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function L(e){return Promise.resolve().then((function(){var t;if("function"==typeof e){if(!w(t=e()))throw new u("instance of Promise","promiseFn",t)}else{if(!w(e))throw new c("promiseFn",["Function","Promise"],e);t=e}return Promise.resolve().then((function(){return t})).then((function(){return N})).catch((function(e){return e}))}))}function F(e,t,n,r){if("string"==typeof n){if(4===arguments.length)throw new c("error",["Object","Error","Function","RegExp"],n);if("object"===i(t)&&null!==t){if(t.message===n)throw new a("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===n)throw new a("error/message",'The error "'.concat(t,'" is identical to the message.'));r=n,n=void 0}else if(null!=n&&"object"!==i(n)&&"function"!=typeof n)throw new c("error",["Object","Error","Function","RegExp"],n);if(t===N){var o="";n&&n.name&&(o+=" (".concat(n.name,")")),o+=r?": ".concat(r):".";var s="rejects"===e.name?"rejection":"exception";b({actual:void 0,expected:n,operator:e.name,message:"Missing expected ".concat(s).concat(o),stackStartFn:e})}if(n&&!A(t,n,r,e))throw t}function x(e,t,n,i){if(t!==N){if("string"==typeof n&&(i=n,n=void 0),!n||A(t,n)){var r=i?": ".concat(i):".",o="doesNotReject"===e.name?"rejection":"exception";b({actual:t,expected:n,operator:e.name,message:"Got unwanted ".concat(o).concat(r,"\n")+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}function k(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];_.apply(void 0,[k,t.length].concat(t))}I.throws=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];F.apply(void 0,[e,R(t)].concat(i))},I.rejects=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return L(t).then((function(t){return F.apply(void 0,[e,t].concat(i))}))},I.doesNotThrow=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];x.apply(void 0,[e,R(t)].concat(i))},I.doesNotReject=function e(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return L(t).then((function(t){return x.apply(void 0,[e,t].concat(i))}))},I.ifError=function e(t){if(null!=t){var n="ifError got unwanted exception: ";"object"===i(t)&&"string"==typeof t.message?0===t.message.length&&t.constructor?n+=t.constructor.name:n+=t.message:n+=f(t);var r=new d({actual:t,expected:null,operator:"ifError",message:n,stackStartFn:e}),o=t.stack;if("string"==typeof o){var s=o.split("\n");s.shift();for(var a=r.stack.split("\n"),c=0;c<s.length;c++){var l=a.indexOf(s[c]);if(-1!==l){a=a.slice(0,l);break}}r.stack="".concat(a.join("\n"),"\n").concat(s.join("\n"))}throw r}},I.strict=v(k,I,{equal:I.strictEqual,deepEqual:I.deepStrictEqual,notEqual:I.notStrictEqual,notDeepEqual:I.notDeepStrictEqual}),I.strict.strict=I.strict},9363:(e,t,n)=>{"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?s(e):t}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e){var t="function"==typeof Map?new Map:void 0;return a=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return l(e,arguments,p(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),u(i,e)},a(e)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return l=c()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&u(r,n.prototype),r},l.apply(null,arguments)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}var f=n(9539).inspect,h=n(2136).codes.ERR_INVALID_ARG_TYPE;function m(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}var y="",v="",E="",T="",g={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function I(e){var t=Object.keys(e),n=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){n[t]=e[t]})),Object.defineProperty(n,"message",{value:e.message}),n}function N(e){return f(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var b=function(e){function t(e){var n;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"object"!==d(e)||null===e)throw new h("options","Object",e);var i=e.message,r=e.operator,a=e.stackStartFn,c=e.actual,l=e.expected,u=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=i)n=o(this,p(t).call(this,String(i)));else if(process.stderr&&process.stderr.isTTY&&(process.stderr&&process.stderr.getColorDepth&&1!==process.stderr.getColorDepth()?(y="[34m",v="[32m",T="[39m",E="[31m"):(y="",v="",T="",E="")),"object"===d(c)&&null!==c&&"object"===d(l)&&null!==l&&"stack"in c&&c instanceof Error&&"stack"in l&&l instanceof Error&&(c=I(c),l=I(l)),"deepStrictEqual"===r||"strictEqual"===r)n=o(this,p(t).call(this,function(e,t,n){var i="",r="",o=0,s="",a=!1,c=N(e),l=c.split("\n"),u=N(t).split("\n"),p=0,f="";if("strictEqual"===n&&"object"===d(e)&&"object"===d(t)&&null!==e&&null!==t&&(n="strictEqualObject"),1===l.length&&1===u.length&&l[0]!==u[0]){var h=l[0].length+u[0].length;if(h<=10){if(!("object"===d(e)&&null!==e||"object"===d(t)&&null!==t||0===e&&0===t))return"".concat(g[n],"\n\n")+"".concat(l[0]," !== ").concat(u[0],"\n")}else if("strictEqualObject"!==n&&h<(process.stderr&&process.stderr.isTTY?process.stderr.columns:80)){for(;l[0][p]===u[0][p];)p++;p>2&&(f="\n  ".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return"";var n=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,n-e.length)}(" ",p),"^"),p=0)}}for(var I=l[l.length-1],b=u[u.length-1];I===b&&(p++<2?s="\n  ".concat(I).concat(s):i=I,l.pop(),u.pop(),0!==l.length&&0!==u.length);)I=l[l.length-1],b=u[u.length-1];var _=Math.max(l.length,u.length);if(0===_){var S=c.split("\n");if(S.length>30)for(S[26]="".concat(y,"...").concat(T);S.length>27;)S.pop();return"".concat(g.notIdentical,"\n\n").concat(S.join("\n"),"\n")}p>3&&(s="\n".concat(y,"...").concat(T).concat(s),a=!0),""!==i&&(s="\n  ".concat(i).concat(s),i="");var O=0,D=g[n]+"\n".concat(v,"+ actual").concat(T," ").concat(E,"- expected").concat(T),A=" ".concat(y,"...").concat(T," Lines skipped");for(p=0;p<_;p++){var R=p-o;if(l.length<p+1)R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(u[p-2]),O++),r+="\n  ".concat(u[p-1]),O++),o=p,i+="\n".concat(E,"-").concat(T," ").concat(u[p]),O++;else if(u.length<p+1)R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(l[p-2]),O++),r+="\n  ".concat(l[p-1]),O++),o=p,r+="\n".concat(v,"+").concat(T," ").concat(l[p]),O++;else{var w=u[p],L=l[p],F=L!==w&&(!m(L,",")||L.slice(0,-1)!==w);F&&m(w,",")&&w.slice(0,-1)===L&&(F=!1,L+=","),F?(R>1&&p>2&&(R>4?(r+="\n".concat(y,"...").concat(T),a=!0):R>3&&(r+="\n  ".concat(l[p-2]),O++),r+="\n  ".concat(l[p-1]),O++),o=p,r+="\n".concat(v,"+").concat(T," ").concat(L),i+="\n".concat(E,"-").concat(T," ").concat(w),O+=2):(r+=i,i="",1!==R&&0!==p||(r+="\n  ".concat(L),O++))}if(O>20&&p<_-2)return"".concat(D).concat(A,"\n").concat(r,"\n").concat(y,"...").concat(T).concat(i,"\n")+"".concat(y,"...").concat(T)}return"".concat(D).concat(a?A:"","\n").concat(r).concat(i).concat(s).concat(f)}(c,l,r)));else if("notDeepStrictEqual"===r||"notStrictEqual"===r){var f=g[r],b=N(c).split("\n");if("notStrictEqual"===r&&"object"===d(c)&&null!==c&&(f=g.notStrictEqualObject),b.length>30)for(b[26]="".concat(y,"...").concat(T);b.length>27;)b.pop();n=1===b.length?o(this,p(t).call(this,"".concat(f," ").concat(b[0]))):o(this,p(t).call(this,"".concat(f,"\n\n").concat(b.join("\n"),"\n")))}else{var _=N(c),S="",O=g[r];"notDeepEqual"===r||"notEqual"===r?(_="".concat(g[r],"\n\n").concat(_)).length>1024&&(_="".concat(_.slice(0,1021),"...")):(S="".concat(N(l)),_.length>512&&(_="".concat(_.slice(0,509),"...")),S.length>512&&(S="".concat(S.slice(0,509),"...")),"deepEqual"===r||"equal"===r?_="".concat(O,"\n\n").concat(_,"\n\nshould equal\n\n"):S=" ".concat(r," ").concat(S)),n=o(this,p(t).call(this,"".concat(_).concat(S)))}return Error.stackTraceLimit=u,n.generatedMessage=!i,Object.defineProperty(s(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=c,n.expected=l,n.operator=r,Error.captureStackTrace&&Error.captureStackTrace(s(n),a),n.stack,n.name="AssertionError",o(n)}var n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),n=t,a=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:f.custom,value:function(e,t){return f(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){i(e,t,n[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],a&&r(n.prototype,a),t}(a(Error));e.exports=b},2136:(e,t,n)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}function o(e,t){return o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},o(e,t)}var s,a,c={};function l(e,t,n){n||(n=Error);var s=function(n){function s(n,o,a){var c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),c=function(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,r(s).call(this,function(e,n,i){return"string"==typeof t?t:t(e,n,i)}(n,o,a))),c.code=e,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(s,n),s}(n);c[e]=s}function u(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}l("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),l("ERR_INVALID_ARG_TYPE",(function(e,t,r){var o,a,c,l,p;if(void 0===s&&(s=n(9282)),s("string"==typeof e,"'name' must be a string"),"string"==typeof t&&(a="not ",t.substr(0,a.length)===a)?(o="must not be",t=t.replace(/^not /,"")):o="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e," argument"))c="The ".concat(e," ").concat(o," ").concat(u(t,"type"));else{var d=("number"!=typeof p&&(p=0),p+".".length>(l=e).length||-1===l.indexOf(".",p)?"argument":"property");c='The "'.concat(e,'" ').concat(d," ").concat(o," ").concat(u(t,"type"))}return c+". Received type ".concat(i(r))}),TypeError),l("ERR_INVALID_ARG_VALUE",(function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===a&&(a=n(9539));var r=a.inspect(t);return r.length>128&&(r="".concat(r.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(i,". Received ").concat(r)}),TypeError,RangeError),l("ERR_INVALID_RETURN_VALUE",(function(e,t,n){var r;return r=n&&n.constructor&&n.constructor.name?"instance of ".concat(n.constructor.name):"type ".concat(i(n)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(r,".")}),TypeError),l("ERR_MISSING_ARGS",(function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];void 0===s&&(s=n(9282)),s(t.length>0,"At least one arg needs to be specified");var r="The ",o=t.length;switch(t=t.map((function(e){return'"'.concat(e,'"')})),o){case 1:r+="".concat(t[0]," argument");break;case 2:r+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:r+=t.slice(0,o-1).join(", "),r+=", and ".concat(t[o-1]," arguments")}return"".concat(r," must be specified")}),TypeError),e.exports.codes=c},9158:(e,t,n)=>{"use strict";function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==a.return||a.return()}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=void 0!==/a/g.flags,s=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},a=function(e){var t=[];return e.forEach((function(e,n){return t.push([n,e])})),t},c=Object.is?Object.is:n(609),l=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},u=Number.isNaN?Number.isNaN:n(360);function p(e){return e.call.bind(e)}var d=p(Object.prototype.hasOwnProperty),f=p(Object.prototype.propertyIsEnumerable),h=p(Object.prototype.toString),m=n(9539).types,y=m.isAnyArrayBuffer,v=m.isArrayBufferView,E=m.isDate,T=m.isMap,g=m.isRegExp,I=m.isSet,N=m.isNativeError,b=m.isBoxedPrimitive,_=m.isNumberObject,S=m.isStringObject,O=m.isBooleanObject,D=m.isBigIntObject,A=m.isSymbolObject,R=m.isFloat32Array,w=m.isFloat64Array;function L(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var n=e.charCodeAt(t);if(n<48||n>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function F(e){return Object.keys(e).filter(L).concat(l(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function x(e,t){if(e===t)return 0;for(var n=e.length,i=t.length,r=0,o=Math.min(n,i);r<o;++r)if(e[r]!==t[r]){n=e[r],i=t[r];break}return n<i?-1:i<n?1:0}function k(e,t,n,i){if(e===t)return 0!==e||!n||c(e,t);if(n){if("object"!==r(e))return"number"==typeof e&&u(e)&&u(t);if("object"!==r(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||"object"!==r(e))return(null===t||"object"!==r(t))&&e==t;if(null===t||"object"!==r(t))return!1}var s,a,l,p,d=h(e);if(d!==h(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var f=F(e),m=F(t);return f.length===m.length&&C(e,t,n,i,1,f)}if("[object Object]"===d&&(!T(e)&&T(t)||!I(e)&&I(t)))return!1;if(E(e)){if(!E(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(g(e)){if(!g(t)||(l=e,p=t,!(o?l.source===p.source&&l.flags===p.flags:RegExp.prototype.toString.call(l)===RegExp.prototype.toString.call(p))))return!1}else if(N(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(v(e)){if(n||!R(e)&&!w(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===x(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0}(e,t))return!1;var L=F(e),k=F(t);return L.length===k.length&&C(e,t,n,i,0,L)}if(I(e))return!(!I(t)||e.size!==t.size)&&C(e,t,n,i,2);if(T(e))return!(!T(t)||e.size!==t.size)&&C(e,t,n,i,3);if(y(e)){if(a=t,(s=e).byteLength!==a.byteLength||0!==x(new Uint8Array(s),new Uint8Array(a)))return!1}else if(b(e)&&!function(e,t){return _(e)?_(t)&&c(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):S(e)?S(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):O(e)?O(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):D(e)?D(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):A(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return C(e,t,n,i,0)}function $(e,t){return t.filter((function(t){return f(e,t)}))}function C(e,t,n,i,r,o){if(5===arguments.length){o=Object.keys(e);var s=Object.keys(t);if(o.length!==s.length)return!1}for(var a=0;a<o.length;a++)if(!d(t,o[a]))return!1;if(n&&5===arguments.length){var c=l(e);if(0!==c.length){var u=0;for(a=0;a<c.length;a++){var p=c[a];if(f(e,p)){if(!f(t,p))return!1;o.push(p),u++}else if(f(t,p))return!1}var h=l(t);if(c.length!==h.length&&$(t,h).length!==u)return!1}else{var m=l(t);if(0!==m.length&&0!==$(t,m).length)return!1}}if(0===o.length&&(0===r||1===r&&0===e.length||0===e.size))return!0;if(void 0===i)i={val1:new Map,val2:new Map,position:0};else{var y=i.val1.get(e);if(void 0!==y){var v=i.val2.get(t);if(void 0!==v)return y===v}i.position++}i.val1.set(e,i.position),i.val2.set(t,i.position);var E=G(e,t,n,o,i,r);return i.val1.delete(e),i.val2.delete(t),E}function j(e,t,n,i){for(var r=s(e),o=0;o<r.length;o++){var a=r[o];if(k(t,a,n,i))return e.delete(a),!0}return!1}function M(e){switch(r(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(u(e))return!1}return!0}function P(e,t,n){var i=M(n);return null!=i?i:t.has(i)&&!e.has(i)}function U(e,t,n,i,r){var o=M(n);if(null!=o)return o;var s=t.get(o);return!(void 0===s&&!t.has(o)||!k(i,s,!1,r))&&!e.has(o)&&k(i,s,!1,r)}function V(e,t,n,i,r,o){for(var a=s(e),c=0;c<a.length;c++){var l=a[c];if(k(n,l,r,o)&&k(i,t.get(l),r,o))return e.delete(l),!0}return!1}function G(e,t,n,o,c,l){var u=0;if(2===l){if(!function(e,t,n,i){for(var o=null,a=s(e),c=0;c<a.length;c++){var l=a[c];if("object"===r(l)&&null!==l)null===o&&(o=new Set),o.add(l);else if(!t.has(l)){if(n)return!1;if(!P(e,t,l))return!1;null===o&&(o=new Set),o.add(l)}}if(null!==o){for(var u=s(t),p=0;p<u.length;p++){var d=u[p];if("object"===r(d)&&null!==d){if(!j(o,d,n,i))return!1}else if(!n&&!e.has(d)&&!j(o,d,n,i))return!1}return 0===o.size}return!0}(e,t,n,c))return!1}else if(3===l){if(!function(e,t,n,o){for(var s=null,c=a(e),l=0;l<c.length;l++){var u=i(c[l],2),p=u[0],d=u[1];if("object"===r(p)&&null!==p)null===s&&(s=new Set),s.add(p);else{var f=t.get(p);if(void 0===f&&!t.has(p)||!k(d,f,n,o)){if(n)return!1;if(!U(e,t,p,d,o))return!1;null===s&&(s=new Set),s.add(p)}}}if(null!==s){for(var h=a(t),m=0;m<h.length;m++){var y=i(h[m],2),v=(p=y[0],y[1]);if("object"===r(p)&&null!==p){if(!V(s,e,p,v,n,o))return!1}else if(!(n||e.has(p)&&k(e.get(p),v,!1,o)||V(s,e,p,v,!1,o)))return!1}return 0===s.size}return!0}(e,t,n,c))return!1}else if(1===l)for(;u<e.length;u++){if(!d(e,u)){if(d(t,u))return!1;for(var p=Object.keys(e);u<p.length;u++){var f=p[u];if(!d(t,f)||!k(e[f],t[f],n,c))return!1}return p.length===Object.keys(t).length}if(!d(t,u)||!k(e[u],t[u],n,c))return!1}for(u=0;u<o.length;u++){var h=o[u];if(!k(e[h],t[h],n,c))return!1}return!0}e.exports={isDeepEqual:function(e,t){return k(e,t,!1)},isDeepStrictEqual:function(e,t){return k(e,t,!0)}}},1924:(e,t,n)=>{"use strict";var i=n(210),r=n(5559),o=r(i("String.prototype.indexOf"));e.exports=function(e,t){var n=i(e,!!t);return"function"==typeof n&&o(e,".prototype.")>-1?r(n):n}},5559:(e,t,n)=>{"use strict";var i=n(8612),r=n(210),o=r("%Function.prototype.apply%"),s=r("%Function.prototype.call%"),a=r("%Reflect.apply%",!0)||i.call(s,o),c=r("%Object.getOwnPropertyDescriptor%",!0),l=r("%Object.defineProperty%",!0),u=r("%Math.max%");if(l)try{l({},"a",{value:1})}catch(e){l=null}e.exports=function(e){var t=a(i,s,arguments);if(c&&l){var n=c(t,"length");n.configurable&&l(t,"length",{value:1+u(0,e.length-(arguments.length-1))})}return t};var p=function(){return a(i,o,arguments)};l?l(e.exports,"apply",{value:p}):e.exports.apply=p},4061:(e,t,n)=>{"use strict";const i=n(6434),{stdout:r,stderr:o}=n(8555),{stringReplaceAll:s,stringEncaseCRLFWithFirstIndex:a}=n(3559),{isArray:c}=Array,l=["ansi","ansi","ansi256","ansi16m"],u=Object.create(null);class p{constructor(e){return d(e)}}const d=e=>{const t={};return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=r?r.level:0;e.level=void 0===t.level?n:t.level})(t,e),t.template=(...e)=>g(t.template,...e),Object.setPrototypeOf(t,f.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=p,t.template};function f(e){return d(e)}for(const[e,t]of Object.entries(i))u[e]={get(){const n=v(this,y(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:n}),n}};u.visible={get(){const e=v(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const h=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of h)u[e]={get(){const{level:t}=this;return function(...n){const r=y(i.color[l[t]][e](...n),i.color.close,this._styler);return v(this,r,this._isEmpty)}}};for(const e of h)u["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const r=y(i.bgColor[l[t]][e](...n),i.bgColor.close,this._styler);return v(this,r,this._isEmpty)}}};const m=Object.defineProperties((()=>{}),{...u,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),y=(e,t,n)=>{let i,r;return void 0===n?(i=e,r=t):(i=n.openAll+e,r=t+n.closeAll),{open:e,close:t,openAll:i,closeAll:r,parent:n}},v=(e,t,n)=>{const i=(...e)=>c(e[0])&&c(e[0].raw)?E(i,g(i,...e)):E(i,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(i,m),i._generator=e,i._styler=t,i._isEmpty=n,i},E=(e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let n=e._styler;if(void 0===n)return t;const{openAll:i,closeAll:r}=n;if(-1!==t.indexOf(""))for(;void 0!==n;)t=s(t,n.close,n.open),n=n.parent;const o=t.indexOf("\n");return-1!==o&&(t=a(t,r,i,o)),i+t+r};let T;const g=(e,...t)=>{const[i]=t;if(!c(i)||!c(i.raw))return t.join(" ");const r=t.slice(1),o=[i.raw[0]];for(let e=1;e<i.length;e++)o.push(String(r[e-1]).replace(/[{}\\]/g,"\\$&"),String(i.raw[e]));return void 0===T&&(T=n(9515)),T(e,o.join(""))};Object.defineProperties(f.prototype,u);const I=f();I.supportsColor=r,I.stderr=f({level:o?o.level:0}),I.stderr.supportsColor=o,e.exports=I},9515:e=>{"use strict";const t=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,n=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,i=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,r=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,o=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function s(e){const t="u"===e[0],n="{"===e[1];return t&&!n&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):t&&n?String.fromCodePoint(parseInt(e.slice(2,-1),16)):o.get(e)||e}function a(e,t){const n=[],o=t.trim().split(/\s*,\s*/g);let a;for(const t of o){const o=Number(t);if(Number.isNaN(o)){if(!(a=t.match(i)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);n.push(a[2].replace(r,((e,t,n)=>t?s(t):n)))}else n.push(o)}return n}function c(e){n.lastIndex=0;const t=[];let i;for(;null!==(i=n.exec(e));){const e=i[1];if(i[2]){const n=a(e,i[2]);t.push([e].concat(n))}else t.push([e])}return t}function l(e,t){const n={};for(const e of t)for(const t of e.styles)n[t[0]]=e.inverse?null:t.slice(1);let i=e;for(const[e,t]of Object.entries(n))if(Array.isArray(t)){if(!(e in i))throw new Error(`Unknown Chalk style: ${e}`);i=t.length>0?i[e](...t):i[e]}return i}e.exports=(e,n)=>{const i=[],r=[];let o=[];if(n.replace(t,((t,n,a,u,p,d)=>{if(n)o.push(s(n));else if(u){const t=o.join("");o=[],r.push(0===i.length?t:l(e,i)(t)),i.push({inverse:a,styles:c(u)})}else if(p){if(0===i.length)throw new Error("Found extraneous } in Chalk template literal");r.push(l(e,i)(o.join(""))),o=[],i.pop()}else o.push(d)})),r.push(o.join("")),i.length>0){const e=`Chalk template literal is missing ${i.length} closing bracket${1===i.length?"":"s"} (\`}\`)`;throw new Error(e)}return r.join("")}},3559:e=>{"use strict";e.exports={stringReplaceAll:(e,t,n)=>{let i=e.indexOf(t);if(-1===i)return e;const r=t.length;let o=0,s="";do{s+=e.substr(o,i-o)+t+n,o=i+r,i=e.indexOf(t,o)}while(-1!==i);return s+=e.substr(o),s},stringEncaseCRLFWithFirstIndex:(e,t,n,i)=>{let r=0,o="";do{const s="\r"===e[i-1];o+=e.substr(r,(s?i-1:i)-r)+t+(s?"\r\n":"\n")+n,r=i+1,i=e.indexOf("\n",r)}while(-1!==i);return o+=e.substr(r),o}}},8168:(e,t,n)=>{const i=n(8874),r={};for(const e of Object.keys(i))r[i[e]]=e;const o={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=o;for(const e of Object.keys(o)){if(!("channels"in o[e]))throw new Error("missing channels property: "+e);if(!("labels"in o[e]))throw new Error("missing channel labels property: "+e);if(o[e].labels.length!==o[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:n}=o[e];delete o[e].channels,delete o[e].labels,Object.defineProperty(o[e],"channels",{value:t}),Object.defineProperty(o[e],"labels",{value:n})}o.rgb.hsl=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.min(t,n,i),o=Math.max(t,n,i),s=o-r;let a,c;o===r?a=0:t===o?a=(n-i)/s:n===o?a=2+(i-t)/s:i===o&&(a=4+(t-n)/s),a=Math.min(60*a,360),a<0&&(a+=360);const l=(r+o)/2;return c=o===r?0:l<=.5?s/(o+r):s/(2-o-r),[a,100*c,100*l]},o.rgb.hsv=function(e){let t,n,i,r,o;const s=e[0]/255,a=e[1]/255,c=e[2]/255,l=Math.max(s,a,c),u=l-Math.min(s,a,c),p=function(e){return(l-e)/6/u+.5};return 0===u?(r=0,o=0):(o=u/l,t=p(s),n=p(a),i=p(c),s===l?r=i-n:a===l?r=1/3+t-i:c===l&&(r=2/3+n-t),r<0?r+=1:r>1&&(r-=1)),[360*r,100*o,100*l]},o.rgb.hwb=function(e){const t=e[0],n=e[1];let i=e[2];const r=o.rgb.hsl(e)[0],s=1/255*Math.min(t,Math.min(n,i));return i=1-1/255*Math.max(t,Math.max(n,i)),[r,100*s,100*i]},o.rgb.cmyk=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.min(1-t,1-n,1-i);return[100*((1-t-r)/(1-r)||0),100*((1-n-r)/(1-r)||0),100*((1-i-r)/(1-r)||0),100*r]},o.rgb.keyword=function(e){const t=r[e];if(t)return t;let n,o=1/0;for(const t of Object.keys(i)){const r=(a=i[t],((s=e)[0]-a[0])**2+(s[1]-a[1])**2+(s[2]-a[2])**2);r<o&&(o=r,n=t)}var s,a;return n},o.keyword.rgb=function(e){return i[e]},o.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,i=e[2]/255;return t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,i=i>.04045?((i+.055)/1.055)**2.4:i/12.92,[100*(.4124*t+.3576*n+.1805*i),100*(.2126*t+.7152*n+.0722*i),100*(.0193*t+.1192*n+.9505*i)]},o.rgb.lab=function(e){const t=o.rgb.xyz(e);let n=t[0],i=t[1],r=t[2];return n/=95.047,i/=100,r/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,i=i>.008856?i**(1/3):7.787*i+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,[116*i-16,500*(n-i),200*(i-r)]},o.hsl.rgb=function(e){const t=e[0]/360,n=e[1]/100,i=e[2]/100;let r,o,s;if(0===n)return s=255*i,[s,s,s];r=i<.5?i*(1+n):i+n-i*n;const a=2*i-r,c=[0,0,0];for(let e=0;e<3;e++)o=t+1/3*-(e-1),o<0&&o++,o>1&&o--,s=6*o<1?a+6*(r-a)*o:2*o<1?r:3*o<2?a+(r-a)*(2/3-o)*6:a,c[e]=255*s;return c},o.hsl.hsv=function(e){const t=e[0];let n=e[1]/100,i=e[2]/100,r=n;const o=Math.max(i,.01);return i*=2,n*=i<=1?i:2-i,r*=o<=1?o:2-o,[t,100*(0===i?2*r/(o+r):2*n/(i+n)),(i+n)/2*100]},o.hsv.rgb=function(e){const t=e[0]/60,n=e[1]/100;let i=e[2]/100;const r=Math.floor(t)%6,o=t-Math.floor(t),s=255*i*(1-n),a=255*i*(1-n*o),c=255*i*(1-n*(1-o));switch(i*=255,r){case 0:return[i,c,s];case 1:return[a,i,s];case 2:return[s,i,c];case 3:return[s,a,i];case 4:return[c,s,i];case 5:return[i,s,a]}},o.hsv.hsl=function(e){const t=e[0],n=e[1]/100,i=e[2]/100,r=Math.max(i,.01);let o,s;s=(2-n)*i;const a=(2-n)*r;return o=n*r,o/=a<=1?a:2-a,o=o||0,s/=2,[t,100*o,100*s]},o.hwb.rgb=function(e){const t=e[0]/360;let n=e[1]/100,i=e[2]/100;const r=n+i;let o;r>1&&(n/=r,i/=r);const s=Math.floor(6*t),a=1-i;o=6*t-s,0!=(1&s)&&(o=1-o);const c=n+o*(a-n);let l,u,p;switch(s){default:case 6:case 0:l=a,u=c,p=n;break;case 1:l=c,u=a,p=n;break;case 2:l=n,u=a,p=c;break;case 3:l=n,u=c,p=a;break;case 4:l=c,u=n,p=a;break;case 5:l=a,u=n,p=c}return[255*l,255*u,255*p]},o.cmyk.rgb=function(e){const t=e[0]/100,n=e[1]/100,i=e[2]/100,r=e[3]/100;return[255*(1-Math.min(1,t*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(e){const t=e[0]/100,n=e[1]/100,i=e[2]/100;let r,o,s;return r=3.2406*t+-1.5372*n+-.4986*i,o=-.9689*t+1.8758*n+.0415*i,s=.0557*t+-.204*n+1.057*i,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,r=Math.min(Math.max(0,r),1),o=Math.min(Math.max(0,o),1),s=Math.min(Math.max(0,s),1),[255*r,255*o,255*s]},o.xyz.lab=function(e){let t=e[0],n=e[1],i=e[2];return t/=95.047,n/=100,i/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,i=i>.008856?i**(1/3):7.787*i+16/116,[116*n-16,500*(t-n),200*(n-i)]},o.lab.xyz=function(e){let t,n,i;n=(e[0]+16)/116,t=e[1]/500+n,i=n-e[2]/200;const r=n**3,o=t**3,s=i**3;return n=r>.008856?r:(n-16/116)/7.787,t=o>.008856?o:(t-16/116)/7.787,i=s>.008856?s:(i-16/116)/7.787,t*=95.047,n*=100,i*=108.883,[t,n,i]},o.lab.lch=function(e){const t=e[0],n=e[1],i=e[2];let r;return r=360*Math.atan2(i,n)/2/Math.PI,r<0&&(r+=360),[t,Math.sqrt(n*n+i*i),r]},o.lch.lab=function(e){const t=e[0],n=e[1],i=e[2]/360*2*Math.PI;return[t,n*Math.cos(i),n*Math.sin(i)]},o.rgb.ansi16=function(e,t=null){const[n,i,r]=e;let s=null===t?o.rgb.hsv(e)[2]:t;if(s=Math.round(s/50),0===s)return 30;let a=30+(Math.round(r/255)<<2|Math.round(i/255)<<1|Math.round(n/255));return 2===s&&(a+=60),a},o.hsv.ansi16=function(e){return o.rgb.ansi16(o.hsv.rgb(e),e[2])},o.rgb.ansi256=function(e){const t=e[0],n=e[1],i=e[2];return t===n&&n===i?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(e){let t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},o.ansi256.rgb=function(e){if(e>=232){const t=10*(e-232)+8;return[t,t,t]}let t;return e-=16,[Math.floor(e/36)/5*255,Math.floor((t=e%36)/6)/5*255,t%6/5*255]},o.rgb.hex=function(e){const t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},o.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];3===t[0].length&&(n=n.split("").map((e=>e+e)).join(""));const i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(e){const t=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.max(Math.max(t,n),i),o=Math.min(Math.min(t,n),i),s=r-o;let a,c;return a=s<1?o/(1-s):0,c=s<=0?0:r===t?(n-i)/s%6:r===n?2+(i-t)/s:4+(t-n)/s,c/=6,c%=1,[360*c,100*s,100*a]},o.hsl.hcg=function(e){const t=e[1]/100,n=e[2]/100,i=n<.5?2*t*n:2*t*(1-n);let r=0;return i<1&&(r=(n-.5*i)/(1-i)),[e[0],100*i,100*r]},o.hsv.hcg=function(e){const t=e[1]/100,n=e[2]/100,i=t*n;let r=0;return i<1&&(r=(n-i)/(1-i)),[e[0],100*i,100*r]},o.hcg.rgb=function(e){const t=e[0]/360,n=e[1]/100,i=e[2]/100;if(0===n)return[255*i,255*i,255*i];const r=[0,0,0],o=t%1*6,s=o%1,a=1-s;let c=0;switch(Math.floor(o)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=a,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=a,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=a}return c=(1-n)*i,[255*(n*r[0]+c),255*(n*r[1]+c),255*(n*r[2]+c)]},o.hcg.hsv=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);let i=0;return n>0&&(i=t/n),[e[0],100*i,100*n]},o.hcg.hsl=function(e){const t=e[1]/100,n=e[2]/100*(1-t)+.5*t;let i=0;return n>0&&n<.5?i=t/(2*n):n>=.5&&n<1&&(i=t/(2*(1-n))),[e[0],100*i,100*n]},o.hcg.hwb=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},o.hwb.hcg=function(e){const t=e[1]/100,n=1-e[2]/100,i=n-t;let r=0;return i<1&&(r=(n-i)/(1-i)),[e[0],100*i,100*r]},o.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},o.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},o.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},o.gray.hsl=function(e){return[0,0,e[0]]},o.gray.hsv=o.gray.hsl,o.gray.hwb=function(e){return[0,100,e[0]]},o.gray.cmyk=function(e){return[0,0,0,e[0]]},o.gray.lab=function(e){return[e[0],0,0]},o.gray.hex=function(e){const t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},2085:(e,t,n)=>{const i=n(8168),r=n(4111),o={};Object.keys(i).forEach((e=>{o[e]={},Object.defineProperty(o[e],"channels",{value:i[e].channels}),Object.defineProperty(o[e],"labels",{value:i[e].labels});const t=r(e);Object.keys(t).forEach((n=>{const i=t[n];o[e][n]=function(e){const t=function(...t){const n=t[0];if(null==n)return n;n.length>1&&(t=n);const i=e(t);if("object"==typeof i)for(let e=i.length,t=0;t<e;t++)i[t]=Math.round(i[t]);return i};return"conversion"in e&&(t.conversion=e.conversion),t}(i),o[e][n].raw=function(e){const t=function(...t){const n=t[0];return null==n?n:(n.length>1&&(t=n),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(i)}))})),e.exports=o},4111:(e,t,n)=>{const i=n(8168);function r(e,t){return function(n){return t(e(n))}}function o(e,t){const n=[t[e].parent,e];let o=i[t[e].parent][e],s=t[e].parent;for(;t[s].parent;)n.unshift(t[s].parent),o=r(i[t[s].parent][s],o),s=t[s].parent;return o.conversion=n,o}e.exports=function(e){const t=function(e){const t=function(){const e={},t=Object.keys(i);for(let n=t.length,i=0;i<n;i++)e[t[i]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;){const e=n.pop(),r=Object.keys(i[e]);for(let i=r.length,o=0;o<i;o++){const i=r[o],s=t[i];-1===s.distance&&(s.distance=t[e].distance+1,s.parent=e,n.unshift(i))}}return t}(e),n={},r=Object.keys(t);for(let e=r.length,i=0;i<e;i++){const e=r[i];null!==t[e].parent&&(n[e]=o(e,t))}return n}},8874:e=>{"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},5108:(e,t,n)=>{var i=n(9539),r=n(9282);function o(){return(new Date).getTime()}var s,a=Array.prototype.slice,c={};s=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var l=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(e){c[e]=o()},"time"],[function(e){var t=c[e];if(!t)throw new Error("No such label: "+e);delete c[e];var n=o()-t;s.log(e+": "+n+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=i.format.apply(null,arguments),s.error(e.stack)},"trace"],[function(e){s.log(i.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=a.call(arguments,1);r.ok(!1,i.format.apply(null,t))}},"assert"]],u=0;u<l.length;u++){var p=l[u],d=p[0],f=p[1];s[f]||(s[f]=d)}e.exports=s},4289:(e,t,n)=>{"use strict";var i=n(2215),r="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,s=Array.prototype.concat,a=Object.defineProperty,c=n(1044)(),l=a&&c,u=function(e,t,n,i){var r;(!(t in e)||"function"==typeof(r=i)&&"[object Function]"===o.call(r)&&i())&&(l?a(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},p=function(e,t){var n=arguments.length>2?arguments[2]:{},o=i(t);r&&(o=s.call(o,Object.getOwnPropertySymbols(t)));for(var a=0;a<o.length;a+=1)u(e,o[a],t[o[a]],n[o[a]])};p.supportsDescriptors=!!l,e.exports=p},8091:e=>{"use strict";function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),i=1;i<arguments.length;i++){var r=arguments[i];if(null!=r)for(var o=Object.keys(Object(r)),s=0,a=o.length;s<a;s++){var c=o[s],l=Object.getOwnPropertyDescriptor(r,c);void 0!==l&&l.enumerable&&(n[c]=r[c])}}return n}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},4029:(e,t,n)=>{"use strict";var i=n(5320),r=Object.prototype.toString,o=Object.prototype.hasOwnProperty,s=function(e,t,n){for(var i=0,r=e.length;i<r;i++)o.call(e,i)&&(null==n?t(e[i],i,e):t.call(n,e[i],i,e))},a=function(e,t,n){for(var i=0,r=e.length;i<r;i++)null==n?t(e.charAt(i),i,e):t.call(n,e.charAt(i),i,e)},c=function(e,t,n){for(var i in e)o.call(e,i)&&(null==n?t(e[i],i,e):t.call(n,e[i],i,e))};e.exports=function(e,t,n){if(!i(t))throw new TypeError("iterator must be a function");var o;arguments.length>=3&&(o=n),"[object Array]"===r.call(e)?s(e,t,o):"string"==typeof e?a(e,t,o):c(e,t,o)}},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,i=Object.prototype.toString,r="[object Function]";e.exports=function(e){var o=this;if("function"!=typeof o||i.call(o)!==r)throw new TypeError(t+o);for(var s,a=n.call(arguments,1),c=function(){if(this instanceof s){var t=o.apply(this,a.concat(n.call(arguments)));return Object(t)===t?t:this}return o.apply(e,a.concat(n.call(arguments)))},l=Math.max(0,o.length-a.length),u=[],p=0;p<l;p++)u.push("$"+p);if(s=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(c),o.prototype){var d=function(){};d.prototype=o.prototype,s.prototype=new d,d.prototype=null}return s}},8612:(e,t,n)=>{"use strict";var i=n(7648);e.exports=Function.prototype.bind||i},210:(e,t,n)=>{"use strict";var i,r=SyntaxError,o=Function,s=TypeError,a=function(e){try{return o('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var l=function(){throw new s},u=c?function(){try{return l}catch(e){try{return c(arguments,"callee").get}catch(e){return l}}}():l,p=n(1405)(),d=Object.getPrototypeOf||function(e){return e.__proto__},f={},h="undefined"==typeof Uint8Array?i:d(Uint8Array),m={"%AggregateError%":"undefined"==typeof AggregateError?i:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?i:ArrayBuffer,"%ArrayIteratorPrototype%":p?d([][Symbol.iterator]()):i,"%AsyncFromSyncIteratorPrototype%":i,"%AsyncFunction%":f,"%AsyncGenerator%":f,"%AsyncGeneratorFunction%":f,"%AsyncIteratorPrototype%":f,"%Atomics%":"undefined"==typeof Atomics?i:Atomics,"%BigInt%":"undefined"==typeof BigInt?i:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?i:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?i:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?i:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?i:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":f,"%Int8Array%":"undefined"==typeof Int8Array?i:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?i:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?i:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":p?d(d([][Symbol.iterator]())):i,"%JSON%":"object"==typeof JSON?JSON:i,"%Map%":"undefined"==typeof Map?i:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&p?d((new Map)[Symbol.iterator]()):i,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?i:Promise,"%Proxy%":"undefined"==typeof Proxy?i:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?i:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?i:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&p?d((new Set)[Symbol.iterator]()):i,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?i:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":p?d(""[Symbol.iterator]()):i,"%Symbol%":p?Symbol:i,"%SyntaxError%":r,"%ThrowTypeError%":u,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?i:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?i:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?i:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?i:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?i:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?i:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?i:WeakSet},y=function e(t){var n;if("%AsyncFunction%"===t)n=a("async function () {}");else if("%GeneratorFunction%"===t)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=a("async function* () {}");else if("%AsyncGenerator%"===t){var i=e("%AsyncGeneratorFunction%");i&&(n=i.prototype)}else if("%AsyncIteratorPrototype%"===t){var r=e("%AsyncGenerator%");r&&(n=d(r.prototype))}return m[t]=n,n},v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},E=n(8612),T=n(7642),g=E.call(Function.call,Array.prototype.concat),I=E.call(Function.apply,Array.prototype.splice),N=E.call(Function.call,String.prototype.replace),b=E.call(Function.call,String.prototype.slice),_=E.call(Function.call,RegExp.prototype.exec),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,O=/\\(\\)?/g,D=function(e){var t=b(e,0,1),n=b(e,-1);if("%"===t&&"%"!==n)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new r("invalid intrinsic syntax, expected opening `%`");var i=[];return N(e,S,(function(e,t,n,r){i[i.length]=n?N(r,O,"$1"):t||e})),i},A=function(e,t){var n,i=e;if(T(v,i)&&(i="%"+(n=v[i])[0]+"%"),T(m,i)){var o=m[i];if(o===f&&(o=y(i)),void 0===o&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:i,value:o}}throw new r("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');if(null===_(/^%?[^%]*%?$/,e))throw new r("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=D(e),i=n.length>0?n[0]:"",o=A("%"+i+"%",t),a=o.name,l=o.value,u=!1,p=o.alias;p&&(i=p[0],I(n,g([0,1],p)));for(var d=1,f=!0;d<n.length;d+=1){var h=n[d],y=b(h,0,1),v=b(h,-1);if(('"'===y||"'"===y||"`"===y||'"'===v||"'"===v||"`"===v)&&y!==v)throw new r("property names with quotes must have matching quotes");if("constructor"!==h&&f||(u=!0),T(m,a="%"+(i+="."+h)+"%"))l=m[a];else if(null!=l){if(!(h in l)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&d+1>=n.length){var E=c(l,h);l=(f=!!E)&&"get"in E&&!("originalValue"in E.get)?E.get:l[h]}else f=T(l,h),l=l[h];f&&!u&&(m[a]=l)}}return l}},7296:(e,t,n)=>{"use strict";var i=n(210)("%Object.getOwnPropertyDescriptor%",!0);if(i)try{i([],"length")}catch(e){i=null}e.exports=i},5822:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLError=void 0,t.formatError=function(e){return e.toJSON()},t.printError=function(e){return e.toString()};var i=n(5690),r=n(9016),o=n(8038);class s extends Error{constructor(e,...t){var n,o,c;const{nodes:l,source:u,positions:p,path:d,originalError:f,extensions:h}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=d?d:void 0,this.originalError=null!=f?f:void 0,this.nodes=a(Array.isArray(l)?l:l?[l]:void 0);const m=a(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=u?u:null==m||null===(o=m[0])||void 0===o?void 0:o.source,this.positions=null!=p?p:null==m?void 0:m.map((e=>e.start)),this.locations=p&&u?p.map((e=>(0,r.getLocation)(u,e))):null==m?void 0:m.map((e=>(0,r.getLocation)(e.source,e.start)));const y=(0,i.isObjectLike)(null==f?void 0:f.extensions)?null==f?void 0:f.extensions:void 0;this.extensions=null!==(c=null!=h?h:y)&&void 0!==c?c:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=f&&f.stack?Object.defineProperty(this,"stack",{value:f.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,s):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const t of this.nodes)t.loc&&(e+="\n\n"+(0,o.printLocation)(t.loc));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+(0,o.printSourceLocation)(this.source,t);return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function a(e){return void 0===e||0===e.length?void 0:e}t.GraphQLError=s},8950:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.collectFields=function(e,t,n,i,r){const o=new Map;return c(e,t,n,i,r,o,new Set),o},t.collectSubfields=function(e,t,n,i,r){const o=new Map,s=new Set;for(const a of r)a.selectionSet&&c(e,t,n,i,a.selectionSet,o,s);return o};var i=n(2828),r=n(5003),o=n(7197),s=n(5115),a=n(8840);function c(e,t,n,r,o,s,a){for(const d of o.selections)switch(d.kind){case i.Kind.FIELD:{if(!l(n,d))continue;const e=(p=d).alias?p.alias.value:p.name.value,t=s.get(e);void 0!==t?t.push(d):s.set(e,[d]);break}case i.Kind.INLINE_FRAGMENT:if(!l(n,d)||!u(e,d,r))continue;c(e,t,n,r,d.selectionSet,s,a);break;case i.Kind.FRAGMENT_SPREAD:{const i=d.name.value;if(a.has(i)||!l(n,d))continue;a.add(i);const o=t[i];if(!o||!u(e,o,r))continue;c(e,t,n,r,o.selectionSet,s,a);break}}var p}function l(e,t){const n=(0,a.getDirectiveValues)(o.GraphQLSkipDirective,t,e);if(!0===(null==n?void 0:n.if))return!1;const i=(0,a.getDirectiveValues)(o.GraphQLIncludeDirective,t,e);return!1!==(null==i?void 0:i.if)}function u(e,t,n){const i=t.typeCondition;if(!i)return!0;const o=(0,s.typeFromAST)(e,i);return o===n||!!(0,r.isAbstractType)(o)&&e.isSubType(o,n)}},8840:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getArgumentValues=f,t.getDirectiveValues=function(e,t,n){var i;const r=null===(i=t.directives)||void 0===i?void 0:i.find((t=>t.name.value===e.name));if(r)return f(e,r,n)},t.getVariableValues=function(e,t,n,r){const a=[],f=null==r?void 0:r.maxErrors;try{const r=function(e,t,n,r){const a={};for(const f of t){const t=f.variable.name.value,m=(0,p.typeFromAST)(e,f.type);if(!(0,l.isInputType)(m)){const e=(0,c.print)(f.type);r(new s.GraphQLError(`Variable "$${t}" expected value of type "${e}" which cannot be used as an input type.`,{nodes:f.type}));continue}if(!h(n,t)){if(f.defaultValue)a[t]=(0,d.valueFromAST)(f.defaultValue,m);else if((0,l.isNonNullType)(m)){const e=(0,i.inspect)(m);r(new s.GraphQLError(`Variable "$${t}" of required type "${e}" was not provided.`,{nodes:f}))}continue}const y=n[t];if(null===y&&(0,l.isNonNullType)(m)){const e=(0,i.inspect)(m);r(new s.GraphQLError(`Variable "$${t}" of non-null type "${e}" must not be null.`,{nodes:f}))}else a[t]=(0,u.coerceInputValue)(y,m,((e,n,a)=>{let c=`Variable "$${t}" got invalid value `+(0,i.inspect)(n);e.length>0&&(c+=` at "${t}${(0,o.printPathArray)(e)}"`),r(new s.GraphQLError(c+"; "+a.message,{nodes:f,originalError:a.originalError}))}))}return a}(e,t,n,(e=>{if(null!=f&&a.length>=f)throw new s.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");a.push(e)}));if(0===a.length)return{coerced:r}}catch(e){a.push(e)}return{errors:a}};var i=n(8002),r=n(2863),o=n(737),s=n(5822),a=n(2828),c=n(3033),l=n(5003),u=n(3679),p=n(5115),d=n(3770);function f(e,t,n){var o;const u={},p=null!==(o=t.arguments)&&void 0!==o?o:[],f=(0,r.keyMap)(p,(e=>e.name.value));for(const r of e.args){const e=r.name,o=r.type,p=f[e];if(!p){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of required type "${(0,i.inspect)(o)}" was not provided.`,{nodes:t});continue}const m=p.value;let y=m.kind===a.Kind.NULL;if(m.kind===a.Kind.VARIABLE){const t=m.name.value;if(null==n||!h(n,t)){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of required type "${(0,i.inspect)(o)}" was provided the variable "$${t}" which was not provided a runtime value.`,{nodes:m});continue}y=null==n[t]}if(y&&(0,l.isNonNullType)(o))throw new s.GraphQLError(`Argument "${e}" of non-null type "${(0,i.inspect)(o)}" must not be null.`,{nodes:m});const v=(0,d.valueFromAST)(m,o,n);if(void 0===v)throw new s.GraphQLError(`Argument "${e}" has invalid value ${(0,c.print)(m)}.`,{nodes:m});u[e]=v}return u}function h(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},7059:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addPath=function(e,t,n){return{prev:e,key:t,typename:n}},t.pathToArray=function(e){const t=[];let n=e;for(;n;)t.push(n.key),n=n.prev;return t.reverse()}},7242:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.devAssert=function(e,t){if(!Boolean(e))throw new Error(t)}},100:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.didYouMean=function(e,t){const[n,i]=t?[e,t]:[void 0,e];let r=" Did you mean ";n&&(r+=n+" ");const o=i.map((e=>`"${e}"`));switch(o.length){case 0:return"";case 1:return r+o[0]+"?";case 2:return r+o[0]+" or "+o[1]+"?"}const s=o.slice(0,5),a=s.pop();return r+s.join(", ")+", or "+a+"?"}},4620:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=function(e,t){const n=new Map;for(const i of e){const e=t(i),r=n.get(e);void 0===r?n.set(e,[i]):r.push(i)}return n}},3317:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.identityFunc=function(e){return e}},8002:(e,t)=>{"use strict";function n(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const i=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:n(t,i)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const i=Math.min(10,e.length),r=e.length-i,o=[];for(let r=0;r<i;++r)o.push(n(e[r],t));return 1===r?o.push("... 1 more item"):r>1&&o.push(`... ${r} more items`),"["+o.join(", ")+"]"}(e,i);return function(e,t){const i=Object.entries(e);if(0===i.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const r=i.map((([e,i])=>e+": "+n(i,t)));return"{ "+r.join(", ")+" }"}(e,i)}(e,t);default:return String(e)}}Object.defineProperty(t,"__esModule",{value:!0}),t.inspect=function(e){return n(e,[])}},5752:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.instanceOf=void 0,n(8002);t.instanceOf=function(e,t){return e instanceof t}},7706:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invariant=function(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}},6609:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIterableObject=function(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}},5690:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isObjectLike=function(e){return"object"==typeof e&&null!==e}},2863:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.keyMap=function(e,t){const n=Object.create(null);for(const i of e)n[t(i)]=i;return n}},7154:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.keyValMap=function(e,t,n){const i=Object.create(null);for(const r of e)i[t(r)]=n(r);return i}},6124:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mapValue=function(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}},5250:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.naturalCompare=function(e,t){let r=0,o=0;for(;r<e.length&&o<t.length;){let s=e.charCodeAt(r),a=t.charCodeAt(o);if(i(s)&&i(a)){let c=0;do{++r,c=10*c+s-n,s=e.charCodeAt(r)}while(i(s)&&c>0);let l=0;do{++o,l=10*l+a-n,a=t.charCodeAt(o)}while(i(a)&&l>0);if(c<l)return-1;if(c>l)return 1}else{if(s<a)return-1;if(s>a)return 1;++r,++o}}return e.length-t.length};const n=48;function i(e){return!isNaN(e)&&n<=e&&e<=57}},737:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printPathArray=function(e){return e.map((e=>"number"==typeof e?"["+e.toString()+"]":"."+e)).join("")}},8070:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.suggestionList=function(e,t){const n=Object.create(null),o=new r(e),s=Math.floor(.4*e.length)+1;for(const e of t){const t=o.measure(e,s);void 0!==t&&(n[e]=t)}return Object.keys(n).sort(((e,t)=>{const r=n[e]-n[t];return 0!==r?r:(0,i.naturalCompare)(e,t)}))};var i=n(5250);class r{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=o(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;const n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=o(n),r=this._inputArray;if(i.length<r.length){const e=i;i=r,r=e}const s=i.length,a=r.length;if(s-a>t)return;const c=this._rows;for(let e=0;e<=a;e++)c[0][e]=e;for(let e=1;e<=s;e++){const n=c[(e-1)%3],o=c[e%3];let s=o[0]=e;for(let t=1;t<=a;t++){const a=i[e-1]===r[t-1]?0:1;let l=Math.min(n[t]+1,o[t-1]+1,n[t-1]+a);if(e>1&&t>1&&i[e-1]===r[t-2]&&i[e-2]===r[t-1]){const n=c[(e-2)%3][t-2];l=Math.min(l,n+1)}l<s&&(s=l),o[t]=l}if(s>t)return}const l=c[s%3][a];return l<=t?l:void 0}}function o(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}},7690:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toObjMap=function(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}},1807:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Token=t.QueryDocumentKeys=t.OperationTypeNode=t.Location=void 0,t.isNode=function(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&o.has(t)};class n{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}t.Location=n;class i{constructor(e,t,n,i,r,o){this.kind=e,this.start=t,this.end=n,this.line=i,this.column=r,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}t.Token=i;const r={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};t.QueryDocumentKeys=r;const o=new Set(Object.keys(r));var s;t.OperationTypeNode=s,function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(s||(t.OperationTypeNode=s={}))},849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dedentBlockStringLines=function(e){var t;let n=Number.MAX_SAFE_INTEGER,i=null,o=-1;for(let t=0;t<e.length;++t){var s;const a=e[t],c=r(a);c!==a.length&&(i=null!==(s=i)&&void 0!==s?s:t,o=t,0!==t&&c<n&&(n=c))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=i)&&void 0!==t?t:0,o+1)},t.isPrintableAsBlockString=function(e){if(""===e)return!0;let t=!0,n=!1,i=!0,r=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 13:return!1;case 10:if(t&&!r)return!1;r=!0,t=!0,n=!1;break;case 9:case 32:n||(n=t);break;default:i&&(i=n),t=!1}return!t&&(!i||!r)},t.printBlockString=function(e,t){const n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),o=1===r.length,s=r.length>1&&r.slice(1).every((e=>0===e.length||(0,i.isWhiteSpace)(e.charCodeAt(0)))),a=n.endsWith('\\"""'),c=e.endsWith('"')&&!a,l=e.endsWith("\\"),u=c||l,p=!(null!=t&&t.minimize)&&(!o||e.length>70||u||s||a);let d="";const f=o&&(0,i.isWhiteSpace)(e.charCodeAt(0));return(p&&!f||s)&&(d+="\n"),d+=n,(p||u)&&(d+="\n"),'"""'+d+'"""'};var i=n(2591);function r(e){let t=0;for(;t<e.length&&(0,i.isWhiteSpace)(e.charCodeAt(t));)++t;return t}},2591:(e,t)=>{"use strict";function n(e){return e>=48&&e<=57}function i(e){return e>=97&&e<=122||e>=65&&e<=90}Object.defineProperty(t,"__esModule",{value:!0}),t.isDigit=n,t.isLetter=i,t.isNameContinue=function(e){return i(e)||n(e)||95===e},t.isNameStart=function(e){return i(e)||95===e},t.isWhiteSpace=function(e){return 9===e||32===e}},8333:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.DirectiveLocation=void 0,t.DirectiveLocation=n,function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(n||(t.DirectiveLocation=n={}))},2828:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Kind=void 0,t.Kind=n,function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(n||(t.Kind=n={}))},9016:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLocation=function(e,t){let n=0,o=1;for(const s of e.body.matchAll(r)){if("number"==typeof s.index||(0,i.invariant)(!1),s.index>=t)break;n=s.index+s[0].length,o+=1}return{line:o,column:t+1-n}};var i=n(7706);const r=/\r\n|[\n\r]/g},1352:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isConstValueNode=function e(t){return o(t)&&(t.kind===i.Kind.LIST?t.values.some(e):t.kind===i.Kind.OBJECT?t.fields.some((t=>e(t.value))):t.kind!==i.Kind.VARIABLE)},t.isDefinitionNode=function(e){return r(e)||s(e)||c(e)},t.isExecutableDefinitionNode=r,t.isSelectionNode=function(e){return e.kind===i.Kind.FIELD||e.kind===i.Kind.FRAGMENT_SPREAD||e.kind===i.Kind.INLINE_FRAGMENT},t.isTypeDefinitionNode=a,t.isTypeExtensionNode=l,t.isTypeNode=function(e){return e.kind===i.Kind.NAMED_TYPE||e.kind===i.Kind.LIST_TYPE||e.kind===i.Kind.NON_NULL_TYPE},t.isTypeSystemDefinitionNode=s,t.isTypeSystemExtensionNode=c,t.isValueNode=o;var i=n(2828);function r(e){return e.kind===i.Kind.OPERATION_DEFINITION||e.kind===i.Kind.FRAGMENT_DEFINITION}function o(e){return e.kind===i.Kind.VARIABLE||e.kind===i.Kind.INT||e.kind===i.Kind.FLOAT||e.kind===i.Kind.STRING||e.kind===i.Kind.BOOLEAN||e.kind===i.Kind.NULL||e.kind===i.Kind.ENUM||e.kind===i.Kind.LIST||e.kind===i.Kind.OBJECT}function s(e){return e.kind===i.Kind.SCHEMA_DEFINITION||a(e)||e.kind===i.Kind.DIRECTIVE_DEFINITION}function a(e){return e.kind===i.Kind.SCALAR_TYPE_DEFINITION||e.kind===i.Kind.OBJECT_TYPE_DEFINITION||e.kind===i.Kind.INTERFACE_TYPE_DEFINITION||e.kind===i.Kind.UNION_TYPE_DEFINITION||e.kind===i.Kind.ENUM_TYPE_DEFINITION||e.kind===i.Kind.INPUT_OBJECT_TYPE_DEFINITION}function c(e){return e.kind===i.Kind.SCHEMA_EXTENSION||l(e)}function l(e){return e.kind===i.Kind.SCALAR_TYPE_EXTENSION||e.kind===i.Kind.OBJECT_TYPE_EXTENSION||e.kind===i.Kind.INTERFACE_TYPE_EXTENSION||e.kind===i.Kind.UNION_TYPE_EXTENSION||e.kind===i.Kind.ENUM_TYPE_EXTENSION||e.kind===i.Kind.INPUT_OBJECT_TYPE_EXTENSION}},8038:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printLocation=function(e){return r(e.source,(0,i.getLocation)(e.source,e.start))},t.printSourceLocation=r;var i=n(9016);function r(e,t){const n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,s=e.locationOffset.line-1,a=t.line+s,c=1===t.line?n:0,l=t.column+c,u=`${e.name}:${a}:${l}\n`,p=i.split(/\r\n|[\n\r]/g),d=p[r];if(d.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<d.length;e+=80)n.push(d.slice(e,e+80));return u+o([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+o([[a-1+" |",p[r-1]],[`${a} |`,d],["|","^".padStart(l)],[`${a+1} |`,p[r+1]]])}function o(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}},8942:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printString=function(e){return`"${e.replace(n,i)}"`};const n=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function i(e){return r[e.charCodeAt(0)]}const r=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"]},3033:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.print=function(e){return(0,o.visit)(e,s)};var i=n(849),r=n(8942),o=n(285);const s={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>a(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=l("(",a(e.variableDefinitions,", "),")"),n=a([e.operation,a([e.name,t]),a(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+l(" = ",n)+l(" ",a(i," "))},SelectionSet:{leave:({selections:e})=>c(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){const o=l("",e,": ")+t;let s=o+l("(",a(n,", "),")");return s.length>80&&(s=o+l("(\n",u(a(n,"\n")),"\n)")),a([s,a(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+l(" ",a(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>a(["...",l("on ",e),a(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${l("(",a(n,", "),")")} on ${t} ${l("",a(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?(0,i.printBlockString)(e):(0,r.printString)(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+a(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+a(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+l("(",a(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>l("",e,"\n")+a(["schema",a(t," "),c(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>l("",e,"\n")+a(["scalar",t,a(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>l("",e,"\n")+a(["type",t,l("implements ",a(n," & ")),a(i," "),c(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>l("",e,"\n")+t+(p(n)?l("(\n",u(a(n,"\n")),"\n)"):l("(",a(n,", "),")"))+": "+i+l(" ",a(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>l("",e,"\n")+a([t+": "+n,l("= ",i),a(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>l("",e,"\n")+a(["interface",t,l("implements ",a(n," & ")),a(i," "),c(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>l("",e,"\n")+a(["union",t,a(n," "),l("= ",a(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>l("",e,"\n")+a(["enum",t,a(n," "),c(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>l("",e,"\n")+a([t,a(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>l("",e,"\n")+a(["input",t,a(n," "),c(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>l("",e,"\n")+"directive @"+t+(p(n)?l("(\n",u(a(n,"\n")),"\n)"):l("(",a(n,", "),")"))+(i?" repeatable":"")+" on "+a(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>a(["extend schema",a(e," "),c(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>a(["extend scalar",e,a(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>a(["extend type",e,l("implements ",a(t," & ")),a(n," "),c(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>a(["extend interface",e,l("implements ",a(t," & ")),a(n," "),c(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>a(["extend union",e,a(t," "),l("= ",a(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>a(["extend enum",e,a(t," "),c(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>a(["extend input",e,a(t," "),c(n)]," ")}};function a(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function c(e){return l("{\n",u(a(e,"\n")),"\n}")}function l(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function u(e){return l("  ",e.replace(/\n/g,"\n  "))}function p(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}},285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BREAK=void 0,t.getEnterLeaveForKind=c,t.getVisitFn=function(e,t,n){const{enter:i,leave:r}=c(e,t);return n?r:i},t.visit=function(e,t,n=o.QueryDocumentKeys){const l=new Map;for(const e of Object.values(s.Kind))l.set(e,c(t,e));let u,p,d,f=Array.isArray(e),h=[e],m=-1,y=[],v=e;const E=[],T=[];do{m++;const e=m===h.length,s=e&&0!==y.length;if(e){if(p=0===T.length?void 0:E[E.length-1],v=d,d=T.pop(),s)if(f){v=v.slice();let e=0;for(const[t,n]of y){const i=t-e;null===n?(v.splice(i,1),e++):v[i]=n}}else{v=Object.defineProperties({},Object.getOwnPropertyDescriptors(v));for(const[e,t]of y)v[e]=t}m=u.index,h=u.keys,y=u.edits,f=u.inArray,u=u.prev}else if(d){if(p=f?m:h[m],v=d[p],null==v)continue;E.push(p)}let c;if(!Array.isArray(v)){var g,I;(0,o.isNode)(v)||(0,i.devAssert)(!1,`Invalid AST Node: ${(0,r.inspect)(v)}.`);const n=e?null===(g=l.get(v.kind))||void 0===g?void 0:g.leave:null===(I=l.get(v.kind))||void 0===I?void 0:I.enter;if(c=null==n?void 0:n.call(t,v,p,d,E,T),c===a)break;if(!1===c){if(!e){E.pop();continue}}else if(void 0!==c&&(y.push([p,c]),!e)){if(!(0,o.isNode)(c)){E.pop();continue}v=c}}var N;void 0===c&&s&&y.push([p,v]),e?E.pop():(u={inArray:f,index:m,keys:h,edits:y,prev:u},f=Array.isArray(v),h=f?v:null!==(N=n[v.kind])&&void 0!==N?N:[],m=-1,y=[],d&&T.push(d),d=v)}while(void 0!==u);return 0!==y.length?y[y.length-1][1]:e},t.visitInParallel=function(e){const t=new Array(e.length).fill(null),n=Object.create(null);for(const i of Object.values(s.Kind)){let r=!1;const o=new Array(e.length).fill(void 0),s=new Array(e.length).fill(void 0);for(let t=0;t<e.length;++t){const{enter:n,leave:a}=c(e[t],i);r||(r=null!=n||null!=a),o[t]=n,s[t]=a}if(!r)continue;const l={enter(...n){const i=n[0];for(let s=0;s<e.length;s++)if(null===t[s]){var r;const c=null===(r=o[s])||void 0===r?void 0:r.apply(e[s],n);if(!1===c)t[s]=i;else if(c===a)t[s]=a;else if(void 0!==c)return c}},leave(...n){const i=n[0];for(let o=0;o<e.length;o++)if(null===t[o]){var r;const i=null===(r=s[o])||void 0===r?void 0:r.apply(e[o],n);if(i===a)t[o]=a;else if(void 0!==i&&!1!==i)return i}else t[o]===i&&(t[o]=null)}};n[i]=l}return n};var i=n(7242),r=n(8002),o=n(1807),s=n(2828);const a=Object.freeze({});function c(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}t.BREAK=a},3058:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertEnumValueName=function(e){if("true"===e||"false"===e||"null"===e)throw new r.GraphQLError(`Enum values cannot be named: ${e}`);return s(e)},t.assertName=s;var i=n(7242),r=n(5822),o=n(2591);function s(e){if(null!=e||(0,i.devAssert)(!1,"Must provide name."),"string"==typeof e||(0,i.devAssert)(!1,"Expected name to be a string."),0===e.length)throw new r.GraphQLError("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!(0,o.isNameContinue)(e.charCodeAt(t)))throw new r.GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!(0,o.isNameStart)(e.charCodeAt(0)))throw new r.GraphQLError(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}},5003:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLUnionType=t.GraphQLScalarType=t.GraphQLObjectType=t.GraphQLNonNull=t.GraphQLList=t.GraphQLInterfaceType=t.GraphQLInputObjectType=t.GraphQLEnumType=void 0,t.argsToArgsConfig=Y,t.assertAbstractType=function(e){if(!F(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL abstract type.`);return e},t.assertCompositeType=function(e){if(!L(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL composite type.`);return e},t.assertEnumType=function(e){if(!_(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Enum type.`);return e},t.assertInputObjectType=function(e){if(!S(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Input Object type.`);return e},t.assertInputType=function(e){if(!A(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL input type.`);return e},t.assertInterfaceType=function(e){if(!N(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Interface type.`);return e},t.assertLeafType=function(e){if(!w(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL leaf type.`);return e},t.assertListType=function(e){if(!O(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL List type.`);return e},t.assertNamedType=function(e){if(!j(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL named type.`);return e},t.assertNonNullType=function(e){if(!D(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Non-Null type.`);return e},t.assertNullableType=function(e){if(!C(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL nullable type.`);return e},t.assertObjectType=function(e){if(!I(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Object type.`);return e},t.assertOutputType=function(e){if(!R(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL output type.`);return e},t.assertScalarType=function(e){if(!g(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Scalar type.`);return e},t.assertType=function(e){if(!T(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL type.`);return e},t.assertUnionType=function(e){if(!b(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL Union type.`);return e},t.assertWrappingType=function(e){if(!$(e))throw new Error(`Expected ${(0,s.inspect)(e)} to be a GraphQL wrapping type.`);return e},t.defineArguments=Q,t.getNamedType=function(e){if(e){let t=e;for(;$(t);)t=t.ofType;return t}},t.getNullableType=function(e){if(e)return D(e)?e.ofType:e},t.isAbstractType=F,t.isCompositeType=L,t.isEnumType=_,t.isInputObjectType=S,t.isInputType=A,t.isInterfaceType=N,t.isLeafType=w,t.isListType=O,t.isNamedType=j,t.isNonNullType=D,t.isNullableType=C,t.isObjectType=I,t.isOutputType=R,t.isRequiredArgument=function(e){return D(e.type)&&void 0===e.defaultValue},t.isRequiredInputField=function(e){return D(e.type)&&void 0===e.defaultValue},t.isScalarType=g,t.isType=T,t.isUnionType=b,t.isWrappingType=$,t.resolveObjMapThunk=P,t.resolveReadonlyArrayThunk=M;var i=n(7242),r=n(100),o=n(3317),s=n(8002),a=n(5752),c=n(5690),l=n(2863),u=n(7154),p=n(6124),d=n(8070),f=n(7690),h=n(5822),m=n(2828),y=n(3033),v=n(7784),E=n(3058);function T(e){return g(e)||I(e)||N(e)||b(e)||_(e)||S(e)||O(e)||D(e)}function g(e){return(0,a.instanceOf)(e,U)}function I(e){return(0,a.instanceOf)(e,V)}function N(e){return(0,a.instanceOf)(e,H)}function b(e){return(0,a.instanceOf)(e,X)}function _(e){return(0,a.instanceOf)(e,J)}function S(e){return(0,a.instanceOf)(e,Z)}function O(e){return(0,a.instanceOf)(e,x)}function D(e){return(0,a.instanceOf)(e,k)}function A(e){return g(e)||_(e)||S(e)||$(e)&&A(e.ofType)}function R(e){return g(e)||I(e)||N(e)||b(e)||_(e)||$(e)&&R(e.ofType)}function w(e){return g(e)||_(e)}function L(e){return I(e)||N(e)||b(e)}function F(e){return N(e)||b(e)}class x{constructor(e){T(e)||(0,i.devAssert)(!1,`Expected ${(0,s.inspect)(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}t.GraphQLList=x;class k{constructor(e){C(e)||(0,i.devAssert)(!1,`Expected ${(0,s.inspect)(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function $(e){return O(e)||D(e)}function C(e){return T(e)&&!D(e)}function j(e){return g(e)||I(e)||N(e)||b(e)||_(e)||S(e)}function M(e){return"function"==typeof e?e():e}function P(e){return"function"==typeof e?e():e}t.GraphQLNonNull=k;class U{constructor(e){var t,n,r,a;const c=null!==(t=e.parseValue)&&void 0!==t?t:o.identityFunc;this.name=(0,E.assertName)(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:o.identityFunc,this.parseValue=c,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:(e,t)=>c((0,v.valueFromASTUntyped)(e,t)),this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(a=e.extensionASTNodes)&&void 0!==a?a:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||(0,i.devAssert)(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${(0,s.inspect)(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||(0,i.devAssert)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,i.devAssert)(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}t.GraphQLScalarType=U;class V{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>B(e),this._interfaces=()=>G(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,i.devAssert)(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${(0,s.inspect)(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:q(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function G(e){var t;const n=M(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||(0,i.devAssert)(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function B(e){const t=P(e.fields);return K(t)||(0,i.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.mapValue)(t,((t,n)=>{var r;K(t)||(0,i.devAssert)(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||(0,i.devAssert)(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${(0,s.inspect)(t.resolve)}.`);const o=null!==(r=t.args)&&void 0!==r?r:{};return K(o)||(0,i.devAssert)(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:(0,E.assertName)(n),description:t.description,type:t.type,args:Q(o),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode}}))}function Q(e){return Object.entries(e).map((([e,t])=>({name:(0,E.assertName)(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))}function K(e){return(0,c.isObjectLike)(e)&&!Array.isArray(e)}function q(e){return(0,p.mapValue)(e,(e=>({description:e.description,type:e.type,args:Y(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function Y(e){return(0,u.keyValMap)(e,(e=>e.name),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}t.GraphQLObjectType=V;class H{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=B.bind(void 0,e),this._interfaces=G.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.inspect)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:q(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}t.GraphQLInterfaceType=H;class X{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=z.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.inspect)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function z(e){const t=M(e.types);return Array.isArray(t)||(0,i.devAssert)(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}t.GraphQLUnionType=X;class J{constructor(e){var t,n,r;this.name=(0,E.assertName)(e.name),this.description=e.description,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=(n=this.name,K(r=e.values)||(0,i.devAssert)(!1,`${n} values must be an object with value names as keys.`),Object.entries(r).map((([e,t])=>(K(t)||(0,i.devAssert)(!1,`${n}.${e} must refer to an object with a "value" key representing an internal value but got: ${(0,s.inspect)(t)}.`),{name:(0,E.assertEnumValueName)(e),description:t.description,value:void 0!==t.value?t.value:e,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))),this._valueLookup=new Map(this._values.map((e=>[e.value,e]))),this._nameLookup=(0,l.keyMap)(this._values,(e=>e.name))}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){const t=this._valueLookup.get(e);if(void 0===t)throw new h.GraphQLError(`Enum "${this.name}" cannot represent value: ${(0,s.inspect)(e)}`);return t.name}parseValue(e){if("string"!=typeof e){const t=(0,s.inspect)(e);throw new h.GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${t}.`+W(this,t))}const t=this.getValue(e);if(null==t)throw new h.GraphQLError(`Value "${e}" does not exist in "${this.name}" enum.`+W(this,e));return t.value}parseLiteral(e,t){if(e.kind!==m.Kind.ENUM){const t=(0,y.print)(e);throw new h.GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+W(this,t),{nodes:e})}const n=this.getValue(e.value);if(null==n){const t=(0,y.print)(e);throw new h.GraphQLError(`Value "${t}" does not exist in "${this.name}" enum.`+W(this,t),{nodes:e})}return n.value}toConfig(){const e=(0,u.keyValMap)(this.getValues(),(e=>e.name),(e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function W(e,t){const n=e.getValues().map((e=>e.name)),i=(0,d.suggestionList)(t,n);return(0,r.didYouMean)("the enum value",i)}t.GraphQLEnumType=J;class Z{constructor(e){var t;this.name=(0,E.assertName)(e.name),this.description=e.description,this.extensions=(0,f.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ee.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const e=(0,p.mapValue)(this.getFields(),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ee(e){const t=P(e.fields);return K(t)||(0,i.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.mapValue)(t,((t,n)=>(!("resolve"in t)||(0,i.devAssert)(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:(0,E.assertName)(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.toObjMap)(t.extensions),astNode:t.astNode})))}t.GraphQLInputObjectType=Z},7197:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSpecifiedByDirective=t.GraphQLSkipDirective=t.GraphQLIncludeDirective=t.GraphQLDirective=t.GraphQLDeprecatedDirective=t.DEFAULT_DEPRECATION_REASON=void 0,t.assertDirective=function(e){if(!d(e))throw new Error(`Expected ${(0,r.inspect)(e)} to be a GraphQL directive.`);return e},t.isDirective=d,t.isSpecifiedDirective=function(e){return T.some((({name:t})=>t===e.name))},t.specifiedDirectives=void 0;var i=n(7242),r=n(8002),o=n(5752),s=n(5690),a=n(7690),c=n(8333),l=n(3058),u=n(5003),p=n(2229);function d(e){return(0,o.instanceOf)(e,f)}class f{constructor(e){var t,n;this.name=(0,l.assertName)(e.name),this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(t=e.isRepeatable)&&void 0!==t&&t,this.extensions=(0,a.toObjMap)(e.extensions),this.astNode=e.astNode,Array.isArray(e.locations)||(0,i.devAssert)(!1,`@${e.name} locations must be an Array.`);const r=null!==(n=e.args)&&void 0!==n?n:{};(0,s.isObjectLike)(r)&&!Array.isArray(r)||(0,i.devAssert)(!1,`@${e.name} args must be an object with argument names as keys.`),this.args=(0,u.defineArguments)(r)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,u.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}t.GraphQLDirective=f;const h=new f({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[c.DirectiveLocation.FIELD,c.DirectiveLocation.FRAGMENT_SPREAD,c.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new u.GraphQLNonNull(p.GraphQLBoolean),description:"Included when true."}}});t.GraphQLIncludeDirective=h;const m=new f({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[c.DirectiveLocation.FIELD,c.DirectiveLocation.FRAGMENT_SPREAD,c.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new u.GraphQLNonNull(p.GraphQLBoolean),description:"Skipped when true."}}});t.GraphQLSkipDirective=m;const y="No longer supported";t.DEFAULT_DEPRECATION_REASON=y;const v=new f({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[c.DirectiveLocation.FIELD_DEFINITION,c.DirectiveLocation.ARGUMENT_DEFINITION,c.DirectiveLocation.INPUT_FIELD_DEFINITION,c.DirectiveLocation.ENUM_VALUE],args:{reason:{type:p.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:y}}});t.GraphQLDeprecatedDirective=v;const E=new f({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[c.DirectiveLocation.SCALAR],args:{url:{type:new u.GraphQLNonNull(p.GraphQLString),description:"The URL that specifies the behavior of this scalar."}}});t.GraphQLSpecifiedByDirective=E;const T=Object.freeze([h,m,v,E]);t.specifiedDirectives=T},8155:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.introspectionTypes=t.__TypeKind=t.__Type=t.__Schema=t.__InputValue=t.__Field=t.__EnumValue=t.__DirectiveLocation=t.__Directive=t.TypeNameMetaFieldDef=t.TypeMetaFieldDef=t.TypeKind=t.SchemaMetaFieldDef=void 0,t.isIntrospectionType=function(e){return N.some((({name:t})=>e.name===t))};var i=n(8002),r=n(7706),o=n(8333),s=n(3033),a=n(8115),c=n(5003),l=n(2229);const u=new c.GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:l.GraphQLString,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(f))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new c.GraphQLNonNull(f),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:f,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:f,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(p))),resolve:e=>e.getDirectives()}})});t.__Schema=u;const p=new c.GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},isRepeatable:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>e.isRepeatable},locations:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(d))),resolve:e=>e.locations},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))}})});t.__Directive=p;const d=new c.GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:o.DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:o.DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:o.DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:o.DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:o.DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:o.DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:o.DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:o.DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:o.DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:o.DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:o.DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:o.DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:o.DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:o.DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:o.DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:o.DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:o.DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:o.DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:o.DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}});t.__DirectiveLocation=d;const f=new c.GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new c.GraphQLNonNull(E),resolve:e=>(0,c.isScalarType)(e)?v.SCALAR:(0,c.isObjectType)(e)?v.OBJECT:(0,c.isInterfaceType)(e)?v.INTERFACE:(0,c.isUnionType)(e)?v.UNION:(0,c.isEnumType)(e)?v.ENUM:(0,c.isInputObjectType)(e)?v.INPUT_OBJECT:(0,c.isListType)(e)?v.LIST:(0,c.isNonNullType)(e)?v.NON_NULL:void(0,r.invariant)(!1,`Unexpected type: "${(0,i.inspect)(e)}".`)},name:{type:l.GraphQLString,resolve:e=>"name"in e?e.name:void 0},description:{type:l.GraphQLString,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:l.GraphQLString,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new c.GraphQLList(new c.GraphQLNonNull(h)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},interfaces:{type:new c.GraphQLList(new c.GraphQLNonNull(f)),resolve(e){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e))return e.getInterfaces()}},possibleTypes:{type:new c.GraphQLList(new c.GraphQLNonNull(f)),resolve(e,t,n,{schema:i}){if((0,c.isAbstractType)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.GraphQLList(new c.GraphQLNonNull(y)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isEnumType)(e)){const n=e.getValues();return t?n:n.filter((e=>null==e.deprecationReason))}}},inputFields:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.isInputObjectType)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},ofType:{type:f,resolve:e=>"ofType"in e?e.ofType:void 0}})});t.__Type=f;const h=new c.GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))},type:{type:new c.GraphQLNonNull(f),resolve:e=>e.type},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});t.__Field=h;const m=new c.GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},type:{type:new c.GraphQLNonNull(f),resolve:e=>e.type},defaultValue:{type:l.GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=(0,a.astFromValue)(n,t);return i?(0,s.print)(i):null}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});t.__InputValue=m;const y=new c.GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:e=>e.name},description:{type:l.GraphQLString,resolve:e=>e.description},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.GraphQLString,resolve:e=>e.deprecationReason}})});var v;t.__EnumValue=y,t.TypeKind=v,function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(v||(t.TypeKind=v={}));const E=new c.GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:v.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:v.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:v.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:v.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:v.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:v.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:v.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:v.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}});t.__TypeKind=E;const T={name:"__schema",type:new c.GraphQLNonNull(u),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.SchemaMetaFieldDef=T;const g={name:"__type",type:f,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.GraphQLNonNull(l.GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.TypeMetaFieldDef=g;const I={name:"__typename",type:new c.GraphQLNonNull(l.GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};t.TypeNameMetaFieldDef=I;const N=Object.freeze([u,p,d,f,h,m,y,E]);t.introspectionTypes=N},2229:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLString=t.GraphQLInt=t.GraphQLID=t.GraphQLFloat=t.GraphQLBoolean=t.GRAPHQL_MIN_INT=t.GRAPHQL_MAX_INT=void 0,t.isSpecifiedScalarType=function(e){return y.some((({name:t})=>e.name===t))},t.specifiedScalarTypes=void 0;var i=n(8002),r=n(5690),o=n(5822),s=n(2828),a=n(3033),c=n(5003);const l=2147483647;t.GRAPHQL_MAX_INT=l;const u=-2147483648;t.GRAPHQL_MIN_INT=u;const p=new c.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=v(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,i.inspect)(t)}`);if(n>l||n<u)throw new o.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,i.inspect)(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,i.inspect)(e)}`);if(e>l||e<u)throw new o.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==s.Kind.INT)throw new o.GraphQLError(`Int cannot represent non-integer value: ${(0,a.print)(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>l||t<u)throw new o.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}});t.GraphQLInt=p;const d=new c.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=v(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,i.inspect)(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.FLOAT&&e.kind!==s.Kind.INT)throw new o.GraphQLError(`Float cannot represent non numeric value: ${(0,a.print)(e)}`,e);return parseFloat(e.value)}});t.GraphQLFloat=d;const f=new c.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=v(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new o.GraphQLError(`String cannot represent value: ${(0,i.inspect)(e)}`)},parseValue(e){if("string"!=typeof e)throw new o.GraphQLError(`String cannot represent a non string value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.STRING)throw new o.GraphQLError(`String cannot represent a non string value: ${(0,a.print)(e)}`,{nodes:e});return e.value}});t.GraphQLString=f;const h=new c.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=v(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,i.inspect)(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,i.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==s.Kind.BOOLEAN)throw new o.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,a.print)(e)}`,{nodes:e});return e.value}});t.GraphQLBoolean=h;const m=new c.GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=v(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new o.GraphQLError(`ID cannot represent value: ${(0,i.inspect)(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new o.GraphQLError(`ID cannot represent value: ${(0,i.inspect)(e)}`)},parseLiteral(e){if(e.kind!==s.Kind.STRING&&e.kind!==s.Kind.INT)throw new o.GraphQLError("ID cannot represent a non-string and non-integer value: "+(0,a.print)(e),{nodes:e});return e.value}});t.GraphQLID=m;const y=Object.freeze([f,p,d,h,m]);function v(e){if((0,r.isObjectLike)(e)){if("function"==typeof e.valueOf){const t=e.valueOf();if(!(0,r.isObjectLike)(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}t.specifiedScalarTypes=y},6829:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLSchema=void 0,t.assertSchema=function(e){if(!d(e))throw new Error(`Expected ${(0,r.inspect)(e)} to be a GraphQL schema.`);return e},t.isSchema=d;var i=n(7242),r=n(8002),o=n(5752),s=n(5690),a=n(7690),c=n(1807),l=n(5003),u=n(7197),p=n(8155);function d(e){return(0,o.instanceOf)(e,f)}class f{constructor(e){var t,n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,s.isObjectLike)(e)||(0,i.devAssert)(!1,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,i.devAssert)(!1,`"types" must be Array if provided but got: ${(0,r.inspect)(e.types)}.`),!e.directives||Array.isArray(e.directives)||(0,i.devAssert)(!1,`"directives" must be Array if provided but got: ${(0,r.inspect)(e.directives)}.`),this.description=e.description,this.extensions=(0,a.toObjMap)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:u.specifiedDirectives;const o=new Set(e.types);if(null!=e.types)for(const t of e.types)o.delete(t),h(t,o);null!=this._queryType&&h(this._queryType,o),null!=this._mutationType&&h(this._mutationType,o),null!=this._subscriptionType&&h(this._subscriptionType,o);for(const e of this._directives)if((0,u.isDirective)(e))for(const t of e.args)h(t.type,o);h(p.__Schema,o),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const e of o){if(null==e)continue;const t=e.name;if(t||(0,i.devAssert)(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[t])throw new Error(`Schema must contain uniquely named types but contains multiple types named "${t}".`);if(this._typeMap[t]=e,(0,l.isInterfaceType)(e)){for(const t of e.getInterfaces())if((0,l.isInterfaceType)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.interfaces.push(e)}}else if((0,l.isObjectType)(e))for(const t of e.getInterfaces())if((0,l.isInterfaceType)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.objects.push(e)}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(e){switch(e){case c.OperationTypeNode.QUERY:return this.getQueryType();case c.OperationTypeNode.MUTATION:return this.getMutationType();case c.OperationTypeNode.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(e){return this.getTypeMap()[e]}getPossibleTypes(e){return(0,l.isUnionType)(e)?e.getTypes():this.getImplementations(e).objects}getImplementations(e){const t=this._implementationsMap[e.name];return null!=t?t:{objects:[],interfaces:[]}}isSubType(e,t){let n=this._subTypeMap[e.name];if(void 0===n){if(n=Object.create(null),(0,l.isUnionType)(e))for(const t of e.getTypes())n[t.name]=!0;else{const t=this.getImplementations(e);for(const e of t.objects)n[e.name]=!0;for(const e of t.interfaces)n[e.name]=!0}this._subTypeMap[e.name]=n}return void 0!==n[t.name]}getDirectives(){return this._directives}getDirective(e){return this.getDirectives().find((t=>t.name===e))}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}function h(e,t){const n=(0,l.getNamedType)(e);if(!t.has(n))if(t.add(n),(0,l.isUnionType)(n))for(const e of n.getTypes())h(e,t);else if((0,l.isObjectType)(n)||(0,l.isInterfaceType)(n)){for(const e of n.getInterfaces())h(e,t);for(const e of Object.values(n.getFields())){h(e.type,t);for(const n of e.args)h(n.type,t)}}else if((0,l.isInputObjectType)(n))for(const e of Object.values(n.getFields()))h(e.type,t);return t}t.GraphQLSchema=f},1671:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertValidSchema=function(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))},t.validateSchema=p;var i=n(8002),r=n(5822),o=n(1807),s=n(298),a=n(5003),c=n(7197),l=n(8155),u=n(6829);function p(e){if((0,u.assertSchema)(e),e.__validationErrors)return e.__validationErrors;const t=new d(e);!function(e){const t=e.schema,n=t.getQueryType();if(n){if(!(0,a.isObjectType)(n)){var r;e.reportError(`Query root type must be Object type, it cannot be ${(0,i.inspect)(n)}.`,null!==(r=f(t,o.OperationTypeNode.QUERY))&&void 0!==r?r:n.astNode)}}else e.reportError("Query root type must be provided.",t.astNode);const s=t.getMutationType();var c;s&&!(0,a.isObjectType)(s)&&e.reportError(`Mutation root type must be Object type if provided, it cannot be ${(0,i.inspect)(s)}.`,null!==(c=f(t,o.OperationTypeNode.MUTATION))&&void 0!==c?c:s.astNode);const l=t.getSubscriptionType();var u;l&&!(0,a.isObjectType)(l)&&e.reportError(`Subscription root type must be Object type if provided, it cannot be ${(0,i.inspect)(l)}.`,null!==(u=f(t,o.OperationTypeNode.SUBSCRIPTION))&&void 0!==u?u:l.astNode)}(t),function(e){for(const n of e.schema.getDirectives())if((0,c.isDirective)(n)){h(e,n);for(const r of n.args){var t;h(e,r),(0,a.isInputType)(r.type)||e.reportError(`The type of @${n.name}(${r.name}:) must be Input Type but got: ${(0,i.inspect)(r.type)}.`,r.astNode),(0,a.isRequiredArgument)(r)&&null!=r.deprecationReason&&e.reportError(`Required argument @${n.name}(${r.name}:) cannot be deprecated.`,[_(r.astNode),null===(t=r.astNode)||void 0===t?void 0:t.type])}}else e.reportError(`Expected directive but got: ${(0,i.inspect)(n)}.`,null==n?void 0:n.astNode)}(t),function(e){const t=function(e){const t=Object.create(null),n=[],i=Object.create(null);return function r(o){if(t[o.name])return;t[o.name]=!0,i[o.name]=n.length;const s=Object.values(o.getFields());for(const t of s)if((0,a.isNonNullType)(t.type)&&(0,a.isInputObjectType)(t.type.ofType)){const o=t.type.ofType,s=i[o.name];if(n.push(t),void 0===s)r(o);else{const t=n.slice(s),i=t.map((e=>e.name)).join(".");e.reportError(`Cannot reference Input Object "${o.name}" within itself through a series of non-null fields: "${i}".`,t.map((e=>e.astNode)))}n.pop()}i[o.name]=void 0}}(e),n=e.schema.getTypeMap();for(const r of Object.values(n))(0,a.isNamedType)(r)?((0,l.isIntrospectionType)(r)||h(e,r),(0,a.isObjectType)(r)||(0,a.isInterfaceType)(r)?(m(e,r),y(e,r)):(0,a.isUnionType)(r)?T(e,r):(0,a.isEnumType)(r)?g(e,r):(0,a.isInputObjectType)(r)&&(I(e,r),t(r))):e.reportError(`Expected GraphQL named type but got: ${(0,i.inspect)(r)}.`,r.astNode)}(t);const n=t.getErrors();return e.__validationErrors=n,n}class d{constructor(e){this._errors=[],this.schema=e}reportError(e,t){const n=Array.isArray(t)?t.filter(Boolean):t;this._errors.push(new r.GraphQLError(e,{nodes:n}))}getErrors(){return this._errors}}function f(e,t){var n;return null===(n=[e.astNode,...e.extensionASTNodes].flatMap((e=>{var t;return null!==(t=null==e?void 0:e.operationTypes)&&void 0!==t?t:[]})).find((e=>e.operation===t)))||void 0===n?void 0:n.type}function h(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function m(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const c of n){var r;h(e,c),(0,a.isOutputType)(c.type)||e.reportError(`The type of ${t.name}.${c.name} must be Output Type but got: ${(0,i.inspect)(c.type)}.`,null===(r=c.astNode)||void 0===r?void 0:r.type);for(const n of c.args){const r=n.name;var o,s;h(e,n),(0,a.isInputType)(n.type)||e.reportError(`The type of ${t.name}.${c.name}(${r}:) must be Input Type but got: ${(0,i.inspect)(n.type)}.`,null===(o=n.astNode)||void 0===o?void 0:o.type),(0,a.isRequiredArgument)(n)&&null!=n.deprecationReason&&e.reportError(`Required argument ${t.name}.${c.name}(${r}:) cannot be deprecated.`,[_(n.astNode),null===(s=n.astNode)||void 0===s?void 0:s.type])}}}function y(e,t){const n=Object.create(null);for(const r of t.getInterfaces())(0,a.isInterfaceType)(r)?t!==r?n[r.name]?e.reportError(`Type ${t.name} can only implement ${r.name} once.`,N(t,r)):(n[r.name]=!0,E(e,t,r),v(e,t,r)):e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,N(t,r)):e.reportError(`Type ${(0,i.inspect)(t)} must only implement Interface types, it cannot implement ${(0,i.inspect)(r)}.`,N(t,r))}function v(e,t,n){const r=t.getFields();for(const p of Object.values(n.getFields())){const d=p.name,f=r[d];if(f){var o,c;(0,s.isTypeSubTypeOf)(e.schema,f.type,p.type)||e.reportError(`Interface field ${n.name}.${d} expects type ${(0,i.inspect)(p.type)} but ${t.name}.${d} is type ${(0,i.inspect)(f.type)}.`,[null===(o=p.astNode)||void 0===o?void 0:o.type,null===(c=f.astNode)||void 0===c?void 0:c.type]);for(const r of p.args){const o=r.name,a=f.args.find((e=>e.name===o));var l,u;a?(0,s.isEqualType)(r.type,a.type)||e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expects type ${(0,i.inspect)(r.type)} but ${t.name}.${d}(${o}:) is type ${(0,i.inspect)(a.type)}.`,[null===(l=r.astNode)||void 0===l?void 0:l.type,null===(u=a.astNode)||void 0===u?void 0:u.type]):e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expected but ${t.name}.${d} does not provide it.`,[r.astNode,f.astNode])}for(const i of f.args){const r=i.name;!p.args.find((e=>e.name===r))&&(0,a.isRequiredArgument)(i)&&e.reportError(`Object field ${t.name}.${d} includes required argument ${r} that is missing from the Interface field ${n.name}.${d}.`,[i.astNode,p.astNode])}}else e.reportError(`Interface field ${n.name}.${d} expected but ${t.name} does not provide it.`,[p.astNode,t.astNode,...t.extensionASTNodes])}}function E(e,t,n){const i=t.getInterfaces();for(const r of n.getInterfaces())i.includes(r)||e.reportError(r===t?`Type ${t.name} cannot implement ${n.name} because it would create a circular reference.`:`Type ${t.name} must implement ${r.name} because it is implemented by ${n.name}.`,[...N(n,r),...N(t,n)])}function T(e,t){const n=t.getTypes();0===n.length&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);const r=Object.create(null);for(const o of n)r[o.name]?e.reportError(`Union type ${t.name} can only include type ${o.name} once.`,b(t,o.name)):(r[o.name]=!0,(0,a.isObjectType)(o)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${(0,i.inspect)(o)}.`,b(t,String(o))))}function g(e,t){const n=t.getValues();0===n.length&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(const t of n)h(e,t)}function I(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const s of n){var r,o;h(e,s),(0,a.isInputType)(s.type)||e.reportError(`The type of ${t.name}.${s.name} must be Input Type but got: ${(0,i.inspect)(s.type)}.`,null===(r=s.astNode)||void 0===r?void 0:r.type),(0,a.isRequiredInputField)(s)&&null!=s.deprecationReason&&e.reportError(`Required input field ${t.name}.${s.name} cannot be deprecated.`,[_(s.astNode),null===(o=s.astNode)||void 0===o?void 0:o.type])}}function N(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.interfaces)&&void 0!==t?t:[]})).filter((e=>e.name.value===t.name))}function b(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.types)&&void 0!==t?t:[]})).filter((e=>e.name.value===t))}function _(e){var t;return null==e||null===(t=e.directives)||void 0===t?void 0:t.find((e=>e.name.value===c.GraphQLDeprecatedDirective.name))}},6226:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypeInfo=void 0,t.visitWithTypeInfo=function(e,t){return{enter(...n){const r=n[0];e.enter(r);const s=(0,o.getEnterLeaveForKind)(t,r.kind).enter;if(s){const o=s.apply(t,n);return void 0!==o&&(e.leave(r),(0,i.isNode)(o)&&e.enter(o)),o}},leave(...n){const i=n[0],r=(0,o.getEnterLeaveForKind)(t,i.kind).leave;let s;return r&&(s=r.apply(t,n)),e.leave(i),s}}};var i=n(1807),r=n(2828),o=n(285),s=n(5003),a=n(8155),c=n(5115);class l{constructor(e,t,n){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:u,t&&((0,s.isInputType)(t)&&this._inputTypeStack.push(t),(0,s.isCompositeType)(t)&&this._parentTypeStack.push(t),(0,s.isOutputType)(t)&&this._typeStack.push(t))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(e){const t=this._schema;switch(e.kind){case r.Kind.SELECTION_SET:{const e=(0,s.getNamedType)(this.getType());this._parentTypeStack.push((0,s.isCompositeType)(e)?e:void 0);break}case r.Kind.FIELD:{const n=this.getParentType();let i,r;n&&(i=this._getFieldDef(t,n,e),i&&(r=i.type)),this._fieldDefStack.push(i),this._typeStack.push((0,s.isOutputType)(r)?r:void 0);break}case r.Kind.DIRECTIVE:this._directive=t.getDirective(e.name.value);break;case r.Kind.OPERATION_DEFINITION:{const n=t.getRootType(e.operation);this._typeStack.push((0,s.isObjectType)(n)?n:void 0);break}case r.Kind.INLINE_FRAGMENT:case r.Kind.FRAGMENT_DEFINITION:{const n=e.typeCondition,i=n?(0,c.typeFromAST)(t,n):(0,s.getNamedType)(this.getType());this._typeStack.push((0,s.isOutputType)(i)?i:void 0);break}case r.Kind.VARIABLE_DEFINITION:{const n=(0,c.typeFromAST)(t,e.type);this._inputTypeStack.push((0,s.isInputType)(n)?n:void 0);break}case r.Kind.ARGUMENT:{var n;let t,i;const r=null!==(n=this.getDirective())&&void 0!==n?n:this.getFieldDef();r&&(t=r.args.find((t=>t.name===e.name.value)),t&&(i=t.type)),this._argument=t,this._defaultValueStack.push(t?t.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(i)?i:void 0);break}case r.Kind.LIST:{const e=(0,s.getNullableType)(this.getInputType()),t=(0,s.isListType)(e)?e.ofType:e;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.isInputType)(t)?t:void 0);break}case r.Kind.OBJECT_FIELD:{const t=(0,s.getNamedType)(this.getInputType());let n,i;(0,s.isInputObjectType)(t)&&(i=t.getFields()[e.name.value],i&&(n=i.type)),this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(n)?n:void 0);break}case r.Kind.ENUM:{const t=(0,s.getNamedType)(this.getInputType());let n;(0,s.isEnumType)(t)&&(n=t.getValue(e.value)),this._enumValue=n;break}}}leave(e){switch(e.kind){case r.Kind.SELECTION_SET:this._parentTypeStack.pop();break;case r.Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case r.Kind.DIRECTIVE:this._directive=null;break;case r.Kind.OPERATION_DEFINITION:case r.Kind.INLINE_FRAGMENT:case r.Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case r.Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case r.Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.Kind.LIST:case r.Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.Kind.ENUM:this._enumValue=null}}}function u(e,t,n){const i=n.name.value;return i===a.SchemaMetaFieldDef.name&&e.getQueryType()===t?a.SchemaMetaFieldDef:i===a.TypeMetaFieldDef.name&&e.getQueryType()===t?a.TypeMetaFieldDef:i===a.TypeNameMetaFieldDef.name&&(0,s.isCompositeType)(t)?a.TypeNameMetaFieldDef:(0,s.isObjectType)(t)||(0,s.isInterfaceType)(t)?t.getFields()[i]:void 0}t.TypeInfo=l},8115:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.astFromValue=function e(t,n){if((0,c.isNonNullType)(n)){const i=e(t,n.ofType);return(null==i?void 0:i.kind)===a.Kind.NULL?null:i}if(null===t)return{kind:a.Kind.NULL};if(void 0===t)return null;if((0,c.isListType)(n)){const i=n.ofType;if((0,o.isIterableObject)(t)){const n=[];for(const r of t){const t=e(r,i);null!=t&&n.push(t)}return{kind:a.Kind.LIST,values:n}}return e(t,i)}if((0,c.isInputObjectType)(n)){if(!(0,s.isObjectLike)(t))return null;const i=[];for(const r of Object.values(n.getFields())){const n=e(t[r.name],r.type);n&&i.push({kind:a.Kind.OBJECT_FIELD,name:{kind:a.Kind.NAME,value:r.name},value:n})}return{kind:a.Kind.OBJECT,fields:i}}if((0,c.isLeafType)(n)){const e=n.serialize(t);if(null==e)return null;if("boolean"==typeof e)return{kind:a.Kind.BOOLEAN,value:e};if("number"==typeof e&&Number.isFinite(e)){const t=String(e);return u.test(t)?{kind:a.Kind.INT,value:t}:{kind:a.Kind.FLOAT,value:t}}if("string"==typeof e)return(0,c.isEnumType)(n)?{kind:a.Kind.ENUM,value:e}:n===l.GraphQLID&&u.test(e)?{kind:a.Kind.INT,value:e}:{kind:a.Kind.STRING,value:e};throw new TypeError(`Cannot convert value to AST: ${(0,i.inspect)(e)}.`)}(0,r.invariant)(!1,"Unexpected input type: "+(0,i.inspect)(n))};var i=n(8002),r=n(7706),o=n(6609),s=n(5690),a=n(2828),c=n(5003),l=n(2229);const u=/^-?(?:0|[1-9][0-9]*)$/},3679:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.coerceInputValue=function(e,t,n=f){return h(e,t,n,void 0)};var i=n(100),r=n(8002),o=n(7706),s=n(6609),a=n(5690),c=n(7059),l=n(737),u=n(8070),p=n(5822),d=n(5003);function f(e,t,n){let i="Invalid value "+(0,r.inspect)(t);throw e.length>0&&(i+=` at "value${(0,l.printPathArray)(e)}"`),n.message=i+": "+n.message,n}function h(e,t,n,l){if((0,d.isNonNullType)(t))return null!=e?h(e,t.ofType,n,l):void n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected non-nullable type "${(0,r.inspect)(t)}" not to be null.`));if(null==e)return null;if((0,d.isListType)(t)){const i=t.ofType;return(0,s.isIterableObject)(e)?Array.from(e,((e,t)=>{const r=(0,c.addPath)(l,t,void 0);return h(e,i,n,r)})):[h(e,i,n,l)]}if((0,d.isInputObjectType)(t)){if(!(0,a.isObjectLike)(e))return void n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}" to be an object.`));const o={},s=t.getFields();for(const i of Object.values(s)){const s=e[i.name];if(void 0!==s)o[i.name]=h(s,i.type,n,(0,c.addPath)(l,i.name,t.name));else if(void 0!==i.defaultValue)o[i.name]=i.defaultValue;else if((0,d.isNonNullType)(i.type)){const t=(0,r.inspect)(i.type);n((0,c.pathToArray)(l),e,new p.GraphQLError(`Field "${i.name}" of required type "${t}" was not provided.`))}}for(const r of Object.keys(e))if(!s[r]){const o=(0,u.suggestionList)(r,Object.keys(t.getFields()));n((0,c.pathToArray)(l),e,new p.GraphQLError(`Field "${r}" is not defined by type "${t.name}".`+(0,i.didYouMean)(o)))}return o}if((0,d.isLeafType)(t)){let i;try{i=t.parseValue(e)}catch(i){return void(i instanceof p.GraphQLError?n((0,c.pathToArray)(l),e,i):n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}". `+i.message,{originalError:i})))}return void 0===i&&n((0,c.pathToArray)(l),e,new p.GraphQLError(`Expected type "${t.name}".`)),i}(0,o.invariant)(!1,"Unexpected input type: "+(0,r.inspect)(t))}},6830:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sortValueNode=function e(t){switch(t.kind){case r.Kind.OBJECT:return{...t,fields:(n=t.fields,n.map((t=>({...t,value:e(t.value)}))).sort(((e,t)=>(0,i.naturalCompare)(e.name.value,t.name.value))))};case r.Kind.LIST:return{...t,values:t.values.map(e)};case r.Kind.INT:case r.Kind.FLOAT:case r.Kind.STRING:case r.Kind.BOOLEAN:case r.Kind.NULL:case r.Kind.ENUM:case r.Kind.VARIABLE:return t}var n};var i=n(5250),r=n(2828)},298:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doTypesOverlap=function(e,t,n){return t===n||((0,i.isAbstractType)(t)?(0,i.isAbstractType)(n)?e.getPossibleTypes(t).some((t=>e.isSubType(n,t))):e.isSubType(t,n):!!(0,i.isAbstractType)(n)&&e.isSubType(n,t))},t.isEqualType=function e(t,n){return t===n||((0,i.isNonNullType)(t)&&(0,i.isNonNullType)(n)||!(!(0,i.isListType)(t)||!(0,i.isListType)(n)))&&e(t.ofType,n.ofType)},t.isTypeSubTypeOf=function e(t,n,r){return n===r||((0,i.isNonNullType)(r)?!!(0,i.isNonNullType)(n)&&e(t,n.ofType,r.ofType):(0,i.isNonNullType)(n)?e(t,n.ofType,r):(0,i.isListType)(r)?!!(0,i.isListType)(n)&&e(t,n.ofType,r.ofType):!(0,i.isListType)(n)&&((0,i.isAbstractType)(r)&&((0,i.isInterfaceType)(n)||(0,i.isObjectType)(n))&&t.isSubType(r,n)))};var i=n(5003)},5115:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.typeFromAST=function e(t,n){switch(n.kind){case i.Kind.LIST_TYPE:{const i=e(t,n.type);return i&&new r.GraphQLList(i)}case i.Kind.NON_NULL_TYPE:{const i=e(t,n.type);return i&&new r.GraphQLNonNull(i)}case i.Kind.NAMED_TYPE:return t.getType(n.name.value)}};var i=n(2828),r=n(5003)},3770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueFromAST=function e(t,n,l){if(t){if(t.kind===s.Kind.VARIABLE){const e=t.name.value;if(null==l||void 0===l[e])return;const i=l[e];if(null===i&&(0,a.isNonNullType)(n))return;return i}if((0,a.isNonNullType)(n)){if(t.kind===s.Kind.NULL)return;return e(t,n.ofType,l)}if(t.kind===s.Kind.NULL)return null;if((0,a.isListType)(n)){const i=n.ofType;if(t.kind===s.Kind.LIST){const n=[];for(const r of t.values)if(c(r,l)){if((0,a.isNonNullType)(i))return;n.push(null)}else{const t=e(r,i,l);if(void 0===t)return;n.push(t)}return n}const r=e(t,i,l);if(void 0===r)return;return[r]}if((0,a.isInputObjectType)(n)){if(t.kind!==s.Kind.OBJECT)return;const i=Object.create(null),r=(0,o.keyMap)(t.fields,(e=>e.name.value));for(const t of Object.values(n.getFields())){const n=r[t.name];if(!n||c(n.value,l)){if(void 0!==t.defaultValue)i[t.name]=t.defaultValue;else if((0,a.isNonNullType)(t.type))return;continue}const o=e(n.value,t.type,l);if(void 0===o)return;i[t.name]=o}return i}if((0,a.isLeafType)(n)){let e;try{e=n.parseLiteral(t,l)}catch(e){return}if(void 0===e)return;return e}(0,r.invariant)(!1,"Unexpected input type: "+(0,i.inspect)(n))}};var i=n(8002),r=n(7706),o=n(2863),s=n(2828),a=n(5003);function c(e,t){return e.kind===s.Kind.VARIABLE&&(null==t||void 0===t[e.name.value])}},7784:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueFromASTUntyped=function e(t,n){switch(t.kind){case r.Kind.NULL:return null;case r.Kind.INT:return parseInt(t.value,10);case r.Kind.FLOAT:return parseFloat(t.value);case r.Kind.STRING:case r.Kind.ENUM:case r.Kind.BOOLEAN:return t.value;case r.Kind.LIST:return t.values.map((t=>e(t,n)));case r.Kind.OBJECT:return(0,i.keyValMap)(t.fields,(e=>e.name.value),(t=>e(t.value,n)));case r.Kind.VARIABLE:return null==n?void 0:n[t.name.value]}};var i=n(7154),r=n(2828)},3955:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationContext=t.SDLValidationContext=t.ASTValidationContext=void 0;var i=n(2828),r=n(285),o=n(6226);class s{constructor(e,t){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=t}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(e){this._onError(e)}getDocument(){return this._ast}getFragment(e){let t;if(this._fragments)t=this._fragments;else{t=Object.create(null);for(const e of this.getDocument().definitions)e.kind===i.Kind.FRAGMENT_DEFINITION&&(t[e.name.value]=e);this._fragments=t}return t[e]}getFragmentSpreads(e){let t=this._fragmentSpreads.get(e);if(!t){t=[];const n=[e];let r;for(;r=n.pop();)for(const e of r.selections)e.kind===i.Kind.FRAGMENT_SPREAD?t.push(e):e.selectionSet&&n.push(e.selectionSet);this._fragmentSpreads.set(e,t)}return t}getRecursivelyReferencedFragments(e){let t=this._recursivelyReferencedFragments.get(e);if(!t){t=[];const n=Object.create(null),i=[e.selectionSet];let r;for(;r=i.pop();)for(const e of this.getFragmentSpreads(r)){const r=e.name.value;if(!0!==n[r]){n[r]=!0;const e=this.getFragment(r);e&&(t.push(e),i.push(e.selectionSet))}}this._recursivelyReferencedFragments.set(e,t)}return t}}t.ASTValidationContext=s;class a extends s{constructor(e,t,n){super(e,n),this._schema=t}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}t.SDLValidationContext=a;class c extends s{constructor(e,t,n,i){super(t,i),this._schema=e,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(e){let t=this._variableUsages.get(e);if(!t){const n=[],i=new o.TypeInfo(this._schema);(0,r.visit)(e,(0,o.visitWithTypeInfo)(i,{VariableDefinition:()=>!1,Variable(e){n.push({node:e,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),t=n,this._variableUsages.set(e,t)}return t}getRecursiveVariableUsages(e){let t=this._recursiveVariableUsages.get(e);if(!t){t=this.getVariableUsages(e);for(const n of this.getRecursivelyReferencedFragments(e))t=t.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(e,t)}return t}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}t.ValidationContext=c},1122:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ExecutableDefinitionsRule",{enumerable:!0,get:function(){return s.ExecutableDefinitionsRule}}),Object.defineProperty(t,"FieldsOnCorrectTypeRule",{enumerable:!0,get:function(){return a.FieldsOnCorrectTypeRule}}),Object.defineProperty(t,"FragmentsOnCompositeTypesRule",{enumerable:!0,get:function(){return c.FragmentsOnCompositeTypesRule}}),Object.defineProperty(t,"KnownArgumentNamesRule",{enumerable:!0,get:function(){return l.KnownArgumentNamesRule}}),Object.defineProperty(t,"KnownDirectivesRule",{enumerable:!0,get:function(){return u.KnownDirectivesRule}}),Object.defineProperty(t,"KnownFragmentNamesRule",{enumerable:!0,get:function(){return p.KnownFragmentNamesRule}}),Object.defineProperty(t,"KnownTypeNamesRule",{enumerable:!0,get:function(){return d.KnownTypeNamesRule}}),Object.defineProperty(t,"LoneAnonymousOperationRule",{enumerable:!0,get:function(){return f.LoneAnonymousOperationRule}}),Object.defineProperty(t,"LoneSchemaDefinitionRule",{enumerable:!0,get:function(){return F.LoneSchemaDefinitionRule}}),Object.defineProperty(t,"NoDeprecatedCustomRule",{enumerable:!0,get:function(){return U.NoDeprecatedCustomRule}}),Object.defineProperty(t,"NoFragmentCyclesRule",{enumerable:!0,get:function(){return h.NoFragmentCyclesRule}}),Object.defineProperty(t,"NoSchemaIntrospectionCustomRule",{enumerable:!0,get:function(){return V.NoSchemaIntrospectionCustomRule}}),Object.defineProperty(t,"NoUndefinedVariablesRule",{enumerable:!0,get:function(){return m.NoUndefinedVariablesRule}}),Object.defineProperty(t,"NoUnusedFragmentsRule",{enumerable:!0,get:function(){return y.NoUnusedFragmentsRule}}),Object.defineProperty(t,"NoUnusedVariablesRule",{enumerable:!0,get:function(){return v.NoUnusedVariablesRule}}),Object.defineProperty(t,"OverlappingFieldsCanBeMergedRule",{enumerable:!0,get:function(){return E.OverlappingFieldsCanBeMergedRule}}),Object.defineProperty(t,"PossibleFragmentSpreadsRule",{enumerable:!0,get:function(){return T.PossibleFragmentSpreadsRule}}),Object.defineProperty(t,"PossibleTypeExtensionsRule",{enumerable:!0,get:function(){return P.PossibleTypeExtensionsRule}}),Object.defineProperty(t,"ProvidedRequiredArgumentsRule",{enumerable:!0,get:function(){return g.ProvidedRequiredArgumentsRule}}),Object.defineProperty(t,"ScalarLeafsRule",{enumerable:!0,get:function(){return I.ScalarLeafsRule}}),Object.defineProperty(t,"SingleFieldSubscriptionsRule",{enumerable:!0,get:function(){return N.SingleFieldSubscriptionsRule}}),Object.defineProperty(t,"UniqueArgumentDefinitionNamesRule",{enumerable:!0,get:function(){return j.UniqueArgumentDefinitionNamesRule}}),Object.defineProperty(t,"UniqueArgumentNamesRule",{enumerable:!0,get:function(){return b.UniqueArgumentNamesRule}}),Object.defineProperty(t,"UniqueDirectiveNamesRule",{enumerable:!0,get:function(){return M.UniqueDirectiveNamesRule}}),Object.defineProperty(t,"UniqueDirectivesPerLocationRule",{enumerable:!0,get:function(){return _.UniqueDirectivesPerLocationRule}}),Object.defineProperty(t,"UniqueEnumValueNamesRule",{enumerable:!0,get:function(){return $.UniqueEnumValueNamesRule}}),Object.defineProperty(t,"UniqueFieldDefinitionNamesRule",{enumerable:!0,get:function(){return C.UniqueFieldDefinitionNamesRule}}),Object.defineProperty(t,"UniqueFragmentNamesRule",{enumerable:!0,get:function(){return S.UniqueFragmentNamesRule}}),Object.defineProperty(t,"UniqueInputFieldNamesRule",{enumerable:!0,get:function(){return O.UniqueInputFieldNamesRule}}),Object.defineProperty(t,"UniqueOperationNamesRule",{enumerable:!0,get:function(){return D.UniqueOperationNamesRule}}),Object.defineProperty(t,"UniqueOperationTypesRule",{enumerable:!0,get:function(){return x.UniqueOperationTypesRule}}),Object.defineProperty(t,"UniqueTypeNamesRule",{enumerable:!0,get:function(){return k.UniqueTypeNamesRule}}),Object.defineProperty(t,"UniqueVariableNamesRule",{enumerable:!0,get:function(){return A.UniqueVariableNamesRule}}),Object.defineProperty(t,"ValidationContext",{enumerable:!0,get:function(){return r.ValidationContext}}),Object.defineProperty(t,"ValuesOfCorrectTypeRule",{enumerable:!0,get:function(){return R.ValuesOfCorrectTypeRule}}),Object.defineProperty(t,"VariablesAreInputTypesRule",{enumerable:!0,get:function(){return w.VariablesAreInputTypesRule}}),Object.defineProperty(t,"VariablesInAllowedPositionRule",{enumerable:!0,get:function(){return L.VariablesInAllowedPositionRule}}),Object.defineProperty(t,"specifiedRules",{enumerable:!0,get:function(){return o.specifiedRules}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return i.validate}});var i=n(9504),r=n(3955),o=n(4710),s=n(5285),a=n(9426),c=n(3558),l=n(9989),u=n(2826),p=n(1843),d=n(5961),f=n(870),h=n(658),m=n(7459),y=n(7317),v=n(8769),E=n(4331),T=n(5904),g=n(4312),I=n(7168),N=n(4666),b=n(4986),_=n(3576),S=n(5883),O=n(4313),D=n(2139),A=n(4243),R=n(6869),w=n(4942),L=n(8034),F=n(3411),x=n(856),k=n(1686),$=n(6400),C=n(4046),j=n(3878),M=n(6753),P=n(5715),U=n(2860),V=n(2276)},5285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExecutableDefinitionsRule=function(e){return{Document(t){for(const n of t.definitions)if(!(0,o.isExecutableDefinitionNode)(n)){const t=n.kind===r.Kind.SCHEMA_DEFINITION||n.kind===r.Kind.SCHEMA_EXTENSION?"schema":'"'+n.name.value+'"';e.reportError(new i.GraphQLError(`The ${t} definition is not executable.`,{nodes:n}))}return!1}}};var i=n(5822),r=n(2828),o=n(1352)},9426:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FieldsOnCorrectTypeRule=function(e){return{Field(t){const n=e.getParentType();if(n&&!e.getFieldDef()){const c=e.getSchema(),l=t.name.value;let u=(0,i.didYouMean)("to use an inline fragment on",function(e,t,n){if(!(0,a.isAbstractType)(t))return[];const i=new Set,o=Object.create(null);for(const r of e.getPossibleTypes(t))if(r.getFields()[n]){i.add(r),o[r.name]=1;for(const e of r.getInterfaces()){var s;e.getFields()[n]&&(i.add(e),o[e.name]=(null!==(s=o[e.name])&&void 0!==s?s:0)+1)}}return[...i].sort(((t,n)=>{const i=o[n.name]-o[t.name];return 0!==i?i:(0,a.isInterfaceType)(t)&&e.isSubType(t,n)?-1:(0,a.isInterfaceType)(n)&&e.isSubType(n,t)?1:(0,r.naturalCompare)(t.name,n.name)})).map((e=>e.name))}(c,n,l));""===u&&(u=(0,i.didYouMean)(function(e,t){if((0,a.isObjectType)(e)||(0,a.isInterfaceType)(e)){const n=Object.keys(e.getFields());return(0,o.suggestionList)(t,n)}return[]}(n,l))),e.reportError(new s.GraphQLError(`Cannot query field "${l}" on type "${n.name}".`+u,{nodes:t}))}}}};var i=n(100),r=n(5250),o=n(8070),s=n(5822),a=n(5003)},3558:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FragmentsOnCompositeTypesRule=function(e){return{InlineFragment(t){const n=t.typeCondition;if(n){const t=(0,s.typeFromAST)(e.getSchema(),n);if(t&&!(0,o.isCompositeType)(t)){const t=(0,r.print)(n);e.reportError(new i.GraphQLError(`Fragment cannot condition on non composite type "${t}".`,{nodes:n}))}}},FragmentDefinition(t){const n=(0,s.typeFromAST)(e.getSchema(),t.typeCondition);if(n&&!(0,o.isCompositeType)(n)){const n=(0,r.print)(t.typeCondition);e.reportError(new i.GraphQLError(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}};var i=n(5822),r=n(3033),o=n(5003),s=n(5115)},9989:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownArgumentNamesOnDirectivesRule=c,t.KnownArgumentNamesRule=function(e){return{...c(e),Argument(t){const n=e.getArgument(),s=e.getFieldDef(),a=e.getParentType();if(!n&&s&&a){const n=t.name.value,c=s.args.map((e=>e.name)),l=(0,r.suggestionList)(n,c);e.reportError(new o.GraphQLError(`Unknown argument "${n}" on field "${a.name}.${s.name}".`+(0,i.didYouMean)(l),{nodes:t}))}}}};var i=n(100),r=n(8070),o=n(5822),s=n(2828),a=n(7197);function c(e){const t=Object.create(null),n=e.getSchema(),c=n?n.getDirectives():a.specifiedDirectives;for(const e of c)t[e.name]=e.args.map((e=>e.name));const l=e.getDocument().definitions;for(const e of l)if(e.kind===s.Kind.DIRECTIVE_DEFINITION){var u;const n=null!==(u=e.arguments)&&void 0!==u?u:[];t[e.name.value]=n.map((e=>e.name.value))}return{Directive(n){const s=n.name.value,a=t[s];if(n.arguments&&a)for(const t of n.arguments){const n=t.name.value;if(!a.includes(n)){const c=(0,r.suggestionList)(n,a);e.reportError(new o.GraphQLError(`Unknown argument "${n}" on directive "@${s}".`+(0,i.didYouMean)(c),{nodes:t}))}}return!1}}}},2826:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownDirectivesRule=function(e){const t=Object.create(null),n=e.getSchema(),u=n?n.getDirectives():l.specifiedDirectives;for(const e of u)t[e.name]=e.locations;const p=e.getDocument().definitions;for(const e of p)e.kind===c.Kind.DIRECTIVE_DEFINITION&&(t[e.name.value]=e.locations.map((e=>e.value)));return{Directive(n,l,u,p,d){const f=n.name.value,h=t[f];if(!h)return void e.reportError(new o.GraphQLError(`Unknown directive "@${f}".`,{nodes:n}));const m=function(e){const t=e[e.length-1];switch("kind"in t||(0,r.invariant)(!1),t.kind){case c.Kind.OPERATION_DEFINITION:return function(e){switch(e){case s.OperationTypeNode.QUERY:return a.DirectiveLocation.QUERY;case s.OperationTypeNode.MUTATION:return a.DirectiveLocation.MUTATION;case s.OperationTypeNode.SUBSCRIPTION:return a.DirectiveLocation.SUBSCRIPTION}}(t.operation);case c.Kind.FIELD:return a.DirectiveLocation.FIELD;case c.Kind.FRAGMENT_SPREAD:return a.DirectiveLocation.FRAGMENT_SPREAD;case c.Kind.INLINE_FRAGMENT:return a.DirectiveLocation.INLINE_FRAGMENT;case c.Kind.FRAGMENT_DEFINITION:return a.DirectiveLocation.FRAGMENT_DEFINITION;case c.Kind.VARIABLE_DEFINITION:return a.DirectiveLocation.VARIABLE_DEFINITION;case c.Kind.SCHEMA_DEFINITION:case c.Kind.SCHEMA_EXTENSION:return a.DirectiveLocation.SCHEMA;case c.Kind.SCALAR_TYPE_DEFINITION:case c.Kind.SCALAR_TYPE_EXTENSION:return a.DirectiveLocation.SCALAR;case c.Kind.OBJECT_TYPE_DEFINITION:case c.Kind.OBJECT_TYPE_EXTENSION:return a.DirectiveLocation.OBJECT;case c.Kind.FIELD_DEFINITION:return a.DirectiveLocation.FIELD_DEFINITION;case c.Kind.INTERFACE_TYPE_DEFINITION:case c.Kind.INTERFACE_TYPE_EXTENSION:return a.DirectiveLocation.INTERFACE;case c.Kind.UNION_TYPE_DEFINITION:case c.Kind.UNION_TYPE_EXTENSION:return a.DirectiveLocation.UNION;case c.Kind.ENUM_TYPE_DEFINITION:case c.Kind.ENUM_TYPE_EXTENSION:return a.DirectiveLocation.ENUM;case c.Kind.ENUM_VALUE_DEFINITION:return a.DirectiveLocation.ENUM_VALUE;case c.Kind.INPUT_OBJECT_TYPE_DEFINITION:case c.Kind.INPUT_OBJECT_TYPE_EXTENSION:return a.DirectiveLocation.INPUT_OBJECT;case c.Kind.INPUT_VALUE_DEFINITION:{const t=e[e.length-3];return"kind"in t||(0,r.invariant)(!1),t.kind===c.Kind.INPUT_OBJECT_TYPE_DEFINITION?a.DirectiveLocation.INPUT_FIELD_DEFINITION:a.DirectiveLocation.ARGUMENT_DEFINITION}default:(0,r.invariant)(!1,"Unexpected kind: "+(0,i.inspect)(t.kind))}}(d);m&&!h.includes(m)&&e.reportError(new o.GraphQLError(`Directive "@${f}" may not be used on ${m}.`,{nodes:n}))}}};var i=n(8002),r=n(7706),o=n(5822),s=n(1807),a=n(8333),c=n(2828),l=n(7197)},1843:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownFragmentNamesRule=function(e){return{FragmentSpread(t){const n=t.name.value;e.getFragment(n)||e.reportError(new i.GraphQLError(`Unknown fragment "${n}".`,{nodes:t.name}))}}};var i=n(5822)},5961:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KnownTypeNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),a=Object.create(null);for(const t of e.getDocument().definitions)(0,s.isTypeDefinitionNode)(t)&&(a[t.name.value]=!0);const l=[...Object.keys(n),...Object.keys(a)];return{NamedType(t,u,p,d,f){const h=t.name.value;if(!n[h]&&!a[h]){var m;const n=null!==(m=f[2])&&void 0!==m?m:p,a=null!=n&&"kind"in(y=n)&&((0,s.isTypeSystemDefinitionNode)(y)||(0,s.isTypeSystemExtensionNode)(y));if(a&&c.includes(h))return;const u=(0,r.suggestionList)(h,a?c.concat(l):l);e.reportError(new o.GraphQLError(`Unknown type "${h}".`+(0,i.didYouMean)(u),{nodes:t}))}var y}}};var i=n(100),r=n(8070),o=n(5822),s=n(1352),a=n(8155);const c=[...n(2229).specifiedScalarTypes,...a.introspectionTypes].map((e=>e.name))},870:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoneAnonymousOperationRule=function(e){let t=0;return{Document(e){t=e.definitions.filter((e=>e.kind===r.Kind.OPERATION_DEFINITION)).length},OperationDefinition(n){!n.name&&t>1&&e.reportError(new i.GraphQLError("This anonymous operation must be the only defined operation.",{nodes:n}))}}};var i=n(5822),r=n(2828)},3411:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoneSchemaDefinitionRule=function(e){var t,n,r;const o=e.getSchema(),s=null!==(t=null!==(n=null!==(r=null==o?void 0:o.astNode)&&void 0!==r?r:null==o?void 0:o.getQueryType())&&void 0!==n?n:null==o?void 0:o.getMutationType())&&void 0!==t?t:null==o?void 0:o.getSubscriptionType();let a=0;return{SchemaDefinition(t){s?e.reportError(new i.GraphQLError("Cannot define a new schema within a schema extension.",{nodes:t})):(a>0&&e.reportError(new i.GraphQLError("Must provide only one schema definition.",{nodes:t})),++a)}}};var i=n(5822)},658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoFragmentCyclesRule=function(e){const t=Object.create(null),n=[],r=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition:e=>(o(e),!1)};function o(s){if(t[s.name.value])return;const a=s.name.value;t[a]=!0;const c=e.getFragmentSpreads(s.selectionSet);if(0!==c.length){r[a]=n.length;for(const t of c){const s=t.name.value,a=r[s];if(n.push(t),void 0===a){const t=e.getFragment(s);t&&o(t)}else{const t=n.slice(a),r=t.slice(0,-1).map((e=>'"'+e.name.value+'"')).join(", ");e.reportError(new i.GraphQLError(`Cannot spread fragment "${s}" within itself`+(""!==r?` via ${r}.`:"."),{nodes:t}))}n.pop()}r[a]=void 0}}};var i=n(5822)},7459:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUndefinedVariablesRule=function(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const r=e.getRecursiveVariableUsages(n);for(const{node:o}of r){const r=o.name.value;!0!==t[r]&&e.reportError(new i.GraphQLError(n.name?`Variable "$${r}" is not defined by operation "${n.name.value}".`:`Variable "$${r}" is not defined.`,{nodes:[o,n]}))}}},VariableDefinition(e){t[e.variable.name.value]=!0}}};var i=n(5822)},7317:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUnusedFragmentsRule=function(e){const t=[],n=[];return{OperationDefinition:e=>(t.push(e),!1),FragmentDefinition:e=>(n.push(e),!1),Document:{leave(){const r=Object.create(null);for(const n of t)for(const t of e.getRecursivelyReferencedFragments(n))r[t.name.value]=!0;for(const t of n){const n=t.name.value;!0!==r[n]&&e.reportError(new i.GraphQLError(`Fragment "${n}" is never used.`,{nodes:t}))}}}}};var i=n(5822)},8769:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoUnusedVariablesRule=function(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(n){const r=Object.create(null),o=e.getRecursiveVariableUsages(n);for(const{node:e}of o)r[e.name.value]=!0;for(const o of t){const t=o.variable.name.value;!0!==r[t]&&e.reportError(new i.GraphQLError(n.name?`Variable "$${t}" is never used in operation "${n.name.value}".`:`Variable "$${t}" is never used.`,{nodes:o}))}}},VariableDefinition(e){t.push(e)}}};var i=n(5822)},4331:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OverlappingFieldsCanBeMergedRule=function(e){const t=new g,n=new Map;return{SelectionSet(i){const o=function(e,t,n,i,r){const o=[],[s,a]=v(e,t,i,r);if(function(e,t,n,i,r){for(const[o,s]of Object.entries(r))if(s.length>1)for(let r=0;r<s.length;r++)for(let a=r+1;a<s.length;a++){const c=h(e,n,i,!1,o,s[r],s[a]);c&&t.push(c)}}(e,o,t,n,s),0!==a.length)for(let i=0;i<a.length;i++){p(e,o,t,n,!1,s,a[i]);for(let r=i+1;r<a.length;r++)d(e,o,t,n,!1,a[i],a[r])}return o}(e,n,t,e.getParentType(),i);for(const[[t,n],i,s]of o){const o=u(n);e.reportError(new r.GraphQLError(`Fields "${t}" conflict because ${o}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:i.concat(s)}))}}}};var i=n(8002),r=n(5822),o=n(2828),s=n(3033),a=n(5003),c=n(6830),l=n(5115);function u(e){return Array.isArray(e)?e.map((([e,t])=>`subfields "${e}" conflict because `+u(t))).join(" and "):e}function p(e,t,n,i,r,o,s){const a=e.getFragment(s);if(!a)return;const[c,l]=E(e,n,a);if(o!==c){f(e,t,n,i,r,o,c);for(const a of l)i.has(a,s,r)||(i.add(a,s,r),p(e,t,n,i,r,o,a))}}function d(e,t,n,i,r,o,s){if(o===s)return;if(i.has(o,s,r))return;i.add(o,s,r);const a=e.getFragment(o),c=e.getFragment(s);if(!a||!c)return;const[l,u]=E(e,n,a),[p,h]=E(e,n,c);f(e,t,n,i,r,l,p);for(const s of h)d(e,t,n,i,r,o,s);for(const o of u)d(e,t,n,i,r,o,s)}function f(e,t,n,i,r,o,s){for(const[a,c]of Object.entries(o)){const o=s[a];if(o)for(const s of c)for(const c of o){const o=h(e,n,i,r,a,s,c);o&&t.push(o)}}}function h(e,t,n,r,o,s,c){const[l,u,h]=s,[E,T,g]=c,I=r||l!==E&&(0,a.isObjectType)(l)&&(0,a.isObjectType)(E);if(!I){const e=u.name.value,t=T.name.value;if(e!==t)return[[o,`"${e}" and "${t}" are different fields`],[u],[T]];if(m(u)!==m(T))return[[o,"they have differing arguments"],[u],[T]]}const N=null==h?void 0:h.type,b=null==g?void 0:g.type;if(N&&b&&y(N,b))return[[o,`they return conflicting types "${(0,i.inspect)(N)}" and "${(0,i.inspect)(b)}"`],[u],[T]];const _=u.selectionSet,S=T.selectionSet;if(_&&S){const i=function(e,t,n,i,r,o,s,a){const c=[],[l,u]=v(e,t,r,o),[h,m]=v(e,t,s,a);f(e,c,t,n,i,l,h);for(const r of m)p(e,c,t,n,i,l,r);for(const r of u)p(e,c,t,n,i,h,r);for(const r of u)for(const o of m)d(e,c,t,n,i,r,o);return c}(e,t,n,I,(0,a.getNamedType)(N),_,(0,a.getNamedType)(b),S);return function(e,t,n,i){if(e.length>0)return[[t,e.map((([e])=>e))],[n,...e.map((([,e])=>e)).flat()],[i,...e.map((([,,e])=>e)).flat()]]}(i,o,u,T)}}function m(e){var t;const n=null!==(t=e.arguments)&&void 0!==t?t:[],i={kind:o.Kind.OBJECT,fields:n.map((e=>({kind:o.Kind.OBJECT_FIELD,name:e.name,value:e.value})))};return(0,s.print)((0,c.sortValueNode)(i))}function y(e,t){return(0,a.isListType)(e)?!(0,a.isListType)(t)||y(e.ofType,t.ofType):!!(0,a.isListType)(t)||((0,a.isNonNullType)(e)?!(0,a.isNonNullType)(t)||y(e.ofType,t.ofType):!!(0,a.isNonNullType)(t)||!(!(0,a.isLeafType)(e)&&!(0,a.isLeafType)(t))&&e!==t)}function v(e,t,n,i){const r=t.get(i);if(r)return r;const o=Object.create(null),s=Object.create(null);T(e,n,i,o,s);const a=[o,Object.keys(s)];return t.set(i,a),a}function E(e,t,n){const i=t.get(n.selectionSet);if(i)return i;const r=(0,l.typeFromAST)(e.getSchema(),n.typeCondition);return v(e,t,r,n.selectionSet)}function T(e,t,n,i,r){for(const s of n.selections)switch(s.kind){case o.Kind.FIELD:{const e=s.name.value;let n;((0,a.isObjectType)(t)||(0,a.isInterfaceType)(t))&&(n=t.getFields()[e]);const r=s.alias?s.alias.value:e;i[r]||(i[r]=[]),i[r].push([t,s,n]);break}case o.Kind.FRAGMENT_SPREAD:r[s.name.value]=!0;break;case o.Kind.INLINE_FRAGMENT:{const n=s.typeCondition,o=n?(0,l.typeFromAST)(e.getSchema(),n):t;T(e,o,s.selectionSet,i,r);break}}}class g{constructor(){this._data=new Map}has(e,t,n){var i;const[r,o]=e<t?[e,t]:[t,e],s=null===(i=this._data.get(r))||void 0===i?void 0:i.get(o);return void 0!==s&&(!!n||n===s)}add(e,t,n){const[i,r]=e<t?[e,t]:[t,e],o=this._data.get(i);void 0===o?this._data.set(i,new Map([[r,n]])):o.set(r,n)}}},5904:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PossibleFragmentSpreadsRule=function(e){return{InlineFragment(t){const n=e.getType(),a=e.getParentType();if((0,o.isCompositeType)(n)&&(0,o.isCompositeType)(a)&&!(0,s.doTypesOverlap)(e.getSchema(),n,a)){const o=(0,i.inspect)(a),s=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Fragment cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}},FragmentSpread(t){const n=t.name.value,c=function(e,t){const n=e.getFragment(t);if(n){const t=(0,a.typeFromAST)(e.getSchema(),n.typeCondition);if((0,o.isCompositeType)(t))return t}}(e,n),l=e.getParentType();if(c&&l&&!(0,s.doTypesOverlap)(e.getSchema(),c,l)){const o=(0,i.inspect)(l),s=(0,i.inspect)(c);e.reportError(new r.GraphQLError(`Fragment "${n}" cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}}}};var i=n(8002),r=n(5822),o=n(5003),s=n(298),a=n(5115)},5715:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PossibleTypeExtensionsRule=function(e){const t=e.getSchema(),n=Object.create(null);for(const t of e.getDocument().definitions)(0,l.isTypeDefinitionNode)(t)&&(n[t.name.value]=t);return{ScalarTypeExtension:d,ObjectTypeExtension:d,InterfaceTypeExtension:d,UnionTypeExtension:d,EnumTypeExtension:d,InputObjectTypeExtension:d};function d(l){const d=l.name.value,f=n[d],h=null==t?void 0:t.getType(d);let m;if(f?m=p[f.kind]:h&&(y=h,m=(0,u.isScalarType)(y)?c.Kind.SCALAR_TYPE_EXTENSION:(0,u.isObjectType)(y)?c.Kind.OBJECT_TYPE_EXTENSION:(0,u.isInterfaceType)(y)?c.Kind.INTERFACE_TYPE_EXTENSION:(0,u.isUnionType)(y)?c.Kind.UNION_TYPE_EXTENSION:(0,u.isEnumType)(y)?c.Kind.ENUM_TYPE_EXTENSION:(0,u.isInputObjectType)(y)?c.Kind.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.invariant)(!1,"Unexpected type: "+(0,r.inspect)(y))),m){if(m!==l.kind){const t=function(e){switch(e){case c.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case c.Kind.OBJECT_TYPE_EXTENSION:return"object";case c.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case c.Kind.UNION_TYPE_EXTENSION:return"union";case c.Kind.ENUM_TYPE_EXTENSION:return"enum";case c.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:(0,o.invariant)(!1,"Unexpected kind: "+(0,r.inspect)(e))}}(l.kind);e.reportError(new a.GraphQLError(`Cannot extend non-${t} type "${d}".`,{nodes:f?[f,l]:l}))}}else{const r=Object.keys({...n,...null==t?void 0:t.getTypeMap()}),o=(0,s.suggestionList)(d,r);e.reportError(new a.GraphQLError(`Cannot extend type "${d}" because it is not defined.`+(0,i.didYouMean)(o),{nodes:l.name}))}var y}};var i=n(100),r=n(8002),o=n(7706),s=n(8070),a=n(5822),c=n(2828),l=n(1352),u=n(5003);const p={[c.Kind.SCALAR_TYPE_DEFINITION]:c.Kind.SCALAR_TYPE_EXTENSION,[c.Kind.OBJECT_TYPE_DEFINITION]:c.Kind.OBJECT_TYPE_EXTENSION,[c.Kind.INTERFACE_TYPE_DEFINITION]:c.Kind.INTERFACE_TYPE_EXTENSION,[c.Kind.UNION_TYPE_DEFINITION]:c.Kind.UNION_TYPE_EXTENSION,[c.Kind.ENUM_TYPE_DEFINITION]:c.Kind.ENUM_TYPE_EXTENSION,[c.Kind.INPUT_OBJECT_TYPE_DEFINITION]:c.Kind.INPUT_OBJECT_TYPE_EXTENSION}},4312:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProvidedRequiredArgumentsOnDirectivesRule=u,t.ProvidedRequiredArgumentsRule=function(e){return{...u(e),Field:{leave(t){var n;const r=e.getFieldDef();if(!r)return!1;const s=new Set(null===(n=t.arguments)||void 0===n?void 0:n.map((e=>e.name.value)));for(const n of r.args)if(!s.has(n.name)&&(0,c.isRequiredArgument)(n)){const s=(0,i.inspect)(n.type);e.reportError(new o.GraphQLError(`Field "${r.name}" argument "${n.name}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}};var i=n(8002),r=n(2863),o=n(5822),s=n(2828),a=n(3033),c=n(5003),l=n(7197);function u(e){var t;const n=Object.create(null),u=e.getSchema(),d=null!==(t=null==u?void 0:u.getDirectives())&&void 0!==t?t:l.specifiedDirectives;for(const e of d)n[e.name]=(0,r.keyMap)(e.args.filter(c.isRequiredArgument),(e=>e.name));const f=e.getDocument().definitions;for(const e of f)if(e.kind===s.Kind.DIRECTIVE_DEFINITION){var h;const t=null!==(h=e.arguments)&&void 0!==h?h:[];n[e.name.value]=(0,r.keyMap)(t.filter(p),(e=>e.name.value))}return{Directive:{leave(t){const r=t.name.value,s=n[r];if(s){var l;const n=null!==(l=t.arguments)&&void 0!==l?l:[],u=new Set(n.map((e=>e.name.value)));for(const[n,l]of Object.entries(s))if(!u.has(n)){const s=(0,c.isType)(l.type)?(0,i.inspect)(l.type):(0,a.print)(l.type);e.reportError(new o.GraphQLError(`Directive "@${r}" argument "${n}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}}function p(e){return e.type.kind===s.Kind.NON_NULL_TYPE&&null==e.defaultValue}},7168:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ScalarLeafsRule=function(e){return{Field(t){const n=e.getType(),s=t.selectionSet;if(n)if((0,o.isLeafType)((0,o.getNamedType)(n))){if(s){const o=t.name.value,a=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Field "${o}" must not have a selection since type "${a}" has no subfields.`,{nodes:s}))}}else if(!s){const o=t.name.value,s=(0,i.inspect)(n);e.reportError(new r.GraphQLError(`Field "${o}" of type "${s}" must have a selection of subfields. Did you mean "${o} { ... }"?`,{nodes:t}))}}}};var i=n(8002),r=n(5822),o=n(5003)},4666:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleFieldSubscriptionsRule=function(e){return{OperationDefinition(t){if("subscription"===t.operation){const n=e.getSchema(),s=n.getSubscriptionType();if(s){const a=t.name?t.name.value:null,c=Object.create(null),l=e.getDocument(),u=Object.create(null);for(const e of l.definitions)e.kind===r.Kind.FRAGMENT_DEFINITION&&(u[e.name.value]=e);const p=(0,o.collectFields)(n,u,c,s,t.selectionSet);if(p.size>1){const t=[...p.values()].slice(1).flat();e.reportError(new i.GraphQLError(null!=a?`Subscription "${a}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:t}))}for(const t of p.values())t[0].name.value.startsWith("__")&&e.reportError(new i.GraphQLError(null!=a?`Subscription "${a}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:t}))}}}}};var i=n(5822),r=n(2828),o=n(8950)},3878:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueArgumentDefinitionNamesRule=function(e){return{DirectiveDefinition(e){var t;const i=null!==(t=e.arguments)&&void 0!==t?t:[];return n(`@${e.name.value}`,i)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(e){var t;const i=e.name.value,r=null!==(t=e.fields)&&void 0!==t?t:[];for(const e of r){var o;n(`${i}.${e.name.value}`,null!==(o=e.arguments)&&void 0!==o?o:[])}return!1}function n(t,n){const o=(0,i.groupBy)(n,(e=>e.name.value));for(const[n,i]of o)i.length>1&&e.reportError(new r.GraphQLError(`Argument "${t}(${n}:)" can only be defined once.`,{nodes:i.map((e=>e.name))}));return!1}};var i=n(4620),r=n(5822)},4986:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueArgumentNamesRule=function(e){return{Field:t,Directive:t};function t(t){var n;const o=null!==(n=t.arguments)&&void 0!==n?n:[],s=(0,i.groupBy)(o,(e=>e.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.GraphQLError(`There can be only one argument named "${t}".`,{nodes:n.map((e=>e.name))}))}};var i=n(4620),r=n(5822)},6753:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueDirectiveNamesRule=function(e){const t=Object.create(null),n=e.getSchema();return{DirectiveDefinition(r){const o=r.name.value;if(null==n||!n.getDirective(o))return t[o]?e.reportError(new i.GraphQLError(`There can be only one directive named "@${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.GraphQLError(`Directive "@${o}" already exists in the schema. It cannot be redefined.`,{nodes:r.name}))}}};var i=n(5822)},3576:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueDirectivesPerLocationRule=function(e){const t=Object.create(null),n=e.getSchema(),a=n?n.getDirectives():s.specifiedDirectives;for(const e of a)t[e.name]=!e.isRepeatable;const c=e.getDocument().definitions;for(const e of c)e.kind===r.Kind.DIRECTIVE_DEFINITION&&(t[e.name.value]=!e.repeatable);const l=Object.create(null),u=Object.create(null);return{enter(n){if(!("directives"in n)||!n.directives)return;let s;if(n.kind===r.Kind.SCHEMA_DEFINITION||n.kind===r.Kind.SCHEMA_EXTENSION)s=l;else if((0,o.isTypeDefinitionNode)(n)||(0,o.isTypeExtensionNode)(n)){const e=n.name.value;s=u[e],void 0===s&&(u[e]=s=Object.create(null))}else s=Object.create(null);for(const r of n.directives){const n=r.name.value;t[n]&&(s[n]?e.reportError(new i.GraphQLError(`The directive "@${n}" can only be used once at this location.`,{nodes:[s[n],r]})):s[n]=r)}}}};var i=n(5822),r=n(2828),o=n(1352),s=n(7197)},6400:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueEnumValueNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:s,EnumTypeExtension:s};function s(t){var s;const a=t.name.value;o[a]||(o[a]=Object.create(null));const c=null!==(s=t.values)&&void 0!==s?s:[],l=o[a];for(const t of c){const o=t.name.value,s=n[a];(0,r.isEnumType)(s)&&s.getValue(o)?e.reportError(new i.GraphQLError(`Enum value "${a}.${o}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[o]?e.reportError(new i.GraphQLError(`Enum value "${a}.${o}" can only be defined once.`,{nodes:[l[o],t.name]})):l[o]=t.name}return!1}};var i=n(5822),r=n(5003)},4046:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueFieldDefinitionNamesRule=function(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),r=Object.create(null);return{InputObjectTypeDefinition:s,InputObjectTypeExtension:s,InterfaceTypeDefinition:s,InterfaceTypeExtension:s,ObjectTypeDefinition:s,ObjectTypeExtension:s};function s(t){var s;const a=t.name.value;r[a]||(r[a]=Object.create(null));const c=null!==(s=t.fields)&&void 0!==s?s:[],l=r[a];for(const t of c){const r=t.name.value;o(n[a],r)?e.reportError(new i.GraphQLError(`Field "${a}.${r}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[r]?e.reportError(new i.GraphQLError(`Field "${a}.${r}" can only be defined once.`,{nodes:[l[r],t.name]})):l[r]=t.name}return!1}};var i=n(5822),r=n(5003);function o(e,t){return!!((0,r.isObjectType)(e)||(0,r.isInterfaceType)(e)||(0,r.isInputObjectType)(e))&&null!=e.getFields()[t]}},5883:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueFragmentNamesRule=function(e){const t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(n){const r=n.name.value;return t[r]?e.reportError(new i.GraphQLError(`There can be only one fragment named "${r}".`,{nodes:[t[r],n.name]})):t[r]=n.name,!1}}};var i=n(5822)},4313:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueInputFieldNamesRule=function(e){const t=[];let n=Object.create(null);return{ObjectValue:{enter(){t.push(n),n=Object.create(null)},leave(){const e=t.pop();e||(0,i.invariant)(!1),n=e}},ObjectField(t){const i=t.name.value;n[i]?e.reportError(new r.GraphQLError(`There can be only one input field named "${i}".`,{nodes:[n[i],t.name]})):n[i]=t.name}}};var i=n(7706),r=n(5822)},2139:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueOperationNamesRule=function(e){const t=Object.create(null);return{OperationDefinition(n){const r=n.name;return r&&(t[r.value]?e.reportError(new i.GraphQLError(`There can be only one operation named "${r.value}".`,{nodes:[t[r.value],r]})):t[r.value]=r),!1},FragmentDefinition:()=>!1}};var i=n(5822)},856:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueOperationTypesRule=function(e){const t=e.getSchema(),n=Object.create(null),r=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(t){var o;const s=null!==(o=t.operationTypes)&&void 0!==o?o:[];for(const t of s){const o=t.operation,s=n[o];r[o]?e.reportError(new i.GraphQLError(`Type for ${o} already defined in the schema. It cannot be redefined.`,{nodes:t})):s?e.reportError(new i.GraphQLError(`There can be only one ${o} type in schema.`,{nodes:[s,t]})):n[o]=t}return!1}};var i=n(5822)},1686:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueTypeNamesRule=function(e){const t=Object.create(null),n=e.getSchema();return{ScalarTypeDefinition:r,ObjectTypeDefinition:r,InterfaceTypeDefinition:r,UnionTypeDefinition:r,EnumTypeDefinition:r,InputObjectTypeDefinition:r};function r(r){const o=r.name.value;if(null==n||!n.getType(o))return t[o]?e.reportError(new i.GraphQLError(`There can be only one type named "${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.GraphQLError(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:r.name}))}};var i=n(5822)},4243:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UniqueVariableNamesRule=function(e){return{OperationDefinition(t){var n;const o=null!==(n=t.variableDefinitions)&&void 0!==n?n:[],s=(0,i.groupBy)(o,(e=>e.variable.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.GraphQLError(`There can be only one variable named "$${t}".`,{nodes:n.map((e=>e.variable.name))}))}}};var i=n(4620),r=n(5822)},6869:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValuesOfCorrectTypeRule=function(e){return{ListValue(t){const n=(0,l.getNullableType)(e.getParentInputType());if(!(0,l.isListType)(n))return u(e,t),!1},ObjectValue(t){const n=(0,l.getNamedType)(e.getInputType());if(!(0,l.isInputObjectType)(n))return u(e,t),!1;const i=(0,o.keyMap)(t.fields,(e=>e.name.value));for(const o of Object.values(n.getFields()))if(!i[o.name]&&(0,l.isRequiredInputField)(o)){const i=(0,r.inspect)(o.type);e.reportError(new a.GraphQLError(`Field "${n.name}.${o.name}" of required type "${i}" was not provided.`,{nodes:t}))}},ObjectField(t){const n=(0,l.getNamedType)(e.getParentInputType());if(!e.getInputType()&&(0,l.isInputObjectType)(n)){const r=(0,s.suggestionList)(t.name.value,Object.keys(n.getFields()));e.reportError(new a.GraphQLError(`Field "${t.name.value}" is not defined by type "${n.name}".`+(0,i.didYouMean)(r),{nodes:t}))}},NullValue(t){const n=e.getInputType();(0,l.isNonNullType)(n)&&e.reportError(new a.GraphQLError(`Expected value of type "${(0,r.inspect)(n)}", found ${(0,c.print)(t)}.`,{nodes:t}))},EnumValue:t=>u(e,t),IntValue:t=>u(e,t),FloatValue:t=>u(e,t),StringValue:t=>u(e,t),BooleanValue:t=>u(e,t)}};var i=n(100),r=n(8002),o=n(2863),s=n(8070),a=n(5822),c=n(3033),l=n(5003);function u(e,t){const n=e.getInputType();if(!n)return;const i=(0,l.getNamedType)(n);if((0,l.isLeafType)(i))try{if(void 0===i.parseLiteral(t,void 0)){const i=(0,r.inspect)(n);e.reportError(new a.GraphQLError(`Expected value of type "${i}", found ${(0,c.print)(t)}.`,{nodes:t}))}}catch(i){const o=(0,r.inspect)(n);i instanceof a.GraphQLError?e.reportError(i):e.reportError(new a.GraphQLError(`Expected value of type "${o}", found ${(0,c.print)(t)}; `+i.message,{nodes:t,originalError:i}))}else{const i=(0,r.inspect)(n);e.reportError(new a.GraphQLError(`Expected value of type "${i}", found ${(0,c.print)(t)}.`,{nodes:t}))}}},4942:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VariablesAreInputTypesRule=function(e){return{VariableDefinition(t){const n=(0,s.typeFromAST)(e.getSchema(),t.type);if(void 0!==n&&!(0,o.isInputType)(n)){const n=t.variable.name.value,o=(0,r.print)(t.type);e.reportError(new i.GraphQLError(`Variable "$${n}" cannot be non-input type "${o}".`,{nodes:t.type}))}}}};var i=n(5822),r=n(3033),o=n(5003),s=n(5115)},8034:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VariablesInAllowedPositionRule=function(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const o=e.getRecursiveVariableUsages(n);for(const{node:n,type:s,defaultValue:a}of o){const o=n.name.value,u=t[o];if(u&&s){const t=e.getSchema(),p=(0,c.typeFromAST)(t,u.type);if(p&&!l(t,p,u.defaultValue,s,a)){const t=(0,i.inspect)(p),a=(0,i.inspect)(s);e.reportError(new r.GraphQLError(`Variable "$${o}" of type "${t}" used in position expecting type "${a}".`,{nodes:[u,n]}))}}}}},VariableDefinition(e){t[e.variable.name.value]=e}}};var i=n(8002),r=n(5822),o=n(2828),s=n(5003),a=n(298),c=n(5115);function l(e,t,n,i,r){if((0,s.isNonNullType)(i)&&!(0,s.isNonNullType)(t)){const s=void 0!==r;if((null==n||n.kind===o.Kind.NULL)&&!s)return!1;const c=i.ofType;return(0,a.isTypeSubTypeOf)(e,t,c)}return(0,a.isTypeSubTypeOf)(e,t,i)}},2860:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoDeprecatedCustomRule=function(e){return{Field(t){const n=e.getFieldDef(),o=null==n?void 0:n.deprecationReason;if(n&&null!=o){const s=e.getParentType();null!=s||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`The field ${s.name}.${n.name} is deprecated. ${o}`,{nodes:t}))}},Argument(t){const n=e.getArgument(),o=null==n?void 0:n.deprecationReason;if(n&&null!=o){const s=e.getDirective();if(null!=s)e.reportError(new r.GraphQLError(`Directive "@${s.name}" argument "${n.name}" is deprecated. ${o}`,{nodes:t}));else{const s=e.getParentType(),a=e.getFieldDef();null!=s&&null!=a||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`Field "${s.name}.${a.name}" argument "${n.name}" is deprecated. ${o}`,{nodes:t}))}}},ObjectField(t){const n=(0,o.getNamedType)(e.getParentInputType());if((0,o.isInputObjectType)(n)){const i=n.getFields()[t.name.value],o=null==i?void 0:i.deprecationReason;null!=o&&e.reportError(new r.GraphQLError(`The input field ${n.name}.${i.name} is deprecated. ${o}`,{nodes:t}))}},EnumValue(t){const n=e.getEnumValue(),s=null==n?void 0:n.deprecationReason;if(n&&null!=s){const a=(0,o.getNamedType)(e.getInputType());null!=a||(0,i.invariant)(!1),e.reportError(new r.GraphQLError(`The enum value "${a.name}.${n.name}" is deprecated. ${s}`,{nodes:t}))}}}};var i=n(7706),r=n(5822),o=n(5003)},2276:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoSchemaIntrospectionCustomRule=function(e){return{Field(t){const n=(0,r.getNamedType)(e.getType());n&&(0,o.isIntrospectionType)(n)&&e.reportError(new i.GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}};var i=n(5822),r=n(5003),o=n(8155)},4710:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.specifiedSDLRules=t.specifiedRules=void 0;var i=n(5285),r=n(9426),o=n(3558),s=n(9989),a=n(2826),c=n(1843),l=n(5961),u=n(870),p=n(3411),d=n(658),f=n(7459),h=n(7317),m=n(8769),y=n(4331),v=n(5904),E=n(5715),T=n(4312),g=n(7168),I=n(4666),N=n(3878),b=n(4986),_=n(6753),S=n(3576),O=n(6400),D=n(4046),A=n(5883),R=n(4313),w=n(2139),L=n(856),F=n(1686),x=n(4243),k=n(6869),$=n(4942),C=n(8034);const j=Object.freeze([i.ExecutableDefinitionsRule,w.UniqueOperationNamesRule,u.LoneAnonymousOperationRule,I.SingleFieldSubscriptionsRule,l.KnownTypeNamesRule,o.FragmentsOnCompositeTypesRule,$.VariablesAreInputTypesRule,g.ScalarLeafsRule,r.FieldsOnCorrectTypeRule,A.UniqueFragmentNamesRule,c.KnownFragmentNamesRule,h.NoUnusedFragmentsRule,v.PossibleFragmentSpreadsRule,d.NoFragmentCyclesRule,x.UniqueVariableNamesRule,f.NoUndefinedVariablesRule,m.NoUnusedVariablesRule,a.KnownDirectivesRule,S.UniqueDirectivesPerLocationRule,s.KnownArgumentNamesRule,b.UniqueArgumentNamesRule,k.ValuesOfCorrectTypeRule,T.ProvidedRequiredArgumentsRule,C.VariablesInAllowedPositionRule,y.OverlappingFieldsCanBeMergedRule,R.UniqueInputFieldNamesRule]);t.specifiedRules=j;const M=Object.freeze([p.LoneSchemaDefinitionRule,L.UniqueOperationTypesRule,F.UniqueTypeNamesRule,O.UniqueEnumValueNamesRule,D.UniqueFieldDefinitionNamesRule,N.UniqueArgumentDefinitionNamesRule,_.UniqueDirectiveNamesRule,l.KnownTypeNamesRule,a.KnownDirectivesRule,S.UniqueDirectivesPerLocationRule,E.PossibleTypeExtensionsRule,s.KnownArgumentNamesOnDirectivesRule,b.UniqueArgumentNamesRule,R.UniqueInputFieldNamesRule,T.ProvidedRequiredArgumentsOnDirectivesRule]);t.specifiedSDLRules=M},9504:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertValidSDL=function(e){const t=u(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))},t.assertValidSDLExtension=function(e,t){const n=u(e,t);if(0!==n.length)throw new Error(n.map((e=>e.message)).join("\n\n"))},t.validate=function(e,t,n=c.specifiedRules,u,p=new a.TypeInfo(e)){var d;const f=null!==(d=null==u?void 0:u.maxErrors)&&void 0!==d?d:100;t||(0,i.devAssert)(!1,"Must provide document."),(0,s.assertValidSchema)(e);const h=Object.freeze({}),m=[],y=new l.ValidationContext(e,t,p,(e=>{if(m.length>=f)throw m.push(new r.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),h;m.push(e)})),v=(0,o.visitInParallel)(n.map((e=>e(y))));try{(0,o.visit)(t,(0,a.visitWithTypeInfo)(p,v))}catch(e){if(e!==h)throw e}return m},t.validateSDL=u;var i=n(7242),r=n(5822),o=n(285),s=n(1671),a=n(6226),c=n(4710),l=n(3955);function u(e,t,n=c.specifiedSDLRules){const i=[],r=new l.SDLValidationContext(e,t,(e=>{i.push(e)})),s=n.map((e=>e(r)));return(0,o.visit)(e,(0,o.visitInParallel)(s)),i}},1044:(e,t,n)=>{"use strict";var i=n(210)("%Object.defineProperty%",!0),r=function(){if(i)try{return i({},"a",{value:1}),!0}catch(e){return!1}return!1};r.hasArrayLengthDefineBug=function(){if(!r())return null;try{return 1!==i([],"length",{value:1}).length}catch(e){return!0}},e.exports=r},1405:(e,t,n)=>{"use strict";var i="undefined"!=typeof Symbol&&Symbol,r=n(5419);e.exports=function(){return"function"==typeof i&&"function"==typeof Symbol&&"symbol"==typeof i("foo")&&"symbol"==typeof Symbol("bar")&&r()}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var i=Object.getOwnPropertySymbols(e);if(1!==i.length||i[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var r=Object.getOwnPropertyDescriptor(e,t);if(42!==r.value||!0!==r.enumerable)return!1}return!0}},6410:(e,t,n)=>{"use strict";var i=n(5419);e.exports=function(){return i()&&!!Symbol.toStringTag}},7642:(e,t,n)=>{"use strict";var i=n(8612);e.exports=i.call(Function.call,Object.prototype.hasOwnProperty)},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},2584:(e,t,n)=>{"use strict";var i=n(6410)(),r=n(1924)("Object.prototype.toString"),o=function(e){return!(i&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===r(e)},s=function(e){return!!o(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==r(e)&&"[object Function]"===r(e.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,e.exports=a?o:s},5320:e=>{"use strict";var t,n,i=Function.prototype.toString,r="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof r&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw n}}),n={},r((function(){throw 42}),null,t)}catch(e){e!==n&&(r=null)}else r=null;var o=/^\s*class\b/,s=function(e){try{var t=i.call(e);return o.test(t)}catch(e){return!1}},a=function(e){try{return!s(e)&&(i.call(e),!0)}catch(e){return!1}},c=Object.prototype.toString,l="function"==typeof Symbol&&!!Symbol.toStringTag,u=!(0 in[,]),p=function(){return!1};if("object"==typeof document){var d=document.all;c.call(d)===c.call(document.all)&&(p=function(e){if((u||!e)&&(void 0===e||"object"==typeof e))try{var t=c.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=r?function(e){if(p(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{r(e,null,t)}catch(e){if(e!==n)return!1}return!s(e)&&a(e)}:function(e){if(p(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(l)return a(e);if(s(e))return!1;var t=c.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&a(e)}},8662:(e,t,n)=>{"use strict";var i,r=Object.prototype.toString,o=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=n(6410)(),c=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(s.test(o.call(e)))return!0;if(!a)return"[object GeneratorFunction]"===r.call(e);if(!c)return!1;if(void 0===i){var t=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(e){}}();i=!!t&&c(t)}return c(e)===i}},8611:e=>{"use strict";e.exports=function(e){return e!=e}},360:(e,t,n)=>{"use strict";var i=n(5559),r=n(4289),o=n(8611),s=n(9415),a=n(3194),c=i(s(),Number);r(c,{getPolyfill:s,implementation:o,shim:a}),e.exports=c},9415:(e,t,n)=>{"use strict";var i=n(8611);e.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:i}},3194:(e,t,n)=>{"use strict";var i=n(4289),r=n(9415);e.exports=function(){var e=r();return i(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},5692:(e,t,n)=>{"use strict";var i=n(4029),r=n(3083),o=n(1924),s=o("Object.prototype.toString"),a=n(6410)(),c=n(7296),l="undefined"==typeof globalThis?n.g:globalThis,u=r(),p=o("Array.prototype.indexOf",!0)||function(e,t){for(var n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1},d=o("String.prototype.slice"),f={},h=Object.getPrototypeOf;a&&c&&h&&i(u,(function(e){var t=new l[e];if(Symbol.toStringTag in t){var n=h(t),i=c(n,Symbol.toStringTag);if(!i){var r=h(n);i=c(r,Symbol.toStringTag)}f[e]=i.get}})),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a||!(Symbol.toStringTag in e)){var t=d(s(e),8,-1);return p(u,t)>-1}return!!c&&function(e){var t=!1;return i(f,(function(n,i){if(!t)try{t=n.call(e)===i}catch(e){}})),t}(e)}},9991:e=>{"use strict";e.exports=function(){function e(e,t,n,i,r){return e<t||n<t?e>n?n+1:e+1:i===r?t:t+1}return function(t,n){if(t===n)return 0;if(t.length>n.length){var i=t;t=n,n=i}for(var r=t.length,o=n.length;r>0&&t.charCodeAt(r-1)===n.charCodeAt(o-1);)r--,o--;for(var s=0;s<r&&t.charCodeAt(s)===n.charCodeAt(s);)s++;if(o-=s,0==(r-=s)||o<3)return o;var a,c,l,u,p,d,f,h,m,y,v,E,T=0,g=[];for(a=0;a<r;a++)g.push(a+1),g.push(t.charCodeAt(s+a));for(var I=g.length-1;T<o-3;)for(m=n.charCodeAt(s+(c=T)),y=n.charCodeAt(s+(l=T+1)),v=n.charCodeAt(s+(u=T+2)),E=n.charCodeAt(s+(p=T+3)),d=T+=4,a=0;a<I;a+=2)c=e(f=g[a],c,l,m,h=g[a+1]),l=e(c,l,u,y,h),u=e(l,u,p,v,h),d=e(u,p,d,E,h),g[a]=d,p=u,u=l,l=c,c=f;for(;T<o;)for(m=n.charCodeAt(s+(c=T)),d=++T,a=0;a<I;a+=2)f=g[a],g[a]=d=e(f,c,d,m,g[a+1]),c=f;return d}}()},3339:e=>{"use strict";var t=function(e){return e!=e};e.exports=function(e,n){return 0===e&&0===n?1/e==1/n:e===n||!(!t(e)||!t(n))}},609:(e,t,n)=>{"use strict";var i=n(4289),r=n(5559),o=n(3339),s=n(5624),a=n(2281),c=r(s(),Object);i(c,{getPolyfill:s,implementation:o,shim:a}),e.exports=c},5624:(e,t,n)=>{"use strict";var i=n(3339);e.exports=function(){return"function"==typeof Object.is?Object.is:i}},2281:(e,t,n)=>{"use strict";var i=n(5624),r=n(4289);e.exports=function(){var e=i();return r(Object,{is:e},{is:function(){return Object.is!==e}}),e}},8987:(e,t,n)=>{"use strict";var i;if(!Object.keys){var r=Object.prototype.hasOwnProperty,o=Object.prototype.toString,s=n(1414),a=Object.prototype.propertyIsEnumerable,c=!a.call({toString:null},"toString"),l=a.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(e){var t=e.constructor;return t&&t.prototype===e},d={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},f=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!d["$"+e]&&r.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{p(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();i=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===o.call(e),i=s(e),a=t&&"[object String]"===o.call(e),d=[];if(!t&&!n&&!i)throw new TypeError("Object.keys called on a non-object");var h=l&&n;if(a&&e.length>0&&!r.call(e,0))for(var m=0;m<e.length;++m)d.push(String(m));if(i&&e.length>0)for(var y=0;y<e.length;++y)d.push(String(y));else for(var v in e)h&&"prototype"===v||!r.call(e,v)||d.push(String(v));if(c)for(var E=function(e){if("undefined"==typeof window||!f)return p(e);try{return p(e)}catch(e){return!1}}(e),T=0;T<u.length;++T)E&&"constructor"===u[T]||!r.call(e,u[T])||d.push(u[T]);return d}}e.exports=i},2215:(e,t,n)=>{"use strict";var i=Array.prototype.slice,r=n(1414),o=Object.keys,s=o?function(e){return o(e)}:n(8987),a=Object.keys;s.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return r(e)?a(i.call(e)):a(e)})}else Object.keys=s;return Object.keys||s},e.exports=s},1414:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),i="[object Arguments]"===n;return i||(i="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),i}},6470:e=>{"use strict";function t(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function n(e,t){for(var n,i="",r=0,o=-1,s=0,a=0;a<=e.length;++a){if(a<e.length)n=e.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(i.length<2||2!==r||46!==i.charCodeAt(i.length-1)||46!==i.charCodeAt(i.length-2))if(i.length>2){var c=i.lastIndexOf("/");if(c!==i.length-1){-1===c?(i="",r=0):r=(i=i.slice(0,c)).length-1-i.lastIndexOf("/"),o=a,s=0;continue}}else if(2===i.length||1===i.length){i="",r=0,o=a,s=0;continue}t&&(i.length>0?i+="/..":i="..",r=2)}else i.length>0?i+="/"+e.slice(o+1,a):i=e.slice(o+1,a),r=a-o-1;o=a,s=0}else 46===n&&-1!==s?++s:s=-1}return i}var i={resolve:function(){for(var e,i="",r=!1,o=arguments.length-1;o>=-1&&!r;o--){var s;o>=0?s=arguments[o]:(void 0===e&&(e=process.cwd()),s=e),t(s),0!==s.length&&(i=s+"/"+i,r=47===s.charCodeAt(0))}return i=n(i,!r),r?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(t(e),0===e.length)return".";var i=47===e.charCodeAt(0),r=47===e.charCodeAt(e.length-1);return 0!==(e=n(e,!i)).length||i||(e="."),e.length>0&&r&&(e+="/"),i?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,n=0;n<arguments.length;++n){var r=arguments[n];t(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":i.normalize(e)},relative:function(e,n){if(t(e),t(n),e===n)return"";if((e=i.resolve(e))===(n=i.resolve(n)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var o=e.length,s=o-r,a=1;a<n.length&&47===n.charCodeAt(a);++a);for(var c=n.length-a,l=s<c?s:c,u=-1,p=0;p<=l;++p){if(p===l){if(c>l){if(47===n.charCodeAt(a+p))return n.slice(a+p+1);if(0===p)return n.slice(a+p)}else s>l&&(47===e.charCodeAt(r+p)?u=p:0===p&&(u=0));break}var d=e.charCodeAt(r+p);if(d!==n.charCodeAt(a+p))break;47===d&&(u=p)}var f="";for(p=r+u+1;p<=o;++p)p!==o&&47!==e.charCodeAt(p)||(0===f.length?f+="..":f+="/..");return f.length>0?f+n.slice(a+u):(a+=u,47===n.charCodeAt(a)&&++a,n.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var n=e.charCodeAt(0),i=47===n,r=-1,o=!0,s=e.length-1;s>=1;--s)if(47===(n=e.charCodeAt(s))){if(!o){r=s;break}}else o=!1;return-1===r?i?"/":".":i&&1===r?"//":e.slice(0,r)},basename:function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');t(e);var i,r=0,o=-1,s=!0;if(void 0!==n&&n.length>0&&n.length<=e.length){if(n.length===e.length&&n===e)return"";var a=n.length-1,c=-1;for(i=e.length-1;i>=0;--i){var l=e.charCodeAt(i);if(47===l){if(!s){r=i+1;break}}else-1===c&&(s=!1,c=i+1),a>=0&&(l===n.charCodeAt(a)?-1==--a&&(o=i):(a=-1,o=c))}return r===o?o=c:-1===o&&(o=e.length),e.slice(r,o)}for(i=e.length-1;i>=0;--i)if(47===e.charCodeAt(i)){if(!s){r=i+1;break}}else-1===o&&(s=!1,o=i+1);return-1===o?"":e.slice(r,o)},extname:function(e){t(e);for(var n=-1,i=0,r=-1,o=!0,s=0,a=e.length-1;a>=0;--a){var c=e.charCodeAt(a);if(47!==c)-1===r&&(o=!1,r=a+1),46===c?-1===n?n=a:1!==s&&(s=1):-1!==n&&(s=-1);else if(!o){i=a+1;break}}return-1===n||-1===r||0===s||1===s&&n===r-1&&n===i+1?"":e.slice(n,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,i=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+i:n+"/"+i:i}(0,e)},parse:function(e){t(e);var n={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return n;var i,r=e.charCodeAt(0),o=47===r;o?(n.root="/",i=1):i=0;for(var s=-1,a=0,c=-1,l=!0,u=e.length-1,p=0;u>=i;--u)if(47!==(r=e.charCodeAt(u)))-1===c&&(l=!1,c=u+1),46===r?-1===s?s=u:1!==p&&(p=1):-1!==s&&(p=-1);else if(!l){a=u+1;break}return-1===s||-1===c||0===p||1===p&&s===c-1&&s===a+1?-1!==c&&(n.base=n.name=0===a&&o?e.slice(1,c):e.slice(a,c)):(0===a&&o?(n.name=e.slice(1,s),n.base=e.slice(1,c)):(n.name=e.slice(a,s),n.base=e.slice(a,c)),n.ext=e.slice(s,c)),a>0?n.dir=e.slice(0,a-1):o&&(n.dir="/"),n},sep:"/",delimiter:":",win32:null,posix:null};i.posix=i,e.exports=i},7129:(e,t)=>{"use strict";var n=Object.prototype.hasOwnProperty;function i(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function r(e){try{return encodeURIComponent(e)}catch(e){return null}}t.stringify=function(e,t){t=t||"";var i,o,s=[];for(o in"string"!=typeof t&&(t="?"),e)if(n.call(e,o)){if((i=e[o])||null!=i&&!isNaN(i)||(i=""),o=r(o),i=r(i),null===o||null===i)continue;s.push(o+"="+i)}return s.length?t+s.join("&"):""},t.parse=function(e){for(var t,n=/([^=?#&]+)=?([^&]*)/g,r={};t=n.exec(e);){var o=i(t[1]),s=i(t[2]);null===o||null===s||o in r||(r[o]=s)}return r}},7418:e=>{"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},8555:e=>{"use strict";e.exports={stdout:!1,stderr:!1}},4564:(e,t,n)=>{"use strict";var i=n(7418),r=n(7129),o=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,s=/[\n\r\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,c=/:\d+$/,l=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,u=/^[a-zA-Z]:/;function p(e){return(e||"").toString().replace(o,"")}var d=[["#","hash"],["?","query"],function(e,t){return m(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],f={hash:1,query:1};function h(e){var t,i=("undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{}).location||{},r={},o=typeof(e=e||i);if("blob:"===e.protocol)r=new v(unescape(e.pathname),{});else if("string"===o)for(t in r=new v(e,{}),f)delete r[t];else if("object"===o){for(t in e)t in f||(r[t]=e[t]);void 0===r.slashes&&(r.slashes=a.test(e.href))}return r}function m(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function y(e,t){e=(e=p(e)).replace(s,""),t=t||{};var n,i=l.exec(e),r=i[1]?i[1].toLowerCase():"",o=!!i[2],a=!!i[3],c=0;return o?a?(n=i[2]+i[3]+i[4],c=i[2].length+i[3].length):(n=i[2]+i[4],c=i[2].length):a?(n=i[3]+i[4],c=i[3].length):n=i[4],"file:"===r?c>=2&&(n=n.slice(2)):m(r)?n=i[4]:r?o&&(n=n.slice(2)):c>=2&&m(t.protocol)&&(n=i[4]),{protocol:r,slashes:o||m(r),slashesCount:c,rest:n}}function v(e,t,n){if(e=(e=p(e)).replace(s,""),!(this instanceof v))return new v(e,t,n);var o,a,c,l,f,E,T=d.slice(),g=typeof t,I=this,N=0;for("object"!==g&&"string"!==g&&(n=t,t=null),n&&"function"!=typeof n&&(n=r.parse),o=!(a=y(e||"",t=h(t))).protocol&&!a.slashes,I.slashes=a.slashes||o&&t.slashes,I.protocol=a.protocol||t.protocol||"",e=a.rest,("file:"===a.protocol&&(2!==a.slashesCount||u.test(e))||!a.slashes&&(a.protocol||a.slashesCount<2||!m(I.protocol)))&&(T[3]=[/(.*)/,"pathname"]);N<T.length;N++)"function"!=typeof(l=T[N])?(c=l[0],E=l[1],c!=c?I[E]=e:"string"==typeof c?~(f="@"===c?e.lastIndexOf(c):e.indexOf(c))&&("number"==typeof l[2]?(I[E]=e.slice(0,f),e=e.slice(f+l[2])):(I[E]=e.slice(f),e=e.slice(0,f))):(f=c.exec(e))&&(I[E]=f[1],e=e.slice(0,f.index)),I[E]=I[E]||o&&l[3]&&t[E]||"",l[4]&&(I[E]=I[E].toLowerCase())):e=l(e,I);n&&(I.query=n(I.query)),o&&t.slashes&&"/"!==I.pathname.charAt(0)&&(""!==I.pathname||""!==t.pathname)&&(I.pathname=function(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),i=n.length,r=n[i-1],o=!1,s=0;i--;)"."===n[i]?n.splice(i,1):".."===n[i]?(n.splice(i,1),s++):s&&(0===i&&(o=!0),n.splice(i,1),s--);return o&&n.unshift(""),"."!==r&&".."!==r||n.push(""),n.join("/")}(I.pathname,t.pathname)),"/"!==I.pathname.charAt(0)&&m(I.protocol)&&(I.pathname="/"+I.pathname),i(I.port,I.protocol)||(I.host=I.hostname,I.port=""),I.username=I.password="",I.auth&&(~(f=I.auth.indexOf(":"))?(I.username=I.auth.slice(0,f),I.username=encodeURIComponent(decodeURIComponent(I.username)),I.password=I.auth.slice(f+1),I.password=encodeURIComponent(decodeURIComponent(I.password))):I.username=encodeURIComponent(decodeURIComponent(I.auth)),I.auth=I.password?I.username+":"+I.password:I.username),I.origin="file:"!==I.protocol&&m(I.protocol)&&I.host?I.protocol+"//"+I.host:"null",I.href=I.toString()}v.prototype={set:function(e,t,n){var o=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||r.parse)(t)),o[e]=t;break;case"port":o[e]=t,i(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="");break;case"hostname":o[e]=t,o.port&&(t+=":"+o.port),o.host=t;break;case"host":o[e]=t,c.test(t)?(t=t.split(":"),o.port=t.pop(),o.hostname=t.join(":")):(o.hostname=t,o.port="");break;case"protocol":o.protocol=t.toLowerCase(),o.slashes=!n;break;case"pathname":case"hash":if(t){var s="pathname"===e?"/":"#";o[e]=t.charAt(0)!==s?s+t:t}else o[e]=t;break;case"username":case"password":o[e]=encodeURIComponent(t);break;case"auth":var a=t.indexOf(":");~a?(o.username=t.slice(0,a),o.username=encodeURIComponent(decodeURIComponent(o.username)),o.password=t.slice(a+1),o.password=encodeURIComponent(decodeURIComponent(o.password))):o.username=encodeURIComponent(decodeURIComponent(t))}for(var l=0;l<d.length;l++){var u=d[l];u[4]&&(o[u[1]]=o[u[1]].toLowerCase())}return o.auth=o.password?o.username+":"+o.password:o.username,o.origin="file:"!==o.protocol&&m(o.protocol)&&o.host?o.protocol+"//"+o.host:"null",o.href=o.toString(),o},toString:function(e){e&&"function"==typeof e||(e=r.stringify);var t,n=this,i=n.host,o=n.protocol;o&&":"!==o.charAt(o.length-1)&&(o+=":");var s=o+(n.protocol&&n.slashes||m(n.protocol)?"//":"");return n.username?(s+=n.username,n.password&&(s+=":"+n.password),s+="@"):n.password?(s+=":"+n.password,s+="@"):"file:"!==n.protocol&&m(n.protocol)&&!i&&"/"!==n.pathname&&(s+="@"),(":"===i[i.length-1]||c.test(n.hostname)&&!n.port)&&(i+=":"),s+=i+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(s+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(s+=n.hash),s}},v.extractProtocol=y,v.location=h,v.trimLeft=p,v.qs=r,e.exports=v},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},5955:(e,t,n)=>{"use strict";var i=n(2584),r=n(8662),o=n(6430),s=n(5692);function a(e){return e.call.bind(e)}var c="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,u=a(Object.prototype.toString),p=a(Number.prototype.valueOf),d=a(String.prototype.valueOf),f=a(Boolean.prototype.valueOf);if(c)var h=a(BigInt.prototype.valueOf);if(l)var m=a(Symbol.prototype.valueOf);function y(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function v(e){return"[object Map]"===u(e)}function E(e){return"[object Set]"===u(e)}function T(e){return"[object WeakMap]"===u(e)}function g(e){return"[object WeakSet]"===u(e)}function I(e){return"[object ArrayBuffer]"===u(e)}function N(e){return"undefined"!=typeof ArrayBuffer&&(I.working?I(e):e instanceof ArrayBuffer)}function b(e){return"[object DataView]"===u(e)}function _(e){return"undefined"!=typeof DataView&&(b.working?b(e):e instanceof DataView)}t.isArgumentsObject=i,t.isGeneratorFunction=r,t.isTypedArray=s,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):s(e)||_(e)},t.isUint8Array=function(e){return"Uint8Array"===o(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===o(e)},t.isUint16Array=function(e){return"Uint16Array"===o(e)},t.isUint32Array=function(e){return"Uint32Array"===o(e)},t.isInt8Array=function(e){return"Int8Array"===o(e)},t.isInt16Array=function(e){return"Int16Array"===o(e)},t.isInt32Array=function(e){return"Int32Array"===o(e)},t.isFloat32Array=function(e){return"Float32Array"===o(e)},t.isFloat64Array=function(e){return"Float64Array"===o(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===o(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===o(e)},v.working="undefined"!=typeof Map&&v(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(v.working?v(e):e instanceof Map)},E.working="undefined"!=typeof Set&&E(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(E.working?E(e):e instanceof Set)},T.working="undefined"!=typeof WeakMap&&T(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(T.working?T(e):e instanceof WeakMap)},g.working="undefined"!=typeof WeakSet&&g(new WeakSet),t.isWeakSet=function(e){return g(e)},I.working="undefined"!=typeof ArrayBuffer&&I(new ArrayBuffer),t.isArrayBuffer=N,b.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&b(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=_;var S="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function O(e){return"[object SharedArrayBuffer]"===u(e)}function D(e){return void 0!==S&&(void 0===O.working&&(O.working=O(new S)),O.working?O(e):e instanceof S)}function A(e){return y(e,p)}function R(e){return y(e,d)}function w(e){return y(e,f)}function L(e){return c&&y(e,h)}function F(e){return l&&y(e,m)}t.isSharedArrayBuffer=D,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===u(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===u(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===u(e)},t.isGeneratorObject=function(e){return"[object Generator]"===u(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===u(e)},t.isNumberObject=A,t.isStringObject=R,t.isBooleanObject=w,t.isBigIntObject=L,t.isSymbolObject=F,t.isBoxedPrimitive=function(e){return A(e)||R(e)||w(e)||L(e)||F(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(N(e)||D(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},9539:(e,t,n)=>{var i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++)n[t[i]]=Object.getOwnPropertyDescriptor(e,t[i]);return n},r=/%[sdj%]/g;t.format=function(e){if(!E(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,o=i.length,s=String(e).replace(r,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}})),a=i[n];n<o;a=i[++n])y(a)||!I(a)?s+=" "+a:s+=" "+c(a);return s},t.deprecate=function(e,n){if("undefined"!=typeof process&&!0===process.noDeprecation)return e;if("undefined"==typeof process)return function(){return t.deprecate(e,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(process.throwDeprecation)throw new Error(n);process.traceDeprecation?console.trace(n):console.error(n),i=!0}return e.apply(this,arguments)}};var o={},s=/^$/;if(process.env.NODE_DEBUG){var a=process.env.NODE_DEBUG;a=a.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+a+"$","i")}function c(e,n){var i={seen:[],stylize:u};return arguments.length>=3&&(i.depth=arguments[2]),arguments.length>=4&&(i.colors=arguments[3]),m(n)?i.showHidden=n:n&&t._extend(i,n),T(i.showHidden)&&(i.showHidden=!1),T(i.depth)&&(i.depth=2),T(i.colors)&&(i.colors=!1),T(i.customInspect)&&(i.customInspect=!0),i.colors&&(i.stylize=l),p(i,e,i.depth)}function l(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function u(e,t){return e}function p(e,n,i){if(e.customInspect&&n&&_(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var r=n.inspect(i,e);return E(r)||(r=p(e,r,i)),r}var o=function(e,t){if(T(t))return e.stylize("undefined","undefined");if(E(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return v(t)?e.stylize(""+t,"number"):m(t)?e.stylize(""+t,"boolean"):y(t)?e.stylize("null","null"):void 0}(e,n);if(o)return o;var s=Object.keys(n),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),b(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return d(n);if(0===s.length){if(_(n)){var c=n.name?": "+n.name:"";return e.stylize("[Function"+c+"]","special")}if(g(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(N(n))return e.stylize(Date.prototype.toString.call(n),"date");if(b(n))return d(n)}var l,u="",I=!1,S=["{","}"];return h(n)&&(I=!0,S=["[","]"]),_(n)&&(u=" [Function"+(n.name?": "+n.name:"")+"]"),g(n)&&(u=" "+RegExp.prototype.toString.call(n)),N(n)&&(u=" "+Date.prototype.toUTCString.call(n)),b(n)&&(u=" "+d(n)),0!==s.length||I&&0!=n.length?i<0?g(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=I?function(e,t,n,i,r){for(var o=[],s=0,a=t.length;s<a;++s)R(t,String(s))?o.push(f(e,t,n,i,String(s),!0)):o.push("");return r.forEach((function(r){r.match(/^\d+$/)||o.push(f(e,t,n,i,r,!0))})),o}(e,n,i,a,s):s.map((function(t){return f(e,n,i,a,t,I)})),e.seen.pop(),function(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(l,u,S)):S[0]+u+S[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,i,r,o){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),R(i,r)||(s="["+r+"]"),a||(e.seen.indexOf(c.value)<0?(a=y(n)?p(e,c.value,null):p(e,c.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),T(s)){if(o&&r.match(/^\d+$/))return a;(s=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function h(e){return Array.isArray(e)}function m(e){return"boolean"==typeof e}function y(e){return null===e}function v(e){return"number"==typeof e}function E(e){return"string"==typeof e}function T(e){return void 0===e}function g(e){return I(e)&&"[object RegExp]"===S(e)}function I(e){return"object"==typeof e&&null!==e}function N(e){return I(e)&&"[object Date]"===S(e)}function b(e){return I(e)&&("[object Error]"===S(e)||e instanceof Error)}function _(e){return"function"==typeof e}function S(e){return Object.prototype.toString.call(e)}function O(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!o[e])if(s.test(e)){var n=process.pid;o[e]=function(){var i=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,i)}}else o[e]=function(){};return o[e]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=n(5955),t.isArray=h,t.isBoolean=m,t.isNull=y,t.isNullOrUndefined=function(e){return null==e},t.isNumber=v,t.isString=E,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=T,t.isRegExp=g,t.types.isRegExp=g,t.isObject=I,t.isDate=N,t.types.isDate=N,t.isError=b,t.types.isNativeError=b,t.isFunction=_,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(384);var D=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var e=new Date,t=[O(e.getHours()),O(e.getMinutes()),O(e.getSeconds())].join(":");return[e.getDate(),D[e.getMonth()],t].join(" ")}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",A(),t.format.apply(t,arguments))},t.inherits=n(5717),t._extend=function(e,t){if(!t||!I(t))return e;for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e};var w="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function L(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(w&&e[w]){var t;if("function"!=typeof(t=e[w]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,i=new Promise((function(e,i){t=e,n=i})),r=[],o=0;o<arguments.length;o++)r.push(arguments[o]);r.push((function(e,i){e?n(e):t(i)}));try{e.apply(this,r)}catch(e){n(e)}return i}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),w&&Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=w,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]);var i=t.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var r=this,o=function(){return i.apply(r,arguments)};e.apply(this,t).then((function(e){process.nextTick(o.bind(null,null,e))}),(function(e){process.nextTick(L.bind(null,e,o))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,i(e)),t}},6430:(e,t,n)=>{"use strict";var i=n(4029),r=n(3083),o=n(1924),s=n(7296),a=o("Object.prototype.toString"),c=n(6410)(),l="undefined"==typeof globalThis?n.g:globalThis,u=r(),p=o("String.prototype.slice"),d={},f=Object.getPrototypeOf;c&&s&&f&&i(u,(function(e){if("function"==typeof l[e]){var t=new l[e];if(Symbol.toStringTag in t){var n=f(t),i=s(n,Symbol.toStringTag);if(!i){var r=f(n);i=s(r,Symbol.toStringTag)}d[e]=i.get}}}));var h=n(5692);e.exports=function(e){return!!h(e)&&(c&&Symbol.toStringTag in e?function(e){var t=!1;return i(d,(function(n,i){if(!t)try{var r=n.call(e);r===i&&(t=r)}catch(e){}})),t}(e):p(a(e),8,-1))}},4888:(e,t,n)=>{"use strict";n.r(t),n.d(t,{URL:()=>i});let i=n(4564)},8222:()=>{},3083:(e,t,n)=>{"use strict";var i=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],r="undefined"==typeof globalThis?n.g:globalThis;e.exports=function(){for(var e=[],t=0;t<i.length;t++)"function"==typeof r[i[t]]&&(e[e.length]=i[t]);return e}},8087:(e,t,n)=>{"use strict";n.d(t,{OS:()=>c,Z:()=>l,__:()=>s});var i=n(8495),r=n(7867),o=n(850);class s extends Error{constructor(e,...t){var n,o,c;const{nodes:l,source:u,positions:p,path:d,originalError:f,extensions:h}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=d?d:void 0,this.originalError=null!=f?f:void 0,this.nodes=a(Array.isArray(l)?l:l?[l]:void 0);const m=a(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=u?u:null==m||null===(o=m[0])||void 0===o?void 0:o.source,this.positions=null!=p?p:null==m?void 0:m.map((e=>e.start)),this.locations=p&&u?p.map((e=>(0,r.k)(u,e))):null==m?void 0:m.map((e=>(0,r.k)(e.source,e.start)));const y=(0,i.y)(null==f?void 0:f.extensions)?null==f?void 0:f.extensions:void 0;this.extensions=null!==(c=null!=h?h:y)&&void 0!==c?c:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=f&&f.stack?Object.defineProperty(this,"stack",{value:f.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,s):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const t of this.nodes)t.loc&&(e+="\n\n"+(0,o.Q)(t.loc));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+(0,o.z)(this.source,t);return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function a(e){return void 0===e||0===e.length?void 0:e}function c(e){return e.toString()}function l(e){return e.toJSON()}},4181:(e,t,n)=>{"use strict";n.d(t,{y:()=>s});var i=n(5821);class r extends Error{constructor(e){super("Unexpected error value: "+(0,i.X)(e)),this.name="NonErrorThrown",this.thrownValue=e}}var o=n(8087);function s(e,t,n){var i;const s=(a=e)instanceof Error?a:new r(a);var a,c;return c=s,Array.isArray(c.path)?s:new o.__(s.message,{nodes:null!==(i=s.nodes)&&void 0!==i?i:t,source:s.source,positions:s.positions,path:n,originalError:s})}},5219:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var i=n(8087);function r(e,t,n){return new i.__(`Syntax Error: ${n}`,{source:e,positions:[t]})}},7677:(e,t,n)=>{"use strict";n.d(t,{g:()=>c,w:()=>l});var i=n(7359),r=n(398),o=n(8238),s=n(77),a=n(6422);function c(e,t,n,i,r){const o=new Map;return u(e,t,n,i,r,o,new Set),o}function l(e,t,n,i,r){const o=new Map,s=new Set;for(const a of r)a.selectionSet&&u(e,t,n,i,a.selectionSet,o,s);return o}function u(e,t,n,r,o,s,a){for(const l of o.selections)switch(l.kind){case i.h.FIELD:{if(!p(n,l))continue;const e=(c=l).alias?c.alias.value:c.name.value,t=s.get(e);void 0!==t?t.push(l):s.set(e,[l]);break}case i.h.INLINE_FRAGMENT:if(!p(n,l)||!d(e,l,r))continue;u(e,t,n,r,l.selectionSet,s,a);break;case i.h.FRAGMENT_SPREAD:{const i=l.name.value;if(a.has(i)||!p(n,l))continue;a.add(i);const o=t[i];if(!o||!d(e,o,r))continue;u(e,t,n,r,o.selectionSet,s,a);break}}var c}function p(e,t){const n=(0,a.zu)(o.QE,t,e);if(!0===(null==n?void 0:n.if))return!1;const i=(0,a.zu)(o.Yf,t,e);return!1!==(null==i?void 0:i.if)}function d(e,t,n){const i=t.typeCondition;if(!i)return!0;const o=(0,s._)(e,i);return o===n||!!(0,r.m0)(o)&&e.isSubType(o,n)}},5329:(e,t,n)=>{"use strict";n.d(t,{td:()=>b,VZ:()=>_,p$:()=>A,El:()=>$,mn:()=>k,ht:()=>g,p0:()=>I,Vm:()=>C});var i=n(7826),r=n(5821),o=n(9551),s=n(3831),a=n(8495),c=n(8659),l=n(9380),u=n(8087),p=n(4181),d=n(2380),f=n(7359),h=n(398),m=n(2433),y=n(9655),v=n(7677),E=n(6422);const T=function(e){let t;return function(e,n,i){void 0===t&&(t=new WeakMap);let r=t.get(e);void 0===r&&(r=new WeakMap,t.set(e,r));let o=r.get(n);void 0===o&&(o=new WeakMap,r.set(n,o));let s=o.get(i);return void 0===s&&(a=e,c=n,l=i,s=(0,v.w)(a.schema,a.fragments,a.variableValues,c,l),o.set(i,s)),s;var a,c,l}}();function g(e){arguments.length<2||(0,i.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,document:n,variableValues:r,rootValue:o}=e;b(t,n,r);const s=_(e);if(!("schema"in s))return{errors:s};try{const{operation:e}=s,t=S(s,e,o);return(0,c.t)(t)?t.then((e=>N(e,s.errors)),(e=>(s.errors.push(e),N(null,s.errors)))):N(t,s.errors)}catch(e){return s.errors.push(e),N(null,s.errors)}}function I(e){const t=g(e);if((0,c.t)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function N(e,t){return 0===t.length?{data:e}:{errors:t,data:e}}function b(e,t,n){t||(0,i.a)(!1,"Must provide document."),(0,y.J)(e),null==n||(0,a.y)(n)||(0,i.a)(!1,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function _(e){var t,n;const{schema:i,document:r,rootValue:o,contextValue:s,variableValues:a,operationName:c,fieldResolver:l,typeResolver:p,subscribeFieldResolver:d}=e;let h;const m=Object.create(null);for(const e of r.definitions)switch(e.kind){case f.h.OPERATION_DEFINITION:if(null==c){if(void 0!==h)return[new u.__("Must provide operation name if query contains multiple operations.")];h=e}else(null===(t=e.name)||void 0===t?void 0:t.value)===c&&(h=e);break;case f.h.FRAGMENT_DEFINITION:m[e.name.value]=e}if(!h)return null!=c?[new u.__(`Unknown operation named "${c}".`)]:[new u.__("Must provide an operation.")];const y=null!==(n=h.variableDefinitions)&&void 0!==n?n:[],v=(0,E.QF)(i,y,null!=a?a:{},{maxErrors:50});return v.errors?v.errors:{schema:i,fragments:m,rootValue:o,contextValue:s,operation:h,variableValues:v.coerced,fieldResolver:null!=l?l:$,typeResolver:null!=p?p:k,subscribeFieldResolver:null!=d?d:$,errors:[]}}function S(e,t,n){const i=e.schema.getRootType(t.operation);if(null==i)throw new u.__(`Schema is not configured to execute ${t.operation} operation.`,{nodes:t});const r=(0,v.g)(e.schema,e.fragments,e.variableValues,i,t.selectionSet),o=void 0;switch(t.operation){case d.ku.QUERY:return O(e,i,n,o,r);case d.ku.MUTATION:return function(e,t,n,i,r){return function(e,t,n){let i=Object.create(null);for(const n of e)i=(0,c.t)(i)?i.then((e=>t(e,n))):t(i,n);return i}(r.entries(),((i,[r,o])=>{const s=(0,l.Q)(undefined,r,t.name),a=D(e,t,n,o,s);return void 0===a?i:(0,c.t)(a)?a.then((e=>(i[r]=e,i))):(i[r]=a,i)}))}(e,i,n,0,r);case d.ku.SUBSCRIPTION:return O(e,i,n,o,r)}}function O(e,t,n,i,r){const o=Object.create(null);let s=!1;for(const[a,u]of r.entries()){const r=D(e,t,n,u,(0,l.Q)(i,a,t.name));void 0!==r&&(o[a]=r,(0,c.t)(r)&&(s=!0))}return s?(a=o,Promise.all(Object.values(a)).then((e=>{const t=Object.create(null);for(const[n,i]of Object.keys(a).entries())t[i]=e[n];return t}))):o;var a}function D(e,t,n,i,r){var o;const s=C(e.schema,t,i[0]);if(!s)return;const a=s.type,u=null!==(o=s.resolve)&&void 0!==o?o:e.fieldResolver,d=A(e,s,i,t,r);try{const t=u(n,(0,E.LX)(s,i[0],e.variableValues),e.contextValue,d);let o;return o=(0,c.t)(t)?t.then((t=>w(e,a,i,d,r,t))):w(e,a,i,d,r,t),(0,c.t)(o)?o.then(void 0,(t=>R((0,p.y)(t,i,(0,l.N)(r)),a,e))):o}catch(t){return R((0,p.y)(t,i,(0,l.N)(r)),a,e)}}function A(e,t,n,i,r){return{fieldName:t.name,fieldNodes:n,returnType:t.type,parentType:i,path:r,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function R(e,t,n){if((0,h.zM)(t))throw e;return n.errors.push(e),null}function w(e,t,n,i,a,d){if(d instanceof Error)throw d;if((0,h.zM)(t)){const r=w(e,t.ofType,n,i,a,d);if(null===r)throw new Error(`Cannot return null for non-nullable field ${i.parentType.name}.${i.fieldName}.`);return r}return null==d?null:(0,h.HG)(t)?function(e,t,n,i,r,o){if(!(0,s.i)(o))throw new u.__(`Expected Iterable, but did not find one for field "${i.parentType.name}.${i.fieldName}".`);const a=t.ofType;let d=!1;const f=Array.from(o,((t,o)=>{const s=(0,l.Q)(r,o,void 0);try{let r;return r=(0,c.t)(t)?t.then((t=>w(e,a,n,i,s,t))):w(e,a,n,i,s,t),(0,c.t)(r)?(d=!0,r.then(void 0,(t=>R((0,p.y)(t,n,(0,l.N)(s)),a,e)))):r}catch(t){return R((0,p.y)(t,n,(0,l.N)(s)),a,e)}}));return d?Promise.all(f):f}(e,t,n,i,a,d):(0,h.UT)(t)?function(e,t){const n=e.serialize(t);if(null==n)throw new Error(`Expected \`${(0,r.X)(e)}.serialize(${(0,r.X)(t)})\` to return non-nullable value, returned: ${(0,r.X)(n)}`);return n}(t,d):(0,h.m0)(t)?function(e,t,n,i,r,o){var s;const a=null!==(s=t.resolveType)&&void 0!==s?s:e.typeResolver,l=e.contextValue,u=a(o,l,i,t);return(0,c.t)(u)?u.then((s=>F(e,L(s,e,t,n,i,o),n,i,r,o))):F(e,L(u,e,t,n,i,o),n,i,r,o)}(e,t,n,i,a,d):(0,h.lp)(t)?F(e,t,n,i,a,d):void(0,o.k)(!1,"Cannot complete value of unexpected output type: "+(0,r.X)(t))}function L(e,t,n,i,o,s){if(null==e)throw new u.__(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${o.parentType.name}.${o.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,i);if((0,h.lp)(e))throw new u.__("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");if("string"!=typeof e)throw new u.__(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${o.parentType.name}.${o.fieldName}" with value ${(0,r.X)(s)}, received "${(0,r.X)(e)}".`);const a=t.schema.getType(e);if(null==a)throw new u.__(`Abstract type "${n.name}" was resolved to a type "${e}" that does not exist inside the schema.`,{nodes:i});if(!(0,h.lp)(a))throw new u.__(`Abstract type "${n.name}" was resolved to a non-object type "${e}".`,{nodes:i});if(!t.schema.isSubType(n,a))throw new u.__(`Runtime Object type "${a.name}" is not a possible type for "${n.name}".`,{nodes:i});return a}function F(e,t,n,i,r,o){const s=T(e,t,n);if(t.isTypeOf){const a=t.isTypeOf(o,e.contextValue,i);if((0,c.t)(a))return a.then((i=>{if(!i)throw x(t,o,n);return O(e,t,o,r,s)}));if(!a)throw x(t,o,n)}return O(e,t,o,r,s)}function x(e,t,n){return new u.__(`Expected value of type "${e.name}" but got: ${(0,r.X)(t)}.`,{nodes:n})}const k=function(e,t,n,i){if((0,a.y)(e)&&"string"==typeof e.__typename)return e.__typename;const r=n.schema.getPossibleTypes(i),o=[];for(let i=0;i<r.length;i++){const s=r[i];if(s.isTypeOf){const r=s.isTypeOf(e,t,n);if((0,c.t)(r))o[i]=r;else if(r)return s.name}}return o.length?Promise.all(o).then((e=>{for(let t=0;t<e.length;t++)if(e[t])return r[t].name})):void 0},$=function(e,t,n,i){if((0,a.y)(e)||"function"==typeof e){const r=e[i.fieldName];return"function"==typeof r?e[i.fieldName](t,n,i):r}};function C(e,t,n){const i=n.name.value;return i===m.Az.name&&e.getQueryType()===t?m.Az:i===m.tF.name&&e.getQueryType()===t?m.tF:i===m.hU.name?m.hU:t.getFields()[i]}},6422:(e,t,n)=>{"use strict";n.d(t,{LX:()=>h,QF:()=>f,zu:()=>m});var i=n(5821),r=n(3498),o=n(4244),s=n(8087),a=n(7359),c=n(3486),l=n(398),u=n(7816),p=n(77),d=n(2221);function f(e,t,n,r){const a=[],f=null==r?void 0:r.maxErrors;try{const r=function(e,t,n,r){const a={};for(const f of t){const t=f.variable.name.value,h=(0,p._)(e,f.type);if(!(0,l.j$)(h)){const e=(0,c.S)(f.type);r(new s.__(`Variable "$${t}" expected value of type "${e}" which cannot be used as an input type.`,{nodes:f.type}));continue}if(!y(n,t)){if(f.defaultValue)a[t]=(0,d.u)(f.defaultValue,h);else if((0,l.zM)(h)){const e=(0,i.X)(h);r(new s.__(`Variable "$${t}" of required type "${e}" was not provided.`,{nodes:f}))}continue}const m=n[t];if(null===m&&(0,l.zM)(h)){const e=(0,i.X)(h);r(new s.__(`Variable "$${t}" of non-null type "${e}" must not be null.`,{nodes:f}))}else a[t]=(0,u.K)(m,h,((e,n,a)=>{let c=`Variable "$${t}" got invalid value `+(0,i.X)(n);e.length>0&&(c+=` at "${t}${(0,o.F)(e)}"`),r(new s.__(c+"; "+a.message,{nodes:f,originalError:a.originalError}))}))}return a}(e,t,n,(e=>{if(null!=f&&a.length>=f)throw new s.__("Too many errors processing variables, error limit reached. Execution aborted.");a.push(e)}));if(0===a.length)return{coerced:r}}catch(e){a.push(e)}return{errors:a}}function h(e,t,n){var o;const u={},p=null!==(o=t.arguments)&&void 0!==o?o:[],f=(0,r.P)(p,(e=>e.name.value));for(const r of e.args){const e=r.name,o=r.type,p=f[e];if(!p){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.zM)(o))throw new s.__(`Argument "${e}" of required type "${(0,i.X)(o)}" was not provided.`,{nodes:t});continue}const h=p.value;let m=h.kind===a.h.NULL;if(h.kind===a.h.VARIABLE){const t=h.name.value;if(null==n||!y(n,t)){if(void 0!==r.defaultValue)u[e]=r.defaultValue;else if((0,l.zM)(o))throw new s.__(`Argument "${e}" of required type "${(0,i.X)(o)}" was provided the variable "$${t}" which was not provided a runtime value.`,{nodes:h});continue}m=null==n[t]}if(m&&(0,l.zM)(o))throw new s.__(`Argument "${e}" of non-null type "${(0,i.X)(o)}" must not be null.`,{nodes:h});const v=(0,d.u)(h,o,n);if(void 0===v)throw new s.__(`Argument "${e}" has invalid value ${(0,c.S)(h)}.`,{nodes:h});u[e]=v}return u}function m(e,t,n){var i;const r=null===(i=t.directives)||void 0===i?void 0:i.find((t=>t.name.value===e.name));if(r)return h(e,r,n)}function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},2244:(e,t,n)=>{"use strict";n.d(t,{B:()=>l,V:()=>u});var i=n(7826),r=n(8659),o=n(4275),s=n(9655),a=n(6584),c=n(5329);function l(e){return new Promise((t=>t(p(e))))}function u(e){const t=p(e);if((0,r.t)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function p(e){arguments.length<2||(0,i.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,source:n,rootValue:r,contextValue:l,variableValues:u,operationName:p,fieldResolver:d,typeResolver:f}=e,h=(0,s.F)(t);if(h.length>0)return{errors:h};let m;try{m=(0,o.Qc)(n)}catch(e){return{errors:[e]}}const y=(0,a.Gu)(t,m);return y.length>0?{errors:y}:(0,c.ht)({schema:t,document:m,rootValue:r,contextValue:l,variableValues:u,operationName:p,fieldResolver:d,typeResolver:f})}},8929:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BREAK:()=>I.$_,BreakingChangeType:()=>ot,DEFAULT_DEPRECATION_REASON:()=>c.SY,DangerousChangeType:()=>st,DirectiveLocation:()=>b.B,ExecutableDefinitionsRule:()=>B.i,FieldsOnCorrectTypeRule:()=>Q.A,FragmentsOnCompositeTypesRule:()=>K.T,GRAPHQL_MAX_INT:()=>l.HI,GRAPHQL_MIN_INT:()=>l.st,GraphQLBoolean:()=>l.EZ,GraphQLDeprecatedDirective:()=>c.fg,GraphQLDirective:()=>c.NZ,GraphQLEnumType:()=>s.mR,GraphQLError:()=>R.__,GraphQLFloat:()=>l.av,GraphQLID:()=>l.km,GraphQLIncludeDirective:()=>c.Yf,GraphQLInputObjectType:()=>s.sR,GraphQLInt:()=>l._o,GraphQLInterfaceType:()=>s.oW,GraphQLList:()=>s.p2,GraphQLNonNull:()=>s.bM,GraphQLObjectType:()=>s.h6,GraphQLScalarType:()=>s.n2,GraphQLSchema:()=>a.XO,GraphQLSkipDirective:()=>c.QE,GraphQLSpecifiedByDirective:()=>c.df,GraphQLString:()=>l.kH,GraphQLUnionType:()=>s.Gp,Kind:()=>N.h,KnownArgumentNamesRule:()=>q.e,KnownDirectivesRule:()=>Y.J,KnownFragmentNamesRule:()=>H.a,KnownTypeNamesRule:()=>X.I,Lexer:()=>v.h,Location:()=>f.Ye,LoneAnonymousOperationRule:()=>z.F,LoneSchemaDefinitionRule:()=>me.t,NoDeprecatedCustomRule:()=>M,NoFragmentCyclesRule:()=>J.H,NoSchemaIntrospectionCustomRule:()=>P,NoUndefinedVariablesRule:()=>W.$,NoUnusedFragmentsRule:()=>Z.J,NoUnusedVariablesRule:()=>ee.p,OperationTypeNode:()=>f.ku,OverlappingFieldsCanBeMergedRule:()=>te.y,PossibleFragmentSpreadsRule:()=>ne.a,PossibleTypeExtensionsRule:()=>Ne.g,ProvidedRequiredArgumentsRule:()=>ie.s,ScalarLeafsRule:()=>re.O,SchemaMetaFieldDef:()=>u.Az,SingleFieldSubscriptionsRule:()=>oe.Z,Source:()=>h.H,Token:()=>f.WU,TokenKind:()=>E.T,TypeInfo:()=>Rt.a,TypeKind:()=>u.zU,TypeMetaFieldDef:()=>u.tF,TypeNameMetaFieldDef:()=>u.hU,UniqueArgumentDefinitionNamesRule:()=>ge.L,UniqueArgumentNamesRule:()=>se.L,UniqueDirectiveNamesRule:()=>Ie.o,UniqueDirectivesPerLocationRule:()=>ae.k,UniqueEnumValueNamesRule:()=>Ee.L,UniqueFieldDefinitionNamesRule:()=>Te.y,UniqueFragmentNamesRule:()=>ce.N,UniqueInputFieldNamesRule:()=>le.P,UniqueOperationNamesRule:()=>ue.H,UniqueOperationTypesRule:()=>ye.q,UniqueTypeNamesRule:()=>ve.P,UniqueVariableNamesRule:()=>pe.H,ValidationContext:()=>V._t,ValuesOfCorrectTypeRule:()=>de.j,VariablesAreInputTypesRule:()=>fe.I,VariablesInAllowedPositionRule:()=>he.w,__Directive:()=>u.l3,__DirectiveLocation:()=>u.x2,__EnumValue:()=>u.jT,__Field:()=>u.e_,__InputValue:()=>u.XQ,__Schema:()=>u.TK,__Type:()=>u.qz,__TypeKind:()=>u.PX,assertAbstractType:()=>s.fU,assertCompositeType:()=>s.M_,assertDirective:()=>c.CO,assertEnumType:()=>s.Zu,assertEnumValueName:()=>d.g,assertInputObjectType:()=>s.U8,assertInputType:()=>s.qT,assertInterfaceType:()=>s.k2,assertLeafType:()=>s.H5,assertListType:()=>s.kS,assertName:()=>d.i,assertNamedType:()=>s.rM,assertNonNullType:()=>s.E$,assertNullableType:()=>s.i_,assertObjectType:()=>s.Z6,assertOutputType:()=>s.Gt,assertScalarType:()=>s.Pt,assertSchema:()=>a.EO,assertType:()=>s.p_,assertUnionType:()=>s.rc,assertValidName:()=>it,assertValidSchema:()=>p.J,assertWrappingType:()=>s.vX,astFromValue:()=>Me.J,buildASTSchema:()=>St.M,buildClientSchema:()=>Le,buildSchema:()=>St.I,coerceInputValue:()=>wt.K,concatAST:()=>We,createSourceEventStream:()=>C,defaultFieldResolver:()=>F.El,defaultTypeResolver:()=>F.mn,doTypesOverlap:()=>Lt.zR,execute:()=>F.ht,executeSync:()=>F.p0,extendSchema:()=>Ot.a,findBreakingChanges:()=>lt,findDangerousChanges:()=>ut,formatError:()=>R.Z,getArgumentValues:()=>k.LX,getDirectiveValues:()=>k.zu,getEnterLeaveForKind:()=>I.Eu,getIntrospectionQuery:()=>_e,getLocation:()=>m.k,getNamedType:()=>s.xC,getNullableType:()=>s.tf,getOperationAST:()=>Se,getOperationRootType:()=>Oe,getVariableValues:()=>k.QF,getVisitFn:()=>I.CK,graphql:()=>o.B,graphqlSync:()=>o.V,introspectionFromSchema:()=>De,introspectionTypes:()=>u.nL,isAbstractType:()=>s.m0,isCompositeType:()=>s.Gv,isConstValueNode:()=>_.Of,isDefinitionNode:()=>_.Ir,isDirective:()=>c.wX,isEnumType:()=>s.EM,isEqualType:()=>Lt._7,isExecutableDefinitionNode:()=>_.Wk,isInputObjectType:()=>s.hL,isInputType:()=>s.j$,isInterfaceType:()=>s.oT,isIntrospectionType:()=>u.s9,isLeafType:()=>s.UT,isListType:()=>s.HG,isNamedType:()=>s.Zs,isNonNullType:()=>s.zM,isNullableType:()=>s.zP,isObjectType:()=>s.lp,isOutputType:()=>s.SZ,isRequiredArgument:()=>s.dK,isRequiredInputField:()=>s.Wd,isScalarType:()=>s.KA,isSchema:()=>a.nN,isSelectionNode:()=>_.pO,isSpecifiedDirective:()=>c.xg,isSpecifiedScalarType:()=>l.u1,isType:()=>s.P9,isTypeDefinitionNode:()=>_.zT,isTypeExtensionNode:()=>_.D$,isTypeNode:()=>_.VB,isTypeSubTypeOf:()=>Lt.uJ,isTypeSystemDefinitionNode:()=>_.G4,isTypeSystemExtensionNode:()=>_.aU,isUnionType:()=>s.EN,isValidNameError:()=>rt,isValueNode:()=>_.nr,isWrappingType:()=>s.fw,lexicographicSortSchema:()=>xe,locatedError:()=>w.y,parse:()=>T.Qc,parseConstValue:()=>T.tl,parseType:()=>T.gZ,parseValue:()=>T.H2,print:()=>g.S,printError:()=>R.OS,printIntrospectionSchema:()=>Ue,printLocation:()=>y.Q,printSchema:()=>Pe,printSourceLocation:()=>y.z,printType:()=>Qe,resolveObjMapThunk:()=>s.WB,resolveReadonlyArrayThunk:()=>s._9,responsePathAsArray:()=>A.N,separateOperations:()=>Ze,specifiedDirectives:()=>c.V4,specifiedRules:()=>G.i,specifiedScalarTypes:()=>l.HS,stripIgnoredCharacters:()=>nt,subscribe:()=>$,syntaxError:()=>be.h,typeFromAST:()=>Dt._,validate:()=>U.Gu,validateSchema:()=>p.F,valueFromAST:()=>we.u,valueFromASTUntyped:()=>At.M,version:()=>i,versionInfo:()=>r,visit:()=>I.Vn,visitInParallel:()=>I.j1,visitWithTypeInfo:()=>Rt.y});const i="16.6.0",r=Object.freeze({major:16,minor:6,patch:0,preReleaseTag:null});var o=n(2244),s=n(398),a=n(9678),c=n(8238),l=n(3801),u=n(2433),p=n(9655),d=n(6303),f=n(2380),h=n(7926),m=n(7867),y=n(850),v=n(2105),E=n(4635),T=n(4275),g=n(3486),I=n(7304),N=n(7359),b=n(9878),_=n(5844),S=n(7826),O=n(5821);function D(e){return"function"==typeof(null==e?void 0:e[Symbol.asyncIterator])}var A=n(9380),R=n(8087),w=n(4181),L=n(7677),F=n(5329);function x(e,t){const n=e[Symbol.asyncIterator]();async function i(e){if(e.done)return e;try{return{value:await t(e.value),done:!1}}catch(e){if("function"==typeof n.return)try{await n.return()}catch(e){}throw e}}return{next:async()=>i(await n.next()),return:async()=>"function"==typeof n.return?i(await n.return()):{value:void 0,done:!0},async throw(e){if("function"==typeof n.throw)return i(await n.throw(e));throw e},[Symbol.asyncIterator](){return this}}}var k=n(6422);async function $(e){arguments.length<2||(0,S.a)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const t=await C(e);if(!D(t))return t;const n=t=>(0,F.ht)({...e,rootValue:t});return x(t,n)}async function C(...e){const t=function(e){const t=e[0];return t&&"document"in t?t:{schema:t,document:e[1],rootValue:e[2],contextValue:e[3],variableValues:e[4],operationName:e[5],subscribeFieldResolver:e[6]}}(e),{schema:n,document:i,variableValues:r}=t;(0,F.td)(n,i,r);const o=(0,F.VZ)(t);if(!("schema"in o))return{errors:o};try{const e=await async function(e){const{schema:t,fragments:n,operation:i,variableValues:r,rootValue:o}=e,s=t.getSubscriptionType();if(null==s)throw new R.__("Schema is not configured to execute subscription operation.",{nodes:i});const a=(0,L.g)(t,n,r,s,i.selectionSet),[c,l]=[...a.entries()][0],u=(0,F.Vm)(t,s,l[0]);if(!u){const e=l[0].name.value;throw new R.__(`The subscription field "${e}" is not defined.`,{nodes:l})}const p=(0,A.Q)(void 0,c,s.name),d=(0,F.p$)(e,u,l,s,p);try{var f;const t=(0,k.LX)(u,l[0],r),n=e.contextValue,i=null!==(f=u.subscribe)&&void 0!==f?f:e.subscribeFieldResolver,s=await i(o,t,n,d);if(s instanceof Error)throw s;return s}catch(e){throw(0,w.y)(e,l,(0,A.N)(p))}}(o);if(!D(e))throw new Error(`Subscription field must return Async Iterable. Received: ${(0,O.X)(e)}.`);return e}catch(e){if(e instanceof R.__)return{errors:[e]};throw e}}var j=n(9551);function M(e){return{Field(t){const n=e.getFieldDef(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=e.getParentType();null!=r||(0,j.k)(!1),e.reportError(new R.__(`The field ${r.name}.${n.name} is deprecated. ${i}`,{nodes:t}))}},Argument(t){const n=e.getArgument(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=e.getDirective();if(null!=r)e.reportError(new R.__(`Directive "@${r.name}" argument "${n.name}" is deprecated. ${i}`,{nodes:t}));else{const r=e.getParentType(),o=e.getFieldDef();null!=r&&null!=o||(0,j.k)(!1),e.reportError(new R.__(`Field "${r.name}.${o.name}" argument "${n.name}" is deprecated. ${i}`,{nodes:t}))}}},ObjectField(t){const n=(0,s.xC)(e.getParentInputType());if((0,s.hL)(n)){const i=n.getFields()[t.name.value],r=null==i?void 0:i.deprecationReason;null!=r&&e.reportError(new R.__(`The input field ${n.name}.${i.name} is deprecated. ${r}`,{nodes:t}))}},EnumValue(t){const n=e.getEnumValue(),i=null==n?void 0:n.deprecationReason;if(n&&null!=i){const r=(0,s.xC)(e.getInputType());null!=r||(0,j.k)(!1),e.reportError(new R.__(`The enum value "${r.name}.${n.name}" is deprecated. ${i}`,{nodes:t}))}}}}function P(e){return{Field(t){const n=(0,s.xC)(e.getType());n&&(0,u.s9)(n)&&e.reportError(new R.__(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}}var U=n(6584),V=n(2734),G=n(4196),B=n(8081),Q=n(8741),K=n(7143),q=n(7815),Y=n(4873),H=n(5311),X=n(5580),z=n(7898),J=n(1422),W=n(4790),Z=n(1294),ee=n(2283),te=n(4203),ne=n(3259),ie=n(1967),re=n(1954),oe=n(423),se=n(2266),ae=n(6300),ce=n(5591),le=n(2767),ue=n(2621),pe=n(1564),de=n(9831),fe=n(5972),he=n(9701),me=n(2877),ye=n(7990),ve=n(9538),Ee=n(3201),Te=n(2618),ge=n(2337),Ie=n(3274),Ne=n(4800),be=n(5219);function _e(e){const t={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,...e},n=t.descriptions?"description":"",i=t.specifiedByUrl?"specifiedByURL":"",r=t.directiveIsRepeatable?"isRepeatable":"";function o(e){return t.inputValueDeprecation?e:""}return`\n    query IntrospectionQuery {\n      __schema {\n        ${t.schemaDescription?n:""}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${n}\n          ${r}\n          locations\n          args${o("(includeDeprecated: true)")} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${n}\n      ${i}\n      fields(includeDeprecated: true) {\n        name\n        ${n}\n        args${o("(includeDeprecated: true)")} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${o("(includeDeprecated: true)")} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${n}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${n}\n      type { ...TypeRef }\n      defaultValue\n      ${o("isDeprecated")}\n      ${o("deprecationReason")}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `}function Se(e,t){let n=null;for(const r of e.definitions){var i;if(r.kind===N.h.OPERATION_DEFINITION)if(null==t){if(n)return null;n=r}else if((null===(i=r.name)||void 0===i?void 0:i.value)===t)return r}return n}function Oe(e,t){if("query"===t.operation){const n=e.getQueryType();if(!n)throw new R.__("Schema does not define the required query root type.",{nodes:t});return n}if("mutation"===t.operation){const n=e.getMutationType();if(!n)throw new R.__("Schema is not configured for mutations.",{nodes:t});return n}if("subscription"===t.operation){const n=e.getSubscriptionType();if(!n)throw new R.__("Schema is not configured for subscriptions.",{nodes:t});return n}throw new R.__("Can only have query, mutation and subscription operations.",{nodes:t})}function De(e,t){const n={specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0,...t},i=(0,T.Qc)(_e(n)),r=(0,F.p0)({schema:e,document:i});return!r.errors&&r.data||(0,j.k)(!1),r.data}var Ae=n(8495),Re=n(4950),we=n(2221);function Le(e,t){(0,Ae.y)(e)&&(0,Ae.y)(e.__schema)||(0,S.a)(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0,O.X)(e)}.`);const n=e.__schema,i=(0,Re.w)(n.types,(e=>e.name),(e=>function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case u.zU.SCALAR:return i=e,new s.n2({name:i.name,description:i.description,specifiedByURL:i.specifiedByURL});case u.zU.OBJECT:return n=e,new s.h6({name:n.name,description:n.description,interfaces:()=>v(n),fields:()=>E(n)});case u.zU.INTERFACE:return t=e,new s.oW({name:t.name,description:t.description,interfaces:()=>v(t),fields:()=>E(t)});case u.zU.UNION:return function(e){if(!e.possibleTypes){const t=(0,O.X)(e);throw new Error(`Introspection result missing possibleTypes: ${t}.`)}return new s.Gp({name:e.name,description:e.description,types:()=>e.possibleTypes.map(m)})}(e);case u.zU.ENUM:return function(e){if(!e.enumValues){const t=(0,O.X)(e);throw new Error(`Introspection result missing enumValues: ${t}.`)}return new s.mR({name:e.name,description:e.description,values:(0,Re.w)(e.enumValues,(e=>e.name),(e=>({description:e.description,deprecationReason:e.deprecationReason})))})}(e);case u.zU.INPUT_OBJECT:return function(e){if(!e.inputFields){const t=(0,O.X)(e);throw new Error(`Introspection result missing inputFields: ${t}.`)}return new s.sR({name:e.name,description:e.description,fields:()=>I(e.inputFields)})}(e)}var t,n,i;const r=(0,O.X)(e);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${r}.`)}(e)));for(const e of[...l.HS,...u.nL])i[e.name]&&(i[e.name]=e);const r=n.queryType?m(n.queryType):null,o=n.mutationType?m(n.mutationType):null,p=n.subscriptionType?m(n.subscriptionType):null,d=n.directives?n.directives.map((function(e){if(!e.args){const t=(0,O.X)(e);throw new Error(`Introspection result missing directive args: ${t}.`)}if(!e.locations){const t=(0,O.X)(e);throw new Error(`Introspection result missing directive locations: ${t}.`)}return new c.NZ({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:I(e.args)})})):[];return new a.XO({description:n.description,query:r,mutation:o,subscription:p,types:Object.values(i),directives:d,assumeValid:null==t?void 0:t.assumeValid});function f(e){if(e.kind===u.zU.LIST){const t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");return new s.p2(f(t))}if(e.kind===u.zU.NON_NULL){const t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");const n=f(t);return new s.bM((0,s.i_)(n))}return h(e)}function h(e){const t=e.name;if(!t)throw new Error(`Unknown type reference: ${(0,O.X)(e)}.`);const n=i[t];if(!n)throw new Error(`Invalid or incomplete schema, unknown type: ${t}. Ensure that a full introspection query is used in order to build a client schema.`);return n}function m(e){return(0,s.Z6)(h(e))}function y(e){return(0,s.k2)(h(e))}function v(e){if(null===e.interfaces&&e.kind===u.zU.INTERFACE)return[];if(!e.interfaces){const t=(0,O.X)(e);throw new Error(`Introspection result missing interfaces: ${t}.`)}return e.interfaces.map(y)}function E(e){if(!e.fields)throw new Error(`Introspection result missing fields: ${(0,O.X)(e)}.`);return(0,Re.w)(e.fields,(e=>e.name),g)}function g(e){const t=f(e.type);if(!(0,s.SZ)(t)){const e=(0,O.X)(t);throw new Error(`Introspection must provide output type for fields, but received: ${e}.`)}if(!e.args){const t=(0,O.X)(e);throw new Error(`Introspection result missing field args: ${t}.`)}return{description:e.description,deprecationReason:e.deprecationReason,type:t,args:I(e.args)}}function I(e){return(0,Re.w)(e,(e=>e.name),N)}function N(e){const t=f(e.type);if(!(0,s.j$)(t)){const e=(0,O.X)(t);throw new Error(`Introspection must provide input type for arguments, but received: ${e}.`)}const n=null!=e.defaultValue?(0,we.u)((0,T.H2)(e.defaultValue),t):void 0;return{description:e.description,type:t,defaultValue:n,deprecationReason:e.deprecationReason}}}var Fe=n(8224);function xe(e){const t=e.toConfig(),n=(0,Re.w)($e(t.types),(e=>e.name),(function(e){if((0,s.KA)(e)||(0,u.s9)(e))return e;if((0,s.lp)(e)){const t=e.toConfig();return new s.h6({...t,interfaces:()=>d(t.interfaces),fields:()=>p(t.fields)})}if((0,s.oT)(e)){const t=e.toConfig();return new s.oW({...t,interfaces:()=>d(t.interfaces),fields:()=>p(t.fields)})}if((0,s.EN)(e)){const t=e.toConfig();return new s.Gp({...t,types:()=>d(t.types)})}if((0,s.EM)(e)){const t=e.toConfig();return new s.mR({...t,values:ke(t.values,(e=>e))})}if((0,s.hL)(e)){const t=e.toConfig();return new s.sR({...t,fields:()=>ke(t.fields,(e=>({...e,type:i(e.type)})))})}(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}));return new a.XO({...t,types:Object.values(n),directives:$e(t.directives).map((function(e){const t=e.toConfig();return new c.NZ({...t,locations:Ce(t.locations,(e=>e)),args:l(t.args)})})),query:o(t.query),mutation:o(t.mutation),subscription:o(t.subscription)});function i(e){return(0,s.HG)(e)?new s.p2(i(e.ofType)):(0,s.zM)(e)?new s.bM(i(e.ofType)):r(e)}function r(e){return n[e.name]}function o(e){return e&&r(e)}function l(e){return ke(e,(e=>({...e,type:i(e.type)})))}function p(e){return ke(e,(e=>({...e,type:i(e.type),args:e.args&&l(e.args)})))}function d(e){return $e(e).map(r)}}function ke(e,t){const n=Object.create(null);for(const i of Object.keys(e).sort(Fe.K))n[i]=t(e[i]);return n}function $e(e){return Ce(e,(e=>e.name))}function Ce(e,t){return e.slice().sort(((e,n)=>{const i=t(e),r=t(n);return(0,Fe.K)(i,r)}))}var je=n(7392),Me=n(8631);function Pe(e){return Ge(e,(e=>!(0,c.xg)(e)),Ve)}function Ue(e){return Ge(e,c.xg,u.s9)}function Ve(e){return!(0,l.u1)(e)&&!(0,u.s9)(e)}function Ge(e,t,n){const i=e.getDirectives().filter(t),r=Object.values(e.getTypeMap()).filter(n);return[Be(e),...i.map((e=>function(e){return Je(e)+"directive @"+e.name+He(e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}(e))),...r.map((e=>Qe(e)))].filter(Boolean).join("\n\n")}function Be(e){if(null==e.description&&function(e){const t=e.getQueryType();if(t&&"Query"!==t.name)return!1;const n=e.getMutationType();if(n&&"Mutation"!==n.name)return!1;const i=e.getSubscriptionType();return!i||"Subscription"===i.name}(e))return;const t=[],n=e.getQueryType();n&&t.push(`  query: ${n.name}`);const i=e.getMutationType();i&&t.push(`  mutation: ${i.name}`);const r=e.getSubscriptionType();return r&&t.push(`  subscription: ${r.name}`),Je(e)+`schema {\n${t.join("\n")}\n}`}function Qe(e){return(0,s.KA)(e)?function(e){return Je(e)+`scalar ${e.name}`+(null==(t=e).specifiedByURL?"":` @specifiedBy(url: ${(0,g.S)({kind:N.h.STRING,value:t.specifiedByURL})})`);var t}(e):(0,s.lp)(e)?function(e){return Je(e)+`type ${e.name}`+Ke(e)+qe(e)}(e):(0,s.oT)(e)?function(e){return Je(e)+`interface ${e.name}`+Ke(e)+qe(e)}(e):(0,s.EN)(e)?function(e){const t=e.getTypes(),n=t.length?" = "+t.join(" | "):"";return Je(e)+"union "+e.name+n}(e):(0,s.EM)(e)?function(e){const t=e.getValues().map(((e,t)=>Je(e,"  ",!t)+"  "+e.name+ze(e.deprecationReason)));return Je(e)+`enum ${e.name}`+Ye(t)}(e):(0,s.hL)(e)?function(e){const t=Object.values(e.getFields()).map(((e,t)=>Je(e,"  ",!t)+"  "+Xe(e)));return Je(e)+`input ${e.name}`+Ye(t)}(e):void(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}function Ke(e){const t=e.getInterfaces();return t.length?" implements "+t.map((e=>e.name)).join(" & "):""}function qe(e){return Ye(Object.values(e.getFields()).map(((e,t)=>Je(e,"  ",!t)+"  "+e.name+He(e.args,"  ")+": "+String(e.type)+ze(e.deprecationReason))))}function Ye(e){return 0!==e.length?" {\n"+e.join("\n")+"\n}":""}function He(e,t=""){return 0===e.length?"":e.every((e=>!e.description))?"("+e.map(Xe).join(", ")+")":"(\n"+e.map(((e,n)=>Je(e,"  "+t,!n)+"  "+t+Xe(e))).join("\n")+"\n"+t+")"}function Xe(e){const t=(0,Me.J)(e.defaultValue,e.type);let n=e.name+": "+String(e.type);return t&&(n+=` = ${(0,g.S)(t)}`),n+ze(e.deprecationReason)}function ze(e){return null==e?"":e!==c.SY?` @deprecated(reason: ${(0,g.S)({kind:N.h.STRING,value:e})})`:" @deprecated"}function Je(e,t="",n=!0){const{description:i}=e;return null==i?"":(t&&!n?"\n"+t:t)+(0,g.S)({kind:N.h.STRING,value:i,block:(0,je.MZ)(i)}).replace(/\n/g,"\n"+t)+"\n"}function We(e){const t=[];for(const n of e)t.push(...n.definitions);return{kind:N.h.DOCUMENT,definitions:t}}function Ze(e){const t=[],n=Object.create(null);for(const i of e.definitions)switch(i.kind){case N.h.OPERATION_DEFINITION:t.push(i);break;case N.h.FRAGMENT_DEFINITION:n[i.name.value]=tt(i.selectionSet)}const i=Object.create(null);for(const r of t){const t=new Set;for(const e of tt(r.selectionSet))et(t,n,e);i[r.name?r.name.value:""]={kind:N.h.DOCUMENT,definitions:e.definitions.filter((e=>e===r||e.kind===N.h.FRAGMENT_DEFINITION&&t.has(e.name.value)))}}return i}function et(e,t,n){if(!e.has(n)){e.add(n);const i=t[n];if(void 0!==i)for(const n of i)et(e,t,n)}}function tt(e){const t=[];return(0,I.Vn)(e,{FragmentSpread(e){t.push(e.name.value)}}),t}function nt(e){const t=(0,h.T)(e)?e:new h.H(e),n=t.body,i=new v.h(t);let r="",o=!1;for(;i.advance().kind!==E.T.EOF;){const e=i.token,t=e.kind,s=!(0,v.u)(e.kind);o&&(s||e.kind===E.T.SPREAD)&&(r+=" ");const a=n.slice(e.start,e.end);t===E.T.BLOCK_STRING?r+=(0,je.LZ)(e.value,{minimize:!0}):r+=a,o=s}return r}function it(e){const t=rt(e);if(t)throw t;return e}function rt(e){if("string"==typeof e||(0,S.a)(!1,"Expected name to be a string."),e.startsWith("__"))return new R.__(`Name "${e}" must not begin with "__", which is reserved by GraphQL introspection.`);try{(0,d.i)(e)}catch(e){return e}}var ot,st,at=n(3498),ct=n(8360);function lt(e,t){return pt(e,t).filter((e=>e.type in ot))}function ut(e,t){return pt(e,t).filter((e=>e.type in st))}function pt(e,t){return[...ft(e,t),...dt(e,t)]}function dt(e,t){const n=[],i=_t(e.getDirectives(),t.getDirectives());for(const e of i.removed)n.push({type:ot.DIRECTIVE_REMOVED,description:`${e.name} was removed.`});for(const[e,t]of i.persisted){const i=_t(e.args,t.args);for(const t of i.added)(0,s.dK)(t)&&n.push({type:ot.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${t.name} on directive ${e.name} was added.`});for(const t of i.removed)n.push({type:ot.DIRECTIVE_ARG_REMOVED,description:`${t.name} was removed from ${e.name}.`});e.isRepeatable&&!t.isRepeatable&&n.push({type:ot.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${e.name}.`});for(const i of e.locations)t.locations.includes(i)||n.push({type:ot.DIRECTIVE_LOCATION_REMOVED,description:`${i} was removed from ${e.name}.`})}return n}function ft(e,t){const n=[],i=_t(Object.values(e.getTypeMap()),Object.values(t.getTypeMap()));for(const e of i.removed)n.push({type:ot.TYPE_REMOVED,description:(0,l.u1)(e)?`Standard scalar ${e.name} was removed because it is not referenced anymore.`:`${e.name} was removed.`});for(const[e,t]of i.persisted)(0,s.EM)(e)&&(0,s.EM)(t)?n.push(...yt(e,t)):(0,s.EN)(e)&&(0,s.EN)(t)?n.push(...mt(e,t)):(0,s.hL)(e)&&(0,s.hL)(t)?n.push(...ht(e,t)):(0,s.lp)(e)&&(0,s.lp)(t)||(0,s.oT)(e)&&(0,s.oT)(t)?n.push(...Et(e,t),...vt(e,t)):e.constructor!==t.constructor&&n.push({type:ot.TYPE_CHANGED_KIND,description:`${e.name} changed from ${Nt(e)} to ${Nt(t)}.`});return n}function ht(e,t){const n=[],i=_t(Object.values(e.getFields()),Object.values(t.getFields()));for(const t of i.added)(0,s.Wd)(t)?n.push({type:ot.REQUIRED_INPUT_FIELD_ADDED,description:`A required field ${t.name} on input type ${e.name} was added.`}):n.push({type:st.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${t.name} on input type ${e.name} was added.`});for(const t of i.removed)n.push({type:ot.FIELD_REMOVED,description:`${e.name}.${t.name} was removed.`});for(const[t,r]of i.persisted)It(t.type,r.type)||n.push({type:ot.FIELD_CHANGED_KIND,description:`${e.name}.${t.name} changed type from ${String(t.type)} to ${String(r.type)}.`});return n}function mt(e,t){const n=[],i=_t(e.getTypes(),t.getTypes());for(const t of i.added)n.push({type:st.TYPE_ADDED_TO_UNION,description:`${t.name} was added to union type ${e.name}.`});for(const t of i.removed)n.push({type:ot.TYPE_REMOVED_FROM_UNION,description:`${t.name} was removed from union type ${e.name}.`});return n}function yt(e,t){const n=[],i=_t(e.getValues(),t.getValues());for(const t of i.added)n.push({type:st.VALUE_ADDED_TO_ENUM,description:`${t.name} was added to enum type ${e.name}.`});for(const t of i.removed)n.push({type:ot.VALUE_REMOVED_FROM_ENUM,description:`${t.name} was removed from enum type ${e.name}.`});return n}function vt(e,t){const n=[],i=_t(e.getInterfaces(),t.getInterfaces());for(const t of i.added)n.push({type:st.IMPLEMENTED_INTERFACE_ADDED,description:`${t.name} added to interfaces implemented by ${e.name}.`});for(const t of i.removed)n.push({type:ot.IMPLEMENTED_INTERFACE_REMOVED,description:`${e.name} no longer implements interface ${t.name}.`});return n}function Et(e,t){const n=[],i=_t(Object.values(e.getFields()),Object.values(t.getFields()));for(const t of i.removed)n.push({type:ot.FIELD_REMOVED,description:`${e.name}.${t.name} was removed.`});for(const[t,r]of i.persisted)n.push(...Tt(e,t,r)),gt(t.type,r.type)||n.push({type:ot.FIELD_CHANGED_KIND,description:`${e.name}.${t.name} changed type from ${String(t.type)} to ${String(r.type)}.`});return n}function Tt(e,t,n){const i=[],r=_t(t.args,n.args);for(const n of r.removed)i.push({type:ot.ARG_REMOVED,description:`${e.name}.${t.name} arg ${n.name} was removed.`});for(const[n,o]of r.persisted)if(It(n.type,o.type)){if(void 0!==n.defaultValue)if(void 0===o.defaultValue)i.push({type:st.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${n.name} defaultValue was removed.`});else{const r=bt(n.defaultValue,n.type),s=bt(o.defaultValue,o.type);r!==s&&i.push({type:st.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${n.name} has changed defaultValue from ${r} to ${s}.`})}}else i.push({type:ot.ARG_CHANGED_KIND,description:`${e.name}.${t.name} arg ${n.name} has changed type from ${String(n.type)} to ${String(o.type)}.`});for(const n of r.added)(0,s.dK)(n)?i.push({type:ot.REQUIRED_ARG_ADDED,description:`A required arg ${n.name} on ${e.name}.${t.name} was added.`}):i.push({type:st.OPTIONAL_ARG_ADDED,description:`An optional arg ${n.name} on ${e.name}.${t.name} was added.`});return i}function gt(e,t){return(0,s.HG)(e)?(0,s.HG)(t)&&gt(e.ofType,t.ofType)||(0,s.zM)(t)&&gt(e,t.ofType):(0,s.zM)(e)?(0,s.zM)(t)&&gt(e.ofType,t.ofType):(0,s.Zs)(t)&&e.name===t.name||(0,s.zM)(t)&&gt(e,t.ofType)}function It(e,t){return(0,s.HG)(e)?(0,s.HG)(t)&&It(e.ofType,t.ofType):(0,s.zM)(e)?(0,s.zM)(t)&&It(e.ofType,t.ofType)||!(0,s.zM)(t)&&It(e.ofType,t):(0,s.Zs)(t)&&e.name===t.name}function Nt(e){return(0,s.KA)(e)?"a Scalar type":(0,s.lp)(e)?"an Object type":(0,s.oT)(e)?"an Interface type":(0,s.EN)(e)?"a Union type":(0,s.EM)(e)?"an Enum type":(0,s.hL)(e)?"an Input type":void(0,j.k)(!1,"Unexpected type: "+(0,O.X)(e))}function bt(e,t){const n=(0,Me.J)(e,t);return null!=n||(0,j.k)(!1),(0,g.S)((0,ct.n)(n))}function _t(e,t){const n=[],i=[],r=[],o=(0,at.P)(e,(({name:e})=>e)),s=(0,at.P)(t,(({name:e})=>e));for(const t of e){const e=s[t.name];void 0===e?i.push(t):r.push([t,e])}for(const e of t)void 0===o[e.name]&&n.push(e);return{added:n,persisted:r,removed:i}}!function(e){e.TYPE_REMOVED="TYPE_REMOVED",e.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND",e.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION",e.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM",e.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED",e.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED",e.FIELD_REMOVED="FIELD_REMOVED",e.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND",e.REQUIRED_ARG_ADDED="REQUIRED_ARG_ADDED",e.ARG_REMOVED="ARG_REMOVED",e.ARG_CHANGED_KIND="ARG_CHANGED_KIND",e.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED",e.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED",e.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED",e.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED",e.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"}(ot||(ot={})),function(e){e.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM",e.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION",e.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED",e.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED",e.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED",e.ARG_DEFAULT_VALUE_CHANGE="ARG_DEFAULT_VALUE_CHANGE"}(st||(st={}));var St=n(6535),Ot=n(9557),Dt=n(77),At=n(2319),Rt=n(2676),wt=n(7816),Lt=n(316)},9380:(e,t,n)=>{"use strict";function i(e,t,n){return{prev:e,key:t,typename:n}}function r(e){const t=[];let n=e;for(;n;)t.push(n.key),n=n.prev;return t.reverse()}n.d(t,{N:()=>r,Q:()=>i})},7826:(e,t,n)=>{"use strict";function i(e,t){if(!Boolean(e))throw new Error(t)}n.d(t,{a:()=>i})},3177:(e,t,n)=>{"use strict";function i(e,t){const[n,i]=t?[e,t]:[void 0,e];let r=" Did you mean ";n&&(r+=n+" ");const o=i.map((e=>`"${e}"`));switch(o.length){case 0:return"";case 1:return r+o[0]+"?";case 2:return r+o[0]+" or "+o[1]+"?"}const s=o.slice(0,5),a=s.pop();return r+s.join(", ")+", or "+a+"?"}n.d(t,{l:()=>i})},3231:(e,t,n)=>{"use strict";function i(e,t){const n=new Map;for(const i of e){const e=t(i),r=n.get(e);void 0===r?n.set(e,[i]):r.push(i)}return n}n.d(t,{v:()=>i})},5821:(e,t,n)=>{"use strict";function i(e){return r(e,[])}function r(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const n=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:r(t,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const n=Math.min(10,e.length),i=e.length-n,o=[];for(let i=0;i<n;++i)o.push(r(e[i],t));return 1===i?o.push("... 1 more item"):i>1&&o.push(`... ${i} more items`),"["+o.join(", ")+"]"}(e,n);return function(e,t){const n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const i=n.map((([e,n])=>e+": "+r(n,t)));return"{ "+i.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}n.d(t,{X:()=>i})},8306:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});const i=function(e,t){return e instanceof t}},9551:(e,t,n)=>{"use strict";function i(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}n.d(t,{k:()=>i})},3831:(e,t,n)=>{"use strict";function i(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}n.d(t,{i:()=>i})},8495:(e,t,n)=>{"use strict";function i(e){return"object"==typeof e&&null!==e}n.d(t,{y:()=>i})},8659:(e,t,n)=>{"use strict";function i(e){return"function"==typeof(null==e?void 0:e.then)}n.d(t,{t:()=>i})},3498:(e,t,n)=>{"use strict";function i(e,t){const n=Object.create(null);for(const i of e)n[t(i)]=i;return n}n.d(t,{P:()=>i})},4950:(e,t,n)=>{"use strict";function i(e,t,n){const i=Object.create(null);for(const r of e)i[t(r)]=n(r);return i}n.d(t,{w:()=>i})},5723:(e,t,n)=>{"use strict";function i(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}n.d(t,{j:()=>i})},8224:(e,t,n)=>{"use strict";function i(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let s=e.charCodeAt(n),a=t.charCodeAt(i);if(o(s)&&o(a)){let c=0;do{++n,c=10*c+s-r,s=e.charCodeAt(n)}while(o(s)&&c>0);let l=0;do{++i,l=10*l+a-r,a=t.charCodeAt(i)}while(o(a)&&l>0);if(c<l)return-1;if(c>l)return 1}else{if(s<a)return-1;if(s>a)return 1;++n,++i}}return e.length-t.length}n.d(t,{K:()=>i});const r=48;function o(e){return!isNaN(e)&&r<=e&&e<=57}},4244:(e,t,n)=>{"use strict";function i(e){return e.map((e=>"number"==typeof e?"["+e.toString()+"]":"."+e)).join("")}n.d(t,{F:()=>i})},3294:(e,t,n)=>{"use strict";n.d(t,{D:()=>r});var i=n(8224);function r(e,t){const n=Object.create(null),r=new o(e),s=Math.floor(.4*e.length)+1;for(const e of t){const t=r.measure(e,s);void 0!==t&&(n[e]=t)}return Object.keys(n).sort(((e,t)=>{const r=n[e]-n[t];return 0!==r?r:(0,i.K)(e,t)}))}class o{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=s(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;const n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=s(n),r=this._inputArray;if(i.length<r.length){const e=i;i=r,r=e}const o=i.length,a=r.length;if(o-a>t)return;const c=this._rows;for(let e=0;e<=a;e++)c[0][e]=e;for(let e=1;e<=o;e++){const n=c[(e-1)%3],o=c[e%3];let s=o[0]=e;for(let t=1;t<=a;t++){const a=i[e-1]===r[t-1]?0:1;let l=Math.min(n[t]+1,o[t-1]+1,n[t-1]+a);if(e>1&&t>1&&i[e-1]===r[t-2]&&i[e-2]===r[t-1]){const n=c[(e-2)%3][t-2];l=Math.min(l,n+1)}l<s&&(s=l),o[t]=l}if(s>t)return}const l=c[o%3][a];return l<=t?l:void 0}}function s(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}},8824:(e,t,n)=>{"use strict";function i(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}n.d(t,{u:()=>i})},2380:(e,t,n)=>{"use strict";n.d(t,{UG:()=>a,WU:()=>r,Ye:()=>i,h8:()=>o,ku:()=>c});class i{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class r{constructor(e,t,n,i,r,o){this.kind=e,this.start=t,this.end=n,this.line=i,this.column=r,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},s=new Set(Object.keys(o));function a(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&s.has(t)}var c;!function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(c||(c={}))},7392:(e,t,n)=>{"use strict";n.d(t,{LZ:()=>a,MZ:()=>s,wv:()=>r});var i=n(8297);function r(e){var t;let n=Number.MAX_SAFE_INTEGER,i=null,r=-1;for(let t=0;t<e.length;++t){var s;const a=e[t],c=o(a);c!==a.length&&(i=null!==(s=i)&&void 0!==s?s:t,r=t,0!==t&&c<n&&(n=c))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=i)&&void 0!==t?t:0,r+1)}function o(e){let t=0;for(;t<e.length&&(0,i.FD)(e.charCodeAt(t));)++t;return t}function s(e){if(""===e)return!0;let t=!0,n=!1,i=!0,r=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 13:return!1;case 10:if(t&&!r)return!1;r=!0,t=!0,n=!1;break;case 9:case 32:n||(n=t);break;default:i&&(i=n),t=!1}return!(t||i&&r)}function a(e,t){const n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),o=1===r.length,s=r.length>1&&r.slice(1).every((e=>0===e.length||(0,i.FD)(e.charCodeAt(0)))),a=n.endsWith('\\"""'),c=e.endsWith('"')&&!a,l=e.endsWith("\\"),u=c||l,p=!(null!=t&&t.minimize)&&(!o||e.length>70||u||s||a);let d="";const f=o&&(0,i.FD)(e.charCodeAt(0));return(p&&!f||s)&&(d+="\n"),d+=n,(p||u)&&(d+="\n"),'"""'+d+'"""'}},8297:(e,t,n)=>{"use strict";function i(e){return 9===e||32===e}function r(e){return e>=48&&e<=57}function o(e){return e>=97&&e<=122||e>=65&&e<=90}function s(e){return o(e)||95===e}function a(e){return o(e)||r(e)||95===e}n.d(t,{FD:()=>i,HQ:()=>a,LQ:()=>s,X1:()=>r})},9878:(e,t,n)=>{"use strict";var i;n.d(t,{B:()=>i}),function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(i||(i={}))},7359:(e,t,n)=>{"use strict";var i;n.d(t,{h:()=>i}),function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(i||(i={}))},2105:(e,t,n)=>{"use strict";n.d(t,{h:()=>c,u:()=>l});var i=n(5219),r=n(2380),o=n(7392),s=n(8297),a=n(4635);class c{constructor(e){const t=new r.WU(a.T.SOF,0,0,0,0);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let e=this.token;if(e.kind!==a.T.EOF)do{if(e.next)e=e.next;else{const t=y(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===a.T.COMMENT);return e}}function l(e){return e===a.T.BANG||e===a.T.DOLLAR||e===a.T.AMP||e===a.T.PAREN_L||e===a.T.PAREN_R||e===a.T.SPREAD||e===a.T.COLON||e===a.T.EQUALS||e===a.T.AT||e===a.T.BRACKET_L||e===a.T.BRACKET_R||e===a.T.BRACE_L||e===a.T.PIPE||e===a.T.BRACE_R}function u(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function p(e,t){return d(e.charCodeAt(t))&&f(e.charCodeAt(t+1))}function d(e){return e>=55296&&e<=56319}function f(e){return e>=56320&&e<=57343}function h(e,t){const n=e.source.body.codePointAt(t);if(void 0===n)return a.T.EOF;if(n>=32&&n<=126){const e=String.fromCodePoint(n);return'"'===e?"'\"'":`"${e}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function m(e,t,n,i,o){const s=e.line,a=1+n-e.lineStart;return new r.WU(t,n,i,s,a,o)}function y(e,t){const n=e.source.body,r=n.length;let o=t;for(;o<r;){const t=n.charCodeAt(o);switch(t){case 65279:case 9:case 32:case 44:++o;continue;case 10:++o,++e.line,e.lineStart=o;continue;case 13:10===n.charCodeAt(o+1)?o+=2:++o,++e.line,e.lineStart=o;continue;case 35:return v(e,o);case 33:return m(e,a.T.BANG,o,o+1);case 36:return m(e,a.T.DOLLAR,o,o+1);case 38:return m(e,a.T.AMP,o,o+1);case 40:return m(e,a.T.PAREN_L,o,o+1);case 41:return m(e,a.T.PAREN_R,o,o+1);case 46:if(46===n.charCodeAt(o+1)&&46===n.charCodeAt(o+2))return m(e,a.T.SPREAD,o,o+3);break;case 58:return m(e,a.T.COLON,o,o+1);case 61:return m(e,a.T.EQUALS,o,o+1);case 64:return m(e,a.T.AT,o,o+1);case 91:return m(e,a.T.BRACKET_L,o,o+1);case 93:return m(e,a.T.BRACKET_R,o,o+1);case 123:return m(e,a.T.BRACE_L,o,o+1);case 124:return m(e,a.T.PIPE,o,o+1);case 125:return m(e,a.T.BRACE_R,o,o+1);case 34:return 34===n.charCodeAt(o+1)&&34===n.charCodeAt(o+2)?O(e,o):g(e,o)}if((0,s.X1)(t)||45===t)return E(e,o,t);if((0,s.LQ)(t))return D(e,o);throw(0,i.h)(e.source,o,39===t?"Unexpected single quote character ('), did you mean to use a double quote (\")?":u(t)||p(n,o)?`Unexpected character: ${h(e,o)}.`:`Invalid character: ${h(e,o)}.`)}return m(e,a.T.EOF,r,r)}function v(e,t){const n=e.source.body,i=n.length;let r=t+1;for(;r<i;){const e=n.charCodeAt(r);if(10===e||13===e)break;if(u(e))++r;else{if(!p(n,r))break;r+=2}}return m(e,a.T.COMMENT,t,r,n.slice(t+1,r))}function E(e,t,n){const r=e.source.body;let o=t,c=n,l=!1;if(45===c&&(c=r.charCodeAt(++o)),48===c){if(c=r.charCodeAt(++o),(0,s.X1)(c))throw(0,i.h)(e.source,o,`Invalid number, unexpected digit after 0: ${h(e,o)}.`)}else o=T(e,o,c),c=r.charCodeAt(o);if(46===c&&(l=!0,c=r.charCodeAt(++o),o=T(e,o,c),c=r.charCodeAt(o)),69!==c&&101!==c||(l=!0,c=r.charCodeAt(++o),43!==c&&45!==c||(c=r.charCodeAt(++o)),o=T(e,o,c),c=r.charCodeAt(o)),46===c||(0,s.LQ)(c))throw(0,i.h)(e.source,o,`Invalid number, expected digit but got: ${h(e,o)}.`);return m(e,l?a.T.FLOAT:a.T.INT,t,o,r.slice(t,o))}function T(e,t,n){if(!(0,s.X1)(n))throw(0,i.h)(e.source,t,`Invalid number, expected digit but got: ${h(e,t)}.`);const r=e.source.body;let o=t+1;for(;(0,s.X1)(r.charCodeAt(o));)++o;return o}function g(e,t){const n=e.source.body,r=n.length;let o=t+1,s=o,c="";for(;o<r;){const r=n.charCodeAt(o);if(34===r)return c+=n.slice(s,o),m(e,a.T.STRING,t,o+1,c);if(92!==r){if(10===r||13===r)break;if(u(r))++o;else{if(!p(n,o))throw(0,i.h)(e.source,o,`Invalid character within String: ${h(e,o)}.`);o+=2}}else{c+=n.slice(s,o);const t=117===n.charCodeAt(o+1)?123===n.charCodeAt(o+2)?I(e,o):N(e,o):S(e,o);c+=t.value,o+=t.size,s=o}}throw(0,i.h)(e.source,o,"Unterminated string.")}function I(e,t){const n=e.source.body;let r=0,o=3;for(;o<12;){const e=n.charCodeAt(t+o++);if(125===e){if(o<5||!u(r))break;return{value:String.fromCodePoint(r),size:o}}if(r=r<<4|_(e),r<0)break}throw(0,i.h)(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+o)}".`)}function N(e,t){const n=e.source.body,r=b(n,t+2);if(u(r))return{value:String.fromCodePoint(r),size:6};if(d(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){const e=b(n,t+8);if(f(e))return{value:String.fromCodePoint(r,e),size:12}}throw(0,i.h)(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function b(e,t){return _(e.charCodeAt(t))<<12|_(e.charCodeAt(t+1))<<8|_(e.charCodeAt(t+2))<<4|_(e.charCodeAt(t+3))}function _(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function S(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw(0,i.h)(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function O(e,t){const n=e.source.body,r=n.length;let s=e.lineStart,c=t+3,l=c,d="";const f=[];for(;c<r;){const r=n.charCodeAt(c);if(34===r&&34===n.charCodeAt(c+1)&&34===n.charCodeAt(c+2)){d+=n.slice(l,c),f.push(d);const i=m(e,a.T.BLOCK_STRING,t,c+3,(0,o.wv)(f).join("\n"));return e.line+=f.length-1,e.lineStart=s,i}if(92!==r||34!==n.charCodeAt(c+1)||34!==n.charCodeAt(c+2)||34!==n.charCodeAt(c+3))if(10!==r&&13!==r)if(u(r))++c;else{if(!p(n,c))throw(0,i.h)(e.source,c,`Invalid character within String: ${h(e,c)}.`);c+=2}else d+=n.slice(l,c),f.push(d),13===r&&10===n.charCodeAt(c+1)?c+=2:++c,d="",l=c,s=c;else d+=n.slice(l,c),l=c+1,c+=4}throw(0,i.h)(e.source,c,"Unterminated string.")}function D(e,t){const n=e.source.body,i=n.length;let r=t+1;for(;r<i;){const e=n.charCodeAt(r);if(!(0,s.HQ)(e))break;++r}return m(e,a.T.NAME,t,r,n.slice(t,r))}},7867:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var i=n(9551);const r=/\r\n|[\n\r]/g;function o(e,t){let n=0,o=1;for(const s of e.body.matchAll(r)){if("number"==typeof s.index||(0,i.k)(!1),s.index>=t)break;n=s.index+s[0].length,o+=1}return{line:o,column:t+1-n}}},4275:(e,t,n)=>{"use strict";n.d(t,{H2:()=>p,Qc:()=>u,gZ:()=>f,tl:()=>d});var i=n(5219),r=n(2380),o=n(9878),s=n(7359),a=n(2105),c=n(7926),l=n(4635);function u(e,t){return new h(e,t).parseDocument()}function p(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseValueLiteral(!1);return n.expectToken(l.T.EOF),i}function d(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseConstValueLiteral();return n.expectToken(l.T.EOF),i}function f(e,t){const n=new h(e,t);n.expectToken(l.T.SOF);const i=n.parseTypeReference();return n.expectToken(l.T.EOF),i}class h{constructor(e,t={}){const n=(0,c.T)(e)?e:new c.H(e);this._lexer=new a.h(n),this._options=t,this._tokenCounter=0}parseName(){const e=this.expectToken(l.T.NAME);return this.node(e,{kind:s.h.NAME,value:e.value})}parseDocument(){return this.node(this._lexer.token,{kind:s.h.DOCUMENT,definitions:this.many(l.T.SOF,this.parseDefinition,l.T.EOF)})}parseDefinition(){if(this.peek(l.T.BRACE_L))return this.parseOperationDefinition();const e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===l.T.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw(0,i.h)(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}parseOperationDefinition(){const e=this._lexer.token;if(this.peek(l.T.BRACE_L))return this.node(e,{kind:s.h.OPERATION_DEFINITION,operation:r.ku.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const t=this.parseOperationType();let n;return this.peek(l.T.NAME)&&(n=this.parseName()),this.node(e,{kind:s.h.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const e=this.expectToken(l.T.NAME);switch(e.value){case"query":return r.ku.QUERY;case"mutation":return r.ku.MUTATION;case"subscription":return r.ku.SUBSCRIPTION}throw this.unexpected(e)}parseVariableDefinitions(){return this.optionalMany(l.T.PAREN_L,this.parseVariableDefinition,l.T.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:s.h.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(l.T.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(l.T.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const e=this._lexer.token;return this.expectToken(l.T.DOLLAR),this.node(e,{kind:s.h.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:s.h.SELECTION_SET,selections:this.many(l.T.BRACE_L,this.parseSelection,l.T.BRACE_R)})}parseSelection(){return this.peek(l.T.SPREAD)?this.parseFragment():this.parseField()}parseField(){const e=this._lexer.token,t=this.parseName();let n,i;return this.expectOptionalToken(l.T.COLON)?(n=t,i=this.parseName()):i=t,this.node(e,{kind:s.h.FIELD,alias:n,name:i,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(l.T.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(e){const t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(l.T.PAREN_L,t,l.T.PAREN_R)}parseArgument(e=!1){const t=this._lexer.token,n=this.parseName();return this.expectToken(l.T.COLON),this.node(t,{kind:s.h.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const e=this._lexer.token;this.expectToken(l.T.SPREAD);const t=this.expectOptionalKeyword("on");return!t&&this.peek(l.T.NAME)?this.node(e,{kind:s.h.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:s.h.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:s.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:s.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(e){const t=this._lexer.token;switch(t.kind){case l.T.BRACKET_L:return this.parseList(e);case l.T.BRACE_L:return this.parseObject(e);case l.T.INT:return this.advanceLexer(),this.node(t,{kind:s.h.INT,value:t.value});case l.T.FLOAT:return this.advanceLexer(),this.node(t,{kind:s.h.FLOAT,value:t.value});case l.T.STRING:case l.T.BLOCK_STRING:return this.parseStringLiteral();case l.T.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:s.h.BOOLEAN,value:!0});case"false":return this.node(t,{kind:s.h.BOOLEAN,value:!1});case"null":return this.node(t,{kind:s.h.NULL});default:return this.node(t,{kind:s.h.ENUM,value:t.value})}case l.T.DOLLAR:if(e){if(this.expectToken(l.T.DOLLAR),this._lexer.token.kind===l.T.NAME){const e=this._lexer.token.value;throw(0,i.h)(this._lexer.source,t.start,`Unexpected variable "$${e}" in constant value.`)}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:s.h.STRING,value:e.value,block:e.kind===l.T.BLOCK_STRING})}parseList(e){return this.node(this._lexer.token,{kind:s.h.LIST,values:this.any(l.T.BRACKET_L,(()=>this.parseValueLiteral(e)),l.T.BRACKET_R)})}parseObject(e){return this.node(this._lexer.token,{kind:s.h.OBJECT,fields:this.any(l.T.BRACE_L,(()=>this.parseObjectField(e)),l.T.BRACE_R)})}parseObjectField(e){const t=this._lexer.token,n=this.parseName();return this.expectToken(l.T.COLON),this.node(t,{kind:s.h.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}parseDirectives(e){const t=[];for(;this.peek(l.T.AT);)t.push(this.parseDirective(e));return t}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(e){const t=this._lexer.token;return this.expectToken(l.T.AT),this.node(t,{kind:s.h.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}parseTypeReference(){const e=this._lexer.token;let t;if(this.expectOptionalToken(l.T.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(l.T.BRACKET_R),t=this.node(e,{kind:s.h.LIST_TYPE,type:n})}else t=this.parseNamedType();return this.expectOptionalToken(l.T.BANG)?this.node(e,{kind:s.h.NON_NULL_TYPE,type:t}):t}parseNamedType(){return this.node(this._lexer.token,{kind:s.h.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(l.T.STRING)||this.peek(l.T.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),i=this.many(l.T.BRACE_L,this.parseOperationTypeDefinition,l.T.BRACE_R);return this.node(e,{kind:s.h.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:i})}parseOperationTypeDefinition(){const e=this._lexer.token,t=this.parseOperationType();this.expectToken(l.T.COLON);const n=this.parseNamedType();return this.node(e,{kind:s.h.OPERATION_TYPE_DEFINITION,operation:t,type:n})}parseScalarTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),i=this.parseConstDirectives();return this.node(e,{kind:s.h.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:i})}parseObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),i=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:s.h.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:i,directives:r,fields:o})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(l.T.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseFieldDefinition,l.T.BRACE_R)}parseFieldDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),i=this.parseArgumentDefs();this.expectToken(l.T.COLON);const r=this.parseTypeReference(),o=this.parseConstDirectives();return this.node(e,{kind:s.h.FIELD_DEFINITION,description:t,name:n,arguments:i,type:r,directives:o})}parseArgumentDefs(){return this.optionalMany(l.T.PAREN_L,this.parseInputValueDef,l.T.PAREN_R)}parseInputValueDef(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(l.T.COLON);const i=this.parseTypeReference();let r;this.expectOptionalToken(l.T.EQUALS)&&(r=this.parseConstValueLiteral());const o=this.parseConstDirectives();return this.node(e,{kind:s.h.INPUT_VALUE_DEFINITION,description:t,name:n,type:i,defaultValue:r,directives:o})}parseInterfaceTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),i=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:s.h.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:i,directives:r,fields:o})}parseUnionTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseUnionMemberTypes();return this.node(e,{kind:s.h.UNION_TYPE_DEFINITION,description:t,name:n,directives:i,types:r})}parseUnionMemberTypes(){return this.expectOptionalToken(l.T.EQUALS)?this.delimitedMany(l.T.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();return this.node(e,{kind:s.h.ENUM_TYPE_DEFINITION,description:t,name:n,directives:i,values:r})}parseEnumValuesDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseEnumValueDefinition,l.T.BRACE_R)}parseEnumValueDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),i=this.parseConstDirectives();return this.node(e,{kind:s.h.ENUM_VALUE_DEFINITION,description:t,name:n,directives:i})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw(0,i.h)(this._lexer.source,this._lexer.token.start,`${m(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),i=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();return this.node(e,{kind:s.h.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:i,fields:r})}parseInputFieldsDefinition(){return this.optionalMany(l.T.BRACE_L,this.parseInputValueDef,l.T.BRACE_R)}parseTypeSystemExtension(){const e=this._lexer.lookahead();if(e.kind===l.T.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}parseSchemaExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const t=this.parseConstDirectives(),n=this.optionalMany(l.T.BRACE_L,this.parseOperationTypeDefinition,l.T.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:s.h.SCHEMA_EXTENSION,directives:t,operationTypes:n})}parseScalarTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:s.h.SCALAR_TYPE_EXTENSION,name:t,directives:n})}parseObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const t=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(0===n.length&&0===i.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:s.h.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:i,fields:r})}parseInterfaceTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const t=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(0===n.length&&0===i.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:s.h.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:i,fields:r})}parseUnionTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseUnionMemberTypes();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.UNION_TYPE_EXTENSION,name:t,directives:n,types:i})}parseEnumTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.ENUM_TYPE_EXTENSION,name:t,directives:n,values:i})}parseInputObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const t=this.parseName(),n=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();if(0===n.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:s.h.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:i})}parseDirectiveDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(l.T.AT);const n=this.parseName(),i=this.parseArgumentDefs(),r=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const o=this.parseDirectiveLocations();return this.node(e,{kind:s.h.DIRECTIVE_DEFINITION,description:t,name:n,arguments:i,repeatable:r,locations:o})}parseDirectiveLocations(){return this.delimitedMany(l.T.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(o.B,t.value))return t;throw this.unexpected(e)}node(e,t){return!0!==this._options.noLocation&&(t.loc=new r.Ye(e,this._lexer.lastToken,this._lexer.source)),t}peek(e){return this._lexer.token.kind===e}expectToken(e){const t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw(0,i.h)(this._lexer.source,t.start,`Expected ${y(e)}, found ${m(t)}.`)}expectOptionalToken(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}expectKeyword(e){const t=this._lexer.token;if(t.kind!==l.T.NAME||t.value!==e)throw(0,i.h)(this._lexer.source,t.start,`Expected "${e}", found ${m(t)}.`);this.advanceLexer()}expectOptionalKeyword(e){const t=this._lexer.token;return t.kind===l.T.NAME&&t.value===e&&(this.advanceLexer(),!0)}unexpected(e){const t=null!=e?e:this._lexer.token;return(0,i.h)(this._lexer.source,t.start,`Unexpected ${m(t)}.`)}any(e,t,n){this.expectToken(e);const i=[];for(;!this.expectOptionalToken(n);)i.push(t.call(this));return i}optionalMany(e,t,n){if(this.expectOptionalToken(e)){const e=[];do{e.push(t.call(this))}while(!this.expectOptionalToken(n));return e}return[]}many(e,t,n){this.expectToken(e);const i=[];do{i.push(t.call(this))}while(!this.expectOptionalToken(n));return i}delimitedMany(e,t){this.expectOptionalToken(e);const n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}advanceLexer(){const{maxTokens:e}=this._options,t=this._lexer.advance();if(void 0!==e&&t.kind!==l.T.EOF&&(++this._tokenCounter,this._tokenCounter>e))throw(0,i.h)(this._lexer.source,t.start,`Document contains more that ${e} tokens. Parsing aborted.`)}}function m(e){const t=e.value;return y(e.kind)+(null!=t?` "${t}"`:"")}function y(e){return(0,a.u)(e)?`"${e}"`:e}},5844:(e,t,n)=>{"use strict";n.d(t,{D$:()=>f,G4:()=>u,Ir:()=>r,Of:()=>c,VB:()=>l,Wk:()=>o,aU:()=>d,nr:()=>a,pO:()=>s,zT:()=>p});var i=n(7359);function r(e){return o(e)||u(e)||d(e)}function o(e){return e.kind===i.h.OPERATION_DEFINITION||e.kind===i.h.FRAGMENT_DEFINITION}function s(e){return e.kind===i.h.FIELD||e.kind===i.h.FRAGMENT_SPREAD||e.kind===i.h.INLINE_FRAGMENT}function a(e){return e.kind===i.h.VARIABLE||e.kind===i.h.INT||e.kind===i.h.FLOAT||e.kind===i.h.STRING||e.kind===i.h.BOOLEAN||e.kind===i.h.NULL||e.kind===i.h.ENUM||e.kind===i.h.LIST||e.kind===i.h.OBJECT}function c(e){return a(e)&&(e.kind===i.h.LIST?e.values.some(c):e.kind===i.h.OBJECT?e.fields.some((e=>c(e.value))):e.kind!==i.h.VARIABLE)}function l(e){return e.kind===i.h.NAMED_TYPE||e.kind===i.h.LIST_TYPE||e.kind===i.h.NON_NULL_TYPE}function u(e){return e.kind===i.h.SCHEMA_DEFINITION||p(e)||e.kind===i.h.DIRECTIVE_DEFINITION}function p(e){return e.kind===i.h.SCALAR_TYPE_DEFINITION||e.kind===i.h.OBJECT_TYPE_DEFINITION||e.kind===i.h.INTERFACE_TYPE_DEFINITION||e.kind===i.h.UNION_TYPE_DEFINITION||e.kind===i.h.ENUM_TYPE_DEFINITION||e.kind===i.h.INPUT_OBJECT_TYPE_DEFINITION}function d(e){return e.kind===i.h.SCHEMA_EXTENSION||f(e)}function f(e){return e.kind===i.h.SCALAR_TYPE_EXTENSION||e.kind===i.h.OBJECT_TYPE_EXTENSION||e.kind===i.h.INTERFACE_TYPE_EXTENSION||e.kind===i.h.UNION_TYPE_EXTENSION||e.kind===i.h.ENUM_TYPE_EXTENSION||e.kind===i.h.INPUT_OBJECT_TYPE_EXTENSION}},850:(e,t,n)=>{"use strict";n.d(t,{Q:()=>r,z:()=>o});var i=n(7867);function r(e){return o(e.source,(0,i.k)(e.source,e.start))}function o(e,t){const n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,o=e.locationOffset.line-1,a=t.line+o,c=1===t.line?n:0,l=t.column+c,u=`${e.name}:${a}:${l}\n`,p=i.split(/\r\n|[\n\r]/g),d=p[r];if(d.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<d.length;e+=80)n.push(d.slice(e,e+80));return u+s([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+s([[a-1+" |",p[r-1]],[`${a} |`,d],["|","^".padStart(l)],[`${a+1} |`,p[r+1]]])}function s(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}},3486:(e,t,n)=>{"use strict";n.d(t,{S:()=>c});var i=n(7392);const r=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function o(e){return s[e.charCodeAt(0)]}const s=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];var a=n(7304);function c(e){return(0,a.Vn)(e,l)}const l={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>u(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=d("(",u(e.variableDefinitions,", "),")"),n=u([e.operation,u([e.name,t]),u(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+d(" = ",n)+d(" ",u(i," "))},SelectionSet:{leave:({selections:e})=>p(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){const o=d("",e,": ")+t;let s=o+d("(",u(n,", "),")");return s.length>80&&(s=o+d("(\n",f(u(n,"\n")),"\n)")),u([s,u(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+d(" ",u(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>u(["...",d("on ",e),u(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${d("(",u(n,", "),")")} on ${t} ${d("",u(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?(0,i.LZ)(e):`"${e.replace(r,o)}"`},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+u(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+u(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+d("(",u(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>d("",e,"\n")+u(["schema",u(t," "),p(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>d("",e,"\n")+u(["scalar",t,u(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>d("",e,"\n")+u(["type",t,d("implements ",u(n," & ")),u(i," "),p(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>d("",e,"\n")+t+(h(n)?d("(\n",f(u(n,"\n")),"\n)"):d("(",u(n,", "),")"))+": "+i+d(" ",u(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>d("",e,"\n")+u([t+": "+n,d("= ",i),u(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>d("",e,"\n")+u(["interface",t,d("implements ",u(n," & ")),u(i," "),p(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>d("",e,"\n")+u(["union",t,u(n," "),d("= ",u(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>d("",e,"\n")+u(["enum",t,u(n," "),p(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>d("",e,"\n")+u([t,u(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>d("",e,"\n")+u(["input",t,u(n," "),p(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>d("",e,"\n")+"directive @"+t+(h(n)?d("(\n",f(u(n,"\n")),"\n)"):d("(",u(n,", "),")"))+(i?" repeatable":"")+" on "+u(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>u(["extend schema",u(e," "),p(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>u(["extend scalar",e,u(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>u(["extend type",e,d("implements ",u(t," & ")),u(n," "),p(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>u(["extend interface",e,d("implements ",u(t," & ")),u(n," "),p(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>u(["extend union",e,u(t," "),d("= ",u(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>u(["extend enum",e,u(t," "),p(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>u(["extend input",e,u(t," "),p(n)]," ")}};function u(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function p(e){return d("{\n",f(u(e,"\n")),"\n}")}function d(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function f(e){return d("  ",e.replace(/\n/g,"\n  "))}function h(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}},7926:(e,t,n)=>{"use strict";n.d(t,{H:()=>s,T:()=>a});var i=n(7826),r=n(5821),o=n(8306);class s{constructor(e,t="GraphQL request",n={line:1,column:1}){"string"==typeof e||(0,i.a)(!1,`Body must be a string. Received: ${(0,r.X)(e)}.`),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||(0,i.a)(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,i.a)(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function a(e){return(0,o.n)(e,s)}},4635:(e,t,n)=>{"use strict";var i;n.d(t,{T:()=>i}),function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"}(i||(i={}))},7304:(e,t,n)=>{"use strict";n.d(t,{$_:()=>a,CK:()=>p,Eu:()=>u,Vn:()=>c,j1:()=>l});var i=n(7826),r=n(5821),o=n(2380),s=n(7359);const a=Object.freeze({});function c(e,t,n=o.h8){const c=new Map;for(const e of Object.values(s.h))c.set(e,u(t,e));let l,p,d,f=Array.isArray(e),h=[e],m=-1,y=[],v=e;const E=[],T=[];do{m++;const e=m===h.length,s=e&&0!==y.length;if(e){if(p=0===T.length?void 0:E[E.length-1],v=d,d=T.pop(),s)if(f){v=v.slice();let e=0;for(const[t,n]of y){const i=t-e;null===n?(v.splice(i,1),e++):v[i]=n}}else{v=Object.defineProperties({},Object.getOwnPropertyDescriptors(v));for(const[e,t]of y)v[e]=t}m=l.index,h=l.keys,y=l.edits,f=l.inArray,l=l.prev}else if(d){if(p=f?m:h[m],v=d[p],null==v)continue;E.push(p)}let u;if(!Array.isArray(v)){var g,I;(0,o.UG)(v)||(0,i.a)(!1,`Invalid AST Node: ${(0,r.X)(v)}.`);const n=e?null===(g=c.get(v.kind))||void 0===g?void 0:g.leave:null===(I=c.get(v.kind))||void 0===I?void 0:I.enter;if(u=null==n?void 0:n.call(t,v,p,d,E,T),u===a)break;if(!1===u){if(!e){E.pop();continue}}else if(void 0!==u&&(y.push([p,u]),!e)){if(!(0,o.UG)(u)){E.pop();continue}v=u}}var N;void 0===u&&s&&y.push([p,v]),e?E.pop():(l={inArray:f,index:m,keys:h,edits:y,prev:l},f=Array.isArray(v),h=f?v:null!==(N=n[v.kind])&&void 0!==N?N:[],m=-1,y=[],d&&T.push(d),d=v)}while(void 0!==l);return 0!==y.length?y[y.length-1][1]:e}function l(e){const t=new Array(e.length).fill(null),n=Object.create(null);for(const i of Object.values(s.h)){let r=!1;const o=new Array(e.length).fill(void 0),s=new Array(e.length).fill(void 0);for(let t=0;t<e.length;++t){const{enter:n,leave:a}=u(e[t],i);r||(r=null!=n||null!=a),o[t]=n,s[t]=a}if(!r)continue;const c={enter(...n){const i=n[0];for(let s=0;s<e.length;s++)if(null===t[s]){var r;const c=null===(r=o[s])||void 0===r?void 0:r.apply(e[s],n);if(!1===c)t[s]=i;else if(c===a)t[s]=a;else if(void 0!==c)return c}},leave(...n){const i=n[0];for(let o=0;o<e.length;o++)if(null===t[o]){var r;const i=null===(r=s[o])||void 0===r?void 0:r.apply(e[o],n);if(i===a)t[o]=a;else if(void 0!==i&&!1!==i)return i}else t[o]===i&&(t[o]=null)}};n[i]=c}return n}function u(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function p(e,t,n){const{enter:i,leave:r}=u(e,t);return n?r:i}},6303:(e,t,n)=>{"use strict";n.d(t,{g:()=>a,i:()=>s});var i=n(7826),r=n(8087),o=n(8297);function s(e){if(null!=e||(0,i.a)(!1,"Must provide name."),"string"==typeof e||(0,i.a)(!1,"Expected name to be a string."),0===e.length)throw new r.__("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!(0,o.HQ)(e.charCodeAt(t)))throw new r.__(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!(0,o.LQ)(e.charCodeAt(0)))throw new r.__(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function a(e){if("true"===e||"false"===e||"null"===e)throw new r.__(`Enum values cannot be named: ${e}`);return s(e)}},398:(e,t,n)=>{"use strict";n.d(t,{mR:()=>ve,sR:()=>Te,oW:()=>he,p2:()=>Y,bM:()=>H,h6:()=>se,n2:()=>oe,Gp:()=>me,DM:()=>de,fU:()=>q,M_:()=>Q,Zu:()=>w,U8:()=>F,qT:()=>M,k2:()=>O,H5:()=>G,kS:()=>k,rM:()=>te,E$:()=>C,i_:()=>W,Z6:()=>_,Gt:()=>U,Pt:()=>N,p_:()=>g,rc:()=>A,vX:()=>z,WO:()=>le,xC:()=>ne,tf:()=>Z,m0:()=>K,Gv:()=>B,EM:()=>R,hL:()=>L,j$:()=>j,oT:()=>S,UT:()=>V,HG:()=>x,Zs:()=>ee,zM:()=>$,zP:()=>J,lp:()=>b,SZ:()=>P,dK:()=>fe,Wd:()=>Ie,KA:()=>I,P9:()=>T,EN:()=>D,fw:()=>X,WB:()=>re,_9:()=>ie});var i=n(7826),r=n(3177);function o(e){return e}var s=n(5821),a=n(8306),c=n(8495),l=n(3498),u=n(4950),p=n(5723),d=n(3294),f=n(8824),h=n(8087),m=n(7359),y=n(3486),v=n(2319),E=n(6303);function T(e){return I(e)||b(e)||S(e)||D(e)||R(e)||L(e)||x(e)||$(e)}function g(e){if(!T(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL type.`);return e}function I(e){return(0,a.n)(e,oe)}function N(e){if(!I(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Scalar type.`);return e}function b(e){return(0,a.n)(e,se)}function _(e){if(!b(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Object type.`);return e}function S(e){return(0,a.n)(e,he)}function O(e){if(!S(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Interface type.`);return e}function D(e){return(0,a.n)(e,me)}function A(e){if(!D(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Union type.`);return e}function R(e){return(0,a.n)(e,ve)}function w(e){if(!R(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Enum type.`);return e}function L(e){return(0,a.n)(e,Te)}function F(e){if(!L(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Input Object type.`);return e}function x(e){return(0,a.n)(e,Y)}function k(e){if(!x(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL List type.`);return e}function $(e){return(0,a.n)(e,H)}function C(e){if(!$(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL Non-Null type.`);return e}function j(e){return I(e)||R(e)||L(e)||X(e)&&j(e.ofType)}function M(e){if(!j(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL input type.`);return e}function P(e){return I(e)||b(e)||S(e)||D(e)||R(e)||X(e)&&P(e.ofType)}function U(e){if(!P(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL output type.`);return e}function V(e){return I(e)||R(e)}function G(e){if(!V(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL leaf type.`);return e}function B(e){return b(e)||S(e)||D(e)}function Q(e){if(!B(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL composite type.`);return e}function K(e){return S(e)||D(e)}function q(e){if(!K(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL abstract type.`);return e}class Y{constructor(e){T(e)||(0,i.a)(!1,`Expected ${(0,s.X)(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class H{constructor(e){J(e)||(0,i.a)(!1,`Expected ${(0,s.X)(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function X(e){return x(e)||$(e)}function z(e){if(!X(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL wrapping type.`);return e}function J(e){return T(e)&&!$(e)}function W(e){if(!J(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL nullable type.`);return e}function Z(e){if(e)return $(e)?e.ofType:e}function ee(e){return I(e)||b(e)||S(e)||D(e)||R(e)||L(e)}function te(e){if(!ee(e))throw new Error(`Expected ${(0,s.X)(e)} to be a GraphQL named type.`);return e}function ne(e){if(e){let t=e;for(;X(t);)t=t.ofType;return t}}function ie(e){return"function"==typeof e?e():e}function re(e){return"function"==typeof e?e():e}class oe{constructor(e){var t,n,r,a;const c=null!==(t=e.parseValue)&&void 0!==t?t:o;this.name=(0,E.i)(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:o,this.parseValue=c,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:(e,t)=>c((0,v.M)(e,t)),this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(a=e.extensionASTNodes)&&void 0!==a?a:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||(0,i.a)(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${(0,s.X)(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||(0,i.a)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,i.a)(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class se{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>ce(e),this._interfaces=()=>ae(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,i.a)(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${(0,s.X)(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:pe(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ae(e){var t;const n=ie(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||(0,i.a)(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function ce(e){const t=re(e.fields);return ue(t)||(0,i.a)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.j)(t,((t,n)=>{var r;ue(t)||(0,i.a)(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||(0,i.a)(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${(0,s.X)(t.resolve)}.`);const o=null!==(r=t.args)&&void 0!==r?r:{};return ue(o)||(0,i.a)(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:(0,E.i)(n),description:t.description,type:t.type,args:le(o),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode}}))}function le(e){return Object.entries(e).map((([e,t])=>({name:(0,E.i)(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))}function ue(e){return(0,c.y)(e)&&!Array.isArray(e)}function pe(e){return(0,p.j)(e,(e=>({description:e.description,type:e.type,args:de(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function de(e){return(0,u.w)(e,(e=>e.name),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))}function fe(e){return $(e.type)&&void 0===e.defaultValue}class he{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ce.bind(void 0,e),this._interfaces=ae.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.a)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.X)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:pe(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class me{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=ye.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||(0,i.a)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,s.X)(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ye(e){const t=ie(e.types);return Array.isArray(t)||(0,i.a)(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}class ve{constructor(e){var t,n,r;this.name=(0,E.i)(e.name),this.description=e.description,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=(n=this.name,ue(r=e.values)||(0,i.a)(!1,`${n} values must be an object with value names as keys.`),Object.entries(r).map((([e,t])=>(ue(t)||(0,i.a)(!1,`${n}.${e} must refer to an object with a "value" key representing an internal value but got: ${(0,s.X)(t)}.`),{name:(0,E.g)(e),description:t.description,value:void 0!==t.value?t.value:e,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))),this._valueLookup=new Map(this._values.map((e=>[e.value,e]))),this._nameLookup=(0,l.P)(this._values,(e=>e.name))}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){const t=this._valueLookup.get(e);if(void 0===t)throw new h.__(`Enum "${this.name}" cannot represent value: ${(0,s.X)(e)}`);return t.name}parseValue(e){if("string"!=typeof e){const t=(0,s.X)(e);throw new h.__(`Enum "${this.name}" cannot represent non-string value: ${t}.`+Ee(this,t))}const t=this.getValue(e);if(null==t)throw new h.__(`Value "${e}" does not exist in "${this.name}" enum.`+Ee(this,e));return t.value}parseLiteral(e,t){if(e.kind!==m.h.ENUM){const t=(0,y.S)(e);throw new h.__(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+Ee(this,t),{nodes:e})}const n=this.getValue(e.value);if(null==n){const t=(0,y.S)(e);throw new h.__(`Value "${t}" does not exist in "${this.name}" enum.`+Ee(this,t),{nodes:e})}return n.value}toConfig(){const e=(0,u.w)(this.getValues(),(e=>e.name),(e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Ee(e,t){const n=e.getValues().map((e=>e.name)),i=(0,d.D)(t,n);return(0,r.l)("the enum value",i)}class Te{constructor(e){var t;this.name=(0,E.i)(e.name),this.description=e.description,this.extensions=(0,f.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ge.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const e=(0,p.j)(this.getFields(),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ge(e){const t=re(e.fields);return ue(t)||(0,i.a)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,p.j)(t,((t,n)=>(!("resolve"in t)||(0,i.a)(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:(0,E.i)(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:(0,f.u)(t.extensions),astNode:t.astNode})))}function Ie(e){return $(e.type)&&void 0===e.defaultValue}},8238:(e,t,n)=>{"use strict";n.d(t,{CO:()=>f,NZ:()=>h,QE:()=>y,SY:()=>v,V4:()=>g,Yf:()=>m,df:()=>T,fg:()=>E,wX:()=>d,xg:()=>I});var i=n(7826),r=n(5821),o=n(8306),s=n(8495),a=n(8824),c=n(9878),l=n(6303),u=n(398),p=n(3801);function d(e){return(0,o.n)(e,h)}function f(e){if(!d(e))throw new Error(`Expected ${(0,r.X)(e)} to be a GraphQL directive.`);return e}class h{constructor(e){var t,n;this.name=(0,l.i)(e.name),this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(t=e.isRepeatable)&&void 0!==t&&t,this.extensions=(0,a.u)(e.extensions),this.astNode=e.astNode,Array.isArray(e.locations)||(0,i.a)(!1,`@${e.name} locations must be an Array.`);const r=null!==(n=e.args)&&void 0!==n?n:{};(0,s.y)(r)&&!Array.isArray(r)||(0,i.a)(!1,`@${e.name} args must be an object with argument names as keys.`),this.args=(0,u.WO)(r)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,u.DM)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const m=new h({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[c.B.FIELD,c.B.FRAGMENT_SPREAD,c.B.INLINE_FRAGMENT],args:{if:{type:new u.bM(p.EZ),description:"Included when true."}}}),y=new h({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[c.B.FIELD,c.B.FRAGMENT_SPREAD,c.B.INLINE_FRAGMENT],args:{if:{type:new u.bM(p.EZ),description:"Skipped when true."}}}),v="No longer supported",E=new h({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[c.B.FIELD_DEFINITION,c.B.ARGUMENT_DEFINITION,c.B.INPUT_FIELD_DEFINITION,c.B.ENUM_VALUE],args:{reason:{type:p.kH,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:v}}}),T=new h({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[c.B.SCALAR],args:{url:{type:new u.bM(p.kH),description:"The URL that specifies the behavior of this scalar."}}}),g=Object.freeze([m,y,E,T]);function I(e){return g.some((({name:t})=>t===e.name))}},2433:(e,t,n)=>{"use strict";n.d(t,{Az:()=>T,PX:()=>E,TK:()=>u,XQ:()=>m,e_:()=>h,hU:()=>I,jT:()=>y,l3:()=>p,nL:()=>N,qz:()=>f,s9:()=>b,tF:()=>g,x2:()=>d,zU:()=>v});var i=n(5821),r=n(9551),o=n(9878),s=n(3486),a=n(8631),c=n(398),l=n(3801);const u=new c.h6({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:l.kH,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new c.bM(new c.p2(new c.bM(f))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new c.bM(f),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:f,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:f,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new c.bM(new c.p2(new c.bM(p))),resolve:e=>e.getDirectives()}})}),p=new c.h6({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},isRepeatable:{type:new c.bM(l.EZ),resolve:e=>e.isRepeatable},locations:{type:new c.bM(new c.p2(new c.bM(d))),resolve:e=>e.locations},args:{type:new c.bM(new c.p2(new c.bM(m))),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))}})}),d=new c.mR({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:o.B.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:o.B.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:o.B.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:o.B.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:o.B.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:o.B.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:o.B.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:o.B.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:o.B.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:o.B.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:o.B.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:o.B.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:o.B.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:o.B.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:o.B.UNION,description:"Location adjacent to a union definition."},ENUM:{value:o.B.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:o.B.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:o.B.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:o.B.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),f=new c.h6({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new c.bM(E),resolve:e=>(0,c.KA)(e)?v.SCALAR:(0,c.lp)(e)?v.OBJECT:(0,c.oT)(e)?v.INTERFACE:(0,c.EN)(e)?v.UNION:(0,c.EM)(e)?v.ENUM:(0,c.hL)(e)?v.INPUT_OBJECT:(0,c.HG)(e)?v.LIST:(0,c.zM)(e)?v.NON_NULL:void(0,r.k)(!1,`Unexpected type: "${(0,i.X)(e)}".`)},name:{type:l.kH,resolve:e=>"name"in e?e.name:void 0},description:{type:l.kH,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:l.kH,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new c.p2(new c.bM(h)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.lp)(e)||(0,c.oT)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},interfaces:{type:new c.p2(new c.bM(f)),resolve(e){if((0,c.lp)(e)||(0,c.oT)(e))return e.getInterfaces()}},possibleTypes:{type:new c.p2(new c.bM(f)),resolve(e,t,n,{schema:i}){if((0,c.m0)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.p2(new c.bM(y)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.EM)(e)){const n=e.getValues();return t?n:n.filter((e=>null==e.deprecationReason))}}},inputFields:{type:new c.p2(new c.bM(m)),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,c.hL)(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},ofType:{type:f,resolve:e=>"ofType"in e?e.ofType:void 0}})}),h=new c.h6({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},args:{type:new c.bM(new c.p2(new c.bM(m))),args:{includeDeprecated:{type:l.EZ,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))},type:{type:new c.bM(f),resolve:e=>e.type},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})}),m=new c.h6({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},type:{type:new c.bM(f),resolve:e=>e.type},defaultValue:{type:l.kH,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=(0,a.J)(n,t);return i?(0,s.S)(i):null}},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})}),y=new c.h6({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new c.bM(l.kH),resolve:e=>e.name},description:{type:l.kH,resolve:e=>e.description},isDeprecated:{type:new c.bM(l.EZ),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:l.kH,resolve:e=>e.deprecationReason}})});var v;!function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"}(v||(v={}));const E=new c.mR({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:v.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:v.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:v.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:v.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:v.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:v.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:v.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:v.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),T={name:"__schema",type:new c.bM(u),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},g={name:"__type",type:f,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.bM(l.kH),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},I={name:"__typename",type:new c.bM(l.kH),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},N=Object.freeze([u,p,d,f,h,m,y,E]);function b(e){return N.some((({name:t})=>e.name===t))}},3801:(e,t,n)=>{"use strict";n.d(t,{EZ:()=>h,HI:()=>l,HS:()=>y,_o:()=>p,av:()=>d,kH:()=>f,km:()=>m,st:()=>u,u1:()=>v});var i=n(5821),r=n(8495),o=n(8087),s=n(7359),a=n(3486),c=n(398);const l=2147483647,u=-2147483648,p=new c.n2({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=E(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new o.__(`Int cannot represent non-integer value: ${(0,i.X)(t)}`);if(n>l||n<u)throw new o.__("Int cannot represent non 32-bit signed integer value: "+(0,i.X)(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new o.__(`Int cannot represent non-integer value: ${(0,i.X)(e)}`);if(e>l||e<u)throw new o.__(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==s.h.INT)throw new o.__(`Int cannot represent non-integer value: ${(0,a.S)(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>l||t<u)throw new o.__(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),d=new c.n2({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=E(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new o.__(`Float cannot represent non numeric value: ${(0,i.X)(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new o.__(`Float cannot represent non numeric value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.FLOAT&&e.kind!==s.h.INT)throw new o.__(`Float cannot represent non numeric value: ${(0,a.S)(e)}`,e);return parseFloat(e.value)}}),f=new c.n2({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=E(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new o.__(`String cannot represent value: ${(0,i.X)(e)}`)},parseValue(e){if("string"!=typeof e)throw new o.__(`String cannot represent a non string value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.STRING)throw new o.__(`String cannot represent a non string value: ${(0,a.S)(e)}`,{nodes:e});return e.value}}),h=new c.n2({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=E(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new o.__(`Boolean cannot represent a non boolean value: ${(0,i.X)(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new o.__(`Boolean cannot represent a non boolean value: ${(0,i.X)(e)}`);return e},parseLiteral(e){if(e.kind!==s.h.BOOLEAN)throw new o.__(`Boolean cannot represent a non boolean value: ${(0,a.S)(e)}`,{nodes:e});return e.value}}),m=new c.n2({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=E(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new o.__(`ID cannot represent value: ${(0,i.X)(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new o.__(`ID cannot represent value: ${(0,i.X)(e)}`)},parseLiteral(e){if(e.kind!==s.h.STRING&&e.kind!==s.h.INT)throw new o.__("ID cannot represent a non-string and non-integer value: "+(0,a.S)(e),{nodes:e});return e.value}}),y=Object.freeze([f,p,d,h,m]);function v(e){return y.some((({name:t})=>e.name===t))}function E(e){if((0,r.y)(e)){if("function"==typeof e.valueOf){const t=e.valueOf();if(!(0,r.y)(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}},9678:(e,t,n)=>{"use strict";n.d(t,{EO:()=>f,XO:()=>h,nN:()=>d});var i=n(7826),r=n(5821),o=n(8306),s=n(8495),a=n(8824),c=n(2380),l=n(398),u=n(8238),p=n(2433);function d(e){return(0,o.n)(e,h)}function f(e){if(!d(e))throw new Error(`Expected ${(0,r.X)(e)} to be a GraphQL schema.`);return e}class h{constructor(e){var t,n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,s.y)(e)||(0,i.a)(!1,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,i.a)(!1,`"types" must be Array if provided but got: ${(0,r.X)(e.types)}.`),!e.directives||Array.isArray(e.directives)||(0,i.a)(!1,`"directives" must be Array if provided but got: ${(0,r.X)(e.directives)}.`),this.description=e.description,this.extensions=(0,a.u)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:u.V4;const o=new Set(e.types);if(null!=e.types)for(const t of e.types)o.delete(t),m(t,o);null!=this._queryType&&m(this._queryType,o),null!=this._mutationType&&m(this._mutationType,o),null!=this._subscriptionType&&m(this._subscriptionType,o);for(const e of this._directives)if((0,u.wX)(e))for(const t of e.args)m(t.type,o);m(p.TK,o),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const e of o){if(null==e)continue;const t=e.name;if(t||(0,i.a)(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[t])throw new Error(`Schema must contain uniquely named types but contains multiple types named "${t}".`);if(this._typeMap[t]=e,(0,l.oT)(e)){for(const t of e.getInterfaces())if((0,l.oT)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.interfaces.push(e)}}else if((0,l.lp)(e))for(const t of e.getInterfaces())if((0,l.oT)(t)){let n=this._implementationsMap[t.name];void 0===n&&(n=this._implementationsMap[t.name]={objects:[],interfaces:[]}),n.objects.push(e)}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(e){switch(e){case c.ku.QUERY:return this.getQueryType();case c.ku.MUTATION:return this.getMutationType();case c.ku.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(e){return this.getTypeMap()[e]}getPossibleTypes(e){return(0,l.EN)(e)?e.getTypes():this.getImplementations(e).objects}getImplementations(e){const t=this._implementationsMap[e.name];return null!=t?t:{objects:[],interfaces:[]}}isSubType(e,t){let n=this._subTypeMap[e.name];if(void 0===n){if(n=Object.create(null),(0,l.EN)(e))for(const t of e.getTypes())n[t.name]=!0;else{const t=this.getImplementations(e);for(const e of t.objects)n[e.name]=!0;for(const e of t.interfaces)n[e.name]=!0}this._subTypeMap[e.name]=n}return void 0!==n[t.name]}getDirectives(){return this._directives}getDirective(e){return this.getDirectives().find((t=>t.name===e))}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}function m(e,t){const n=(0,l.xC)(e);if(!t.has(n))if(t.add(n),(0,l.EN)(n))for(const e of n.getTypes())m(e,t);else if((0,l.lp)(n)||(0,l.oT)(n)){for(const e of n.getInterfaces())m(e,t);for(const e of Object.values(n.getFields())){m(e.type,t);for(const n of e.args)m(n.type,t)}}else if((0,l.hL)(n))for(const e of Object.values(n.getFields()))m(e.type,t);return t}},9655:(e,t,n)=>{"use strict";n.d(t,{F:()=>p,J:()=>d});var i=n(5821),r=n(8087),o=n(2380),s=n(316),a=n(398),c=n(8238),l=n(2433),u=n(9678);function p(e){if((0,u.EO)(e),e.__validationErrors)return e.__validationErrors;const t=new f(e);!function(e){const t=e.schema,n=t.getQueryType();if(n){if(!(0,a.lp)(n)){var r;e.reportError(`Query root type must be Object type, it cannot be ${(0,i.X)(n)}.`,null!==(r=h(t,o.ku.QUERY))&&void 0!==r?r:n.astNode)}}else e.reportError("Query root type must be provided.",t.astNode);const s=t.getMutationType();var c;s&&!(0,a.lp)(s)&&e.reportError(`Mutation root type must be Object type if provided, it cannot be ${(0,i.X)(s)}.`,null!==(c=h(t,o.ku.MUTATION))&&void 0!==c?c:s.astNode);const l=t.getSubscriptionType();var u;l&&!(0,a.lp)(l)&&e.reportError(`Subscription root type must be Object type if provided, it cannot be ${(0,i.X)(l)}.`,null!==(u=h(t,o.ku.SUBSCRIPTION))&&void 0!==u?u:l.astNode)}(t),function(e){for(const n of e.schema.getDirectives())if((0,c.wX)(n)){m(e,n);for(const r of n.args){var t;m(e,r),(0,a.j$)(r.type)||e.reportError(`The type of @${n.name}(${r.name}:) must be Input Type but got: ${(0,i.X)(r.type)}.`,r.astNode),(0,a.dK)(r)&&null!=r.deprecationReason&&e.reportError(`Required argument @${n.name}(${r.name}:) cannot be deprecated.`,[S(r.astNode),null===(t=r.astNode)||void 0===t?void 0:t.type])}}else e.reportError(`Expected directive but got: ${(0,i.X)(n)}.`,null==n?void 0:n.astNode)}(t),function(e){const t=function(e){const t=Object.create(null),n=[],i=Object.create(null);return function r(o){if(t[o.name])return;t[o.name]=!0,i[o.name]=n.length;const s=Object.values(o.getFields());for(const t of s)if((0,a.zM)(t.type)&&(0,a.hL)(t.type.ofType)){const o=t.type.ofType,s=i[o.name];if(n.push(t),void 0===s)r(o);else{const t=n.slice(s),i=t.map((e=>e.name)).join(".");e.reportError(`Cannot reference Input Object "${o.name}" within itself through a series of non-null fields: "${i}".`,t.map((e=>e.astNode)))}n.pop()}i[o.name]=void 0}}(e),n=e.schema.getTypeMap();for(const r of Object.values(n))(0,a.Zs)(r)?((0,l.s9)(r)||m(e,r),(0,a.lp)(r)||(0,a.oT)(r)?(y(e,r),v(e,r)):(0,a.EN)(r)?g(e,r):(0,a.EM)(r)?I(e,r):(0,a.hL)(r)&&(N(e,r),t(r))):e.reportError(`Expected GraphQL named type but got: ${(0,i.X)(r)}.`,r.astNode)}(t);const n=t.getErrors();return e.__validationErrors=n,n}function d(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))}class f{constructor(e){this._errors=[],this.schema=e}reportError(e,t){const n=Array.isArray(t)?t.filter(Boolean):t;this._errors.push(new r.__(e,{nodes:n}))}getErrors(){return this._errors}}function h(e,t){var n;return null===(n=[e.astNode,...e.extensionASTNodes].flatMap((e=>{var t;return null!==(t=null==e?void 0:e.operationTypes)&&void 0!==t?t:[]})).find((e=>e.operation===t)))||void 0===n?void 0:n.type}function m(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function y(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const c of n){var r;m(e,c),(0,a.SZ)(c.type)||e.reportError(`The type of ${t.name}.${c.name} must be Output Type but got: ${(0,i.X)(c.type)}.`,null===(r=c.astNode)||void 0===r?void 0:r.type);for(const n of c.args){const r=n.name;var o,s;m(e,n),(0,a.j$)(n.type)||e.reportError(`The type of ${t.name}.${c.name}(${r}:) must be Input Type but got: ${(0,i.X)(n.type)}.`,null===(o=n.astNode)||void 0===o?void 0:o.type),(0,a.dK)(n)&&null!=n.deprecationReason&&e.reportError(`Required argument ${t.name}.${c.name}(${r}:) cannot be deprecated.`,[S(n.astNode),null===(s=n.astNode)||void 0===s?void 0:s.type])}}}function v(e,t){const n=Object.create(null);for(const r of t.getInterfaces())(0,a.oT)(r)?t!==r?n[r.name]?e.reportError(`Type ${t.name} can only implement ${r.name} once.`,b(t,r)):(n[r.name]=!0,T(e,t,r),E(e,t,r)):e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,b(t,r)):e.reportError(`Type ${(0,i.X)(t)} must only implement Interface types, it cannot implement ${(0,i.X)(r)}.`,b(t,r))}function E(e,t,n){const r=t.getFields();for(const p of Object.values(n.getFields())){const d=p.name,f=r[d];if(f){var o,c;(0,s.uJ)(e.schema,f.type,p.type)||e.reportError(`Interface field ${n.name}.${d} expects type ${(0,i.X)(p.type)} but ${t.name}.${d} is type ${(0,i.X)(f.type)}.`,[null===(o=p.astNode)||void 0===o?void 0:o.type,null===(c=f.astNode)||void 0===c?void 0:c.type]);for(const r of p.args){const o=r.name,a=f.args.find((e=>e.name===o));var l,u;a?(0,s._7)(r.type,a.type)||e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expects type ${(0,i.X)(r.type)} but ${t.name}.${d}(${o}:) is type ${(0,i.X)(a.type)}.`,[null===(l=r.astNode)||void 0===l?void 0:l.type,null===(u=a.astNode)||void 0===u?void 0:u.type]):e.reportError(`Interface field argument ${n.name}.${d}(${o}:) expected but ${t.name}.${d} does not provide it.`,[r.astNode,f.astNode])}for(const i of f.args){const r=i.name;!p.args.find((e=>e.name===r))&&(0,a.dK)(i)&&e.reportError(`Object field ${t.name}.${d} includes required argument ${r} that is missing from the Interface field ${n.name}.${d}.`,[i.astNode,p.astNode])}}else e.reportError(`Interface field ${n.name}.${d} expected but ${t.name} does not provide it.`,[p.astNode,t.astNode,...t.extensionASTNodes])}}function T(e,t,n){const i=t.getInterfaces();for(const r of n.getInterfaces())i.includes(r)||e.reportError(r===t?`Type ${t.name} cannot implement ${n.name} because it would create a circular reference.`:`Type ${t.name} must implement ${r.name} because it is implemented by ${n.name}.`,[...b(n,r),...b(t,n)])}function g(e,t){const n=t.getTypes();0===n.length&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);const r=Object.create(null);for(const o of n)r[o.name]?e.reportError(`Union type ${t.name} can only include type ${o.name} once.`,_(t,o.name)):(r[o.name]=!0,(0,a.lp)(o)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${(0,i.X)(o)}.`,_(t,String(o))))}function I(e,t){const n=t.getValues();0===n.length&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(const t of n)m(e,t)}function N(e,t){const n=Object.values(t.getFields());0===n.length&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const s of n){var r,o;m(e,s),(0,a.j$)(s.type)||e.reportError(`The type of ${t.name}.${s.name} must be Input Type but got: ${(0,i.X)(s.type)}.`,null===(r=s.astNode)||void 0===r?void 0:r.type),(0,a.Wd)(s)&&null!=s.deprecationReason&&e.reportError(`Required input field ${t.name}.${s.name} cannot be deprecated.`,[S(s.astNode),null===(o=s.astNode)||void 0===o?void 0:o.type])}}function b(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.interfaces)&&void 0!==t?t:[]})).filter((e=>e.name.value===t.name))}function _(e,t){const{astNode:n,extensionASTNodes:i}=e;return(null!=n?[n,...i]:i).flatMap((e=>{var t;return null!==(t=e.types)&&void 0!==t?t:[]})).filter((e=>e.name.value===t))}function S(e){var t;return null==e||null===(t=e.directives)||void 0===t?void 0:t.find((e=>e.name.value===c.fg.name))}},2676:(e,t,n)=>{"use strict";n.d(t,{a:()=>l,y:()=>p});var i=n(2380),r=n(7359),o=n(7304),s=n(398),a=n(2433),c=n(77);class l{constructor(e,t,n){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:u,t&&((0,s.j$)(t)&&this._inputTypeStack.push(t),(0,s.Gv)(t)&&this._parentTypeStack.push(t),(0,s.SZ)(t)&&this._typeStack.push(t))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(e){const t=this._schema;switch(e.kind){case r.h.SELECTION_SET:{const e=(0,s.xC)(this.getType());this._parentTypeStack.push((0,s.Gv)(e)?e:void 0);break}case r.h.FIELD:{const n=this.getParentType();let i,r;n&&(i=this._getFieldDef(t,n,e),i&&(r=i.type)),this._fieldDefStack.push(i),this._typeStack.push((0,s.SZ)(r)?r:void 0);break}case r.h.DIRECTIVE:this._directive=t.getDirective(e.name.value);break;case r.h.OPERATION_DEFINITION:{const n=t.getRootType(e.operation);this._typeStack.push((0,s.lp)(n)?n:void 0);break}case r.h.INLINE_FRAGMENT:case r.h.FRAGMENT_DEFINITION:{const n=e.typeCondition,i=n?(0,c._)(t,n):(0,s.xC)(this.getType());this._typeStack.push((0,s.SZ)(i)?i:void 0);break}case r.h.VARIABLE_DEFINITION:{const n=(0,c._)(t,e.type);this._inputTypeStack.push((0,s.j$)(n)?n:void 0);break}case r.h.ARGUMENT:{var n;let t,i;const r=null!==(n=this.getDirective())&&void 0!==n?n:this.getFieldDef();r&&(t=r.args.find((t=>t.name===e.name.value)),t&&(i=t.type)),this._argument=t,this._defaultValueStack.push(t?t.defaultValue:void 0),this._inputTypeStack.push((0,s.j$)(i)?i:void 0);break}case r.h.LIST:{const e=(0,s.tf)(this.getInputType()),t=(0,s.HG)(e)?e.ofType:e;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.j$)(t)?t:void 0);break}case r.h.OBJECT_FIELD:{const t=(0,s.xC)(this.getInputType());let n,i;(0,s.hL)(t)&&(i=t.getFields()[e.name.value],i&&(n=i.type)),this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push((0,s.j$)(n)?n:void 0);break}case r.h.ENUM:{const t=(0,s.xC)(this.getInputType());let n;(0,s.EM)(t)&&(n=t.getValue(e.value)),this._enumValue=n;break}}}leave(e){switch(e.kind){case r.h.SELECTION_SET:this._parentTypeStack.pop();break;case r.h.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case r.h.DIRECTIVE:this._directive=null;break;case r.h.OPERATION_DEFINITION:case r.h.INLINE_FRAGMENT:case r.h.FRAGMENT_DEFINITION:this._typeStack.pop();break;case r.h.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case r.h.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.h.LIST:case r.h.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case r.h.ENUM:this._enumValue=null}}}function u(e,t,n){const i=n.name.value;return i===a.Az.name&&e.getQueryType()===t?a.Az:i===a.tF.name&&e.getQueryType()===t?a.tF:i===a.hU.name&&(0,s.Gv)(t)?a.hU:(0,s.lp)(t)||(0,s.oT)(t)?t.getFields()[i]:void 0}function p(e,t){return{enter(...n){const r=n[0];e.enter(r);const s=(0,o.Eu)(t,r.kind).enter;if(s){const o=s.apply(t,n);return void 0!==o&&(e.leave(r),(0,i.UG)(o)&&e.enter(o)),o}},leave(...n){const i=n[0],r=(0,o.Eu)(t,i.kind).leave;let s;return r&&(s=r.apply(t,n)),e.leave(i),s}}}},8631:(e,t,n)=>{"use strict";n.d(t,{J:()=>u});var i=n(5821),r=n(9551),o=n(3831),s=n(8495),a=n(7359),c=n(398),l=n(3801);function u(e,t){if((0,c.zM)(t)){const n=u(e,t.ofType);return(null==n?void 0:n.kind)===a.h.NULL?null:n}if(null===e)return{kind:a.h.NULL};if(void 0===e)return null;if((0,c.HG)(t)){const n=t.ofType;if((0,o.i)(e)){const t=[];for(const i of e){const e=u(i,n);null!=e&&t.push(e)}return{kind:a.h.LIST,values:t}}return u(e,n)}if((0,c.hL)(t)){if(!(0,s.y)(e))return null;const n=[];for(const i of Object.values(t.getFields())){const t=u(e[i.name],i.type);t&&n.push({kind:a.h.OBJECT_FIELD,name:{kind:a.h.NAME,value:i.name},value:t})}return{kind:a.h.OBJECT,fields:n}}if((0,c.UT)(t)){const n=t.serialize(e);if(null==n)return null;if("boolean"==typeof n)return{kind:a.h.BOOLEAN,value:n};if("number"==typeof n&&Number.isFinite(n)){const e=String(n);return p.test(e)?{kind:a.h.INT,value:e}:{kind:a.h.FLOAT,value:e}}if("string"==typeof n)return(0,c.EM)(t)?{kind:a.h.ENUM,value:n}:t===l.km&&p.test(n)?{kind:a.h.INT,value:n}:{kind:a.h.STRING,value:n};throw new TypeError(`Cannot convert value to AST: ${(0,i.X)(n)}.`)}(0,r.k)(!1,"Unexpected input type: "+(0,i.X)(t))}const p=/^-?(?:0|[1-9][0-9]*)$/},6535:(e,t,n)=>{"use strict";n.d(t,{I:()=>p,M:()=>u});var i=n(7826),r=n(7359),o=n(4275),s=n(8238),a=n(9678),c=n(6584),l=n(9557);function u(e,t){null!=e&&e.kind===r.h.DOCUMENT||(0,i.a)(!1,"Must provide valid Document AST."),!0!==(null==t?void 0:t.assumeValid)&&!0!==(null==t?void 0:t.assumeValidSDL)&&(0,c.zo)(e);const n={description:void 0,types:[],directives:[],extensions:Object.create(null),extensionASTNodes:[],assumeValid:!1},o=(0,l.w)(n,e,t);if(null==o.astNode)for(const e of o.types)switch(e.name){case"Query":o.query=e;break;case"Mutation":o.mutation=e;break;case"Subscription":o.subscription=e}const u=[...o.directives,...s.V4.filter((e=>o.directives.every((t=>t.name!==e.name))))];return new a.XO({...o,directives:u})}function p(e,t){return u((0,o.Qc)(e,{noLocation:null==t?void 0:t.noLocation,allowLegacyFragmentVariables:null==t?void 0:t.allowLegacyFragmentVariables}),{assumeValidSDL:null==t?void 0:t.assumeValidSDL,assumeValid:null==t?void 0:t.assumeValid})}},7816:(e,t,n)=>{"use strict";n.d(t,{K:()=>f});var i=n(3177),r=n(5821),o=n(9551),s=n(3831),a=n(8495),c=n(9380),l=n(4244),u=n(3294),p=n(8087),d=n(398);function f(e,t,n=h){return m(e,t,n,void 0)}function h(e,t,n){let i="Invalid value "+(0,r.X)(t);throw e.length>0&&(i+=` at "value${(0,l.F)(e)}"`),n.message=i+": "+n.message,n}function m(e,t,n,l){if((0,d.zM)(t))return null!=e?m(e,t.ofType,n,l):void n((0,c.N)(l),e,new p.__(`Expected non-nullable type "${(0,r.X)(t)}" not to be null.`));if(null==e)return null;if((0,d.HG)(t)){const i=t.ofType;return(0,s.i)(e)?Array.from(e,((e,t)=>{const r=(0,c.Q)(l,t,void 0);return m(e,i,n,r)})):[m(e,i,n,l)]}if((0,d.hL)(t)){if(!(0,a.y)(e))return void n((0,c.N)(l),e,new p.__(`Expected type "${t.name}" to be an object.`));const o={},s=t.getFields();for(const i of Object.values(s)){const s=e[i.name];if(void 0!==s)o[i.name]=m(s,i.type,n,(0,c.Q)(l,i.name,t.name));else if(void 0!==i.defaultValue)o[i.name]=i.defaultValue;else if((0,d.zM)(i.type)){const t=(0,r.X)(i.type);n((0,c.N)(l),e,new p.__(`Field "${i.name}" of required type "${t}" was not provided.`))}}for(const r of Object.keys(e))if(!s[r]){const o=(0,u.D)(r,Object.keys(t.getFields()));n((0,c.N)(l),e,new p.__(`Field "${r}" is not defined by type "${t.name}".`+(0,i.l)(o)))}return o}if((0,d.UT)(t)){let i;try{i=t.parseValue(e)}catch(i){return void(i instanceof p.__?n((0,c.N)(l),e,i):n((0,c.N)(l),e,new p.__(`Expected type "${t.name}". `+i.message,{originalError:i})))}return void 0===i&&n((0,c.N)(l),e,new p.__(`Expected type "${t.name}".`)),i}(0,o.k)(!1,"Unexpected input type: "+(0,r.X)(t))}},9557:(e,t,n)=>{"use strict";n.d(t,{a:()=>E,w:()=>T});var i=n(7826),r=n(5821),o=n(9551),s=n(3498),a=n(5723),c=n(7359),l=n(5844),u=n(398),p=n(8238),d=n(2433),f=n(3801),h=n(9678),m=n(6584),y=n(6422),v=n(2221);function E(e,t,n){(0,h.EO)(e),null!=t&&t.kind===c.h.DOCUMENT||(0,i.a)(!1,"Must provide valid Document AST."),!0!==(null==n?void 0:n.assumeValid)&&!0!==(null==n?void 0:n.assumeValidSDL)&&(0,m.ED)(t,e);const r=e.toConfig(),o=T(r,t,n);return r===o?e:new h.XO(o)}function T(e,t,n){var i,s,h,m;const y=[],E=Object.create(null),T=[];let b;const _=[];for(const e of t.definitions)if(e.kind===c.h.SCHEMA_DEFINITION)b=e;else if(e.kind===c.h.SCHEMA_EXTENSION)_.push(e);else if((0,l.zT)(e))y.push(e);else if((0,l.D$)(e)){const t=e.name.value,n=E[t];E[t]=n?n.concat([e]):[e]}else e.kind===c.h.DIRECTIVE_DEFINITION&&T.push(e);if(0===Object.keys(E).length&&0===y.length&&0===T.length&&0===_.length&&null==b)return e;const S=Object.create(null);for(const t of e.types)S[t.name]=(O=t,(0,d.s9)(O)||(0,f.u1)(O)?O:(0,u.KA)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];let r=n.specifiedByURL;for(const e of i){var o;r=null!==(o=N(e))&&void 0!==o?o:r}return new u.n2({...n,specifiedByURL:r,extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.lp)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.h6({...n,interfaces:()=>[...e.getInterfaces().map(w),...U(i)],fields:()=>({...(0,a.j)(n.fields,L),...C(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.oT)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.oW({...n,interfaces:()=>[...e.getInterfaces().map(w),...U(i)],fields:()=>({...(0,a.j)(n.fields,L),...C(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.EN)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.Gp({...n,types:()=>[...e.getTypes().map(w),...V(i)],extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.EM)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[e.name])&&void 0!==t?t:[];return new u.mR({...n,values:{...n.values,...P(i)},extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):(0,u.hL)(O)?function(e){var t;const n=e.toConfig(),i=null!==(t=E[n.name])&&void 0!==t?t:[];return new u.sR({...n,fields:()=>({...(0,a.j)(n.fields,(e=>({...e,type:R(e.type)}))),...M(i)}),extensionASTNodes:n.extensionASTNodes.concat(i)})}(O):void(0,o.k)(!1,"Unexpected type: "+(0,r.X)(O)));var O;for(const e of y){var D;const t=e.name.value;S[t]=null!==(D=g[t])&&void 0!==D?D:G(e)}const A={query:e.query&&w(e.query),mutation:e.mutation&&w(e.mutation),subscription:e.subscription&&w(e.subscription),...b&&x([b]),...x(_)};return{description:null===(i=b)||void 0===i||null===(s=i.description)||void 0===s?void 0:s.value,...A,types:Object.values(S),directives:[...e.directives.map((function(e){const t=e.toConfig();return new p.NZ({...t,args:(0,a.j)(t.args,F)})})),...T.map((function(e){var t;return new p.NZ({name:e.name.value,description:null===(t=e.description)||void 0===t?void 0:t.value,locations:e.locations.map((({value:e})=>e)),isRepeatable:e.repeatable,args:j(e.arguments),astNode:e})}))],extensions:Object.create(null),astNode:null!==(h=b)&&void 0!==h?h:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(_),assumeValid:null!==(m=null==n?void 0:n.assumeValid)&&void 0!==m&&m};function R(e){return(0,u.HG)(e)?new u.p2(R(e.ofType)):(0,u.zM)(e)?new u.bM(R(e.ofType)):w(e)}function w(e){return S[e.name]}function L(e){return{...e,type:R(e.type),args:e.args&&(0,a.j)(e.args,F)}}function F(e){return{...e,type:R(e.type)}}function x(e){const t={};for(const i of e){var n;const e=null!==(n=i.operationTypes)&&void 0!==n?n:[];for(const n of e)t[n.operation]=k(n.type)}return t}function k(e){var t;const n=e.name.value,i=null!==(t=g[n])&&void 0!==t?t:S[n];if(void 0===i)throw new Error(`Unknown type: "${n}".`);return i}function $(e){return e.kind===c.h.LIST_TYPE?new u.p2($(e.type)):e.kind===c.h.NON_NULL_TYPE?new u.bM($(e.type)):k(e)}function C(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.fields)&&void 0!==n?n:[];for(const n of e){var i;t[n.name.value]={type:$(n.type),description:null===(i=n.description)||void 0===i?void 0:i.value,args:j(n.arguments),deprecationReason:I(n),astNode:n}}}return t}function j(e){const t=null!=e?e:[],n=Object.create(null);for(const e of t){var i;const t=$(e.type);n[e.name.value]={type:t,description:null===(i=e.description)||void 0===i?void 0:i.value,defaultValue:(0,v.u)(e.defaultValue,t),deprecationReason:I(e),astNode:e}}return n}function M(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.fields)&&void 0!==n?n:[];for(const n of e){var i;const e=$(n.type);t[n.name.value]={type:e,description:null===(i=n.description)||void 0===i?void 0:i.value,defaultValue:(0,v.u)(n.defaultValue,e),deprecationReason:I(n),astNode:n}}}return t}function P(e){const t=Object.create(null);for(const r of e){var n;const e=null!==(n=r.values)&&void 0!==n?n:[];for(const n of e){var i;t[n.name.value]={description:null===(i=n.description)||void 0===i?void 0:i.value,deprecationReason:I(n),astNode:n}}}return t}function U(e){return e.flatMap((e=>{var t,n;return null!==(t=null===(n=e.interfaces)||void 0===n?void 0:n.map(k))&&void 0!==t?t:[]}))}function V(e){return e.flatMap((e=>{var t,n;return null!==(t=null===(n=e.types)||void 0===n?void 0:n.map(k))&&void 0!==t?t:[]}))}function G(e){var t;const n=e.name.value,i=null!==(t=E[n])&&void 0!==t?t:[];switch(e.kind){case c.h.OBJECT_TYPE_DEFINITION:{var r;const t=[e,...i];return new u.h6({name:n,description:null===(r=e.description)||void 0===r?void 0:r.value,interfaces:()=>U(t),fields:()=>C(t),astNode:e,extensionASTNodes:i})}case c.h.INTERFACE_TYPE_DEFINITION:{var o;const t=[e,...i];return new u.oW({name:n,description:null===(o=e.description)||void 0===o?void 0:o.value,interfaces:()=>U(t),fields:()=>C(t),astNode:e,extensionASTNodes:i})}case c.h.ENUM_TYPE_DEFINITION:{var s;const t=[e,...i];return new u.mR({name:n,description:null===(s=e.description)||void 0===s?void 0:s.value,values:P(t),astNode:e,extensionASTNodes:i})}case c.h.UNION_TYPE_DEFINITION:{var a;const t=[e,...i];return new u.Gp({name:n,description:null===(a=e.description)||void 0===a?void 0:a.value,types:()=>V(t),astNode:e,extensionASTNodes:i})}case c.h.SCALAR_TYPE_DEFINITION:var l;return new u.n2({name:n,description:null===(l=e.description)||void 0===l?void 0:l.value,specifiedByURL:N(e),astNode:e,extensionASTNodes:i});case c.h.INPUT_OBJECT_TYPE_DEFINITION:{var p;const t=[e,...i];return new u.sR({name:n,description:null===(p=e.description)||void 0===p?void 0:p.value,fields:()=>M(t),astNode:e,extensionASTNodes:i})}}}}const g=(0,s.P)([...f.HS,...d.nL],(e=>e.name));function I(e){const t=(0,y.zu)(p.fg,e);return null==t?void 0:t.reason}function N(e){const t=(0,y.zu)(p.df,e);return null==t?void 0:t.url}},8360:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var i=n(8224),r=n(7359);function o(e){switch(e.kind){case r.h.OBJECT:return{...e,fields:(t=e.fields,t.map((e=>({...e,value:o(e.value)}))).sort(((e,t)=>(0,i.K)(e.name.value,t.name.value))))};case r.h.LIST:return{...e,values:e.values.map(o)};case r.h.INT:case r.h.FLOAT:case r.h.STRING:case r.h.BOOLEAN:case r.h.NULL:case r.h.ENUM:case r.h.VARIABLE:return e}var t}},316:(e,t,n)=>{"use strict";n.d(t,{_7:()=>r,uJ:()=>o,zR:()=>s});var i=n(398);function r(e,t){return e===t||((0,i.zM)(e)&&(0,i.zM)(t)||!(!(0,i.HG)(e)||!(0,i.HG)(t)))&&r(e.ofType,t.ofType)}function o(e,t,n){return t===n||((0,i.zM)(n)?!!(0,i.zM)(t)&&o(e,t.ofType,n.ofType):(0,i.zM)(t)?o(e,t.ofType,n):(0,i.HG)(n)?!!(0,i.HG)(t)&&o(e,t.ofType,n.ofType):!(0,i.HG)(t)&&(0,i.m0)(n)&&((0,i.oT)(t)||(0,i.lp)(t))&&e.isSubType(n,t))}function s(e,t,n){return t===n||((0,i.m0)(t)?(0,i.m0)(n)?e.getPossibleTypes(t).some((t=>e.isSubType(n,t))):e.isSubType(t,n):!!(0,i.m0)(n)&&e.isSubType(n,t))}},77:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var i=n(7359),r=n(398);function o(e,t){switch(t.kind){case i.h.LIST_TYPE:{const n=o(e,t.type);return n&&new r.p2(n)}case i.h.NON_NULL_TYPE:{const n=o(e,t.type);return n&&new r.bM(n)}case i.h.NAMED_TYPE:return e.getType(t.name.value)}}},2221:(e,t,n)=>{"use strict";n.d(t,{u:()=>c});var i=n(5821),r=n(9551),o=n(3498),s=n(7359),a=n(398);function c(e,t,n){if(e){if(e.kind===s.h.VARIABLE){const i=e.name.value;if(null==n||void 0===n[i])return;const r=n[i];if(null===r&&(0,a.zM)(t))return;return r}if((0,a.zM)(t)){if(e.kind===s.h.NULL)return;return c(e,t.ofType,n)}if(e.kind===s.h.NULL)return null;if((0,a.HG)(t)){const i=t.ofType;if(e.kind===s.h.LIST){const t=[];for(const r of e.values)if(l(r,n)){if((0,a.zM)(i))return;t.push(null)}else{const e=c(r,i,n);if(void 0===e)return;t.push(e)}return t}const r=c(e,i,n);if(void 0===r)return;return[r]}if((0,a.hL)(t)){if(e.kind!==s.h.OBJECT)return;const i=Object.create(null),r=(0,o.P)(e.fields,(e=>e.name.value));for(const e of Object.values(t.getFields())){const t=r[e.name];if(!t||l(t.value,n)){if(void 0!==e.defaultValue)i[e.name]=e.defaultValue;else if((0,a.zM)(e.type))return;continue}const o=c(t.value,e.type,n);if(void 0===o)return;i[e.name]=o}return i}if((0,a.UT)(t)){let i;try{i=t.parseLiteral(e,n)}catch(e){return}if(void 0===i)return;return i}(0,r.k)(!1,"Unexpected input type: "+(0,i.X)(t))}}function l(e,t){return e.kind===s.h.VARIABLE&&(null==t||void 0===t[e.name.value])}},2319:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var i=n(4950),r=n(7359);function o(e,t){switch(e.kind){case r.h.NULL:return null;case r.h.INT:return parseInt(e.value,10);case r.h.FLOAT:return parseFloat(e.value);case r.h.STRING:case r.h.ENUM:case r.h.BOOLEAN:return e.value;case r.h.LIST:return e.values.map((e=>o(e,t)));case r.h.OBJECT:return(0,i.w)(e.fields,(e=>e.name.value),(e=>o(e.value,t)));case r.h.VARIABLE:return null==t?void 0:t[e.name.value]}}},2734:(e,t,n)=>{"use strict";n.d(t,{_t:()=>c,yv:()=>a});var i=n(7359),r=n(7304),o=n(2676);class s{constructor(e,t){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=t}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(e){this._onError(e)}getDocument(){return this._ast}getFragment(e){let t;if(this._fragments)t=this._fragments;else{t=Object.create(null);for(const e of this.getDocument().definitions)e.kind===i.h.FRAGMENT_DEFINITION&&(t[e.name.value]=e);this._fragments=t}return t[e]}getFragmentSpreads(e){let t=this._fragmentSpreads.get(e);if(!t){t=[];const n=[e];let r;for(;r=n.pop();)for(const e of r.selections)e.kind===i.h.FRAGMENT_SPREAD?t.push(e):e.selectionSet&&n.push(e.selectionSet);this._fragmentSpreads.set(e,t)}return t}getRecursivelyReferencedFragments(e){let t=this._recursivelyReferencedFragments.get(e);if(!t){t=[];const n=Object.create(null),i=[e.selectionSet];let r;for(;r=i.pop();)for(const e of this.getFragmentSpreads(r)){const r=e.name.value;if(!0!==n[r]){n[r]=!0;const e=this.getFragment(r);e&&(t.push(e),i.push(e.selectionSet))}}this._recursivelyReferencedFragments.set(e,t)}return t}}class a extends s{constructor(e,t,n){super(e,n),this._schema=t}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}class c extends s{constructor(e,t,n,i){super(t,i),this._schema=e,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(e){let t=this._variableUsages.get(e);if(!t){const n=[],i=new o.a(this._schema);(0,r.Vn)(e,(0,o.y)(i,{VariableDefinition:()=>!1,Variable(e){n.push({node:e,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),t=n,this._variableUsages.set(e,t)}return t}getRecursiveVariableUsages(e){let t=this._recursiveVariableUsages.get(e);if(!t){t=this.getVariableUsages(e);for(const n of this.getRecursivelyReferencedFragments(e))t=t.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(e,t)}return t}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}},8081:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var i=n(8087),r=n(7359),o=n(5844);function s(e){return{Document(t){for(const n of t.definitions)if(!(0,o.Wk)(n)){const t=n.kind===r.h.SCHEMA_DEFINITION||n.kind===r.h.SCHEMA_EXTENSION?"schema":'"'+n.name.value+'"';e.reportError(new i.__(`The ${t} definition is not executable.`,{nodes:n}))}return!1}}}},8741:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var i=n(3177),r=n(8224),o=n(3294),s=n(8087),a=n(398);function c(e){return{Field(t){const n=e.getParentType();if(n&&!e.getFieldDef()){const c=e.getSchema(),l=t.name.value;let u=(0,i.l)("to use an inline fragment on",function(e,t,n){if(!(0,a.m0)(t))return[];const i=new Set,o=Object.create(null);for(const r of e.getPossibleTypes(t))if(r.getFields()[n]){i.add(r),o[r.name]=1;for(const e of r.getInterfaces()){var s;e.getFields()[n]&&(i.add(e),o[e.name]=(null!==(s=o[e.name])&&void 0!==s?s:0)+1)}}return[...i].sort(((t,n)=>{const i=o[n.name]-o[t.name];return 0!==i?i:(0,a.oT)(t)&&e.isSubType(t,n)?-1:(0,a.oT)(n)&&e.isSubType(n,t)?1:(0,r.K)(t.name,n.name)})).map((e=>e.name))}(c,n,l));""===u&&(u=(0,i.l)(function(e,t){if((0,a.lp)(e)||(0,a.oT)(e)){const n=Object.keys(e.getFields());return(0,o.D)(t,n)}return[]}(n,l))),e.reportError(new s.__(`Cannot query field "${l}" on type "${n.name}".`+u,{nodes:t}))}}}}},7143:(e,t,n)=>{"use strict";n.d(t,{T:()=>a});var i=n(8087),r=n(3486),o=n(398),s=n(77);function a(e){return{InlineFragment(t){const n=t.typeCondition;if(n){const t=(0,s._)(e.getSchema(),n);if(t&&!(0,o.Gv)(t)){const t=(0,r.S)(n);e.reportError(new i.__(`Fragment cannot condition on non composite type "${t}".`,{nodes:n}))}}},FragmentDefinition(t){const n=(0,s._)(e.getSchema(),t.typeCondition);if(n&&!(0,o.Gv)(n)){const n=(0,r.S)(t.typeCondition);e.reportError(new i.__(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}}},7815:(e,t,n)=>{"use strict";n.d(t,{e:()=>c,o:()=>l});var i=n(3177),r=n(3294),o=n(8087),s=n(7359),a=n(8238);function c(e){return{...l(e),Argument(t){const n=e.getArgument(),s=e.getFieldDef(),a=e.getParentType();if(!n&&s&&a){const n=t.name.value,c=s.args.map((e=>e.name)),l=(0,r.D)(n,c);e.reportError(new o.__(`Unknown argument "${n}" on field "${a.name}.${s.name}".`+(0,i.l)(l),{nodes:t}))}}}}function l(e){const t=Object.create(null),n=e.getSchema(),c=n?n.getDirectives():a.V4;for(const e of c)t[e.name]=e.args.map((e=>e.name));const l=e.getDocument().definitions;for(const e of l)if(e.kind===s.h.DIRECTIVE_DEFINITION){var u;const n=null!==(u=e.arguments)&&void 0!==u?u:[];t[e.name.value]=n.map((e=>e.name.value))}return{Directive(n){const s=n.name.value,a=t[s];if(n.arguments&&a)for(const t of n.arguments){const n=t.name.value;if(!a.includes(n)){const c=(0,r.D)(n,a);e.reportError(new o.__(`Unknown argument "${n}" on directive "@${s}".`+(0,i.l)(c),{nodes:t}))}}return!1}}}},4873:(e,t,n)=>{"use strict";n.d(t,{J:()=>u});var i=n(5821),r=n(9551),o=n(8087),s=n(2380),a=n(9878),c=n(7359),l=n(8238);function u(e){const t=Object.create(null),n=e.getSchema(),u=n?n.getDirectives():l.V4;for(const e of u)t[e.name]=e.locations;const p=e.getDocument().definitions;for(const e of p)e.kind===c.h.DIRECTIVE_DEFINITION&&(t[e.name.value]=e.locations.map((e=>e.value)));return{Directive(n,l,u,p,d){const f=n.name.value,h=t[f];if(!h)return void e.reportError(new o.__(`Unknown directive "@${f}".`,{nodes:n}));const m=function(e){const t=e[e.length-1];switch("kind"in t||(0,r.k)(!1),t.kind){case c.h.OPERATION_DEFINITION:return function(e){switch(e){case s.ku.QUERY:return a.B.QUERY;case s.ku.MUTATION:return a.B.MUTATION;case s.ku.SUBSCRIPTION:return a.B.SUBSCRIPTION}}(t.operation);case c.h.FIELD:return a.B.FIELD;case c.h.FRAGMENT_SPREAD:return a.B.FRAGMENT_SPREAD;case c.h.INLINE_FRAGMENT:return a.B.INLINE_FRAGMENT;case c.h.FRAGMENT_DEFINITION:return a.B.FRAGMENT_DEFINITION;case c.h.VARIABLE_DEFINITION:return a.B.VARIABLE_DEFINITION;case c.h.SCHEMA_DEFINITION:case c.h.SCHEMA_EXTENSION:return a.B.SCHEMA;case c.h.SCALAR_TYPE_DEFINITION:case c.h.SCALAR_TYPE_EXTENSION:return a.B.SCALAR;case c.h.OBJECT_TYPE_DEFINITION:case c.h.OBJECT_TYPE_EXTENSION:return a.B.OBJECT;case c.h.FIELD_DEFINITION:return a.B.FIELD_DEFINITION;case c.h.INTERFACE_TYPE_DEFINITION:case c.h.INTERFACE_TYPE_EXTENSION:return a.B.INTERFACE;case c.h.UNION_TYPE_DEFINITION:case c.h.UNION_TYPE_EXTENSION:return a.B.UNION;case c.h.ENUM_TYPE_DEFINITION:case c.h.ENUM_TYPE_EXTENSION:return a.B.ENUM;case c.h.ENUM_VALUE_DEFINITION:return a.B.ENUM_VALUE;case c.h.INPUT_OBJECT_TYPE_DEFINITION:case c.h.INPUT_OBJECT_TYPE_EXTENSION:return a.B.INPUT_OBJECT;case c.h.INPUT_VALUE_DEFINITION:{const t=e[e.length-3];return"kind"in t||(0,r.k)(!1),t.kind===c.h.INPUT_OBJECT_TYPE_DEFINITION?a.B.INPUT_FIELD_DEFINITION:a.B.ARGUMENT_DEFINITION}default:(0,r.k)(!1,"Unexpected kind: "+(0,i.X)(t.kind))}}(d);m&&!h.includes(m)&&e.reportError(new o.__(`Directive "@${f}" may not be used on ${m}.`,{nodes:n}))}}}},5311:(e,t,n)=>{"use strict";n.d(t,{a:()=>r});var i=n(8087);function r(e){return{FragmentSpread(t){const n=t.name.value;e.getFragment(n)||e.reportError(new i.__(`Unknown fragment "${n}".`,{nodes:t.name}))}}}},5580:(e,t,n)=>{"use strict";n.d(t,{I:()=>c});var i=n(3177),r=n(3294),o=n(8087),s=n(5844),a=n(2433);function c(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),a=Object.create(null);for(const t of e.getDocument().definitions)(0,s.zT)(t)&&(a[t.name.value]=!0);const c=[...Object.keys(n),...Object.keys(a)];return{NamedType(t,u,p,d,f){const h=t.name.value;if(!n[h]&&!a[h]){var m;const n=null!==(m=f[2])&&void 0!==m?m:p,a=null!=n&&"kind"in(y=n)&&((0,s.G4)(y)||(0,s.aU)(y));if(a&&l.includes(h))return;const u=(0,r.D)(h,a?l.concat(c):c);e.reportError(new o.__(`Unknown type "${h}".`+(0,i.l)(u),{nodes:t}))}var y}}}const l=[...n(3801).HS,...a.nL].map((e=>e.name))},7898:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var i=n(8087),r=n(7359);function o(e){let t=0;return{Document(e){t=e.definitions.filter((e=>e.kind===r.h.OPERATION_DEFINITION)).length},OperationDefinition(n){!n.name&&t>1&&e.reportError(new i.__("This anonymous operation must be the only defined operation.",{nodes:n}))}}}},2877:(e,t,n)=>{"use strict";n.d(t,{t:()=>r});var i=n(8087);function r(e){var t,n,r;const o=e.getSchema(),s=null!==(t=null!==(n=null!==(r=null==o?void 0:o.astNode)&&void 0!==r?r:null==o?void 0:o.getQueryType())&&void 0!==n?n:null==o?void 0:o.getMutationType())&&void 0!==t?t:null==o?void 0:o.getSubscriptionType();let a=0;return{SchemaDefinition(t){s?e.reportError(new i.__("Cannot define a new schema within a schema extension.",{nodes:t})):(a>0&&e.reportError(new i.__("Must provide only one schema definition.",{nodes:t})),++a)}}}},1422:(e,t,n)=>{"use strict";n.d(t,{H:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=[],r=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition:e=>(o(e),!1)};function o(s){if(t[s.name.value])return;const a=s.name.value;t[a]=!0;const c=e.getFragmentSpreads(s.selectionSet);if(0!==c.length){r[a]=n.length;for(const t of c){const s=t.name.value,a=r[s];if(n.push(t),void 0===a){const t=e.getFragment(s);t&&o(t)}else{const t=n.slice(a),r=t.slice(0,-1).map((e=>'"'+e.name.value+'"')).join(", ");e.reportError(new i.__(`Cannot spread fragment "${s}" within itself`+(""!==r?` via ${r}.`:"."),{nodes:t}))}n.pop()}r[a]=void 0}}}},4790:(e,t,n)=>{"use strict";n.d(t,{$:()=>r});var i=n(8087);function r(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const r=e.getRecursiveVariableUsages(n);for(const{node:o}of r){const r=o.name.value;!0!==t[r]&&e.reportError(new i.__(n.name?`Variable "$${r}" is not defined by operation "${n.name.value}".`:`Variable "$${r}" is not defined.`,{nodes:[o,n]}))}}},VariableDefinition(e){t[e.variable.name.value]=!0}}}},1294:(e,t,n)=>{"use strict";n.d(t,{J:()=>r});var i=n(8087);function r(e){const t=[],n=[];return{OperationDefinition:e=>(t.push(e),!1),FragmentDefinition:e=>(n.push(e),!1),Document:{leave(){const r=Object.create(null);for(const n of t)for(const t of e.getRecursivelyReferencedFragments(n))r[t.name.value]=!0;for(const t of n){const n=t.name.value;!0!==r[n]&&e.reportError(new i.__(`Fragment "${n}" is never used.`,{nodes:t}))}}}}}},2283:(e,t,n)=>{"use strict";n.d(t,{p:()=>r});var i=n(8087);function r(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(n){const r=Object.create(null),o=e.getRecursiveVariableUsages(n);for(const{node:e}of o)r[e.name.value]=!0;for(const o of t){const t=o.variable.name.value;!0!==r[t]&&e.reportError(new i.__(n.name?`Variable "$${t}" is never used in operation "${n.name.value}".`:`Variable "$${t}" is never used.`,{nodes:o}))}}},VariableDefinition(e){t.push(e)}}}},4203:(e,t,n)=>{"use strict";n.d(t,{y:()=>p});var i=n(5821),r=n(8087),o=n(7359),s=n(3486),a=n(398),c=n(8360),l=n(77);function u(e){return Array.isArray(e)?e.map((([e,t])=>`subfields "${e}" conflict because `+u(t))).join(" and "):e}function p(e){const t=new I,n=new Map;return{SelectionSet(i){const o=function(e,t,n,i,r){const o=[],[s,a]=E(e,t,i,r);if(function(e,t,n,i,r){for(const[o,s]of Object.entries(r))if(s.length>1)for(let r=0;r<s.length;r++)for(let a=r+1;a<s.length;a++){const c=m(e,n,i,!1,o,s[r],s[a]);c&&t.push(c)}}(e,o,t,n,s),0!==a.length)for(let i=0;i<a.length;i++){d(e,o,t,n,!1,s,a[i]);for(let r=i+1;r<a.length;r++)f(e,o,t,n,!1,a[i],a[r])}return o}(e,n,t,e.getParentType(),i);for(const[[t,n],i,s]of o){const o=u(n);e.reportError(new r.__(`Fields "${t}" conflict because ${o}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:i.concat(s)}))}}}}function d(e,t,n,i,r,o,s){const a=e.getFragment(s);if(!a)return;const[c,l]=T(e,n,a);if(o!==c){h(e,t,n,i,r,o,c);for(const a of l)i.has(a,s,r)||(i.add(a,s,r),d(e,t,n,i,r,o,a))}}function f(e,t,n,i,r,o,s){if(o===s)return;if(i.has(o,s,r))return;i.add(o,s,r);const a=e.getFragment(o),c=e.getFragment(s);if(!a||!c)return;const[l,u]=T(e,n,a),[p,d]=T(e,n,c);h(e,t,n,i,r,l,p);for(const s of d)f(e,t,n,i,r,o,s);for(const o of u)f(e,t,n,i,r,o,s)}function h(e,t,n,i,r,o,s){for(const[a,c]of Object.entries(o)){const o=s[a];if(o)for(const s of c)for(const c of o){const o=m(e,n,i,r,a,s,c);o&&t.push(o)}}}function m(e,t,n,r,o,s,c){const[l,u,p]=s,[m,T,g]=c,I=r||l!==m&&(0,a.lp)(l)&&(0,a.lp)(m);if(!I){const e=u.name.value,t=T.name.value;if(e!==t)return[[o,`"${e}" and "${t}" are different fields`],[u],[T]];if(y(u)!==y(T))return[[o,"they have differing arguments"],[u],[T]]}const N=null==p?void 0:p.type,b=null==g?void 0:g.type;if(N&&b&&v(N,b))return[[o,`they return conflicting types "${(0,i.X)(N)}" and "${(0,i.X)(b)}"`],[u],[T]];const _=u.selectionSet,S=T.selectionSet;if(_&&S){const i=function(e,t,n,i,r,o,s,a){const c=[],[l,u]=E(e,t,r,o),[p,m]=E(e,t,s,a);h(e,c,t,n,i,l,p);for(const r of m)d(e,c,t,n,i,l,r);for(const r of u)d(e,c,t,n,i,p,r);for(const r of u)for(const o of m)f(e,c,t,n,i,r,o);return c}(e,t,n,I,(0,a.xC)(N),_,(0,a.xC)(b),S);return function(e,t,n,i){if(e.length>0)return[[t,e.map((([e])=>e))],[n,...e.map((([,e])=>e)).flat()],[i,...e.map((([,,e])=>e)).flat()]]}(i,o,u,T)}}function y(e){var t;const n=null!==(t=e.arguments)&&void 0!==t?t:[],i={kind:o.h.OBJECT,fields:n.map((e=>({kind:o.h.OBJECT_FIELD,name:e.name,value:e.value})))};return(0,s.S)((0,c.n)(i))}function v(e,t){return(0,a.HG)(e)?!(0,a.HG)(t)||v(e.ofType,t.ofType):!!(0,a.HG)(t)||((0,a.zM)(e)?!(0,a.zM)(t)||v(e.ofType,t.ofType):!!(0,a.zM)(t)||!(!(0,a.UT)(e)&&!(0,a.UT)(t))&&e!==t)}function E(e,t,n,i){const r=t.get(i);if(r)return r;const o=Object.create(null),s=Object.create(null);g(e,n,i,o,s);const a=[o,Object.keys(s)];return t.set(i,a),a}function T(e,t,n){const i=t.get(n.selectionSet);if(i)return i;const r=(0,l._)(e.getSchema(),n.typeCondition);return E(e,t,r,n.selectionSet)}function g(e,t,n,i,r){for(const s of n.selections)switch(s.kind){case o.h.FIELD:{const e=s.name.value;let n;((0,a.lp)(t)||(0,a.oT)(t))&&(n=t.getFields()[e]);const r=s.alias?s.alias.value:e;i[r]||(i[r]=[]),i[r].push([t,s,n]);break}case o.h.FRAGMENT_SPREAD:r[s.name.value]=!0;break;case o.h.INLINE_FRAGMENT:{const n=s.typeCondition,o=n?(0,l._)(e.getSchema(),n):t;g(e,o,s.selectionSet,i,r);break}}}class I{constructor(){this._data=new Map}has(e,t,n){var i;const[r,o]=e<t?[e,t]:[t,e],s=null===(i=this._data.get(r))||void 0===i?void 0:i.get(o);return void 0!==s&&(!!n||n===s)}add(e,t,n){const[i,r]=e<t?[e,t]:[t,e],o=this._data.get(i);void 0===o?this._data.set(i,new Map([[r,n]])):o.set(r,n)}}},3259:(e,t,n)=>{"use strict";n.d(t,{a:()=>c});var i=n(5821),r=n(8087),o=n(398),s=n(316),a=n(77);function c(e){return{InlineFragment(t){const n=e.getType(),a=e.getParentType();if((0,o.Gv)(n)&&(0,o.Gv)(a)&&!(0,s.zR)(e.getSchema(),n,a)){const o=(0,i.X)(a),s=(0,i.X)(n);e.reportError(new r.__(`Fragment cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}},FragmentSpread(t){const n=t.name.value,c=function(e,t){const n=e.getFragment(t);if(n){const t=(0,a._)(e.getSchema(),n.typeCondition);if((0,o.Gv)(t))return t}}(e,n),l=e.getParentType();if(c&&l&&!(0,s.zR)(e.getSchema(),c,l)){const o=(0,i.X)(l),s=(0,i.X)(c);e.reportError(new r.__(`Fragment "${n}" cannot be spread here as objects of type "${o}" can never be of type "${s}".`,{nodes:t}))}}}}},4800:(e,t,n)=>{"use strict";n.d(t,{g:()=>p});var i=n(3177),r=n(5821),o=n(9551),s=n(3294),a=n(8087),c=n(7359),l=n(5844),u=n(398);function p(e){const t=e.getSchema(),n=Object.create(null);for(const t of e.getDocument().definitions)(0,l.zT)(t)&&(n[t.name.value]=t);return{ScalarTypeExtension:p,ObjectTypeExtension:p,InterfaceTypeExtension:p,UnionTypeExtension:p,EnumTypeExtension:p,InputObjectTypeExtension:p};function p(l){const p=l.name.value,f=n[p],h=null==t?void 0:t.getType(p);let m;if(f?m=d[f.kind]:h&&(y=h,m=(0,u.KA)(y)?c.h.SCALAR_TYPE_EXTENSION:(0,u.lp)(y)?c.h.OBJECT_TYPE_EXTENSION:(0,u.oT)(y)?c.h.INTERFACE_TYPE_EXTENSION:(0,u.EN)(y)?c.h.UNION_TYPE_EXTENSION:(0,u.EM)(y)?c.h.ENUM_TYPE_EXTENSION:(0,u.hL)(y)?c.h.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.k)(!1,"Unexpected type: "+(0,r.X)(y))),m){if(m!==l.kind){const t=function(e){switch(e){case c.h.SCALAR_TYPE_EXTENSION:return"scalar";case c.h.OBJECT_TYPE_EXTENSION:return"object";case c.h.INTERFACE_TYPE_EXTENSION:return"interface";case c.h.UNION_TYPE_EXTENSION:return"union";case c.h.ENUM_TYPE_EXTENSION:return"enum";case c.h.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:(0,o.k)(!1,"Unexpected kind: "+(0,r.X)(e))}}(l.kind);e.reportError(new a.__(`Cannot extend non-${t} type "${p}".`,{nodes:f?[f,l]:l}))}}else{const r=Object.keys({...n,...null==t?void 0:t.getTypeMap()}),o=(0,s.D)(p,r);e.reportError(new a.__(`Cannot extend type "${p}" because it is not defined.`+(0,i.l)(o),{nodes:l.name}))}var y}}const d={[c.h.SCALAR_TYPE_DEFINITION]:c.h.SCALAR_TYPE_EXTENSION,[c.h.OBJECT_TYPE_DEFINITION]:c.h.OBJECT_TYPE_EXTENSION,[c.h.INTERFACE_TYPE_DEFINITION]:c.h.INTERFACE_TYPE_EXTENSION,[c.h.UNION_TYPE_DEFINITION]:c.h.UNION_TYPE_EXTENSION,[c.h.ENUM_TYPE_DEFINITION]:c.h.ENUM_TYPE_EXTENSION,[c.h.INPUT_OBJECT_TYPE_DEFINITION]:c.h.INPUT_OBJECT_TYPE_EXTENSION}},1967:(e,t,n)=>{"use strict";n.d(t,{c:()=>p,s:()=>u});var i=n(5821),r=n(3498),o=n(8087),s=n(7359),a=n(3486),c=n(398),l=n(8238);function u(e){return{...p(e),Field:{leave(t){var n;const r=e.getFieldDef();if(!r)return!1;const s=new Set(null===(n=t.arguments)||void 0===n?void 0:n.map((e=>e.name.value)));for(const n of r.args)if(!s.has(n.name)&&(0,c.dK)(n)){const s=(0,i.X)(n.type);e.reportError(new o.__(`Field "${r.name}" argument "${n.name}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}function p(e){var t;const n=Object.create(null),u=e.getSchema(),p=null!==(t=null==u?void 0:u.getDirectives())&&void 0!==t?t:l.V4;for(const e of p)n[e.name]=(0,r.P)(e.args.filter(c.dK),(e=>e.name));const f=e.getDocument().definitions;for(const e of f)if(e.kind===s.h.DIRECTIVE_DEFINITION){var h;const t=null!==(h=e.arguments)&&void 0!==h?h:[];n[e.name.value]=(0,r.P)(t.filter(d),(e=>e.name.value))}return{Directive:{leave(t){const r=t.name.value,s=n[r];if(s){var l;const n=null!==(l=t.arguments)&&void 0!==l?l:[],u=new Set(n.map((e=>e.name.value)));for(const[n,l]of Object.entries(s))if(!u.has(n)){const s=(0,c.P9)(l.type)?(0,i.X)(l.type):(0,a.S)(l.type);e.reportError(new o.__(`Directive "@${r}" argument "${n}" of type "${s}" is required, but it was not provided.`,{nodes:t}))}}}}}}function d(e){return e.type.kind===s.h.NON_NULL_TYPE&&null==e.defaultValue}},1954:(e,t,n)=>{"use strict";n.d(t,{O:()=>s});var i=n(5821),r=n(8087),o=n(398);function s(e){return{Field(t){const n=e.getType(),s=t.selectionSet;if(n)if((0,o.UT)((0,o.xC)(n))){if(s){const o=t.name.value,a=(0,i.X)(n);e.reportError(new r.__(`Field "${o}" must not have a selection since type "${a}" has no subfields.`,{nodes:s}))}}else if(!s){const o=t.name.value,s=(0,i.X)(n);e.reportError(new r.__(`Field "${o}" of type "${s}" must have a selection of subfields. Did you mean "${o} { ... }"?`,{nodes:t}))}}}}},423:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(8087),r=n(7359),o=n(7677);function s(e){return{OperationDefinition(t){if("subscription"===t.operation){const n=e.getSchema(),s=n.getSubscriptionType();if(s){const a=t.name?t.name.value:null,c=Object.create(null),l=e.getDocument(),u=Object.create(null);for(const e of l.definitions)e.kind===r.h.FRAGMENT_DEFINITION&&(u[e.name.value]=e);const p=(0,o.g)(n,u,c,s,t.selectionSet);if(p.size>1){const t=[...p.values()].slice(1).flat();e.reportError(new i.__(null!=a?`Subscription "${a}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:t}))}for(const t of p.values())t[0].name.value.startsWith("__")&&e.reportError(new i.__(null!=a?`Subscription "${a}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:t}))}}}}}},2337:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(3231),r=n(8087);function o(e){return{DirectiveDefinition(e){var t;const i=null!==(t=e.arguments)&&void 0!==t?t:[];return n(`@${e.name.value}`,i)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(e){var t;const i=e.name.value,r=null!==(t=e.fields)&&void 0!==t?t:[];for(const e of r){var o;n(`${i}.${e.name.value}`,null!==(o=e.arguments)&&void 0!==o?o:[])}return!1}function n(t,n){const o=(0,i.v)(n,(e=>e.name.value));for(const[n,i]of o)i.length>1&&e.reportError(new r.__(`Argument "${t}(${n}:)" can only be defined once.`,{nodes:i.map((e=>e.name))}));return!1}}},2266:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(3231),r=n(8087);function o(e){return{Field:t,Directive:t};function t(t){var n;const o=null!==(n=t.arguments)&&void 0!==n?n:[],s=(0,i.v)(o,(e=>e.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.__(`There can be only one argument named "${t}".`,{nodes:n.map((e=>e.name))}))}}},3274:(e,t,n)=>{"use strict";n.d(t,{o:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=e.getSchema();return{DirectiveDefinition(r){const o=r.name.value;if(null==n||!n.getDirective(o))return t[o]?e.reportError(new i.__(`There can be only one directive named "@${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.__(`Directive "@${o}" already exists in the schema. It cannot be redefined.`,{nodes:r.name}))}}}},6300:(e,t,n)=>{"use strict";n.d(t,{k:()=>a});var i=n(8087),r=n(7359),o=n(5844),s=n(8238);function a(e){const t=Object.create(null),n=e.getSchema(),a=n?n.getDirectives():s.V4;for(const e of a)t[e.name]=!e.isRepeatable;const c=e.getDocument().definitions;for(const e of c)e.kind===r.h.DIRECTIVE_DEFINITION&&(t[e.name.value]=!e.repeatable);const l=Object.create(null),u=Object.create(null);return{enter(n){if(!("directives"in n)||!n.directives)return;let s;if(n.kind===r.h.SCHEMA_DEFINITION||n.kind===r.h.SCHEMA_EXTENSION)s=l;else if((0,o.zT)(n)||(0,o.D$)(n)){const e=n.name.value;s=u[e],void 0===s&&(u[e]=s=Object.create(null))}else s=Object.create(null);for(const r of n.directives){const n=r.name.value;t[n]&&(s[n]?e.reportError(new i.__(`The directive "@${n}" can only be used once at this location.`,{nodes:[s[n],r]})):s[n]=r)}}}}},3201:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var i=n(8087),r=n(398);function o(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:s,EnumTypeExtension:s};function s(t){var s;const a=t.name.value;o[a]||(o[a]=Object.create(null));const c=null!==(s=t.values)&&void 0!==s?s:[],l=o[a];for(const t of c){const o=t.name.value,s=n[a];(0,r.EM)(s)&&s.getValue(o)?e.reportError(new i.__(`Enum value "${a}.${o}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[o]?e.reportError(new i.__(`Enum value "${a}.${o}" can only be defined once.`,{nodes:[l[o],t.name]})):l[o]=t.name}return!1}}},2618:(e,t,n)=>{"use strict";n.d(t,{y:()=>o});var i=n(8087),r=n(398);function o(e){const t=e.getSchema(),n=t?t.getTypeMap():Object.create(null),r=Object.create(null);return{InputObjectTypeDefinition:o,InputObjectTypeExtension:o,InterfaceTypeDefinition:o,InterfaceTypeExtension:o,ObjectTypeDefinition:o,ObjectTypeExtension:o};function o(t){var o;const a=t.name.value;r[a]||(r[a]=Object.create(null));const c=null!==(o=t.fields)&&void 0!==o?o:[],l=r[a];for(const t of c){const r=t.name.value;s(n[a],r)?e.reportError(new i.__(`Field "${a}.${r}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:t.name})):l[r]?e.reportError(new i.__(`Field "${a}.${r}" can only be defined once.`,{nodes:[l[r],t.name]})):l[r]=t.name}return!1}}function s(e,t){return!!((0,r.lp)(e)||(0,r.oT)(e)||(0,r.hL)(e))&&null!=e.getFields()[t]}},5591:(e,t,n)=>{"use strict";n.d(t,{N:()=>r});var i=n(8087);function r(e){const t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(n){const r=n.name.value;return t[r]?e.reportError(new i.__(`There can be only one fragment named "${r}".`,{nodes:[t[r],n.name]})):t[r]=n.name,!1}}}},2767:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var i=n(9551),r=n(8087);function o(e){const t=[];let n=Object.create(null);return{ObjectValue:{enter(){t.push(n),n=Object.create(null)},leave(){const e=t.pop();e||(0,i.k)(!1),n=e}},ObjectField(t){const i=t.name.value;n[i]?e.reportError(new r.__(`There can be only one input field named "${i}".`,{nodes:[n[i],t.name]})):n[i]=t.name}}}},2621:(e,t,n)=>{"use strict";n.d(t,{H:()=>r});var i=n(8087);function r(e){const t=Object.create(null);return{OperationDefinition(n){const r=n.name;return r&&(t[r.value]?e.reportError(new i.__(`There can be only one operation named "${r.value}".`,{nodes:[t[r.value],r]})):t[r.value]=r),!1},FragmentDefinition:()=>!1}}},7990:(e,t,n)=>{"use strict";n.d(t,{q:()=>r});var i=n(8087);function r(e){const t=e.getSchema(),n=Object.create(null),r=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(t){var o;const s=null!==(o=t.operationTypes)&&void 0!==o?o:[];for(const t of s){const o=t.operation,s=n[o];r[o]?e.reportError(new i.__(`Type for ${o} already defined in the schema. It cannot be redefined.`,{nodes:t})):s?e.reportError(new i.__(`There can be only one ${o} type in schema.`,{nodes:[s,t]})):n[o]=t}return!1}}},9538:(e,t,n)=>{"use strict";n.d(t,{P:()=>r});var i=n(8087);function r(e){const t=Object.create(null),n=e.getSchema();return{ScalarTypeDefinition:r,ObjectTypeDefinition:r,InterfaceTypeDefinition:r,UnionTypeDefinition:r,EnumTypeDefinition:r,InputObjectTypeDefinition:r};function r(r){const o=r.name.value;if(null==n||!n.getType(o))return t[o]?e.reportError(new i.__(`There can be only one type named "${o}".`,{nodes:[t[o],r.name]})):t[o]=r.name,!1;e.reportError(new i.__(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:r.name}))}}},1564:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var i=n(3231),r=n(8087);function o(e){return{OperationDefinition(t){var n;const o=null!==(n=t.variableDefinitions)&&void 0!==n?n:[],s=(0,i.v)(o,(e=>e.variable.name.value));for(const[t,n]of s)n.length>1&&e.reportError(new r.__(`There can be only one variable named "$${t}".`,{nodes:n.map((e=>e.variable.name))}))}}}},9831:(e,t,n)=>{"use strict";n.d(t,{j:()=>u});var i=n(3177),r=n(5821),o=n(3498),s=n(3294),a=n(8087),c=n(3486),l=n(398);function u(e){return{ListValue(t){const n=(0,l.tf)(e.getParentInputType());if(!(0,l.HG)(n))return p(e,t),!1},ObjectValue(t){const n=(0,l.xC)(e.getInputType());if(!(0,l.hL)(n))return p(e,t),!1;const i=(0,o.P)(t.fields,(e=>e.name.value));for(const o of Object.values(n.getFields()))if(!i[o.name]&&(0,l.Wd)(o)){const i=(0,r.X)(o.type);e.reportError(new a.__(`Field "${n.name}.${o.name}" of required type "${i}" was not provided.`,{nodes:t}))}},ObjectField(t){const n=(0,l.xC)(e.getParentInputType());if(!e.getInputType()&&(0,l.hL)(n)){const r=(0,s.D)(t.name.value,Object.keys(n.getFields()));e.reportError(new a.__(`Field "${t.name.value}" is not defined by type "${n.name}".`+(0,i.l)(r),{nodes:t}))}},NullValue(t){const n=e.getInputType();(0,l.zM)(n)&&e.reportError(new a.__(`Expected value of type "${(0,r.X)(n)}", found ${(0,c.S)(t)}.`,{nodes:t}))},EnumValue:t=>p(e,t),IntValue:t=>p(e,t),FloatValue:t=>p(e,t),StringValue:t=>p(e,t),BooleanValue:t=>p(e,t)}}function p(e,t){const n=e.getInputType();if(!n)return;const i=(0,l.xC)(n);if((0,l.UT)(i))try{if(void 0===i.parseLiteral(t,void 0)){const i=(0,r.X)(n);e.reportError(new a.__(`Expected value of type "${i}", found ${(0,c.S)(t)}.`,{nodes:t}))}}catch(i){const o=(0,r.X)(n);i instanceof a.__?e.reportError(i):e.reportError(new a.__(`Expected value of type "${o}", found ${(0,c.S)(t)}; `+i.message,{nodes:t,originalError:i}))}else{const i=(0,r.X)(n);e.reportError(new a.__(`Expected value of type "${i}", found ${(0,c.S)(t)}.`,{nodes:t}))}}},5972:(e,t,n)=>{"use strict";n.d(t,{I:()=>a});var i=n(8087),r=n(3486),o=n(398),s=n(77);function a(e){return{VariableDefinition(t){const n=(0,s._)(e.getSchema(),t.type);if(void 0!==n&&!(0,o.j$)(n)){const n=t.variable.name.value,o=(0,r.S)(t.type);e.reportError(new i.__(`Variable "$${n}" cannot be non-input type "${o}".`,{nodes:t.type}))}}}}},9701:(e,t,n)=>{"use strict";n.d(t,{w:()=>l});var i=n(5821),r=n(8087),o=n(7359),s=n(398),a=n(316),c=n(77);function l(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(n){const o=e.getRecursiveVariableUsages(n);for(const{node:n,type:s,defaultValue:a}of o){const o=n.name.value,l=t[o];if(l&&s){const t=e.getSchema(),p=(0,c._)(t,l.type);if(p&&!u(t,p,l.defaultValue,s,a)){const t=(0,i.X)(p),a=(0,i.X)(s);e.reportError(new r.__(`Variable "$${o}" of type "${t}" used in position expecting type "${a}".`,{nodes:[l,n]}))}}}}},VariableDefinition(e){t[e.variable.name.value]=e}}}function u(e,t,n,i,r){if((0,s.zM)(i)&&!(0,s.zM)(t)){const s=void 0!==r;if((null==n||n.kind===o.h.NULL)&&!s)return!1;const c=i.ofType;return(0,a.uJ)(e,t,c)}return(0,a.uJ)(e,t,i)}},4196:(e,t,n)=>{"use strict";n.d(t,{M:()=>M,i:()=>j});var i=n(8081),r=n(8741),o=n(7143),s=n(7815),a=n(4873),c=n(5311),l=n(5580),u=n(7898),p=n(2877),d=n(1422),f=n(4790),h=n(1294),m=n(2283),y=n(4203),v=n(3259),E=n(4800),T=n(1967),g=n(1954),I=n(423),N=n(2337),b=n(2266),_=n(3274),S=n(6300),O=n(3201),D=n(2618),A=n(5591),R=n(2767),w=n(2621),L=n(7990),F=n(9538),x=n(1564),k=n(9831),$=n(5972),C=n(9701);const j=Object.freeze([i.i,w.H,u.F,I.Z,l.I,o.T,$.I,g.O,r.A,A.N,c.a,h.J,v.a,d.H,x.H,f.$,m.p,a.J,S.k,s.e,b.L,k.j,T.s,C.w,y.y,R.P]),M=Object.freeze([p.t,L.q,F.P,O.L,D.y,N.L,_.o,l.I,a.J,S.k,E.g,s.o,b.L,R.P,T.c])},6584:(e,t,n)=>{"use strict";n.d(t,{ED:()=>f,Gu:()=>u,zo:()=>d});var i=n(7826),r=n(8087),o=n(7304),s=n(9655),a=n(2676),c=n(4196),l=n(2734);function u(e,t,n=c.i,u,p=new a.a(e)){var d;const f=null!==(d=null==u?void 0:u.maxErrors)&&void 0!==d?d:100;t||(0,i.a)(!1,"Must provide document."),(0,s.J)(e);const h=Object.freeze({}),m=[],y=new l._t(e,t,p,(e=>{if(m.length>=f)throw m.push(new r.__("Too many validation errors, error limit reached. Validation aborted.")),h;m.push(e)})),v=(0,o.j1)(n.map((e=>e(y))));try{(0,o.Vn)(t,(0,a.y)(p,v))}catch(e){if(e!==h)throw e}return m}function p(e,t,n=c.M){const i=[],r=new l.yv(e,t,(e=>{i.push(e)})),s=n.map((e=>e(r)));return(0,o.Vn)(e,(0,o.j1)(s)),i}function d(e){const t=p(e);if(0!==t.length)throw new Error(t.map((e=>e.message)).join("\n\n"))}function f(e,t){const n=p(e,t);if(0!==n.length)throw new Error(n.map((e=>e.message)).join("\n\n"))}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var i={};(()=>{"use strict";n.r(i),n.d(i,{API:()=>j,main:()=>M});class e extends Error{constructor(e,t){super(`[${e}] ${t}`),this.status=e,this.baseMessage=t}}var t=n(398);function r(e){return void 0!==e&&e.length>0}const o=/\${([^}]+)}|(\\\$)/g;class s{constructor(e){this.str=e}toString(){return this.str}}class a extends s{constructor(e){super(e)}expand(e,t){return this.str}}class c extends s{constructor(e){super(e)}expand(t,n){return this.str.replace(o,((i,r,o)=>{if(o)return"$";if(r.startsWith("context.user.name"))return t?t.name??"":"";if(!r.startsWith("args."))throw new e(503,"Bad config: Invalid channel/role pattern '${"+r+"} in 'allow'");{let t=r.slice(5),i=n?n[t]:void 0;switch(typeof i){case"undefined":throw new e(503,"Bad config: Unknown arg in channel/role pattern '${"+r+"} in 'allow'");case"string":return i;case"number":return String(i);default:throw new e(400,"Value of arg '"+t+"' must be a string or number")}}}))}toString(){return"Pattern<"+this.str+">"}}function l(e){return r(e)?e.map((e=>function(e){return e.match(o)?new c(e):new a(e)}(e))):void 0}function u(e,t,n,i){return r(t)&&e.some((e=>t.includes(e.expand(n,i))))}class p{constructor(e){this.name=e}fail(){throw new e(403,`Access forbidden to function '${this.name}'`)}}class d extends p{authorize(e,t){e.isAdmin||this.fail()}}class f extends p{authorize(e){}}class h extends p{constructor(e,t){super(e),this.users=l(t.users),this.roles=l(t.roles),this.channels=l(t.channels)}authorize(t,n){if(console.assert(void 0!==t.defaultCollection),!(t.isAdmin||this.users&&function(e,t,n,i){return e.some((e=>t==e.expand(n,i)))}(this.users,t.name,t,n)||this.roles&&u(this.roles,t.roles,t,n)||this.channels&&u(this.channels,t.channels,t,n)))throw new e(403,`Access forbidden to function '${this.name}' ... user = ${t.name} ... user.channels=${t.channels} ... this.users=${this.users} ... this.channels=${this.channels}`)}}function m(e,t,n){return t?t.users||t.roles||t.channels?t.users&&t.users.includes("*")||t.roles&&t.roles.includes("*")||t.channels&&t.channels.includes("*")?new f(e):new h(e,t):new d(e):n?new f(e):new d(e)}function y(t){if(!t.code.match(/^\s*\(*SELECT\b/i))throw new e(500,"only SELECT queries are allowed");return t.code}function v(e,t,n){throw e instanceof Error?(e.message=`${e.message} (thrown by ${t} ${n})`,e):Error(`${e} (thrown by ${t} ${n})`)}function E(t,n,i){let o=m(t,n.allow,!1),s=function(t,n){if(r(n)){let i=new Set;for(let e of n)i.add(e);let r=i.size;if(r!=n.length)throw new e(500,`Function/resolver ${t} has duplicate arg names`);return o=>{if(!o)throw new e(400,`Function "${t}" called without arguments, but requires ${n}`);for(let i of n)if(void 0===o[i])throw new e(400,`Missing argument "${i}" in call to ${t}`);let s=Object.getOwnPropertyNames(o);if(s.length!=r)for(let n of s)if(!i.has(n))throw new e(400,`Undeclared argument "${n}" passed to ${t}`)}}return n=>{if(n){let i=Object.getOwnPropertyNames(n);if(i.length>0)throw new e(400,`Undeclared arguments '${i.join("', '")}' passed to ${t}`)}}}(t,n.args);switch(n.type){case"query":let r=y(n);return function(e,n){return s(n),o.authorize(e.user,n),console.debug(`QUERY ${t}`),n&&(n={args:n}),i.query(e,t,r,n)};case"javascript":let a=n.mutating??!1,c=N(0,n,2);return function(e,n){console.debug(`FUNC ${t}`),s(n),o.authorize(e.user,n),a||R(e);try{return c(e,n)}catch(e){v(e,"function",t)}finally{a||w(e)}};default:throw new e(500,"unknown or missing 'type'")}}function T(n,i,r,o,s){let a=`${i}.${r}`,c="Mutation"==i,l=m(a,o.allow,!0);if(o.args)throw new e(500,"should not have an 'args' declaration");switch(o.type){case"query":let i=y(o),r=n.type;t.zM(r)&&(r=r.ofType);let u=t.HG(r),p=t.KA(r);n.resolve=function(t,r,o,c){l.authorize(o.user,r);try{let c=s.query(o,a,i,{args:r,parent:t});if(u)return c;if(0==c.length)return null;{let t=c[0];if(p){let i=Object.getOwnPropertyNames(t);if(1==i.length)return t[i[0]];throw new e(500,`resolver returns scalar type ${n.type}, but its N1QL query returns ${i.length} columns, not 1`)}return t}}catch(e){v(e,"resolver",a)}};break;case"javascript":let d=N(0,o,4);n.resolve=function(e,t,n,i){console.debug(`RESOLVE ${a}`),l.authorize(n.user,t),c||R(n);try{return d(e,t,n,function(e){return Object.defineProperty(e,"selectedFieldNames",{get:function(){let e=[];if(this.fieldNodes.length>0){let t=this.fieldNodes[0].selectionSet;if(t)for(let n of t.selections)"Field"==n.kind&&"Name"==n.name.kind&&e.push(n.name.value)}return e}}),e}(i))}catch(e){v(e,"resolver",a)}finally{c||w(n)}};break;default:throw new e(500,"unknown or missing 'type'")}}function g(t,n,i){if("javascript"!=n.type)throw new e(500,"type-name resolvers must be implemented in JavaScript");if(void 0!==n.allow)throw new e(500,"type-name resolver must not have an 'allow' config");let r=N(0,n,4);return(e,t,n)=>r(t,e,n)}function I(t,n,i){if("javascript"!=n.type)throw new e(500,"entity reference resolvers must be implemented in JavaScript");if(void 0!==n.allow)throw new e(500,"entity reference resolver must not have an 'allow' config");let r=N(0,n,3);return function(e,t,n){return r(t,e,n)}}function N(t,n,i){let r;try{r=Function(`"use strict"; return (${n.code})`)()}catch(t){throw new e(500,`failed to compile: ${t}`)}if("function"!=typeof r)throw new e(500,"code does not compile to a JS function");if(r.length<2||r.length>i)throw new e(500,`should have 2-${i} JavaScript arguments`);return r}var b=n(4275),_=n(6535),S=n(2244),O=n(4903);class D{constructor(e){this.upstream=e,this.functions={};let t=new x(this,null,!0);this.superUserContext=new A(t,t,!0),t.context=this.superUserContext}configure(e,t){let n=new k;if(console.log("Initializing GraphQL/functions..."),e){let t=0,i=e.max_code_size;for(let r of Object.getOwnPropertyNames(e.definitions)){let o=e.definitions[r];void 0!==i&&o.code.length>i?n.complain(`function ${r}: code is too large (> ${i} bytes)`):n.try(`function ${r}: `,(()=>{this.functions[r]=E(r,o,this),++t}))}void 0!==e.max_function_count&&t>e.max_function_count&&n.complain(`too many functions (> ${e.max_function_count})`)}return t&&(t.schema?void 0!==t.max_schema_size&&t.schema.length>t.max_schema_size?n.complain(`GraphQL schema too large (> ${t.max_schema_size} bytes)`):(n.try("GraphQL schema: ",(()=>{if(t.subgraph){let e=b.Qc('\n    extend schema @link(\n        url: "https://specs.apollo.dev/federation/v2.0",\n        import: ["@extends", "@external", "@inaccessible", "@key", "@override", "@provides",\n                 "@requires", "@shareable", "@tag"]\n    )\n\n\n'+t.schema),i=this.createApolloResolverMap(t,n);this.schema=(0,O.en)({typeDefs:e,resolvers:i})}else this.schema=_.I(t.schema)})),this.schema&&this.configureResolvers(t,n)):n.complain("GraphQL schema is missing")),n.errors.length>0?(console.error(`Found ${n.errors.length} error[s] in configuration!`),n.errors):null}configureResolvers(e,n){let i=e.max_resolver_count??1e9;if(e.resolvers)for(let i of Object.getOwnPropertyNames(e.resolvers)){let o=e.resolvers[i],s=this.schema.getType(i);if(s)if(s instanceof t.h6){let t=s.getFields();for(let s of Object.getOwnPropertyNames(o)){let a=o[s];if(r(i,s,a)){if(e.subgraph&&"__resolveReference"==s)continue;let r=t[s];r?n.try(`GraphQL resolver ${i}.${s}: `,(()=>{T(r,i,s,a,this)})):n.complain(`GraphQL resolver ${i}.${s}: no such field in the schema`)}}}else if(s instanceof t.oW||s instanceof t.Gp){let e=s;for(let t of Object.getOwnPropertyNames(o)){let s=o[t];r(i,t,s)&&("__typename"==t?n.try(`GraphQL resolver ${i}.${t}: `,(()=>{e.resolveType=g(0,s)})):n.complain(`GraphQL resolver ${i}.${t}: abstract types may only have a '__typename' resolver`))}}else n.complain(`GraphQL type ${i}: not an object or interface, so cannot have resolvers`);else n.complain(`GraphQL resolver type '${i}': no such type in the schema`)}function r(t,r,o){if(0==--i)return n.complain(`too many GraphQL resolvers (> ${e.max_resolver_count})`),!1;let s=e.max_code_size;return!(void 0!==s&&o.code.length>s&&(n.complain(`GraphQL resolver ${t}.${r}: code is too large (> ${s} bytes)`),1))}}createApolloResolverMap(e,t){let n={};for(let[t,i]of Object.entries(e.resolvers)){let e=i.__resolveReference;if(e){let i=I(0,e);n[t]={__resolveReference:i}}}return n}makeContext(e,t){let n=new x(this,e),i=new A(n,this.superUserContext.user,t);return n.context=i,i}getFunction(t){let n=this.functions[t];if(!n)throw new e(404,`No such function ${t}`);return n}callFunction(e,t,n){return this.getFunction(t)(e,n)}query(e,t,n,i){return this.upstream.query(t,n,i,e.user)}graphql(t,n,i,r){if(console.debug(`GRAPHQL ${n}`),!this.schema)throw new e(404,"No GraphQL schema");return S.B({contextValue:t,schema:this.schema,source:n,variableValues:i,operationName:r})}get(e,t){return this.upstream.get(e,t)}save(e,t,n){return this.upstream.save(e,t,n)}delete(e,t,n){return this.upstream.delete(e,t,n)}}class A{constructor(e,t,n){this.user=e,this.admin=t,this.readOnlyLevel=0,n||this.readOnlyLevel++}checkUser(e){return this.user.isAdmin||$(e,this.user.name)}requireUser(t){if(!this.checkUser(t))throw new e(403,"Permission denied (user)")}checkAdmin(){return this.user.isAdmin}requireAdmin(){if(!this.checkAdmin())throw new e(403,"Permission denied (admin only)")}checkRole(e){if(this.user.isAdmin)return!0;for(let t of this.user.roles)if($(e,t))return!0;return!1}requireRole(t){if(!this.checkRole(t))throw new e(403,"Permission denied (role)")}checkAccess(e){if(this.user.isAdmin)return!0;for(let t of this.user.channels)if($(e,t))return!0;return!1}requireAccess(t){if(!this.checkAccess(t))throw new e(403,"Permission denied (channel)")}checkAllowed(e){return this.user.isAdmin||void 0!==e&&(void 0!==e.users&&e.users.includes(this.user.name)||void 0!==e.roles&&this.checkRole(e.roles)||void 0!==e.channels&&this.checkAccess(e.channels))}requireAllowed(t){if(!this.checkAllowed(t))throw new e(403,"Permission denied")}checkMutating(){return 0==this.readOnlyLevel}requireMutating(){if(!this.checkMutating())throw new e(403,"Permission denied (mutating)")}}function R(e){e.user.isSuperUser||e.readOnlyLevel++}function w(e){e.user.isSuperUser||e.readOnlyLevel--}class L{constructor(e,t,n){this.db=e,this.user=n}get(e){return this.db.get(e,this.user)}save(t,n){if(!this.user.canMutate)throw new e(403,"save() is not allowed in a read-only context");return this.db.save(t,n,this.user)}delete(t){if(!this.user.canMutate)throw new e(403,"delete() is not allowed in a read-only context");if("string"==typeof t)return this.db.delete(t,void 0,this.user);{let e=t._id;if(!e)throw"delete() called with doc object that has no '_id' property";return this.db.delete(e,t._rev,this.user)}}}let F=1;class x{constructor(e,t,n=!1){this.db=e,this.isSuperUser=n,t&&([this.name,this.roles,this.channels]=t,n=!1),this.defaultCollection=new L(e,"_default",this)}get isAdmin(){return void 0===this.name}get canMutate(){return this.isSuperUser||this.context.checkMutating()}function(t,n){let i=this.db.getFunction(t);if(++F>20){let n=`User function recursion too deep (calling function("${t}")`;throw console.error(n),new e(508,n)}try{return i(this.context,n)}finally{--F}}async graphql(t,n){if(++F>20){let t="User function recursion too deep (calling graphql())";throw console.error(t),new e(508,t)}try{let e=await this.db.graphql(this.context,t,n);if(e.errors){let t=e.errors[0];if(t.originalError)throw t.originalError;throw Error(t.message)}return void 0===e.data?null:e.data}finally{--F}}toJSON(e){return this.isAdmin?{}:{name:this.name,roles:this.roles,channels:this.channels}}}class k{constructor(){this.errors=[]}complain(e){console.error(e),this.errors.push(e)}try(e,t){try{t()}catch(t){t instanceof Error?e+=t.message:e+=String(t),this.complain(e)}}}function $(e,t){return"string"==typeof e?e==t:e.includes(t)}class C{constructor(e){this.native=e}query(e,t,n,i){let r=this.native.query(e,t,this.stringify(n),i.isAdmin);return JSON.parse(r)}get(e,t){let n=this.native.get(e,t.isAdmin);return null===n?n:this.parseDoc(n)}save(e,t,n){return this.native.save(JSON.stringify(e),t,n.isAdmin)}delete(e,t,n){return this.native.delete(e,t,n.isAdmin)}stringify(e){return e?JSON.stringify(e):void 0}parseDoc(e){let t=JSON.parse(e);if("object"!=typeof t)throw Error("NativeAPI returned JSON that's not an Object");return t}}class j{constructor(e,t){let n=JSON.parse(e),[i,r]=function(e,t,n){let i;i=new D(n);let r=i.configure(e,t);return r&&(i=null),[i,r]}(n.functions,n.graphql,new C(t));null!==i&&(this.db=i),this.errors=r}callFunction(e,t,n,i,r,o){let s=t?JSON.parse(t):void 0,a=this.makeContext(n,i,r,o),c=this.db.callFunction(a,e,s);return c instanceof Promise?c.then((e=>JSON.stringify(e))):JSON.stringify(c)}graphql(e,t,n,i,r,o,s){""===t&&(t=void 0);let a=n?JSON.parse(n):void 0,c=this.makeContext(i,r,o,s);return this.db.graphql(c,e,a,t).then((e=>JSON.stringify(e)))}makeContext(e,t,n,i){var r=null;return void 0!==e&&(r=[e,t?.split(",")??[],n?.split(",")??[]]),this.db.makeContext(r,i)}}function M(e,t){return new j(e,t)}})(),SG_Engine=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxJQUFJQSxFQUFJc1QsUUFBUW8rRSxFQUFlQyxLQUN4QyxFQUVBLE1BQU1ELEVBQWdCLGdDQUV0QixTQUFTQyxFQUFnQjN4RixHQUN2QixPQUFPNHhGLEVBQWdCNXhGLEVBQUk0dUUsV0FBVyxHQUN4QyxDQUVBLE1BQU1nakIsRUFBa0IsQ0FDdEIsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLE1BQ0EsTUFDQSxNQUNBLFVBQ0EsTUFDQSxNQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLEdBQ0EsR0FDQSxNQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLE9BQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNB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LEVBQ0E0c0YsRUFDQXpILEVBQ0FnQixFQUNBbHZELEVBQ0FpekQsR0FFa0IsS0FBbEJscUYsSUFBc0JBLE9BQWdCdmtELEdBQzFDLElBQUlveEksRUFBT0QsRUFBZ0I1NkUsS0FBSzF0RCxNQUFNc29JLFFBQWlCbnhJLEVBQ25EZzFELEVBQVVucUQsS0FBSzBqSSxZQUFZN0UsRUFBTWdCLEVBQU9sdkQsRUFBVWl6RCxHQUN0RCxPQUFPNWpJLEtBQUt1Z0ksR0FBRy9hLFFBQVFyN0QsRUFBU21JLEVBQU9pMEUsRUFBTTdzRixHQUN4Q3NiLE1BQU1yVyxHQUFVK00sS0FBS0MsVUFBVWhOLElBQ3hDLENBRVEra0YsWUFBWTdFLEVBQ0FnQixFQUNBbHZELEVBQ0FpekQsR0FFaEIsSUFBSUQsRUFBa0MsS0FNdEMsWUFMYXh1SSxJQUFUMHBJLElBQ0E4RSxFQUFjLENBQUM5RSxFQUNBZ0IsR0FBT2w0SCxNQUFNLE1BQVEsR0FDckJncEUsR0FBVWhwRSxNQUFNLE1BQVEsS0FFcEMzSCxLQUFLdWdJLEdBQUdtRCxZQUFZQyxFQUFhQyxFQUM1QyxFQU9HLFNBQVM0QyxFQUFLTCxFQUFvQkwsR0FDckMsT0FBTyxJQUFJSSxFQUFJQyxFQUFZTCxFQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NhY2hlLWNvbnRyb2wtdHlwZXMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2J1aWxkU2NoZW1hLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvY29yZVNwZWMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2RlZmluaXRpb25zLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC9lcnJvci5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2V4dHJhY3RTdWJncmFwaHNGcm9tU3VwZXJncmFwaC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2ZlZGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC9mZWRlcmF0aW9uU3BlYy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2dyYXBoUUxKU1NjaGVtYVRvQVNULmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvaW5hY2Nlc3NpYmxlU3BlYy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvaW50cm9zcGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L2pvaW5TcGVjLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3Qva25vd25Db3JlRmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC9vcGVyYXRpb25zLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvcHJlY29tcHV0ZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L3ByaW50LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3Qvc2NoZW1hVXBncmFkZXIuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC9zdWdnZXN0aW9ucy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L3N1cGVyZ3JhcGhzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvdGFnU3BlYy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L3R5cGVzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZmVkZXJhdGlvbi1pbnRlcm5hbHMvZGlzdC92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFscy9kaXN0L3ZhbGlkYXRpb24vS25vd25UeXBlTmFtZXNJbkZlZGVyYXRpb25SdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2ZlZGVyYXRpb24taW50ZXJuYWxzL2Rpc3QvdmFsdWVzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3N1YmdyYXBoL2Rpc3QvYnVpbGRTdWJncmFwaFNjaGVtYS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zdWJncmFwaC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3N1YmdyYXBoL2Rpc3QvcHJpbnRTdWJncmFwaFNjaGVtYS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zdWJncmFwaC9kaXN0L3NjaGVtYS1oZWxwZXIvYnVpbGRTY2hlbWFGcm9tU0RMLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3N1YmdyYXBoL2Rpc3Qvc2NoZW1hLWhlbHBlci9lcnJvci5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zdWJncmFwaC9kaXN0L3NjaGVtYS1oZWxwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc3ViZ3JhcGgvZGlzdC9zY2hlbWEtaGVscGVyL3Jlc29sdmVyTWFwLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3N1YmdyYXBoL2Rpc3Qvc2NoZW1hLWhlbHBlci90cmFuc2Zvcm1TY2hlbWEuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc3ViZ3JhcGgvZGlzdC90eXBlcy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9idWlsZC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9idWlsZC9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvZXJyb3JzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jaGFsay9zb3VyY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS90ZW1wbGF0ZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS91dGlsLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2NvbnZlcnNpb25zLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jb2xvci1uYW1lL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9jb25zb2xlLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9lczYtb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvR3JhcGhRTEVycm9yLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2V4ZWN1dGlvbi9jb2xsZWN0RmllbGRzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2V4ZWN1dGlvbi92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9QYXRoLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGV2QXNzZXJ0LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGlkWW91TWVhbi5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2dyb3VwQnkuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pZGVudGl0eUZ1bmMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnNwZWN0LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzSXRlcmFibGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlNYXAuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlWYWxNYXAuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9tYXBWYWx1ZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL25hdHVyYWxDb21wYXJlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJpbnRQYXRoQXJyYXkuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9zdWdnZXN0aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3RvT2JqTWFwLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2FzdC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9ibG9ja1N0cmluZy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9jaGFyYWN0ZXJDbGFzc2VzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2tpbmRzLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByZWRpY2F0ZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRMb2NhdGlvbi5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludFN0cmluZy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Zpc2l0b3IuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9hc3NlcnROYW1lLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvZGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2RpcmVjdGl2ZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9pbnRyb3NwZWN0aW9uLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvc2NhbGFycy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL3NjaGVtYS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL3ZhbGlkYXRlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9UeXBlSW5mby5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYXN0RnJvbVZhbHVlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9jb2VyY2VJbnB1dFZhbHVlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9zb3J0VmFsdWVOb2RlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVGcm9tQVNULmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy92YWx1ZUZyb21BU1QuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVFVudHlwZWQuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9WYWxpZGF0aW9uQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25EaXJlY3RpdmVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duRnJhZ21lbnROYW1lc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93blR5cGVOYW1lc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0xvbmVTY2hlbWFEZWZpbml0aW9uUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vRnJhZ21lbnRDeWNsZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9VbnVzZWRGcmFnbWVudHNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9VbnVzZWRWYXJpYWJsZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Qb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvU2NhbGFyTGVhZnNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZVR5cGVOYW1lc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhbHVlc09mQ29ycmVjdFR5cGVSdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9WYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9jdXN0b20vTm9EZXByZWNhdGVkQ3VzdG9tUnVsZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL2N1c3RvbS9Ob1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vc3BlY2lmaWVkUnVsZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2hhcy10b3N0cmluZ3RhZy9zaGFtcy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaXMtYXJndW1lbnRzL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9pcy1jYWxsYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9pcy1uYW4vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaXMtbmFuL3BvbHlmaWxsLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9pcy1uYW4vc2hpbS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvaXMtdHlwZWQtYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2pzLWxldmVuc2h0ZWluL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3BvbHlmaWxsLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvc2hpbS5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZ2lmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvcmVxdWlyZXMtcG9ydC9pbmRleC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvdXJsLXBhcnNlL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvd2hpY2gtdHlwZWQtYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vcG9seWZpbGwvdXJsLmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9hdmFpbGFibGUtdHlwZWQtYXJyYXlzL2luZGV4LmpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL0dyYXBoUUxFcnJvci5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy90b0Vycm9yLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL3N5bnRheEVycm9yLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vY29sbGVjdEZpZWxkcy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL2V4ZWN1dGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvbWVtb2l6ZTMubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJvbWlzZVJlZHVjZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9wcm9taXNlRm9yT2JqZWN0Lm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vdmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9ncmFwaHFsLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92ZXJzaW9uLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzQXN5bmNJdGVyYWJsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL21hcEFzeW5jSXRlcmF0b3IubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2V4ZWN1dGlvbi9zdWJzY3JpYmUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vRGVwcmVjYXRlZEN1c3RvbVJ1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRJbnRyb3NwZWN0aW9uUXVlcnkubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRPcGVyYXRpb25BU1QubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRPcGVyYXRpb25Sb290VHlwZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ludHJvc3BlY3Rpb25Gcm9tU2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYnVpbGRDbGllbnRTY2hlbWEubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9sZXhpY29ncmFwaGljU29ydFNjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3ByaW50U2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvY29uY2F0QVNULm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc2VwYXJhdGVPcGVyYXRpb25zLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc3RyaXBJZ25vcmVkQ2hhcmFjdGVycy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2Fzc2VydFZhbGlkTmFtZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ZpbmRCcmVha2luZ0NoYW5nZXMubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvUGF0aC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9kZXZBc3NlcnQubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGlkWW91TWVhbi5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9ncm91cEJ5Lm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnZhcmlhbnQubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNJdGVyYWJsZU9iamVjdC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc09iamVjdExpa2UubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNQcm9taXNlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2tleU1hcC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlWYWxNYXAubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvbWFwVmFsdWUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJpbnRQYXRoQXJyYXkubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvdG9PYmpNYXAubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2FzdC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvYmxvY2tTdHJpbmcubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvbGV4ZXIubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wYXJzZXIubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByZWRpY2F0ZXMubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24ubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50U3RyaW5nLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvci5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9hc3NlcnROYW1lLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lkZW50aXR5RnVuYy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9kZWZpbml0aW9uLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2RpcmVjdGl2ZXMubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvaW50cm9zcGVjdGlvbi5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9zY2FsYXJzLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL3NjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS92YWxpZGF0ZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL1R5cGVJbmZvLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYXN0RnJvbVZhbHVlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYnVpbGRBU1RTY2hlbWEubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9jb2VyY2VJbnB1dFZhbHVlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZXh0ZW5kU2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc29ydFZhbHVlTm9kZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdmFsdWVGcm9tQVNULm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdmFsdWVGcm9tQVNUVW50eXBlZC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9WYWxpZGF0aW9uQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duQXJndW1lbnROYW1lc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25EaXJlY3RpdmVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93bkZyYWdtZW50TmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duVHlwZU5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9GcmFnbWVudEN5Y2xlc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW51c2VkRnJhZ21lbnRzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VudXNlZFZhcmlhYmxlc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NjYWxhckxlYWZzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVBcmd1bWVudE5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUubWpzIiwid2VicGFjazovL1NHX0VuZ2luZS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVUeXBlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhbHVlc09mQ29ycmVjdFR5cGVSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9zcGVjaWZpZWRSdWxlcy5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi92YWxpZGF0ZS5tanMiLCJ3ZWJwYWNrOi8vU0dfRW5naW5lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1NHX0VuZ2luZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9TR19FbmdpbmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1NHX0VuZ2luZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL1NHX0VuZ2luZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1NHX0VuZ2luZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL1NHX0VuZ2luZS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL1NHX0VuZ2luZS8uL3NyYy90eXBlcy50cyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9zcmMvY29tcGlsZS50cyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9zcmMvaW1wbC50cyIsIndlYnBhY2s6Ly9TR19FbmdpbmUvLi9zcmMvYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYWNoZUNvbnRyb2xGcm9tSW5mbyA9IGV4cG9ydHMubWF5YmVDYWNoZUNvbnRyb2xGcm9tSW5mbyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1heWJlQ2FjaGVDb250cm9sRnJvbUluZm8oaW5mbykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKChfYiA9IChfYSA9IGluZm8uY2FjaGVDb250cm9sKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FjaGVIaW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGluZm8uY2FjaGVDb250cm9sO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMubWF5YmVDYWNoZUNvbnRyb2xGcm9tSW5mbyA9IG1heWJlQ2FjaGVDb250cm9sRnJvbUluZm87XG5mdW5jdGlvbiBjYWNoZUNvbnRyb2xGcm9tSW5mbyhpbmZvKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoIShcImNhY2hlQ29udHJvbFwiIGluIGluZm8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgaW5mb2AgYXJndW1lbnQgZG9lcyBub3QgYXBwZWFyIHRvIGhhdmUgYSBjYWNoZUNvbnRyb2wgZmllbGQuIFwiICtcbiAgICAgICAgICAgIFwiQ2hlY2sgdGhhdCB5b3UgYXJlIHVzaW5nIEFwb2xsbyBTZXJ2ZXIgMyBvciBuZXdlciBhbmQgdGhhdCB5b3UgYXJlbid0IHVzaW5nIFwiICtcbiAgICAgICAgICAgIFwiQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sRGlzYWJsZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoISgoX2IgPSAoX2EgPSBpbmZvLmNhY2hlQ29udHJvbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhY2hlSGludCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlc3RyaWN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYGluZm9gIGFyZ3VtZW50IGhhcyBhIGNhY2hlQ29udHJvbCBmaWVsZCBidXQgaXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGZyb20gQXBvbGxvXCIgK1xuICAgICAgICAgICAgXCJTZXJ2ZXIgMyBvciBuZXdlci4gQ2hlY2sgdGhhdCB5b3UgYXJlIHVzaW5nIEFwb2xsbyBTZXJ2ZXIgMyBvciBuZXdlciBhbmQgdGhhdCB5b3UgYXJlbid0IHVzaW5nIFwiICtcbiAgICAgICAgICAgIFwiQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sRGlzYWJsZWQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaW5mby5jYWNoZUNvbnRyb2w7XG59XG5leHBvcnRzLmNhY2hlQ29udHJvbEZyb21JbmZvID0gY2FjaGVDb250cm9sRnJvbUluZm87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVpbHRUeXBlUmVmZXJlbmNlID0gZXhwb3J0cy5idWlsZFNjaGVtYUZyb21BU1QgPSBleHBvcnRzLmJ1aWxkU2NoZW1hID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCB2YWx1ZXNfMSA9IHJlcXVpcmUoXCIuL3ZhbHVlc1wiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmZ1bmN0aW9uIGJ1aWxkVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyAoMCwgdmFsdWVzXzEudmFsdWVGcm9tQVNUVW50eXBlZCkodmFsdWUpIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gYnVpbGRTY2hlbWEoc291cmNlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGJ1aWxkU2NoZW1hRnJvbUFTVCgoMCwgZ3JhcGhxbF8xLnBhcnNlKShzb3VyY2UpLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuYnVpbGRTY2hlbWEgPSBidWlsZFNjaGVtYTtcbmZ1bmN0aW9uIGJ1aWxkU2NoZW1hRnJvbUFTVChkb2N1bWVudE5vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgY29uc3Qgc2NoZW1hID0gbmV3IGRlZmluaXRpb25zXzEuU2NoZW1hKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ibHVlcHJpbnQpO1xuICAgIGNvbnN0IHsgZGlyZWN0aXZlRGVmaW5pdGlvbnMsIHR5cGVEZWZpbml0aW9ucywgdHlwZUV4dGVuc2lvbnMsIHNjaGVtYURlZmluaXRpb25zLCBzY2hlbWFFeHRlbnNpb25zLCB9ID0gYnVpbGROYW1lZFR5cGVBbmREaXJlY3RpdmVzU2hhbGxvdyhkb2N1bWVudE5vZGUsIHNjaGVtYSwgZXJyb3JzKTtcbiAgICBmb3IgKGNvbnN0IHR5cGVOb2RlIG9mIHR5cGVEZWZpbml0aW9ucykge1xuICAgICAgICBpZiAodHlwZU5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgIGJ1aWxkRW51bVR5cGVWYWx1ZXNXaXRob3V0RGlyZWN0aXZlQXBwbGljYXRpb25zKHR5cGVOb2RlLCBzY2hlbWEudHlwZSh0eXBlTm9kZS5uYW1lLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCB0eXBlRXh0ZW5zaW9uTm9kZSBvZiB0eXBlRXh0ZW5zaW9ucykge1xuICAgICAgICBpZiAodHlwZUV4dGVuc2lvbk5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTikge1xuICAgICAgICAgICAgY29uc3QgdG9FeHRlbmQgPSBzY2hlbWEudHlwZSh0eXBlRXh0ZW5zaW9uTm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRvRXh0ZW5kLm5ld0V4dGVuc2lvbigpO1xuICAgICAgICAgICAgZXh0ZW5zaW9uLnNvdXJjZUFTVCA9IHR5cGVFeHRlbnNpb25Ob2RlO1xuICAgICAgICAgICAgYnVpbGRFbnVtVHlwZVZhbHVlc1dpdGhvdXREaXJlY3RpdmVBcHBsaWNhdGlvbnModHlwZUV4dGVuc2lvbk5vZGUsIHNjaGVtYS50eXBlKHR5cGVFeHRlbnNpb25Ob2RlLm5hbWUudmFsdWUpLCBleHRlbnNpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlRGVmaW5pdGlvbk5vZGUgb2YgZGlyZWN0aXZlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgYnVpbGREaXJlY3RpdmVEZWZpbml0aW9uSW5uZXJXaXRob3V0RGlyZWN0aXZlQXBwbGljYXRpb25zKGRpcmVjdGl2ZURlZmluaXRpb25Ob2RlLCBzY2hlbWEuZGlyZWN0aXZlKGRpcmVjdGl2ZURlZmluaXRpb25Ob2RlLm5hbWUudmFsdWUpLCBlcnJvcnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNjaGVtYURlZmluaXRpb24gb2Ygc2NoZW1hRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgYnVpbGRTY2hlbWFEZWZpbml0aW9uSW5uZXIoc2NoZW1hRGVmaW5pdGlvbiwgc2NoZW1hLnNjaGVtYURlZmluaXRpb24sIGVycm9ycyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2NoZW1hRXh0ZW5zaW9uIG9mIHNjaGVtYUV4dGVuc2lvbnMpIHtcbiAgICAgICAgYnVpbGRTY2hlbWFEZWZpbml0aW9uSW5uZXIoc2NoZW1hRXh0ZW5zaW9uLCBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbiwgZXJyb3JzLCBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5uZXdFeHRlbnNpb24oKSk7XG4gICAgfVxuICAgIGVycm9ycy5wdXNoKC4uLnNjaGVtYS5ibHVlcHJpbnQub25EaXJlY3RpdmVEZWZpbml0aW9uQW5kU2NoZW1hUGFyc2VkKHNjaGVtYSkpO1xuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlRGVmaW5pdGlvbk5vZGUgb2YgZGlyZWN0aXZlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgYnVpbGREaXJlY3RpdmVBcHBsaWNhdGlvbnNJbkRpcmVjdGl2ZURlZmluaXRpb24oZGlyZWN0aXZlRGVmaW5pdGlvbk5vZGUsIHNjaGVtYS5kaXJlY3RpdmUoZGlyZWN0aXZlRGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZSksIGVycm9ycyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZU5vZGUgb2YgdHlwZURlZmluaXRpb25zKSB7XG4gICAgICAgIGJ1aWxkTmFtZWRUeXBlSW5uZXIodHlwZU5vZGUsIHNjaGVtYS50eXBlKHR5cGVOb2RlLm5hbWUudmFsdWUpLCBzY2hlbWEuYmx1ZXByaW50LCBlcnJvcnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR5cGVFeHRlbnNpb25Ob2RlIG9mIHR5cGVFeHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IHRvRXh0ZW5kID0gc2NoZW1hLnR5cGUodHlwZUV4dGVuc2lvbk5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRvRXh0ZW5kLm5ld0V4dGVuc2lvbigpO1xuICAgICAgICBleHRlbnNpb24uc291cmNlQVNUID0gdHlwZUV4dGVuc2lvbk5vZGU7XG4gICAgICAgIGJ1aWxkTmFtZWRUeXBlSW5uZXIodHlwZUV4dGVuc2lvbk5vZGUsIHRvRXh0ZW5kLCBzY2hlbWEuYmx1ZXByaW50LCBlcnJvcnMsIGV4dGVuc2lvbik7XG4gICAgfVxuICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyAoMCwgZGVmaW5pdGlvbnNfMS5FcnJHcmFwaFFMVmFsaWRhdGlvbkZhaWxlZCkoZXJyb3JzKTtcbiAgICB9XG4gICAgaWYgKChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy52YWxpZGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZSkge1xuICAgICAgICBzY2hlbWEudmFsaWRhdGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbmV4cG9ydHMuYnVpbGRTY2hlbWFGcm9tQVNUID0gYnVpbGRTY2hlbWFGcm9tQVNUO1xuZnVuY3Rpb24gYnVpbGROYW1lZFR5cGVBbmREaXJlY3RpdmVzU2hhbGxvdyhkb2N1bWVudE5vZGUsIHNjaGVtYSwgZXJyb3JzKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBjb25zdCB0eXBlRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBjb25zdCB0eXBlRXh0ZW5zaW9ucyA9IFtdO1xuICAgIGNvbnN0IHNjaGVtYURlZmluaXRpb25zID0gW107XG4gICAgY29uc3Qgc2NoZW1hRXh0ZW5zaW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbk5vZGUgb2YgZG9jdW1lbnROb2RlLmRlZmluaXRpb25zKSB7XG4gICAgICAgIHN3aXRjaCAoZGVmaW5pdGlvbk5vZGUua2luZCkge1xuICAgICAgICAgICAgY2FzZSAnT3BlcmF0aW9uRGVmaW5pdGlvbic6XG4gICAgICAgICAgICBjYXNlICdGcmFnbWVudERlZmluaXRpb24nOlxuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoXCJJbnZhbGlkIGV4ZWN1dGFibGUgZGVmaW5pdGlvbiBmb3VuZCB3aGlsZSBidWlsZGluZyBzY2hlbWFcIiwgeyBub2RlczogZGVmaW5pdGlvbk5vZGUgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnU2NoZW1hRGVmaW5pdGlvbic6XG4gICAgICAgICAgICAgICAgc2NoZW1hRGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uTm9kZSk7XG4gICAgICAgICAgICAgICAgc2NoZW1hLnNjaGVtYURlZmluaXRpb24ucHJlc2VydmVFbXB0eURlZmluaXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnU2NoZW1hRXh0ZW5zaW9uJzpcbiAgICAgICAgICAgICAgICBzY2hlbWFFeHRlbnNpb25zLnB1c2goZGVmaW5pdGlvbk5vZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnU2NhbGFyVHlwZURlZmluaXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnT2JqZWN0VHlwZURlZmluaXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnVW5pb25UeXBlRGVmaW5pdGlvbic6XG4gICAgICAgICAgICBjYXNlICdFbnVtVHlwZURlZmluaXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbic6XG4gICAgICAgICAgICAgICAgdHlwZURlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbk5vZGUpO1xuICAgICAgICAgICAgICAgIGxldCB0eXBlID0gc2NoZW1hLnR5cGUoZGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlIHx8IHR5cGUuaXNCdWlsdEluKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBzY2hlbWEuYWRkVHlwZSgoMCwgZGVmaW5pdGlvbnNfMS5uZXdOYW1lZFR5cGUpKHdpdGhvdXRUcmFpbGluZ0RlZmluaXRpb24oZGVmaW5pdGlvbk5vZGUua2luZCksIGRlZmluaXRpb25Ob2RlLm5hbWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZS5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBUaGVyZSBjYW4gYmUgb25seSBvbmUgdHlwZSBuYW1lZCBcIiR7ZGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZX1cImApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0eXBlLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1NjYWxhclR5cGVFeHRlbnNpb24nOlxuICAgICAgICAgICAgY2FzZSAnT2JqZWN0VHlwZUV4dGVuc2lvbic6XG4gICAgICAgICAgICBjYXNlICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ1VuaW9uVHlwZUV4dGVuc2lvbic6XG4gICAgICAgICAgICBjYXNlICdFbnVtVHlwZUV4dGVuc2lvbic6XG4gICAgICAgICAgICBjYXNlICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nOlxuICAgICAgICAgICAgICAgIHR5cGVFeHRlbnNpb25zLnB1c2goZGVmaW5pdGlvbk5vZGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gc2NoZW1hLnR5cGUoZGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWEuYWRkVHlwZSgoMCwgZGVmaW5pdGlvbnNfMS5uZXdOYW1lZFR5cGUpKHdpdGhvdXRUcmFpbGluZ0RlZmluaXRpb24oZGVmaW5pdGlvbk5vZGUua2luZCksIGRlZmluaXRpb25Ob2RlLm5hbWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXhpc3RpbmcuaXNCdWlsdEluKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYENhbm5vdCBleHRlbmQgYnVpbHQtaW4gdHlwZSBcIiR7ZGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZX1cImApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0RpcmVjdGl2ZURlZmluaXRpb24nOlxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZURlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbk5vZGUpO1xuICAgICAgICAgICAgICAgIHNjaGVtYS5hZGREaXJlY3RpdmVEZWZpbml0aW9uKGRlZmluaXRpb25Ob2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRpcmVjdGl2ZURlZmluaXRpb25zLFxuICAgICAgICB0eXBlRGVmaW5pdGlvbnMsXG4gICAgICAgIHR5cGVFeHRlbnNpb25zLFxuICAgICAgICBzY2hlbWFEZWZpbml0aW9ucyxcbiAgICAgICAgc2NoZW1hRXh0ZW5zaW9ucyxcbiAgICB9O1xufVxuZnVuY3Rpb24gd2l0aG91dFRyYWlsaW5nRGVmaW5pdGlvbihzdHIpIHtcbiAgICBjb25zdCBlbmRTdHJpbmcgPSBzdHIuZW5kc1dpdGgoJ0RlZmluaXRpb24nKSA/ICdEZWZpbml0aW9uJyA6ICdFeHRlbnNpb24nO1xuICAgIHJldHVybiBzdHIuc2xpY2UoMCwgc3RyLmxlbmd0aCAtIGVuZFN0cmluZy5sZW5ndGgpO1xufVxuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlZFR5cGUobm9kZSwgc2NoZW1hKSB7XG4gICAgY29uc3QgdHlwZSA9IHNjaGVtYS50eXBlKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYFVua25vd24gdHlwZSAke25vZGUubmFtZS52YWx1ZX1gLCB7IG5vZGVzOiBub2RlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZTtcbn1cbmZ1bmN0aW9uIHdpdGhOb2RlQXR0YWNoZWRUb0Vycm9yKG9wZXJhdGlvbiwgbm9kZSwgZXJyb3JzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgb3BlcmF0aW9uKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGNhdXNlcyA9ICgwLCBlcnJvcl8xLmVycm9yQ2F1c2VzKShlKTtcbiAgICAgICAgaWYgKGNhdXNlcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYXVzZSBvZiBjYXVzZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxOb2RlcyA9IGNhdXNlLm5vZGVzID8gW25vZGUsIC4uLmNhdXNlLm5vZGVzXSA6IG5vZGU7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goKDAsIGVycm9yXzEud2l0aE1vZGlmaWVkRXJyb3JOb2RlcykoY2F1c2UsIGFsbE5vZGVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbGRTY2hlbWFEZWZpbml0aW9uSW5uZXIoc2NoZW1hTm9kZSwgc2NoZW1hRGVmaW5pdGlvbiwgZXJyb3JzLCBleHRlbnNpb24pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGZvciAoY29uc3Qgb3BUeXBlTm9kZSBvZiAoX2EgPSBzY2hlbWFOb2RlLm9wZXJhdGlvblR5cGVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICB3aXRoTm9kZUF0dGFjaGVkVG9FcnJvcigoKSA9PiBzY2hlbWFEZWZpbml0aW9uLnNldFJvb3Qob3BUeXBlTm9kZS5vcGVyYXRpb24sIG9wVHlwZU5vZGUudHlwZS5uYW1lLnZhbHVlKS5zZXRPZkV4dGVuc2lvbihleHRlbnNpb24pLCBvcFR5cGVOb2RlLCBlcnJvcnMpO1xuICAgIH1cbiAgICBzY2hlbWFEZWZpbml0aW9uLnNvdXJjZUFTVCA9IHNjaGVtYU5vZGU7XG4gICAgaWYgKCdkZXNjcmlwdGlvbicgaW4gc2NoZW1hTm9kZSkge1xuICAgICAgICBzY2hlbWFEZWZpbml0aW9uLmRlc2NyaXB0aW9uID0gKF9iID0gc2NoZW1hTm9kZS5kZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhbHVlO1xuICAgIH1cbiAgICBidWlsZEFwcGxpZWREaXJlY3RpdmVzKHNjaGVtYU5vZGUsIHNjaGVtYURlZmluaXRpb24sIGVycm9ycywgZXh0ZW5zaW9uKTtcbn1cbmZ1bmN0aW9uIGJ1aWxkQXBwbGllZERpcmVjdGl2ZXMoZWxlbWVudE5vZGUsIGVsZW1lbnQsIGVycm9ycywgZXh0ZW5zaW9uKSB7XG4gICAgdmFyIF9hO1xuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIChfYSA9IGVsZW1lbnROb2RlLmRpcmVjdGl2ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKSB7XG4gICAgICAgIHdpdGhOb2RlQXR0YWNoZWRUb0Vycm9yKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBlbGVtZW50LnNjaGVtYSgpLnNjaGVtYURlZmluaXRpb24gfHwgZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09ICdsaW5rJyB8fCAhZWxlbWVudC5zY2hlbWEoKS5ibHVlcHJpbnQuYXBwbHlEaXJlY3RpdmVzQWZ0ZXJQYXJzaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gZWxlbWVudC5hcHBseURpcmVjdGl2ZShkaXJlY3RpdmUubmFtZS52YWx1ZSwgYnVpbGRBcmdzKGRpcmVjdGl2ZSkpO1xuICAgICAgICAgICAgICAgIGQuc2V0T2ZFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgICAgICBkLnNvdXJjZUFTVCA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVW5hcHBsaWVkRGlyZWN0aXZlKHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGJ1aWxkQXJncyhkaXJlY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lT3JEZWY6IGRpcmVjdGl2ZS5uYW1lLnZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkaXJlY3RpdmUsIGVycm9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbGRBcmdzKGFyZ3VtZW50c05vZGUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgYXJncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBhcmdOb2RlIG9mIChfYSA9IGFyZ3VtZW50c05vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICBhcmdzW2FyZ05vZGUubmFtZS52YWx1ZV0gPSBidWlsZFZhbHVlKGFyZ05vZGUudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbn1cbmZ1bmN0aW9uIGJ1aWxkTmFtZWRUeXBlSW5uZXIoZGVmaW5pdGlvbk5vZGUsIHR5cGUsIGJsdWVwcmludCwgZXJyb3JzLCBleHRlbnNpb24pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIHN3aXRjaCAoZGVmaW5pdGlvbk5vZGUua2luZCkge1xuICAgICAgICBjYXNlICdFbnVtVHlwZURlZmluaXRpb24nOlxuICAgICAgICBjYXNlICdFbnVtVHlwZUV4dGVuc2lvbic6XG4gICAgICAgICAgICBjb25zdCBlbnVtVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudW1WYWwgb2YgKF9hID0gZGVmaW5pdGlvbk5vZGUudmFsdWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICAgICAgICAgIGJ1aWxkQXBwbGllZERpcmVjdGl2ZXMoZW51bVZhbCwgZW51bVR5cGUudmFsdWUoZW51bVZhbC5uYW1lLnZhbHVlKSwgZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdPYmplY3RUeXBlRGVmaW5pdGlvbic6XG4gICAgICAgIGNhc2UgJ09iamVjdFR5cGVFeHRlbnNpb24nOlxuICAgICAgICBjYXNlICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbic6XG4gICAgICAgIGNhc2UgJ0ludGVyZmFjZVR5cGVFeHRlbnNpb24nOlxuICAgICAgICAgICAgY29uc3QgZmllbGRCYXNlZFR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZE5vZGUgb2YgKF9iID0gZGVmaW5pdGlvbk5vZGUuZmllbGRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSkge1xuICAgICAgICAgICAgICAgIGlmIChibHVlcHJpbnQuaWdub3JlUGFyc2VkRmllbGQodHlwZSwgZmllbGROb2RlLm5hbWUudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkQmFzZWRUeXBlLmFkZEZpZWxkKGZpZWxkTm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBmaWVsZC5zZXRPZkV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICAgICAgICAgIGJ1aWxkRmllbGREZWZpbml0aW9uSW5uZXIoZmllbGROb2RlLCBmaWVsZCwgZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRmTm9kZSBvZiAoX2MgPSBkZWZpbml0aW9uTm9kZS5pbnRlcmZhY2VzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbXSkge1xuICAgICAgICAgICAgICAgIHdpdGhOb2RlQXR0YWNoZWRUb0Vycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRmTmFtZSA9IGl0Zk5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkQmFzZWRUeXBlLmltcGxlbWVudHNJbnRlcmZhY2UoaXRmTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYFR5cGUgXCIke3R5cGV9XCIgY2FuIG9ubHkgaW1wbGVtZW50IFwiJHtpdGZOYW1lfVwiIG9uY2UuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmllbGRCYXNlZFR5cGUuYWRkSW1wbGVtZW50ZWRJbnRlcmZhY2UoaXRmTmFtZSkuc2V0T2ZFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgICAgICB9LCBpdGZOb2RlLCBlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1VuaW9uVHlwZURlZmluaXRpb24nOlxuICAgICAgICBjYXNlICdVbmlvblR5cGVFeHRlbnNpb24nOlxuICAgICAgICAgICAgY29uc3QgdW5pb25UeXBlID0gdHlwZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZWRUeXBlIG9mIChfZCA9IGRlZmluaXRpb25Ob2RlLnR5cGVzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBbXSkge1xuICAgICAgICAgICAgICAgIHdpdGhOb2RlQXR0YWNoZWRUb0Vycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVkVHlwZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5pb25UeXBlLmhhc1R5cGVNZW1iZXIobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYFVuaW9uIHR5cGUgXCIke3VuaW9uVHlwZX1cIiBjYW4gb25seSBpbmNsdWRlIHR5cGUgXCIke25hbWV9XCIgb25jZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1bmlvblR5cGUuYWRkVHlwZShuYW1lKS5zZXRPZkV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICAgICAgICAgIH0sIG5hbWVkVHlwZSwgZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJzpcbiAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uJzpcbiAgICAgICAgICAgIGNvbnN0IGlucHV0T2JqZWN0VHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTm9kZSBvZiAoX2UgPSBkZWZpbml0aW9uTm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IFtdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBpbnB1dE9iamVjdFR5cGUuYWRkRmllbGQoZmllbGROb2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGZpZWxkLnNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbik7XG4gICAgICAgICAgICAgICAgYnVpbGRJbnB1dEZpZWxkRGVmaW5pdGlvbklubmVyKGZpZWxkTm9kZSwgZmllbGQsIGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgYnVpbGRBcHBsaWVkRGlyZWN0aXZlcyhkZWZpbml0aW9uTm9kZSwgdHlwZSwgZXJyb3JzLCBleHRlbnNpb24pO1xuICAgIGJ1aWxkRGVzY3JpcHRpb25BbmRTb3VyY2VBU1QoZGVmaW5pdGlvbk5vZGUsIHR5cGUpO1xufVxuZnVuY3Rpb24gYnVpbGRFbnVtVHlwZVZhbHVlc1dpdGhvdXREaXJlY3RpdmVBcHBsaWNhdGlvbnMoZGVmaW5pdGlvbk5vZGUsIHR5cGUsIGV4dGVuc2lvbikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBlbnVtVHlwZSA9IHR5cGU7XG4gICAgZm9yIChjb25zdCBlbnVtVmFsIG9mIChfYSA9IGRlZmluaXRpb25Ob2RlLnZhbHVlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pIHtcbiAgICAgICAgY29uc3QgdiA9IGVudW1UeXBlLmFkZFZhbHVlKGVudW1WYWwubmFtZS52YWx1ZSk7XG4gICAgICAgIGlmIChlbnVtVmFsLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB2LmRlc2NyaXB0aW9uID0gZW51bVZhbC5kZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2LnNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbik7XG4gICAgfVxuICAgIGJ1aWxkRGVzY3JpcHRpb25BbmRTb3VyY2VBU1QoZGVmaW5pdGlvbk5vZGUsIHR5cGUpO1xufVxuZnVuY3Rpb24gYnVpbGREZXNjcmlwdGlvbkFuZFNvdXJjZUFTVChkZWZpbml0aW9uTm9kZSwgZGVzdCkge1xuICAgIGlmIChkZWZpbml0aW9uTm9kZS5kZXNjcmlwdGlvbikge1xuICAgICAgICBkZXN0LmRlc2NyaXB0aW9uID0gZGVmaW5pdGlvbk5vZGUuZGVzY3JpcHRpb24udmFsdWU7XG4gICAgfVxuICAgIGRlc3Quc291cmNlQVNUID0gZGVmaW5pdGlvbk5vZGU7XG59XG5mdW5jdGlvbiBidWlsZEZpZWxkRGVmaW5pdGlvbklubmVyKGZpZWxkTm9kZSwgZmllbGQsIGVycm9ycykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdHlwZSA9IGJ1aWxkVHlwZVJlZmVyZW5jZUZyb21BU1QoZmllbGROb2RlLnR5cGUsIGZpZWxkLnNjaGVtYSgpKTtcbiAgICBmaWVsZC50eXBlID0gdmFsaWRhdGVPdXRwdXRUeXBlKHR5cGUsIGZpZWxkLmNvb3JkaW5hdGUsIGZpZWxkTm9kZSwgZXJyb3JzKTtcbiAgICBmb3IgKGNvbnN0IGlucHV0VmFsdWVEZWYgb2YgKF9hID0gZmllbGROb2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pIHtcbiAgICAgICAgYnVpbGRBcmd1bWVudERlZmluaXRpb25Jbm5lcihpbnB1dFZhbHVlRGVmLCBmaWVsZC5hZGRBcmd1bWVudChpbnB1dFZhbHVlRGVmLm5hbWUudmFsdWUpLCBlcnJvcnMsIHRydWUpO1xuICAgIH1cbiAgICBidWlsZEFwcGxpZWREaXJlY3RpdmVzKGZpZWxkTm9kZSwgZmllbGQsIGVycm9ycyk7XG4gICAgZmllbGQuZGVzY3JpcHRpb24gPSAoX2IgPSBmaWVsZE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi52YWx1ZTtcbiAgICBmaWVsZC5zb3VyY2VBU1QgPSBmaWVsZE5vZGU7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU91dHB1dFR5cGUodHlwZSwgd2hhdCwgbm9kZSwgZXJyb3JzKSB7XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzT3V0cHV0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBUaGUgdHlwZSBvZiBcIiR7d2hhdH1cIiBtdXN0IGJlIE91dHB1dCBUeXBlIGJ1dCBnb3QgXCIke3R5cGV9XCIsIGEgJHt0eXBlLmtpbmR9LmAsIHsgbm9kZXM6IG5vZGUgfSkpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUeXBlKHR5cGUsIHdoYXQsIG5vZGUsIGVycm9ycykge1xuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0lucHV0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBUaGUgdHlwZSBvZiBcIiR7d2hhdH1cIiBtdXN0IGJlIElucHV0IFR5cGUgYnV0IGdvdCBcIiR7dHlwZX1cIiwgYSAke3R5cGUua2luZH0uYCwgeyBub2Rlczogbm9kZSB9KSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbHRUeXBlUmVmZXJlbmNlKGVuY29kZWRUeXBlLCBzY2hlbWEpIHtcbiAgICByZXR1cm4gYnVpbGRUeXBlUmVmZXJlbmNlRnJvbUFTVCgoMCwgZ3JhcGhxbF8xLnBhcnNlVHlwZSkoZW5jb2RlZFR5cGUpLCBzY2hlbWEpO1xufVxuZXhwb3J0cy5idWlsdFR5cGVSZWZlcmVuY2UgPSBidWlsdFR5cGVSZWZlcmVuY2U7XG5mdW5jdGlvbiBidWlsZFR5cGVSZWZlcmVuY2VGcm9tQVNUKHR5cGVOb2RlLCBzY2hlbWEpIHtcbiAgICBzd2l0Y2ggKHR5cGVOb2RlLmtpbmQpIHtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUoYnVpbGRUeXBlUmVmZXJlbmNlRnJvbUFTVCh0eXBlTm9kZS50eXBlLCBzY2hlbWEpKTtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5OT05fTlVMTF9UWVBFOlxuICAgICAgICAgICAgY29uc3Qgd3JhcHBlZCA9IGJ1aWxkVHlwZVJlZmVyZW5jZUZyb21BU1QodHlwZU5vZGUudHlwZSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh3cmFwcGVkLmtpbmQgPT0gZ3JhcGhxbF8xLktpbmQuTk9OX05VTExfVFlQRSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYENhbm5vdCBhcHBseSB0aGUgbm9uLW51bGwgb3BlcmF0b3IgKCEpIHR3aWNlIHRvIHRoZSBzYW1lIHR5cGVgLCB7IG5vZGVzOiB0eXBlTm9kZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZSh3cmFwcGVkKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBnZXRSZWZlcmVuY2VkVHlwZSh0eXBlTm9kZSwgc2NoZW1hKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWlsZEFyZ3VtZW50RGVmaW5pdGlvbklubmVyKGlucHV0Tm9kZSwgYXJnLCBlcnJvcnMsIGluY2x1ZGVEaXJlY3RpdmVBcHBsaWNhdGlvbikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB0eXBlID0gYnVpbGRUeXBlUmVmZXJlbmNlRnJvbUFTVChpbnB1dE5vZGUudHlwZSwgYXJnLnNjaGVtYSgpKTtcbiAgICBhcmcudHlwZSA9IHZhbGlkYXRlSW5wdXRUeXBlKHR5cGUsIGFyZy5jb29yZGluYXRlLCBpbnB1dE5vZGUsIGVycm9ycyk7XG4gICAgYXJnLmRlZmF1bHRWYWx1ZSA9IGJ1aWxkVmFsdWUoaW5wdXROb2RlLmRlZmF1bHRWYWx1ZSk7XG4gICAgaWYgKGluY2x1ZGVEaXJlY3RpdmVBcHBsaWNhdGlvbikge1xuICAgICAgICBidWlsZEFwcGxpZWREaXJlY3RpdmVzKGlucHV0Tm9kZSwgYXJnLCBlcnJvcnMpO1xuICAgIH1cbiAgICBhcmcuZGVzY3JpcHRpb24gPSAoX2EgPSBpbnB1dE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICBhcmcuc291cmNlQVNUID0gaW5wdXROb2RlO1xufVxuZnVuY3Rpb24gYnVpbGRJbnB1dEZpZWxkRGVmaW5pdGlvbklubmVyKGZpZWxkTm9kZSwgZmllbGQsIGVycm9ycykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB0eXBlID0gYnVpbGRUeXBlUmVmZXJlbmNlRnJvbUFTVChmaWVsZE5vZGUudHlwZSwgZmllbGQuc2NoZW1hKCkpO1xuICAgIGZpZWxkLnR5cGUgPSB2YWxpZGF0ZUlucHV0VHlwZSh0eXBlLCBmaWVsZC5jb29yZGluYXRlLCBmaWVsZE5vZGUsIGVycm9ycyk7XG4gICAgZmllbGQuZGVmYXVsdFZhbHVlID0gYnVpbGRWYWx1ZShmaWVsZE5vZGUuZGVmYXVsdFZhbHVlKTtcbiAgICBidWlsZEFwcGxpZWREaXJlY3RpdmVzKGZpZWxkTm9kZSwgZmllbGQsIGVycm9ycyk7XG4gICAgZmllbGQuZGVzY3JpcHRpb24gPSAoX2EgPSBmaWVsZE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICBmaWVsZC5zb3VyY2VBU1QgPSBmaWVsZE5vZGU7XG59XG5mdW5jdGlvbiBidWlsZERpcmVjdGl2ZURlZmluaXRpb25Jbm5lcldpdGhvdXREaXJlY3RpdmVBcHBsaWNhdGlvbnMoZGlyZWN0aXZlTm9kZSwgZGlyZWN0aXZlLCBlcnJvcnMpIHtcbiAgICB2YXIgX2E7XG4gICAgZm9yIChjb25zdCBpbnB1dFZhbHVlRGVmIG9mIChfYSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICBidWlsZEFyZ3VtZW50RGVmaW5pdGlvbklubmVyKGlucHV0VmFsdWVEZWYsIGRpcmVjdGl2ZS5hZGRBcmd1bWVudChpbnB1dFZhbHVlRGVmLm5hbWUudmFsdWUpLCBlcnJvcnMsIGZhbHNlKTtcbiAgICB9XG4gICAgZGlyZWN0aXZlLnJlcGVhdGFibGUgPSBkaXJlY3RpdmVOb2RlLnJlcGVhdGFibGU7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZGlyZWN0aXZlTm9kZS5sb2NhdGlvbnMubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcbiAgICBkaXJlY3RpdmUuYWRkTG9jYXRpb25zKC4uLmxvY2F0aW9ucyk7XG4gICAgYnVpbGREZXNjcmlwdGlvbkFuZFNvdXJjZUFTVChkaXJlY3RpdmVOb2RlLCBkaXJlY3RpdmUpO1xufVxuZnVuY3Rpb24gYnVpbGREaXJlY3RpdmVBcHBsaWNhdGlvbnNJbkRpcmVjdGl2ZURlZmluaXRpb24oZGlyZWN0aXZlTm9kZSwgZGlyZWN0aXZlLCBlcnJvcnMpIHtcbiAgICB2YXIgX2E7XG4gICAgZm9yIChjb25zdCBpbnB1dFZhbHVlRGVmIG9mIChfYSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xuICAgICAgICBidWlsZEFwcGxpZWREaXJlY3RpdmVzKGlucHV0VmFsdWVEZWYsIGRpcmVjdGl2ZS5hcmd1bWVudChpbnB1dFZhbHVlRGVmLm5hbWUudmFsdWUpLCBlcnJvcnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1aWxkU2NoZW1hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmVBbGxDb3JlRmVhdHVyZXMgPSBleHBvcnRzLkxJTktfVkVSU0lPTlMgPSBleHBvcnRzLkNPUkVfVkVSU0lPTlMgPSBleHBvcnRzLmZpbmRDb3JlU3BlY1ZlcnNpb24gPSBleHBvcnRzLkZlYXR1cmVVcmwgPSBleHBvcnRzLkZlYXR1cmVWZXJzaW9uID0gZXhwb3J0cy5GZWF0dXJlRGVmaW5pdGlvbnMgPSBleHBvcnRzLkNvcmVTcGVjRGVmaW5pdGlvbiA9IGV4cG9ydHMuaXNDb3JlU3BlY0RpcmVjdGl2ZUFwcGxpY2F0aW9uID0gZXhwb3J0cy5leHRyYWN0Q29yZUZlYXR1cmVJbXBvcnRzID0gZXhwb3J0cy5GZWF0dXJlRGVmaW5pdGlvbiA9IGV4cG9ydHMuY29yZVB1cnBvc2VzID0gZXhwb3J0cy5FcnJDb3JlQ2hlY2tGYWlsZWQgPSBleHBvcnRzLmxpbmtEaXJlY3RpdmVEZWZhdWx0TmFtZSA9IGV4cG9ydHMubGlua0lkZW50aXR5ID0gZXhwb3J0cy5jb3JlSWRlbnRpdHkgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IHZhbHVlc18xID0gcmVxdWlyZShcIi4vdmFsdWVzXCIpO1xuY29uc3Qga25vd25Db3JlRmVhdHVyZXNfMSA9IHJlcXVpcmUoXCIuL2tub3duQ29yZUZlYXR1cmVzXCIpO1xuY29uc3Qgc3VnZ2VzdGlvbnNfMSA9IHJlcXVpcmUoXCIuL3N1Z2dlc3Rpb25zXCIpO1xuY29uc3QgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXCIpO1xuZXhwb3J0cy5jb3JlSWRlbnRpdHkgPSAnaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2NvcmUnO1xuZXhwb3J0cy5saW5rSWRlbnRpdHkgPSAnaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2xpbmsnO1xuZXhwb3J0cy5saW5rRGlyZWN0aXZlRGVmYXVsdE5hbWUgPSAnbGluayc7XG5jb25zdCBFcnJDb3JlQ2hlY2tGYWlsZWQgPSAoY2F1c2VzKSA9PiAoMCwgZXJyb3JfMS5hZ2dyZWdhdGVFcnJvcikoJ0NoZWNrRmFpbGVkJywgJ29uZSBvciBtb3JlIGNoZWNrcyBmYWlsZWQnLCBjYXVzZXMpO1xuZXhwb3J0cy5FcnJDb3JlQ2hlY2tGYWlsZWQgPSBFcnJDb3JlQ2hlY2tGYWlsZWQ7XG5mdW5jdGlvbiBidWlsZEVycm9yKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5jb3JlUHVycG9zZXMgPSBbXG4gICAgJ1NFQ1VSSVRZJyxcbiAgICAnRVhFQ1VUSU9OJyxcbl07XG5mdW5jdGlvbiBwdXJwb3Nlc0Rlc2NyaXB0aW9uKHB1cnBvc2UpIHtcbiAgICBzd2l0Y2ggKHB1cnBvc2UpIHtcbiAgICAgICAgY2FzZSAnU0VDVVJJVFknOiByZXR1cm4gXCJgU0VDVVJJVFlgIGZlYXR1cmVzIHByb3ZpZGUgbWV0YWRhdGEgbmVjZXNzYXJ5IHRvIHNlY3VyZWx5IHJlc29sdmUgZmllbGRzLlwiO1xuICAgICAgICBjYXNlICdFWEVDVVRJT04nOiByZXR1cm4gXCJgRVhFQ1VUSU9OYCBmZWF0dXJlcyBwcm92aWRlIG1ldGFkYXRhIG5lY2Vzc2FyeSBmb3Igb3BlcmF0aW9uIGV4ZWN1dGlvbi5cIjtcbiAgICB9XG59XG5jbGFzcyBGZWF0dXJlRGVmaW5pdGlvbiB7XG4gICAgY29uc3RydWN0b3IodXJsKSB7XG4gICAgICAgIHRoaXMudXJsID0gdHlwZW9mIHVybCA9PT0gJ3N0cmluZycgPyBGZWF0dXJlVXJsLnBhcnNlKHVybCkgOiB1cmw7XG4gICAgfVxuICAgIGdldCBpZGVudGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsLmlkZW50aXR5O1xuICAgIH1cbiAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsLnZlcnNpb247XG4gICAgfVxuICAgIGlzU3BlY1R5cGUodHlwZSkge1xuICAgICAgICBjb25zdCBuYW1lSW5TY2hlbWEgPSB0aGlzLm5hbWVJblNjaGVtYSh0eXBlLnNjaGVtYSgpKTtcbiAgICAgICAgcmV0dXJuIG5hbWVJblNjaGVtYSAhPT0gdW5kZWZpbmVkICYmIHR5cGUubmFtZS5zdGFydHNXaXRoKGAke25hbWVJblNjaGVtYX1fX2ApO1xuICAgIH1cbiAgICBpc1NwZWNEaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IG5hbWVJblNjaGVtYSA9IHRoaXMubmFtZUluU2NoZW1hKGRpcmVjdGl2ZS5zY2hlbWEoKSk7XG4gICAgICAgIHJldHVybiBuYW1lSW5TY2hlbWEgIT0gdW5kZWZpbmVkICYmIChkaXJlY3RpdmUubmFtZSA9PT0gbmFtZUluU2NoZW1hIHx8IGRpcmVjdGl2ZS5uYW1lLnN0YXJ0c1dpdGgoYCR7bmFtZUluU2NoZW1hfV9fYCkpO1xuICAgIH1cbiAgICBuYW1lSW5TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVJblNjaGVtYShzY2hlbWEpO1xuICAgICAgICByZXR1cm4gZmVhdHVyZSA9PT0gbnVsbCB8fCBmZWF0dXJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZWF0dXJlLm5hbWVJblNjaGVtYTtcbiAgICB9XG4gICAgZGlyZWN0aXZlTmFtZUluU2NoZW1hKHNjaGVtYSwgZGlyZWN0aXZlTmFtZSkge1xuICAgICAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5mZWF0dXJlSW5TY2hlbWEoc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmUgPyBmZWF0dXJlLmRpcmVjdGl2ZU5hbWVJblNjaGVtYShkaXJlY3RpdmVOYW1lKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdHlwZU5hbWVJblNjaGVtYShzY2hlbWEsIHR5cGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVJblNjaGVtYShzY2hlbWEpO1xuICAgICAgICByZXR1cm4gZmVhdHVyZSA/IGZlYXR1cmUudHlwZU5hbWVJblNjaGVtYSh0eXBlTmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJvb3REaXJlY3RpdmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWVJblNjaGVtYShzY2hlbWEpO1xuICAgICAgICByZXR1cm4gbmFtZSA/IHNjaGVtYS5kaXJlY3RpdmUobmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRpcmVjdGl2ZShzY2hlbWEsIGVsZW1lbnROYW1lKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmRpcmVjdGl2ZU5hbWVJblNjaGVtYShzY2hlbWEsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIG5hbWUgPyBzY2hlbWEuZGlyZWN0aXZlKG5hbWUpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0eXBlKHNjaGVtYSwgZWxlbWVudE5hbWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMudHlwZU5hbWVJblNjaGVtYShzY2hlbWEsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIG5hbWUgPyBzY2hlbWEudHlwZShuYW1lKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYWRkUm9vdERpcmVjdGl2ZShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5hZGREaXJlY3RpdmVEZWZpbml0aW9uKHRoaXMubmFtZUluU2NoZW1hKHNjaGVtYSkpO1xuICAgIH1cbiAgICBhZGREaXJlY3RpdmUoc2NoZW1hLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuYWRkRGlyZWN0aXZlRGVmaW5pdGlvbih0aGlzLmRpcmVjdGl2ZU5hbWVJblNjaGVtYShzY2hlbWEsIG5hbWUpKTtcbiAgICB9XG4gICAgYWRkRGlyZWN0aXZlU3BlYyhzY2hlbWEsIHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIHNwZWMuY2hlY2tPckFkZChzY2hlbWEsIHRoaXMuZGlyZWN0aXZlTmFtZUluU2NoZW1hKHNjaGVtYSwgc3BlYy5uYW1lKSk7XG4gICAgfVxuICAgIGFkZFR5cGVTcGVjKHNjaGVtYSwgc3BlYykge1xuICAgICAgICByZXR1cm4gc3BlYy5jaGVja09yQWRkKHNjaGVtYSwgdGhpcy50eXBlTmFtZUluU2NoZW1hKHNjaGVtYSwgc3BlYy5uYW1lKSk7XG4gICAgfVxuICAgIGFkZFNjYWxhclR5cGUoc2NoZW1hLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5TY2FsYXJUeXBlKHRoaXMudHlwZU5hbWVJblNjaGVtYShzY2hlbWEsIG5hbWUpKSk7XG4gICAgfVxuICAgIGFkZEVudW1UeXBlKHNjaGVtYSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmFkZFR5cGUobmV3IGRlZmluaXRpb25zXzEuRW51bVR5cGUodGhpcy50eXBlTmFtZUluU2NoZW1hKHNjaGVtYSwgbmFtZSkpKTtcbiAgICB9XG4gICAgZmVhdHVyZUluU2NoZW1hKHNjaGVtYSkge1xuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHNjaGVtYS5jb3JlRmVhdHVyZXM7XG4gICAgICAgIGlmICghZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRocm93IGJ1aWxkRXJyb3IoYFNjaGVtYSBpcyBub3QgYSBjb3JlIHNjaGVtYSAoYWRkIEBjb3JlIGZpcnN0KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZWF0dXJlcy5nZXRCeUlkZW50aXR5KHRoaXMuaWRlbnRpdHkpO1xuICAgIH1cbiAgICBnZXQgZGVmYXVsdENvcmVQdXJwb3NlKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuaWRlbnRpdHl9LyR7dGhpcy52ZXJzaW9ufWA7XG4gICAgfVxufVxuZXhwb3J0cy5GZWF0dXJlRGVmaW5pdGlvbiA9IEZlYXR1cmVEZWZpbml0aW9uO1xuZnVuY3Rpb24gZXh0cmFjdENvcmVGZWF0dXJlSW1wb3J0cyh1cmwsIGRpcmVjdGl2ZSkge1xuICAgIGNvbnN0IGFyZ3MgPSBkaXJlY3RpdmUuYXJndW1lbnRzKCk7XG4gICAgaWYgKCEoJ2ltcG9ydCcgaW4gYXJncykgfHwgIWFyZ3MuaW1wb3J0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgaW1wb3J0QXJnVmFsdWUgPSBhcmdzLmltcG9ydDtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gKDAsIGtub3duQ29yZUZlYXR1cmVzXzEuY29yZUZlYXR1cmVEZWZpbml0aW9uSWZLbm93bikodXJsKTtcbiAgICBjb25zdCBrbm93bkVsZW1lbnRzID0gZGVmaW5pdGlvbiA9PT0gbnVsbCB8fCBkZWZpbml0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZpbml0aW9uLmFsbEVsZW1lbnROYW1lcygpO1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IGltcG9ydHMgPSBbXTtcbiAgICBpbXBvcnRBcmdMb29wOiBmb3IgKGNvbnN0IGVsdCBvZiBpbXBvcnRBcmdWYWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGltcG9ydHMucHVzaCh7IG5hbWU6IGVsdCB9KTtcbiAgICAgICAgICAgIHZhbGlkYXRlSW1wb3J0ZWROYW1lKGVsdCwga25vd25FbGVtZW50cywgZXJyb3JzLCBkaXJlY3RpdmUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbHQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0xJTktfRElSRUNUSVZFX1VTQUdFLmVycihgSW52YWxpZCBzdWItdmFsdWUgJHsoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykoZWx0KX0gZm9yIEBsaW5rKGltcG9ydDopIGFyZ3VtZW50OiB2YWx1ZXMgc2hvdWxkIGJlIGVpdGhlciBzdHJpbmdzIG9yIGlucHV0IG9iamVjdCB2YWx1ZXMgb2YgdGhlIGZvcm0geyBuYW1lOiBcIjxpbXBvcnRlZEVsZW1lbnQ+XCIsIGFzOiBcIjxhbGlhcz5cIiB9LmAsIHsgbm9kZXM6IGRpcmVjdGl2ZS5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVsdCkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0xJTktfRElSRUNUSVZFX1VTQUdFLmVycihgSW52YWxpZCB2YWx1ZSBmb3IgdGhlIFwibmFtZVwiIGZpZWxkIGZvciBzdWItdmFsdWUgJHsoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykoZWx0KX0gb2YgQGxpbmsoaW1wb3J0OikgYXJndW1lbnQ6IG11c3QgYmUgYSBzdHJpbmcuYCwgeyBub2RlczogZGlyZWN0aXZlLnNvdXJjZUFTVCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpbXBvcnRBcmdMb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXMnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYEludmFsaWQgdmFsdWUgZm9yIHRoZSBcImFzXCIgZmllbGQgZm9yIHN1Yi12YWx1ZSAkeygwLCB2YWx1ZXNfMS52YWx1ZVRvU3RyaW5nKShlbHQpfSBvZiBAbGluayhpbXBvcnQ6KSBhcmd1bWVudDogbXVzdCBiZSBhIHN0cmluZy5gLCB7IG5vZGVzOiBkaXJlY3RpdmUuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGltcG9ydEFyZ0xvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYFVua25vd24gZmllbGQgXCIke2tleX1cIiBmb3Igc3ViLXZhbHVlICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKGVsdCl9IG9mIEBsaW5rKGltcG9ydDopIGFyZ3VtZW50LmAsIHsgbm9kZXM6IGRpcmVjdGl2ZS5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpbXBvcnRBcmdMb29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gZWx0O1xuICAgICAgICAgICAgaW1wb3J0cy5wdXNoKGkpO1xuICAgICAgICAgICAgaWYgKGkuYXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaS5uYW1lLmNoYXJBdCgwKSA9PT0gJ0AnICYmIGkuYXMuY2hhckF0KDApICE9PSAnQCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYEludmFsaWQgQGxpbmsgaW1wb3J0IHJlbmFtaW5nOiBkaXJlY3RpdmUgXCIke2kubmFtZX1cIiBpbXBvcnRlZCBuYW1lIHNob3VsZCBzdGFydCB3aXRoIGEgJ0AnIGNoYXJhY3RlciwgYnV0IGdvdCBcIiR7aS5hc31cIi5gLCB7IG5vZGVzOiBkaXJlY3RpdmUuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaS5uYW1lLmNoYXJBdCgwKSAhPT0gJ0AnICYmIGkuYXMuY2hhckF0KDApID09PSAnQCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYEludmFsaWQgQGxpbmsgaW1wb3J0IHJlbmFtaW5nOiB0eXBlIFwiJHtpLm5hbWV9XCIgaW1wb3J0ZWQgbmFtZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYSAnQCcgY2hhcmFjdGVyLCBidXQgZ290IFwiJHtpLmFzfVwiIChvciwgaWYgQCR7aS5uYW1lfSBpcyBhIGRpcmVjdGl2ZSwgdGhlbiBpdCBzaG91bGQgYmUgcmVmZXJyZWQgdG8gd2l0aCBhICdAJykuYCwgeyBub2RlczogZGlyZWN0aXZlLnNvdXJjZUFTVCB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsaWRhdGVJbXBvcnRlZE5hbWUobmFtZSwga25vd25FbGVtZW50cywgZXJyb3JzLCBkaXJlY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYEludmFsaWQgc3ViLXZhbHVlICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKGVsdCl9IGZvciBAbGluayhpbXBvcnQ6KSBhcmd1bWVudDogbWlzc2luZyBtYW5kYXRvcnkgXCJuYW1lXCIgZmllbGQuYCwgeyBub2RlczogZGlyZWN0aXZlLnNvdXJjZUFTVCB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93ICgwLCBkZWZpbml0aW9uc18xLkVyckdyYXBoUUxWYWxpZGF0aW9uRmFpbGVkKShlcnJvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gaW1wb3J0cztcbn1cbmV4cG9ydHMuZXh0cmFjdENvcmVGZWF0dXJlSW1wb3J0cyA9IGV4dHJhY3RDb3JlRmVhdHVyZUltcG9ydHM7XG5mdW5jdGlvbiB2YWxpZGF0ZUltcG9ydGVkTmFtZShuYW1lLCBrbm93bkVsZW1lbnRzLCBlcnJvcnMsIGRpcmVjdGl2ZSkge1xuICAgIGlmIChrbm93bkVsZW1lbnRzICYmICFrbm93bkVsZW1lbnRzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgIGxldCBkZXRhaWxzID0gJyc7XG4gICAgICAgIGlmICghbmFtZS5zdGFydHNXaXRoKCdAJykgJiYga25vd25FbGVtZW50cy5pbmNsdWRlcygnQCcgKyBuYW1lKSkge1xuICAgICAgICAgICAgZGV0YWlscyA9IGAgRGlkIHlvdSBtZWFuIGRpcmVjdGl2ZSBcIkAke25hbWV9XCI/YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gKDAsIHN1Z2dlc3Rpb25zXzEuc3VnZ2VzdGlvbkxpc3QpKG5hbWUsIGtub3duRWxlbWVudHMpO1xuICAgICAgICAgICAgaWYgKHN1Z2dlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscyA9ICgwLCBzdWdnZXN0aW9uc18xLmRpZFlvdU1lYW4pKHN1Z2dlc3Rpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0xJTktfRElSRUNUSVZFX1VTQUdFLmVycihgQ2Fubm90IGltcG9ydCB1bmtub3duIGVsZW1lbnQgXCIke25hbWV9XCIuJHtkZXRhaWxzfWAsIHsgbm9kZXM6IGRpcmVjdGl2ZS5zb3VyY2VBU1QgfSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQ29yZVNwZWNEaXJlY3RpdmVBcHBsaWNhdGlvbihkaXJlY3RpdmUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBkZWZpbml0aW9uID0gZGlyZWN0aXZlLmRlZmluaXRpb247XG4gICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYXNBcmcgPSBkZWZpbml0aW9uLmFyZ3VtZW50KCdhcycpO1xuICAgIGlmIChhc0FyZyAmJiAhKDAsIHR5cGVzXzEuc2FtZVR5cGUpKGFzQXJnLnR5cGUsIGRpcmVjdGl2ZS5zY2hlbWEoKS5zdHJpbmdUeXBlKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFkZWZpbml0aW9uLnJlcGVhdGFibGUgfHwgZGVmaW5pdGlvbi5sb2NhdGlvbnMubGVuZ3RoICE9PSAxIHx8IGRlZmluaXRpb24ubG9jYXRpb25zWzBdICE9PSBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdXJsQXJnID0gKF9hID0gZGVmaW5pdGlvbi5hcmd1bWVudCgndXJsJykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRlZmluaXRpb24uYXJndW1lbnQoJ2ZlYXR1cmUnKTtcbiAgICBpZiAoIXVybEFyZyB8fCAhaXNWYWxpZFVybEFyZ3VtZW50VHlwZSh1cmxBcmcudHlwZSwgZGlyZWN0aXZlLnNjaGVtYSgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBkaXJlY3RpdmUuYXJndW1lbnRzKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXJsID0gRmVhdHVyZVVybC5wYXJzZShhcmdzW3VybEFyZy5uYW1lXSk7XG4gICAgICAgIGlmICh1cmwuaWRlbnRpdHkgPT09IGV4cG9ydHMuY29yZUlkZW50aXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWUgPT09ICgoX2IgPSBhcmdzLmFzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnY29yZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVybC5pZGVudGl0eSA9PT0gZXhwb3J0cy5saW5rSWRlbnRpdHkgJiYgZGlyZWN0aXZlLm5hbWUgPT09ICgoX2MgPSBhcmdzLmFzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBleHBvcnRzLmxpbmtEaXJlY3RpdmVEZWZhdWx0TmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc0NvcmVTcGVjRGlyZWN0aXZlQXBwbGljYXRpb24gPSBpc0NvcmVTcGVjRGlyZWN0aXZlQXBwbGljYXRpb247XG5mdW5jdGlvbiBpc1ZhbGlkVXJsQXJndW1lbnRUeXBlKHR5cGUsIHNjaGVtYSkge1xuICAgIHJldHVybiAoMCwgdHlwZXNfMS5zYW1lVHlwZSkodHlwZSwgc2NoZW1hLnN0cmluZ1R5cGUoKSlcbiAgICAgICAgfHwgKDAsIHR5cGVzXzEuc2FtZVR5cGUpKHR5cGUsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbn1cbmNvbnN0IGxpbmtQdXJwb3NlVHlwZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVFbnVtVHlwZVNwZWNpZmljYXRpb24pKHtcbiAgICBuYW1lOiAnUHVycG9zZScsXG4gICAgdmFsdWVzOiBleHBvcnRzLmNvcmVQdXJwb3Nlcy5tYXAoKG5hbWUpID0+ICh7IG5hbWUsIGRlc2NyaXB0aW9uOiBwdXJwb3Nlc0Rlc2NyaXB0aW9uKG5hbWUpIH0pKVxufSk7XG5jb25zdCBsaW5rSW1wb3J0VHlwZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVTY2FsYXJUeXBlU3BlY2lmaWNhdGlvbikoeyBuYW1lOiAnSW1wb3J0JyB9KTtcbmNsYXNzIENvcmVTcGVjRGVmaW5pdGlvbiBleHRlbmRzIEZlYXR1cmVEZWZpbml0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uLCBpZGVudGl0eSA9IGV4cG9ydHMubGlua0lkZW50aXR5LCBuYW1lID0gZXhwb3J0cy5saW5rRGlyZWN0aXZlRGVmYXVsdE5hbWUpIHtcbiAgICAgICAgc3VwZXIobmV3IEZlYXR1cmVVcmwoaWRlbnRpdHksIG5hbWUsIHZlcnNpb24pKTtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVEZWZpbml0aW9uU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BXSxcbiAgICAgICAgICAgIHJlcGVhdGFibGU6IHRydWUsXG4gICAgICAgICAgICBhcmd1bWVudEZjdDogKHNjaGVtYSwgbmFtZUluU2NoZW1hKSA9PiB0aGlzLmNyZWF0ZURlZmluaXRpb25Bcmd1bWVudFNwZWNpZmljYXRpb25zKHNjaGVtYSwgbmFtZUluU2NoZW1hKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZURlZmluaXRpb25Bcmd1bWVudFNwZWNpZmljYXRpb25zKHNjaGVtYSwgbmFtZUluU2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICAgICAgICB7IG5hbWU6IHRoaXMudXJsQXJnTmFtZSgpLCB0eXBlOiBzY2hlbWEuc3RyaW5nVHlwZSgpIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcycsIHR5cGU6IHNjaGVtYS5zdHJpbmdUeXBlKCkgfSxcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydFB1cnBvc2VzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHB1cnBvc2VOYW1lID0gYCR7bmFtZUluU2NoZW1hICE9PSBudWxsICYmIG5hbWVJblNjaGVtYSAhPT0gdm9pZCAwID8gbmFtZUluU2NoZW1hIDogdGhpcy51cmwubmFtZX1fXyR7bGlua1B1cnBvc2VUeXBlU3BlYy5uYW1lfWA7XG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBsaW5rUHVycG9zZVR5cGVTcGVjLmNoZWNrT3JBZGQoc2NoZW1hLCBwdXJwb3NlTmFtZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBhcmdzLCBlcnJvcnMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MucHVzaCh7IG5hbWU6ICdmb3InLCB0eXBlOiBzY2hlbWEudHlwZShwdXJwb3NlTmFtZSkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydEltcG9ydCgpKSB7XG4gICAgICAgICAgICBjb25zdCBpbXBvcnROYW1lID0gYCR7bmFtZUluU2NoZW1hICE9PSBudWxsICYmIG5hbWVJblNjaGVtYSAhPT0gdm9pZCAwID8gbmFtZUluU2NoZW1hIDogdGhpcy51cmwubmFtZX1fXyR7bGlua0ltcG9ydFR5cGVTcGVjLm5hbWV9YDtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IGxpbmtJbXBvcnRUeXBlU3BlYy5jaGVja09yQWRkKHNjaGVtYSwgaW1wb3J0TmFtZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBhcmdzLCBlcnJvcnMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MucHVzaCh7IG5hbWU6ICdpbXBvcnQnLCB0eXBlOiBuZXcgZGVmaW5pdGlvbnNfMS5MaXN0VHlwZShzY2hlbWEudHlwZShpbXBvcnROYW1lKSkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgYXJncywgZXJyb3JzOiBbXSB9O1xuICAgIH1cbiAgICBhZGRFbGVtZW50c1RvU2NoZW1hKF8pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhZGRUb1NjaGVtYShzY2hlbWEsIGFsaWFzKSB7XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMuYWRkRGVmaW5pdGlvbnNUb1NjaGVtYShzY2hlbWEsIGFsaWFzKTtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7IFt0aGlzLnVybEFyZ05hbWUoKV06IHRoaXMudG9TdHJpbmcoKSB9O1xuICAgICAgICBpZiAoYWxpYXMpIHtcbiAgICAgICAgICAgIGFyZ3MuYXMgPSBhbGlhcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2hlbWFEZWYgPSBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbjtcbiAgICAgICAgY29uc3QgaGFzRGVmaW5pdGlvbiA9IHNjaGVtYURlZi5oYXNOb25FeHRlbnNpb25FbGVtZW50cygpO1xuICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSBzY2hlbWFEZWYuYXBwbHlEaXJlY3RpdmUoYWxpYXMgIT09IG51bGwgJiYgYWxpYXMgIT09IHZvaWQgMCA/IGFsaWFzIDogdGhpcy51cmwubmFtZSwgYXJncywgdHJ1ZSk7XG4gICAgICAgIGlmICghaGFzRGVmaW5pdGlvbiAmJiBzY2hlbWFEZWYuaGFzRXh0ZW5zaW9uRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gKDAsIHV0aWxzXzEuZmlyc3RPZikoc2NoZW1hRGVmLmV4dGVuc2lvbnMoKSk7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGV4dGVuc2lvbiwgJ2BoYXNFeHRlbnNpb25FbGVtZW50c2Agc2hvdWxkIG5vdCBoYXZlIGJlZW4gYHRydWVgJyk7XG4gICAgICAgICAgICBkaXJlY3RpdmUuc2V0T2ZFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFkZERlZmluaXRpb25zVG9TY2hlbWEoc2NoZW1hLCBhcykge1xuICAgICAgICBjb25zdCBleGlzdGluZ0NvcmUgPSBzY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgICAgICBpZiAoZXhpc3RpbmdDb3JlKSB7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdDb3JlLmNvcmVJdHNlbGYudXJsLmlkZW50aXR5ID09PSB0aGlzLmlkZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0xJTktfRElSRUNUSVZFX1VTQUdFLmVycihgQ2Fubm90IGFkZCBmZWF0dXJlICR7dGhpc30gdG8gdGhlIHNjaGVtYSwgaXQgYWxyZWFkeSB1c2VzICR7ZXhpc3RpbmdDb3JlLmNvcmVJdHNlbGYudXJsfWApXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lSW5TY2hlbWEgPSBhcyAhPT0gbnVsbCAmJiBhcyAhPT0gdm9pZCAwID8gYXMgOiB0aGlzLnVybC5uYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmVEZWZpbml0aW9uU3BlYy5jaGVja09yQWRkKHNjaGVtYSwgbmFtZUluU2NoZW1hKTtcbiAgICB9XG4gICAgYWxsRWxlbWVudE5hbWVzKCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IFtgQCR7dGhpcy51cmwubmFtZX1gXTtcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydFB1cnBvc2VzKCkpIHtcbiAgICAgICAgICAgIG5hbWVzLnB1c2goJ1B1cnBvc2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdXBwb3J0SW1wb3J0KCkpIHtcbiAgICAgICAgICAgIG5hbWVzLnB1c2goJ0ltcG9ydCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lcztcbiAgICB9XG4gICAgc3VwcG9ydFB1cnBvc2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9uLnN0cmljdGx5R3JlYXRlclRoYW4obmV3IEZlYXR1cmVWZXJzaW9uKDAsIDEpKTtcbiAgICB9XG4gICAgc3VwcG9ydEltcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsLm5hbWUgPT09IGV4cG9ydHMubGlua0RpcmVjdGl2ZURlZmF1bHROYW1lO1xuICAgIH1cbiAgICBleHRyYWN0RmVhdHVyZShzY2hlbWEpIHtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgICAgICBpZiAoIWZlYXR1cmVzKSB7XG4gICAgICAgICAgICB0aHJvdyBidWlsZEVycm9yKGBTY2hlbWEgaXMgbm90IGEgY29yZSBzY2hlbWEgKGFkZCBAY29yZSBmaXJzdClgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZlYXR1cmVzLmNvcmVJdHNlbGYudXJsLnZlcnNpb24uZXF1YWxzKHRoaXMudmVyc2lvbikpIHtcbiAgICAgICAgICAgIHRocm93IGJ1aWxkRXJyb3IoYENhbm5vdCB1c2UgdGhpcyB2ZXJzaW9uIG9mIEBjb3JlICgke3RoaXMudmVyc2lvbn0pLCB0aGUgc2NoZW1hIHVzZXMgdmVyc2lvbiAke2ZlYXR1cmVzLmNvcmVJdHNlbGYudXJsLnZlcnNpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZlYXR1cmVzLmNvcmVJdHNlbGY7XG4gICAgfVxuICAgIGNvcmVEaXJlY3RpdmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmV4dHJhY3RGZWF0dXJlKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHNjaGVtYS5kaXJlY3RpdmUoZmVhdHVyZS5uYW1lSW5TY2hlbWEpO1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH1cbiAgICBjb3JlVmVyc2lvbihzY2hlbWEpIHtcbiAgICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZXh0cmFjdEZlYXR1cmUoc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmUudXJsLnZlcnNpb247XG4gICAgfVxuICAgIGFwcGx5RmVhdHVyZVRvU2NoZW1hKHNjaGVtYSwgZmVhdHVyZSwgYXMsIHB1cnBvc2UpIHtcbiAgICAgICAgY29uc3QgY29yZURpcmVjdGl2ZSA9IHRoaXMuY29yZURpcmVjdGl2ZShzY2hlbWEpO1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgW3RoaXMudXJsQXJnTmFtZSgpXTogZmVhdHVyZS50b1N0cmluZygpLFxuICAgICAgICAgICAgYXMsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRQdXJwb3NlcygpICYmIHB1cnBvc2UpIHtcbiAgICAgICAgICAgIGFyZ3MuZm9yID0gcHVycG9zZTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5hcHBseURpcmVjdGl2ZShjb3JlRGlyZWN0aXZlLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmUuYWRkRWxlbWVudHNUb1NjaGVtYShzY2hlbWEpO1xuICAgIH1cbiAgICBleHRyYWN0RmVhdHVyZVVybChhcmdzKSB7XG4gICAgICAgIHJldHVybiBGZWF0dXJlVXJsLnBhcnNlKGFyZ3NbdGhpcy51cmxBcmdOYW1lKCldKTtcbiAgICB9XG4gICAgdXJsQXJnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsLm5hbWUgPT09ICdjb3JlJyA/ICdmZWF0dXJlJyA6ICd1cmwnO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29yZVNwZWNEZWZpbml0aW9uID0gQ29yZVNwZWNEZWZpbml0aW9uO1xuY2xhc3MgRmVhdHVyZURlZmluaXRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcihpZGVudGl0eSkge1xuICAgICAgICB0aGlzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICAgIHRoaXMuX2RlZmluaXRpb25zID0gW107XG4gICAgfVxuICAgIGFkZChkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmIChkZWZpbml0aW9uLmlkZW50aXR5ICE9PSB0aGlzLmlkZW50aXR5KSB7XG4gICAgICAgICAgICB0aHJvdyBidWlsZEVycm9yKGBDYW5ub3QgYWRkIGRlZmluaXRpb24gZm9yICR7ZGVmaW5pdGlvbn0gdG8gdGhlIHZlcnNpb25zIG9mIGRlZmluaXRpb25zIGZvciAke3RoaXMuaWRlbnRpdHl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RlZmluaXRpb25zLmZpbmQoZGVmID0+IGRlZmluaXRpb24udmVyc2lvbi5lcXVhbHMoZGVmLnZlcnNpb24pKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uKTtcbiAgICAgICAgdGhpcy5fZGVmaW5pdGlvbnMuc29ydCgoZGVmMSwgZGVmMikgPT4gLWRlZjEudmVyc2lvbi5jb21wYXJlVG8oZGVmMi52ZXJzaW9uKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmaW5kKHJlcXVlc3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbnMuZmluZChkZWYgPT4gZGVmLnZlcnNpb24uc2F0aXNmaWVzKHJlcXVlc3RlZCkpO1xuICAgIH1cbiAgICB2ZXJzaW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmluaXRpb25zLm1hcChkZWYgPT4gZGVmLnZlcnNpb24pO1xuICAgIH1cbiAgICBsYXRlc3QoKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkodGhpcy5fZGVmaW5pdGlvbnMubGVuZ3RoID4gMCwgJ1RyeWluZyB0byBnZXQgbGF0ZXN0IHdoZW4gbm8gZGVmaW5pdGlvbnMgZXhpc3QnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmluaXRpb25zWzBdO1xuICAgIH1cbn1cbmV4cG9ydHMuRmVhdHVyZURlZmluaXRpb25zID0gRmVhdHVyZURlZmluaXRpb25zO1xuY2xhc3MgRmVhdHVyZVZlcnNpb24ge1xuICAgIGNvbnN0cnVjdG9yKG1ham9yLCBtaW5vcikge1xuICAgICAgICB0aGlzLm1ham9yID0gbWFqb3I7XG4gICAgICAgIHRoaXMubWlub3IgPSBtaW5vcjtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gaW5wdXQubWF0Y2godGhpcy5WRVJTSU9OX1JFKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0lERU5USUZJRVIuZXJyKGBFeHBlY3RlZCBhIHZlcnNpb24gc3RyaW5nIChvZiB0aGUgZm9ybSB2MS4yKSwgZ290ICR7aW5wdXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKCttYXRjaFsxXSwgK21hdGNoWzJdKTtcbiAgICB9XG4gICAgc2F0aXNmaWVzKHJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IHsgbWFqb3IsIG1pbm9yIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG1ham9yOiByTWFqb3IsIG1pbm9yOiByTWlub3IgfSA9IHJlcXVpcmVkO1xuICAgICAgICByZXR1cm4gck1ham9yID09IG1ham9yICYmIChtYWpvciA9PSAwXG4gICAgICAgICAgICA/IHJNaW5vciA9PSBtaW5vclxuICAgICAgICAgICAgOiByTWlub3IgPD0gbWlub3IpO1xuICAgIH1cbiAgICBnZXQgc2VyaWVzKCkge1xuICAgICAgICBjb25zdCB7IG1ham9yIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gbWFqb3IgPiAwID8gYCR7bWFqb3J9LnhgIDogU3RyaW5nKHRoaXMpO1xuICAgIH1cbiAgICBjb21wYXJlVG8ob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubWFqb3IgPiBvdGhlci5tYWpvcikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWFqb3IgPCBvdGhlci5tYWpvcikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1pbm9yID4gb3RoZXIubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1pbm9yIDwgb3RoZXIubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc3RyaWN0bHlHcmVhdGVyVGhhbih2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVUbyh2ZXJzaW9uKSA+IDA7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYHYke3RoaXMubWFqb3J9LiR7dGhpcy5taW5vcn1gO1xuICAgIH1cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFqb3IgPT09IG90aGVyLm1ham9yICYmIHRoaXMubWlub3IgPT09IG90aGVyLm1pbm9yO1xuICAgIH1cbn1cbmV4cG9ydHMuRmVhdHVyZVZlcnNpb24gPSBGZWF0dXJlVmVyc2lvbjtcbkZlYXR1cmVWZXJzaW9uLlZFUlNJT05fUkUgPSAvXnYoXFxkKylcXC4oXFxkKykkLztcbmNsYXNzIEZlYXR1cmVVcmwge1xuICAgIGNvbnN0cnVjdG9yKGlkZW50aXR5LCBuYW1lLCB2ZXJzaW9uLCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGlucHV0LCBub2RlKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwoaW5wdXQpO1xuICAgICAgICBpZiAoIXVybC5wYXRobmFtZSB8fCB1cmwucGF0aG5hbWUgPT09ICcvJykge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0lERU5USUZJRVIuZXJyKGBNaXNzaW5nIHBhdGggaW4gZmVhdHVyZSB1cmwgJyR7dXJsfSdgLCB7IG5vZGVzOiBub2RlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgY29uc3QgdmVyU3RyID0gcGF0aC5wb3AoKTtcbiAgICAgICAgaWYgKCF2ZXJTdHIpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfTElOS19JREVOVElGSUVSLmVycihgTWlzc2luZyB2ZXJzaW9uIGNvbXBvbmVudCBpbiBmZWF0dXJlIHVybCAnJHt1cmx9J2AsIHsgbm9kZXM6IG5vZGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IEZlYXR1cmVWZXJzaW9uLnBhcnNlKHZlclN0cik7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0lERU5USUZJRVIuZXJyKGBNaXNzaW5nIGZlYXR1cmUgbmFtZSBjb21wb25lbnQgaW4gZmVhdHVyZSB1cmwgJyR7dXJsfSdgLCB7IG5vZGVzOiBub2RlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB1cmwuaGFzaCA/IHVybC5oYXNoLnNsaWNlKDEpIDogdW5kZWZpbmVkO1xuICAgICAgICB1cmwuaGFzaCA9ICcnO1xuICAgICAgICB1cmwuc2VhcmNoID0gJyc7XG4gICAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICAgICAgdXJsLnBhdGhuYW1lID0gcGF0aC5qb2luKCcvJyk7XG4gICAgICAgIHJldHVybiBuZXcgRmVhdHVyZVVybCh1cmwudG9TdHJpbmcoKSwgbmFtZSwgdmVyc2lvbiwgZWxlbWVudCk7XG4gICAgfVxuICAgIHN0YXRpYyBkZWNvZGUobm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShub2RlLnZhbHVlLCBub2RlKTtcbiAgICB9XG4gICAgc2F0aXNmaWVzKHJlcXVlc3RlZCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdGVkLmlkZW50aXR5ID09PSB0aGlzLmlkZW50aXR5ICYmXG4gICAgICAgICAgICB0aGlzLnZlcnNpb24uc2F0aXNmaWVzKHJlcXVlc3RlZC52ZXJzaW9uKTtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5ID09PSBvdGhlci5pZGVudGl0eSAmJlxuICAgICAgICAgICAgdGhpcy52ZXJzaW9uLmVxdWFscyhvdGhlci52ZXJzaW9uKTtcbiAgICB9XG4gICAgZ2V0IHVybCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCA/XG4gICAgICAgICAgICBgJHt0aGlzLmlkZW50aXR5fS8ke3RoaXMudmVyc2lvbn0jJHt0aGlzLmVsZW1lbnR9YFxuICAgICAgICAgICAgOiBgJHt0aGlzLmlkZW50aXR5fS8ke3RoaXMudmVyc2lvbn1gO1xuICAgIH1cbiAgICBnZXQgaXNEaXJlY3RpdmUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXJ0c1dpdGgoJ0AnKTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnROYW1lKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGlyZWN0aXZlID8gKF9hID0gdGhpcy5lbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2xpY2UoMSkgOiB0aGlzLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBiYXNlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVVcmwodGhpcy5pZGVudGl0eSwgdGhpcy5uYW1lLCB0aGlzLnZlcnNpb24pO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsO1xuICAgIH1cbn1cbmV4cG9ydHMuRmVhdHVyZVVybCA9IEZlYXR1cmVVcmw7XG5mdW5jdGlvbiBmaW5kQ29yZVNwZWNWZXJzaW9uKGZlYXR1cmVVcmwpIHtcbiAgICByZXR1cm4gZmVhdHVyZVVybC5uYW1lID09PSAnY29yZSdcbiAgICAgICAgPyBleHBvcnRzLkNPUkVfVkVSU0lPTlMuZmluZChmZWF0dXJlVXJsLnZlcnNpb24pXG4gICAgICAgIDogKGZlYXR1cmVVcmwubmFtZSA9PT0gZXhwb3J0cy5saW5rRGlyZWN0aXZlRGVmYXVsdE5hbWUgPyBleHBvcnRzLkxJTktfVkVSU0lPTlMuZmluZChmZWF0dXJlVXJsLnZlcnNpb24pIDogdW5kZWZpbmVkKTtcbn1cbmV4cG9ydHMuZmluZENvcmVTcGVjVmVyc2lvbiA9IGZpbmRDb3JlU3BlY1ZlcnNpb247XG5leHBvcnRzLkNPUkVfVkVSU0lPTlMgPSBuZXcgRmVhdHVyZURlZmluaXRpb25zKGV4cG9ydHMuY29yZUlkZW50aXR5KVxuICAgIC5hZGQobmV3IENvcmVTcGVjRGVmaW5pdGlvbihuZXcgRmVhdHVyZVZlcnNpb24oMCwgMSksIGV4cG9ydHMuY29yZUlkZW50aXR5LCAnY29yZScpKVxuICAgIC5hZGQobmV3IENvcmVTcGVjRGVmaW5pdGlvbihuZXcgRmVhdHVyZVZlcnNpb24oMCwgMiksIGV4cG9ydHMuY29yZUlkZW50aXR5LCAnY29yZScpKTtcbmV4cG9ydHMuTElOS19WRVJTSU9OUyA9IG5ldyBGZWF0dXJlRGVmaW5pdGlvbnMoZXhwb3J0cy5saW5rSWRlbnRpdHkpXG4gICAgLmFkZChuZXcgQ29yZVNwZWNEZWZpbml0aW9uKG5ldyBGZWF0dXJlVmVyc2lvbigxLCAwKSkpO1xuKDAsIGtub3duQ29yZUZlYXR1cmVzXzEucmVnaXN0ZXJLbm93bkZlYXR1cmUpKGV4cG9ydHMuQ09SRV9WRVJTSU9OUyk7XG4oMCwga25vd25Db3JlRmVhdHVyZXNfMS5yZWdpc3Rlcktub3duRmVhdHVyZSkoZXhwb3J0cy5MSU5LX1ZFUlNJT05TKTtcbmZ1bmN0aW9uIHJlbW92ZUFsbENvcmVGZWF0dXJlcyhzY2hlbWEpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGNvcmVGZWF0dXJlcyA9IFsuLi4oKF9iID0gKF9hID0gc2NoZW1hLmNvcmVGZWF0dXJlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFsbEZlYXR1cmVzKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKV07XG4gICAgY29uc3QgdHlwZVJlZmVyZW5jZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZlYXR1cmUgb2YgY29yZUZlYXR1cmVzKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVEaXJlY3RpdmVEZWZzID0gc2NoZW1hLmRpcmVjdGl2ZXMoKVxuICAgICAgICAgICAgLmZpbHRlcihkID0+IGZlYXR1cmUuaXNGZWF0dXJlRGVmaW5pdGlvbihkKSk7XG4gICAgICAgIGZlYXR1cmVEaXJlY3RpdmVEZWZzLmZvckVhY2goZGVmID0+IGRlZi5yZW1vdmUoKS5mb3JFYWNoKGFwcGxpY2F0aW9uID0+IGFwcGxpY2F0aW9uLnJlbW92ZSgpKSk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVUeXBlcyA9IHNjaGVtYS50eXBlcygpXG4gICAgICAgICAgICAuZmlsdGVyKHQgPT4gZmVhdHVyZS5pc0ZlYXR1cmVEZWZpbml0aW9uKHQpKTtcbiAgICAgICAgZmVhdHVyZVR5cGVzLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VzID0gdHlwZS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0eXBlUmVmZXJlbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGZvciAoY29uc3QgeyBmZWF0dXJlLCB0eXBlLCByZWZlcmVuY2VzIH0gb2YgdHlwZVJlZmVyZW5jZXMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlc0luU2NoZW1hID0gcmVmZXJlbmNlcy5maWx0ZXIociA9PiByLmlzQXR0YWNoZWQoKSk7XG4gICAgICAgIGlmIChyZWZlcmVuY2VzSW5TY2hlbWEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuUkVGRVJFTkNFRF9JTkFDQ0VTU0lCTEUuZXJyKGBDYW5ub3QgcmVtb3ZlIGVsZW1lbnRzIG9mIGZlYXR1cmUgJHtmZWF0dXJlfSBhcyBmZWF0dXJlIHR5cGUgJHt0eXBlfWAgK1xuICAgICAgICAgICAgICAgIGAgaXMgcmVmZXJlbmNlZCBieSBlbGVtZW50czogJHtyZWZlcmVuY2VzSW5TY2hlbWEuam9pbignLCAnKX1gLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKSguLi5yZWZlcmVuY2VzKSB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93ICgwLCBkZWZpbml0aW9uc18xLkVyckdyYXBoUUxBUElTY2hlbWFWYWxpZGF0aW9uRmFpbGVkKShlcnJvcnMpO1xuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlQWxsQ29yZUZlYXR1cmVzID0gcmVtb3ZlQWxsQ29yZUZlYXR1cmVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29yZVNwZWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlYnVnTG9nZ2VyID0gZXhwb3J0cy5uZXdEZWJ1Z0xvZ2dlciA9IHZvaWQgMDtcbmNvbnN0IGNoYWxrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNoYWxrXCIpKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGluZGVudFN0cmluZyhpbmRlbnRMZXZlbCkge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZW50TGV2ZWw7IGkrKykge1xuICAgICAgICBzdHIgKz0gY2hhbGtfMS5kZWZhdWx0LmJsYWNrQnJpZ2h0KFwi4o64IFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIGlzRW5hYmxlZChuYW1lKSB7XG4gICAgY29uc3QgdiA9IHByb2Nlc3MuZW52LkFQT0xMT19GRURFUkFUSU9OX0RFQlVHO1xuICAgIGNvbnN0IGJvb2wgPSAoMCwgdXRpbHNfMS52YWxpZGF0ZVN0cmluZ0NvbnRhaW5zQm9vbGVhbikodik7XG4gICAgaWYgKGJvb2wgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYm9vbDtcbiAgICB9XG4gICAgY29uc3QgZW5hYmxlZE5hbWVzID0gdi5zcGxpdCgnLCcpLm1hcChuID0+IG4udHJpbSgpKTtcbiAgICByZXR1cm4gZW5hYmxlZE5hbWVzLmluY2x1ZGVzKG5hbWUpO1xufVxubGV0IGN1cnJlbnRJbmRlbnRMZXZlbCA9IDA7XG5sZXQgY3VycmVudEluZGVudGF0aW9uID0gJyc7XG5sZXQgbWF4TG9nZ2VyTmFtZUxlbmd0aCA9IDA7XG5jb25zdCBjcmVhdGVkTG9nZ2VycyA9IFtdO1xuZnVuY3Rpb24gbmV3RGVidWdMb2dnZXIobmFtZSkge1xuICAgIGNvbnN0IGVuYWJsZWQgPSBpc0VuYWJsZWQobmFtZSk7XG4gICAgY29uc3QgY3JlYXRlZCA9IG5ldyBEZWJ1Z0xvZ2dlcihuYW1lLCBlbmFibGVkKTtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICBnbG9iYWwuY29uc29sZSA9IHJlcXVpcmUoJ2NvbnNvbGUnKTtcbiAgICAgICAgY3JlYXRlZExvZ2dlcnMucHVzaChjcmVhdGVkKTtcbiAgICAgICAgbWF4TG9nZ2VyTmFtZUxlbmd0aCA9IE1hdGgubWF4KG1heExvZ2dlck5hbWVMZW5ndGgsIG5hbWUubGVuZ3RoKTtcbiAgICAgICAgZm9yIChjb25zdCBsb2dnZXIgb2YgY3JlYXRlZExvZ2dlcnMpIHtcbiAgICAgICAgICAgIERlYnVnTG9nZ2VyLnByb3RvdHlwZVsndXBkYXRlSGVhZGVyJ10uY2FsbChsb2dnZXIsIG1heExvZ2dlck5hbWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVkO1xufVxuZXhwb3J0cy5uZXdEZWJ1Z0xvZ2dlciA9IG5ld0RlYnVnTG9nZ2VyO1xuZnVuY3Rpb24gaW5jcmVhc2VJbmRlbnRhdGlvbigpIHtcbiAgICBjdXJyZW50SW5kZW50TGV2ZWwrKztcbiAgICBjdXJyZW50SW5kZW50YXRpb24gPSBpbmRlbnRTdHJpbmcoY3VycmVudEluZGVudExldmVsKTtcbn1cbmZ1bmN0aW9uIGRlY3JlYXNlSW5kZW50YXRpb24oKSB7XG4gICAgaWYgKGN1cnJlbnRJbmRlbnRMZXZlbCA+IDApIHtcbiAgICAgICAgY3VycmVudEluZGVudExldmVsLS07XG4gICAgICAgIGN1cnJlbnRJbmRlbnRhdGlvbiA9IGluZGVudFN0cmluZyhjdXJyZW50SW5kZW50TGV2ZWwpO1xuICAgIH1cbn1cbmNsYXNzIERlYnVnTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBlbmFibGVkKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gY2hhbGtfMS5kZWZhdWx0LmJsYWNrQnJpZ2h0KGBbJHtuYW1lfV0gYCk7XG4gICAgfVxuICAgIHVwZGF0ZUhlYWRlcihtYXhMZW5ndGgpIHtcbiAgICAgICAgbGV0IHBhZGRpbmcgPSBcIlwiO1xuICAgICAgICBpZiAobWF4TGVuZ3RoID4gdGhpcy5uYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG9QYWQgPSBtYXhMZW5ndGggLSB0aGlzLm5hbWUubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b1BhZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZyArPSBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlYWRlciA9IGNoYWxrXzEuZGVmYXVsdC5ibGFja0JyaWdodCgnWycgKyBwYWRkaW5nICsgdGhpcy5uYW1lICsgJ10gJyk7XG4gICAgfVxuICAgIGRvTG9nKHN0cikge1xuICAgICAgICBjb25zdCBpbmRlbnQgPSB0aGlzLmhlYWRlciArIGN1cnJlbnRJbmRlbnRhdGlvbjtcbiAgICAgICAgY29uc3Qgd2l0aEluZGVudGVkTmV3bGluZXMgPSBzdHIucmVwbGFjZSgvXFxuL2csICdcXG4nICsgaW5kZW50ICsgJyAgJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGluZGVudCArIHdpdGhJbmRlbnRlZE5ld2xpbmVzKTtcbiAgICB9XG4gICAgbG9nKG1lc3NhZ2UsIHByZWZpeCA9IGNoYWxrXzEuZGVmYXVsdC55ZWxsb3coJ+KAoiAnKSkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9Mb2cocHJlZml4ICsgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBncm91cGVkVmFsdWVzKHZhbHVlcywgcHJpbnRGbiwgaW5pdGlhbE1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5ncm91cChpbml0aWFsTWVzc2FnZSk7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLmRvTG9nKCctICcgKyBwcmludEZuKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgZ3JvdXBlZEVudHJpZXMobWFwLCBrZXlQcmludEZuLCB2YWx1ZVByaW50Rm4pIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5ncm91cCgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBtYXAuZW50cmllcygpKSB7XG4gICAgICAgICAgICB0aGlzLmRvTG9nKCctICcgKyBrZXlQcmludEZuKGspICsgJzogJyArIHZhbHVlUHJpbnRGbih2KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgZ3JvdXAob3BlbmluZ01lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKG9wZW5pbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cob3BlbmluZ01lc3NhZ2UsIGNoYWxrXzEuZGVmYXVsdC5ibHVlKCfigKMgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5jcmVhc2VJbmRlbnRhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBncm91cEVuZChjbG9zaW5nTWVzc2FnZSkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGVjcmVhc2VJbmRlbnRhdGlvbigpO1xuICAgICAgICBpZiAoY2xvc2luZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKGNsb3NpbmdNZXNzYWdlLCBjaGFsa18xLmRlZmF1bHQuZ3JlZW4oJ+KHkiAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5EZWJ1Z0xvZ2dlciA9IERlYnVnTG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvcmVGZWF0dXJlcyA9IGV4cG9ydHMuQ29yZUZlYXR1cmUgPSBleHBvcnRzLmRlZmF1bHRTY2hlbWFCbHVlcHJpbnQgPSBleHBvcnRzLlNjaGVtYUJsdWVwcmludCA9IGV4cG9ydHMuTmFtZWRTY2hlbWFFbGVtZW50V2l0aFR5cGUgPSBleHBvcnRzLk5hbWVkU2NoZW1hRWxlbWVudCA9IGV4cG9ydHMuU2NoZW1hRWxlbWVudCA9IGV4cG9ydHMuRXh0ZW5zaW9uID0gZXhwb3J0cy5zb3VyY2VBU1RzID0gZXhwb3J0cy5EaXJlY3RpdmVUYXJnZXRFbGVtZW50ID0gZXhwb3J0cy5pc0xlYWZUeXBlID0gZXhwb3J0cy50eXBlRnJvbUFTVCA9IGV4cG9ydHMudHlwZVRvQVNUID0gZXhwb3J0cy5pc1R5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbiA9IGV4cG9ydHMudHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9ucyA9IGV4cG9ydHMuaXNFeGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb24gPSBleHBvcnRzLmV4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvbnMgPSBleHBvcnRzLmlzQ29uZGl0aW9uYWxEaXJlY3RpdmUgPSBleHBvcnRzLnJ1bnRpbWVUeXBlc0ludGVyc2VjdHMgPSBleHBvcnRzLnBvc3NpYmxlUnVudGltZVR5cGVzID0gZXhwb3J0cy5pc0NvbXBvc2l0ZVR5cGUgPSBleHBvcnRzLmlzQWJzdHJhY3RUeXBlID0gZXhwb3J0cy5pc051bGxhYmxlVHlwZSA9IGV4cG9ydHMuYmFzZVR5cGUgPSBleHBvcnRzLmZpbHRlclR5cGVzT2ZLaW5kID0gZXhwb3J0cy5pc1R5cGVPZktpbmQgPSBleHBvcnRzLmlzSW5wdXRUeXBlID0gZXhwb3J0cy5pc091dHB1dFR5cGUgPSBleHBvcnRzLmlzSW5wdXRPYmplY3RUeXBlID0gZXhwb3J0cy5pc1VuaW9uVHlwZSA9IGV4cG9ydHMuaXNFbnVtVHlwZSA9IGV4cG9ydHMuaXNJbnRlcmZhY2VUeXBlID0gZXhwb3J0cy5pc09iamVjdFR5cGUgPSBleHBvcnRzLmlzSURUeXBlID0gZXhwb3J0cy5pc0Jvb2xlYW5UeXBlID0gZXhwb3J0cy5pc0Zsb2F0VHlwZSA9IGV4cG9ydHMuaXNTdHJpbmdUeXBlID0gZXhwb3J0cy5pc0ludFR5cGUgPSBleHBvcnRzLmlzQ3VzdG9tU2NhbGFyVHlwZSA9IGV4cG9ydHMuaXNTY2FsYXJUeXBlID0gZXhwb3J0cy5pc05vbk51bGxUeXBlID0gZXhwb3J0cy5pc0xpc3RUeXBlID0gZXhwb3J0cy5pc1dyYXBwZXJUeXBlID0gZXhwb3J0cy5pc05hbWVkVHlwZSA9IGV4cG9ydHMuaXNTY2hlbWFSb290VHlwZSA9IGV4cG9ydHMuZGVmYXVsdFJvb3ROYW1lID0gZXhwb3J0cy5hbGxTY2hlbWFSb290S2luZHMgPSBleHBvcnRzLnR5cGVuYW1lRmllbGROYW1lID0gZXhwb3J0cy5FcnJHcmFwaFFMQVBJU2NoZW1hVmFsaWRhdGlvbkZhaWxlZCA9IGV4cG9ydHMuRXJyR3JhcGhRTFZhbGlkYXRpb25GYWlsZWQgPSB2b2lkIDA7XG5leHBvcnRzLmNvcHlEaXJlY3RpdmVEZWZpbml0aW9uVG9TY2hlbWEgPSBleHBvcnRzLm5ld05hbWVkVHlwZSA9IGV4cG9ydHMudmFyaWFibGVEZWZpbml0aW9uRnJvbUFTVCA9IGV4cG9ydHMudmFyaWFibGVEZWZpbml0aW9uc0Zyb21BU1QgPSBleHBvcnRzLlZhcmlhYmxlRGVmaW5pdGlvbnMgPSBleHBvcnRzLlZhcmlhYmxlRGVmaW5pdGlvbiA9IGV4cG9ydHMudmFyaWFibGVzSW5Bcmd1bWVudHMgPSBleHBvcnRzLmlzVmFyaWFibGUgPSBleHBvcnRzLmNvbnRhaW5zVmFyaWFibGUgPSBleHBvcnRzLm1lcmdlVmFyaWFibGVzID0gZXhwb3J0cy5WYXJpYWJsZSA9IGV4cG9ydHMuZGlyZWN0aXZlQXBwbGljYXRpb25zU3Vic3RyYWN0aW9uID0gZXhwb3J0cy5pc0RpcmVjdGl2ZUFwcGxpY2F0aW9uc1N1YnNldCA9IGV4cG9ydHMuc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9ucyA9IGV4cG9ydHMuc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9uID0gZXhwb3J0cy5EaXJlY3RpdmUgPSBleHBvcnRzLkRpcmVjdGl2ZURlZmluaXRpb24gPSBleHBvcnRzLkVudW1WYWx1ZSA9IGV4cG9ydHMuQXJndW1lbnREZWZpbml0aW9uID0gZXhwb3J0cy5JbnB1dEZpZWxkRGVmaW5pdGlvbiA9IGV4cG9ydHMuRmllbGREZWZpbml0aW9uID0gZXhwb3J0cy5Ob25OdWxsVHlwZSA9IGV4cG9ydHMuTGlzdFR5cGUgPSBleHBvcnRzLklucHV0T2JqZWN0VHlwZSA9IGV4cG9ydHMuRW51bVR5cGUgPSBleHBvcnRzLlVuaW9uVHlwZSA9IGV4cG9ydHMuVW5pb25NZW1iZXIgPSBleHBvcnRzLkludGVyZmFjZVR5cGUgPSBleHBvcnRzLk9iamVjdFR5cGUgPSBleHBvcnRzLkludGVyZmFjZUltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5TY2FsYXJUeXBlID0gZXhwb3J0cy5TY2hlbWFEZWZpbml0aW9uID0gZXhwb3J0cy5Sb290VHlwZSA9IGV4cG9ydHMuU2NoZW1hID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBjb3JlU3BlY18xID0gcmVxdWlyZShcIi4vY29yZVNwZWNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCB2YWx1ZXNfMSA9IHJlcXVpcmUoXCIuL3ZhbHVlc1wiKTtcbmNvbnN0IGluYWNjZXNzaWJsZVNwZWNfMSA9IHJlcXVpcmUoXCIuL2luYWNjZXNzaWJsZVNwZWNcIik7XG5jb25zdCBwcmludF8xID0gcmVxdWlyZShcIi4vcHJpbnRcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBpbnRyb3NwZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRyb3NwZWN0aW9uXCIpO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCJncmFwaHFsL3ZhbGlkYXRpb24vdmFsaWRhdGVcIik7XG5jb25zdCBzcGVjaWZpZWRSdWxlc18xID0gcmVxdWlyZShcImdyYXBocWwvdmFsaWRhdGlvbi9zcGVjaWZpZWRSdWxlc1wiKTtcbmNvbnN0IHZhbGlkYXRlXzIgPSByZXF1aXJlKFwiLi92YWxpZGF0ZVwiKTtcbmNvbnN0IGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvblwiKTtcbmNvbnN0IHN1Z2dlc3Rpb25zXzEgPSByZXF1aXJlKFwiLi9zdWdnZXN0aW9uc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IHZhbGlkYXRpb25FcnJvckNvZGUgPSAnR3JhcGhRTFZhbGlkYXRpb25GYWlsZWQnO1xuY29uc3QgREVGQVVMVF9WQUxJREFUSU9OX0VSUk9SX01FU1NBR0UgPSAnVGhlIHNjaGVtYSBpcyBub3QgYSB2YWxpZCBHcmFwaFFMIHNjaGVtYS4nO1xuY29uc3QgRXJyR3JhcGhRTFZhbGlkYXRpb25GYWlsZWQgPSAoY2F1c2VzLCBtZXNzYWdlID0gREVGQVVMVF9WQUxJREFUSU9OX0VSUk9SX01FU1NBR0UpID0+ICgwLCBlcnJvcl8xLmFnZ3JlZ2F0ZUVycm9yKSh2YWxpZGF0aW9uRXJyb3JDb2RlLCBtZXNzYWdlLCBjYXVzZXMpO1xuZXhwb3J0cy5FcnJHcmFwaFFMVmFsaWRhdGlvbkZhaWxlZCA9IEVyckdyYXBoUUxWYWxpZGF0aW9uRmFpbGVkO1xuY29uc3QgYXBpU2NoZW1hVmFsaWRhdGlvbkVycm9yQ29kZSA9ICdHcmFwaFFMQVBJU2NoZW1hVmFsaWRhdGlvbkZhaWxlZCc7XG5jb25zdCBFcnJHcmFwaFFMQVBJU2NoZW1hVmFsaWRhdGlvbkZhaWxlZCA9IChjYXVzZXMpID0+ICgwLCBlcnJvcl8xLmFnZ3JlZ2F0ZUVycm9yKShhcGlTY2hlbWFWYWxpZGF0aW9uRXJyb3JDb2RlLCAnVGhlIHN1cGVyZ3JhcGggc2NoZW1hIGZhaWxlZCB0byBwcm9kdWNlIGEgdmFsaWQgQVBJIHNjaGVtYScsIGNhdXNlcyk7XG5leHBvcnRzLkVyckdyYXBoUUxBUElTY2hlbWFWYWxpZGF0aW9uRmFpbGVkID0gRXJyR3JhcGhRTEFQSVNjaGVtYVZhbGlkYXRpb25GYWlsZWQ7XG5leHBvcnRzLnR5cGVuYW1lRmllbGROYW1lID0gJ19fdHlwZW5hbWUnO1xuZXhwb3J0cy5hbGxTY2hlbWFSb290S2luZHMgPSBbJ3F1ZXJ5JywgJ211dGF0aW9uJywgJ3N1YnNjcmlwdGlvbiddO1xuZnVuY3Rpb24gZGVmYXVsdFJvb3ROYW1lKHJvb3RLaW5kKSB7XG4gICAgcmV0dXJuIHJvb3RLaW5kLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcm9vdEtpbmQuc2xpY2UoMSk7XG59XG5leHBvcnRzLmRlZmF1bHRSb290TmFtZSA9IGRlZmF1bHRSb290TmFtZTtcbmZ1bmN0aW9uIGNoZWNrRGVmYXVsdFNjaGVtYVJvb3QodHlwZSkge1xuICAgIGlmICh0eXBlLmtpbmQgIT09ICdPYmplY3RUeXBlJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUubmFtZSkge1xuICAgICAgICBjYXNlICdRdWVyeSc6IHJldHVybiAncXVlcnknO1xuICAgICAgICBjYXNlICdNdXRhdGlvbic6IHJldHVybiAnbXV0YXRpb24nO1xuICAgICAgICBjYXNlICdTdWJzY3JpcHRpb24nOiByZXR1cm4gJ3N1YnNjcmlwdGlvbic7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTY2hlbWFSb290VHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0VHlwZSh0eXBlKSAmJiB0eXBlLmlzUm9vdFR5cGUoKTtcbn1cbmV4cG9ydHMuaXNTY2hlbWFSb290VHlwZSA9IGlzU2NoZW1hUm9vdFR5cGU7XG5mdW5jdGlvbiBpc05hbWVkVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBCYXNlTmFtZWRUeXBlO1xufVxuZXhwb3J0cy5pc05hbWVkVHlwZSA9IGlzTmFtZWRUeXBlO1xuZnVuY3Rpb24gaXNXcmFwcGVyVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIGlzTGlzdFR5cGUodHlwZSkgfHwgaXNOb25OdWxsVHlwZSh0eXBlKTtcbn1cbmV4cG9ydHMuaXNXcmFwcGVyVHlwZSA9IGlzV3JhcHBlclR5cGU7XG5mdW5jdGlvbiBpc0xpc3RUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5raW5kID09ICdMaXN0VHlwZSc7XG59XG5leHBvcnRzLmlzTGlzdFR5cGUgPSBpc0xpc3RUeXBlO1xuZnVuY3Rpb24gaXNOb25OdWxsVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PSAnTm9uTnVsbFR5cGUnO1xufVxuZXhwb3J0cy5pc05vbk51bGxUeXBlID0gaXNOb25OdWxsVHlwZTtcbmZ1bmN0aW9uIGlzU2NhbGFyVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PSAnU2NhbGFyVHlwZSc7XG59XG5leHBvcnRzLmlzU2NhbGFyVHlwZSA9IGlzU2NhbGFyVHlwZTtcbmZ1bmN0aW9uIGlzQ3VzdG9tU2NhbGFyVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIGlzU2NhbGFyVHlwZSh0eXBlKSAmJiAhZ3JhcGhRTEJ1aWx0SW5UeXBlcy5pbmNsdWRlcyh0eXBlLm5hbWUpO1xufVxuZXhwb3J0cy5pc0N1c3RvbVNjYWxhclR5cGUgPSBpc0N1c3RvbVNjYWxhclR5cGU7XG5mdW5jdGlvbiBpc0ludFR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSB0eXBlLnNjaGVtYSgpLmludFR5cGUoKTtcbn1cbmV4cG9ydHMuaXNJbnRUeXBlID0gaXNJbnRUeXBlO1xuZnVuY3Rpb24gaXNTdHJpbmdUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gdHlwZS5zY2hlbWEoKS5zdHJpbmdUeXBlKCk7XG59XG5leHBvcnRzLmlzU3RyaW5nVHlwZSA9IGlzU3RyaW5nVHlwZTtcbmZ1bmN0aW9uIGlzRmxvYXRUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gdHlwZS5zY2hlbWEoKS5mbG9hdFR5cGUoKTtcbn1cbmV4cG9ydHMuaXNGbG9hdFR5cGUgPSBpc0Zsb2F0VHlwZTtcbmZ1bmN0aW9uIGlzQm9vbGVhblR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSB0eXBlLnNjaGVtYSgpLmJvb2xlYW5UeXBlKCk7XG59XG5leHBvcnRzLmlzQm9vbGVhblR5cGUgPSBpc0Jvb2xlYW5UeXBlO1xuZnVuY3Rpb24gaXNJRFR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSB0eXBlLnNjaGVtYSgpLmlkVHlwZSgpO1xufVxuZXhwb3J0cy5pc0lEVHlwZSA9IGlzSURUeXBlO1xuZnVuY3Rpb24gaXNPYmplY3RUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5raW5kID09ICdPYmplY3RUeXBlJztcbn1cbmV4cG9ydHMuaXNPYmplY3RUeXBlID0gaXNPYmplY3RUeXBlO1xuZnVuY3Rpb24gaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5raW5kID09ICdJbnRlcmZhY2VUeXBlJztcbn1cbmV4cG9ydHMuaXNJbnRlcmZhY2VUeXBlID0gaXNJbnRlcmZhY2VUeXBlO1xuZnVuY3Rpb24gaXNFbnVtVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PSAnRW51bVR5cGUnO1xufVxuZXhwb3J0cy5pc0VudW1UeXBlID0gaXNFbnVtVHlwZTtcbmZ1bmN0aW9uIGlzVW5pb25UeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5raW5kID09ICdVbmlvblR5cGUnO1xufVxuZXhwb3J0cy5pc1VuaW9uVHlwZSA9IGlzVW5pb25UeXBlO1xuZnVuY3Rpb24gaXNJbnB1dE9iamVjdFR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlLmtpbmQgPT0gJ0lucHV0T2JqZWN0VHlwZSc7XG59XG5leHBvcnRzLmlzSW5wdXRPYmplY3RUeXBlID0gaXNJbnB1dE9iamVjdFR5cGU7XG5mdW5jdGlvbiBpc091dHB1dFR5cGUodHlwZSkge1xuICAgIHN3aXRjaCAoYmFzZVR5cGUodHlwZSkua2luZCkge1xuICAgICAgICBjYXNlICdTY2FsYXJUeXBlJzpcbiAgICAgICAgY2FzZSAnT2JqZWN0VHlwZSc6XG4gICAgICAgIGNhc2UgJ1VuaW9uVHlwZSc6XG4gICAgICAgIGNhc2UgJ0VudW1UeXBlJzpcbiAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmlzT3V0cHV0VHlwZSA9IGlzT3V0cHV0VHlwZTtcbmZ1bmN0aW9uIGlzSW5wdXRUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKGJhc2VUeXBlKHR5cGUpLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnU2NhbGFyVHlwZSc6XG4gICAgICAgIGNhc2UgJ0VudW1UeXBlJzpcbiAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNJbnB1dFR5cGUgPSBpc0lucHV0VHlwZTtcbmZ1bmN0aW9uIGlzVHlwZU9mS2luZCh0eXBlLCBraW5kKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PT0ga2luZDtcbn1cbmV4cG9ydHMuaXNUeXBlT2ZLaW5kID0gaXNUeXBlT2ZLaW5kO1xuZnVuY3Rpb24gZmlsdGVyVHlwZXNPZktpbmQodHlwZXMsIGtpbmQpIHtcbiAgICByZXR1cm4gdHlwZXMucmVkdWNlKChhY2MsIHR5cGUpID0+IHtcbiAgICAgICAgaWYgKGlzVHlwZU9mS2luZCh0eXBlLCBraW5kKSkge1xuICAgICAgICAgICAgYWNjLnB1c2godHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG59XG5leHBvcnRzLmZpbHRlclR5cGVzT2ZLaW5kID0gZmlsdGVyVHlwZXNPZktpbmQ7XG5mdW5jdGlvbiBiYXNlVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIGlzV3JhcHBlclR5cGUodHlwZSkgPyB0eXBlLmJhc2VUeXBlKCkgOiB0eXBlO1xufVxuZXhwb3J0cy5iYXNlVHlwZSA9IGJhc2VUeXBlO1xuZnVuY3Rpb24gaXNOdWxsYWJsZVR5cGUodHlwZSkge1xuICAgIHJldHVybiAhaXNOb25OdWxsVHlwZSh0eXBlKTtcbn1cbmV4cG9ydHMuaXNOdWxsYWJsZVR5cGUgPSBpc051bGxhYmxlVHlwZTtcbmZ1bmN0aW9uIGlzQWJzdHJhY3RUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzVW5pb25UeXBlKHR5cGUpO1xufVxuZXhwb3J0cy5pc0Fic3RyYWN0VHlwZSA9IGlzQWJzdHJhY3RUeXBlO1xuZnVuY3Rpb24gaXNDb21wb3NpdGVUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fCBpc1VuaW9uVHlwZSh0eXBlKTtcbn1cbmV4cG9ydHMuaXNDb21wb3NpdGVUeXBlID0gaXNDb21wb3NpdGVUeXBlO1xuZnVuY3Rpb24gcG9zc2libGVSdW50aW1lVHlwZXModHlwZSkge1xuICAgIHN3aXRjaCAodHlwZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0ludGVyZmFjZVR5cGUnOiByZXR1cm4gdHlwZS5wb3NzaWJsZVJ1bnRpbWVUeXBlcygpO1xuICAgICAgICBjYXNlICdVbmlvblR5cGUnOiByZXR1cm4gdHlwZS50eXBlcygpO1xuICAgICAgICBjYXNlICdPYmplY3RUeXBlJzogcmV0dXJuIFt0eXBlXTtcbiAgICB9XG59XG5leHBvcnRzLnBvc3NpYmxlUnVudGltZVR5cGVzID0gcG9zc2libGVSdW50aW1lVHlwZXM7XG5mdW5jdGlvbiBydW50aW1lVHlwZXNJbnRlcnNlY3RzKHQxLCB0Mikge1xuICAgIGNvbnN0IHJ0MSA9IHBvc3NpYmxlUnVudGltZVR5cGVzKHQxKTtcbiAgICBjb25zdCBydDIgPSBwb3NzaWJsZVJ1bnRpbWVUeXBlcyh0Mik7XG4gICAgZm9yIChjb25zdCBvYmoxIG9mIHJ0MSkge1xuICAgICAgICBpZiAocnQyLnNvbWUob2JqMiA9PiBvYmoxLm5hbWUgPT09IG9iajIubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucnVudGltZVR5cGVzSW50ZXJzZWN0cyA9IHJ1bnRpbWVUeXBlc0ludGVyc2VjdHM7XG5mdW5jdGlvbiBpc0NvbmRpdGlvbmFsRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICAgIHJldHVybiBbJ2luY2x1ZGUnLCAnc2tpcCddLmluY2x1ZGVzKGRpcmVjdGl2ZS5uYW1lKTtcbn1cbmV4cG9ydHMuaXNDb25kaXRpb25hbERpcmVjdGl2ZSA9IGlzQ29uZGl0aW9uYWxEaXJlY3RpdmU7XG5leHBvcnRzLmV4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvbnMgPSBbXG4gICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLlFVRVJZLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5NVVRBVElPTixcbiAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uU1VCU0NSSVBUSU9OLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRCxcbiAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfREVGSU5JVElPTixcbiAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLlZBUklBQkxFX0RFRklOSVRJT04sXG5dO1xuY29uc3QgZXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uc1NldCA9IG5ldyBTZXQoZXhwb3J0cy5leGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb25zKTtcbmZ1bmN0aW9uIGlzRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uKGxvYykge1xuICAgIHJldHVybiBleGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb25zU2V0Lmhhcyhsb2MpO1xufVxuZXhwb3J0cy5pc0V4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvbiA9IGlzRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uO1xuZXhwb3J0cy50eXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25zID0gW1xuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5TQ0hFTUEsXG4gICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUixcbiAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNULFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsXG4gICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLlVOSU9OLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1QsXG4gICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT04sXG5dO1xuY29uc3QgdHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uc1NldCA9IG5ldyBTZXQoZXhwb3J0cy50eXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25zKTtcbmZ1bmN0aW9uIGlzVHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uKGxvYykge1xuICAgIHJldHVybiB0eXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25zU2V0Lmhhcyhsb2MpO1xufVxuZXhwb3J0cy5pc1R5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbiA9IGlzVHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uO1xuZnVuY3Rpb24gdHlwZVRvQVNUKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICBjYXNlICdMaXN0VHlwZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkxJU1RfVFlQRSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlVG9BU1QodHlwZS5vZlR5cGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdOb25OdWxsVHlwZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5PTl9OVUxMX1RZUEUsXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZVRvQVNUKHR5cGUub2ZUeXBlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRURfVFlQRSxcbiAgICAgICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiB0eXBlLm5hbWUgfVxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLnR5cGVUb0FTVCA9IHR5cGVUb0FTVDtcbmZ1bmN0aW9uIHR5cGVGcm9tQVNUKHNjaGVtYSwgbm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuTElTVF9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0VHlwZSh0eXBlRnJvbUFTVChzY2hlbWEsIG5vZGUudHlwZSkpO1xuICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLk5PTl9OVUxMX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vbk51bGxUeXBlKHR5cGVGcm9tQVNUKHNjaGVtYSwgbm9kZS50eXBlKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gc2NoZW1hLnR5cGUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYFVua25vd24gdHlwZSBcIiR7bm9kZS5uYW1lLnZhbHVlfVwiYCwgeyBub2Rlczogbm9kZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbn1cbmV4cG9ydHMudHlwZUZyb21BU1QgPSB0eXBlRnJvbUFTVDtcbmZ1bmN0aW9uIGlzTGVhZlR5cGUodHlwZSkge1xuICAgIHJldHVybiBpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNFbnVtVHlwZSh0eXBlKTtcbn1cbmV4cG9ydHMuaXNMZWFmVHlwZSA9IGlzTGVhZlR5cGU7XG5jbGFzcyBEaXJlY3RpdmVUYXJnZXRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihfc2NoZW1hKSB7XG4gICAgICAgIHRoaXMuX3NjaGVtYSA9IF9zY2hlbWE7XG4gICAgfVxuICAgIHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjaGVtYTtcbiAgICB9XG4gICAgYXBwbGllZERpcmVjdGl2ZXNPZihuYW1lT3JEZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSB0eXBlb2YgbmFtZU9yRGVmaW5pdGlvbiA9PT0gJ3N0cmluZycgPyBuYW1lT3JEZWZpbml0aW9uIDogbmFtZU9yRGVmaW5pdGlvbi5uYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWVkRGlyZWN0aXZlcy5maWx0ZXIoZCA9PiBkLm5hbWUgPT0gZGlyZWN0aXZlTmFtZSk7XG4gICAgfVxuICAgIGdldCBhcHBsaWVkRGlyZWN0aXZlcygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fYXBwbGllZERpcmVjdGl2ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgIH1cbiAgICBoYXNBcHBsaWVkRGlyZWN0aXZlKG5hbWVPckRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IHR5cGVvZiBuYW1lT3JEZWZpbml0aW9uID09PSAnc3RyaW5nJyA/IG5hbWVPckRlZmluaXRpb24gOiBuYW1lT3JEZWZpbml0aW9uLm5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGxpZWREaXJlY3RpdmVzLnNvbWUoZCA9PiBkLm5hbWUgPT0gZGlyZWN0aXZlTmFtZSk7XG4gICAgfVxuICAgIGFwcGx5RGlyZWN0aXZlKGRlZk9yRGlyZWN0aXZlLCBhcmdzKSB7XG4gICAgICAgIGxldCB0b0FkZDtcbiAgICAgICAgaWYgKGRlZk9yRGlyZWN0aXZlIGluc3RhbmNlb2YgRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoZGVmT3JEaXJlY3RpdmUuc2NoZW1hKCkgIT0gdGhpcy5zY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGFkZCBkaXJlY3RpdmUgJHtkZWZPckRpcmVjdGl2ZX0gdG8gJHt0aGlzfSBhcyBpdCBpcyBhdHRhY2hlZCB0byBhbm90aGVyIHNjaGVtYWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9BZGQgPSBkZWZPckRpcmVjdGl2ZTtcbiAgICAgICAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQuc2V0QXJndW1lbnRzKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9BZGQgPSBuZXcgRGlyZWN0aXZlKGRlZk9yRGlyZWN0aXZlLm5hbWUsIGFyZ3MgIT09IG51bGwgJiYgYXJncyAhPT0gdm9pZCAwID8gYXJncyA6IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlWydzZXRQYXJlbnQnXS5jYWxsKHRvQWRkLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuX2FwcGxpZWREaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBsaWVkRGlyZWN0aXZlcy5wdXNoKHRvQWRkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGxpZWREaXJlY3RpdmVzID0gW3RvQWRkXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgfVxuICAgIGFwcGxpZWREaXJlY3RpdmVzVG9EaXJlY3RpdmVOb2RlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuYXBwbGllZERpcmVjdGl2ZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGllZERpcmVjdGl2ZXMubWFwKGRpcmVjdGl2ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkRJUkVDVElWRSxcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkaXJlY3RpdmUubmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogZGlyZWN0aXZlLmFyZ3VtZW50c1RvQVNUKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhcHBsaWVkRGlyZWN0aXZlc1RvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWVkRGlyZWN0aXZlcy5sZW5ndGggPT0gMFxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiAnICcgKyB0aGlzLmFwcGxpZWREaXJlY3RpdmVzLmpvaW4oJyAnKTtcbiAgICB9XG4gICAgdmFyaWFibGVzSW5BcHBsaWVkRGlyZWN0aXZlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGllZERpcmVjdGl2ZXMucmVkdWNlKChhY2MsIGQpID0+IG1lcmdlVmFyaWFibGVzKGFjYywgdmFyaWFibGVzSW5Bcmd1bWVudHMoZC5hcmd1bWVudHMoKSkpLCBbXSk7XG4gICAgfVxufVxuZXhwb3J0cy5EaXJlY3RpdmVUYXJnZXRFbGVtZW50ID0gRGlyZWN0aXZlVGFyZ2V0RWxlbWVudDtcbmZ1bmN0aW9uIHNvdXJjZUFTVHMoLi4uZWx0cykge1xuICAgIHJldHVybiBlbHRzLm1hcChlbHQgPT4gZWx0ID09PSBudWxsIHx8IGVsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWx0LnNvdXJjZUFTVCkuZmlsdGVyKChlbHQpID0+IGVsdCAhPT0gdW5kZWZpbmVkKTtcbn1cbmV4cG9ydHMuc291cmNlQVNUcyA9IHNvdXJjZUFTVHM7XG5jbGFzcyBFbGVtZW50IHtcbiAgICBzY2hlbWEoKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuc2NoZW1hSW50ZXJuYWwoKTtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShzY2hlbWEsICdyZXF1ZXN0ZWQgc2NoZW1hIGRvZXMgbm90IGV4aXN0LiBQcm9iYWJseSBiZWNhdXNlIHRoZSBlbGVtZW50IGlzIHVuYXR0YWNoZWQnKTtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgc2NoZW1hSW50ZXJuYWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9wYXJlbnQgaW5zdGFuY2VvZiBTY2hlbWFFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50LnNjaGVtYUludGVybmFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcGFyZW50IGluc3RhbmNlb2YgRGlyZWN0aXZlVGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudC5zY2hlbWEoKTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCAndW5yZWFjaGFibGUgY29kZS4gcGFyZW50IGlzIG9mIHVua25vd24gdHlwZScpO1xuICAgIH1cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHRoaXMuX3BhcmVudCwgJ3RyeWluZyB0byBhY2Nlc3Mgbm9uLWV4aXN0ZW50IHBhcmVudCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xuICAgIH1cbiAgICBpc0F0dGFjaGVkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9wYXJlbnQ7XG4gICAgfVxuICAgIHNldFBhcmVudChwYXJlbnQpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpcy5fcGFyZW50LCBcIkNhbm5vdCBzZXQgcGFyZW50IG9mIGFuIGFscmVhZHkgYXR0YWNoZWQgZWxlbWVudFwiKTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLm9uQXR0YWNoZWQoKTtcbiAgICB9XG4gICAgb25BdHRhY2hlZCgpIHtcbiAgICB9XG4gICAgY2hlY2tVcGRhdGUoKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkodGhpcy5pc0F0dGFjaGVkKCksICgpID0+IGBDYW5ub3QgbW9kaWZ5IGRldGFjaGVkIGVsZW1lbnQgJHt0aGlzfWApO1xuICAgIH1cbn1cbmNsYXNzIEV4dGVuc2lvbiB7XG4gICAgZ2V0IGV4dGVuZGVkRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuZGVkRWxlbWVudDtcbiAgICB9XG4gICAgc2V0RXh0ZW5kZWRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpcy5fZXh0ZW5kZWRFbGVtZW50LCBcIkNhbm5vdCBhdHRhY2hlZCBhbHJlYWR5IGF0dGFjaGVkIGV4dGVuc2lvblwiKTtcbiAgICAgICAgdGhpcy5fZXh0ZW5kZWRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG59XG5leHBvcnRzLkV4dGVuc2lvbiA9IEV4dGVuc2lvbjtcbmNsYXNzIFNjaGVtYUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBhZGRVbmFwcGxpZWREaXJlY3RpdmUoeyBuYW1lT3JEZWYsIGFyZ3MsIGV4dGVuc2lvbiwgZGlyZWN0aXZlIH0pIHtcbiAgICAgICAgY29uc3QgdG9BZGQgPSB7XG4gICAgICAgICAgICBuYW1lT3JEZWYsXG4gICAgICAgICAgICBhcmdzOiBhcmdzICE9PSBudWxsICYmIGFyZ3MgIT09IHZvaWQgMCA/IGFyZ3MgOiB7fSxcbiAgICAgICAgICAgIGV4dGVuc2lvbixcbiAgICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX3VuYXBwbGllZERpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3VuYXBwbGllZERpcmVjdGl2ZXMucHVzaCh0b0FkZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91bmFwcGxpZWREaXJlY3RpdmVzID0gW3RvQWRkXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzVW5hcHBsaWVkRGlyZWN0aXZlcygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZU9yRGVmLCBhcmdzLCBleHRlbnNpb24sIGRpcmVjdGl2ZSB9IG9mIChfYSA9IHRoaXMuX3VuYXBwbGllZERpcmVjdGl2ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKSB7XG4gICAgICAgICAgICBjb25zdCBkID0gdGhpcy5hcHBseURpcmVjdGl2ZShuYW1lT3JEZWYsIGFyZ3MpO1xuICAgICAgICAgICAgZC5zZXRPZkV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICAgICAgZC5zb3VyY2VBU1QgPSBkaXJlY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdW5hcHBsaWVkRGlyZWN0aXZlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IGFwcGxpZWREaXJlY3RpdmVzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9hcHBsaWVkRGlyZWN0aXZlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgfVxuICAgIGFwcGxpZWREaXJlY3RpdmVzT2YobmFtZU9yRGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmVOYW1lID0gdHlwZW9mIG5hbWVPckRlZmluaXRpb24gPT09ICdzdHJpbmcnID8gbmFtZU9yRGVmaW5pdGlvbiA6IG5hbWVPckRlZmluaXRpb24ubmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGllZERpcmVjdGl2ZXMuZmlsdGVyKGQgPT4gZC5uYW1lID09IGRpcmVjdGl2ZU5hbWUpO1xuICAgIH1cbiAgICBoYXNBcHBsaWVkRGlyZWN0aXZlKG5hbWVPckRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgbmFtZU9yRGVmaW5pdGlvbiA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gdGhpcy5hcHBsaWVkRGlyZWN0aXZlc09mKG5hbWVPckRlZmluaXRpb24pXG4gICAgICAgICAgICA6IHRoaXMuYXBwbGllZERpcmVjdGl2ZXNPZihuYW1lT3JEZWZpbml0aW9uKSkubGVuZ3RoICE9PSAwO1xuICAgIH1cbiAgICBhcHBseURpcmVjdGl2ZShuYW1lT3JEZWYsIGFyZ3MsIGFzRmlyc3REaXJlY3RpdmUgPSBmYWxzZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBuYW1lO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZiA9IChfYSA9IHRoaXMuc2NoZW1hKCkuZGlyZWN0aXZlKG5hbWVPckRlZikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuc2NoZW1hKCkuYmx1ZXByaW50Lm9uTWlzc2luZ0RpcmVjdGl2ZURlZmluaXRpb24odGhpcy5zY2hlbWEoKSwgbmFtZU9yRGVmLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICghZGVmKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5zY2hlbWEoKS5ibHVlcHJpbnQub25HcmFwaFFMSlNWYWxpZGF0aW9uRXJyb3IodGhpcy5zY2hlbWEoKSwgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgVW5rbm93biBkaXJlY3RpdmUgXCJAJHtuYW1lT3JEZWZ9XCIuYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmKSkge1xuICAgICAgICAgICAgICAgIHRocm93ICgwLCBleHBvcnRzLkVyckdyYXBoUUxWYWxpZGF0aW9uRmFpbGVkKShkZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmFtZSA9IG5hbWVPckRlZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUobmFtZU9yRGVmKTtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lT3JEZWYubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b0FkZCA9IG5ldyBEaXJlY3RpdmUobmFtZSwgYXJncyAhPT0gbnVsbCAmJiBhcmdzICE9PSB2b2lkIDAgPyBhcmdzIDogT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlWydzZXRQYXJlbnQnXS5jYWxsKHRvQWRkLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuX2FwcGxpZWREaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICBpZiAoYXNGaXJzdERpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGxpZWREaXJlY3RpdmVzLnVuc2hpZnQodG9BZGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbGllZERpcmVjdGl2ZXMucHVzaCh0b0FkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBsaWVkRGlyZWN0aXZlcyA9IFt0b0FkZF07XG4gICAgICAgIH1cbiAgICAgICAgRGlyZWN0aXZlRGVmaW5pdGlvbi5wcm90b3R5cGVbJ2FkZFJlZmVyZW5jZXInXS5jYWxsKHRvQWRkLmRlZmluaXRpb24sIHRvQWRkKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgfVxuICAgIHJlbW92ZUFwcGxpZWREaXJlY3RpdmVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2FwcGxpZWREaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXBwbGllZCA9IHRoaXMuX2FwcGxpZWREaXJlY3RpdmVzLmNvbmNhdCgpO1xuICAgICAgICBhcHBsaWVkLmZvckVhY2goZCA9PiBkLnJlbW92ZSgpKTtcbiAgICB9XG4gICAgb25Nb2RpZmljYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuc2NoZW1hSW50ZXJuYWwoKTtcbiAgICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZVsnb25Nb2RpZmljYXRpb24nXS5jYWxsKHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNFbGVtZW50QnVpbHRJbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZW1vdmVUeXBlUmVmZXJlbmNlSW50ZXJuYWwodHlwZSkge1xuICAgICAgICB0aGlzLnJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSk7XG4gICAgfVxuICAgIGNoZWNrUmVtb3ZhbCgpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpcy5pc0VsZW1lbnRCdWlsdEluKCkgfHwgU2NoZW1hLnByb3RvdHlwZVsnY2FuTW9kaWZ5QnVpbHRJbiddLmNhbGwodGhpcy5zY2hlbWEoKSksICgpID0+IGBDYW5ub3QgbW9kaWZ5IGJ1aWx0LWluICR7dGhpc31gKTtcbiAgICB9XG4gICAgY2hlY2tVcGRhdGUoYWRkZWRFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgIGlmICghU2NoZW1hLnByb3RvdHlwZVsnY2FuTW9kaWZ5QnVpbHRJbiddLmNhbGwodGhpcy5zY2hlbWEoKSkpIHtcbiAgICAgICAgICAgIGxldCB0aGlzRWxlbWVudCA9IHRoaXM7XG4gICAgICAgICAgICB3aGlsZSAodGhpc0VsZW1lbnQgJiYgdGhpc0VsZW1lbnQgaW5zdGFuY2VvZiBTY2hlbWFFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpc0VsZW1lbnQuaXNFbGVtZW50QnVpbHRJbigpLCAoKSA9PiBgQ2Fubm90IG1vZGlmeSBidWlsdC1pbiAob3IgcGFydCBvZiBidWlsdC1pbikgJHt0aGlzfWApO1xuICAgICAgICAgICAgICAgIHRoaXNFbGVtZW50ID0gdGhpc0VsZW1lbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhZGRlZEVsZW1lbnQgJiYgYWRkZWRFbGVtZW50LmlzQXR0YWNoZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgdGhhdFNjaGVtYSA9IGFkZGVkRWxlbWVudC5zY2hlbWEoKTtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIXRoYXRTY2hlbWEgfHwgdGhhdFNjaGVtYSA9PT0gdGhpcy5zY2hlbWEoKSwgKCkgPT4gYENhbm5vdCBhZGQgZWxlbWVudCAke2FkZGVkRWxlbWVudH0gdG8gJHt0aGlzfSBhcyBpdCBpcyBhdHRhY2hlZCB0byBhbm90aGVyIHNjaGVtYWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFFbGVtZW50ID0gU2NoZW1hRWxlbWVudDtcbmNsYXNzIE5hbWVkU2NoZW1hRWxlbWVudCBleHRlbmRzIFNjaGVtYUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG59XG5leHBvcnRzLk5hbWVkU2NoZW1hRWxlbWVudCA9IE5hbWVkU2NoZW1hRWxlbWVudDtcbmNsYXNzIEJhc2VOYW1lZFR5cGUgZXh0ZW5kcyBOYW1lZFNjaGVtYUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGlzQnVpbHRJbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgICB0aGlzLmlzQnVpbHRJbiA9IGlzQnVpbHRJbjtcbiAgICAgICAgdGhpcy5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICBhZGRSZWZlcmVuY2VyKHJlZmVyZW5jZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlZmVyZW5jZXJzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlZmVyZW5jZXJzLmluY2x1ZGVzKHJlZmVyZW5jZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlcnMucHVzaChyZWZlcmVuY2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZmVyZW5jZXJzID0gW3JlZmVyZW5jZXJdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVJlZmVyZW5jZXIocmVmZXJlbmNlcikge1xuICAgICAgICBpZiAodGhpcy5fcmVmZXJlbmNlcnMpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLnJlbW92ZUFycmF5RWxlbWVudCkocmVmZXJlbmNlciwgdGhpcy5fcmVmZXJlbmNlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjb29yZGluYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbiAgICAqYWxsQ2hpbGRFbGVtZW50cygpIHtcbiAgICB9XG4gICAgZXh0ZW5zaW9ucygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZXh0ZW5zaW9ucykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgfVxuICAgIGhhc0V4dGVuc2lvbihleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuX2V4dGVuc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyhleHRlbnNpb24pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9XG4gICAgbmV3RXh0ZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRFeHRlbnNpb24obmV3IEV4dGVuc2lvbigpKTtcbiAgICB9XG4gICAgYWRkRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLmhhc0V4dGVuc2lvbihleHRlbnNpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIWV4dGVuc2lvbi5leHRlbmRlZEVsZW1lbnQsICgpID0+IGBDYW5ub3QgYWRkIGV4dGVuc2lvbiB0byB0eXBlICR7dGhpc306IGl0IGlzIGFscmVhZHkgYWRkZWQgdG8gYW5vdGhlciB0eXBlYCk7XG4gICAgICAgIGlmICh0aGlzLl9leHRlbnNpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl9leHRlbnNpb25zLnB1c2goZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVuc2lvbnMgPSBbZXh0ZW5zaW9uXTtcbiAgICAgICAgfVxuICAgICAgICBFeHRlbnNpb24ucHJvdG90eXBlWydzZXRFeHRlbmRlZEVsZW1lbnQnXS5jYWxsKGV4dGVuc2lvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcbiAgICB9XG4gICAgcmVtb3ZlRXh0ZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9leHRlbnNpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgdGhpcy5hcHBsaWVkRGlyZWN0aXZlcykge1xuICAgICAgICAgICAgZGlyZWN0aXZlLnJlbW92ZU9mRXh0ZW5zaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVJbm5lckVsZW1lbnRzRXh0ZW5zaW9ucygpO1xuICAgIH1cbiAgICBpc0ludHJvc3BlY3Rpb25UeXBlKCkge1xuICAgICAgICByZXR1cm4gKDAsIGludHJvc3BlY3Rpb25fMS5pc0ludHJvc3BlY3Rpb25OYW1lKSh0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBoYXNFeHRlbnNpb25FbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZXh0ZW5zaW9ucztcbiAgICB9XG4gICAgaGFzTm9uRXh0ZW5zaW9uRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uXG4gICAgICAgICAgICB8fCB0aGlzLmFwcGxpZWREaXJlY3RpdmVzLnNvbWUoZCA9PiBkLm9mRXh0ZW5zaW9uKCkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHx8IHRoaXMuaGFzTm9uRXh0ZW5zaW9uSW5uZXJFbGVtZW50cygpO1xuICAgIH1cbiAgICBpc0VsZW1lbnRCdWlsdEluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0J1aWx0SW47XG4gICAgfVxuICAgIHJlbmFtZShuZXdOYW1lKSB7XG4gICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgY29uc3Qgb2xkTmFtZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX25hbWUgPSBuZXdOYW1lO1xuICAgICAgICBTY2hlbWEucHJvdG90eXBlWydyZW5hbWVUeXBlSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgb2xkTmFtZSwgbmV3TmFtZSk7XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICB9XG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hlY2tSZW1vdmFsKCk7XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgdGhpcy5zb3VyY2VBU1QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVtb3ZlQXBwbGllZERpcmVjdGl2ZXMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVJbm5lckVsZW1lbnRzKCk7XG4gICAgICAgIGNvbnN0IHRvUmV0dXJuID0gKF9iID0gKF9hID0gdGhpcy5fcmVmZXJlbmNlcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAociA9PiB7XG4gICAgICAgICAgICBTY2hlbWFFbGVtZW50LnByb3RvdHlwZVsncmVtb3ZlVHlwZVJlZmVyZW5jZUludGVybmFsJ10uY2FsbChyLCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICBTY2hlbWEucHJvdG90eXBlWydyZW1vdmVUeXBlSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH1cbiAgICByZW1vdmVSZWN1cnNpdmUoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCkuZm9yRWFjaChyZWYgPT4gdGhpcy5yZW1vdmVSZWZlcmVuY2VSZWN1cnNpdmUocmVmKSk7XG4gICAgfVxuICAgIHJlZmVyZW5jZXJzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9yZWZlcmVuY2VycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgfVxuICAgIGlzUmVmZXJlbmNlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fcmVmZXJlbmNlcnM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIE5hbWVkU2NoZW1hRWxlbWVudFdpdGhUeXBlIGV4dGVuZHMgTmFtZWRTY2hlbWFFbGVtZW50IHtcbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuICAgIHNldCB0eXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrUmVtb3ZhbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90eXBlKSB7XG4gICAgICAgICAgICByZW1vdmVSZWZlcmVuY2VUb1R5cGUodGhpcywgdGhpcy5fdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBhZGRSZWZlcmVuY2VUb1R5cGUodGhpcywgdHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlVHlwZVJlZmVyZW5jZSh0eXBlKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkodGhpcy5fdHlwZSAmJiBiYXNlVHlwZSh0aGlzLl90eXBlKSA9PT0gdHlwZSwgKCkgPT4gYENhbm5vdCByZW1vdmUgcmVmZXJlbmNlIHRvIHR5cGUgJHt0eXBlfSBvbiAke3RoaXN9IGFzIGl0cyB0eXBlIGlzICR7dGhpcy5fdHlwZX1gKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLk5hbWVkU2NoZW1hRWxlbWVudFdpdGhUeXBlID0gTmFtZWRTY2hlbWFFbGVtZW50V2l0aFR5cGU7XG5jbGFzcyBCYXNlRXh0ZW5zaW9uTWVtYmVyIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgb2ZFeHRlbnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRlbnNpb247XG4gICAgfVxuICAgIHJlbW92ZU9mRXh0ZW5zaW9uKCkge1xuICAgICAgICB0aGlzLl9leHRlbnNpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghZXh0ZW5zaW9uIHx8ICgoX2EgPSB0aGlzLl9wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oYXNFeHRlbnNpb24oZXh0ZW5zaW9uKSksICgpID0+IGBDYW5ub3Qgc2V0IG9iamVjdCBhcyBwYXJ0IG9mIHRoZSBwcm92aWRlZCBleHRlbnNpb246IGl0IGlzIG5vdCBhbiBleHRlbnNpb24gb2YgcGFyZW50ICR7dGhpcy5wYXJlbnR9YCk7XG4gICAgICAgIHRoaXMuX2V4dGVuc2lvbiA9IGV4dGVuc2lvbjtcbiAgICB9XG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUlubmVyKCk7XG4gICAgICAgIFNjaGVtYS5wcm90b3R5cGVbJ29uTW9kaWZpY2F0aW9uJ10uY2FsbCh0aGlzLnNjaGVtYSgpKTtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuY2xhc3MgU2NoZW1hQmx1ZXByaW50IHtcbiAgICBvbk1pc3NpbmdEaXJlY3RpdmVEZWZpbml0aW9uKF9zY2hlbWEsIF9uYW1lLCBfYXJncykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvbkRpcmVjdGl2ZURlZmluaXRpb25BbmRTY2hlbWFQYXJzZWQoXykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlnbm9yZVBhcnNlZEZpZWxkKF90eXBlLCBfZmllbGROYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb25Db25zdHJ1Y3RlZChfKSB7XG4gICAgfVxuICAgIG9uQWRkZWRDb3JlRmVhdHVyZShfc2NoZW1hLCBfZmVhdHVyZSkge1xuICAgIH1cbiAgICBvbkludmFsaWRhdGlvbihfKSB7XG4gICAgfVxuICAgIG9uVmFsaWRhdGlvbihfc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFsaWRhdGlvblJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gc3BlY2lmaWVkUnVsZXNfMS5zcGVjaWZpZWRTRExSdWxlcztcbiAgICB9XG4gICAgb25HcmFwaFFMSlNWYWxpZGF0aW9uRXJyb3Ioc2NoZW1hLCBlcnJvcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1hdGNoZXIgPSAvXlVua25vd24gZGlyZWN0aXZlIFwiQCg/PGRpcmVjdGl2ZT5bX0EtWmEtel1bXzAtOUEtWmEtel0qKVwiXFwuJC8uZXhlYyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IChfYSA9IG1hdGNoZXIgPT09IG51bGwgfHwgbWF0Y2hlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF0Y2hlci5ncm91cHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXJlY3RpdmU7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFsbERlZmluZWREaXJlY3RpdmVOYW1lcyA9IHNjaGVtYS5hbGxEaXJlY3RpdmVzKCkubWFwKChkKSA9PiBkLm5hbWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9ICgwLCBzdWdnZXN0aW9uc18xLnN1Z2dlc3Rpb25MaXN0KShuYW1lLCBhbGxEZWZpbmVkRGlyZWN0aXZlTmFtZXMpO1xuICAgICAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vblVua25vd25EaXJlY3RpdmVWYWxpZGF0aW9uRXJyb3Ioc2NoZW1hLCBuYW1lLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGVycm9yXzEud2l0aE1vZGlmaWVkRXJyb3JNZXNzYWdlKShlcnJvciwgYCR7ZXJyb3IubWVzc2FnZX0keygwLCBzdWdnZXN0aW9uc18xLmRpZFlvdU1lYW4pKHN1Z2dlc3Rpb25zLm1hcCgocykgPT4gJ0AnICsgcykpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uVW5rbm93bkRpcmVjdGl2ZVZhbGlkYXRpb25FcnJvcihfc2NoZW1hLCBfdW5rbm93bkRpcmVjdGl2ZU5hbWUsIGVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICAgYXBwbHlEaXJlY3RpdmVzQWZ0ZXJQYXJzaW5nKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFCbHVlcHJpbnQgPSBTY2hlbWFCbHVlcHJpbnQ7XG5leHBvcnRzLmRlZmF1bHRTY2hlbWFCbHVlcHJpbnQgPSBuZXcgU2NoZW1hQmx1ZXByaW50KCk7XG5jbGFzcyBDb3JlRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBuYW1lSW5TY2hlbWEsIGRpcmVjdGl2ZSwgaW1wb3J0cywgcHVycG9zZSkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5uYW1lSW5TY2hlbWEgPSBuYW1lSW5TY2hlbWE7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICB0aGlzLmltcG9ydHMgPSBpbXBvcnRzO1xuICAgICAgICB0aGlzLnB1cnBvc2UgPSBwdXJwb3NlO1xuICAgIH1cbiAgICBpc0ZlYXR1cmVEZWZpbml0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaW1wb3J0TmFtZSA9IGVsZW1lbnQua2luZCA9PT0gJ0RpcmVjdGl2ZURlZmluaXRpb24nXG4gICAgICAgICAgICA/ICdAJyArIGVsZW1lbnQubmFtZVxuICAgICAgICAgICAgOiBlbGVtZW50Lm5hbWU7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5hbWUuc3RhcnRzV2l0aCh0aGlzLm5hbWVJblNjaGVtYSArICdfXycpXG4gICAgICAgICAgICB8fCAoZWxlbWVudC5raW5kID09PSAnRGlyZWN0aXZlRGVmaW5pdGlvbicgJiYgZWxlbWVudC5uYW1lID09PSB0aGlzLm5hbWVJblNjaGVtYSlcbiAgICAgICAgICAgIHx8ICEhdGhpcy5pbXBvcnRzLmZpbmQoKGkpID0+IHsgdmFyIF9hOyByZXR1cm4gaW1wb3J0TmFtZSA9PT0gKChfYSA9IGkuYXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGkubmFtZSk7IH0pO1xuICAgIH1cbiAgICBkaXJlY3RpdmVOYW1lSW5TY2hlbWEobmFtZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBlbGVtZW50SW1wb3J0ID0gdGhpcy5pbXBvcnRzLmZpbmQoKGkpID0+IGkubmFtZS5jaGFyQXQoMCkgPT09ICdAJyAmJiBpLm5hbWUuc2xpY2UoMSkgPT09IG5hbWUpO1xuICAgICAgICByZXR1cm4gZWxlbWVudEltcG9ydFxuICAgICAgICAgICAgPyAoKF9iID0gKF9hID0gZWxlbWVudEltcG9ydC5hcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNsaWNlKDEpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuYW1lKVxuICAgICAgICAgICAgOiAobmFtZSA9PT0gdGhpcy51cmwubmFtZVxuICAgICAgICAgICAgICAgID8gdGhpcy5uYW1lSW5TY2hlbWFcbiAgICAgICAgICAgICAgICA6IHRoaXMubmFtZUluU2NoZW1hICsgJ19fJyArIG5hbWUpO1xuICAgIH1cbiAgICB0eXBlTmFtZUluU2NoZW1hKG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBlbGVtZW50SW1wb3J0ID0gdGhpcy5pbXBvcnRzLmZpbmQoKGkpID0+IGkubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50SW1wb3J0ID8gKChfYSA9IGVsZW1lbnRJbXBvcnQuYXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5hbWUpIDogdGhpcy5uYW1lSW5TY2hlbWEgKyAnX18nICsgbmFtZTtcbiAgICB9XG59XG5leHBvcnRzLkNvcmVGZWF0dXJlID0gQ29yZUZlYXR1cmU7XG5jbGFzcyBDb3JlRmVhdHVyZXMge1xuICAgIGNvbnN0cnVjdG9yKGNvcmVJdHNlbGYpIHtcbiAgICAgICAgdGhpcy5jb3JlSXRzZWxmID0gY29yZUl0c2VsZjtcbiAgICAgICAgdGhpcy5ieUFsaWFzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmJ5SWRlbnRpdHkgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuYWRkKGNvcmVJdHNlbGYpO1xuICAgICAgICBjb25zdCBjb3JlRGVmID0gKDAsIGNvcmVTcGVjXzEuZmluZENvcmVTcGVjVmVyc2lvbikoY29yZUl0c2VsZi51cmwpO1xuICAgICAgICBpZiAoIWNvcmVEZWYpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLlVOS05PV05fTElOS19WRVJTSU9OLmVycihgU2NoZW1hIHVzZXMgdW5rbm93biB2ZXJzaW9uICR7Y29yZUl0c2VsZi51cmwudmVyc2lvbn0gb2YgdGhlICR7Y29yZUl0c2VsZi51cmwubmFtZX0gc3BlY2ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29yZURlZmluaXRpb24gPSBjb3JlRGVmO1xuICAgIH1cbiAgICBnZXRCeUlkZW50aXR5KGlkZW50aXR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5SWRlbnRpdHkuZ2V0KGlkZW50aXR5KTtcbiAgICB9XG4gICAgYWxsRmVhdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5SWRlbnRpdHkudmFsdWVzKCk7XG4gICAgfVxuICAgIHJlbW92ZUZlYXR1cmUoZmVhdHVyZUlkZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmJ5SWRlbnRpdHkuZ2V0KGZlYXR1cmVJZGVudGl0eSk7XG4gICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLmJ5SWRlbnRpdHkuZGVsZXRlKGZlYXR1cmVJZGVudGl0eSk7XG4gICAgICAgICAgICB0aGlzLmJ5QWxpYXMuZGVsZXRlKGZlYXR1cmUubmFtZUluU2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXliZUFkZEZlYXR1cmUoZGlyZWN0aXZlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICgoKF9hID0gZGlyZWN0aXZlLmRlZmluaXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSAhPT0gdGhpcy5jb3JlSXRzZWxmLm5hbWVJblNjaGVtYSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlZERpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgY29uc3QgYXJncyA9IHR5cGVkRGlyZWN0aXZlLmFyZ3VtZW50cygpO1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmNvcmVEZWZpbml0aW9uLmV4dHJhY3RGZWF0dXJlVXJsKGFyZ3MpO1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuYnlJZGVudGl0eS5nZXQodXJsLmlkZW50aXR5KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0xJTktfRElSRUNUSVZFX1VTQUdFLmVycihgRHVwbGljYXRlIGluY2x1c2lvbiBvZiBmZWF0dXJlICR7dXJsLmlkZW50aXR5fWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltcG9ydHMgPSAoMCwgY29yZVNwZWNfMS5leHRyYWN0Q29yZUZlYXR1cmVJbXBvcnRzKSh1cmwsIHR5cGVkRGlyZWN0aXZlKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZSA9IG5ldyBDb3JlRmVhdHVyZSh1cmwsIChfYiA9IGFyZ3MuYXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHVybC5uYW1lLCBkaXJlY3RpdmUsIGltcG9ydHMsIGFyZ3MuZm9yKTtcbiAgICAgICAgdGhpcy5hZGQoZmVhdHVyZSk7XG4gICAgICAgIGRpcmVjdGl2ZS5zY2hlbWEoKS5ibHVlcHJpbnQub25BZGRlZENvcmVGZWF0dXJlKGRpcmVjdGl2ZS5zY2hlbWEoKSwgZmVhdHVyZSk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgIH1cbiAgICBhZGQoZmVhdHVyZSkge1xuICAgICAgICB0aGlzLmJ5QWxpYXMuc2V0KGZlYXR1cmUubmFtZUluU2NoZW1hLCBmZWF0dXJlKTtcbiAgICAgICAgdGhpcy5ieUlkZW50aXR5LnNldChmZWF0dXJlLnVybC5pZGVudGl0eSwgZmVhdHVyZSk7XG4gICAgfVxuICAgIHNvdXJjZUZlYXR1cmUoZWxlbWVudCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBpc0RpcmVjdGl2ZSA9IGVsZW1lbnQgaW5zdGFuY2VvZiBEaXJlY3RpdmVEZWZpbml0aW9uIHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBEaXJlY3RpdmU7XG4gICAgICAgIGNvbnN0IHNwbGl0dGVkID0gZWxlbWVudC5uYW1lLnNwbGl0KCdfXycpO1xuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuYnlBbGlhcy5nZXQoc3BsaXR0ZWRbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmUgPyB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZSxcbiAgICAgICAgICAgICAgICBuYW1lSW5GZWF0dXJlOiBzcGxpdHRlZFsxXSxcbiAgICAgICAgICAgICAgICBpc0ltcG9ydGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RGZWF0dXJlID0gdGhpcy5ieUFsaWFzLmdldChlbGVtZW50Lm5hbWUpO1xuICAgICAgICAgICAgaWYgKGRpcmVjdEZlYXR1cmUgJiYgaXNEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiBkaXJlY3RGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lSW5GZWF0dXJlOiAoX2IgPSAoX2EgPSBkaXJlY3RGZWF0dXJlLmltcG9ydHMuZmluZChpbXAgPT4gaW1wLmFzID09PSBgQCR7ZWxlbWVudC5uYW1lfWApKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZS5zbGljZSgxKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZWxlbWVudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBpc0ltcG9ydGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpbXBvcnROYW1lID0gaXNEaXJlY3RpdmUgPyAnQCcgKyBlbGVtZW50Lm5hbWUgOiBlbGVtZW50Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCBhbGxGZWF0dXJlcyA9IFt0aGlzLmNvcmVJdHNlbGYsIC4uLnRoaXMuYnlJZGVudGl0eS52YWx1ZXMoKV07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZlYXR1cmUgb2YgYWxsRmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgYXMsIG5hbWUgfSBvZiBmZWF0dXJlLmltcG9ydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChhcyAhPT0gbnVsbCAmJiBhcyAhPT0gdm9pZCAwID8gYXMgOiBuYW1lKSA9PT0gaW1wb3J0TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVJbkZlYXR1cmU6IG5hbWUuc2xpY2UoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNJbXBvcnRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Db3JlRmVhdHVyZXMgPSBDb3JlRmVhdHVyZXM7XG5jb25zdCBncmFwaFFMQnVpbHRJblR5cGVzID0gWydJbnQnLCAnRmxvYXQnLCAnU3RyaW5nJywgJ0Jvb2xlYW4nLCAnSUQnXTtcbmNvbnN0IGdyYXBoUUxCdWlsdEluVHlwZXNTcGVjaWZpY2F0aW9ucyA9IGdyYXBoUUxCdWlsdEluVHlwZXMubWFwKChuYW1lKSA9PiAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVTY2FsYXJUeXBlU3BlY2lmaWNhdGlvbikoeyBuYW1lIH0pKTtcbmNvbnN0IGdyYXBoUUxCdWlsdEluRGlyZWN0aXZlc1NwZWNpZmljYXRpb25zID0gW1xuICAgICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgbmFtZTogJ2luY2x1ZGUnLFxuICAgICAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9TUFJFQUQsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlRdLFxuICAgICAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHsgYXJnczogW3sgbmFtZTogJ2lmJywgdHlwZTogbmV3IE5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSB9XSwgZXJyb3JzOiBbXSB9KVxuICAgIH0pLFxuICAgICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgbmFtZTogJ3NraXAnLFxuICAgICAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9TUFJFQUQsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlRdLFxuICAgICAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHsgYXJnczogW3sgbmFtZTogJ2lmJywgdHlwZTogbmV3IE5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSB9XSwgZXJyb3JzOiBbXSB9KVxuICAgIH0pLFxuICAgICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgbmFtZTogJ2RlcHJlY2F0ZWQnLFxuICAgICAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTiwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU1fVkFMVUUsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTl0sXG4gICAgICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoeyBhcmdzOiBbeyBuYW1lOiAncmVhc29uJywgdHlwZTogc2NoZW1hLnN0cmluZ1R5cGUoKSwgZGVmYXVsdFZhbHVlOiAnTm8gbG9uZ2VyIHN1cHBvcnRlZCcgfV0sIGVycm9yczogW10gfSlcbiAgICB9KSxcbiAgICAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKSh7XG4gICAgICAgIG5hbWU6ICdzcGVjaWZpZWRCeScsXG4gICAgICAgIGxvY2F0aW9uczogW2dyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVJdLFxuICAgICAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHsgYXJnczogW3sgbmFtZTogJ3VybCcsIHR5cGU6IG5ldyBOb25OdWxsVHlwZShzY2hlbWEuc3RyaW5nVHlwZSgpKSB9XSwgZXJyb3JzOiBbXSB9KVxuICAgIH0pLFxuICAgICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgbmFtZTogJ2RlZmVyJyxcbiAgICAgICAgbG9jYXRpb25zOiBbZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOTElORV9GUkFHTUVOVF0sXG4gICAgICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoe1xuICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2xhYmVsJywgdHlwZTogc2NoZW1hLnN0cmluZ1R5cGUoKSB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2lmJywgdHlwZTogbmV3IE5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSwgZGVmYXVsdFZhbHVlOiB0cnVlIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgfSlcbiAgICB9KSxcbiAgICAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKSh7XG4gICAgICAgIG5hbWU6ICdzdHJlYW0nLFxuICAgICAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRklFTERdLFxuICAgICAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHtcbiAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdsYWJlbCcsIHR5cGU6IHNjaGVtYS5zdHJpbmdUeXBlKCkgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdpbml0aWFsQ291bnQnLCB0eXBlOiBzY2hlbWEuaW50VHlwZSgpLCBkZWZhdWx0VmFsdWU6IDAgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdpZicsIHR5cGU6IG5ldyBOb25OdWxsVHlwZShzY2hlbWEuYm9vbGVhblR5cGUoKSksIGRlZmF1bHRWYWx1ZTogdHJ1ZSB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgIH0pXG4gICAgfSksXG5dO1xuY29uc3QgY29vcmRpbmF0ZVJlZ2V4cCA9IC9eQD9bX0EtWmEtel1bXzAtOUEtWmEtel0qKFxcLltfQS1aYS16XVtfMC05QS1aYS16XSopPyhcXChbX0EtWmEtel1bXzAtOUEtWmEtel0qOlxcKSk/JC87XG5jbGFzcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKGJsdWVwcmludCA9IGV4cG9ydHMuZGVmYXVsdFNjaGVtYUJsdWVwcmludCwgY29uZmlnID0ge30pIHtcbiAgICAgICAgdGhpcy5ibHVlcHJpbnQgPSBibHVlcHJpbnQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9idWlsdEluVHlwZXMgPSBuZXcgdXRpbHNfMS5NYXBXaXRoQ2FjaGVkQXJyYXlzKCk7XG4gICAgICAgIHRoaXMuX3R5cGVzID0gbmV3IHV0aWxzXzEuTWFwV2l0aENhY2hlZEFycmF5cygpO1xuICAgICAgICB0aGlzLl9idWlsdEluRGlyZWN0aXZlcyA9IG5ldyB1dGlsc18xLk1hcFdpdGhDYWNoZWRBcnJheXMoKTtcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlcyA9IG5ldyB1dGlsc18xLk1hcFdpdGhDYWNoZWRBcnJheXMoKTtcbiAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNWYWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2NoZW1hRGVmaW5pdGlvbiA9IG5ldyBTY2hlbWFEZWZpbml0aW9uKCk7XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlWydzZXRQYXJlbnQnXS5jYWxsKHRoaXMuX3NjaGVtYURlZmluaXRpb24sIHRoaXMpO1xuICAgICAgICBncmFwaFFMQnVpbHRJblR5cGVzU3BlY2lmaWNhdGlvbnMuZm9yRWFjaCgoc3BlYykgPT4gc3BlYy5jaGVja09yQWRkKHRoaXMsIHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICBncmFwaFFMQnVpbHRJbkRpcmVjdGl2ZXNTcGVjaWZpY2F0aW9ucy5mb3JFYWNoKChzcGVjKSA9PiBzcGVjLmNoZWNrT3JBZGQodGhpcywgdW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgIGJsdWVwcmludC5vbkNvbnN0cnVjdGVkKHRoaXMpO1xuICAgICAgICB0aGlzLmlzQ29uc3RydWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBjYW5Nb2RpZnlCdWlsdEluKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNDb25zdHJ1Y3RlZDtcbiAgICB9XG4gICAgcnVuV2l0aEJ1aWx0SW5Nb2RpZmljYXRpb25BbGxvd2VkKGZjdCkge1xuICAgICAgICBjb25zdCB3YXNDb25zdHJ1Y3RlZCA9IHRoaXMuaXNDb25zdHJ1Y3RlZDtcbiAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gZmFsc2U7XG4gICAgICAgIGZjdCgpO1xuICAgICAgICB0aGlzLmlzQ29uc3RydWN0ZWQgPSB3YXNDb25zdHJ1Y3RlZDtcbiAgICB9XG4gICAgcmVuYW1lVHlwZUludGVybmFsKG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICAgICAgdGhpcy5fdHlwZXMuc2V0KG5ld05hbWUsIHRoaXMuX3R5cGVzLmdldChvbGROYW1lKSk7XG4gICAgICAgIHRoaXMuX3R5cGVzLmRlbGV0ZShvbGROYW1lKTtcbiAgICB9XG4gICAgcmVtb3ZlVHlwZUludGVybmFsKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHlwZXMuZGVsZXRlKHR5cGUubmFtZSk7XG4gICAgfVxuICAgIHJlbW92ZURpcmVjdGl2ZUludGVybmFsKGRlZmluaXRpb24pIHtcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlcy5kZWxldGUoZGVmaW5pdGlvbi5uYW1lKTtcbiAgICB9XG4gICAgbWFya0FzQ29yZVNjaGVtYShjb3JlSXRzZWxmKSB7XG4gICAgICAgIHRoaXMuX2NvcmVGZWF0dXJlcyA9IG5ldyBDb3JlRmVhdHVyZXMoY29yZUl0c2VsZik7XG4gICAgfVxuICAgIHVubWFya0FzQ29yZVNjaGVtYSgpIHtcbiAgICAgICAgdGhpcy5fY29yZUZlYXR1cmVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvbk1vZGlmaWNhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZCkge1xuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZERvY3VtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5hcGlTY2hlbWEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNDb3JlU2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3JlRmVhdHVyZXMgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IGNvcmVGZWF0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcmVGZWF0dXJlcztcbiAgICB9XG4gICAgdG9BU1QoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLmNhY2hlZERvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBhc3QgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKSgoMCwgcHJpbnRfMS5wcmludFNjaGVtYSkodGhpcyksIHsgbm9Mb2NhdGlvbjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZENhY2hlID0gKF9hID0gdGhpcy5jb25maWcuY2FjaGVBU1QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRDYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhY2hlZERvY3VtZW50ID0gYXN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZERvY3VtZW50O1xuICAgIH1cbiAgICB0b0FQSVNjaGVtYSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFwaVNjaGVtYSkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgYXBpU2NoZW1hID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b1JlbW92ZUlmQ3VzdG9tIG9mIFsnZGVmZXInLCAnc3RyZWFtJ10pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSBhcGlTY2hlbWEuZGlyZWN0aXZlKHRvUmVtb3ZlSWZDdXN0b20pO1xuICAgICAgICAgICAgICAgIGlmIChkaXJlY3RpdmUgJiYgIWRpcmVjdGl2ZS5pc0J1aWx0SW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlbW92ZVJlY3Vyc2l2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBpbmFjY2Vzc2libGVTcGVjXzEucmVtb3ZlSW5hY2Nlc3NpYmxlRWxlbWVudHMpKGFwaVNjaGVtYSk7XG4gICAgICAgICAgICAoMCwgY29yZVNwZWNfMS5yZW1vdmVBbGxDb3JlRmVhdHVyZXMpKGFwaVNjaGVtYSk7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCFhcGlTY2hlbWEuaXNDb3JlU2NoZW1hKCksIFwiVGhlIEFQSSBzY2hlbWEgc2hvdWxkbid0IGJlIGEgY29yZSBzY2hlbWFcIik7XG4gICAgICAgICAgICBhcGlTY2hlbWEudmFsaWRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuYXBpU2NoZW1hID0gYXBpU2NoZW1hO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVNjaGVtYTtcbiAgICB9XG4gICAgZW1wdHlBU1REZWZpbml0aW9uc0ZvckV4dGVuc2lvbnNXaXRob3V0RGVmaW5pdGlvbigpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hRGVmaW5pdGlvbi5oYXNFeHRlbnNpb25FbGVtZW50cygpICYmICF0aGlzLnNjaGVtYURlZmluaXRpb24uaGFzTm9uRXh0ZW5zaW9uRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHsga2luZDogZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0RFRklOSVRJT04sIG9wZXJhdGlvblR5cGVzOiBbXSB9O1xuICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy50eXBlcygpKSB7XG4gICAgICAgICAgICBpZiAodHlwZS5oYXNFeHRlbnNpb25FbGVtZW50cygpICYmICF0eXBlLmhhc05vbkV4dGVuc2lvbkVsZW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0ge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiB0eXBlLmFzdERlZmluaXRpb25LaW5kLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiB0eXBlLm5hbWUgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICB0b0dyYXBoUUxKU1NjaGVtYShjb25maWcpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgaW5jbHVkZURlZmVyID0gKF9hID0gY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmluY2x1ZGVEZWZlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVTdHJlYW0gPSAoX2IgPSBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuaW5jbHVkZVN0cmVhbSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIGxldCBhc3QgPSB0aGlzLnRvQVNUKCk7XG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWxOb2RlcyA9IHRoaXMuZW1wdHlBU1REZWZpbml0aW9uc0ZvckV4dGVuc2lvbnNXaXRob3V0RGVmaW5pdGlvbigpO1xuICAgICAgICBpZiAoaW5jbHVkZURlZmVyKSB7XG4gICAgICAgICAgICBhZGRpdGlvbmFsTm9kZXMucHVzaCh0aGlzLmRlZmVyRGlyZWN0aXZlKCkudG9BU1QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVTdHJlYW0pIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxOb2Rlcy5wdXNoKHRoaXMuc3RyZWFtRGlyZWN0aXZlKCkudG9BU1QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkZGl0aW9uYWxOb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhc3QgPSB7XG4gICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuRE9DVU1FTlQsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IGFzdC5kZWZpbml0aW9ucy5jb25jYXQoYWRkaXRpb25hbE5vZGVzKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3JhcGhRTFNjaGVtYSA9ICgwLCBncmFwaHFsXzEuYnVpbGRBU1RTY2hlbWEpKGFzdCk7XG4gICAgICAgIGlmIChhZGRpdGlvbmFsTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGFkZGl0aW9uYWxOb2Rlcykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaFFMU2NoZW1hLmFzdE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBncmFwaFFMU2NoZW1hLmdldFR5cGUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5hc3ROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JhcGhRTFNjaGVtYTtcbiAgICB9XG4gICAgZ2V0IHNjaGVtYURlZmluaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY2hlbWFEZWZpbml0aW9uO1xuICAgIH1cbiAgICB0eXBlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGVzLnZhbHVlcygpO1xuICAgIH1cbiAgICBpbnRlcmZhY2VUeXBlcygpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlclR5cGVzT2ZLaW5kKHRoaXMudHlwZXMoKSwgJ0ludGVyZmFjZVR5cGUnKTtcbiAgICB9XG4gICAgb2JqZWN0VHlwZXMoKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJUeXBlc09mS2luZCh0aGlzLnR5cGVzKCksICdPYmplY3RUeXBlJyk7XG4gICAgfVxuICAgIHVuaW9uVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJUeXBlc09mS2luZCh0aGlzLnR5cGVzKCksICdVbmlvblR5cGUnKTtcbiAgICB9XG4gICAgc2NhbGFyVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJUeXBlc09mS2luZCh0aGlzLnR5cGVzKCksICdTY2FsYXJUeXBlJyk7XG4gICAgfVxuICAgIGlucHV0VHlwZXMoKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJUeXBlc09mS2luZCh0aGlzLnR5cGVzKCksICdJbnB1dE9iamVjdFR5cGUnKTtcbiAgICB9XG4gICAgZW51bVR5cGVzKCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyVHlwZXNPZktpbmQodGhpcy50eXBlcygpLCAnRW51bVR5cGUnKTtcbiAgICB9XG4gICAgYnVpbHRJblR5cGVzKGluY2x1ZGVTaGFkb3dlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGFsbEJ1aWx0SW5zID0gdGhpcy5fYnVpbHRJblR5cGVzLnZhbHVlcygpO1xuICAgICAgICByZXR1cm4gaW5jbHVkZVNoYWRvd2VkXG4gICAgICAgICAgICA/IGFsbEJ1aWx0SW5zXG4gICAgICAgICAgICA6IGFsbEJ1aWx0SW5zLmZpbHRlcih0ID0+ICF0aGlzLmlzU2hhZG93ZWRCdWlsdEluVHlwZSh0KSk7XG4gICAgfVxuICAgIGlzU2hhZG93ZWRCdWlsdEluVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0eXBlLmlzQnVpbHRJbiAmJiB0aGlzLl90eXBlcy5oYXModHlwZS5uYW1lKTtcbiAgICB9XG4gICAgYWxsVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWx0SW5UeXBlcygpLmNvbmNhdCh0aGlzLnR5cGVzKCkpO1xuICAgIH1cbiAgICB0eXBlKG5hbWUpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuX3R5cGVzLmdldChuYW1lKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPyB0eXBlIDogdGhpcy5fYnVpbHRJblR5cGVzLmdldChuYW1lKTtcbiAgICB9XG4gICAgdHlwZU9mS2luZChuYW1lLCBraW5kKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnR5cGUobmFtZSk7XG4gICAgICAgIHJldHVybiB0eXBlICYmIHR5cGUua2luZCA9PT0ga2luZCA/IHR5cGUgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGludFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWlsdEluVHlwZXMuZ2V0KCdJbnQnKTtcbiAgICB9XG4gICAgZmxvYXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVpbHRJblR5cGVzLmdldCgnRmxvYXQnKTtcbiAgICB9XG4gICAgc3RyaW5nVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWx0SW5UeXBlcy5nZXQoJ1N0cmluZycpO1xuICAgIH1cbiAgICBib29sZWFuVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWx0SW5UeXBlcy5nZXQoJ0Jvb2xlYW4nKTtcbiAgICB9XG4gICAgaWRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVpbHRJblR5cGVzLmdldCgnSUQnKTtcbiAgICB9XG4gICAgYWRkVHlwZSh0eXBlKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy50eXBlKHR5cGUubmFtZSk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShleGlzdGluZy5pc0J1aWx0SW4sICgpID0+IGBUeXBlICR7dHlwZX0gYWxyZWFkeSBleGlzdHMgaW4gdGhpcyBzY2hlbWFgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZS5pc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkodHlwZS5wYXJlbnQgPT0gdGhpcywgKCkgPT4gYENhbm5vdCBhZGQgdHlwZSAke3R5cGV9IHRvIHRoaXMgc2NoZW1hOyBpdCBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIGFub3RoZXIgc2NoZW1hYCk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZS5pc0J1aWx0SW4pIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIXRoaXMuaXNDb25zdHJ1Y3RlZCwgYENhbm5vdCBhZGQgYnVpbHQtaW4gJHt0eXBlfSB0byB0aGlzIHNjaGVtYSAoYnVpbHQtaW5zIGNhbiBvbmx5IGJlIGFkZGVkIGF0IHNjaGVtYSBjb25zdHJ1Y3Rpb24gdGltZSlgKTtcbiAgICAgICAgICAgIHRoaXMuX2J1aWx0SW5UeXBlcy5zZXQodHlwZS5uYW1lLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3R5cGVzLnNldCh0eXBlLm5hbWUsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlWydzZXRQYXJlbnQnXS5jYWxsKHR5cGUsIHRoaXMpO1xuICAgICAgICBjb25zdCBkZWZhdWx0U2NoZW1hUm9vdCA9IGNoZWNrRGVmYXVsdFNjaGVtYVJvb3QodHlwZSk7XG4gICAgICAgIGlmIChkZWZhdWx0U2NoZW1hUm9vdCAmJiAhdGhpcy5zY2hlbWFEZWZpbml0aW9uLnJvb3QoZGVmYXVsdFNjaGVtYVJvb3QpKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYURlZmluaXRpb24uc2V0Um9vdChkZWZhdWx0U2NoZW1hUm9vdCwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gICAgZGlyZWN0aXZlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpcmVjdGl2ZXMudmFsdWVzKCk7XG4gICAgfVxuICAgIGJ1aWx0SW5EaXJlY3RpdmVzKGluY2x1ZGVTaGFkb3dlZCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBpbmNsdWRlU2hhZG93ZWRcbiAgICAgICAgICAgID8gdGhpcy5fYnVpbHRJbkRpcmVjdGl2ZXMudmFsdWVzKClcbiAgICAgICAgICAgIDogdGhpcy5fYnVpbHRJbkRpcmVjdGl2ZXMudmFsdWVzKCkuZmlsdGVyKGQgPT4gIXRoaXMuaXNTaGFkb3dlZEJ1aWx0SW5EaXJlY3RpdmUoZCkpO1xuICAgIH1cbiAgICBhbGxEaXJlY3RpdmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsdEluRGlyZWN0aXZlcygpLmNvbmNhdCh0aGlzLmRpcmVjdGl2ZXMoKSk7XG4gICAgfVxuICAgIGlzU2hhZG93ZWRCdWlsdEluRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlLmlzQnVpbHRJbiAmJiB0aGlzLl9kaXJlY3RpdmVzLmhhcyhkaXJlY3RpdmUubmFtZSk7XG4gICAgfVxuICAgIGRpcmVjdGl2ZShuYW1lKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX2RpcmVjdGl2ZXMuZ2V0KG5hbWUpO1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlID8gZGlyZWN0aXZlIDogdGhpcy5idWlsdEluRGlyZWN0aXZlKG5hbWUpO1xuICAgIH1cbiAgICBidWlsdEluRGlyZWN0aXZlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWx0SW5EaXJlY3RpdmVzLmdldChuYW1lKTtcbiAgICB9XG4gICAgKmFsbE5hbWVkU2NoZW1hRWxlbWVudCgpIHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHRoaXMudHlwZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgdHlwZTtcbiAgICAgICAgICAgIHlpZWxkKiB0eXBlLmFsbENoaWxkRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiB0aGlzLmRpcmVjdGl2ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgZGlyZWN0aXZlO1xuICAgICAgICAgICAgeWllbGQqIGRpcmVjdGl2ZS5hcmd1bWVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqYWxsU2NoZW1hRWxlbWVudCgpIHtcbiAgICAgICAgeWllbGQgdGhpcy5fc2NoZW1hRGVmaW5pdGlvbjtcbiAgICAgICAgeWllbGQqIHRoaXMuYWxsTmFtZWRTY2hlbWFFbGVtZW50KCk7XG4gICAgfVxuICAgIGFkZERpcmVjdGl2ZURlZmluaXRpb24oZGlyZWN0aXZlT3JOYW1lKSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB0eXBlb2YgZGlyZWN0aXZlT3JOYW1lID09PSAnc3RyaW5nJyA/IG5ldyBEaXJlY3RpdmVEZWZpbml0aW9uKGRpcmVjdGl2ZU9yTmFtZSkgOiBkaXJlY3RpdmVPck5hbWU7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5kaXJlY3RpdmUoZGVmaW5pdGlvbi5uYW1lKTtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghZXhpc3RpbmcgfHwgZXhpc3RpbmcuaXNCdWlsdEluLCAoKSA9PiBgRGlyZWN0aXZlICR7ZGVmaW5pdGlvbn0gYWxyZWFkeSBleGlzdHMgaW4gdGhpcyBzY2hlbWFgKTtcbiAgICAgICAgaWYgKGRlZmluaXRpb24uaXNBdHRhY2hlZCgpKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGRlZmluaXRpb24ucGFyZW50ID09IHRoaXMsICgpID0+IGBDYW5ub3QgYWRkIGRpcmVjdGl2ZSAke2RlZmluaXRpb259IHRvIHRoaXMgc2NoZW1hOyBpdCBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIGFub3RoZXIgc2NoZW1hYCk7XG4gICAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5pdGlvbi5pc0J1aWx0SW4pIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIXRoaXMuaXNDb25zdHJ1Y3RlZCwgKCkgPT4gYENhbm5vdCBhZGQgYnVpbHQtaW4gJHtkZWZpbml0aW9ufSB0byB0aGlzIHNjaGVtYSAoYnVpbHQtaW5zIGNhbiBvbmx5IGJlIGFkZGVkIGF0IHNjaGVtYSBjb25zdHJ1Y3Rpb24gdGltZSlgKTtcbiAgICAgICAgICAgIHRoaXMuX2J1aWx0SW5EaXJlY3RpdmVzLnNldChkZWZpbml0aW9uLm5hbWUsIGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aXZlcy5zZXQoZGVmaW5pdGlvbi5uYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZVsnc2V0UGFyZW50J10uY2FsbChkZWZpbml0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICB9XG4gICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmx1ZXByaW50Lm9uSW52YWxpZGF0aW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNWYWxpZGF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ydW5XaXRoQnVpbHRJbk1vZGlmaWNhdGlvbkFsbG93ZWQoKCkgPT4ge1xuICAgICAgICAgICAgKDAsIGludHJvc3BlY3Rpb25fMS5hZGRJbnRyb3NwZWN0aW9uRmllbGRzKSh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBlcnJvcnMgPSAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZVNETCkodGhpcy50b0FTVCgpLCB1bmRlZmluZWQsIHRoaXMuYmx1ZXByaW50LnZhbGlkYXRpb25SdWxlcygpKS5tYXAoKGUpID0+IHRoaXMuYmx1ZXByaW50Lm9uR3JhcGhRTEpTVmFsaWRhdGlvbkVycm9yKHRoaXMsIGUpKTtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCgoMCwgdmFsaWRhdGVfMi52YWxpZGF0ZVNjaGVtYSkodGhpcykpO1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5ydW5XaXRoQnVpbHRJbk1vZGlmaWNhdGlvbkFsbG93ZWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IHRoaXMuYmx1ZXByaW50Lm9uVmFsaWRhdGlvbih0aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgKDAsIGV4cG9ydHMuRXJyR3JhcGhRTFZhbGlkYXRpb25GYWlsZWQpKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1ZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIGNsb25lKGJ1aWx0SW5zKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTY2hlbWEoYnVpbHRJbnMgIT09IG51bGwgJiYgYnVpbHRJbnMgIT09IHZvaWQgMCA/IGJ1aWx0SW5zIDogdGhpcy5ibHVlcHJpbnQpO1xuICAgICAgICBjb3B5KHRoaXMsIGNsb25lZCk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRhdGVkKSB7XG4gICAgICAgICAgICBjbG9uZWQudmFsaWRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgICBnZXRCdWlsdEluRGlyZWN0aXZlKG5hbWUpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5kaXJlY3RpdmUobmFtZSk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGlyZWN0aXZlLCBgVGhlIHByb3ZpZGVkIHNjaGVtYSBoYXMgbm90IGJlIGJ1aWx0IHdpdGggdGhlICR7bmFtZX0gZGlyZWN0aXZlIGJ1aWx0LWluYCk7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuICAgIGluY2x1ZGVEaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1aWx0SW5EaXJlY3RpdmUoJ2luY2x1ZGUnKTtcbiAgICB9XG4gICAgc2tpcERpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVpbHRJbkRpcmVjdGl2ZSgnc2tpcCcpO1xuICAgIH1cbiAgICBkZXByZWNhdGVkRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWlsdEluRGlyZWN0aXZlKCdkZXByZWNhdGVkJyk7XG4gICAgfVxuICAgIHNwZWNpZmllZEJ5RGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWlsdEluRGlyZWN0aXZlKCdzcGVjaWZpZWRCeScpO1xuICAgIH1cbiAgICBkZWZlckRpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVpbHRJbkRpcmVjdGl2ZSgnZGVmZXInKTtcbiAgICB9XG4gICAgc3RyZWFtRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWlsdEluRGlyZWN0aXZlKCdzdHJlYW0nKTtcbiAgICB9XG4gICAgZWxlbWVudEJ5Q29vcmRpbmF0ZShjb29yZGluYXRlKSB7XG4gICAgICAgIGlmICghY29vcmRpbmF0ZS5tYXRjaChjb29yZGluYXRlUmVnZXhwKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCBhcmd1bWVudCBcIiR7Y29vcmRpbmF0ZX06IGl0IGlzIG5vdCBhIHN5bnRhY3RpY2FsbHkgdmFsaWQgZ3JhcGhRTCBjb29yZGluYXRlLlwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJnU3RhcnRJZHggPSBjb29yZGluYXRlLmluZGV4T2YoJygnKTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBhcmdTdGFydElkeCA8IDAgPyBjb29yZGluYXRlIDogY29vcmRpbmF0ZS5zbGljZSgwLCBhcmdTdGFydElkeCk7XG4gICAgICAgIGNvbnN0IGFyZ05hbWUgPSBhcmdTdGFydElkeCA8IDAgPyB1bmRlZmluZWQgOiBjb29yZGluYXRlLnNsaWNlKGFyZ1N0YXJ0SWR4ICsgMSwgY29vcmRpbmF0ZS5sZW5ndGggLSAyKTtcbiAgICAgICAgY29uc3Qgc3BsaXR0ZWRTdGFydCA9IHN0YXJ0LnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHR5cGVPckRpcmVjdGl2ZU5hbWUgPSBzcGxpdHRlZFN0YXJ0WzBdO1xuICAgICAgICBjb25zdCBmaWVsZE9yRW51bU5hbWUgPSBzcGxpdHRlZFN0YXJ0WzFdO1xuICAgICAgICBjb25zdCBpc0RpcmVjdGl2ZSA9IHR5cGVPckRpcmVjdGl2ZU5hbWUuc3RhcnRzV2l0aCgnQCcpO1xuICAgICAgICBpZiAoaXNEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZE9yRW51bU5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIGFyZ3VtZW50IFwiJHtjb29yZGluYXRlfTogaXQgaXMgbm90IGEgc3ludGFjdGljYWxseSB2YWxpZCBncmFwaFFMIGNvb3JkaW5hdGUuXCJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuZGlyZWN0aXZlKHR5cGVPckRpcmVjdGl2ZU5hbWUuc2xpY2UoMSkpO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ05hbWUgPyBkaXJlY3RpdmUgPT09IG51bGwgfHwgZGlyZWN0aXZlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXJlY3RpdmUuYXJndW1lbnQoYXJnTmFtZSkgOiBkaXJlY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlKHR5cGVPckRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgICAgaWYgKCF0eXBlIHx8ICFmaWVsZE9yRW51bU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnT2JqZWN0VHlwZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gdHlwZS5maWVsZChmaWVsZE9yRW51bU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnTmFtZSA/IGZpZWxkID09PSBudWxsIHx8IGZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZC5hcmd1bWVudChhcmdOYW1lKSA6IGZpZWxkO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0lucHV0T2JqZWN0VHlwZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIGFyZ3VtZW50IFwiJHtjb29yZGluYXRlfTogaXQgaXMgbm90IGEgc3ludGFjdGljYWxseSB2YWxpZCBncmFwaFFMIGNvb3JkaW5hdGUuXCJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZS5maWVsZChmaWVsZE9yRW51bU5hbWUpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VudW1UeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEludmFsaWQgYXJndW1lbnQgXCIke2Nvb3JkaW5hdGV9OiBpdCBpcyBub3QgYSBzeW50YWN0aWNhbGx5IHZhbGlkIGdyYXBoUUwgY29vcmRpbmF0ZS5cImApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlLnZhbHVlKGZpZWxkT3JFbnVtTmFtZSk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCBhcmd1bWVudCBcIiR7Y29vcmRpbmF0ZX06IGl0IGlzIG5vdCBhIHN5bnRhY3RpY2FsbHkgdmFsaWQgZ3JhcGhRTCBjb29yZGluYXRlLlwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNjaGVtYSA9IFNjaGVtYTtcbmNsYXNzIFJvb3RUeXBlIGV4dGVuZHMgQmFzZUV4dGVuc2lvbk1lbWJlciB7XG4gICAgY29uc3RydWN0b3Iocm9vdEtpbmQsIHR5cGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yb290S2luZCA9IHJvb3RLaW5kO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBpc0RlZmF1bHRSb290TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSb290TmFtZSh0aGlzLnJvb3RLaW5kKSA9PSB0aGlzLnR5cGUubmFtZTtcbiAgICB9XG4gICAgcmVtb3ZlSW5uZXIoKSB7XG4gICAgICAgIFNjaGVtYURlZmluaXRpb24ucHJvdG90eXBlWydyZW1vdmVSb290VHlwZSddLmNhbGwodGhpcy5fcGFyZW50LCB0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLlJvb3RUeXBlID0gUm9vdFR5cGU7XG5jbGFzcyBTY2hlbWFEZWZpbml0aW9uIGV4dGVuZHMgU2NoZW1hRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMua2luZCA9ICdTY2hlbWFEZWZpbml0aW9uJztcbiAgICAgICAgdGhpcy5fcm9vdHMgPSBuZXcgdXRpbHNfMS5NYXBXaXRoQ2FjaGVkQXJyYXlzKCk7XG4gICAgICAgIHRoaXMucHJlc2VydmVFbXB0eURlZmluaXRpb24gPSBmYWxzZTtcbiAgICB9XG4gICAgcm9vdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb290cy52YWx1ZXMoKTtcbiAgICB9XG4gICAgYXBwbHlEaXJlY3RpdmUobmFtZU9yRGVmLCBhcmdzLCBhc0ZpcnN0RGlyZWN0aXZlID0gZmFsc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgYXBwbGllZCA9IHN1cGVyLmFwcGx5RGlyZWN0aXZlKG5hbWVPckRlZiwgYXJncywgYXNGaXJzdERpcmVjdGl2ZSk7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuc2NoZW1hKCk7XG4gICAgICAgIGNvbnN0IGNvcmVGZWF0dXJlcyA9IHNjaGVtYS5jb3JlRmVhdHVyZXM7XG4gICAgICAgIGlmICgoMCwgY29yZVNwZWNfMS5pc0NvcmVTcGVjRGlyZWN0aXZlQXBwbGljYXRpb24pKGFwcGxpZWQpKSB7XG4gICAgICAgICAgICBpZiAoY29yZUZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRS5lcnIoYEludmFsaWQgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIEBjb3JlL0BsaW5rYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzY2hlbWFEaXJlY3RpdmUgPSBhcHBsaWVkO1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IHNjaGVtYURpcmVjdGl2ZS5hcmd1bWVudHMoKTtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNvcmVTcGVjXzEuRmVhdHVyZVVybC5wYXJzZSgoKF9hID0gYXJncy51cmwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGFyZ3MuZmVhdHVyZSkpO1xuICAgICAgICAgICAgY29uc3QgaW1wb3J0cyA9ICgwLCBjb3JlU3BlY18xLmV4dHJhY3RDb3JlRmVhdHVyZUltcG9ydHMpKHVybCwgc2NoZW1hRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvcmUgPSBuZXcgQ29yZUZlYXR1cmUodXJsLCAoX2IgPSBhcmdzLmFzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB1cmwubmFtZSwgc2NoZW1hRGlyZWN0aXZlLCBpbXBvcnRzLCBhcmdzLmZvcik7XG4gICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlWydtYXJrQXNDb3JlU2NoZW1hJ10uY2FsbChzY2hlbWEsIGNvcmUpO1xuICAgICAgICAgICAgdGhpcy5hcHBsaWVkRGlyZWN0aXZlc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGEpID0+IGEgIT09IGFwcGxpZWQpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKG90aGVyKSA9PiBDb3JlRmVhdHVyZXMucHJvdG90eXBlWydtYXliZUFkZEZlYXR1cmUnXS5jYWxsKHNjaGVtYS5jb3JlRmVhdHVyZXMsIG90aGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29yZUZlYXR1cmVzKSB7XG4gICAgICAgICAgICBDb3JlRmVhdHVyZXMucHJvdG90eXBlWydtYXliZUFkZEZlYXR1cmUnXS5jYWxsKGNvcmVGZWF0dXJlcywgYXBwbGllZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gYXBwbGllZDtcbiAgICB9XG4gICAgcm9vdChyb290S2luZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdHMuZ2V0KHJvb3RLaW5kKTtcbiAgICB9XG4gICAgcm9vdFR5cGUocm9vdEtpbmQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5yb290KHJvb3RLaW5kKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGU7XG4gICAgfVxuICAgIHNldFJvb3Qocm9vdEtpbmQsIG5hbWVPclR5cGUpIHtcbiAgICAgICAgbGV0IHRvU2V0O1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPclR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLnNjaGVtYSgpLnR5cGUobmFtZU9yVHlwZSk7XG4gICAgICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYENhbm5vdCBzZXQgc2NoZW1hICR7cm9vdEtpbmR9IHJvb3QgdG8gdW5rbm93biB0eXBlICR7bmFtZU9yVHlwZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9iai5raW5kICE9ICdPYmplY3RUeXBlJykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYCR7ZGVmYXVsdFJvb3ROYW1lKHJvb3RLaW5kKX0gcm9vdCB0eXBlIG11c3QgYmUgYW4gT2JqZWN0IHR5cGUke3Jvb3RLaW5kID09PSAncXVlcnknID8gJycgOiAnIGlmIHByb3ZpZGVkJ30sIGl0IGNhbm5vdCBiZSBzZXQgdG8gJHtuYW1lT3JUeXBlfSAoYW4gJHtvYmoua2luZH0pLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9TZXQgPSBuZXcgUm9vdFR5cGUocm9vdEtpbmQsIG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKG5hbWVPclR5cGUpO1xuICAgICAgICAgICAgdG9TZXQgPSBuZXcgUm9vdFR5cGUocm9vdEtpbmQsIG5hbWVPclR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZSb290ID0gdGhpcy5fcm9vdHMuZ2V0KHJvb3RLaW5kKTtcbiAgICAgICAgaWYgKHByZXZSb290KSB7XG4gICAgICAgICAgICByZW1vdmVSZWZlcmVuY2VUb1R5cGUodGhpcywgcHJldlJvb3QudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm9vdHMuc2V0KHJvb3RLaW5kLCB0b1NldCk7XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlWydzZXRQYXJlbnQnXS5jYWxsKHRvU2V0LCB0aGlzKTtcbiAgICAgICAgYWRkUmVmZXJlbmNlVG9UeXBlKHRoaXMsIHRvU2V0LnR5cGUpO1xuICAgICAgICB0aGlzLm9uTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgIHJldHVybiB0b1NldDtcbiAgICB9XG4gICAgZXh0ZW5zaW9ucygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZXh0ZW5zaW9ucykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgfVxuICAgIGhhc0V4dGVuc2lvbihleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuX2V4dGVuc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyhleHRlbnNpb24pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9XG4gICAgbmV3RXh0ZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRFeHRlbnNpb24obmV3IEV4dGVuc2lvbigpKTtcbiAgICB9XG4gICAgYWRkRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLmhhc0V4dGVuc2lvbihleHRlbnNpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIWV4dGVuc2lvbi5leHRlbmRlZEVsZW1lbnQsICdDYW5ub3QgYWRkIGV4dGVuc2lvbiB0byB0aGlzIHNjaGVtYTogZXh0ZW5zaW9uIGlzIGFscmVhZHkgYWRkZWQgdG8gYW5vdGhlciBzY2hlbWEnKTtcbiAgICAgICAgaWYgKHRoaXMuX2V4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVuc2lvbnMucHVzaChleHRlbnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXh0ZW5zaW9ucyA9IFtleHRlbnNpb25dO1xuICAgICAgICB9XG4gICAgICAgIEV4dGVuc2lvbi5wcm90b3R5cGVbJ3NldEV4dGVuZGVkRWxlbWVudCddLmNhbGwoZXh0ZW5zaW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uO1xuICAgIH1cbiAgICBoYXNFeHRlbnNpb25FbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZXh0ZW5zaW9ucztcbiAgICB9XG4gICAgaGFzTm9uRXh0ZW5zaW9uRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uXG4gICAgICAgICAgICB8fCB0aGlzLmFwcGxpZWREaXJlY3RpdmVzLnNvbWUoKGQpID0+IGQub2ZFeHRlbnNpb24oKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgfHwgdGhpcy5yb290cygpLnNvbWUoKHIpID0+IHIub2ZFeHRlbnNpb24oKSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmVtb3ZlUm9vdFR5cGUocm9vdFR5cGUpIHtcbiAgICAgICAgdGhpcy5fcm9vdHMuZGVsZXRlKHJvb3RUeXBlLnJvb3RLaW5kKTtcbiAgICAgICAgcmVtb3ZlUmVmZXJlbmNlVG9UeXBlKHRoaXMsIHJvb3RUeXBlLnR5cGUpO1xuICAgIH1cbiAgICByZW1vdmVUeXBlUmVmZXJlbmNlKHRvUmVtb3ZlKSB7XG4gICAgICAgIGZvciAoY29uc3Qgcm9vdFR5cGUgb2YgdGhpcy5yb290cygpKSB7XG4gICAgICAgICAgICBpZiAocm9vdFR5cGUudHlwZSA9PSB0b1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RzLmRlbGV0ZShyb290VHlwZS5yb290S2luZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgc2NoZW1hWyR7dGhpcy5fcm9vdHMua2V5cygpLmpvaW4oJywgJyl9XWA7XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFEZWZpbml0aW9uID0gU2NoZW1hRGVmaW5pdGlvbjtcbmNsYXNzIFNjYWxhclR5cGUgZXh0ZW5kcyBCYXNlTmFtZWRUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ1NjYWxhclR5cGUnO1xuICAgICAgICB0aGlzLmFzdERlZmluaXRpb25LaW5kID0gZ3JhcGhxbF8xLktpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTjtcbiAgICB9XG4gICAgcmVtb3ZlVHlwZVJlZmVyZW5jZSh0eXBlKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmFsc2UsIGBTY2FsYXIgdHlwZSAke3RoaXN9IGNhbid0IHJlZmVyZW5jZSBvdGhlciB0eXBlczsgc2hvdWxkbid0IGJlIGFza2VkIHRvIHJlbW92ZSByZWZlcmVuY2UgdG8gJHt0eXBlfWApO1xuICAgIH1cbiAgICBoYXNOb25FeHRlbnNpb25Jbm5lckVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyRWxlbWVudHNFeHRlbnNpb25zKCkge1xuICAgIH1cbiAgICByZW1vdmVJbm5lckVsZW1lbnRzKCkge1xuICAgIH1cbiAgICByZW1vdmVSZWZlcmVuY2VSZWN1cnNpdmUocmVmKSB7XG4gICAgICAgIHJlZi5yZW1vdmUoKTtcbiAgICB9XG59XG5leHBvcnRzLlNjYWxhclR5cGUgPSBTY2FsYXJUeXBlO1xuY2xhc3MgSW50ZXJmYWNlSW1wbGVtZW50YXRpb24gZXh0ZW5kcyBCYXNlRXh0ZW5zaW9uTWVtYmVyIHtcbiAgICBjb25zdHJ1Y3RvcihpdGYpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pbnRlcmZhY2UgPSBpdGY7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyKCkge1xuICAgICAgICBGaWVsZEJhc2VkVHlwZS5wcm90b3R5cGVbJ3JlbW92ZUludGVyZmFjZUltcGxlbWVudGF0aW9uJ10uY2FsbCh0aGlzLl9wYXJlbnQsIHRoaXMuaW50ZXJmYWNlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJ2ltcGxlbWVudHMgJHt0aGlzLmludGVyZmFjZX0nYDtcbiAgICB9XG59XG5leHBvcnRzLkludGVyZmFjZUltcGxlbWVudGF0aW9uID0gSW50ZXJmYWNlSW1wbGVtZW50YXRpb247XG5jbGFzcyBGaWVsZEJhc2VkVHlwZSBleHRlbmRzIEJhc2VOYW1lZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9maWVsZHMgPSBuZXcgdXRpbHNfMS5NYXBXaXRoQ2FjaGVkQXJyYXlzKCk7XG4gICAgfVxuICAgIG9uQXR0YWNoZWQoKSB7XG4gICAgICAgIFNjaGVtYS5wcm90b3R5cGVbJ3J1bldpdGhCdWlsdEluTW9kaWZpY2F0aW9uQWxsb3dlZCddLmNhbGwodGhpcy5zY2hlbWEoKSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRGaWVsZChuZXcgRmllbGREZWZpbml0aW9uKGV4cG9ydHMudHlwZW5hbWVGaWVsZE5hbWUsIHRydWUpLCBuZXcgTm9uTnVsbFR5cGUodGhpcy5zY2hlbWEoKS5zdHJpbmdUeXBlKCkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZUZpZWxkSW50ZXJuYWwoZmllbGQpIHtcbiAgICAgICAgdGhpcy5fZmllbGRzLmRlbGV0ZShmaWVsZC5uYW1lKTtcbiAgICAgICAgdGhpcy5fY2FjaGVkTm9uQnVpbHRJbkZpZWxkcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW50ZXJmYWNlSW1wbGVtZW50YXRpb25zKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5faW50ZXJmYWNlSW1wbGVtZW50YXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVzKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgIH1cbiAgICBpbnRlcmZhY2VJbXBsZW1lbnRhdGlvbih0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMgPyB0aGlzLl9pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMuZ2V0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiB0eXBlLm5hbWUpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpbnRlcmZhY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMoKS5tYXAoaW1wbCA9PiBpbXBsLmludGVyZmFjZSk7XG4gICAgfVxuICAgIGltcGxlbWVudHNJbnRlcmZhY2UodHlwZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5faW50ZXJmYWNlSW1wbGVtZW50YXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiB0eXBlLm5hbWUpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICB9XG4gICAgYWRkSW1wbGVtZW50ZWRJbnRlcmZhY2UobmFtZU9ySXRmT3JJdGZJbXBsKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IHRvQWRkO1xuICAgICAgICBpZiAobmFtZU9ySXRmT3JJdGZJbXBsIGluc3RhbmNlb2YgSW50ZXJmYWNlSW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUobmFtZU9ySXRmT3JJdGZJbXBsKTtcbiAgICAgICAgICAgIHRvQWRkID0gbmFtZU9ySXRmT3JJdGZJbXBsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGl0ZjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZU9ySXRmT3JJdGZJbXBsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXliZUl0ZiA9IHRoaXMuc2NoZW1hKCkudHlwZShuYW1lT3JJdGZPckl0ZkltcGwpO1xuICAgICAgICAgICAgICAgIGlmICghbWF5YmVJdGYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgQ2Fubm90IGltcGxlbWVudCB1bmtub3duIHR5cGUgJHtuYW1lT3JJdGZPckl0ZkltcGx9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1heWJlSXRmLmtpbmQgIT0gJ0ludGVyZmFjZVR5cGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYENhbm5vdCBpbXBsZW1lbnQgbm9uLWludGVyZmFjZSB0eXBlICR7bmFtZU9ySXRmT3JJdGZJbXBsfSAob2YgdHlwZSAke21heWJlSXRmLmtpbmR9KWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpdGYgPSBtYXliZUl0ZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZiA9IG5hbWVPckl0Zk9ySXRmSW1wbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvQWRkID0gbmV3IEludGVyZmFjZUltcGxlbWVudGF0aW9uKGl0Zik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSAoX2EgPSB0aGlzLl9pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQodG9BZGQuaW50ZXJmYWNlLm5hbWUpO1xuICAgICAgICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ludGVyZmFjZUltcGxlbWVudGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVyZmFjZUltcGxlbWVudGF0aW9ucyA9IG5ldyB1dGlsc18xLk1hcFdpdGhDYWNoZWRBcnJheXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ludGVyZmFjZUltcGxlbWVudGF0aW9ucy5zZXQodG9BZGQuaW50ZXJmYWNlLm5hbWUsIHRvQWRkKTtcbiAgICAgICAgICAgIGFkZFJlZmVyZW5jZVRvVHlwZSh0aGlzLCB0b0FkZC5pbnRlcmZhY2UpO1xuICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGVbJ3NldFBhcmVudCddLmNhbGwodG9BZGQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRvQWRkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpZWxkcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWROb25CdWlsdEluRmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWROb25CdWlsdEluRmllbGRzID0gdGhpcy5fZmllbGRzLnZhbHVlcygpLmZpbHRlcihmID0+ICFmLmlzQnVpbHRJbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE5vbkJ1aWx0SW5GaWVsZHM7XG4gICAgfVxuICAgIGhhc0ZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzKCkubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgYnVpbHRJbkZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsRmllbGRzKCkuZmlsdGVyKGYgPT4gZi5pc0J1aWx0SW4pO1xuICAgIH1cbiAgICBhbGxGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZHMudmFsdWVzKCk7XG4gICAgfVxuICAgIGZpZWxkKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkcy5nZXQobmFtZSk7XG4gICAgfVxuICAgIHR5cGVuYW1lRmllbGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkKGV4cG9ydHMudHlwZW5hbWVGaWVsZE5hbWUpO1xuICAgIH1cbiAgICBhZGRGaWVsZChuYW1lT3JGaWVsZCwgdHlwZSkge1xuICAgICAgICBsZXQgdG9BZGQ7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZU9yRmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICAgICB0b0FkZCA9IG5ldyBGaWVsZERlZmluaXRpb24obmFtZU9yRmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZShuYW1lT3JGaWVsZCk7XG4gICAgICAgICAgICB0b0FkZCA9IG5hbWVPckZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZpZWxkKHRvQWRkLm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBGaWVsZCAke3RvQWRkLm5hbWV9IGFscmVhZHkgZXhpc3RzIG9uICR7dGhpc31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSAmJiAhaXNPdXRwdXRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIGlucHV0IHR5cGUgJHt0eXBlfSBmb3IgZmllbGQgJHt0b0FkZC5uYW1lfTogb2JqZWN0IGFuZCBpbnRlcmZhY2UgZmllbGQgdHlwZXMgc2hvdWxkIGJlIG91dHB1dCB0eXBlcy5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maWVsZHMuc2V0KHRvQWRkLm5hbWUsIHRvQWRkKTtcbiAgICAgICAgdGhpcy5fY2FjaGVkTm9uQnVpbHRJbkZpZWxkcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgRWxlbWVudC5wcm90b3R5cGVbJ3NldFBhcmVudCddLmNhbGwodG9BZGQsIHRoaXMpO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgdG9BZGQudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgfVxuICAgICphbGxDaGlsZEVsZW1lbnRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHRoaXMuX2ZpZWxkcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgZmllbGQ7XG4gICAgICAgICAgICB5aWVsZCogZmllbGQuYXJndW1lbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlSW50ZXJmYWNlSW1wbGVtZW50YXRpb24oaXRmKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5faW50ZXJmYWNlSW1wbGVtZW50YXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVsZXRlKGl0Zi5uYW1lKTtcbiAgICAgICAgcmVtb3ZlUmVmZXJlbmNlVG9UeXBlKHRoaXMsIGl0Zik7XG4gICAgfVxuICAgIHJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX2ludGVyZmFjZUltcGxlbWVudGF0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGV0ZSh0eXBlLm5hbWUpO1xuICAgIH1cbiAgICByZW1vdmVJbm5lckVsZW1lbnRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGludGVyZmFjZUltcGwgb2YgdGhpcy5pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMoKSkge1xuICAgICAgICAgICAgaW50ZXJmYWNlSW1wbC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHRoaXMuYWxsRmllbGRzKCkpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZC5pc0J1aWx0SW4pIHtcbiAgICAgICAgICAgICAgICBGaWVsZERlZmluaXRpb24ucHJvdG90eXBlWydyZW1vdmVQYXJlbnQnXS5jYWxsKGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGhhc05vbkV4dGVuc2lvbklubmVyRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVyZmFjZUltcGxlbWVudGF0aW9ucygpLnNvbWUoaXRmID0+IGl0Zi5vZkV4dGVuc2lvbigpID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB8fCB0aGlzLmZpZWxkcygpLnNvbWUoZiA9PiBmLm9mRXh0ZW5zaW9uKCkgPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyRWxlbWVudHNFeHRlbnNpb25zKCkge1xuICAgICAgICB0aGlzLmludGVyZmFjZUltcGxlbWVudGF0aW9ucygpLmZvckVhY2goaXRmID0+IGl0Zi5yZW1vdmVPZkV4dGVuc2lvbigpKTtcbiAgICAgICAgdGhpcy5maWVsZHMoKS5mb3JFYWNoKGYgPT4gZi5yZW1vdmVPZkV4dGVuc2lvbigpKTtcbiAgICB9XG59XG5jbGFzcyBPYmplY3RUeXBlIGV4dGVuZHMgRmllbGRCYXNlZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmtpbmQgPSAnT2JqZWN0VHlwZSc7XG4gICAgICAgIHRoaXMuYXN0RGVmaW5pdGlvbktpbmQgPSBncmFwaHFsXzEuS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OO1xuICAgIH1cbiAgICBpc1Jvb3RUeXBlKCkge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLnNjaGVtYSgpO1xuICAgICAgICByZXR1cm4gc2NoZW1hLnNjaGVtYURlZmluaXRpb24ucm9vdHMoKS5zb21lKHJ0ID0+IHJ0LnR5cGUgPT0gdGhpcyk7XG4gICAgfVxuICAgIGlzUXVlcnlSb290VHlwZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLnNjaGVtYSgpO1xuICAgICAgICByZXR1cm4gKChfYSA9IHNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLnJvb3QoJ3F1ZXJ5JykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gdGhpcztcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlUmVjdXJzaXZlKHJlZikge1xuICAgICAgICBzd2l0Y2ggKHJlZi5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICdGaWVsZERlZmluaXRpb24nOlxuICAgICAgICAgICAgICAgIHJlZi5yZW1vdmVSZWN1cnNpdmUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1VuaW9uVHlwZSc6XG4gICAgICAgICAgICAgICAgaWYgKHJlZi5tZW1iZXJzQ291bnQoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZWYucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5PYmplY3RUeXBlID0gT2JqZWN0VHlwZTtcbmNsYXNzIEludGVyZmFjZVR5cGUgZXh0ZW5kcyBGaWVsZEJhc2VkVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMua2luZCA9ICdJbnRlcmZhY2VUeXBlJztcbiAgICAgICAgdGhpcy5hc3REZWZpbml0aW9uS2luZCA9IGdyYXBocWxfMS5LaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT047XG4gICAgfVxuICAgIGFsbEltcGxlbWVudGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlcnMoKS5maWx0ZXIocmVmID0+IHJlZi5raW5kID09PSAnT2JqZWN0VHlwZScgfHwgcmVmLmtpbmQgPT09ICdJbnRlcmZhY2VUeXBlJyk7XG4gICAgfVxuICAgIHBvc3NpYmxlUnVudGltZVR5cGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGxJbXBsZW1lbnRhdGlvbnMoKS5maWx0ZXIoaW1wbCA9PiBpbXBsLmtpbmQgPT09ICdPYmplY3RUeXBlJyk7XG4gICAgfVxuICAgIGlzUG9zc2libGVSdW50aW1lVHlwZSh0eXBlKSB7XG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZSA6IHR5cGUubmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zc2libGVSdW50aW1lVHlwZXMoKS5zb21lKHQgPT4gdC5uYW1lID09IHR5cGVOYW1lKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlUmVjdXJzaXZlKHJlZikge1xuICAgICAgICBpZiAocmVmLmtpbmQgPT09ICdGaWVsZERlZmluaXRpb24nKSB7XG4gICAgICAgICAgICByZWYucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkludGVyZmFjZVR5cGUgPSBJbnRlcmZhY2VUeXBlO1xuY2xhc3MgVW5pb25NZW1iZXIgZXh0ZW5kcyBCYXNlRXh0ZW5zaW9uTWVtYmVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyKCkge1xuICAgICAgICBVbmlvblR5cGUucHJvdG90eXBlWydyZW1vdmVNZW1iZXInXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcy50eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLlVuaW9uTWVtYmVyID0gVW5pb25NZW1iZXI7XG5jbGFzcyBVbmlvblR5cGUgZXh0ZW5kcyBCYXNlTmFtZWRUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ1VuaW9uVHlwZSc7XG4gICAgICAgIHRoaXMuYXN0RGVmaW5pdGlvbktpbmQgPSBncmFwaHFsXzEuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT047XG4gICAgICAgIHRoaXMuX21lbWJlcnMgPSBuZXcgdXRpbHNfMS5NYXBXaXRoQ2FjaGVkQXJyYXlzKCk7XG4gICAgfVxuICAgIG9uQXR0YWNoZWQoKSB7XG4gICAgICAgIFNjaGVtYS5wcm90b3R5cGVbJ3J1bldpdGhCdWlsdEluTW9kaWZpY2F0aW9uQWxsb3dlZCddLmNhbGwodGhpcy5zY2hlbWEoKSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdHlwZW5hbWVGaWVsZCA9IG5ldyBGaWVsZERlZmluaXRpb24oZXhwb3J0cy50eXBlbmFtZUZpZWxkTmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICBFbGVtZW50LnByb3RvdHlwZVsnc2V0UGFyZW50J10uY2FsbCh0aGlzLl90eXBlbmFtZUZpZWxkLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3R5cGVuYW1lRmllbGQudHlwZSA9IG5ldyBOb25OdWxsVHlwZSh0aGlzLnNjaGVtYSgpLnN0cmluZ1R5cGUoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0eXBlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVycygpLm1hcChtID0+IG0udHlwZSk7XG4gICAgfVxuICAgIG1lbWJlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZW1iZXJzLnZhbHVlcygpO1xuICAgIH1cbiAgICBtZW1iZXJzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZW1iZXJzLnNpemU7XG4gICAgfVxuICAgIGhhc1R5cGVNZW1iZXIodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVtYmVycy5oYXModHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZSA6IHR5cGUubmFtZSk7XG4gICAgfVxuICAgIGFkZFR5cGUobmFtZU9yVHlwZU9yTWVtYmVyKSB7XG4gICAgICAgIGxldCB0b0FkZDtcbiAgICAgICAgaWYgKG5hbWVPclR5cGVPck1lbWJlciBpbnN0YW5jZW9mIFVuaW9uTWVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKG5hbWVPclR5cGVPck1lbWJlcik7XG4gICAgICAgICAgICB0b0FkZCA9IG5hbWVPclR5cGVPck1lbWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBvYmo7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWVPclR5cGVPck1lbWJlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF5YmVPYmogPSB0aGlzLnNjaGVtYSgpLnR5cGUobmFtZU9yVHlwZU9yTWVtYmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIW1heWJlT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYENhbm5vdCBhZGQgdW5rbm93biB0eXBlICR7bmFtZU9yVHlwZU9yTWVtYmVyfSBhcyBtZW1iZXIgb2YgdW5pb24gdHlwZSAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF5YmVPYmoua2luZCAhPSAnT2JqZWN0VHlwZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgQ2Fubm90IGFkZCBub24tb2JqZWN0IHR5cGUgJHtuYW1lT3JUeXBlT3JNZW1iZXJ9IChvZiB0eXBlICR7bWF5YmVPYmoua2luZH0pIGFzIG1lbWJlciBvZiB1bmlvbiB0eXBlICR7dGhpcy5uYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmogPSBtYXliZU9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUobmFtZU9yVHlwZU9yTWVtYmVyKTtcbiAgICAgICAgICAgICAgICBvYmogPSBuYW1lT3JUeXBlT3JNZW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b0FkZCA9IG5ldyBVbmlvbk1lbWJlcihvYmopO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5fbWVtYmVycy5nZXQodG9BZGQudHlwZS5uYW1lKTtcbiAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgdGhpcy5fbWVtYmVycy5zZXQodG9BZGQudHlwZS5uYW1lLCB0b0FkZCk7XG4gICAgICAgICAgICBFbGVtZW50LnByb3RvdHlwZVsnc2V0UGFyZW50J10uY2FsbCh0b0FkZCwgdGhpcyk7XG4gICAgICAgICAgICBhZGRSZWZlcmVuY2VUb1R5cGUodGhpcywgdG9BZGQudHlwZSk7XG4gICAgICAgICAgICB0aGlzLm9uTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJUeXBlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHRoaXMudHlwZXMoKSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVNZW1iZXIodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgIH1cbiAgICBmaWVsZChuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBleHBvcnRzLnR5cGVuYW1lRmllbGROYW1lICYmIHRoaXMuX3R5cGVuYW1lRmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90eXBlbmFtZUZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHR5cGVuYW1lRmllbGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlbmFtZUZpZWxkO1xuICAgIH1cbiAgICByZW1vdmVNZW1iZXIodHlwZSkge1xuICAgICAgICB0aGlzLl9tZW1iZXJzLmRlbGV0ZSh0eXBlLm5hbWUpO1xuICAgICAgICByZW1vdmVSZWZlcmVuY2VUb1R5cGUodGhpcywgdHlwZSk7XG4gICAgfVxuICAgIHJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSkge1xuICAgICAgICB0aGlzLl9tZW1iZXJzLmRlbGV0ZSh0eXBlLm5hbWUpO1xuICAgIH1cbiAgICByZW1vdmVJbm5lckVsZW1lbnRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0aGlzLm1lbWJlcnMoKSkge1xuICAgICAgICAgICAgbWVtYmVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhc05vbkV4dGVuc2lvbklubmVyRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMoKS5zb21lKG0gPT4gbS5vZkV4dGVuc2lvbigpID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZW1vdmVSZWZlcmVuY2VSZWN1cnNpdmUocmVmKSB7XG4gICAgICAgIHJlZi5yZW1vdmVSZWN1cnNpdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlSW5uZXJFbGVtZW50c0V4dGVuc2lvbnMoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycygpLmZvckVhY2gobSA9PiBtLnJlbW92ZU9mRXh0ZW5zaW9uKCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5pb25UeXBlID0gVW5pb25UeXBlO1xuY2xhc3MgRW51bVR5cGUgZXh0ZW5kcyBCYXNlTmFtZWRUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ0VudW1UeXBlJztcbiAgICAgICAgdGhpcy5hc3REZWZpbml0aW9uS2luZCA9IGdyYXBocWxfMS5LaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OO1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fdmFsdWVzKTtcbiAgICB9XG4gICAgdmFsdWUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmZpbmQodiA9PiB2Lm5hbWUgPT09IG5hbWUpO1xuICAgIH1cbiAgICBhZGRWYWx1ZShuYW1lT3JWYWx1ZSkge1xuICAgICAgICBsZXQgdG9BZGQ7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZU9yVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICAgICB0b0FkZCA9IG5ldyBFbnVtVmFsdWUobmFtZU9yVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZShuYW1lT3JWYWx1ZSk7XG4gICAgICAgICAgICB0b0FkZCA9IG5hbWVPclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy52YWx1ZSh0b0FkZC5uYW1lKTtcbiAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godG9BZGQpO1xuICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGVbJ3NldFBhcmVudCddLmNhbGwodG9BZGQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRvQWRkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCBgRXVtIHR5cGUgJHt0aGlzfSBjYW4ndCByZWZlcmVuY2Ugb3RoZXIgdHlwZXM7IHNob3VsZG4ndCBiZSBhc2tlZCB0byByZW1vdmUgcmVmZXJlbmNlIHRvICR7dHlwZX1gKTtcbiAgICB9XG4gICAgcmVtb3ZlVmFsdWVJbnRlcm5hbCh2YWx1ZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5yZW1vdmVBcnJheUVsZW1lbnQpKHZhbHVlLCB0aGlzLl92YWx1ZXMpO1xuICAgIH1cbiAgICByZW1vdmVJbm5lckVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhbHVlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhc05vbkV4dGVuc2lvbklubmVyRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMuc29tZSh2ID0+IHYub2ZFeHRlbnNpb24oKSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlUmVjdXJzaXZlKHJlZikge1xuICAgICAgICByZWYucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyRWxlbWVudHNFeHRlbnNpb25zKCkge1xuICAgICAgICB0aGlzLl92YWx1ZXMuZm9yRWFjaCh2ID0+IHYucmVtb3ZlT2ZFeHRlbnNpb24oKSk7XG4gICAgfVxufVxuZXhwb3J0cy5FbnVtVHlwZSA9IEVudW1UeXBlO1xuY2xhc3MgSW5wdXRPYmplY3RUeXBlIGV4dGVuZHMgQmFzZU5hbWVkVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMua2luZCA9ICdJbnB1dE9iamVjdFR5cGUnO1xuICAgICAgICB0aGlzLmFzdERlZmluaXRpb25LaW5kID0gZ3JhcGhxbF8xLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjtcbiAgICAgICAgdGhpcy5fZmllbGRzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBmaWVsZHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVkRmllbGRzQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZpZWxkc0FycmF5ID0gKDAsIHV0aWxzXzEubWFwVmFsdWVzKSh0aGlzLl9maWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRGaWVsZHNBcnJheTtcbiAgICB9XG4gICAgZmllbGQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzLmdldChuYW1lKTtcbiAgICB9XG4gICAgYWRkRmllbGQobmFtZU9yRmllbGQsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgdG9BZGQgPSB0eXBlb2YgbmFtZU9yRmllbGQgPT09ICdzdHJpbmcnID8gbmV3IElucHV0RmllbGREZWZpbml0aW9uKG5hbWVPckZpZWxkKSA6IG5hbWVPckZpZWxkO1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKHRvQWRkKTtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQodG9BZGQubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEZpZWxkICR7dG9BZGQubmFtZX0gYWxyZWFkeSBleGlzdHMgb24gJHt0aGlzfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlICYmICFpc0lucHV0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCBvdXRwdXQgdHlwZSAke3R5cGV9IGZvciBmaWVsZCAke3RvQWRkLm5hbWV9OiBpbnB1dCBmaWVsZCB0eXBlcyBzaG91bGQgYmUgaW5wdXQgdHlwZXMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZmllbGRzLnNldCh0b0FkZC5uYW1lLCB0b0FkZCk7XG4gICAgICAgIHRoaXMuX2NhY2hlZEZpZWxkc0FycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBFbGVtZW50LnByb3RvdHlwZVsnc2V0UGFyZW50J10uY2FsbCh0b0FkZCwgdGhpcyk7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZU9yRmllbGQgPT09ICdzdHJpbmcnICYmIHR5cGUpIHtcbiAgICAgICAgICAgIHRvQWRkLnR5cGUgPSB0eXBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIHRvQWRkO1xuICAgIH1cbiAgICBoYXNGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZHMuc2l6ZSA+IDA7XG4gICAgfVxuICAgICphbGxDaGlsZEVsZW1lbnRzKCkge1xuICAgICAgICB5aWVsZCogdGhpcy5fZmllbGRzLnZhbHVlcygpO1xuICAgIH1cbiAgICByZW1vdmVUeXBlUmVmZXJlbmNlKHR5cGUpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmYWxzZSwgYElucHV0IE9iamVjdCB0eXBlICR7dGhpc30gY2FuJ3QgcmVmZXJlbmNlIG90aGVyIHR5cGVzOyBzaG91bGRuJ3QgYmUgYXNrZWQgdG8gcmVtb3ZlIHJlZmVyZW5jZSB0byAke3R5cGV9YCk7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyRWxlbWVudHMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdGhpcy5maWVsZHMoKSkge1xuICAgICAgICAgICAgZmllbGQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRmllbGRJbnRlcm5hbChmaWVsZCkge1xuICAgICAgICB0aGlzLl9maWVsZHMuZGVsZXRlKGZpZWxkLm5hbWUpO1xuICAgICAgICB0aGlzLl9jYWNoZWRGaWVsZHNBcnJheSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzTm9uRXh0ZW5zaW9uSW5uZXJFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzKCkuc29tZShmID0+IGYub2ZFeHRlbnNpb24oKSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVmZXJlbmNlUmVjdXJzaXZlKHJlZikge1xuICAgICAgICBpZiAocmVmLmtpbmQgPT09ICdBcmd1bWVudERlZmluaXRpb24nKSB7XG4gICAgICAgICAgICByZWYucGFyZW50KCkucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlSW5uZXJFbGVtZW50c0V4dGVuc2lvbnMoKSB7XG4gICAgICAgIHRoaXMuZmllbGRzKCkuZm9yRWFjaChmID0+IGYucmVtb3ZlT2ZFeHRlbnNpb24oKSk7XG4gICAgfVxufVxuZXhwb3J0cy5JbnB1dE9iamVjdFR5cGUgPSBJbnB1dE9iamVjdFR5cGU7XG5jbGFzcyBCYXNlV3JhcHBlclR5cGUge1xuICAgIGNvbnN0cnVjdG9yKF90eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSBfdHlwZTtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSh0aGlzLl90eXBlLCAnQ2Fubm90IHdyYXAgYW4gdW5kZWZpbmVkL251bGwgdHlwZScpO1xuICAgIH1cbiAgICBzY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VUeXBlKCkuc2NoZW1hKCk7XG4gICAgfVxuICAgIGlzQXR0YWNoZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VUeXBlKCkuaXNBdHRhY2hlZCgpO1xuICAgIH1cbiAgICBnZXQgb2ZUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICB9XG4gICAgYmFzZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHlwZSh0aGlzLl90eXBlKTtcbiAgICB9XG59XG5jbGFzcyBMaXN0VHlwZSBleHRlbmRzIEJhc2VXcmFwcGVyVHlwZSB7XG4gICAgY29uc3RydWN0b3IodHlwZSkge1xuICAgICAgICBzdXBlcih0eXBlKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ0xpc3RUeXBlJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgWyR7dGhpcy5vZlR5cGV9XWA7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0VHlwZSA9IExpc3RUeXBlO1xuY2xhc3MgTm9uTnVsbFR5cGUgZXh0ZW5kcyBCYXNlV3JhcHBlclR5cGUge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIHRoaXMua2luZCA9ICdOb25OdWxsVHlwZSc7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vZlR5cGV9IWA7XG4gICAgfVxufVxuZXhwb3J0cy5Ob25OdWxsVHlwZSA9IE5vbk51bGxUeXBlO1xuY2xhc3MgRmllbGREZWZpbml0aW9uIGV4dGVuZHMgTmFtZWRTY2hlbWFFbGVtZW50V2l0aFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGlzQnVpbHRJbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgICB0aGlzLmlzQnVpbHRJbiA9IGlzQnVpbHRJbjtcbiAgICAgICAgdGhpcy5raW5kID0gJ0ZpZWxkRGVmaW5pdGlvbic7XG4gICAgfVxuICAgIGlzRWxlbWVudEJ1aWx0SW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQnVpbHRJbjtcbiAgICB9XG4gICAgZ2V0IGNvb3JkaW5hdGUoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX3BhcmVudDtcbiAgICAgICAgcmV0dXJuIGAke3BhcmVudCA9PSB1bmRlZmluZWQgPyAnPGRldGFjaGVkPicgOiBwYXJlbnQuY29vcmRpbmF0ZX0uJHt0aGlzLm5hbWV9YDtcbiAgICB9XG4gICAgaGFzQXJndW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9hcmdzICYmIHRoaXMuX2FyZ3Muc2l6ZSA+IDA7XG4gICAgfVxuICAgIGFyZ3VtZW50cygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuX2FyZ3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZXMoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgfVxuICAgIGFyZ3VtZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fYXJncykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldChuYW1lKTtcbiAgICB9XG4gICAgYWRkQXJndW1lbnQobmFtZU9yQXJnLCB0eXBlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgbGV0IHRvQWRkO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgICAgIHRvQWRkID0gbmV3IEFyZ3VtZW50RGVmaW5pdGlvbihuYW1lT3JBcmcpO1xuICAgICAgICAgICAgdG9BZGQuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZShuYW1lT3JBcmcpO1xuICAgICAgICAgICAgdG9BZGQgPSBuYW1lT3JBcmc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmFyZ3VtZW50KHRvQWRkLm5hbWUpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlICYmIGV4aXN0aW5nLnR5cGUgJiYgISgwLCB0eXBlc18xLnNhbWVUeXBlKSh0eXBlLCBleGlzdGluZy50eXBlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEFyZ3VtZW50ICR7dG9BZGQubmFtZX0gYWxyZWFkeSBleGlzdHMgb24gZmllbGQgJHt0aGlzLm5hbWV9IHdpdGggYSBkaWZmZXJlbnQgdHlwZSAoJHtleGlzdGluZy50eXBlfSlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWUgJiYgKCFleGlzdGluZy5kZWZhdWx0VmFsdWUgfHwgISgwLCB2YWx1ZXNfMS52YWx1ZUVxdWFscykoZGVmYXVsdFZhbHVlLCBleGlzdGluZy5kZWZhdWx0VmFsdWUpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEFyZ3VtZW50ICR7dG9BZGQubmFtZX0gYWxyZWFkeSBleGlzdHMgb24gZmllbGQgJHt0aGlzLm5hbWV9IHdpdGggYSBkaWZmZXJlbnQgZGVmYXVsdCB2YWx1ZSAoJHsoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykoZXhpc3RpbmcuZGVmYXVsdFZhbHVlKX0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgJiYgIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIG91dHB1dCB0eXBlICR7dHlwZX0gZm9yIGFyZ3VtZW50ICR7dG9BZGQubmFtZX0gb2YgJHt0aGlzfTogYXJndW1lbnRzIHNob3VsZCBiZSBpbnB1dCB0eXBlcy5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2FyZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2FyZ3MgPSBuZXcgdXRpbHNfMS5NYXBXaXRoQ2FjaGVkQXJyYXlzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXJncy5zZXQodG9BZGQubmFtZSwgdG9BZGQpO1xuICAgICAgICBFbGVtZW50LnByb3RvdHlwZVsnc2V0UGFyZW50J10uY2FsbCh0b0FkZCwgdGhpcyk7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZU9yQXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9BZGQudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgfVxuICAgIG9mRXh0ZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0ZW5zaW9uO1xuICAgIH1cbiAgICByZW1vdmVPZkV4dGVuc2lvbigpIHtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzZXRPZkV4dGVuc2lvbihleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIWV4dGVuc2lvbiB8fCAoKF9hID0gdGhpcy5fcGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzRXh0ZW5zaW9uKGV4dGVuc2lvbikpLCAoKSA9PiBgQ2Fubm90IG1hcmsgZmllbGQgJHt0aGlzLm5hbWV9IGFzIHBhcnQgb2YgdGhlIHByb3ZpZGVkIGV4dGVuc2lvbjogaXQgaXMgbm90IGFuIGV4dGVuc2lvbiBvZiBmaWVsZCBwYXJlbnQgdHlwZSAke3RoaXMucGFyZW50fWApO1xuICAgICAgICB0aGlzLl9leHRlbnNpb24gPSBleHRlbnNpb247XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICB9XG4gICAgaXNJbnRyb3NwZWN0aW9uRmllbGQoKSB7XG4gICAgICAgIHJldHVybiAoMCwgaW50cm9zcGVjdGlvbl8xLmlzSW50cm9zcGVjdGlvbk5hbWUpKHRoaXMubmFtZSk7XG4gICAgfVxuICAgIGlzU2NoZW1hSW50cm9zcGVjdGlvbkZpZWxkKCkge1xuICAgICAgICByZXR1cm4gaW50cm9zcGVjdGlvbl8xLmludHJvc3BlY3Rpb25GaWVsZE5hbWVzLmluY2x1ZGVzKHRoaXMubmFtZSk7XG4gICAgfVxuICAgIHJlbW92ZUFyZ3VtZW50SW50ZXJuYWwobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fYXJncykge1xuICAgICAgICAgICAgdGhpcy5fYXJncy5kZWxldGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlUGFyZW50KCkge1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlzRGVwcmVjYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXBwbGllZERpcmVjdGl2ZSgnZGVwcmVjYXRlZCcpO1xuICAgIH1cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja1JlbW92YWwoKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLnNvdXJjZUFTVCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlbW92ZUFwcGxpZWREaXJlY3RpdmVzKCk7XG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIHRoaXMuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgIGFyZy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBGaWVsZEJhc2VkVHlwZS5wcm90b3R5cGVbJ3JlbW92ZUZpZWxkSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJlbW92ZVJlY3Vyc2l2ZSgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICBpZiAocGFyZW50ICYmICFpc1VuaW9uVHlwZShwYXJlbnQpICYmIHBhcmVudC5maWVsZHMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVSZWN1cnNpdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuaGFzQXJndW1lbnRzKClcbiAgICAgICAgICAgID8gJygnICsgdGhpcy5hcmd1bWVudHMoKS5tYXAoYXJnID0+IGFyZy50b1N0cmluZygpKS5qb2luKCcsICcpICsgJyknXG4gICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9JHthcmdzfTogJHt0aGlzLnR5cGV9YDtcbiAgICB9XG59XG5leHBvcnRzLkZpZWxkRGVmaW5pdGlvbiA9IEZpZWxkRGVmaW5pdGlvbjtcbmNsYXNzIElucHV0RmllbGREZWZpbml0aW9uIGV4dGVuZHMgTmFtZWRTY2hlbWFFbGVtZW50V2l0aFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmtpbmQgPSAnSW5wdXRGaWVsZERlZmluaXRpb24nO1xuICAgIH1cbiAgICBnZXQgY29vcmRpbmF0ZSgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgICAgICByZXR1cm4gYCR7cGFyZW50ID09IHVuZGVmaW5lZCA/ICc8ZGV0YWNoZWQ+JyA6IHBhcmVudC5jb29yZGluYXRlfS4ke3RoaXMubmFtZX1gO1xuICAgIH1cbiAgICBpc1JlcXVpcmVkKCkge1xuICAgICAgICByZXR1cm4gaXNOb25OdWxsVHlwZSh0aGlzLnR5cGUpICYmIHRoaXMuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9mRXh0ZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0ZW5zaW9uO1xuICAgIH1cbiAgICByZW1vdmVPZkV4dGVuc2lvbigpIHtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzZXRPZkV4dGVuc2lvbihleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIWV4dGVuc2lvbiB8fCAoKF9hID0gdGhpcy5fcGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGFzRXh0ZW5zaW9uKGV4dGVuc2lvbikpLCAoKSA9PiBgQ2Fubm90IG1hcmsgZmllbGQgJHt0aGlzLm5hbWV9IGFzIHBhcnQgb2YgdGhlIHByb3ZpZGVkIGV4dGVuc2lvbjogaXQgaXMgbm90IGFuIGV4dGVuc2lvbiBvZiBmaWVsZCBwYXJlbnQgdHlwZSAke3RoaXMucGFyZW50fWApO1xuICAgICAgICB0aGlzLl9leHRlbnNpb24gPSBleHRlbnNpb247XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICB9XG4gICAgaXNEZXByZWNhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBcHBsaWVkRGlyZWN0aXZlKCdkZXByZWNhdGVkJyk7XG4gICAgfVxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoZWNrUmVtb3ZhbCgpO1xuICAgICAgICB0aGlzLm9uTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgIHRoaXMuc291cmNlQVNUID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlbW92ZUFwcGxpZWREaXJlY3RpdmVzKCk7XG4gICAgICAgIElucHV0T2JqZWN0VHlwZS5wcm90b3R5cGVbJ3JlbW92ZUZpZWxkSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJlbW92ZVJlY3Vyc2l2ZSgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5maWVsZHMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVSZWN1cnNpdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFN0ciA9IHRoaXMuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogYCA9ICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKHRoaXMuZGVmYXVsdFZhbHVlLCB0aGlzLnR5cGUpfWA7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9OiAke3RoaXMudHlwZX0ke2RlZmF1bHRTdHJ9YDtcbiAgICB9XG59XG5leHBvcnRzLklucHV0RmllbGREZWZpbml0aW9uID0gSW5wdXRGaWVsZERlZmluaXRpb247XG5jbGFzcyBBcmd1bWVudERlZmluaXRpb24gZXh0ZW5kcyBOYW1lZFNjaGVtYUVsZW1lbnRXaXRoVHlwZSB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICBzdXBlcihuYW1lKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ0FyZ3VtZW50RGVmaW5pdGlvbic7XG4gICAgfVxuICAgIGdldCBjb29yZGluYXRlKCkge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9wYXJlbnQ7XG4gICAgICAgIHJldHVybiBgJHtwYXJlbnQgPT0gdW5kZWZpbmVkID8gJzxkZXRhY2hlZD4nIDogcGFyZW50LmNvb3JkaW5hdGV9KCR7dGhpcy5uYW1lfTopYDtcbiAgICB9XG4gICAgaXNSZXF1aXJlZCgpIHtcbiAgICAgICAgcmV0dXJuIGlzTm9uTnVsbFR5cGUodGhpcy50eXBlKSAmJiB0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpc0RlcHJlY2F0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0FwcGxpZWREaXJlY3RpdmUoJ2RlcHJlY2F0ZWQnKTtcbiAgICB9XG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hlY2tSZW1vdmFsKCk7XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgdGhpcy5zb3VyY2VBU1QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVtb3ZlQXBwbGllZERpcmVjdGl2ZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIEZpZWxkRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgRmllbGREZWZpbml0aW9uLnByb3RvdHlwZVsncmVtb3ZlQXJndW1lbnRJbnRlcm5hbCddLmNhbGwodGhpcy5fcGFyZW50LCB0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgRGlyZWN0aXZlRGVmaW5pdGlvbi5wcm90b3R5cGVbJ3JlbW92ZUFyZ3VtZW50SW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdHIgPSB0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGAgPSAkeygwLCB2YWx1ZXNfMS52YWx1ZVRvU3RyaW5nKSh0aGlzLmRlZmF1bHRWYWx1ZSwgdGhpcy50eXBlKX1gO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYW1lfTogJHt0aGlzLnR5cGV9JHtkZWZhdWx0U3RyfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Bcmd1bWVudERlZmluaXRpb24gPSBBcmd1bWVudERlZmluaXRpb247XG5jbGFzcyBFbnVtVmFsdWUgZXh0ZW5kcyBOYW1lZFNjaGVtYUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmtpbmQgPSAnRW51bVZhbHVlJztcbiAgICB9XG4gICAgZ2V0IGNvb3JkaW5hdGUoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX3BhcmVudDtcbiAgICAgICAgcmV0dXJuIGAke3BhcmVudCA9PSB1bmRlZmluZWQgPyAnPGRldGFjaGVkPicgOiBwYXJlbnQuY29vcmRpbmF0ZX0uJHt0aGlzLm5hbWV9YDtcbiAgICB9XG4gICAgb2ZFeHRlbnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRlbnNpb247XG4gICAgfVxuICAgIHJlbW92ZU9mRXh0ZW5zaW9uKCkge1xuICAgICAgICB0aGlzLl9leHRlbnNpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghZXh0ZW5zaW9uIHx8ICgoX2EgPSB0aGlzLl9wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oYXNFeHRlbnNpb24oZXh0ZW5zaW9uKSksICgpID0+IGBDYW5ub3QgbWFyayBmaWVsZCAke3RoaXMubmFtZX0gYXMgcGFydCBvZiB0aGUgcHJvdmlkZWQgZXh0ZW5zaW9uOiBpdCBpcyBub3QgYW4gZXh0ZW5zaW9uIG9mIGVudW0gdmFsdWUgcGFyZW50IHR5cGUgJHt0aGlzLnBhcmVudH1gKTtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gZXh0ZW5zaW9uO1xuICAgICAgICB0aGlzLm9uTW9kaWZpY2F0aW9uKCk7XG4gICAgfVxuICAgIGlzRGVwcmVjYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXBwbGllZERpcmVjdGl2ZSgnZGVwcmVjYXRlZCcpO1xuICAgIH1cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja1JlbW92YWwoKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLnNvdXJjZUFTVCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZW1vdmVBcHBsaWVkRGlyZWN0aXZlcygpO1xuICAgICAgICBFbnVtVHlwZS5wcm90b3R5cGVbJ3JlbW92ZVZhbHVlSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCBgRW51bSB2YWx1ZSAke3RoaXN9IGNhbid0IHJlZmVyZW5jZSBvdGhlciB0eXBlczsgc2hvdWxkbid0IGJlIGFza2VkIHRvIHJlbW92ZSByZWZlcmVuY2UgdG8gJHt0eXBlfWApO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubmFtZX1gO1xuICAgIH1cbn1cbmV4cG9ydHMuRW51bVZhbHVlID0gRW51bVZhbHVlO1xuY2xhc3MgRGlyZWN0aXZlRGVmaW5pdGlvbiBleHRlbmRzIE5hbWVkU2NoZW1hRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgaXNCdWlsdEluID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIobmFtZSk7XG4gICAgICAgIHRoaXMuaXNCdWlsdEluID0gaXNCdWlsdEluO1xuICAgICAgICB0aGlzLmtpbmQgPSAnRGlyZWN0aXZlRGVmaW5pdGlvbic7XG4gICAgICAgIHRoaXMucmVwZWF0YWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sb2NhdGlvbnMgPSBbXTtcbiAgICB9XG4gICAgZ2V0IGNvb3JkaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiBgQCR7dGhpcy5uYW1lfWA7XG4gICAgfVxuICAgIGFyZ3VtZW50cygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuX2FyZ3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZXMoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgfVxuICAgIGFyZ3VtZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fYXJncykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldChuYW1lKTtcbiAgICB9XG4gICAgYWRkQXJndW1lbnQobmFtZU9yQXJnLCB0eXBlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgbGV0IHRvQWRkO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tVcGRhdGUoKTtcbiAgICAgICAgICAgIHRvQWRkID0gbmV3IEFyZ3VtZW50RGVmaW5pdGlvbihuYW1lT3JBcmcpO1xuICAgICAgICAgICAgdG9BZGQuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGVja1VwZGF0ZShuYW1lT3JBcmcpO1xuICAgICAgICAgICAgdG9BZGQgPSBuYW1lT3JBcmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXJndW1lbnQodG9BZGQubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEFyZ3VtZW50ICR7dG9BZGQubmFtZX0gYWxyZWFkeSBleGlzdHMgb24gZmllbGQgJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9hcmdzKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmdzID0gbmV3IHV0aWxzXzEuTWFwV2l0aENhY2hlZEFycmF5cygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FyZ3Muc2V0KHRvQWRkLm5hbWUsIHRvQWRkKTtcbiAgICAgICAgRWxlbWVudC5wcm90b3R5cGVbJ3NldFBhcmVudCddLmNhbGwodG9BZGQsIHRoaXMpO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRvQWRkLnR5cGUgPSB0eXBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIHRvQWRkO1xuICAgIH1cbiAgICByZW1vdmVBcmd1bWVudEludGVybmFsKG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9hcmdzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVsZXRlKG5hbWUpO1xuICAgIH1cbiAgICBnZXQgbG9jYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYXRpb25zO1xuICAgIH1cbiAgICBhZGRMb2NhdGlvbnMoLi4ubG9jYXRpb25zKSB7XG4gICAgICAgIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIGxvY2F0aW9ucykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sb2NhdGlvbnMuaW5jbHVkZXMobG9jYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkQWxsTG9jYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMb2NhdGlvbnMoLi4uT2JqZWN0LnZhbHVlcyhncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24pKTtcbiAgICB9XG4gICAgYWRkQWxsVHlwZUxvY2F0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTG9jYXRpb25zKGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVIsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5VTklPTiwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU0sIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1QpO1xuICAgIH1cbiAgICByZW1vdmVMb2NhdGlvbnMoLi4ubG9jYXRpb25zKSB7XG4gICAgICAgIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIGxvY2F0aW9ucykge1xuICAgICAgICAgICAgbW9kaWZpZWQgfHwgKG1vZGlmaWVkID0gKDAsIHV0aWxzXzEucmVtb3ZlQXJyYXlFbGVtZW50KShsb2NhdGlvbiwgdGhpcy5fbG9jYXRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aGlzLm9uTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGhhc0V4ZWN1dGFibGVMb2NhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9ucy5zb21lKChsb2MpID0+IGlzRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uKGxvYykpO1xuICAgIH1cbiAgICBoYXNUeXBlU3lzdGVtTG9jYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbnMuc29tZSgobG9jKSA9PiBpc1R5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbihsb2MpKTtcbiAgICB9XG4gICAgYXBwbGljYXRpb25zKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9yZWZlcmVuY2VycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgfVxuICAgIGFkZFJlZmVyZW5jZXIocmVmZXJlbmNlcikge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHJlZmVyZW5jZXIsICdSZWZlcmVuY2VyIHNob3VsZCBleGlzdHMnKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlZmVyZW5jZXJzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlZmVyZW5jZXJzLmluY2x1ZGVzKHJlZmVyZW5jZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlcnMucHVzaChyZWZlcmVuY2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZmVyZW5jZXJzID0gW3JlZmVyZW5jZXJdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVJlZmVyZW5jZXIocmVmZXJlbmNlcikge1xuICAgICAgICBpZiAodGhpcy5fcmVmZXJlbmNlcnMpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLnJlbW92ZUFycmF5RWxlbWVudCkocmVmZXJlbmNlciwgdGhpcy5fcmVmZXJlbmNlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVR5cGVSZWZlcmVuY2UodHlwZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCBgRGlyZWN0aXZlIGRlZmluaXRpb24gJHt0aGlzfSBjYW4ndCByZWZlcmVuY2Ugb3RoZXIgdHlwZXMgKGl0J3MgYXJndW1lbnRzIGNhbik7IHNob3VsZG4ndCBiZSBhc2tlZCB0byByZW1vdmUgcmVmZXJlbmNlIHRvICR7dHlwZX1gKTtcbiAgICB9XG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5fcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja1JlbW92YWwoKTtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLnNvdXJjZUFTVCA9IHVuZGVmaW5lZDtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpcy5fYXBwbGllZERpcmVjdGl2ZXMgfHwgdGhpcy5fYXBwbGllZERpcmVjdGl2ZXMubGVuZ3RoID09PSAwLCBcIkRpcmVjdGl2ZSBkZWZpbml0aW9uIHNob3VsZCBub3QgaGF2ZSBkaXJlY3RpdmUgYXBwbGllZCB0byBpdFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgdGhpcy5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgYXJnLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvUmV0dXJuID0gKF9hID0gdGhpcy5fcmVmZXJlbmNlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICB0aGlzLl9yZWZlcmVuY2VycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgU2NoZW1hLnByb3RvdHlwZVsncmVtb3ZlRGlyZWN0aXZlSW50ZXJuYWwnXS5jYWxsKHRoaXMuX3BhcmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH1cbiAgICByZW1vdmVSZWN1cnNpdmUoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCkuZm9yRWFjaChyZWYgPT4gcmVmLnJlbW92ZSgpKTtcbiAgICB9XG4gICAgdG9BU1QoKSB7XG4gICAgICAgIGNvbnN0IGRvYyA9ICgwLCBncmFwaHFsXzEucGFyc2UpKCgwLCBwcmludF8xLnByaW50RGlyZWN0aXZlRGVmaW5pdGlvbikodGhpcykpO1xuICAgICAgICByZXR1cm4gZG9jLmRlZmluaXRpb25zWzBdO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBAJHt0aGlzLm5hbWV9YDtcbiAgICB9XG59XG5leHBvcnRzLkRpcmVjdGl2ZURlZmluaXRpb24gPSBEaXJlY3RpdmVEZWZpbml0aW9uO1xuY2xhc3MgRGlyZWN0aXZlIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgX2FyZ3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fYXJncyA9IF9hcmdzO1xuICAgIH1cbiAgICBzY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5zY2hlbWEoKTtcbiAgICB9XG4gICAgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZG9jID0gdGhpcy5zY2hlbWEoKTtcbiAgICAgICAgcmV0dXJuIGRvYy5kaXJlY3RpdmUodGhpcy5uYW1lKTtcbiAgICB9XG4gICAgYXJndW1lbnRzKGluY2x1ZGVEZWZhdWx0VmFsdWVzID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlRGVmYXVsdFZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FyZ3M7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHRoaXMuZGVmaW5pdGlvbjtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShkZWZpbml0aW9uLCAoKSA9PiBgQ2Fubm90IGluY2x1ZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFyZ3VtZW50czogY2Fubm90IGZpbmQgZGlyZWN0aXZlIGRlZmluaXRpb24gZm9yICR7dGhpcy5uYW1lfWApO1xuICAgICAgICBjb25zdCB1cGRhdGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yIChjb25zdCBhcmdEZWYgb2YgZGVmaW5pdGlvbi5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgY29uc3QgYXJnVmFsdWUgPSAoMCwgdmFsdWVzXzEud2l0aERlZmF1bHRWYWx1ZXMpKHRoaXMuX2FyZ3NbYXJnRGVmLm5hbWVdLCBhcmdEZWYpO1xuICAgICAgICAgICAgaWYgKGFyZ1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkW2FyZ0RlZi5uYW1lXSA9IGFyZ1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cbiAgICBvbk1vZGlmaWNhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZFRvU2NoZW1hRWxlbWVudCgpKSB7XG4gICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlWydvbk1vZGlmaWNhdGlvbiddLmNhbGwodGhpcy5zY2hlbWEoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNBdHRhY2hlZFRvU2NoZW1hRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBdHRhY2hlZCgpO1xuICAgIH1cbiAgICBzZXRBcmd1bWVudHMoYXJncykge1xuICAgICAgICB0aGlzLl9hcmdzID0gYXJncztcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgIH1cbiAgICBhcmd1bWVudFR5cGUobmFtZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5kZWZpbml0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXJndW1lbnQobmFtZSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi50eXBlO1xuICAgIH1cbiAgICBtYXRjaEFyZ3VtZW50cyhleHBlY3RlZEFyZ3MpIHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX2FyZ3MpO1xuICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGV4cGVjdGVkQXJncykubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmICghKGtleSBpbiBleHBlY3RlZEFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZEFyZ3Nba2V5XTtcbiAgICAgICAgICAgIGlmICghKDAsIHZhbHVlc18xLnZhbHVlRXF1YWxzKShleHBlY3RlZFZhbCwgdmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgb2ZFeHRlbnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRlbnNpb247XG4gICAgfVxuICAgIHJlbW92ZU9mRXh0ZW5zaW9uKCkge1xuICAgICAgICB0aGlzLl9leHRlbnNpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICB0aGlzLmNoZWNrVXBkYXRlKCk7XG4gICAgICAgIGlmIChleHRlbnNpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShwYXJlbnQgaW5zdGFuY2VvZiBTY2hlbWFEZWZpbml0aW9uIHx8IHBhcmVudCBpbnN0YW5jZW9mIEJhc2VOYW1lZFR5cGUsICdDYW4gb25seSBtYXJrIGRpcmVjdGl2ZSBwYXJ0cyBvZiBleHRlbnNpb25zIHdoZW4gZGlyZWN0bHkgYXBwbHkgdG8gdHlwZSBvciBzY2hlbWEgZGVmaW5pdGlvbi4nKTtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkocGFyZW50Lmhhc0V4dGVuc2lvbihleHRlbnNpb24pLCAoKSA9PiBgQ2Fubm90IG1hcmsgZGlyZWN0aXZlICR7dGhpcy5uYW1lfSBhcyBwYXJ0IG9mIHRoZSBwcm92aWRlZCBleHRlbnNpb246IGl0IGlzIG5vdCBhbiBleHRlbnNpb24gb2YgcGFyZW50ICR7cGFyZW50fWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V4dGVuc2lvbiA9IGV4dGVuc2lvbjtcbiAgICAgICAgdGhpcy5vbk1vZGlmaWNhdGlvbigpO1xuICAgIH1cbiAgICBhcmd1bWVudHNUb0FTVCgpIHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX2FyZ3MpO1xuICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHRoaXMuZGVmaW5pdGlvbjtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShkZWZpbml0aW9uLCAoKSA9PiBgQ2Fubm90IGNvbnZlcnQgYXJndW1lbnRzIG9mIGRldGFjaGVkIGRpcmVjdGl2ZSAke3RoaXN9YCk7XG4gICAgICAgIHJldHVybiBlbnRyaWVzLm1hcCgoW24sIHZdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkFSR1VNRU5ULFxuICAgICAgICAgICAgICAgIG5hbWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSwgdmFsdWU6IG4gfSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogKDAsIHZhbHVlc18xLnZhbHVlVG9BU1QpKHYsIGRlZmluaXRpb24uYXJndW1lbnQobikudHlwZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Nb2RpZmljYXRpb24oKTtcbiAgICAgICAgY29uc3QgY29yZUZlYXR1cmVzID0gdGhpcy5zY2hlbWEoKS5jb3JlRmVhdHVyZXM7XG4gICAgICAgIGlmIChjb3JlRmVhdHVyZXMgJiYgdGhpcy5uYW1lID09PSBjb3JlRmVhdHVyZXMuY29yZUl0c2VsZi5uYW1lSW5TY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNvcmVTcGVjXzEuRmVhdHVyZVVybC5wYXJzZSh0aGlzLl9hcmdzW2NvcmVGZWF0dXJlcy5jb3JlRGVmaW5pdGlvbi51cmxBcmdOYW1lKCldKTtcbiAgICAgICAgICAgIGlmICh1cmwuaWRlbnRpdHkgPT09IGNvcmVGZWF0dXJlcy5jb3JlSXRzZWxmLnVybC5pZGVudGl0eSkge1xuICAgICAgICAgICAgICAgIFNjaGVtYS5wcm90b3R5cGVbJ3VubWFya0FzQ29yZVNjaGVtYSddLmNhbGwodGhpcy5zY2hlbWEoKSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkIG9mIHRoaXMuc2NoZW1hKCkuc2NoZW1hRGVmaW5pdGlvbi5hcHBsaWVkRGlyZWN0aXZlc09mKGNvcmVGZWF0dXJlcy5jb3JlSXRzZWxmLm5hbWVJblNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZW1vdmVJbnRlcm5hbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIENvcmVGZWF0dXJlcy5wcm90b3R5cGVbJ3JlbW92ZUZlYXR1cmUnXS5jYWxsKGNvcmVGZWF0dXJlcywgdXJsLmlkZW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVJbnRlcm5hbCgpO1xuICAgIH1cbiAgICByZW1vdmVJbnRlcm5hbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gdGhpcy5kZWZpbml0aW9uO1xuICAgICAgICBpZiAoZGVmaW5pdGlvbiAmJiB0aGlzLmlzQXR0YWNoZWRUb1NjaGVtYUVsZW1lbnQoKSkge1xuICAgICAgICAgICAgRGlyZWN0aXZlRGVmaW5pdGlvbi5wcm90b3R5cGVbJ3JlbW92ZVJlZmVyZW5jZXInXS5jYWxsKGRlZmluaXRpb24sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudERpcmVjdGl2ZXMgPSB0aGlzLl9wYXJlbnQuYXBwbGllZERpcmVjdGl2ZXM7XG4gICAgICAgIGNvbnN0IHJlbW92ZWQgPSAoMCwgdXRpbHNfMS5yZW1vdmVBcnJheUVsZW1lbnQpKHRoaXMsIHBhcmVudERpcmVjdGl2ZXMpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHJlbW92ZWQsICgpID0+IGBEaXJlY3RpdmUgJHt0aGlzfSBsaXN0cyAke3RoaXMuX3BhcmVudH0gYXMgcGFyZW50LCBidXQgdGhhdCBwYXJlbnQgZG9lc24ndCBsaXN0IGl0IGFzIGFwcGxpZWQgZGlyZWN0aXZlYCk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLl9hcmdzKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgY29uc3QgYXJncyA9IGVudHJpZXMubGVuZ3RoID09IDAgPyAnJyA6ICcoJyArIGVudHJpZXMubWFwKChbbiwgdl0pID0+IGAke259OiAkeygwLCB2YWx1ZXNfMS52YWx1ZVRvU3RyaW5nKSh2LCB0aGlzLmFyZ3VtZW50VHlwZShuKSl9YCkuam9pbignLCAnKSArICcpJztcbiAgICAgICAgcmV0dXJuIGBAJHt0aGlzLm5hbWV9JHthcmdzfWA7XG4gICAgfVxufVxuZXhwb3J0cy5EaXJlY3RpdmUgPSBEaXJlY3RpdmU7XG5mdW5jdGlvbiBzYW1lRGlyZWN0aXZlQXBwbGljYXRpb24oYXBwbGljYXRpb24xLCBhcHBsaWNhdGlvbjIsIGRpcmVjdGl2ZXNOZXZlckVxdWFsVG9UaGVtc2VsdmVzID0gWydkZWZlciddKSB7XG4gICAgcmV0dXJuIGFwcGxpY2F0aW9uMS5uYW1lID09PSBhcHBsaWNhdGlvbjIubmFtZVxuICAgICAgICAmJiAhZGlyZWN0aXZlc05ldmVyRXF1YWxUb1RoZW1zZWx2ZXMuaW5jbHVkZXMoYXBwbGljYXRpb24xLm5hbWUpXG4gICAgICAgICYmICFkaXJlY3RpdmVzTmV2ZXJFcXVhbFRvVGhlbXNlbHZlcy5pbmNsdWRlcyhhcHBsaWNhdGlvbjIubmFtZSlcbiAgICAgICAgJiYgKDAsIHZhbHVlc18xLmFyZ3VtZW50c0VxdWFscykoYXBwbGljYXRpb24xLmFyZ3VtZW50cygpLCBhcHBsaWNhdGlvbjIuYXJndW1lbnRzKCkpO1xufVxuZXhwb3J0cy5zYW1lRGlyZWN0aXZlQXBwbGljYXRpb24gPSBzYW1lRGlyZWN0aXZlQXBwbGljYXRpb247XG5mdW5jdGlvbiBzYW1lRGlyZWN0aXZlQXBwbGljYXRpb25zKGFwcGxpY2F0aW9uczEsIGFwcGxpY2F0aW9uczIsIGRpcmVjdGl2ZXNOZXZlckVxdWFsVG9UaGVtc2VsdmVzID0gWydkZWZlciddKSB7XG4gICAgaWYgKGFwcGxpY2F0aW9uczEubGVuZ3RoICE9PSBhcHBsaWNhdGlvbnMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlMSBvZiBhcHBsaWNhdGlvbnMxKSB7XG4gICAgICAgIGlmICghYXBwbGljYXRpb25zMi5zb21lKGRpcmVjdGl2ZTIgPT4gc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9uKGRpcmVjdGl2ZTEsIGRpcmVjdGl2ZTIsIGRpcmVjdGl2ZXNOZXZlckVxdWFsVG9UaGVtc2VsdmVzKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9ucyA9IHNhbWVEaXJlY3RpdmVBcHBsaWNhdGlvbnM7XG5mdW5jdGlvbiBpc0RpcmVjdGl2ZUFwcGxpY2F0aW9uc1N1YnNldChhcHBsaWNhdGlvbnMsIG1heWJlU3Vic2V0KSB7XG4gICAgaWYgKG1heWJlU3Vic2V0Lmxlbmd0aCA+IGFwcGxpY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZTEgb2YgbWF5YmVTdWJzZXQpIHtcbiAgICAgICAgaWYgKCFhcHBsaWNhdGlvbnMuc29tZShkaXJlY3RpdmUyID0+IHNhbWVEaXJlY3RpdmVBcHBsaWNhdGlvbihkaXJlY3RpdmUxLCBkaXJlY3RpdmUyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNEaXJlY3RpdmVBcHBsaWNhdGlvbnNTdWJzZXQgPSBpc0RpcmVjdGl2ZUFwcGxpY2F0aW9uc1N1YnNldDtcbmZ1bmN0aW9uIGRpcmVjdGl2ZUFwcGxpY2F0aW9uc1N1YnN0cmFjdGlvbihiYXNlQXBwbGljYXRpb25zLCB0b1JlbW92ZSkge1xuICAgIHJldHVybiBiYXNlQXBwbGljYXRpb25zLmZpbHRlcigoYXBwbGljYXRpb24pID0+ICF0b1JlbW92ZS5zb21lKChvdGhlcikgPT4gc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9uKGFwcGxpY2F0aW9uLCBvdGhlcikpKTtcbn1cbmV4cG9ydHMuZGlyZWN0aXZlQXBwbGljYXRpb25zU3Vic3RyYWN0aW9uID0gZGlyZWN0aXZlQXBwbGljYXRpb25zU3Vic3RyYWN0aW9uO1xuY2xhc3MgVmFyaWFibGUge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgdG9WYXJpYWJsZU5vZGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5WQVJJQUJMRSxcbiAgICAgICAgICAgIG5hbWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSwgdmFsdWU6IHRoaXMubmFtZSB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICckJyArIHRoaXMubmFtZTtcbiAgICB9XG59XG5leHBvcnRzLlZhcmlhYmxlID0gVmFyaWFibGU7XG5mdW5jdGlvbiBtZXJnZVZhcmlhYmxlcyh2MXMsIHYycykge1xuICAgIGlmICh2MXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIHYycztcbiAgICB9XG4gICAgaWYgKHYycy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gdjFzO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSB2MXMuY29uY2F0KCk7XG4gICAgZm9yIChjb25zdCB2IG9mIHYycykge1xuICAgICAgICBpZiAoIWNvbnRhaW5zVmFyaWFibGUodjFzLCB2KSkge1xuICAgICAgICAgICAgcmVzLnB1c2godik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMubWVyZ2VWYXJpYWJsZXMgPSBtZXJnZVZhcmlhYmxlcztcbmZ1bmN0aW9uIGNvbnRhaW5zVmFyaWFibGUodmFyaWFibGVzLCB0b0NoZWNrKSB7XG4gICAgcmV0dXJuIHZhcmlhYmxlcy5zb21lKHYgPT4gdi5uYW1lID09IHRvQ2hlY2submFtZSk7XG59XG5leHBvcnRzLmNvbnRhaW5zVmFyaWFibGUgPSBjb250YWluc1ZhcmlhYmxlO1xuZnVuY3Rpb24gaXNWYXJpYWJsZSh2KSB7XG4gICAgcmV0dXJuIHYgaW5zdGFuY2VvZiBWYXJpYWJsZTtcbn1cbmV4cG9ydHMuaXNWYXJpYWJsZSA9IGlzVmFyaWFibGU7XG5mdW5jdGlvbiB2YXJpYWJsZXNJbkFyZ3VtZW50cyhhcmdzKSB7XG4gICAgbGV0IHZhcmlhYmxlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhhcmdzKSkge1xuICAgICAgICB2YXJpYWJsZXMgPSBtZXJnZVZhcmlhYmxlcyh2YXJpYWJsZXMsICgwLCB2YWx1ZXNfMS52YXJpYWJsZXNJblZhbHVlKSh2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFyaWFibGVzO1xufVxuZXhwb3J0cy52YXJpYWJsZXNJbkFyZ3VtZW50cyA9IHZhcmlhYmxlc0luQXJndW1lbnRzO1xuY2xhc3MgVmFyaWFibGVEZWZpbml0aW9uIGV4dGVuZHMgRGlyZWN0aXZlVGFyZ2V0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCB2YXJpYWJsZSwgdHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHRvVmFyaWFibGVEZWZpbml0aW9uTm9kZSgpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gKDAsIHZhbHVlc18xLnZhbHVlVG9BU1QpKHRoaXMuZGVmYXVsdFZhbHVlLCB0aGlzLnR5cGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuVkFSSUFCTEVfREVGSU5JVElPTixcbiAgICAgICAgICAgIHZhcmlhYmxlOiB0aGlzLnZhcmlhYmxlLnRvVmFyaWFibGVOb2RlKCksXG4gICAgICAgICAgICB0eXBlOiB0eXBlVG9BU1QodGhpcy50eXBlKSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogKGFzdCAhPT0gdW5kZWZpbmVkKSA/ICgwLCB2YWx1ZXNfMS52YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlKShhc3QpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGlyZWN0aXZlczogdGhpcy5hcHBsaWVkRGlyZWN0aXZlc1RvRGlyZWN0aXZlTm9kZXMoKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBiYXNlID0gdGhpcy52YXJpYWJsZSArICc6ICcgKyB0aGlzLnR5cGU7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgYmFzZSA9IGJhc2UgKyAnID0gJyArICgwLCB2YWx1ZXNfMS52YWx1ZVRvU3RyaW5nKSh0aGlzLmRlZmF1bHRWYWx1ZSwgdGhpcy50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZSArIHRoaXMuYXBwbGllZERpcmVjdGl2ZXNUb1N0cmluZygpO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFyaWFibGVEZWZpbml0aW9uID0gVmFyaWFibGVEZWZpbml0aW9uO1xuY2xhc3MgVmFyaWFibGVEZWZpbml0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2RlZmluaXRpb25zID0gbmV3IHV0aWxzXzEuTWFwV2l0aENhY2hlZEFycmF5cygpO1xuICAgIH1cbiAgICBhZGQoZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fZGVmaW5pdGlvbnMuaGFzKGRlZmluaXRpb24udmFyaWFibGUubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZWZpbml0aW9ucy5zZXQoZGVmaW5pdGlvbi52YXJpYWJsZS5uYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFkZEFsbChkZWZpbml0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGRlZmluaXRpb24gb2YgZGVmaW5pdGlvbnMuX2RlZmluaXRpb25zLnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWZpbml0aW9uKHZhcmlhYmxlKSB7XG4gICAgICAgIGNvbnN0IHZhck5hbWUgPSB0eXBlb2YgdmFyaWFibGUgPT09ICdzdHJpbmcnID8gdmFyaWFibGUgOiB2YXJpYWJsZS5uYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbnMuZ2V0KHZhck5hbWUpO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbnMuc2l6ZSA9PT0gMDtcbiAgICB9XG4gICAgZGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZpbml0aW9ucy52YWx1ZXMoKTtcbiAgICB9XG4gICAgZmlsdGVyKHZhcmlhYmxlcykge1xuICAgICAgICBpZiAodmFyaWFibGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBWYXJpYWJsZURlZmluaXRpb25zKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3RGVmcyA9IG5ldyBWYXJpYWJsZURlZmluaXRpb25zKCk7XG4gICAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdmFyaWFibGVzKSB7XG4gICAgICAgICAgICBjb25zdCBkZWYgPSB0aGlzLmRlZmluaXRpb24odmFyaWFibGUpO1xuICAgICAgICAgICAgaWYgKCFkZWYpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIHZhcmlhYmxlICR7dmFyaWFibGV9IGluIGRlZmluaXRpb25zICR7dGhpc31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0RlZnMuYWRkKGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RlZnM7XG4gICAgfVxuICAgIHRvVmFyaWFibGVEZWZpbml0aW9uTm9kZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWZpbml0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluaXRpb25zKCkubWFwKGRlZiA9PiBkZWYudG9WYXJpYWJsZURlZmluaXRpb25Ob2RlKCkpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcoJyArIHRoaXMuZGVmaW5pdGlvbnMoKS5qb2luKCcsICcpICsgJyknO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFyaWFibGVEZWZpbml0aW9ucyA9IFZhcmlhYmxlRGVmaW5pdGlvbnM7XG5mdW5jdGlvbiB2YXJpYWJsZURlZmluaXRpb25zRnJvbUFTVChzY2hlbWEsIGRlZmluaXRpb25Ob2Rlcykge1xuICAgIGNvbnN0IGRlZmluaXRpb25zID0gbmV3IFZhcmlhYmxlRGVmaW5pdGlvbnMoKTtcbiAgICBmb3IgKGNvbnN0IGRlZmluaXRpb25Ob2RlIG9mIGRlZmluaXRpb25Ob2Rlcykge1xuICAgICAgICBpZiAoIWRlZmluaXRpb25zLmFkZCh2YXJpYWJsZURlZmluaXRpb25Gcm9tQVNUKHNjaGVtYSwgZGVmaW5pdGlvbk5vZGUpKSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGRlZmluaXRpb25Ob2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBEdXBsaWNhdGUgZGVmaW5pdGlvbiBmb3IgdmFyaWFibGUgJHtuYW1lfWAsIHsgbm9kZXM6IGRlZmluaXRpb25Ob2Rlcy5maWx0ZXIobiA9PiBuLnZhcmlhYmxlLm5hbWUudmFsdWUgPT09IG5hbWUpIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWZpbml0aW9ucztcbn1cbmV4cG9ydHMudmFyaWFibGVEZWZpbml0aW9uc0Zyb21BU1QgPSB2YXJpYWJsZURlZmluaXRpb25zRnJvbUFTVDtcbmZ1bmN0aW9uIHZhcmlhYmxlRGVmaW5pdGlvbkZyb21BU1Qoc2NoZW1hLCBkZWZpbml0aW9uTm9kZSkge1xuICAgIGNvbnN0IHZhcmlhYmxlID0gbmV3IFZhcmlhYmxlKGRlZmluaXRpb25Ob2RlLnZhcmlhYmxlLm5hbWUudmFsdWUpO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIGRlZmluaXRpb25Ob2RlLnR5cGUpO1xuICAgIGlmICghaXNJbnB1dFR5cGUodHlwZSkpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCB0eXBlIFwiJHt0eXBlfVwiIGZvciB2YXJpYWJsZSAkJHt2YXJpYWJsZX06IG5vdCBhbiBpbnB1dCB0eXBlYCwgeyBub2RlczogZGVmaW5pdGlvbk5vZGUudHlwZSB9KTtcbiAgICB9XG4gICAgY29uc3QgZGVmID0gbmV3IFZhcmlhYmxlRGVmaW5pdGlvbihzY2hlbWEsIHZhcmlhYmxlLCB0eXBlLCBkZWZpbml0aW9uTm9kZS5kZWZhdWx0VmFsdWUgPyAoMCwgdmFsdWVzXzEudmFsdWVGcm9tQVNUKShkZWZpbml0aW9uTm9kZS5kZWZhdWx0VmFsdWUsIHR5cGUpIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gZGVmO1xufVxuZXhwb3J0cy52YXJpYWJsZURlZmluaXRpb25Gcm9tQVNUID0gdmFyaWFibGVEZWZpbml0aW9uRnJvbUFTVDtcbmZ1bmN0aW9uIGFkZFJlZmVyZW5jZVRvVHlwZShyZWZlcmVuY2VyLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnTGlzdFR5cGUnOlxuICAgICAgICAgICAgYWRkUmVmZXJlbmNlVG9UeXBlKHJlZmVyZW5jZXIsIHR5cGUuYmFzZVR5cGUoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTm9uTnVsbFR5cGUnOlxuICAgICAgICAgICAgYWRkUmVmZXJlbmNlVG9UeXBlKHJlZmVyZW5jZXIsIHR5cGUuYmFzZVR5cGUoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIEJhc2VOYW1lZFR5cGUucHJvdG90eXBlWydhZGRSZWZlcmVuY2VyJ10uY2FsbCh0eXBlLCByZWZlcmVuY2VyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZVJlZmVyZW5jZVRvVHlwZShyZWZlcmVuY2VyLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnTGlzdFR5cGUnOlxuICAgICAgICAgICAgcmVtb3ZlUmVmZXJlbmNlVG9UeXBlKHJlZmVyZW5jZXIsIHR5cGUuYmFzZVR5cGUoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTm9uTnVsbFR5cGUnOlxuICAgICAgICAgICAgcmVtb3ZlUmVmZXJlbmNlVG9UeXBlKHJlZmVyZW5jZXIsIHR5cGUuYmFzZVR5cGUoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIEJhc2VOYW1lZFR5cGUucHJvdG90eXBlWydyZW1vdmVSZWZlcmVuY2VyJ10uY2FsbCh0eXBlLCByZWZlcmVuY2VyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5ld05hbWVkVHlwZShraW5kLCBuYW1lKSB7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgJ1NjYWxhclR5cGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJUeXBlKG5hbWUpO1xuICAgICAgICBjYXNlICdPYmplY3RUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2JqZWN0VHlwZShuYW1lKTtcbiAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGVyZmFjZVR5cGUobmFtZSk7XG4gICAgICAgIGNhc2UgJ1VuaW9uVHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuaW9uVHlwZShuYW1lKTtcbiAgICAgICAgY2FzZSAnRW51bVR5cGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbnVtVHlwZShuYW1lKTtcbiAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5wdXRPYmplY3RUeXBlKG5hbWUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmYWxzZSwgYFVuaGFuZGxlZCBraW5kICR7a2luZH0gZm9yIHR5cGUgJHtuYW1lfWApO1xuICAgIH1cbn1cbmV4cG9ydHMubmV3TmFtZWRUeXBlID0gbmV3TmFtZWRUeXBlO1xuZnVuY3Rpb24qIHR5cGVzVG9Db3B5KHNvdXJjZSwgZGVzdCkge1xuICAgIHZhciBfYTtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2Ygc291cmNlLmJ1aWx0SW5UeXBlcygpKSB7XG4gICAgICAgIGlmICghdHlwZS5pc0ludHJvc3BlY3Rpb25UeXBlKCkgJiYgISgoX2EgPSBkZXN0LnR5cGUodHlwZS5uYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzQnVpbHRJbikpIHtcbiAgICAgICAgICAgIHlpZWxkIHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgeWllbGQqIHNvdXJjZS50eXBlcygpO1xufVxuZnVuY3Rpb24qIGRpcmVjdGl2ZXNUb0NvcHkoc291cmNlLCBkZXN0KSB7XG4gICAgdmFyIF9hO1xuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHNvdXJjZS5idWlsdEluRGlyZWN0aXZlcygpKSB7XG4gICAgICAgIGlmICghKChfYSA9IGRlc3QuZGlyZWN0aXZlKGRpcmVjdGl2ZS5uYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzQnVpbHRJbikpIHtcbiAgICAgICAgICAgIHlpZWxkIGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB5aWVsZCogc291cmNlLmRpcmVjdGl2ZXMoKTtcbn1cbmZ1bmN0aW9uIGNvcHlEaXJlY3RpdmVEZWZpbml0aW9uVG9TY2hlbWEoeyBkZWZpbml0aW9uLCBzY2hlbWEsIGNvcHlEaXJlY3RpdmVBcHBsaWNhdGlvbnNJbkFyZ3VtZW50cyA9IHRydWUsIGxvY2F0aW9uRmlsdGVyLCB9KSB7XG4gICAgY29weURpcmVjdGl2ZURlZmluaXRpb25Jbm5lcihkZWZpbml0aW9uLCBzY2hlbWEuYWRkRGlyZWN0aXZlRGVmaW5pdGlvbihkZWZpbml0aW9uLm5hbWUpLCBjb3B5RGlyZWN0aXZlQXBwbGljYXRpb25zSW5Bcmd1bWVudHMsIGxvY2F0aW9uRmlsdGVyKTtcbn1cbmV4cG9ydHMuY29weURpcmVjdGl2ZURlZmluaXRpb25Ub1NjaGVtYSA9IGNvcHlEaXJlY3RpdmVEZWZpbml0aW9uVG9TY2hlbWE7XG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdCkge1xuICAgIGZvciAoY29uc3QgdHlwZSBvZiB0eXBlc1RvQ29weShzb3VyY2UsIGRlc3QpKSB7XG4gICAgICAgIGRlc3QuYWRkVHlwZShuZXdOYW1lZFR5cGUodHlwZS5raW5kLCB0eXBlLm5hbWUpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZGlyZWN0aXZlc1RvQ29weShzb3VyY2UsIGRlc3QpKSB7XG4gICAgICAgIGRlc3QuYWRkRGlyZWN0aXZlRGVmaW5pdGlvbihkaXJlY3RpdmUubmFtZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGRpcmVjdGl2ZXNUb0NvcHkoc291cmNlLCBkZXN0KSkge1xuICAgICAgICBjb3B5RGlyZWN0aXZlRGVmaW5pdGlvbklubmVyKGRpcmVjdGl2ZSwgZGVzdC5kaXJlY3RpdmUoZGlyZWN0aXZlLm5hbWUpKTtcbiAgICB9XG4gICAgY29weVNjaGVtYURlZmluaXRpb25Jbm5lcihzb3VyY2Uuc2NoZW1hRGVmaW5pdGlvbiwgZGVzdC5zY2hlbWFEZWZpbml0aW9uKTtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXNUb0NvcHkoc291cmNlLCBkZXN0KSkge1xuICAgICAgICBjb3B5TmFtZWRUeXBlSW5uZXIodHlwZSwgZGVzdC50eXBlKHR5cGUubmFtZSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvcHlFeHRlbnNpb25zKHNvdXJjZSwgZGVzdCkge1xuICAgIGNvbnN0IGV4dGVuc2lvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHNvdXJjZUV4dGVuc2lvbiBvZiBzb3VyY2UuZXh0ZW5zaW9ucygpKSB7XG4gICAgICAgIGNvbnN0IGRlc3RFeHRlbnNpb24gPSBuZXcgRXh0ZW5zaW9uKCk7XG4gICAgICAgIGRlc3QuYWRkRXh0ZW5zaW9uKGRlc3RFeHRlbnNpb24pO1xuICAgICAgICBleHRlbnNpb25NYXAuc2V0KHNvdXJjZUV4dGVuc2lvbiwgZGVzdEV4dGVuc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBleHRlbnNpb25NYXA7XG59XG5mdW5jdGlvbiBjb3B5T2ZFeHRlbnNpb24oZXh0ZW5zaW9uc01hcCwgc291cmNlLCBkZXN0KSB7XG4gICAgY29uc3QgdG9Db3B5ID0gc291cmNlLm9mRXh0ZW5zaW9uKCk7XG4gICAgaWYgKHRvQ29weSkge1xuICAgICAgICBkZXN0LnNldE9mRXh0ZW5zaW9uKGV4dGVuc2lvbnNNYXAuZ2V0KHRvQ29weSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvcHlTY2hlbWFEZWZpbml0aW9uSW5uZXIoc291cmNlLCBkZXN0KSB7XG4gICAgZGVzdC5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbiA9IHNvdXJjZS5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbjtcbiAgICBjb25zdCBleHRlbnNpb25zTWFwID0gY29weUV4dGVuc2lvbnMoc291cmNlLCBkZXN0KTtcbiAgICBmb3IgKGNvbnN0IHJvb3RUeXBlIG9mIHNvdXJjZS5yb290cygpKSB7XG4gICAgICAgIGNvcHlPZkV4dGVuc2lvbihleHRlbnNpb25zTWFwLCByb290VHlwZSwgZGVzdC5zZXRSb290KHJvb3RUeXBlLnJvb3RLaW5kLCByb290VHlwZS50eXBlLm5hbWUpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2Ygc291cmNlLmFwcGxpZWREaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvcHlPZkV4dGVuc2lvbihleHRlbnNpb25zTWFwLCBkaXJlY3RpdmUsIGNvcHlBcHBsaWVkRGlyZWN0aXZlKGRpcmVjdGl2ZSwgZGVzdCkpO1xuICAgIH1cbiAgICBkZXN0LmRlc2NyaXB0aW9uID0gc291cmNlLmRlc2NyaXB0aW9uO1xuICAgIGRlc3Quc291cmNlQVNUID0gc291cmNlLnNvdXJjZUFTVDtcbn1cbmZ1bmN0aW9uIGNvcHlOYW1lZFR5cGVJbm5lcihzb3VyY2UsIGRlc3QpIHtcbiAgICBkZXN0LnByZXNlcnZlRW1wdHlEZWZpbml0aW9uID0gc291cmNlLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uO1xuICAgIGNvbnN0IGV4dGVuc2lvbnNNYXAgPSBjb3B5RXh0ZW5zaW9ucyhzb3VyY2UsIGRlc3QpO1xuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHNvdXJjZS5hcHBsaWVkRGlyZWN0aXZlcykge1xuICAgICAgICBjb3B5T2ZFeHRlbnNpb24oZXh0ZW5zaW9uc01hcCwgZGlyZWN0aXZlLCBjb3B5QXBwbGllZERpcmVjdGl2ZShkaXJlY3RpdmUsIGRlc3QpKTtcbiAgICB9XG4gICAgZGVzdC5kZXNjcmlwdGlvbiA9IHNvdXJjZS5kZXNjcmlwdGlvbjtcbiAgICBkZXN0LnNvdXJjZUFTVCA9IHNvdXJjZS5zb3VyY2VBU1Q7XG4gICAgc3dpdGNoIChzb3VyY2Uua2luZCkge1xuICAgICAgICBjYXNlICdPYmplY3RUeXBlJzpcbiAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICBjb25zdCBkZXN0RmllbGRCYXNlZFR5cGUgPSBkZXN0O1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb3VyY2VGaWVsZCBvZiBzb3VyY2UuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0RmllbGQgPSBkZXN0RmllbGRCYXNlZFR5cGUuYWRkRmllbGQobmV3IEZpZWxkRGVmaW5pdGlvbihzb3VyY2VGaWVsZC5uYW1lKSk7XG4gICAgICAgICAgICAgICAgY29weU9mRXh0ZW5zaW9uKGV4dGVuc2lvbnNNYXAsIHNvdXJjZUZpZWxkLCBkZXN0RmllbGQpO1xuICAgICAgICAgICAgICAgIGNvcHlGaWVsZERlZmluaXRpb25Jbm5lcihzb3VyY2VGaWVsZCwgZGVzdEZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlSW1wbCBvZiBzb3VyY2UuaW50ZXJmYWNlSW1wbGVtZW50YXRpb25zKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0SW1wbCA9IGRlc3RGaWVsZEJhc2VkVHlwZS5hZGRJbXBsZW1lbnRlZEludGVyZmFjZShzb3VyY2VJbXBsLmludGVyZmFjZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBjb3B5T2ZFeHRlbnNpb24oZXh0ZW5zaW9uc01hcCwgc291cmNlSW1wbCwgZGVzdEltcGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1VuaW9uVHlwZSc6XG4gICAgICAgICAgICBjb25zdCBkZXN0VW5pb25UeXBlID0gZGVzdDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlVHlwZSBvZiBzb3VyY2UubWVtYmVycygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdFR5cGUgPSBkZXN0VW5pb25UeXBlLmFkZFR5cGUoc291cmNlVHlwZS50eXBlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvcHlPZkV4dGVuc2lvbihleHRlbnNpb25zTWFwLCBzb3VyY2VUeXBlLCBkZXN0VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRW51bVR5cGUnOlxuICAgICAgICAgICAgY29uc3QgZGVzdEVudW1UeXBlID0gZGVzdDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlVmFsdWUgb2Ygc291cmNlLnZhbHVlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RWYWx1ZSA9IGRlc3RFbnVtVHlwZS5hZGRWYWx1ZShzb3VyY2VWYWx1ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBkZXN0VmFsdWUuZGVzY3JpcHRpb24gPSBzb3VyY2VWYWx1ZS5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICBjb3B5T2ZFeHRlbnNpb24oZXh0ZW5zaW9uc01hcCwgc291cmNlVmFsdWUsIGRlc3RWYWx1ZSk7XG4gICAgICAgICAgICAgICAgY29weUFwcGxpZWREaXJlY3RpdmVzKHNvdXJjZVZhbHVlLCBkZXN0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0lucHV0T2JqZWN0VHlwZSc6XG4gICAgICAgICAgICBjb25zdCBkZXN0SW5wdXRUeXBlID0gZGVzdDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlRmllbGQgb2Ygc291cmNlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdEZpZWxkID0gZGVzdElucHV0VHlwZS5hZGRGaWVsZChuZXcgSW5wdXRGaWVsZERlZmluaXRpb24oc291cmNlRmllbGQubmFtZSkpO1xuICAgICAgICAgICAgICAgIGNvcHlPZkV4dGVuc2lvbihleHRlbnNpb25zTWFwLCBzb3VyY2VGaWVsZCwgZGVzdEZpZWxkKTtcbiAgICAgICAgICAgICAgICBjb3B5SW5wdXRGaWVsZERlZmluaXRpb25Jbm5lcihzb3VyY2VGaWVsZCwgZGVzdEZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjb3B5QXBwbGllZERpcmVjdGl2ZXMoc291cmNlLCBkZXN0KSB7XG4gICAgc291cmNlLmFwcGxpZWREaXJlY3RpdmVzLmZvckVhY2goKGQpID0+IGNvcHlBcHBsaWVkRGlyZWN0aXZlKGQsIGRlc3QpKTtcbn1cbmZ1bmN0aW9uIGNvcHlBcHBsaWVkRGlyZWN0aXZlKHNvdXJjZSwgZGVzdCkge1xuICAgIGNvbnN0IHJlcyA9IGRlc3QuYXBwbHlEaXJlY3RpdmUoc291cmNlLm5hbWUsIHsgLi4uc291cmNlLmFyZ3VtZW50cygpIH0pO1xuICAgIHJlcy5zb3VyY2VBU1QgPSBzb3VyY2Uuc291cmNlQVNUO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjb3B5RmllbGREZWZpbml0aW9uSW5uZXIoc291cmNlLCBkZXN0KSB7XG4gICAgY29uc3QgdHlwZSA9IGNvcHlXcmFwcGVyVHlwZU9yVHlwZVJlZihzb3VyY2UudHlwZSwgZGVzdC5zY2hlbWEoKSk7XG4gICAgZGVzdC50eXBlID0gdHlwZTtcbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBzb3VyY2UuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgY29uc3QgYXJnVHlwZSA9IGNvcHlXcmFwcGVyVHlwZU9yVHlwZVJlZihhcmcudHlwZSwgZGVzdC5zY2hlbWEoKSk7XG4gICAgICAgIGNvcHlBcmd1bWVudERlZmluaXRpb25Jbm5lcihhcmcsIGRlc3QuYWRkQXJndW1lbnQoYXJnLm5hbWUsIGFyZ1R5cGUpKTtcbiAgICB9XG4gICAgY29weUFwcGxpZWREaXJlY3RpdmVzKHNvdXJjZSwgZGVzdCk7XG4gICAgZGVzdC5kZXNjcmlwdGlvbiA9IHNvdXJjZS5kZXNjcmlwdGlvbjtcbiAgICBkZXN0LnNvdXJjZUFTVCA9IHNvdXJjZS5zb3VyY2VBU1Q7XG59XG5mdW5jdGlvbiBjb3B5SW5wdXRGaWVsZERlZmluaXRpb25Jbm5lcihzb3VyY2UsIGRlc3QpIHtcbiAgICBjb25zdCB0eXBlID0gY29weVdyYXBwZXJUeXBlT3JUeXBlUmVmKHNvdXJjZS50eXBlLCBkZXN0LnNjaGVtYSgpKTtcbiAgICBkZXN0LnR5cGUgPSB0eXBlO1xuICAgIGRlc3QuZGVmYXVsdFZhbHVlID0gc291cmNlLmRlZmF1bHRWYWx1ZTtcbiAgICBjb3B5QXBwbGllZERpcmVjdGl2ZXMoc291cmNlLCBkZXN0KTtcbiAgICBkZXN0LmRlc2NyaXB0aW9uID0gc291cmNlLmRlc2NyaXB0aW9uO1xuICAgIGRlc3Quc291cmNlQVNUID0gc291cmNlLnNvdXJjZUFTVDtcbn1cbmZ1bmN0aW9uIGNvcHlXcmFwcGVyVHlwZU9yVHlwZVJlZihzb3VyY2UsIGRlc3RQYXJlbnQpIHtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzd2l0Y2ggKHNvdXJjZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0xpc3RUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlzdFR5cGUoY29weVdyYXBwZXJUeXBlT3JUeXBlUmVmKHNvdXJjZS5vZlR5cGUsIGRlc3RQYXJlbnQpKTtcbiAgICAgICAgY2FzZSAnTm9uTnVsbFR5cGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb25OdWxsVHlwZShjb3B5V3JhcHBlclR5cGVPclR5cGVSZWYoc291cmNlLm9mVHlwZSwgZGVzdFBhcmVudCkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGRlc3RQYXJlbnQudHlwZShzb3VyY2UubmFtZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29weUFyZ3VtZW50RGVmaW5pdGlvbklubmVyKHNvdXJjZSwgZGVzdCwgY29weURpcmVjdGl2ZUFwcGxpY2F0aW9ucyA9IHRydWUpIHtcbiAgICBjb25zdCB0eXBlID0gY29weVdyYXBwZXJUeXBlT3JUeXBlUmVmKHNvdXJjZS50eXBlLCBkZXN0LnNjaGVtYSgpKTtcbiAgICBkZXN0LnR5cGUgPSB0eXBlO1xuICAgIGRlc3QuZGVmYXVsdFZhbHVlID0gc291cmNlLmRlZmF1bHRWYWx1ZTtcbiAgICBpZiAoY29weURpcmVjdGl2ZUFwcGxpY2F0aW9ucykge1xuICAgICAgICBjb3B5QXBwbGllZERpcmVjdGl2ZXMoc291cmNlLCBkZXN0KTtcbiAgICB9XG4gICAgZGVzdC5kZXNjcmlwdGlvbiA9IHNvdXJjZS5kZXNjcmlwdGlvbjtcbiAgICBkZXN0LnNvdXJjZUFTVCA9IHNvdXJjZS5zb3VyY2VBU1Q7XG59XG5mdW5jdGlvbiBjb3B5RGlyZWN0aXZlRGVmaW5pdGlvbklubmVyKHNvdXJjZSwgZGVzdCwgY29weURpcmVjdGl2ZUFwcGxpY2F0aW9uc0luQXJndW1lbnRzID0gdHJ1ZSwgbG9jYXRpb25GaWx0ZXIpIHtcbiAgICBsZXQgbG9jYXRpb25zID0gc291cmNlLmxvY2F0aW9ucztcbiAgICBpZiAobG9jYXRpb25GaWx0ZXIpIHtcbiAgICAgICAgbG9jYXRpb25zID0gbG9jYXRpb25zLmZpbHRlcigobG9jKSA9PiBsb2NhdGlvbkZpbHRlcihsb2MpKTtcbiAgICB9XG4gICAgaWYgKGxvY2F0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBzb3VyY2UuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNvcHlXcmFwcGVyVHlwZU9yVHlwZVJlZihhcmcudHlwZSwgZGVzdC5zY2hlbWEoKSk7XG4gICAgICAgIGNvcHlBcmd1bWVudERlZmluaXRpb25Jbm5lcihhcmcsIGRlc3QuYWRkQXJndW1lbnQoYXJnLm5hbWUsIHR5cGUpLCBjb3B5RGlyZWN0aXZlQXBwbGljYXRpb25zSW5Bcmd1bWVudHMpO1xuICAgIH1cbiAgICBkZXN0LnJlcGVhdGFibGUgPSBzb3VyY2UucmVwZWF0YWJsZTtcbiAgICBkZXN0LmFkZExvY2F0aW9ucyguLi5sb2NhdGlvbnMpO1xuICAgIGRlc3Quc291cmNlQVNUID0gc291cmNlLnNvdXJjZUFTVDtcbiAgICBkZXN0LmRlc2NyaXB0aW9uID0gc291cmNlLmRlc2NyaXB0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmaW5pdGlvbnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUVudW1UeXBlU3BlY2lmaWNhdGlvbiA9IGV4cG9ydHMuY3JlYXRlVW5pb25UeXBlU3BlY2lmaWNhdGlvbiA9IGV4cG9ydHMuY3JlYXRlT2JqZWN0VHlwZVNwZWNpZmljYXRpb24gPSBleHBvcnRzLmNyZWF0ZVNjYWxhclR5cGVTcGVjaWZpY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uID0gdm9pZCAwO1xuY29uc3QgZGVmaW5pdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgdmFsdWVzXzEgPSByZXF1aXJlKFwiLi92YWx1ZXNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBjcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKHsgbmFtZSwgbG9jYXRpb25zLCByZXBlYXRhYmxlID0gZmFsc2UsIGFyZ3VtZW50RmN0ID0gdW5kZWZpbmVkLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgY2hlY2tPckFkZDogKHNjaGVtYSwgbmFtZUluU2NoZW1hLCBhc0J1aWx0SW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbE5hbWUgPSBuYW1lSW5TY2hlbWEgIT09IG51bGwgJiYgbmFtZUluU2NoZW1hICE9PSB2b2lkIDAgPyBuYW1lSW5TY2hlbWEgOiBuYW1lO1xuICAgICAgICAgICAgY29uc3QgeyBhcmdzLCBlcnJvcnMgfSA9IGFyZ3VtZW50RmN0ID8gYXJndW1lbnRGY3Qoc2NoZW1hLCBhY3R1YWxOYW1lKSA6IHsgYXJnczogW10sIGVycm9yczogW10gfTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHNjaGVtYS5kaXJlY3RpdmUoYWN0dWFsTmFtZSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5zdXJlU2FtZURpcmVjdGl2ZVN0cnVjdHVyZSh7IG5hbWU6IGFjdHVhbE5hbWUsIGxvY2F0aW9ucywgcmVwZWF0YWJsZSwgYXJncyB9LCBleGlzdGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSBzY2hlbWEuYWRkRGlyZWN0aXZlRGVmaW5pdGlvbihuZXcgZGVmaW5pdGlvbnNfMS5EaXJlY3RpdmVEZWZpbml0aW9uKGFjdHVhbE5hbWUsIGFzQnVpbHRJbikpO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXBlYXRhYmxlID0gcmVwZWF0YWJsZTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuYWRkTG9jYXRpb25zKC4uLmxvY2F0aW9ucyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSB9IG9mIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmFkZEFyZ3VtZW50KG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uID0gY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbjtcbmZ1bmN0aW9uIGNyZWF0ZVNjYWxhclR5cGVTcGVjaWZpY2F0aW9uKHsgbmFtZSB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgY2hlY2tPckFkZDogKHNjaGVtYSwgbmFtZUluU2NoZW1hLCBhc0J1aWx0SW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbE5hbWUgPSBuYW1lSW5TY2hlbWEgIT09IG51bGwgJiYgbmFtZUluU2NoZW1hICE9PSB2b2lkIDAgPyBuYW1lSW5TY2hlbWEgOiBuYW1lO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBzY2hlbWEudHlwZShhY3R1YWxOYW1lKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnN1cmVTYW1lVHlwZUtpbmQoJ1NjYWxhclR5cGUnLCBleGlzdGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5TY2FsYXJUeXBlKGFjdHVhbE5hbWUsIGFzQnVpbHRJbikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVTY2FsYXJUeXBlU3BlY2lmaWNhdGlvbiA9IGNyZWF0ZVNjYWxhclR5cGVTcGVjaWZpY2F0aW9uO1xuZnVuY3Rpb24gY3JlYXRlT2JqZWN0VHlwZVNwZWNpZmljYXRpb24oeyBuYW1lLCBmaWVsZHNGY3QsIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBjaGVja09yQWRkOiAoc2NoZW1hLCBuYW1lSW5TY2hlbWEsIGFzQnVpbHRJbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsTmFtZSA9IG5hbWVJblNjaGVtYSAhPT0gbnVsbCAmJiBuYW1lSW5TY2hlbWEgIT09IHZvaWQgMCA/IG5hbWVJblNjaGVtYSA6IG5hbWU7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZpZWxkcyA9IGZpZWxkc0ZjdChzY2hlbWEpO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBzY2hlbWEudHlwZShhY3R1YWxOYW1lKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBlbnN1cmVTYW1lVHlwZUtpbmQoJ09iamVjdFR5cGUnLCBleGlzdGluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKShleGlzdGluZyksICdTaG91bGQgYmUgYW4gb2JqZWN0IHR5cGUnKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdHlwZSwgYXJncyB9IG9mIGV4cGVjdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nRmllbGQgPSBleGlzdGluZy5maWVsZChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGVycm9yXzEuRVJST1JTLlRZUEVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIG9mIHR5cGUgJHtuYW1lfTogbWlzc2luZyBmaWVsZCAke25hbWV9YCwgeyBub2RlczogZXhpc3Rpbmcuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBleGlzdGluZ1R5cGUgPSBleGlzdGluZ0ZpZWxkLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkodHlwZSkgJiYgKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkoZXhpc3RpbmdUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdUeXBlID0gZXhpc3RpbmdUeXBlLm9mVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoISgwLCB0eXBlc18xLnNhbWVUeXBlKSh0eXBlLCBleGlzdGluZ1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGVycm9yXzEuRVJST1JTLlRZUEVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciBmaWVsZCAke25hbWV9IG9mIHR5cGUgJHtuYW1lfTogc2hvdWxkIGhhdmUgdHlwZSAke3R5cGV9IGJ1dCBmb3VuZCB0eXBlICR7ZXhpc3RpbmdGaWVsZC50eXBlfWAsIHsgbm9kZXM6IGV4aXN0aW5nRmllbGQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGVuc3VyZVNhbWVBcmd1bWVudHMoeyBuYW1lLCBhcmdzIH0sIGV4aXN0aW5nRmllbGQsIGBmaWVsZCBcIiR7ZXhpc3RpbmdGaWVsZC5jb29yZGluYXRlfVwiYCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlZFR5cGUgPSBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKGFjdHVhbE5hbWUsIGFzQnVpbHRJbikpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyBuYW1lLCB0eXBlLCBhcmdzIH0gb2YgZXhwZWN0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBjcmVhdGVkVHlwZS5hZGRGaWVsZChuYW1lLCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IG5hbWU6IGFyZ05hbWUsIHR5cGU6IGFyZ1R5cGUsIGRlZmF1bHRWYWx1ZSB9IG9mIGFyZ3MgIT09IG51bGwgJiYgYXJncyAhPT0gdm9pZCAwID8gYXJncyA6IFtdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5hZGRBcmd1bWVudChhcmdOYW1lLCBhcmdUeXBlLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVPYmplY3RUeXBlU3BlY2lmaWNhdGlvbiA9IGNyZWF0ZU9iamVjdFR5cGVTcGVjaWZpY2F0aW9uO1xuZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlU3BlY2lmaWNhdGlvbih7IG5hbWUsIG1lbWJlcnNGY3QsIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBjaGVja09yQWRkOiAoc2NoZW1hLCBuYW1lSW5TY2hlbWEsIGFzQnVpbHRJbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsTmFtZSA9IG5hbWVJblNjaGVtYSAhPT0gbnVsbCAmJiBuYW1lSW5TY2hlbWEgIT09IHZvaWQgMCA/IG5hbWVJblNjaGVtYSA6IG5hbWU7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHNjaGVtYS50eXBlKGFjdHVhbE5hbWUpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRNZW1iZXJzID0gbWVtYmVyc0ZjdChzY2hlbWEpLnNvcnQoKG4xLCBuMikgPT4gbjEubG9jYWxlQ29tcGFyZShuMikpO1xuICAgICAgICAgICAgaWYgKGV4cGVjdGVkTWVtYmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtlcnJvcl8xLkVSUk9SUy5UWVBFX0RFRklOSVRJT05fSU5WQUxJRC5lcnIoYEludmFsaWQgZGVmaW5pdGlvbiBvZiB0eXBlICR7bmFtZX06IGV4cGVjdGVkIHRoZSB1bmlvbiB0eXBlIHRvIG5vdCBleGlzdC9oYXZlIG5vIG1lbWJlcnMgYnV0IGl0IGlzIGRlZmluZWQuYCwgeyBub2RlczogZXhpc3Rpbmcuc291cmNlQVNUIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9ycyA9IGVuc3VyZVNhbWVUeXBlS2luZCgnVW5pb25UeXBlJywgZXhpc3RpbmcpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCgwLCBkZWZpbml0aW9uc18xLmlzVW5pb25UeXBlKShleGlzdGluZyksICdTaG91bGQgYmUgYW4gdW5pb24gdHlwZScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbE1lbWJlcnMgPSBleGlzdGluZy5tZW1iZXJzKCkubWFwKG0gPT4gbS50eXBlLm5hbWUpLnNvcnQoKG4xLCBuMikgPT4gbjEubG9jYWxlQ29tcGFyZShuMikpO1xuICAgICAgICAgICAgICAgIGlmICghKDAsIHV0aWxzXzEuYXJyYXlFcXVhbHMpKGV4cGVjdGVkTWVtYmVycywgYWN0dWFsTWVtYmVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChlcnJvcl8xLkVSUk9SUy5UWVBFX0RFRklOSVRJT05fSU5WQUxJRC5lcnIoYEludmFsaWQgZGVmaW5pdGlvbiBvZiB0eXBlICR7bmFtZX06IGV4cGVjdGVkIG1lbWJlcnMgWyR7ZXhwZWN0ZWRNZW1iZXJzfV0gYnV0IGZvdW5kIFske2FjdHVhbE1lbWJlcnN9XS5gLCB7IG5vZGVzOiBleGlzdGluZy5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLlVuaW9uVHlwZShhY3R1YWxOYW1lLCBhc0J1aWx0SW4pKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBleHBlY3RlZE1lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5hZGRUeXBlKG1lbWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVVbmlvblR5cGVTcGVjaWZpY2F0aW9uID0gY3JlYXRlVW5pb25UeXBlU3BlY2lmaWNhdGlvbjtcbmZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlU3BlY2lmaWNhdGlvbih7IG5hbWUsIHZhbHVlcywgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNoZWNrT3JBZGQ6IChzY2hlbWEsIG5hbWVJblNjaGVtYSwgYXNCdWlsdEluKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxOYW1lID0gbmFtZUluU2NoZW1hICE9PSBudWxsICYmIG5hbWVJblNjaGVtYSAhPT0gdm9pZCAwID8gbmFtZUluU2NoZW1hIDogbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gc2NoZW1hLnR5cGUoYWN0dWFsTmFtZSk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlTmFtZXMgPSB2YWx1ZXMubWFwKCh2KSA9PiB2Lm5hbWUpLnNvcnQoKG4xLCBuMikgPT4gbjEubG9jYWxlQ29tcGFyZShuMikpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9ycyA9IGVuc3VyZVNhbWVUeXBlS2luZCgnRW51bVR5cGUnLCBleGlzdGluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoKDAsIGRlZmluaXRpb25zXzEuaXNFbnVtVHlwZSkoZXhpc3RpbmcpLCAnU2hvdWxkIGJlIGFuIGVudW0gdHlwZScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbFZhbHVlTmFtZXMgPSBleGlzdGluZy52YWx1ZXMubWFwKHYgPT4gdi5uYW1lKS5zb3J0KChuMSwgbjIpID0+IG4xLmxvY2FsZUNvbXBhcmUobjIpKTtcbiAgICAgICAgICAgICAgICBpZiAoISgwLCB1dGlsc18xLmFycmF5RXF1YWxzKShleHBlY3RlZFZhbHVlTmFtZXMsIGFjdHVhbFZhbHVlTmFtZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZXJyb3JfMS5FUlJPUlMuVFlQRV9ERUZJTklUSU9OX0lOVkFMSUQuZXJyKGBJbnZhbGlkIGRlZmluaXRpb24gZm9yIHR5cGUgXCIke25hbWV9XCI6IGV4cGVjdGVkIHZhbHVlcyBbJHtleHBlY3RlZFZhbHVlTmFtZXMuam9pbignLCAnKX1dIGJ1dCBmb3VuZCBbJHthY3R1YWxWYWx1ZU5hbWVzLmpvaW4oJywgJyl9XS5gLCB7IG5vZGVzOiBleGlzdGluZy5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLkVudW1UeXBlKGFjdHVhbE5hbWUsIGFzQnVpbHRJbikpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiB9IG9mIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlLmFkZFZhbHVlKG5hbWUpLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVFbnVtVHlwZVNwZWNpZmljYXRpb24gPSBjcmVhdGVFbnVtVHlwZVNwZWNpZmljYXRpb247XG5mdW5jdGlvbiBlbnN1cmVTYW1lVHlwZUtpbmQoZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAgIHJldHVybiBleHBlY3RlZCA9PT0gYWN0dWFsLmtpbmRcbiAgICAgICAgPyBbXVxuICAgICAgICA6IFtcbiAgICAgICAgICAgIGVycm9yXzEuRVJST1JTLlRZUEVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciB0eXBlICR7YWN0dWFsLm5hbWV9OiAke2FjdHVhbC5uYW1lfSBzaG91bGQgYmUgYSAke2V4cGVjdGVkfSBidXQgaXMgZGVmaW5lZCBhcyBhICR7YWN0dWFsLmtpbmR9YCwgeyBub2RlczogYWN0dWFsLnNvdXJjZUFTVCB9KVxuICAgICAgICBdO1xufVxuZnVuY3Rpb24gZW5zdXJlU2FtZURpcmVjdGl2ZVN0cnVjdHVyZShleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IGBcIkAke2V4cGVjdGVkLm5hbWV9XCJgO1xuICAgIGxldCBlcnJvcnMgPSBlbnN1cmVTYW1lQXJndW1lbnRzKGV4cGVjdGVkLCBhY3R1YWwsIGBkaXJlY3RpdmUgJHtkaXJlY3RpdmVOYW1lfWApO1xuICAgIGlmICghZXhwZWN0ZWQucmVwZWF0YWJsZSAmJiBhY3R1YWwucmVwZWF0YWJsZSkge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGVycm9yXzEuRVJST1JTLkRJUkVDVElWRV9ERUZJTklUSU9OX0lOVkFMSUQuZXJyKGBJbnZhbGlkIGRlZmluaXRpb24gZm9yIGRpcmVjdGl2ZSAke2RpcmVjdGl2ZU5hbWV9OiAke2RpcmVjdGl2ZU5hbWV9IHNob3VsZCR7ZXhwZWN0ZWQucmVwZWF0YWJsZSA/IFwiXCIgOiBcIiBub3RcIn0gYmUgcmVwZWF0YWJsZWAsIHsgbm9kZXM6IGFjdHVhbC5zb3VyY2VBU1QgfSkpO1xuICAgIH1cbiAgICBpZiAoIWFjdHVhbC5sb2NhdGlvbnMuZXZlcnkobG9jID0+IGV4cGVjdGVkLmxvY2F0aW9ucy5pbmNsdWRlcyhsb2MpKSkge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGVycm9yXzEuRVJST1JTLkRJUkVDVElWRV9ERUZJTklUSU9OX0lOVkFMSUQuZXJyKGBJbnZhbGlkIGRlZmluaXRpb24gZm9yIGRpcmVjdGl2ZSAke2RpcmVjdGl2ZU5hbWV9OiAke2RpcmVjdGl2ZU5hbWV9IHNob3VsZCBoYXZlIGxvY2F0aW9ucyAke2V4cGVjdGVkLmxvY2F0aW9ucy5qb2luKCcsICcpfSwgYnV0IGZvdW5kIChub24tc3Vic2V0KSAke2FjdHVhbC5sb2NhdGlvbnMuam9pbignLCAnKX1gLCB7IG5vZGVzOiBhY3R1YWwuc291cmNlQVNUIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIGVuc3VyZVNhbWVBcmd1bWVudHMoZXhwZWN0ZWQsIGFjdHVhbCwgd2hhdCwgY29udGFpbmVyU291cmNlQVNUKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGV4cGVjdGVkQXJndW1lbnRzID0gKF9hID0gZXhwZWN0ZWQuYXJncykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgZm9yIChjb25zdCB7IG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSB9IG9mIGV4cGVjdGVkQXJndW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGFjdHVhbEFyZ3VtZW50ID0gYWN0dWFsLmFyZ3VtZW50KG5hbWUpO1xuICAgICAgICBpZiAoIWFjdHVhbEFyZ3VtZW50KSB7XG4gICAgICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkodHlwZSkgJiYgZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVJFQ1RJVkVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciAke3doYXR9OiBtaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50IFwiJHtuYW1lfVwiYCwgeyBub2RlczogY29udGFpbmVyU291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhY3R1YWxUeXBlID0gYWN0dWFsQXJndW1lbnQudHlwZTtcbiAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKGFjdHVhbFR5cGUpICYmICEoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgYWN0dWFsVHlwZSA9IGFjdHVhbFR5cGUub2ZUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKDAsIHR5cGVzXzEuc2FtZVR5cGUpKHR5cGUsIGFjdHVhbFR5cGUpICYmICFpc1ZhbGlkSW5wdXRUeXBlUmVkZWZpbml0aW9uKHR5cGUsIGFjdHVhbFR5cGUpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVJFQ1RJVkVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciAke3doYXR9OiBhcmd1bWVudCBcIiR7bmFtZX1cIiBzaG91bGQgaGF2ZSB0eXBlIFwiJHt0eXBlfVwiIGJ1dCBmb3VuZCB0eXBlIFwiJHthY3R1YWxBcmd1bWVudC50eXBlfVwiYCwgeyBub2RlczogYWN0dWFsQXJndW1lbnQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkoYWN0dWFsQXJndW1lbnQudHlwZSkgJiYgISgwLCB2YWx1ZXNfMS52YWx1ZUVxdWFscykoZGVmYXVsdFZhbHVlLCBhY3R1YWxBcmd1bWVudC5kZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVJFQ1RJVkVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciAke3doYXR9OiBhcmd1bWVudCBcIiR7bmFtZX1cIiBzaG91bGQgaGF2ZSBkZWZhdWx0IHZhbHVlICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKGRlZmF1bHRWYWx1ZSl9IGJ1dCBmb3VuZCBkZWZhdWx0IHZhbHVlICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKGFjdHVhbEFyZ3VtZW50LmRlZmF1bHRWYWx1ZSl9YCwgeyBub2RlczogYWN0dWFsQXJndW1lbnQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGFjdHVhbEFyZ3VtZW50IG9mIGFjdHVhbC5hcmd1bWVudHMoKSkge1xuICAgICAgICBpZiAoIWV4cGVjdGVkQXJndW1lbnRzLnNvbWUoKGFyZykgPT4gYXJnLm5hbWUgPT09IGFjdHVhbEFyZ3VtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVJFQ1RJVkVfREVGSU5JVElPTl9JTlZBTElELmVycihgSW52YWxpZCBkZWZpbml0aW9uIGZvciAke3doYXR9OiB1bmtub3duL3Vuc3VwcG9ydGVkIGFyZ3VtZW50IFwiJHthY3R1YWxBcmd1bWVudC5uYW1lfVwiYCwgeyBub2RlczogYWN0dWFsQXJndW1lbnQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZnVuY3Rpb24gaXNWYWxpZElucHV0VHlwZVJlZGVmaW5pdGlvbihleHBlY3RlZFR5cGUsIGFjdHVhbFR5cGUpIHtcbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNMaXN0VHlwZSkoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEuaXNMaXN0VHlwZSkoYWN0dWFsVHlwZSkgJiYgaXNWYWxpZElucHV0VHlwZVJlZGVmaW5pdGlvbihleHBlY3RlZFR5cGUub2ZUeXBlLCBhY3R1YWxUeXBlLm9mVHlwZSk7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIHJldHVybiAoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShhY3R1YWxUeXBlKSAmJiBpc1ZhbGlkSW5wdXRUeXBlUmVkZWZpbml0aW9uKGV4cGVjdGVkVHlwZS5vZlR5cGUsIGFjdHVhbFR5cGUub2ZUeXBlKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBkZWZpbml0aW9uc18xLmlzQ3VzdG9tU2NhbGFyVHlwZSkoZXhwZWN0ZWRUeXBlKSAmJiAhKDAsIGRlZmluaXRpb25zXzEuaXNDdXN0b21TY2FsYXJUeXBlKShhY3R1YWxUeXBlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SRU1PVkVEX0VSUk9SUyA9IGV4cG9ydHMuRVJST1JTID0gZXhwb3J0cy5FUlJPUl9DQVRFR09SSUVTID0gZXhwb3J0cy53aXRoTW9kaWZpZWRFcnJvck5vZGVzID0gZXhwb3J0cy53aXRoTW9kaWZpZWRFcnJvck1lc3NhZ2UgPSBleHBvcnRzLmVycm9yQ29kZURlZiA9IGV4cG9ydHMuZXJyb3JDb2RlID0gZXhwb3J0cy5wcmludEVycm9ycyA9IGV4cG9ydHMucHJpbnRHcmFwaFFMRXJyb3JzT3JSZXRocm93ID0gZXhwb3J0cy5lcnJvckNhdXNlcyA9IGV4cG9ydHMuYWdncmVnYXRlRXJyb3IgPSBleHBvcnRzLmV4dHJhY3RHcmFwaFFMRXJyb3JPcHRpb25zID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBGRUQxX0NPREUgPSAnMC54JztcbmNvbnN0IG1ha2VDb2RlRGVmaW5pdGlvbiA9IChjb2RlLCBkZXNjcmlwdGlvbiwgbWV0YWRhdGEgPSBERUZBVUxUX01FVEFEQVRBKSA9PiAoe1xuICAgIGNvZGUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgbWV0YWRhdGEsXG4gICAgZXJyOiAobWVzc2FnZSwgb3B0aW9ucykgPT4gbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IobWVzc2FnZSwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAuLi5vcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgIH1cbiAgICB9KSxcbn0pO1xuZnVuY3Rpb24gZXh0cmFjdEdyYXBoUUxFcnJvck9wdGlvbnMoZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGVzOiBlLm5vZGVzLFxuICAgICAgICBzb3VyY2U6IGUuc291cmNlLFxuICAgICAgICBwb3NpdGlvbnM6IGUucG9zaXRpb25zLFxuICAgICAgICBwYXRoOiBlLnBhdGgsXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IGUub3JpZ2luYWxFcnJvcixcbiAgICAgICAgZXh0ZW5zaW9uczogZS5leHRlbnNpb25zLFxuICAgIH07XG59XG5leHBvcnRzLmV4dHJhY3RHcmFwaFFMRXJyb3JPcHRpb25zID0gZXh0cmFjdEdyYXBoUUxFcnJvck9wdGlvbnM7XG5jbGFzcyBBZ2dyZWdhdGVHcmFwaFFMRXJyb3IgZXh0ZW5kcyBncmFwaHFsXzEuR3JhcGhRTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlLCBjYXVzZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSArICcuIENhdXNlZCBieTpcXG4nICsgY2F1c2VzLm1hcCgoYykgPT4gYy50b1N0cmluZygpKS5qb2luKCdcXG5cXG4nKSwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgY29kZSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYXVzZXMgPSBjYXVzZXM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgb3V0cHV0ID0gYFske3RoaXMuZXh0ZW5zaW9ucy5jb2RlfV0gJHtzdXBlci50b1N0cmluZygpfWA7XG4gICAgICAgIG91dHB1dCArPSBcIlxcbmNhdXNlZCBieTpcIjtcbiAgICAgICAgZm9yIChjb25zdCBjYXVzZSBvZiB0aGlzLmNhdXNlcykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IFwiXFxuXFxuICAtIFwiO1xuICAgICAgICAgICAgb3V0cHV0ICs9IGNhdXNlLnRvU3RyaW5nKCkuc3BsaXQoXCJcXG5cIikuam9pbihcIlxcbiAgICBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBhZ2dyZWdhdGVFcnJvcihjb2RlLCBtZXNzYWdlLCBjYXVzZXMpIHtcbiAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZUdyYXBoUUxFcnJvcihjb2RlLCBtZXNzYWdlLCBjYXVzZXMpO1xufVxuZXhwb3J0cy5hZ2dyZWdhdGVFcnJvciA9IGFnZ3JlZ2F0ZUVycm9yO1xuZnVuY3Rpb24gZXJyb3JDYXVzZXMoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgQWdncmVnYXRlR3JhcGhRTEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlLmNhdXNlcztcbiAgICB9XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yKSB7XG4gICAgICAgIHJldHVybiBbZV07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmVycm9yQ2F1c2VzID0gZXJyb3JDYXVzZXM7XG5mdW5jdGlvbiBwcmludEdyYXBoUUxFcnJvcnNPclJldGhyb3coZSkge1xuICAgIGNvbnN0IGNhdXNlcyA9IGVycm9yQ2F1c2VzKGUpO1xuICAgIGlmICghY2F1c2VzKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIHJldHVybiBjYXVzZXMubWFwKGUgPT4gZS50b1N0cmluZygpKS5qb2luKCdcXG5cXG4nKTtcbn1cbmV4cG9ydHMucHJpbnRHcmFwaFFMRXJyb3JzT3JSZXRocm93ID0gcHJpbnRHcmFwaFFMRXJyb3JzT3JSZXRocm93O1xuZnVuY3Rpb24gcHJpbnRFcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5tYXAoZSA9PiBlLnRvU3RyaW5nKCkpLmpvaW4oJ1xcblxcbicpO1xufVxuZXhwb3J0cy5wcmludEVycm9ycyA9IHByaW50RXJyb3JzO1xuY29uc3QgREVGQVVMVF9NRVRBREFUQSA9IHsgYWRkZWRJbjogJzIuMC4wJyB9O1xuY29uc3QgbWFrZUVycm9yQ29kZUNhdGVnb3J5ID0gKGV4dHJhY3RDb2RlLCBtYWtlRGVzY3JpcHRpb24sIG1ldGFkYXRhID0gREVGQVVMVF9NRVRBREFUQSkgPT4gKHtcbiAgICBjcmVhdGVDb2RlOiAoZWxlbWVudCkgPT4ge1xuICAgICAgICByZXR1cm4gbWFrZUNvZGVEZWZpbml0aW9uKGV4dHJhY3RDb2RlKGVsZW1lbnQpLCBtYWtlRGVzY3JpcHRpb24oZWxlbWVudCksIG1ldGFkYXRhKTtcbiAgICB9LFxuICAgIGdldDogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgZGVmID0gY29kZURlZkJ5Q29kZVtleHRyYWN0Q29kZShlbGVtZW50KV07XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGVmLCBgVW5leHBlY3RlZCBlbGVtZW50OiAke2VsZW1lbnR9YCk7XG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgfVxufSk7XG5jb25zdCBtYWtlRmVkZXJhdGlvbkRpcmVjdGl2ZUVycm9yQ29kZUNhdGVnb3J5ID0gKGNvZGVTdWZmaXgsIG1ha2VEZXNjcmlwdGlvbiwgbWV0YWRhdGEgPSBERUZBVUxUX01FVEFEQVRBKSA9PiBtYWtlRXJyb3JDb2RlQ2F0ZWdvcnkoKGRpcmVjdGl2ZSkgPT4gYCR7ZGlyZWN0aXZlLnRvTG9jYWxlVXBwZXJDYXNlKCl9XyR7Y29kZVN1ZmZpeH1gLCBtYWtlRGVzY3JpcHRpb24sIG1ldGFkYXRhKTtcbmZ1bmN0aW9uIGVycm9yQ29kZShlKSB7XG4gICAgaWYgKCFlLmV4dGVuc2lvbnMgfHwgISgnY29kZScgaW4gZS5leHRlbnNpb25zKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gZS5leHRlbnNpb25zLmNvZGU7XG59XG5leHBvcnRzLmVycm9yQ29kZSA9IGVycm9yQ29kZTtcbmZ1bmN0aW9uIGVycm9yQ29kZURlZihlKSB7XG4gICAgY29uc3QgY29kZSA9IHR5cGVvZiBlID09PSAnc3RyaW5nJyA/IGUgOiBlcnJvckNvZGUoZSk7XG4gICAgcmV0dXJuIGNvZGUgPyBjb2RlRGVmQnlDb2RlW2NvZGVdIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5lcnJvckNvZGVEZWYgPSBlcnJvckNvZGVEZWY7XG5mdW5jdGlvbiB3aXRoTW9kaWZpZWRFcnJvck1lc3NhZ2UoZSwgbmV3TWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxFcnJvcihuZXdNZXNzYWdlLCB7XG4gICAgICAgIG5vZGVzOiBlLm5vZGVzLFxuICAgICAgICBzb3VyY2U6IGUuc291cmNlLFxuICAgICAgICBwb3NpdGlvbnM6IGUucG9zaXRpb25zLFxuICAgICAgICBwYXRoOiBlLnBhdGgsXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IGUub3JpZ2luYWxFcnJvcixcbiAgICAgICAgZXh0ZW5zaW9uczogZS5leHRlbnNpb25zXG4gICAgfSk7XG59XG5leHBvcnRzLndpdGhNb2RpZmllZEVycm9yTWVzc2FnZSA9IHdpdGhNb2RpZmllZEVycm9yTWVzc2FnZTtcbmZ1bmN0aW9uIHdpdGhNb2RpZmllZEVycm9yTm9kZXMoZSwgbmV3Tm9kZXMpIHtcbiAgICByZXR1cm4gbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IoZS5tZXNzYWdlLCB7XG4gICAgICAgIG5vZGVzOiBuZXdOb2RlcyxcbiAgICAgICAgc291cmNlOiBlLnNvdXJjZSxcbiAgICAgICAgcG9zaXRpb25zOiBlLnBvc2l0aW9ucyxcbiAgICAgICAgcGF0aDogZS5wYXRoLFxuICAgICAgICBvcmlnaW5hbEVycm9yOiBlLm9yaWdpbmFsRXJyb3IsXG4gICAgICAgIGV4dGVuc2lvbnM6IGUuZXh0ZW5zaW9uc1xuICAgIH0pO1xufVxuZXhwb3J0cy53aXRoTW9kaWZpZWRFcnJvck5vZGVzID0gd2l0aE1vZGlmaWVkRXJyb3JOb2RlcztcbmNvbnN0IElOVkFMSURfR1JBUEhRTCA9IG1ha2VDb2RlRGVmaW5pdGlvbignSU5WQUxJRF9HUkFQSFFMJywgJ0Egc2NoZW1hIGlzIGludmFsaWQgR3JhcGhRTDogaXQgdmlvbGF0ZXMgb25lIG9mIHRoZSBydWxlIG9mIHRoZSBzcGVjaWZpY2F0aW9uLicpO1xuY29uc3QgRElSRUNUSVZFX0RFRklOSVRJT05fSU5WQUxJRCA9IG1ha2VDb2RlRGVmaW5pdGlvbignRElSRUNUSVZFX0RFRklOSVRJT05fSU5WQUxJRCcsICdBIGJ1aWx0LWluIG9yIGZlZGVyYXRpb24gZGlyZWN0aXZlIGhhcyBhbiBpbnZhbGlkIGRlZmluaXRpb24gaW4gdGhlIHNjaGVtYS4nLCB7IC4uLkRFRkFVTFRfTUVUQURBVEEsIHJlcGxhY2VzOiBbJ1RBR19ERUZJTklUSU9OX0lOVkFMSUQnXSB9KTtcbmNvbnN0IFRZUEVfREVGSU5JVElPTl9JTlZBTElEID0gbWFrZUNvZGVEZWZpbml0aW9uKCdUWVBFX0RFRklOSVRJT05fSU5WQUxJRCcsICdBIGJ1aWx0LWluIG9yIGZlZGVyYXRpb24gdHlwZSBoYXMgYW4gaW52YWxpZCBkZWZpbml0aW9uIGluIHRoZSBzY2hlbWEuJyk7XG5jb25zdCBVTlNVUFBPUlRFRF9MSU5LRURfRkVBVFVSRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignVU5TVVBQT1JURURfTElOS0VEX0ZFQVRVUkUnLCAnSW5kaWNhdGVzIHRoYXQgYSBmZWF0dXJlIHVzZWQgaW4gYSBAbGluayBpcyBlaXRoZXIgdW5zdXBwb3J0ZWQgb3IgaXMgdXNlZCB3aXRoIHVuc3VwcG9ydGVkIG9wdGlvbnMuJyk7XG5jb25zdCBVTktOT1dOX0ZFREVSQVRJT05fTElOS19WRVJTSU9OID0gbWFrZUNvZGVEZWZpbml0aW9uKCdVTktOT1dOX0ZFREVSQVRJT05fTElOS19WRVJTSU9OJywgJ1RoZSB2ZXJzaW9uIG9mIGZlZGVyYXRpb24gaW4gYSBAbGluayBkaXJlY3RpdmUgb24gdGhlIHNjaGVtYSBpcyB1bmtub3duLicpO1xuY29uc3QgVU5LTk9XTl9MSU5LX1ZFUlNJT04gPSBtYWtlQ29kZURlZmluaXRpb24oJ1VOS05PV05fTElOS19WRVJTSU9OJywgJ1RoZSB2ZXJzaW9uIG9mIEBsaW5rIHNldCBvbiB0aGUgc2NoZW1hIGlzIHVua25vd24uJywgeyBhZGRlZEluOiAnMi4xLjAnIH0pO1xuY29uc3QgRklFTERTX0hBU19BUkdTID0gbWFrZUZlZGVyYXRpb25EaXJlY3RpdmVFcnJvckNvZGVDYXRlZ29yeSgnRklFTERTX0hBU19BUkdTJywgKGRpcmVjdGl2ZSkgPT4gYFRoZSBcXGBmaWVsZHNcXGAgYXJndW1lbnQgb2YgYSBcXGBAJHtkaXJlY3RpdmV9XFxgIGRpcmVjdGl2ZSBpbmNsdWRlcyBhIGZpZWxkIGRlZmluZWQgd2l0aCBhcmd1bWVudHMgKHdoaWNoIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkKS5gKTtcbmNvbnN0IEtFWV9GSUVMRFNfSEFTX0FSR1MgPSBGSUVMRFNfSEFTX0FSR1MuY3JlYXRlQ29kZSgna2V5Jyk7XG5jb25zdCBQUk9WSURFU19GSUVMRFNfSEFTX0FSR1MgPSBGSUVMRFNfSEFTX0FSR1MuY3JlYXRlQ29kZSgncHJvdmlkZXMnKTtcbmNvbnN0IERJUkVDVElWRV9GSUVMRFNfTUlTU0lOR19FWFRFUk5BTCA9IG1ha2VGZWRlcmF0aW9uRGlyZWN0aXZlRXJyb3JDb2RlQ2F0ZWdvcnkoJ0ZJRUxEU19NSVNTSU5HX0VYVEVSTkFMJywgKGRpcmVjdGl2ZSkgPT4gYFRoZSBcXGBmaWVsZHNcXGAgYXJndW1lbnQgb2YgYSBcXGBAJHtkaXJlY3RpdmV9XFxgIGRpcmVjdGl2ZSBpbmNsdWRlcyBhIGZpZWxkIHRoYXQgaXMgbm90IG1hcmtlZCBhcyBcXGBAZXh0ZXJuYWxcXGAuYCwgeyBhZGRlZEluOiBGRUQxX0NPREUgfSk7XG5jb25zdCBQUk9WSURFU19NSVNTSU5HX0VYVEVSTkFMID0gRElSRUNUSVZFX0ZJRUxEU19NSVNTSU5HX0VYVEVSTkFMLmNyZWF0ZUNvZGUoJ3Byb3ZpZGVzJyk7XG5jb25zdCBSRVFVSVJFU19NSVNTSU5HX0VYVEVSTkFMID0gRElSRUNUSVZFX0ZJRUxEU19NSVNTSU5HX0VYVEVSTkFMLmNyZWF0ZUNvZGUoJ3JlcXVpcmVzJyk7XG5jb25zdCBESVJFQ1RJVkVfVU5TVVBQT1JURURfT05fSU5URVJGQUNFID0gbWFrZUZlZGVyYXRpb25EaXJlY3RpdmVFcnJvckNvZGVDYXRlZ29yeSgnVU5TVVBQT1JURURfT05fSU5URVJGQUNFJywgKGRpcmVjdGl2ZSkgPT4gYEEgXFxgQCR7ZGlyZWN0aXZlfVxcYCBkaXJlY3RpdmUgaXMgdXNlZCBvbiBhbiBpbnRlcmZhY2UsIHdoaWNoIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQuYCk7XG5jb25zdCBLRVlfVU5TVVBQT1JURURfT05fSU5URVJGQUNFID0gRElSRUNUSVZFX1VOU1VQUE9SVEVEX09OX0lOVEVSRkFDRS5jcmVhdGVDb2RlKCdrZXknKTtcbmNvbnN0IFBST1ZJREVTX1VOU1VQUE9SVEVEX09OX0lOVEVSRkFDRSA9IERJUkVDVElWRV9VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UuY3JlYXRlQ29kZSgncHJvdmlkZXMnKTtcbmNvbnN0IFJFUVVJUkVTX1VOU1VQUE9SVEVEX09OX0lOVEVSRkFDRSA9IERJUkVDVElWRV9VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UuY3JlYXRlQ29kZSgncmVxdWlyZXMnKTtcbmNvbnN0IERJUkVDVElWRV9JTl9GSUVMRFNfQVJHID0gbWFrZUZlZGVyYXRpb25EaXJlY3RpdmVFcnJvckNvZGVDYXRlZ29yeSgnRElSRUNUSVZFX0lOX0ZJRUxEU19BUkcnLCAoZGlyZWN0aXZlKSA9PiBgVGhlIFxcYGZpZWxkc1xcYCBhcmd1bWVudCBvZiBhIFxcYEAke2RpcmVjdGl2ZX1cXGAgZGlyZWN0aXZlIGluY2x1ZGVzIHNvbWUgZGlyZWN0aXZlIGFwcGxpY2F0aW9ucy4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkYCwgeyBhZGRlZEluOiAnMi4xLjAnIH0pO1xuY29uc3QgS0VZX0hBU19ESVJFQ1RJVkVfSU5fRklFTERTX0FSR1MgPSBESVJFQ1RJVkVfSU5fRklFTERTX0FSRy5jcmVhdGVDb2RlKCdrZXknKTtcbmNvbnN0IFBST1ZJREVTX0hBU19ESVJFQ1RJVkVfSU5fRklFTERTX0FSR1MgPSBESVJFQ1RJVkVfSU5fRklFTERTX0FSRy5jcmVhdGVDb2RlKCdwcm92aWRlcycpO1xuY29uc3QgUkVRVUlSRVNfSEFTX0RJUkVDVElWRV9JTl9GSUVMRFNfQVJHUyA9IERJUkVDVElWRV9JTl9GSUVMRFNfQVJHLmNyZWF0ZUNvZGUoJ3JlcXVpcmVzJyk7XG5jb25zdCBFWFRFUk5BTF9VTlVTRUQgPSBtYWtlQ29kZURlZmluaXRpb24oJ0VYVEVSTkFMX1VOVVNFRCcsICdBbiBgQGV4dGVybmFsYCBmaWVsZCBpcyBub3QgYmVpbmcgdXNlZCBieSBhbnkgaW5zdGFuY2Ugb2YgYEBrZXlgLCBgQHJlcXVpcmVzYCwgYEBwcm92aWRlc2Agb3IgdG8gc2F0aXNmeSBhbiBpbnRlcmZhY2UgaW1wbGVtZW50YXRpb24uJywgeyBhZGRlZEluOiBGRUQxX0NPREUgfSk7XG5jb25zdCBUWVBFX1dJVEhfT05MWV9VTlVTRURfRVhURVJOQUwgPSBtYWtlQ29kZURlZmluaXRpb24oJ1RZUEVfV0lUSF9PTkxZX1VOVVNFRF9FWFRFUk5BTCcsICdBIGZlZGVyYXRpb24gMSBzY2hlbWEgaGFzIGEgY29tcG9zaXRlIHR5cGUgY29tcHJpc2VkIG9ubHkgb2YgdW51c2VkIGV4dGVybmFsIGZpZWxkcy4nXG4gICAgKyBgIE5vdGUgdGhhdCB0aGlzIGVycm9yIGNhbiBfb25seV8gYmUgcmFpc2VkIGZvciBmZWRlcmF0aW9uIDEgc2NoZW1hIGFzIGZlZGVyYXRpb24gMiBzY2hlbWEgZG8gbm90IGFsbG93IHVudXNlZCBleHRlcm5hbCBmaWVsZHMgKGFuZCBlcnJvcnMgd2l0aCBjb2RlICR7RVhURVJOQUxfVU5VU0VELmNvZGV9IHdpbGwgYmUgcmFpc2VkIGluIHRoYXQgY2FzZSkuYFxuICAgICsgJyBCdXQgd2hlbiBmZWRlcmF0aW9uIDEgc2NoZW1hIGFyZSBhdXRvbWF0aWNhbGx5IG1pZ3JhdGVkIHRvIGZlZGVyYXRpb24gMiBvbmVzLCB1bnVzZWQgZXh0ZXJuYWwgZmllbGRzIGFyZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQsIGFuZCBpbiByYXJlIGNhc2UgdGhpcyBjYW4gbGVhdmUgYSB0eXBlIGVtcHR5LiBJZiB0aGF0IGhhcHBlbnMsIGFuIGVycm9yIHdpdGggdGhpcyBjb2RlIHdpbGwgYmUgcmFpc2VkJyk7XG5jb25zdCBQUk9WSURFU19PTl9OT05fT0JKRUNUX0ZJRUxEID0gbWFrZUNvZGVEZWZpbml0aW9uKCdQUk9WSURFU19PTl9OT05fT0JKRUNUX0ZJRUxEJywgJ0EgYEBwcm92aWRlc2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gbWFyayBhIGZpZWxkIHdob3NlIGJhc2UgdHlwZSBpcyBub3QgYW4gb2JqZWN0IHR5cGUuJyk7XG5jb25zdCBESVJFQ1RJVkVfSU5WQUxJRF9GSUVMRFNfVFlQRSA9IG1ha2VGZWRlcmF0aW9uRGlyZWN0aXZlRXJyb3JDb2RlQ2F0ZWdvcnkoJ0lOVkFMSURfRklFTERTX1RZUEUnLCAoZGlyZWN0aXZlKSA9PiBgVGhlIHZhbHVlIHBhc3NlZCB0byB0aGUgXFxgZmllbGRzXFxgIGFyZ3VtZW50IG9mIGEgXFxgQCR7ZGlyZWN0aXZlfVxcYCBkaXJlY3RpdmUgaXMgbm90IGEgc3RyaW5nLmApO1xuY29uc3QgS0VZX0lOVkFMSURfRklFTERTX1RZUEUgPSBESVJFQ1RJVkVfSU5WQUxJRF9GSUVMRFNfVFlQRS5jcmVhdGVDb2RlKCdrZXknKTtcbmNvbnN0IFBST1ZJREVTX0lOVkFMSURfRklFTERTX1RZUEUgPSBESVJFQ1RJVkVfSU5WQUxJRF9GSUVMRFNfVFlQRS5jcmVhdGVDb2RlKCdwcm92aWRlcycpO1xuY29uc3QgUkVRVUlSRVNfSU5WQUxJRF9GSUVMRFNfVFlQRSA9IERJUkVDVElWRV9JTlZBTElEX0ZJRUxEU19UWVBFLmNyZWF0ZUNvZGUoJ3JlcXVpcmVzJyk7XG5jb25zdCBESVJFQ1RJVkVfSU5WQUxJRF9GSUVMRFMgPSBtYWtlRmVkZXJhdGlvbkRpcmVjdGl2ZUVycm9yQ29kZUNhdGVnb3J5KCdJTlZBTElEX0ZJRUxEUycsIChkaXJlY3RpdmUpID0+IGBUaGUgXFxgZmllbGRzXFxgIGFyZ3VtZW50IG9mIGEgXFxgQCR7ZGlyZWN0aXZlfVxcYCBkaXJlY3RpdmUgaXMgaW52YWxpZCAoaXQgaGFzIGludmFsaWQgc3ludGF4LCBpbmNsdWRlcyB1bmtub3duIGZpZWxkcywgLi4uKS5gKTtcbmNvbnN0IEtFWV9JTlZBTElEX0ZJRUxEUyA9IERJUkVDVElWRV9JTlZBTElEX0ZJRUxEUy5jcmVhdGVDb2RlKCdrZXknKTtcbmNvbnN0IFBST1ZJREVTX0lOVkFMSURfRklFTERTID0gRElSRUNUSVZFX0lOVkFMSURfRklFTERTLmNyZWF0ZUNvZGUoJ3Byb3ZpZGVzJyk7XG5jb25zdCBSRVFVSVJFU19JTlZBTElEX0ZJRUxEUyA9IERJUkVDVElWRV9JTlZBTElEX0ZJRUxEUy5jcmVhdGVDb2RlKCdyZXF1aXJlcycpO1xuY29uc3QgS0VZX0ZJRUxEU19TRUxFQ1RfSU5WQUxJRF9UWVBFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdLRVlfRklFTERTX1NFTEVDVF9JTlZBTElEX1RZUEUnLCAnVGhlIGBmaWVsZHNgIGFyZ3VtZW50IG9mIGBAa2V5YCBkaXJlY3RpdmUgaW5jbHVkZXMgYSBmaWVsZCB3aG9zZSB0eXBlIGlzIGEgbGlzdCwgaW50ZXJmYWNlLCBvciB1bmlvbiB0eXBlLiBGaWVsZHMgb2YgdGhlc2UgdHlwZXMgY2Fubm90IGJlIHBhcnQgb2YgYSBgQGtleWAnLCB7IGFkZGVkSW46IEZFRDFfQ09ERSB9KTtcbmNvbnN0IFJPT1RfVFlQRV9VU0VEID0gbWFrZUVycm9yQ29kZUNhdGVnb3J5KChraW5kKSA9PiBgUk9PVF8ke2tpbmQudG9Mb2NhbGVVcHBlckNhc2UoKX1fVVNFRGAsIChraW5kKSA9PiBgQSBzdWJncmFwaCdzIHNjaGVtYSBkZWZpbmVzIGEgdHlwZSB3aXRoIHRoZSBuYW1lIFxcYCR7a2luZH1cXGAsIHdoaWxlIGFsc28gc3BlY2lmeWluZyBhIF9kaWZmZXJlbnRfIHR5cGUgbmFtZSBhcyB0aGUgcm9vdCBxdWVyeSBvYmplY3QuIFRoaXMgaXMgbm90IGFsbG93ZWQuYCwgeyBhZGRlZEluOiBGRUQxX0NPREUgfSk7XG5jb25zdCBST09UX1FVRVJZX1VTRUQgPSBST09UX1RZUEVfVVNFRC5jcmVhdGVDb2RlKCdxdWVyeScpO1xuY29uc3QgUk9PVF9NVVRBVElPTl9VU0VEID0gUk9PVF9UWVBFX1VTRUQuY3JlYXRlQ29kZSgnbXV0YXRpb24nKTtcbmNvbnN0IFJPT1RfU1VCU0NSSVBUSU9OX1VTRUQgPSBST09UX1RZUEVfVVNFRC5jcmVhdGVDb2RlKCdzdWJzY3JpcHRpb24nKTtcbmNvbnN0IElOVkFMSURfU1VCR1JBUEhfTkFNRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignSU5WQUxJRF9TVUJHUkFQSF9OQU1FJywgJ0Egc3ViZ3JhcGggbmFtZSBpcyBpbnZhbGlkIChzdWJncmFwaCBuYW1lcyBjYW5ub3QgYmUgYSBzaW5nbGUgdW5kZXJzY29yZSAoXCJfXCIpKS4nKTtcbmNvbnN0IE5PX1FVRVJJRVMgPSBtYWtlQ29kZURlZmluaXRpb24oJ05PX1FVRVJJRVMnLCAnTm9uZSBvZiB0aGUgY29tcG9zZWQgc3ViZ3JhcGhzIGV4cG9zZSBhbnkgcXVlcnkuJyk7XG5jb25zdCBJTlRFUkZBQ0VfRklFTERfTk9fSU1QTEVNID0gbWFrZUNvZGVEZWZpbml0aW9uKCdJTlRFUkZBQ0VfRklFTERfTk9fSU1QTEVNJywgJ0FmdGVyIHN1YmdyYXBoIG1lcmdpbmcsIGFuIGltcGxlbWVudGF0aW9uIGlzIG1pc3NpbmcgYSBmaWVsZCBvZiBvbmUgb2YgdGhlIGludGVyZmFjZSBpdCBpbXBsZW1lbnRzICh3aGljaCBjYW4gaGFwcGVuIGZvciB2YWxpZCBzdWJncmFwaHMpLicpO1xuY29uc3QgVFlQRV9LSU5EX01JU01BVENIID0gbWFrZUNvZGVEZWZpbml0aW9uKCdUWVBFX0tJTkRfTUlTTUFUQ0gnLCAnQSB0eXBlIGhhcyB0aGUgc2FtZSBuYW1lIGluIGRpZmZlcmVudCBzdWJncmFwaHMsIGJ1dCBhIGRpZmZlcmVudCBraW5kLiBGb3IgaW5zdGFuY2UsIG9uZSBkZWZpbml0aW9uIGlzIGFuIG9iamVjdCB0eXBlIGJ1dCBhbm90aGVyIGlzIGFuIGludGVyZmFjZS4nLCB7IC4uLkRFRkFVTFRfTUVUQURBVEEsIHJlcGxhY2VzOiBbJ1ZBTFVFX1RZUEVfS0lORF9NSVNNQVRDSCcsICdFWFRFTlNJT05fT0ZfV1JPTkdfS0lORCcsICdFTlVNX01JU01BVENIX1RZUEUnXSB9KTtcbmNvbnN0IEVYVEVSTkFMX1RZUEVfTUlTTUFUQ0ggPSBtYWtlQ29kZURlZmluaXRpb24oJ0VYVEVSTkFMX1RZUEVfTUlTTUFUQ0gnLCAnQW4gYEBleHRlcm5hbGAgZmllbGQgaGFzIGEgdHlwZSB0aGF0IGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBkZWNsYXJhdGlvbihzKSBvZiB0aGF0IGZpZWxkIGluIG90aGVyIHN1YmdyYXBocy4nLCB7IGFkZGVkSW46IEZFRDFfQ09ERSB9KTtcbmNvbnN0IEVYVEVSTkFMX0NPTExJU0lPTl9XSVRIX0FOT1RIRVJfRElSRUNUSVZFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdFWFRFUk5BTF9DT0xMSVNJT05fV0lUSF9BTk9USEVSX0RJUkVDVElWRScsICdUaGUgQGV4dGVybmFsIGRpcmVjdGl2ZSBjb2xsaWRlcyB3aXRoIG90aGVyIGRpcmVjdGl2ZXMgaW4gc29tZSBzaXR1YXRpb25zLicsIHsgYWRkZWRJbjogJzIuMS4wJyB9KTtcbmNvbnN0IEVYVEVSTkFMX0FSR1VNRU5UX01JU1NJTkcgPSBtYWtlQ29kZURlZmluaXRpb24oJ0VYVEVSTkFMX0FSR1VNRU5UX01JU1NJTkcnLCAnQW4gYEBleHRlcm5hbGAgZmllbGQgaXMgbWlzc2luZyBzb21lIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBkZWNsYXJhdGlvbihzKSBvZiB0aGF0IGZpZWxkIGluIG90aGVyIHN1YmdyYXBocy4nKTtcbmNvbnN0IEVYVEVSTkFMX0FSR1VNRU5UX1RZUEVfTUlTTUFUQ0ggPSBtYWtlQ29kZURlZmluaXRpb24oJ0VYVEVSTkFMX0FSR1VNRU5UX1RZUEVfTUlTTUFUQ0gnLCAnQW4gYEBleHRlcm5hbGAgZmllbGQgZGVjbGFyZXMgYW4gYXJndW1lbnQgd2l0aCBhIHR5cGUgdGhhdCBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBhcmd1bWVudCBpbiB0aGUgZGVjbGFyYXRpb24ocykgb2YgdGhhdCBmaWVsZCBpbiBvdGhlciBzdWJncmFwaHMuJyk7XG5jb25zdCBFWFRFUk5BTF9BUkdVTUVOVF9ERUZBVUxUX01JU01BVENIID0gbWFrZUNvZGVEZWZpbml0aW9uKCdFWFRFUk5BTF9BUkdVTUVOVF9ERUZBVUxUX01JU01BVENIJywgJ0FuIGBAZXh0ZXJuYWxgIGZpZWxkIGRlY2xhcmVzIGFuIGFyZ3VtZW50IHdpdGggYSBkZWZhdWx0IHRoYXQgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgYXJndW1lbnQgaW4gdGhlIGRlY2xhcmF0aW9uKHMpIG9mIHRoYXQgZmllbGQgaW4gb3RoZXIgc3ViZ3JhcGhzLicpO1xuY29uc3QgRVhURVJOQUxfT05fSU5URVJGQUNFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdFWFRFUk5BTF9PTl9JTlRFUkZBQ0UnLCAnVGhlIGZpZWxkIG9mIGFuIGludGVyZmFjZSB0eXBlIGlzIG1hcmtlZCB3aXRoIGBAZXh0ZXJuYWxgOiBhcyBleHRlcm5hbCBpcyBhYm91dCBtYXJraW5nIGZpZWxkIG5vdCByZXNvbHZlZCBieSB0aGUgc3ViZ3JhcGggYW5kIGFzIGludGVyZmFjZSBmaWVsZCBhcmUgbm90IHJlc29sdmVkIChvbmx5IGltcGxlbWVudGF0aW9ucyBvZiB0aG9zZSBmaWVsZHMgYXJlKSwgYW4gXCJleHRlcm5hbFwiIGludGVyZmFjZSBmaWVsZCBpcyBub25zZW5zaWNhbCcpO1xuY29uc3QgTUVSR0VEX0RJUkVDVElWRV9BUFBMSUNBVElPTl9PTl9FWFRFUk5BTCA9IG1ha2VDb2RlRGVmaW5pdGlvbignTUVSR0VEX0RJUkVDVElWRV9BUFBMSUNBVElPTl9PTl9FWFRFUk5BTCcsICdJbiBhIHN1YmdyYXBoLCBhIGZpZWxkIGlzIGJvdGggbWFya2VkIEBleHRlcm5hbCBhbmQgaGFzIGEgbWVyZ2VkIGRpcmVjdGl2ZSBhcHBsaWVkIHRvIGl0Jyk7XG5jb25zdCBGSUVMRF9UWVBFX01JU01BVENIID0gbWFrZUNvZGVEZWZpbml0aW9uKCdGSUVMRF9UWVBFX01JU01BVENIJywgJ0EgZmllbGQgaGFzIGEgdHlwZSB0aGF0IGlzIGluY29tcGF0aWJsZSB3aXRoIG90aGVyIGRlY2xhcmF0aW9ucyBvZiB0aGF0IGZpZWxkIGluIG90aGVyIHN1YmdyYXBocy4nLCB7IC4uLkRFRkFVTFRfTUVUQURBVEEsIHJlcGxhY2VzOiBbJ1ZBTFVFX1RZUEVfRklFTERfVFlQRV9NSVNNQVRDSCddIH0pO1xuY29uc3QgQVJHVU1FTlRfVFlQRV9NSVNNQVRDSCA9IG1ha2VDb2RlRGVmaW5pdGlvbignRklFTERfQVJHVU1FTlRfVFlQRV9NSVNNQVRDSCcsICdBbiBhcmd1bWVudCAob2YgYSBmaWVsZC9kaXJlY3RpdmUpIGhhcyBhIHR5cGUgdGhhdCBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGF0IG9mIG90aGVyIGRlY2xhcmF0aW9ucyBvZiB0aGF0IHNhbWUgYXJndW1lbnQgaW4gb3RoZXIgc3ViZ3JhcGhzLicsIHsgLi4uREVGQVVMVF9NRVRBREFUQSwgcmVwbGFjZXM6IFsnVkFMVUVfVFlQRV9JTlBVVF9WQUxVRV9NSVNNQVRDSCddIH0pO1xuY29uc3QgSU5QVVRfRklFTERfREVGQVVMVF9NSVNNQVRDSCA9IG1ha2VDb2RlRGVmaW5pdGlvbignSU5QVVRfRklFTERfREVGQVVMVF9NSVNNQVRDSCcsICdBbiBpbnB1dCBmaWVsZCBoYXMgYSBkZWZhdWx0IHZhbHVlIHRoYXQgaXMgaW5jb21wYXRpYmxlIHdpdGggb3RoZXIgZGVjbGFyYXRpb25zIG9mIHRoYXQgZmllbGQgaW4gb3RoZXIgc3ViZ3JhcGhzLicpO1xuY29uc3QgQVJHVU1FTlRfREVGQVVMVF9NSVNNQVRDSCA9IG1ha2VDb2RlRGVmaW5pdGlvbignRklFTERfQVJHVU1FTlRfREVGQVVMVF9NSVNNQVRDSCcsICdBbiBhcmd1bWVudCAob2YgYSBmaWVsZC9kaXJlY3RpdmUpIGhhcyBhIGRlZmF1bHQgdmFsdWUgdGhhdCBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGF0IG9mIG90aGVyIGRlY2xhcmF0aW9ucyBvZiB0aGF0IHNhbWUgYXJndW1lbnQgaW4gb3RoZXIgc3ViZ3JhcGhzLicpO1xuY29uc3QgRVhURU5TSU9OX1dJVEhfTk9fQkFTRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignRVhURU5TSU9OX1dJVEhfTk9fQkFTRScsICdBIHN1YmdyYXBoIGlzIGF0dGVtcHRpbmcgdG8gYGV4dGVuZGAgYSB0eXBlIHRoYXQgaXMgbm90IG9yaWdpbmFsbHkgZGVmaW5lZCBpbiBhbnkga25vd24gc3ViZ3JhcGguJywgeyBhZGRlZEluOiBGRUQxX0NPREUgfSk7XG5jb25zdCBFWFRFUk5BTF9NSVNTSU5HX09OX0JBU0UgPSBtYWtlQ29kZURlZmluaXRpb24oJ0VYVEVSTkFMX01JU1NJTkdfT05fQkFTRScsICdBIGZpZWxkIGlzIG1hcmtlZCBhcyBgQGV4dGVybmFsYCBpbiBhIHN1YmdyYXBoIGJ1dCB3aXRoIG5vIG5vbi1leHRlcm5hbCBkZWNsYXJhdGlvbiBpbiBhbnkgb3RoZXIgc3ViZ3JhcGguJywgeyBhZGRlZEluOiBGRUQxX0NPREUgfSk7XG5jb25zdCBJTlRFUkZBQ0VfRklFTERfSU1QTEVNX1RZUEVfTUlTTUFUQ0ggPSBtYWtlQ29kZURlZmluaXRpb24oJ0lOVEVSRkFDRV9GSUVMRF9JTVBMRU1fVFlQRV9NSVNNQVRDSCcsICdGb3IgYW4gaW50ZXJmYWNlIGZpZWxkLCBzb21lIG9mIGl0cyBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvbnMgaGF2ZSBAZXh0ZXJuYWwgb3IgQHJlcXVpcmVzIGFuZCB0aGVyZSBpcyBkaWZmZXJlbmNlIGluIHRob3NlIGltcGxlbWVudGF0aW9ucyByZXR1cm4gdHlwZSAod2hpY2ggaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQ7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBvbGxvZ3JhcGhxbC9mZWRlcmF0aW9uL2lzc3Vlcy8xMjU3KScpO1xuY29uc3QgSU5WQUxJRF9GSUVMRF9TSEFSSU5HID0gbWFrZUNvZGVEZWZpbml0aW9uKCdJTlZBTElEX0ZJRUxEX1NIQVJJTkcnLCAnQSBmaWVsZCB0aGF0IGlzIG5vbi1zaGFyZWFibGUgaW4gYXQgbGVhc3Qgb25lIHN1YmdyYXBoIGlzIHJlc29sdmVkIGJ5IG11bHRpcGxlIHN1YmdyYXBocy4nKTtcbmNvbnN0IElOVkFMSURfTElOS19ESVJFQ1RJVkVfVVNBR0UgPSBtYWtlQ29kZURlZmluaXRpb24oJ0lOVkFMSURfTElOS19ESVJFQ1RJVkVfVVNBR0UnLCAnQW4gYXBwbGljYXRpb24gb2YgdGhlIEBsaW5rIGRpcmVjdGl2ZSBpcyBpbnZhbGlkL2RvZXMgbm90IHJlc3BlY3QgdGhlIHNwZWNpZmljYXRpb24uJyk7XG5jb25zdCBJTlZBTElEX0xJTktfSURFTlRJRklFUiA9IG1ha2VDb2RlRGVmaW5pdGlvbignSU5WQUxJRF9MSU5LX0lERU5USUZJRVInLCAnQSB1cmwvdmVyc2lvbiBmb3IgYSBAbGluayBmZWF0dXJlIGlzIGludmFsaWQvZG9lcyBub3QgcmVzcGVjdCB0aGUgc3BlY2lmaWNhdGlvbi4nLCB7IGFkZGVkSW46ICcyLjEuMCcgfSk7XG5jb25zdCBMSU5LX0lNUE9SVF9OQU1FX01JU01BVENIID0gbWFrZUNvZGVEZWZpbml0aW9uKCdMSU5LX0lNUE9SVF9OQU1FX01JU01BVENIJywgJ1RoZSBpbXBvcnQgbmFtZSBmb3IgYSBtZXJnZWQgZGlyZWN0aXZlIChhcyBkZWNsYXJlZCBieSB0aGUgcmVsZXZhbnQgYEBsaW5rKGltcG9ydDopYCBhcmd1bWVudCkgaXMgaW5jb25zaXN0ZW50IGJldHdlZW4gc3ViZ3JhcGhzLicpO1xuY29uc3QgUkVGRVJFTkNFRF9JTkFDQ0VTU0lCTEUgPSBtYWtlQ29kZURlZmluaXRpb24oJ1JFRkVSRU5DRURfSU5BQ0NFU1NJQkxFJywgJ0FuIGVsZW1lbnQgaXMgbWFya2VkIGFzIEBpbmFjY2Vzc2libGUgYnV0IGlzIHJlZmVyZW5jZWQgYnkgYW4gZWxlbWVudCB2aXNpYmxlIGluIHRoZSBBUEkgc2NoZW1hLicpO1xuY29uc3QgREVGQVVMVF9WQUxVRV9VU0VTX0lOQUNDRVNTSUJMRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignREVGQVVMVF9WQUxVRV9VU0VTX0lOQUNDRVNTSUJMRScsICdBbiBlbGVtZW50IGlzIG1hcmtlZCBhcyBAaW5hY2Nlc3NpYmxlIGJ1dCBpcyB1c2VkIGluIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGFuIGVsZW1lbnQgdmlzaWJsZSBpbiB0aGUgQVBJIHNjaGVtYS4nKTtcbmNvbnN0IFFVRVJZX1JPT1RfVFlQRV9JTkFDQ0VTU0lCTEUgPSBtYWtlQ29kZURlZmluaXRpb24oJ1FVRVJZX1JPT1RfVFlQRV9JTkFDQ0VTU0lCTEUnLCAnQW4gZWxlbWVudCBpcyBtYXJrZWQgYXMgQGluYWNjZXNzaWJsZSBidXQgaXMgdGhlIHF1ZXJ5IHJvb3QgdHlwZSwgd2hpY2ggbXVzdCBiZSB2aXNpYmxlIGluIHRoZSBBUEkgc2NoZW1hLicpO1xuY29uc3QgUkVRVUlSRURfSU5BQ0NFU1NJQkxFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdSRVFVSVJFRF9JTkFDQ0VTU0lCTEUnLCAnQW4gZWxlbWVudCBpcyBtYXJrZWQgYXMgQGluYWNjZXNzaWJsZSBidXQgaXMgcmVxdWlyZWQgYnkgYW4gZWxlbWVudCB2aXNpYmxlIGluIHRoZSBBUEkgc2NoZW1hLicpO1xuY29uc3QgSU1QTEVNRU5URURfQllfSU5BQ0NFU1NJQkxFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdJTVBMRU1FTlRFRF9CWV9JTkFDQ0VTU0lCTEUnLCAnQW4gZWxlbWVudCBpcyBtYXJrZWQgYXMgQGluYWNjZXNzaWJsZSBidXQgaW1wbGVtZW50cyBhbiBlbGVtZW50IHZpc2libGUgaW4gdGhlIEFQSSBzY2hlbWEuJyk7XG5jb25zdCBESVNBTExPV0VEX0lOQUNDRVNTSUJMRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUnLCAnQW4gZWxlbWVudCBpcyBtYXJrZWQgYXMgQGluYWNjZXNzaWJsZSB0aGF0IGlzIG5vdCBhbGxvd2VkIHRvIGJlIEBpbmFjY2Vzc2libGUuJyk7XG5jb25zdCBPTkxZX0lOQUNDRVNTSUJMRV9DSElMRFJFTiA9IG1ha2VDb2RlRGVmaW5pdGlvbignT05MWV9JTkFDQ0VTU0lCTEVfQ0hJTERSRU4nLCAnQSB0eXBlIHZpc2libGUgaW4gdGhlIEFQSSBzY2hlbWEgaGFzIG9ubHkgQGluYWNjZXNzaWJsZSBjaGlsZHJlbi4nKTtcbmNvbnN0IFJFUVVJUkVEX0lOUFVUX0ZJRUxEX01JU1NJTkdfSU5fU09NRV9TVUJHUkFQSCA9IG1ha2VDb2RlRGVmaW5pdGlvbignUkVRVUlSRURfSU5QVVRfRklFTERfTUlTU0lOR19JTl9TT01FX1NVQkdSQVBIJywgJ0EgZmllbGQgb2YgYW4gaW5wdXQgb2JqZWN0IHR5cGUgaXMgbWFuZGF0b3J5IGluIHNvbWUgc3ViZ3JhcGhzLCBidXQgdGhlIGZpZWxkIGlzIG5vdCBkZWZpbmVkIGluIGFsbCB0aGUgc3ViZ3JhcGhzIHRoYXQgZGVmaW5lIHRoZSBpbnB1dCBvYmplY3QgdHlwZS4nKTtcbmNvbnN0IFJFUVVJUkVEX0FSR1VNRU5UX01JU1NJTkdfSU5fU09NRV9TVUJHUkFQSCA9IG1ha2VDb2RlRGVmaW5pdGlvbignUkVRVUlSRURfQVJHVU1FTlRfTUlTU0lOR19JTl9TT01FX1NVQkdSQVBIJywgJ0FuIGFyZ3VtZW50IG9mIGEgZmllbGQgb3IgZGlyZWN0aXZlIGRlZmluaXRpb24gaXMgbWFuZGF0b3J5IGluIHNvbWUgc3ViZ3JhcGhzLCBidXQgdGhlIGFyZ3VtZW50IGlzIG5vdCBkZWZpbmVkIGluIGFsbCB0aGUgc3ViZ3JhcGhzIHRoYXQgZGVmaW5lIHRoZSBmaWVsZCBvciBkaXJlY3RpdmUgZGVmaW5pdGlvbi4nKTtcbmNvbnN0IEVNUFRZX01FUkdFRF9JTlBVVF9UWVBFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdFTVBUWV9NRVJHRURfSU5QVVRfVFlQRScsICdBbiBpbnB1dCBvYmplY3QgdHlwZSBoYXMgbm8gZmllbGQgY29tbW9uIHRvIGFsbCB0aGUgc3ViZ3JhcGhzIHRoYXQgZGVmaW5lIHRoZSB0eXBlLiBNZXJnaW5nIHRoYXQgdHlwZSB3b3VsZCByZXN1bHQgaW4gYW4gaW52YWxpZCBlbXB0eSBpbnB1dCBvYmplY3QgdHlwZS4nKTtcbmNvbnN0IEVOVU1fVkFMVUVfTUlTTUFUQ0ggPSBtYWtlQ29kZURlZmluaXRpb24oJ0VOVU1fVkFMVUVfTUlTTUFUQ0gnLCAnQW4gZW51bSB0eXBlIHRoYXQgaXMgdXNlZCBhcyBib3RoIGFuIGlucHV0IGFuZCBvdXRwdXQgdHlwZSBoYXMgYSB2YWx1ZSB0aGF0IGlzIG5vdCBkZWZpbmVkIGluIGFsbCB0aGUgc3ViZ3JhcGhzIHRoYXQgZGVmaW5lIHRoZSBlbnVtIHR5cGUuJyk7XG5jb25zdCBFTVBUWV9NRVJHRURfRU5VTV9UWVBFID0gbWFrZUNvZGVEZWZpbml0aW9uKCdFTVBUWV9NRVJHRURfRU5VTV9UWVBFJywgJ0FuIGVudW0gdHlwZSBoYXMgbm8gdmFsdWUgY29tbW9uIHRvIGFsbCB0aGUgc3ViZ3JhcGhzIHRoYXQgZGVmaW5lIHRoZSB0eXBlLiBNZXJnaW5nIHRoYXQgdHlwZSB3b3VsZCByZXN1bHQgaW4gYW4gaW52YWxpZCBlbXB0eSBlbnVtIHR5cGUuJyk7XG5jb25zdCBTQVRJU0ZJQUJJTElUWV9FUlJPUiA9IG1ha2VDb2RlRGVmaW5pdGlvbignU0FUSVNGSUFCSUxJVFlfRVJST1InLCAnU3ViZ3JhcGhzIGNhbiBiZSBtZXJnZWQsIGJ1dCB0aGUgcmVzdWx0aW5nIHN1cGVyZ3JhcGggQVBJIHdvdWxkIGhhdmUgcXVlcmllcyB0aGF0IGNhbm5vdCBiZSBzYXRpc2ZpZWQgYnkgdGhvc2Ugc3ViZ3JhcGhzLicpO1xuY29uc3QgT1ZFUlJJREVfRlJPTV9TRUxGX0VSUk9SID0gbWFrZUNvZGVEZWZpbml0aW9uKCdPVkVSUklERV9GUk9NX1NFTEZfRVJST1InLCAnRmllbGQgd2l0aCBgQG92ZXJyaWRlYCBkaXJlY3RpdmUgaGFzIFwiZnJvbVwiIGxvY2F0aW9uIHRoYXQgcmVmZXJlbmNlcyBpdHMgb3duIHN1YmdyYXBoLicpO1xuY29uc3QgT1ZFUlJJREVfU09VUkNFX0hBU19PVkVSUklERSA9IG1ha2VDb2RlRGVmaW5pdGlvbignT1ZFUlJJREVfU09VUkNFX0hBU19PVkVSUklERScsICdGaWVsZCB3aGljaCBpcyBvdmVycmlkZGVuIHRvIGFub3RoZXIgc3ViZ3JhcGggaXMgYWxzbyBtYXJrZWQgQG92ZXJyaWRlLicpO1xuY29uc3QgT1ZFUlJJREVfQ09MTElTSU9OX1dJVEhfQU5PVEhFUl9ESVJFQ1RJVkUgPSBtYWtlQ29kZURlZmluaXRpb24oJ09WRVJSSURFX0NPTExJU0lPTl9XSVRIX0FOT1RIRVJfRElSRUNUSVZFJywgJ1RoZSBAb3ZlcnJpZGUgZGlyZWN0aXZlIGNhbm5vdCBiZSB1c2VkIG9uIGV4dGVybmFsIGZpZWxkcywgbm9yIHRvIG92ZXJyaWRlIGZpZWxkcyB3aXRoIGVpdGhlciBAZXh0ZXJuYWwsIEBwcm92aWRlcywgb3IgQHJlcXVpcmVzLicpO1xuY29uc3QgVU5TVVBQT1JURURfRkVBVFVSRSA9IG1ha2VDb2RlRGVmaW5pdGlvbignVU5TVVBQT1JURURfRkVBVFVSRScsICdJbmRpY2F0ZXMgYW4gZXJyb3IgZHVlIHRvIGZlYXR1cmUgY3VycmVudGx5IHVuc3VwcG9ydGVkIGJ5IGZlZGVyYXRpb24uJywgeyBhZGRlZEluOiAnMi4xLjAnIH0pO1xuY29uc3QgSU5WQUxJRF9GRURFUkFUSU9OX1NVUEVSR1JBUEggPSBtYWtlQ29kZURlZmluaXRpb24oJ0lOVkFMSURfRkVERVJBVElPTl9TVVBFUkdSQVBIJywgJ0luZGljYXRlcyB0aGF0IGEgc2NoZW1hIHByb3ZpZGVkIGZvciBhbiBBcG9sbG8gRmVkZXJhdGlvbiBzdXBlcmdyYXBoIGlzIG5vdCBhIHZhbGlkIHN1cGVyZ3JhcGggc2NoZW1hLicsIHsgYWRkZWRJbjogJzIuMS4wJyB9KTtcbmNvbnN0IERPV05TVFJFQU1fU0VSVklDRV9FUlJPUiA9IG1ha2VDb2RlRGVmaW5pdGlvbignRE9XTlNUUkVBTV9TRVJWSUNFX0VSUk9SJywgJ0luZGljYXRlcyBhbiBlcnJvciBpbiBhIHN1YmdyYXBoIHNlcnZpY2UgcXVlcnkgZHVyaW5nIHF1ZXJ5IGV4ZWN1dGlvbiBpbiBhIGZlZGVyYXRlZCBzZXJ2aWNlLicsIHsgYWRkZWRJbjogRkVEMV9DT0RFIH0pO1xuY29uc3QgRElSRUNUSVZFX0NPTVBPU0lUSU9OX0VSUk9SID0gbWFrZUNvZGVEZWZpbml0aW9uKCdESVJFQ1RJVkVfQ09NUE9TSVRJT05fRVJST1InLCAnRXJyb3Igd2hlbiBjb21wb3NpbmcgY3VzdG9tIGRpcmVjdGl2ZXMuJywgeyBhZGRlZEluOiAnMi4xLjAnIH0pO1xuZXhwb3J0cy5FUlJPUl9DQVRFR09SSUVTID0ge1xuICAgIERJUkVDVElWRV9GSUVMRFNfTUlTU0lOR19FWFRFUk5BTCxcbiAgICBESVJFQ1RJVkVfVU5TVVBQT1JURURfT05fSU5URVJGQUNFLFxuICAgIERJUkVDVElWRV9JTlZBTElEX0ZJRUxEU19UWVBFLFxuICAgIERJUkVDVElWRV9JTlZBTElEX0ZJRUxEUyxcbiAgICBGSUVMRFNfSEFTX0FSR1MsXG4gICAgUk9PVF9UWVBFX1VTRUQsXG4gICAgRElSRUNUSVZFX0lOX0ZJRUxEU19BUkcsXG59O1xuZXhwb3J0cy5FUlJPUlMgPSB7XG4gICAgSU5WQUxJRF9HUkFQSFFMLFxuICAgIERJUkVDVElWRV9ERUZJTklUSU9OX0lOVkFMSUQsXG4gICAgVFlQRV9ERUZJTklUSU9OX0lOVkFMSUQsXG4gICAgVU5TVVBQT1JURURfTElOS0VEX0ZFQVRVUkUsXG4gICAgVU5LTk9XTl9GRURFUkFUSU9OX0xJTktfVkVSU0lPTixcbiAgICBVTktOT1dOX0xJTktfVkVSU0lPTixcbiAgICBLRVlfRklFTERTX0hBU19BUkdTLFxuICAgIFBST1ZJREVTX0ZJRUxEU19IQVNfQVJHUyxcbiAgICBQUk9WSURFU19NSVNTSU5HX0VYVEVSTkFMLFxuICAgIFJFUVVJUkVTX01JU1NJTkdfRVhURVJOQUwsXG4gICAgS0VZX1VOU1VQUE9SVEVEX09OX0lOVEVSRkFDRSxcbiAgICBQUk9WSURFU19VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UsXG4gICAgUkVRVUlSRVNfVU5TVVBQT1JURURfT05fSU5URVJGQUNFLFxuICAgIEVYVEVSTkFMX1VOVVNFRCxcbiAgICBFWFRFUk5BTF9DT0xMSVNJT05fV0lUSF9BTk9USEVSX0RJUkVDVElWRSxcbiAgICBUWVBFX1dJVEhfT05MWV9VTlVTRURfRVhURVJOQUwsXG4gICAgUFJPVklERVNfT05fTk9OX09CSkVDVF9GSUVMRCxcbiAgICBLRVlfSU5WQUxJRF9GSUVMRFNfVFlQRSxcbiAgICBQUk9WSURFU19JTlZBTElEX0ZJRUxEU19UWVBFLFxuICAgIFJFUVVJUkVTX0lOVkFMSURfRklFTERTX1RZUEUsXG4gICAgS0VZX0lOVkFMSURfRklFTERTLFxuICAgIFBST1ZJREVTX0lOVkFMSURfRklFTERTLFxuICAgIFJFUVVJUkVTX0lOVkFMSURfRklFTERTLFxuICAgIEtFWV9GSUVMRFNfU0VMRUNUX0lOVkFMSURfVFlQRSxcbiAgICBST09UX1FVRVJZX1VTRUQsXG4gICAgUk9PVF9NVVRBVElPTl9VU0VELFxuICAgIFJPT1RfU1VCU0NSSVBUSU9OX1VTRUQsXG4gICAgSU5WQUxJRF9TVUJHUkFQSF9OQU1FLFxuICAgIE5PX1FVRVJJRVMsXG4gICAgSU5URVJGQUNFX0ZJRUxEX05PX0lNUExFTSxcbiAgICBUWVBFX0tJTkRfTUlTTUFUQ0gsXG4gICAgRVhURVJOQUxfVFlQRV9NSVNNQVRDSCxcbiAgICBFWFRFUk5BTF9BUkdVTUVOVF9NSVNTSU5HLFxuICAgIEVYVEVSTkFMX0FSR1VNRU5UX1RZUEVfTUlTTUFUQ0gsXG4gICAgRVhURVJOQUxfQVJHVU1FTlRfREVGQVVMVF9NSVNNQVRDSCxcbiAgICBFWFRFUk5BTF9PTl9JTlRFUkZBQ0UsXG4gICAgTUVSR0VEX0RJUkVDVElWRV9BUFBMSUNBVElPTl9PTl9FWFRFUk5BTCxcbiAgICBGSUVMRF9UWVBFX01JU01BVENILFxuICAgIEFSR1VNRU5UX1RZUEVfTUlTTUFUQ0gsXG4gICAgSU5QVVRfRklFTERfREVGQVVMVF9NSVNNQVRDSCxcbiAgICBBUkdVTUVOVF9ERUZBVUxUX01JU01BVENILFxuICAgIEVYVEVOU0lPTl9XSVRIX05PX0JBU0UsXG4gICAgRVhURVJOQUxfTUlTU0lOR19PTl9CQVNFLFxuICAgIElOVEVSRkFDRV9GSUVMRF9JTVBMRU1fVFlQRV9NSVNNQVRDSCxcbiAgICBJTlZBTElEX0ZJRUxEX1NIQVJJTkcsXG4gICAgSU5WQUxJRF9MSU5LX0RJUkVDVElWRV9VU0FHRSxcbiAgICBJTlZBTElEX0xJTktfSURFTlRJRklFUixcbiAgICBMSU5LX0lNUE9SVF9OQU1FX01JU01BVENILFxuICAgIFJFRkVSRU5DRURfSU5BQ0NFU1NJQkxFLFxuICAgIERFRkFVTFRfVkFMVUVfVVNFU19JTkFDQ0VTU0lCTEUsXG4gICAgUVVFUllfUk9PVF9UWVBFX0lOQUNDRVNTSUJMRSxcbiAgICBSRVFVSVJFRF9JTkFDQ0VTU0lCTEUsXG4gICAgRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUsXG4gICAgSU1QTEVNRU5URURfQllfSU5BQ0NFU1NJQkxFLFxuICAgIE9OTFlfSU5BQ0NFU1NJQkxFX0NISUxEUkVOLFxuICAgIFJFUVVJUkVEX0FSR1VNRU5UX01JU1NJTkdfSU5fU09NRV9TVUJHUkFQSCxcbiAgICBSRVFVSVJFRF9JTlBVVF9GSUVMRF9NSVNTSU5HX0lOX1NPTUVfU1VCR1JBUEgsXG4gICAgRU1QVFlfTUVSR0VEX0lOUFVUX1RZUEUsXG4gICAgRU5VTV9WQUxVRV9NSVNNQVRDSCxcbiAgICBFTVBUWV9NRVJHRURfRU5VTV9UWVBFLFxuICAgIFNBVElTRklBQklMSVRZX0VSUk9SLFxuICAgIE9WRVJSSURFX0NPTExJU0lPTl9XSVRIX0FOT1RIRVJfRElSRUNUSVZFLFxuICAgIE9WRVJSSURFX0ZST01fU0VMRl9FUlJPUixcbiAgICBPVkVSUklERV9TT1VSQ0VfSEFTX09WRVJSSURFLFxuICAgIFVOU1VQUE9SVEVEX0ZFQVRVUkUsXG4gICAgSU5WQUxJRF9GRURFUkFUSU9OX1NVUEVSR1JBUEgsXG4gICAgRE9XTlNUUkVBTV9TRVJWSUNFX0VSUk9SLFxuICAgIEtFWV9IQVNfRElSRUNUSVZFX0lOX0ZJRUxEU19BUkdTLFxuICAgIFBST1ZJREVTX0hBU19ESVJFQ1RJVkVfSU5fRklFTERTX0FSR1MsXG4gICAgUkVRVUlSRVNfSEFTX0RJUkVDVElWRV9JTl9GSUVMRFNfQVJHUyxcbiAgICBESVJFQ1RJVkVfQ09NUE9TSVRJT05fRVJST1IsXG59O1xuY29uc3QgY29kZURlZkJ5Q29kZSA9IE9iamVjdC52YWx1ZXMoZXhwb3J0cy5FUlJPUlMpLnJlZHVjZSgob2JqLCBjb2RlRGVmKSA9PiB7IG9ialtjb2RlRGVmLmNvZGVdID0gY29kZURlZjsgcmV0dXJuIG9iajsgfSwge30pO1xuZXhwb3J0cy5SRU1PVkVEX0VSUk9SUyA9IFtcbiAgICBbJ0tFWV9GSUVMRFNfTUlTU0lOR19PTl9CQVNFJywgJ0tleXMgY2FuIG5vdyB1c2UgYW55IGZpZWxkIGZyb20gYW55IG90aGVyIHN1YmdyYXBoLiddLFxuICAgIFsnS0VZX0ZJRUxEU19NSVNTSU5HX0VYVEVSTkFMJywgJ1VzaW5nIGBAZXh0ZXJuYWxgIGZvciBrZXkgZmllbGRzIGlzIG5vdyBkaXNjb3VyYWdlZCwgdW5sZXNzIHRoZSBmaWVsZCBpcyB0cnVseSBtZWFudCB0byBiZSBleHRlcm5hbC4nXSxcbiAgICBbJ0tFWV9NSVNTSU5HX09OX0JBU0UnLCAnRWFjaCBzdWJncmFwaCBpcyBub3cgZnJlZSB0byBkZWNsYXJlIGEga2V5IG9ubHkgaWYgaXQgbmVlZHMgaXQuJ10sXG4gICAgWydNVUxUSVBMRV9LRVlTX09OX0VYVEVOU0lPTicsICdFdmVyeSBzdWJncmFwaCBjYW4gaGF2ZSBtdWx0aXBsZSBrZXlzLCBhcyBuZWNlc3NhcnkuJ10sXG4gICAgWydLRVlfTk9UX1NQRUNJRklFRCcsICdFYWNoIHN1YmdyYXBoIGNhbiBkZWNsYXJlIGtleSBpbmRlcGVuZGVudGx5IG9mIGFueSBvdGhlciBzdWJncmFwaC4nXSxcbiAgICBbJ0VYVEVSTkFMX1VTRURfT05fQkFTRScsICdBcyB0aGVyZSBpcyBub3QgdHlwZSBvd25lcnNoaXAgYW55bW9yZSwgdGhlcmUgaXMgYWxzbyBubyBwYXJ0aWN1bGFyIGxpbWl0YXRpb24gYXMgdG8gd2hlcmUgYSBmaWVsZCBjYW4gYmUgZXh0ZXJuYWwuJ10sXG4gICAgWydQUk9WSURFU19OT1RfT05fRU5USVRZJywgJ0Bwcm92aWRlcyBjYW4gbm93IGJlIHVzZWQgb24gYW55IHR5cGUuJ10sXG4gICAgWydSRVFVSVJFU19GSUVMRFNfTUlTU0lOR19PTl9CQVNFJywgJ0ZpZWxkcyBpbiBAcmVxdWlyZXMgY2FuIG5vdyBiZSBmcm9tIGFueSBzdWJncmFwaC4nXSxcbiAgICBbJ1JFUVVJUkVTX1VTRURfT05fQkFTRScsICdBcyB0aGVyZSBpcyBub3QgdHlwZSBvd25lcnNoaXAgYW55bW9yZSwgdGhlcmUgaXMgYWxzbyBubyBwYXJ0aWN1bGFyIGxpbWl0YXRpb24gYXMgdG8gd2hpY2ggc3ViZ3JhcGggY2FuIHVzZSBhIEByZXF1aXJlcy4nXSxcbiAgICBbJ0RVUExJQ0FURV9TQ0FMQVJfREVGSU5JVElPTicsICdBcyBkdXBsaWNhdGUgc2NhbGFyIGRlZmluaXRpb25zIGlzIGludmFsaWQgR3JhcGhRTCwgdGhpcyB3aWxsIG5vdyBiZSBhbiBlcnJvciB3aXRoIGNvZGUgYElOVkFMSURfR1JBUEhRTGAnXSxcbiAgICBbJ0RVUExJQ0FURV9FTlVNX0RFRklOSVRJT04nLCAnQXMgZHVwbGljYXRlIGVudW0gZGVmaW5pdGlvbnMgaXMgaW52YWxpZCBHcmFwaFFMLCB0aGlzIHdpbGwgbm93IGJlIGFuIGVycm9yIHdpdGggY29kZSBgSU5WQUxJRF9HUkFQSFFMYCddLFxuICAgIFsnRFVQTElDQVRFX0VOVU1fVkFMVUUnLCAnQXMgZHVwbGljYXRlIGVudW0gdmFsdWVzIGlzIGludmFsaWQgR3JhcGhRTCwgdGhpcyB3aWxsIG5vdyBiZSBhbiBlcnJvciB3aXRoIGNvZGUgYElOVkFMSURfR1JBUEhRTGAnXSxcbiAgICBbJ0VOVU1fTUlTTUFUQ0gnLCAnU3ViZ3JhcGggZGVmaW5pdGlvbnMgZm9yIGFuIGVudW0gYXJlIG5vdyBtZXJnZWQgYnkgY29tcG9zaXRpb24nXSxcbiAgICBbJ1ZBTFVFX1RZUEVfTk9fRU5USVRZJywgJ1RoZXJlIGlzIG5vIHN0cm9uZyBkaWZmZXJlbnQgYmV0d2VlbiBlbnRpdHkgYW5kIHZhbHVlIHR5cGVzIGluIHRoZSBtb2RlbCAodGhleSBhcmUganVzdCB1c2FnZSBwYXR0ZXJuKSBhbmQgYSB0eXBlIGNhbiBoYXZlIGtleXMgaW4gb25lIHN1YmdyYXBoIGJ1dCBub3QgYW5vdGhlci4nXSxcbiAgICBbJ1ZBTFVFX1RZUEVfVU5JT05fVFlQRVNfTUlTTUFUQ0gnLCAnU3ViZ3JhcGggZGVmaW5pdGlvbnMgZm9yIGFuIHVuaW9uIGFyZSBub3cgbWVyZ2VkIGJ5IGNvbXBvc2l0aW9uJ10sXG4gICAgWydQUk9WSURFU19GSUVMRFNfU0VMRUNUX0lOVkFMSURfVFlQRScsICdAcHJvdmlkZXMgY2FuIG5vdyBiZSB1c2VkIG9uIGZpZWxkIG9mIGludGVyZmFjZSwgdW5pb24gYW5kIGxpc3QgdHlwZXMnXSxcbiAgICBbJ1JFU0VSVkVEX0ZJRUxEX1VTRUQnLCAnVGhpcyBlcnJvciB3YXMgcHJldmlvdXNseSBub3QgY29ycmVjdGx5IGVuZm9yY2VkOiB0aGUgX3NlcnZpY2UgYW5kIF9lbnRpdGllcywgaWYgcHJlc2VudCwgd2VyZSBvdmVycmlkZGVuOyB0aGlzIGlzIHN0aWxsIHRoZSBjYXNlJ10sXG4gICAgWydOT05fUkVQRUFUQUJMRV9ESVJFQ1RJVkVfQVJHVU1FTlRTX01JU01BVENIJywgJ1NpbmNlIGZlZGVyYXRpb24gMi4xLjAsIHRoZSBjYXNlIHRoaXMgZXJyb3IgdXNlZCB0byBjb3ZlciBpcyBub3cgYSB3YXJuaW5nICh3aXRoIGNvZGUgYElOQ09OU0lTVEVOVF9OT05fUkVQRUFUQUJMRV9ESVJFQ1RJVkVfQVJHVU1FTlRTYCkgaW5zdGVhZCBvZiBhbiBlcnJvciddLFxuICAgIFsnUkVRVUlSRVNfRklFTERTX0hBU19BUkdTJywgJ1NpbmNlIGZlZGVyYXRpb24gMi4xLjEsIHVzaW5nIGZpZWxkcyB3aXRoIGFyZ3VtZW50cyBpbiBhIEByZXF1aXJlcyBpcyBmdWxseSBzdXBwb3J0ZWQnXSxcbl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXh0cmFjdFN1YmdyYXBoc0Zyb21TdXBlcmdyYXBoID0gZXhwb3J0cy5leHRyYWN0U3ViZ3JhcGhzTmFtZXNBbmRVcmxzRnJvbVN1cGVyZ3JhcGggPSB2b2lkIDA7XG5jb25zdCBkZWZpbml0aW9uc18xID0gcmVxdWlyZShcIi4vZGVmaW5pdGlvbnNcIik7XG5jb25zdCBmZWRlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9mZWRlcmF0aW9uXCIpO1xuY29uc3QgY29yZVNwZWNfMSA9IHJlcXVpcmUoXCIuL2NvcmVTcGVjXCIpO1xuY29uc3QgZmVkZXJhdGlvbl8yID0gcmVxdWlyZShcIi4vZmVkZXJhdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IHN1cGVyZ3JhcGhzXzEgPSByZXF1aXJlKFwiLi9zdXBlcmdyYXBoc1wiKTtcbmNvbnN0IGJ1aWxkU2NoZW1hXzEgPSByZXF1aXJlKFwiLi9idWlsZFNjaGVtYVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHByaW50XzEgPSByZXF1aXJlKFwiLi9wcmludFwiKTtcbmNvbnN0IG9wZXJhdGlvbnNfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnNcIik7XG5jb25zdCBmc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmZ1bmN0aW9uIGZpbHRlcmVkVHlwZXMoc3VwZXJncmFwaCwgam9pblNwZWMsIGNvcmVTcGVjKSB7XG4gICAgcmV0dXJuIHN1cGVyZ3JhcGgudHlwZXMoKS5maWx0ZXIodCA9PiAham9pblNwZWMuaXNTcGVjVHlwZSh0KSAmJiAhY29yZVNwZWMuaXNTcGVjVHlwZSh0KSk7XG59XG5mdW5jdGlvbiBleHRyYWN0U3ViZ3JhcGhzTmFtZXNBbmRVcmxzRnJvbVN1cGVyZ3JhcGgoc3VwZXJncmFwaCkge1xuICAgIGNvbnN0IFtfLCBqb2luU3BlY10gPSAoMCwgc3VwZXJncmFwaHNfMS52YWxpZGF0ZVN1cGVyZ3JhcGgpKHN1cGVyZ3JhcGgpO1xuICAgIGNvbnN0IFtzdWJncmFwaHNdID0gY29sbGVjdEVtcHR5U3ViZ3JhcGhzKHN1cGVyZ3JhcGgsIGpvaW5TcGVjKTtcbiAgICByZXR1cm4gc3ViZ3JhcGhzLnZhbHVlcygpLm1hcChzdWJncmFwaCA9PiB7IHJldHVybiB7IG5hbWU6IHN1YmdyYXBoLm5hbWUsIHVybDogc3ViZ3JhcGgudXJsIH07IH0pO1xufVxuZXhwb3J0cy5leHRyYWN0U3ViZ3JhcGhzTmFtZXNBbmRVcmxzRnJvbVN1cGVyZ3JhcGggPSBleHRyYWN0U3ViZ3JhcGhzTmFtZXNBbmRVcmxzRnJvbVN1cGVyZ3JhcGg7XG5mdW5jdGlvbiBjb2xsZWN0RW1wdHlTdWJncmFwaHMoc3VwZXJncmFwaCwgam9pblNwZWMpIHtcbiAgICBjb25zdCBzdWJncmFwaHMgPSBuZXcgZmVkZXJhdGlvbl8yLlN1YmdyYXBocygpO1xuICAgIGNvbnN0IGdyYXBoRGlyZWN0aXZlID0gam9pblNwZWMuZ3JhcGhEaXJlY3RpdmUoc3VwZXJncmFwaCk7XG4gICAgY29uc3QgZ3JhcGhFbnVtID0gam9pblNwZWMuZ3JhcGhFbnVtKHN1cGVyZ3JhcGgpO1xuICAgIGNvbnN0IGdyYXBoRW51bU5hbWVUb1N1YmdyYXBoTmFtZSA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGdyYXBoRW51bS52YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgZ3JhcGhBcHBsaWNhdGlvbnMgPSB2YWx1ZS5hcHBsaWVkRGlyZWN0aXZlc09mKGdyYXBoRGlyZWN0aXZlKTtcbiAgICAgICAgaWYgKCFncmFwaEFwcGxpY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgJHt2YWx1ZX0gb2Ygam9pbl9fR3JhcGggZW51bSBoYXMgbm8gQGpvaW5fX2dyYXBoIGRpcmVjdGl2ZWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZm8gPSBncmFwaEFwcGxpY2F0aW9uc1swXS5hcmd1bWVudHMoKTtcbiAgICAgICAgY29uc3Qgc3ViZ3JhcGggPSBuZXcgZmVkZXJhdGlvbl8yLlN1YmdyYXBoKGluZm8ubmFtZSwgaW5mby51cmwsICgwLCBmZWRlcmF0aW9uXzEubmV3RW1wdHlGZWRlcmF0aW9uMlNjaGVtYSkoKSk7XG4gICAgICAgIHN1YmdyYXBocy5hZGQoc3ViZ3JhcGgpO1xuICAgICAgICBncmFwaEVudW1OYW1lVG9TdWJncmFwaE5hbWUuc2V0KHZhbHVlLm5hbWUsIGluZm8ubmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBbc3ViZ3JhcGhzLCBncmFwaEVudW1OYW1lVG9TdWJncmFwaE5hbWVdO1xufVxuY2xhc3MgU3ViZ3JhcGhFeHRyYWN0aW9uRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsRXJyb3IsIHN1YmdyYXBoKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxFcnJvciA9IG9yaWdpbmFsRXJyb3I7XG4gICAgICAgIHRoaXMuc3ViZ3JhcGggPSBzdWJncmFwaDtcbiAgICB9XG59XG5mdW5jdGlvbiBjb2xsZWN0RmllbGRSZWFjaGFibGVUeXBlc0ZvclN1YmdyYXBoKHN1cGVyZ3JhcGgsIHN1YmdyYXBoTmFtZSwgYWRkUmVhY2hhYmxlVHlwZSwgZmllbGRJbmZvSW5TdWJncmFwaCwgdHlwZUluZm9JblN1YmdyYXBoKSB7XG4gICAgY29uc3Qgc2VlblR5cGVzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHN0YWNrID0gc3VwZXJncmFwaC5zY2hlbWFEZWZpbml0aW9uLnJvb3RzKCkubWFwKChyb290KSA9PiByb290LnR5cGUpO1xuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzdXBlcmdyYXBoLnR5cGVzKCkpIHtcbiAgICAgICAgY29uc3QgeyBpc0VudGl0eVdpdGhLZXlJblN1YmdyYXBoLCB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXMgfSA9IHR5cGVJbmZvSW5TdWJncmFwaCh0eXBlLCBzdWJncmFwaE5hbWUpO1xuICAgICAgICBpZiAoaXNFbnRpdHlXaXRoS2V5SW5TdWJncmFwaCkge1xuICAgICAgICAgICAgc3RhY2sucHVzaCh0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXMuZm9yRWFjaCgodCkgPT4gc3RhY2sucHVzaCh0KSk7XG4gICAgfVxuICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgYWRkUmVhY2hhYmxlVHlwZSh0eXBlKTtcbiAgICAgICAgaWYgKHNlZW5UeXBlcy5oYXModHlwZS5uYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgc2VlblR5cGVzLmFkZCh0eXBlLm5hbWUpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICAgICAgdHlwZS5hbGxJbXBsZW1lbnRhdGlvbnMoKS5mb3JFYWNoKCh0KSA9PiBzdGFjay5wdXNoKHQpKTtcbiAgICAgICAgICAgIGNhc2UgJ09iamVjdFR5cGUnOlxuICAgICAgICAgICAgICAgIHR5cGUuaW50ZXJmYWNlcygpLmZvckVhY2goKHQpID0+IHN0YWNrLnB1c2godCkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdHlwZS5maWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlzSW5TdWJncmFwaCwgdHlwZXNJbkZlZGVyYXRpb25EaXJlY3RpdmVzIH0gPSBmaWVsZEluZm9JblN1YmdyYXBoKGZpZWxkLCBzdWJncmFwaE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJblN1YmdyYXBoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5hcmd1bWVudHMoKS5mb3JFYWNoKChhcmcpID0+IHN0YWNrLnB1c2goKDAsIGRlZmluaXRpb25zXzEuYmFzZVR5cGUpKGFyZy50eXBlKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXNJbkZlZGVyYXRpb25EaXJlY3RpdmVzLmZvckVhY2goKHQpID0+IHN0YWNrLnB1c2godCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzpcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpc0luU3ViZ3JhcGgsIHR5cGVzSW5GZWRlcmF0aW9uRGlyZWN0aXZlcyB9ID0gZmllbGRJbmZvSW5TdWJncmFwaChmaWVsZCwgc3ViZ3JhcGhOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5TdWJncmFwaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXNJbkZlZGVyYXRpb25EaXJlY3RpdmVzLmZvckVhY2goKHQpID0+IHN0YWNrLnB1c2godCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnVW5pb25UeXBlJzpcbiAgICAgICAgICAgICAgICB0eXBlLm1lbWJlcnMoKS5mb3JFYWNoKChtKSA9PiBzdGFjay5wdXNoKG0udHlwZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHN1cGVyZ3JhcGguZGlyZWN0aXZlcygpKSB7XG4gICAgICAgIGlmICghZGlyZWN0aXZlLmhhc0V4ZWN1dGFibGVMb2NhdGlvbnMoKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZGlyZWN0aXZlLmFyZ3VtZW50cygpLmZvckVhY2goKGFyZykgPT4gc3RhY2sucHVzaCgoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoYXJnLnR5cGUpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29sbGVjdEZpZWxkUmVhY2hhYmxlVHlwZXNGb3JBbGxTdWJncmFwaHMoc3VwZXJncmFwaCwgYWxsU3ViZ3JhcGhzLCBmaWVsZEluZm9JblN1YmdyYXBoLCB0eXBlSW5mb0luU3ViZ3JhcGgpIHtcbiAgICBjb25zdCByZWFjaGFibGVUeXBlc0J5U3ViZ3JhcGhzID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3Qgc3ViZ3JhcGhOYW1lIG9mIGFsbFN1YmdyYXBocykge1xuICAgICAgICBjb25zdCByZWFjaGFibGVUeXBlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgY29sbGVjdEZpZWxkUmVhY2hhYmxlVHlwZXNGb3JTdWJncmFwaChzdXBlcmdyYXBoLCBzdWJncmFwaE5hbWUsICh0KSA9PiByZWFjaGFibGVUeXBlcy5hZGQodC5uYW1lKSwgZmllbGRJbmZvSW5TdWJncmFwaCwgdHlwZUluZm9JblN1YmdyYXBoKTtcbiAgICAgICAgcmVhY2hhYmxlVHlwZXNCeVN1YmdyYXBocy5zZXQoc3ViZ3JhcGhOYW1lLCByZWFjaGFibGVUeXBlcyk7XG4gICAgfVxuICAgIHJldHVybiByZWFjaGFibGVUeXBlc0J5U3ViZ3JhcGhzO1xufVxuZnVuY3Rpb24gdHlwZXNVc2VkSW5GZWRlcmF0aW9uRGlyZWN0aXZlKGZpZWxkU2V0LCBwYXJlbnRUeXBlKSB7XG4gICAgaWYgKCFmaWVsZFNldCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHVzZWRUeXBlcyA9IFtdO1xuICAgICgwLCBvcGVyYXRpb25zXzEucGFyc2VTZWxlY3Rpb25TZXQpKHtcbiAgICAgICAgcGFyZW50VHlwZSxcbiAgICAgICAgc291cmNlOiBmaWVsZFNldCxcbiAgICAgICAgZmllbGRBY2Nlc3NvcjogKHR5cGUsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0eXBlLmZpZWxkKGZpZWxkTmFtZSk7XG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICB1c2VkVHlwZXMucHVzaCgoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIHVzZWRUeXBlcztcbn1cbmZ1bmN0aW9uIGV4dHJhY3RTdWJncmFwaHNGcm9tU3VwZXJncmFwaChzdXBlcmdyYXBoKSB7XG4gICAgY29uc3QgW2NvcmVGZWF0dXJlcywgam9pblNwZWNdID0gKDAsIHN1cGVyZ3JhcGhzXzEudmFsaWRhdGVTdXBlcmdyYXBoKShzdXBlcmdyYXBoKTtcbiAgICBjb25zdCBpc0ZlZDEgPSBqb2luU3BlYy52ZXJzaW9uLmVxdWFscyhuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigwLCAxKSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW3N1YmdyYXBocywgZ3JhcGhFbnVtTmFtZVRvU3ViZ3JhcGhOYW1lXSA9IGNvbGxlY3RFbXB0eVN1YmdyYXBocyhzdXBlcmdyYXBoLCBqb2luU3BlYyk7XG4gICAgICAgIGNvbnN0IHR5cGVEaXJlY3RpdmUgPSBqb2luU3BlYy50eXBlRGlyZWN0aXZlKHN1cGVyZ3JhcGgpO1xuICAgICAgICBjb25zdCBpbXBsZW1lbnRzRGlyZWN0aXZlID0gam9pblNwZWMuaW1wbGVtZW50c0RpcmVjdGl2ZShzdXBlcmdyYXBoKTtcbiAgICAgICAgY29uc3Qgb3duZXJEaXJlY3RpdmUgPSBqb2luU3BlYy5vd25lckRpcmVjdGl2ZShzdXBlcmdyYXBoKTtcbiAgICAgICAgY29uc3QgZmllbGREaXJlY3RpdmUgPSBqb2luU3BlYy5maWVsZERpcmVjdGl2ZShzdXBlcmdyYXBoKTtcbiAgICAgICAgY29uc3QgZ2V0U3ViZ3JhcGggPSAoYXBwbGljYXRpb24pID0+IGdyYXBoRW51bU5hbWVUb1N1YmdyYXBoTmFtZS5nZXQoYXBwbGljYXRpb24uYXJndW1lbnRzKCkuZ3JhcGgpO1xuICAgICAgICBsZXQgaW5jbHVkZVR5cGVJblN1YmdyYXBoID0gKCkgPT4gdHJ1ZTtcbiAgICAgICAgaWYgKGlzRmVkMSkge1xuICAgICAgICAgICAgY29uc3QgcmVhY2hhYmxlVHlwZXNCeVN1YmdyYXBoID0gY29sbGVjdEZpZWxkUmVhY2hhYmxlVHlwZXNGb3JBbGxTdWJncmFwaHMoc3VwZXJncmFwaCwgc3ViZ3JhcGhzLm5hbWVzKCksIChmLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRBcHBsaWNhdGlvbnMgPSBmLmFwcGxpZWREaXJlY3RpdmVzT2YoZmllbGREaXJlY3RpdmUpO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZEFwcGxpY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXBwbGljYXRpb24gPSBmaWVsZEFwcGxpY2F0aW9ucy5maW5kKChhcHBsaWNhdGlvbikgPT4gZ2V0U3ViZ3JhcGgoYXBwbGljYXRpb24pID09PSBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gYXBwbGljYXRpb24uYXJndW1lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXMgPSB0eXBlc1VzZWRJbkZlZGVyYXRpb25EaXJlY3RpdmUoYXJncy5wcm92aWRlcywgKDAsIGRlZmluaXRpb25zXzEuYmFzZVR5cGUpKGYudHlwZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0eXBlc1VzZWRJbkZlZGVyYXRpb25EaXJlY3RpdmUoYXJncy5yZXF1aXJlcywgZi5wYXJlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlzSW5TdWJncmFwaDogdHJ1ZSwgdHlwZXNJbkZlZGVyYXRpb25EaXJlY3RpdmVzIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpc0luU3ViZ3JhcGg6IGZhbHNlLCB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bmVyQXBwbGljYXRpb25zID0gb3duZXJEaXJlY3RpdmUgPyBmLnBhcmVudC5hcHBsaWVkRGlyZWN0aXZlc09mKG93bmVyRGlyZWN0aXZlKSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpc0luU3ViZ3JhcGg6ICFvd25lckFwcGxpY2F0aW9ucy5sZW5ndGggfHwgZ2V0U3ViZ3JhcGgob3duZXJBcHBsaWNhdGlvbnNbMF0pID09IG5hbWUsIHR5cGVzSW5GZWRlcmF0aW9uRGlyZWN0aXZlczogW10gfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAodCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBcHBsaWNhdGlvbnMgPSB0LmFwcGxpZWREaXJlY3RpdmVzT2YodHlwZURpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXBwbGljYXRpb24gPSB0eXBlQXBwbGljYXRpb25zLmZpbmQoKGFwcGxpY2F0aW9uKSA9PiAoYXBwbGljYXRpb24uYXJndW1lbnRzKCkua2V5ICYmIChnZXRTdWJncmFwaChhcHBsaWNhdGlvbikgPT09IG5hbWUpKSk7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVzSW5GZWRlcmF0aW9uRGlyZWN0aXZlcyA9IHR5cGVzVXNlZEluRmVkZXJhdGlvbkRpcmVjdGl2ZShhcHBsaWNhdGlvbi5hcmd1bWVudHMoKS5rZXksIHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpc0VudGl0eVdpdGhLZXlJblN1YmdyYXBoOiB0cnVlLCB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXMgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlzRW50aXR5V2l0aEtleUluU3ViZ3JhcGg6IGZhbHNlLCB0eXBlc0luRmVkZXJhdGlvbkRpcmVjdGl2ZXM6IFtdIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbmNsdWRlVHlwZUluU3ViZ3JhcGggPSAodCwgbmFtZSkgPT4geyB2YXIgX2EsIF9iOyByZXR1cm4gKF9iID0gKF9hID0gcmVhY2hhYmxlVHlwZXNCeVN1YmdyYXBoLmdldChuYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhhcyh0Lm5hbWUpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTsgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgZmlsdGVyZWRUeXBlcyhzdXBlcmdyYXBoLCBqb2luU3BlYywgY29yZUZlYXR1cmVzLmNvcmVEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZUFwcGxpY2F0aW9ucyA9IHR5cGUuYXBwbGllZERpcmVjdGl2ZXNPZih0eXBlRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIGlmICghdHlwZUFwcGxpY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJncmFwaHNcbiAgICAgICAgICAgICAgICAgICAgLnZhbHVlcygpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHNnKSA9PiBpbmNsdWRlVHlwZUluU3ViZ3JhcGgodHlwZSwgc2cubmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoc2cgPT4gc2cuc2NoZW1hKS5mb3JFYWNoKHNjaGVtYSA9PiBzY2hlbWEuYWRkVHlwZSgoMCwgZGVmaW5pdGlvbnNfMS5uZXdOYW1lZFR5cGUpKHR5cGUua2luZCwgdHlwZS5uYW1lKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiB0eXBlQXBwbGljYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBhcHBsaWNhdGlvbi5hcmd1bWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViZ3JhcGhOYW1lID0gZ2V0U3ViZ3JhcGgoYXBwbGljYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWEgPSBzdWJncmFwaHMuZ2V0KHN1YmdyYXBoTmFtZSkuc2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViZ3JhcGhUeXBlID0gc2NoZW1hLnR5cGUodHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJncmFwaFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmdyYXBoVHlwZSA9IHNjaGVtYS5hZGRUeXBlKCgwLCBkZWZpbml0aW9uc18xLm5ld05hbWVkVHlwZSkodHlwZS5raW5kLCB0eXBlLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVzb2x2YWJsZSB9ID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHN1YmdyYXBoVHlwZS5hcHBseURpcmVjdGl2ZSgna2V5JywgeyAnZmllbGRzJzogYXJncy5rZXksIHJlc29sdmFibGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5leHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuc2V0T2ZFeHRlbnNpb24oc3ViZ3JhcGhUeXBlLm5ld0V4dGVuc2lvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgZmlsdGVyZWRUeXBlcyhzdXBlcmdyYXBoLCBqb2luU3BlYywgY29yZUZlYXR1cmVzLmNvcmVEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlLmtpbmQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdPYmplY3RUeXBlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdJbnRlcmZhY2VUeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkZWRJbnRlcmZhY2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGltcGxlbWVudHNBcHBsaWNhdGlvbnMgPSBpbXBsZW1lbnRzRGlyZWN0aXZlID8gdHlwZS5hcHBsaWVkRGlyZWN0aXZlc09mKGltcGxlbWVudHNEaXJlY3RpdmUpIDogW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXBwbGljYXRpb24gb2YgaW1wbGVtZW50c0FwcGxpY2F0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IGFwcGxpY2F0aW9uLmFyZ3VtZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViZ3JhcGggPSBzdWJncmFwaHMuZ2V0KGdyYXBoRW51bU5hbWVUb1N1YmdyYXBoTmFtZS5nZXQoYXJncy5ncmFwaCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gc3ViZ3JhcGguc2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hLnR5cGUodHlwZS5uYW1lKS5hZGRJbXBsZW1lbnRlZEludGVyZmFjZShhcmdzLmludGVyZmFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZEludGVyZmFjZXMucHVzaChhcmdzLmludGVyZmFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbXBsZW1lbnRhdGlvbnMgb2YgdHlwZS5pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGltcGxlbWVudGF0aW9ucy5pbnRlcmZhY2UubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWRkZWRJbnRlcmZhY2VzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJncmFwaCBvZiBzdWJncmFwaHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViZ3JhcGhUeXBlID0gc3ViZ3JhcGguc2NoZW1hLnR5cGUodHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViZ3JhcGhJdGYgPSBzdWJncmFwaC5zY2hlbWEudHlwZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YmdyYXBoVHlwZSAmJiBzdWJncmFwaEl0Zikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZ3JhcGhUeXBlLmFkZEltcGxlbWVudGVkSW50ZXJmYWNlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZEFwcGxpY2F0aW9ucyA9IGZpZWxkLmFwcGxpZWREaXJlY3RpdmVzT2YoZmllbGREaXJlY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWVsZEFwcGxpY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvd25lckFwcGxpY2F0aW9ucyA9IG93bmVyRGlyZWN0aXZlID8gdHlwZS5hcHBsaWVkRGlyZWN0aXZlc09mKG93bmVyRGlyZWN0aXZlKSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3duZXJBcHBsaWNhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkQmFzZVR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2Ygc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViZ3JhcGguc2NoZW1hLnR5cGUoZmllbGRCYXNlVHlwZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFN1YmdyYXBoRmllbGQoZmllbGQsIHN1YmdyYXBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShvd25lckFwcGxpY2F0aW9ucy5sZW5ndGggPT0gMSwgKCkgPT4gYEZvdW5kIG11bHRpcGxlIGpvaW5fX293bmVyIGRpcmVjdGl2ZXMgb24gdHlwZSAke3R5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YmdyYXBoID0gc3ViZ3JhcGhzLmdldChncmFwaEVudW1OYW1lVG9TdWJncmFwaE5hbWUuZ2V0KG93bmVyQXBwbGljYXRpb25zWzBdLmFyZ3VtZW50cygpLmdyYXBoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YmdyYXBoRmllbGQgPSBhZGRTdWJncmFwaEZpZWxkKGZpZWxkLCBzdWJncmFwaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoc3ViZ3JhcGhGaWVsZCwgKCkgPT4gYEZvdW5kIGpvaW5fX293bmVyIGRpcmVjdGl2ZSBvbiAke3R5cGV9IGJ1dCBubyBjb3JyZXNwb25kaW5nIGpvaW5fX3R5cGVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFwcGxpY2F0aW9uIG9mIGZpZWxkQXBwbGljYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBhcHBsaWNhdGlvbi5hcmd1bWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViZ3JhcGggPSBzdWJncmFwaHMuZ2V0KGdyYXBoRW51bU5hbWVUb1N1YmdyYXBoTmFtZS5nZXQoYXJncy5ncmFwaCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJncmFwaEZpZWxkID0gYWRkU3ViZ3JhcGhGaWVsZChmaWVsZCwgc3ViZ3JhcGgsIGFyZ3MudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3ViZ3JhcGhGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghaW5jbHVkZVR5cGVJblN1YmdyYXBoKHR5cGUsIHN1YmdyYXBoLm5hbWUpLCAoKSA9PiBgRm91bmQgam9pbl9fZmllbGQgZGlyZWN0aXZlIGZvciBncmFwaCAke3N1YmdyYXBoLm5hbWV9IG9uIGZpZWxkICR7ZmllbGQuY29vcmRpbmF0ZX0gYnV0IG5vIGNvcnJlc3BvbmRpbmcgam9pbl9fdHlwZSBvbiAke3R5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5yZXF1aXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZ3JhcGhGaWVsZC5hcHBseURpcmVjdGl2ZShzdWJncmFwaC5tZXRhZGF0YSgpLnJlcXVpcmVzRGlyZWN0aXZlKCksIHsgJ2ZpZWxkcyc6IGFyZ3MucmVxdWlyZXMgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MucHJvdmlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmdyYXBoRmllbGQuYXBwbHlEaXJlY3RpdmUoc3ViZ3JhcGgubWV0YWRhdGEoKS5wcm92aWRlc0RpcmVjdGl2ZSgpLCB7ICdmaWVsZHMnOiBhcmdzLnByb3ZpZGVzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmV4dGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJncmFwaEZpZWxkLmFwcGx5RGlyZWN0aXZlKHN1YmdyYXBoLm1ldGFkYXRhKCkuZXh0ZXJuYWxEaXJlY3RpdmUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MudXNlZE92ZXJyaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmdyYXBoRmllbGQuYXBwbHlEaXJlY3RpdmUoc3ViZ3JhcGgubWV0YWRhdGEoKS5leHRlcm5hbERpcmVjdGl2ZSgpLCB7ICdyZWFzb24nOiAnW292ZXJyaWRkZW5dJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5vdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZ3JhcGhGaWVsZC5hcHBseURpcmVjdGl2ZShzdWJncmFwaC5tZXRhZGF0YSgpLm92ZXJyaWRlRGlyZWN0aXZlKCksIHsgJ2Zyb20nOiBhcmdzLm92ZXJyaWRlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VudW1UeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJncmFwaCBvZiBzdWJncmFwaHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YmdyYXBoRW51bSA9IHN1YmdyYXBoLnNjaGVtYS50eXBlKHR5cGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YmdyYXBoRW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSgoMCwgZGVmaW5pdGlvbnNfMS5pc0VudW1UeXBlKShzdWJncmFwaEVudW0pLCAoKSA9PiBgJHtzdWJncmFwaEVudW19IHNob3VsZCBiZSBhbiBlbnVtIGJ1dCBmb3VuZCBhICR7c3ViZ3JhcGhFbnVtLmtpbmR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHR5cGUudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZ3JhcGhFbnVtLmFkZFZhbHVlKHZhbHVlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1VuaW9uVHlwZSc6XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2Ygc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJncmFwaFVuaW9uID0gc3ViZ3JhcGguc2NoZW1hLnR5cGUodHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3ViZ3JhcGhVbmlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSgoMCwgZGVmaW5pdGlvbnNfMS5pc1VuaW9uVHlwZSkoc3ViZ3JhcGhVbmlvbiksICgpID0+IGAke3N1YmdyYXBoVW5pb259IHNob3VsZCBiZSBhbiBlbnVtIGJ1dCBmb3VuZCBhICR7c3ViZ3JhcGhVbmlvbi5raW5kfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBtZW1iZXJUeXBlIG9mIHR5cGUudHlwZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YmdyYXBoVHlwZSA9IHN1YmdyYXBoLnNjaGVtYS50eXBlKG1lbWJlclR5cGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YmdyYXBoVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJncmFwaFVuaW9uLmFkZFR5cGUoc3ViZ3JhcGhUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsRXhlY3V0YWJsZURpcmVjdGl2ZXMgPSBzdXBlcmdyYXBoLmRpcmVjdGl2ZXMoKS5maWx0ZXIoKGRlZikgPT4gZGVmLmhhc0V4ZWN1dGFibGVMb2NhdGlvbnMoKSk7XG4gICAgICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2Ygc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICBpZiAoaXNGZWQxKSB7XG4gICAgICAgICAgICAgICAgYWRkRXh0ZXJuYWxGaWVsZHMoc3ViZ3JhcGgsIHN1cGVyZ3JhcGgsIGlzRmVkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgZmVkZXJhdGlvbl8xLnJlbW92ZUluYWN0aXZlUHJvdmlkZXNBbmRSZXF1aXJlcykoc3ViZ3JhcGguc2NoZW1hKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBzdWJncmFwaC5zY2hlbWEudHlwZXMoKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZS5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ09iamVjdFR5cGUnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdJbnRlcmZhY2VUeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHlwZS5oYXNGaWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUucmVtb3ZlUmVjdXJzaXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVW5pb25UeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLm1lbWJlcnNDb3VudCgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5yZW1vdmVSZWN1cnNpdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBhbGxFeGVjdXRhYmxlRGlyZWN0aXZlcykge1xuICAgICAgICAgICAgICAgICgwLCBkZWZpbml0aW9uc18xLmNvcHlEaXJlY3RpdmVEZWZpbml0aW9uVG9TY2hlbWEpKHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hOiBzdWJncmFwaC5zY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIGNvcHlEaXJlY3RpdmVBcHBsaWNhdGlvbnNJbkFyZ3VtZW50czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uRmlsdGVyOiAobG9jKSA9PiAoMCwgZGVmaW5pdGlvbnNfMS5pc0V4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvbikobG9jKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGZWQxKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YmdyYXBoIG9mIHN1YmdyYXBocykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRmIG9mIHN1YmdyYXBoLnNjaGVtYS5pbnRlcmZhY2VUeXBlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGltcGxlbWVudGF0aW9ucyA9IGl0Zi5wb3NzaWJsZVJ1bnRpbWVUeXBlcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGl0Zi5maWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbXBsZW1lbnRhdGlvbnMuZXZlcnkoaW1wbGVtID0+IGltcGxlbS5maWVsZChmaWVsZC5uYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0Zi5oYXNGaWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRmLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2Ygc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN1YmdyYXBoLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTdWJncmFwaEV4dHJhY3Rpb25FcnJvcihlLCBzdWJncmFwaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YmdyYXBocztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgbGV0IGVycm9yID0gZTtcbiAgICAgICAgbGV0IHN1YmdyYXBoID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFN1YmdyYXBoRXh0cmFjdGlvbkVycm9yKSB7XG4gICAgICAgICAgICBlcnJvciA9IGUub3JpZ2luYWxFcnJvcjtcbiAgICAgICAgICAgIHN1YmdyYXBoID0gZS5zdWJncmFwaDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbXBhY3RlZCA9IHN1YmdyYXBoID8gYHN1YmdyYXBoIFwiJHtzdWJncmFwaC5uYW1lfVwiYCA6ICdzdWJncmFwaHMnO1xuICAgICAgICBpZiAoaXNGZWQxKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgRXJyb3IgZXh0cmFjdGluZyAke2ltcGFjdGVkfSBmcm9tIHRoZSBzdXBlcmdyYXBoOiB0aGlzIG1pZ2h0IGJlIGR1ZSB0byBlcnJvcnMgaW4gc3ViZ3JhcGhzIHRoYXQgd2VyZSBtaXN0YWtlbmx5IGlnbm9yZWQgYnkgZmVkZXJhdGlvbiAwLnggdmVyc2lvbnMgYnV0IGFyZSByZWplY3RlZCBieSBmZWRlcmF0aW9uIDIuXFxuYFxuICAgICAgICAgICAgICAgICsgJ1BsZWFzZSB0cnkgY29tcG9zaW5nIHlvdXIgc3ViZ3JhcGhzIHdpdGggZmVkZXJhdGlvbiAyOiB0aGlzIHNob3VsZCBoZWxwIHByZWNpc2VseSBwaW5wb2ludCB0aGUgcHJvYmxlbXMgYW5kLCBvbmNlIGZpeGVkLCBnZW5lcmF0ZSBhIGNvcnJlY3QgZmVkZXJhdGlvbiAyIHN1cGVyZ3JhcGgnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21zZ30uXFxuXFxuRGV0YWlsczpcXG4ke2Vycm9yVG9TdHJpbmcoZXJyb3IpfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFVuZXhwZWN0ZWQgZXJyb3IgZXh0cmFjdGluZyAke2ltcGFjdGVkfSBmcm9tIHRoZSBzdXBlcmdyYXBoOiB0aGlzIGlzIGVpdGhlciBhIGJ1Zywgb3IgdGhlIHN1cGVyZ3JhcGggaGFzIGJlZW4gY29ycnVwdGVkYDtcbiAgICAgICAgICAgIGNvbnN0IGR1bXBNc2cgPSBzdWJncmFwaCA/ICdcXG5cXG4nICsgbWF5YmVEdW1wU3ViZ3JhcGhTY2hlbWEoc3ViZ3JhcGgpIDogJyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bXNnfS5cXG5cXG5EZXRhaWxzOlxcbiR7ZXJyb3JUb1N0cmluZyhlcnJvcil9JHtkdW1wTXNnfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5leHRyYWN0U3ViZ3JhcGhzRnJvbVN1cGVyZ3JhcGggPSBleHRyYWN0U3ViZ3JhcGhzRnJvbVN1cGVyZ3JhcGg7XG5jb25zdCBERUJVR19TVUJHUkFQSFNfRU5WX1ZBUklBQkxFX05BTUUgPSAnQVBPTExPX0ZFREVSQVRJT05fREVCVUdfU1VCR1JBUEhTJztcbmZ1bmN0aW9uIG1heWJlRHVtcFN1YmdyYXBoU2NoZW1hKHN1YmdyYXBoKSB7XG4gICAgY29uc3Qgc2hvdWxkRHVtcCA9ICEhKDAsIHV0aWxzXzIudmFsaWRhdGVTdHJpbmdDb250YWluc0Jvb2xlYW4pKHByb2Nlc3MuZW52W0RFQlVHX1NVQkdSQVBIU19FTlZfVkFSSUFCTEVfTkFNRV0pO1xuICAgIGlmICghc2hvdWxkRHVtcCkge1xuICAgICAgICByZXR1cm4gYFJlLXJ1biB3aXRoIGVudmlyb25tZW50IHZhcmlhYmxlICcke0RFQlVHX1NVQkdSQVBIU19FTlZfVkFSSUFCTEVfTkFNRX0nIHNldCB0byAndHJ1ZScgdG8gZXh0cmFjdCB0aGUgaW52YWxpZCBzdWJncmFwaGA7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gYGV4dHJhY3RlZC1zdWJncmFwaC0ke3N1YmdyYXBoLm5hbWV9LSR7RGF0ZS5ub3coKX0uZ3JhcGhxbGA7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBwYXRoXzEuZGVmYXVsdC5yZXNvbHZlKGZpbGVuYW1lKTtcbiAgICAgICAgaWYgKGZzXzEuZGVmYXVsdC5leGlzdHNTeW5jKGZpbGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbmRpZGF0ZSBmaWxlICR7ZmlsZW5hbWV9IGFscmVhZHkgZXhpc3RlZGApO1xuICAgICAgICB9XG4gICAgICAgIGZzXzEuZGVmYXVsdC53cml0ZUZpbGVTeW5jKGZpbGUsICgwLCBwcmludF8xLnByaW50U2NoZW1hKShzdWJncmFwaC5zY2hlbWEpKTtcbiAgICAgICAgcmV0dXJuIGBUaGUgKGludmFsaWQpIGV4dHJhY3RlZCBzdWJncmFwaCBoYXMgYmVlbiB3cml0dGVuIGluOiAke2ZpbGV9LmA7XG4gICAgfVxuICAgIGNhdGNoIChlMikge1xuICAgICAgICByZXR1cm4gYFdhcyBub3QgYWJsZSB0byBwcmludCBnZW5lcmF0ZWQgc3ViZ3JhcGggZm9yIFwiJHtzdWJncmFwaC5uYW1lfVwiIGJlY2F1c2U6ICR7ZXJyb3JUb1N0cmluZyhlMil9YDtcbiAgICB9XG59XG5mdW5jdGlvbiBlcnJvclRvU3RyaW5nKGUpIHtcbiAgICBjb25zdCBjYXVzZXMgPSAoMCwgXzEuZXJyb3JDYXVzZXMpKGUpO1xuICAgIHJldHVybiBjYXVzZXMgPyAoMCwgXzEucHJpbnRFcnJvcnMpKGNhdXNlcykgOiBTdHJpbmcoZSk7XG59XG5mdW5jdGlvbiBhZGRTdWJncmFwaEZpZWxkKHN1cGVyZ3JhcGhGaWVsZCwgc3ViZ3JhcGgsIGVuY29kZWRUeXBlKSB7XG4gICAgaWYgKHN1cGVyZ3JhcGhGaWVsZCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRmllbGREZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJncmFwaE9iamVjdE9ySW50ZXJmYWNlRmllbGQoc3VwZXJncmFwaEZpZWxkLCBzdWJncmFwaCwgZW5jb2RlZFR5cGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YmdyYXBoSW5wdXRGaWVsZChzdXBlcmdyYXBoRmllbGQsIHN1YmdyYXBoLCBlbmNvZGVkVHlwZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkU3ViZ3JhcGhPYmplY3RPckludGVyZmFjZUZpZWxkKHN1cGVyZ3JhcGhGaWVsZCwgc3ViZ3JhcGgsIGVuY29kZWRUeXBlKSB7XG4gICAgY29uc3Qgc3ViZ3JhcGhUeXBlID0gc3ViZ3JhcGguc2NoZW1hLnR5cGUoc3VwZXJncmFwaEZpZWxkLnBhcmVudC5uYW1lKTtcbiAgICBpZiAoc3ViZ3JhcGhUeXBlKSB7XG4gICAgICAgIGNvbnN0IGNvcGllZFR5cGUgPSBlbmNvZGVkVHlwZVxuICAgICAgICAgICAgPyBkZWNvZGVUeXBlKGVuY29kZWRUeXBlLCBzdWJncmFwaC5zY2hlbWEsIHN1YmdyYXBoLm5hbWUpXG4gICAgICAgICAgICA6IGNvcHlUeXBlKHN1cGVyZ3JhcGhGaWVsZC50eXBlLCBzdWJncmFwaC5zY2hlbWEsIHN1YmdyYXBoLm5hbWUpO1xuICAgICAgICBjb25zdCBmaWVsZCA9IHN1YmdyYXBoVHlwZS5hZGRGaWVsZChzdXBlcmdyYXBoRmllbGQubmFtZSwgY29waWVkVHlwZSk7XG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIHN1cGVyZ3JhcGhGaWVsZC5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgZmllbGQuYWRkQXJndW1lbnQoYXJnLm5hbWUsIGNvcHlUeXBlKGFyZy50eXBlLCBzdWJncmFwaC5zY2hlbWEsIHN1YmdyYXBoLm5hbWUpLCBhcmcuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFN1YmdyYXBoSW5wdXRGaWVsZChzdXBlcmdyYXBoRmllbGQsIHN1YmdyYXBoLCBlbmNvZGVkVHlwZSkge1xuICAgIGNvbnN0IHN1YmdyYXBoVHlwZSA9IHN1YmdyYXBoLnNjaGVtYS50eXBlKHN1cGVyZ3JhcGhGaWVsZC5wYXJlbnQubmFtZSk7XG4gICAgaWYgKHN1YmdyYXBoVHlwZSkge1xuICAgICAgICBjb25zdCBjb3BpZWRUeXBlID0gZW5jb2RlZFR5cGVcbiAgICAgICAgICAgID8gZGVjb2RlVHlwZShlbmNvZGVkVHlwZSwgc3ViZ3JhcGguc2NoZW1hLCBzdWJncmFwaC5uYW1lKVxuICAgICAgICAgICAgOiBjb3B5VHlwZShzdXBlcmdyYXBoRmllbGQudHlwZSwgc3ViZ3JhcGguc2NoZW1hLCBzdWJncmFwaC5uYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1YmdyYXBoVHlwZS5hZGRGaWVsZChzdXBlcmdyYXBoRmllbGQubmFtZSwgY29waWVkVHlwZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlY29kZVR5cGUoZW5jb2RlZFR5cGUsIHN1YmdyYXBoLCBzdWJncmFwaE5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gKDAsIGJ1aWxkU2NoZW1hXzEuYnVpbHRUeXBlUmVmZXJlbmNlKShlbmNvZGVkVHlwZSwgc3ViZ3JhcGgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCAoKSA9PiBgQ2Fubm90IHBhcnNlIHR5cGUgXCIke2VuY29kZWRUeXBlfVwiIGluIHN1YmdyYXBoICR7c3ViZ3JhcGhOYW1lfTogJHtlfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvcHlUeXBlKHR5cGUsIHN1YmdyYXBoLCBzdWJncmFwaE5hbWUpIHtcbiAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICBjYXNlICdMaXN0VHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUoY29weVR5cGUodHlwZS5vZlR5cGUsIHN1YmdyYXBoLCBzdWJncmFwaE5hbWUpKTtcbiAgICAgICAgY2FzZSAnTm9uTnVsbFR5cGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGNvcHlUeXBlKHR5cGUub2ZUeXBlLCBzdWJncmFwaCwgc3ViZ3JhcGhOYW1lKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBzdWJncmFwaFR5cGUgPSBzdWJncmFwaC50eXBlKHR5cGUubmFtZSk7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHN1YmdyYXBoVHlwZSwgKCkgPT4gYENhbm5vdCBmaW5kIHR5cGUgXCIke3R5cGUubmFtZX1cIiBpbiBzdWJncmFwaCBcIiR7c3ViZ3JhcGhOYW1lfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gc3ViZ3JhcGhUeXBlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEV4dGVybmFsRmllbGRzKHN1YmdyYXBoLCBzdXBlcmdyYXBoLCBpc0ZlZDEpIHtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHN1YmdyYXBoLm1ldGFkYXRhKCk7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIHN1YmdyYXBoLnNjaGVtYS50eXBlcygpKSB7XG4gICAgICAgIGlmICghKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKSh0eXBlKSAmJiAhKDAsIGRlZmluaXRpb25zXzEuaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXlBcHBsaWNhdGlvbiBvZiB0eXBlLmFwcGxpZWREaXJlY3RpdmVzT2YobWV0YWRhdGEua2V5RGlyZWN0aXZlKCkpKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JjZU5vbkV4dGVybmFsID0gaXNGZWQxIHx8ICEha2V5QXBwbGljYXRpb24ub2ZFeHRlbnNpb24oKTtcbiAgICAgICAgICAgIGFkZEV4dGVybmFsRmllbGRzRnJvbURpcmVjdGl2ZUZpZWxkU2V0KHN1YmdyYXBoLCB0eXBlLCBrZXlBcHBsaWNhdGlvbiwgc3VwZXJncmFwaCwgZm9yY2VOb25FeHRlcm5hbCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVpcmVzQXBwbGljYXRpb24gb2YgZmllbGQuYXBwbGllZERpcmVjdGl2ZXNPZihtZXRhZGF0YS5yZXF1aXJlc0RpcmVjdGl2ZSgpKSkge1xuICAgICAgICAgICAgICAgIGFkZEV4dGVybmFsRmllbGRzRnJvbURpcmVjdGl2ZUZpZWxkU2V0KHN1YmdyYXBoLCB0eXBlLCByZXF1aXJlc0FwcGxpY2F0aW9uLCBzdXBlcmdyYXBoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkQmFzZVR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVzQXBwbGljYXRpb24gb2YgZmllbGQuYXBwbGllZERpcmVjdGl2ZXNPZihtZXRhZGF0YS5wcm92aWRlc0RpcmVjdGl2ZSgpKSkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKShmaWVsZEJhc2VUeXBlKSB8fCAoMCwgZGVmaW5pdGlvbnNfMS5pc0ludGVyZmFjZVR5cGUpKGZpZWxkQmFzZVR5cGUpLCAoKSA9PiBgRm91bmQgQHByb3ZpZGVzIG9uIGZpZWxkICR7ZmllbGQuY29vcmRpbmF0ZX0gd2hvc2UgdHlwZSAke2ZpZWxkLnR5cGV9ICgke2ZpZWxkQmFzZVR5cGUua2luZH0pIGlzIG5vdCBhbiBvYmplY3Qgb3IgaW50ZXJmYWNlIGApO1xuICAgICAgICAgICAgICAgIGFkZEV4dGVybmFsRmllbGRzRnJvbURpcmVjdGl2ZUZpZWxkU2V0KHN1YmdyYXBoLCBmaWVsZEJhc2VUeXBlLCBwcm92aWRlc0FwcGxpY2F0aW9uLCBzdXBlcmdyYXBoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRFeHRlcm5hbEZpZWxkc0Zyb21JbnRlcmZhY2UobWV0YWRhdGEsIHR5cGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEV4dGVybmFsRmllbGRzRnJvbURpcmVjdGl2ZUZpZWxkU2V0KHN1YmdyYXBoLCBwYXJlbnRUeXBlLCBkaXJlY3RpdmUsIHN1cGVyZ3JhcGgsIGZvcmNlTm9uRXh0ZXJuYWwgPSBmYWxzZSkge1xuICAgIGNvbnN0IGV4dGVybmFsID0gc3ViZ3JhcGgubWV0YWRhdGEoKS5leHRlcm5hbERpcmVjdGl2ZSgpO1xuICAgIGNvbnN0IGZpZWxkQWNjZXNzb3IgPSBmdW5jdGlvbiAodHlwZSwgZmllbGROYW1lKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdHlwZS5maWVsZChmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIGlmIChmb3JjZU5vbkV4dGVybmFsICYmIGZpZWxkLmhhc0FwcGxpZWREaXJlY3RpdmUoZXh0ZXJuYWwpKSB7XG4gICAgICAgICAgICAgICAgZmllbGQuYXBwbGllZERpcmVjdGl2ZXNPZihleHRlcm5hbCkuZm9yRWFjaChkID0+IGQucmVtb3ZlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoISgwLCBkZWZpbml0aW9uc18xLmlzVW5pb25UeXBlKSh0eXBlKSwgKCkgPT4gYFNob3VsZG4ndCBzZWxlY3QgZmllbGQgJHtmaWVsZE5hbWV9IGZyb20gdW5pb24gdHlwZSAke3R5cGV9YCk7XG4gICAgICAgIGNvbnN0IHN1cGVyZ3JhcGhUeXBlID0gc3VwZXJncmFwaC50eXBlKHR5cGUubmFtZSk7XG4gICAgICAgIGNvbnN0IHN1cGVyZ3JhcGhGaWVsZCA9IHN1cGVyZ3JhcGhUeXBlLmZpZWxkKGZpZWxkTmFtZSk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoc3VwZXJncmFwaEZpZWxkLCAoKSA9PiBgTm8gZmllbGQgbmFtZWQgJHtmaWVsZE5hbWV9IGZvdW5kIG9uIHR5cGUgJHt0eXBlLm5hbWV9IGluIHRoZSBzdXBlcmdyYXBoYCk7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBhZGRTdWJncmFwaE9iamVjdE9ySW50ZXJmYWNlRmllbGQoc3VwZXJncmFwaEZpZWxkLCBzdWJncmFwaCk7XG4gICAgICAgIGlmICghZm9yY2VOb25FeHRlcm5hbCkge1xuICAgICAgICAgICAgY3JlYXRlZC5hcHBseURpcmVjdGl2ZShleHRlcm5hbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgICAoMCwgZmVkZXJhdGlvbl8xLnBhcnNlRmllbGRTZXRBcmd1bWVudCkoeyBwYXJlbnRUeXBlLCBkaXJlY3RpdmUsIGZpZWxkQWNjZXNzb3IsIHZhbGlkYXRlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRFeHRlcm5hbEZpZWxkc0Zyb21JbnRlcmZhY2UobWV0YWRhdGEsIHR5cGUpIHtcbiAgICBmb3IgKGNvbnN0IGl0ZiBvZiB0eXBlLmludGVyZmFjZXMoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGl0Zi5maWVsZHMoKSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZUZpZWxkID0gdHlwZS5maWVsZChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgIGlmICghdHlwZUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgY29weUZpZWxkQXNFeHRlcm5hbChtZXRhZGF0YSwgZmllbGQsIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZUZpZWxkLmhhc0FwcGxpZWREaXJlY3RpdmUobWV0YWRhdGEuZXh0ZXJuYWxEaXJlY3RpdmUoKSkpIHtcbiAgICAgICAgICAgICAgICBtYXliZVVwZGF0ZUZpZWxkRm9ySW50ZXJmYWNlKHR5cGVGaWVsZCwgZmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY29weUZpZWxkQXNFeHRlcm5hbChtZXRhZGF0YSwgZmllbGQsIHR5cGUpIHtcbiAgICBjb25zdCBuZXdGaWVsZCA9IHR5cGUuYWRkRmllbGQoZmllbGQubmFtZSwgZmllbGQudHlwZSk7XG4gICAgZm9yIChjb25zdCBhcmcgb2YgZmllbGQuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgbmV3RmllbGQuYWRkQXJndW1lbnQoYXJnLm5hbWUsIGFyZy50eXBlLCBhcmcuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG4gICAgbmV3RmllbGQuYXBwbHlEaXJlY3RpdmUobWV0YWRhdGEuZXh0ZXJuYWxEaXJlY3RpdmUoKSk7XG59XG5mdW5jdGlvbiBtYXliZVVwZGF0ZUZpZWxkRm9ySW50ZXJmYWNlKHRvTW9kaWZ5LCBpdGZGaWVsZCkge1xuICAgIGlmICghKDAsIHR5cGVzXzEuaXNTdWJ0eXBlKShpdGZGaWVsZC50eXBlLCB0b01vZGlmeS50eXBlKSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCgwLCB0eXBlc18xLmlzU3VidHlwZSkodG9Nb2RpZnkudHlwZSwgaXRmRmllbGQudHlwZSksICgpID0+IGBGb3IgJHt0b01vZGlmeS5jb29yZGluYXRlfSwgZXhwZWN0ZWQgJHtpdGZGaWVsZC50eXBlfSBhbmQgJHt0b01vZGlmeS50eXBlfSB0byBiZSBpbiBhIHN1YnR5cGluZyByZWxhdGlvbnNoaXBgKTtcbiAgICAgICAgdG9Nb2RpZnkudHlwZSA9IGl0ZkZpZWxkLnR5cGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFN1YmdyYXBoc0Zyb21TdXBlcmdyYXBoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmVJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXMgPSBleHBvcnRzLmFkZFN1YmdyYXBoVG9FcnJvciA9IGV4cG9ydHMuYWRkU3ViZ3JhcGhUb0FTVE5vZGUgPSBleHBvcnRzLlN1YmdyYXBoID0gZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9GSUVMRFMgPSBleHBvcnRzLmVudGl0aWVzRmllbGROYW1lID0gZXhwb3J0cy5zZXJ2aWNlRmllbGROYW1lID0gZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9UWVBFUyA9IGV4cG9ydHMuZW50aXR5VHlwZVNwZWMgPSBleHBvcnRzLnNlcnZpY2VUeXBlU3BlYyA9IGV4cG9ydHMuYW55VHlwZVNwZWMgPSBleHBvcnRzLlN1YmdyYXBocyA9IGV4cG9ydHMuc3ViZ3JhcGhzRnJvbVNlcnZpY2VMaXN0ID0gZXhwb3J0cy5jb2xsZWN0VGFyZ2V0RmllbGRzID0gZXhwb3J0cy5wYXJzZUZpZWxkU2V0QXJndW1lbnQgPSBleHBvcnRzLm5ld0VtcHR5RmVkZXJhdGlvbjJTY2hlbWEgPSBleHBvcnRzLmJ1aWxkU3ViZ3JhcGggPSBleHBvcnRzLmlzRW50aXR5VHlwZSA9IGV4cG9ydHMuaXNGZWRlcmF0aW9uRmllbGQgPSBleHBvcnRzLmlzRmVkZXJhdGlvblN1YmdyYXBoU2NoZW1hID0gZXhwb3J0cy5mZWRlcmF0aW9uTWV0YWRhdGEgPSBleHBvcnRzLnByaW50U3ViZ3JhcGhOYW1lcyA9IGV4cG9ydHMuYXNGZWQyU3ViZ3JhcGhEb2N1bWVudCA9IGV4cG9ydHMuRkVERVJBVElPTjJfTElOS19XVEhfRlVMTF9JTVBPUlRTID0gZXhwb3J0cy5zZXRTY2hlbWFBc0ZlZDJTdWJncmFwaCA9IGV4cG9ydHMuRmVkZXJhdGlvbkJsdWVwcmludCA9IGV4cG9ydHMuRmVkZXJhdGlvbk1ldGFkYXRhID0gZXhwb3J0cy5jb2xsZWN0VXNlZEZpZWxkcyA9IGV4cG9ydHMuRkVERVJBVElPTl9VTk5BTUVEX1NVQkdSQVBIX05BTUUgPSBleHBvcnRzLkZFREVSQVRJT05fUkVTRVJWRURfU1VCR1JBUEhfTkFNRSA9IHZvaWQgMDtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IHNwZWNpZmllZFJ1bGVzXzEgPSByZXF1aXJlKFwiZ3JhcGhxbC92YWxpZGF0aW9uL3NwZWNpZmllZFJ1bGVzXCIpO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBLbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRpb24vS25vd25UeXBlTmFtZXNJbkZlZGVyYXRpb25SdWxlXCIpO1xuY29uc3QgYnVpbGRTY2hlbWFfMSA9IHJlcXVpcmUoXCIuL2J1aWxkU2NoZW1hXCIpO1xuY29uc3Qgb3BlcmF0aW9uc18xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uc1wiKTtcbmNvbnN0IHRhZ1NwZWNfMSA9IHJlcXVpcmUoXCIuL3RhZ1NwZWNcIik7XG5jb25zdCBpbmFjY2Vzc2libGVTcGVjXzEgPSByZXF1aXJlKFwiLi9pbmFjY2Vzc2libGVTcGVjXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgcHJlY29tcHV0ZV8xID0gcmVxdWlyZShcIi4vcHJlY29tcHV0ZVwiKTtcbmNvbnN0IGNvcmVTcGVjXzEgPSByZXF1aXJlKFwiLi9jb3JlU3BlY1wiKTtcbmNvbnN0IGZlZGVyYXRpb25TcGVjXzEgPSByZXF1aXJlKFwiLi9mZWRlcmF0aW9uU3BlY1wiKTtcbmNvbnN0IHByaW50XzEgPSByZXF1aXJlKFwiLi9wcmludFwiKTtcbmNvbnN0IGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvblwiKTtcbmNvbnN0IHN1Z2dlc3Rpb25zXzEgPSByZXF1aXJlKFwiLi9zdWdnZXN0aW9uc1wiKTtcbmNvbnN0IGxpbmtTcGVjID0gY29yZVNwZWNfMS5MSU5LX1ZFUlNJT05TLmxhdGVzdCgpO1xuY29uc3QgdGFnU3BlYyA9IHRhZ1NwZWNfMS5UQUdfVkVSU0lPTlMubGF0ZXN0KCk7XG5jb25zdCBpbmFjY2Vzc2libGVTcGVjID0gaW5hY2Nlc3NpYmxlU3BlY18xLklOQUNDRVNTSUJMRV9WRVJTSU9OUy5sYXRlc3QoKTtcbmNvbnN0IGZlZGVyYXRpb25TcGVjID0gZmVkZXJhdGlvblNwZWNfMS5GRURFUkFUSU9OX1ZFUlNJT05TLmxhdGVzdCgpO1xuZXhwb3J0cy5GRURFUkFUSU9OX1JFU0VSVkVEX1NVQkdSQVBIX05BTUUgPSAnXyc7XG5leHBvcnRzLkZFREVSQVRJT05fVU5OQU1FRF9TVUJHUkFQSF9OQU1FID0gJzx1bm5hbWVkPic7XG5jb25zdCBGRURFUkFUSU9OX09NSVRURURfVkFMSURBVElPTl9SVUxFUyA9IFtcbiAgICBncmFwaHFsXzEuUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUsXG4gICAgZ3JhcGhxbF8xLktub3duVHlwZU5hbWVzUnVsZVxuXTtcbmNvbnN0IEZFREVSQVRJT05fU1BFQ0lGSUNfVkFMSURBVElPTl9SVUxFUyA9IFtcbiAgICBLbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGVfMS5Lbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGVcbl07XG5jb25zdCBGRURFUkFUSU9OX1ZBTElEQVRJT05fUlVMRVMgPSBzcGVjaWZpZWRSdWxlc18xLnNwZWNpZmllZFNETFJ1bGVzLmZpbHRlcihydWxlID0+ICFGRURFUkFUSU9OX09NSVRURURfVkFMSURBVElPTl9SVUxFUy5pbmNsdWRlcyhydWxlKSkuY29uY2F0KEZFREVSQVRJT05fU1BFQ0lGSUNfVkFMSURBVElPTl9SVUxFUyk7XG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkU2V0U2VsZWN0aW9ucyh7IGRpcmVjdGl2ZU5hbWUsIHNlbGVjdGlvblNldCwgaGFzRXh0ZXJuYWxJblBhcmVudHMsIG1ldGFkYXRhLCBvbkVycm9yLCBhbGxvd09uTm9uRXh0ZXJuYWxMZWFmRmllbGRzLCBhbGxvd0ZpZWxkc1dpdGhBcmd1bWVudHMsIH0pIHtcbiAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucygpKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpZWREaXJlY3RpdmVzID0gc2VsZWN0aW9uLmVsZW1lbnQoKS5hcHBsaWVkRGlyZWN0aXZlcztcbiAgICAgICAgaWYgKGFwcGxpZWREaXJlY3RpdmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyb3JfMS5FUlJPUl9DQVRFR09SSUVTLkRJUkVDVElWRV9JTl9GSUVMRFNfQVJHLmdldChkaXJlY3RpdmVOYW1lKS5lcnIoYGNhbm5vdCBoYXZlIGRpcmVjdGl2ZSBhcHBsaWNhdGlvbnMgaW4gdGhlIEAke2RpcmVjdGl2ZU5hbWV9KGZpZWxkczopIGFyZ3VtZW50IGJ1dCBmb3VuZCAke2FwcGxpZWREaXJlY3RpdmVzLmpvaW4oJywgJyl9LmApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09ICdGaWVsZFNlbGVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gc2VsZWN0aW9uLmVsZW1lbnQoKS5kZWZpbml0aW9uO1xuICAgICAgICAgICAgY29uc3QgaXNFeHRlcm5hbCA9IG1ldGFkYXRhLmlzRmllbGRFeHRlcm5hbChmaWVsZCk7XG4gICAgICAgICAgICBpZiAoIWFsbG93RmllbGRzV2l0aEFyZ3VtZW50cyAmJiBmaWVsZC5oYXNBcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3JfMS5FUlJPUl9DQVRFR09SSUVTLkZJRUxEU19IQVNfQVJHUy5nZXQoZGlyZWN0aXZlTmFtZSkuZXJyKGBmaWVsZCAke2ZpZWxkLmNvb3JkaW5hdGV9IGNhbm5vdCBiZSBpbmNsdWRlZCBiZWNhdXNlIGl0IGhhcyBhcmd1bWVudHMgKGZpZWxkcyB3aXRoIGFyZ3VtZW50IGFyZSBub3QgYWxsb3dlZCBpbiBAJHtkaXJlY3RpdmVOYW1lfSlgLCB7IG5vZGVzOiBmaWVsZC5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbXVzdEJlRXh0ZXJuYWwgPSAhc2VsZWN0aW9uLnNlbGVjdGlvblNldCAmJiAhYWxsb3dPbk5vbkV4dGVybmFsTGVhZkZpZWxkcyAmJiAhaGFzRXh0ZXJuYWxJblBhcmVudHM7XG4gICAgICAgICAgICBpZiAoIWlzRXh0ZXJuYWwgJiYgbXVzdEJlRXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSBlcnJvcl8xLkVSUk9SX0NBVEVHT1JJRVMuRElSRUNUSVZFX0ZJRUxEU19NSVNTSU5HX0VYVEVSTkFMLmdldChkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuaXNGaWVsZEZha2VFeHRlcm5hbChmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvckNvZGUuZXJyKGBmaWVsZCBcIiR7ZmllbGQuY29vcmRpbmF0ZX1cIiBzaG91bGQgbm90IGJlIHBhcnQgb2YgYSBAJHtkaXJlY3RpdmVOYW1lfSBzaW5jZSBpdCBpcyBhbHJlYWR5IFwiZWZmZWN0aXZlbHlcIiBwcm92aWRlZCBieSB0aGlzIHN1YmdyYXBoIGBcbiAgICAgICAgICAgICAgICAgICAgICAgICsgYCh3aGlsZSBpdCBpcyBtYXJrZWQgQCR7ZmVkZXJhdGlvblNwZWNfMS5leHRlcm5hbERpcmVjdGl2ZVNwZWMubmFtZX0sIGl0IGlzIGEgQCR7ZmVkZXJhdGlvblNwZWNfMS5rZXlEaXJlY3RpdmVTcGVjLm5hbWV9IGZpZWxkIG9mIGFuIGV4dGVuc2lvbiB0eXBlLCB3aGljaCBhcmUgbm90IGludGVybmFsbHkgY29uc2lkZXJlZCBleHRlcm5hbCBmb3IgaGlzdG9yaWNhbC9iYWNrd2FyZCBjb21wYXRpYmlsaXR5IHJlYXNvbnMpYCwgeyBub2RlczogZmllbGQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3JDb2RlLmVycihgZmllbGQgXCIke2ZpZWxkLmNvb3JkaW5hdGV9XCIgc2hvdWxkIG5vdCBiZSBwYXJ0IG9mIGEgQCR7ZGlyZWN0aXZlTmFtZX0gc2luY2UgaXQgaXMgYWxyZWFkeSBwcm92aWRlZCBieSB0aGlzIHN1YmdyYXBoIChpdCBpcyBub3QgbWFya2VkIEAke2ZlZGVyYXRpb25TcGVjXzEuZXh0ZXJuYWxEaXJlY3RpdmVTcGVjLm5hbWV9KWAsIHsgbm9kZXM6IGZpZWxkLnNvdXJjZUFTVCB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3SGFzRXh0ZXJuYWxJblBhcmVudHMgPSBoYXNFeHRlcm5hbEluUGFyZW50cyB8fCBpc0V4dGVybmFsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBmaWVsZC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdIYXNFeHRlcm5hbEluUGFyZW50cyAmJiAoMCwgZGVmaW5pdGlvbnNfMS5pc0ludGVyZmFjZVR5cGUpKHBhcmVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1wbGVtIG9mIHBhcmVudFR5cGUucG9zc2libGVSdW50aW1lVHlwZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRJbkltcGxlbSA9IGltcGxlbS5maWVsZChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZEluSW1wbGVtICYmIG1ldGFkYXRhLmlzRmllbGRFeHRlcm5hbChmaWVsZEluSW1wbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0hhc0V4dGVybmFsSW5QYXJlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUZpZWxkU2V0U2VsZWN0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblNldDogc2VsZWN0aW9uLnNlbGVjdGlvblNldCxcbiAgICAgICAgICAgICAgICAgICAgaGFzRXh0ZXJuYWxJblBhcmVudHM6IG5ld0hhc0V4dGVybmFsSW5QYXJlbnRzLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dPbk5vbkV4dGVybmFsTGVhZkZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dGaWVsZHNXaXRoQXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsaWRhdGVGaWVsZFNldFNlbGVjdGlvbnMoe1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uU2V0OiBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgICAgICAgICAgIGhhc0V4dGVybmFsSW5QYXJlbnRzLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICAgICAgYWxsb3dPbk5vbkV4dGVybmFsTGVhZkZpZWxkcyxcbiAgICAgICAgICAgICAgICBhbGxvd0ZpZWxkc1dpdGhBcmd1bWVudHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRmllbGRTZXQoeyB0eXBlLCBkaXJlY3RpdmUsIG1ldGFkYXRhLCBlcnJvckNvbGxlY3RvciwgYWxsb3dPbk5vbkV4dGVybmFsTGVhZkZpZWxkcywgYWxsb3dGaWVsZHNXaXRoQXJndW1lbnRzLCBvbkZpZWxkcywgfSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpZWxkQWNjZXNzb3IgPSBvbkZpZWxkc1xuICAgICAgICAgICAgPyAodHlwZSwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0eXBlLmZpZWxkKGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRmllbGRzKGZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IHBhcnNlRmllbGRTZXRBcmd1bWVudCh7IHBhcmVudFR5cGU6IHR5cGUsIGRpcmVjdGl2ZSwgZmllbGRBY2Nlc3NvciB9KTtcbiAgICAgICAgdmFsaWRhdGVGaWVsZFNldFNlbGVjdGlvbnMoe1xuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZTogZGlyZWN0aXZlLm5hbWUsXG4gICAgICAgICAgICBzZWxlY3Rpb25TZXQsXG4gICAgICAgICAgICBoYXNFeHRlcm5hbEluUGFyZW50czogZmFsc2UsXG4gICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcikgPT4gZXJyb3JDb2xsZWN0b3IucHVzaChoYW5kbGVGaWVsZFNldFZhbGlkYXRpb25FcnJvcihkaXJlY3RpdmUsIGVycm9yKSksXG4gICAgICAgICAgICBhbGxvd09uTm9uRXh0ZXJuYWxMZWFmRmllbGRzLFxuICAgICAgICAgICAgYWxsb3dGaWVsZHNXaXRoQXJndW1lbnRzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yKSB7XG4gICAgICAgICAgICBlcnJvckNvbGxlY3Rvci5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUZpZWxkU2V0VmFsaWRhdGlvbkVycm9yKGRpcmVjdGl2ZSwgb3JpZ2luYWxFcnJvciwgbWVzc2FnZVVwZGF0ZXIpIHtcbiAgICBjb25zdCBub2RlcyA9ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGRpcmVjdGl2ZSk7XG4gICAgaWYgKG9yaWdpbmFsRXJyb3Iubm9kZXMpIHtcbiAgICAgICAgbm9kZXMucHVzaCguLi5vcmlnaW5hbEVycm9yLm5vZGVzKTtcbiAgICB9XG4gICAgbGV0IGNvZGVEZWYgPSAoMCwgZXJyb3JfMS5lcnJvckNvZGVEZWYpKG9yaWdpbmFsRXJyb3IpO1xuICAgIGlmICghY29kZURlZiB8fCBjb2RlRGVmID09PSBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwpIHtcbiAgICAgICAgY29kZURlZiA9IGVycm9yXzEuRVJST1JfQ0FURUdPUklFUy5ESVJFQ1RJVkVfSU5WQUxJRF9GSUVMRFMuZ2V0KGRpcmVjdGl2ZS5uYW1lKTtcbiAgICB9XG4gICAgbGV0IG1zZyA9IG9yaWdpbmFsRXJyb3IubWVzc2FnZS50cmltKCk7XG4gICAgaWYgKG1lc3NhZ2VVcGRhdGVyKSB7XG4gICAgICAgIG1zZyA9IG1lc3NhZ2VVcGRhdGVyKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlRGVmLmVycihgJHtmaWVsZFNldEVycm9yRGVzY3JpcHRvcihkaXJlY3RpdmUpfTogJHttc2d9YCwge1xuICAgICAgICBub2RlcyxcbiAgICAgICAgb3JpZ2luYWxFcnJvcixcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpZWxkU2V0RXJyb3JEZXNjcmlwdG9yKGRpcmVjdGl2ZSkge1xuICAgIHJldHVybiBgT24gJHtmaWVsZFNldFRhcmdldERlc2NyaXB0aW9uKGRpcmVjdGl2ZSl9LCBmb3IgJHtkaXJlY3RpdmVTdHJVc2luZ0FTVElmUG9zc2libGUoZGlyZWN0aXZlKX1gO1xufVxuZnVuY3Rpb24gZGlyZWN0aXZlU3RyVXNpbmdBU1RJZlBvc3NpYmxlKGRpcmVjdGl2ZSkge1xuICAgIHJldHVybiBkaXJlY3RpdmUuc291cmNlQVNUID8gKDAsIGdyYXBocWxfMS5wcmludCkoZGlyZWN0aXZlLnNvdXJjZUFTVCkgOiBkaXJlY3RpdmUudG9TdHJpbmcoKTtcbn1cbmZ1bmN0aW9uIGZpZWxkU2V0VGFyZ2V0RGVzY3JpcHRpb24oZGlyZWN0aXZlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHRhcmdldEtpbmQgPSBkaXJlY3RpdmUucGFyZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5GaWVsZERlZmluaXRpb24gPyBcImZpZWxkXCIgOiBcInR5cGVcIjtcbiAgICByZXR1cm4gYCR7dGFyZ2V0S2luZH0gXCIkeyhfYSA9IGRpcmVjdGl2ZS5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb29yZGluYXRlfVwiYDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQWxsRmllbGRTZXQoeyBkZWZpbml0aW9uLCB0YXJnZXRUeXBlRXh0cmFjdG9yLCBlcnJvckNvbGxlY3RvciwgbWV0YWRhdGEsIGlzT25QYXJlbnRUeXBlID0gZmFsc2UsIGFsbG93T25Ob25FeHRlcm5hbExlYWZGaWVsZHMgPSBmYWxzZSwgYWxsb3dGaWVsZHNXaXRoQXJndW1lbnRzID0gZmFsc2UsIG9uRmllbGRzLCB9KSB7XG4gICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiBkZWZpbml0aW9uLmFwcGxpY2F0aW9ucygpKSB7XG4gICAgICAgIGNvbnN0IGVsdCA9IGFwcGxpY2F0aW9uLnBhcmVudDtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRhcmdldFR5cGVFeHRyYWN0b3IoZWx0KTtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGlzT25QYXJlbnRUeXBlID8gdHlwZSA6IGVsdC5wYXJlbnQ7XG4gICAgICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0ludGVyZmFjZVR5cGUpKHBhcmVudFR5cGUpKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gZXJyb3JfMS5FUlJPUl9DQVRFR09SSUVTLkRJUkVDVElWRV9VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UuZ2V0KGRlZmluaXRpb24ubmFtZSk7XG4gICAgICAgICAgICBlcnJvckNvbGxlY3Rvci5wdXNoKGNvZGUuZXJyKGlzT25QYXJlbnRUeXBlXG4gICAgICAgICAgICAgICAgPyBgQ2Fubm90IHVzZSAke2RlZmluaXRpb24uY29vcmRpbmF0ZX0gb24gaW50ZXJmYWNlIFwiJHtwYXJlbnRUeXBlLmNvb3JkaW5hdGV9XCI6ICR7ZGVmaW5pdGlvbi5jb29yZGluYXRlfSBpcyBub3QgeWV0IHN1cHBvcnRlZCBvbiBpbnRlcmZhY2VzYFxuICAgICAgICAgICAgICAgIDogYENhbm5vdCB1c2UgJHtkZWZpbml0aW9uLmNvb3JkaW5hdGV9IG9uICR7ZmllbGRTZXRUYXJnZXREZXNjcmlwdGlvbihhcHBsaWNhdGlvbil9IG9mIHBhcmVudCB0eXBlIFwiJHtwYXJlbnRUeXBlfVwiOiAke2RlZmluaXRpb24uY29vcmRpbmF0ZX0gaXMgbm90IHlldCBzdXBwb3J0ZWQgd2l0aGluIGludGVyZmFjZXNgLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKShhcHBsaWNhdGlvbikuY29uY2F0KGlzT25QYXJlbnRUeXBlID8gW10gOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKSh0eXBlKSkgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlRmllbGRTZXQoe1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZTogYXBwbGljYXRpb24sXG4gICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIGVycm9yQ29sbGVjdG9yLFxuICAgICAgICAgICAgYWxsb3dPbk5vbkV4dGVybmFsTGVhZkZpZWxkcyxcbiAgICAgICAgICAgIGFsbG93RmllbGRzV2l0aEFyZ3VtZW50cyxcbiAgICAgICAgICAgIG9uRmllbGRzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb2xsZWN0VXNlZEZpZWxkcyhtZXRhZGF0YSkge1xuICAgIGNvbnN0IHVzZWRGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgY29sbGVjdFVzZWRGaWVsZHNGb3JEaXJlY3RpdmUobWV0YWRhdGEua2V5RGlyZWN0aXZlKCksIHR5cGUgPT4gdHlwZSwgdXNlZEZpZWxkcyk7XG4gICAgY29sbGVjdFVzZWRGaWVsZHNGb3JEaXJlY3RpdmUobWV0YWRhdGEucmVxdWlyZXNEaXJlY3RpdmUoKSwgZmllbGQgPT4gZmllbGQucGFyZW50LCB1c2VkRmllbGRzKTtcbiAgICBjb2xsZWN0VXNlZEZpZWxkc0ZvckRpcmVjdGl2ZShtZXRhZGF0YS5wcm92aWRlc0RpcmVjdGl2ZSgpLCBmaWVsZCA9PiB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSk7XG4gICAgICAgIHJldHVybiAoMCwgZGVmaW5pdGlvbnNfMS5pc0NvbXBvc2l0ZVR5cGUpKHR5cGUpID8gdHlwZSA6IHVuZGVmaW5lZDtcbiAgICB9LCB1c2VkRmllbGRzKTtcbiAgICBmb3IgKGNvbnN0IGl0ZlR5cGUgb2YgbWV0YWRhdGEuc2NoZW1hLmludGVyZmFjZVR5cGVzKCkpIHtcbiAgICAgICAgY29uc3QgcnVudGltZVR5cGVzID0gaXRmVHlwZS5wb3NzaWJsZVJ1bnRpbWVUeXBlcygpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGl0ZlR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcnVudGltZVR5cGUgb2YgcnVudGltZVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1wbGVtRmllbGQgPSBydW50aW1lVHlwZS5maWVsZChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaW1wbGVtRmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlZEZpZWxkcy5hZGQoaW1wbGVtRmllbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXNlZEZpZWxkcztcbn1cbmV4cG9ydHMuY29sbGVjdFVzZWRGaWVsZHMgPSBjb2xsZWN0VXNlZEZpZWxkcztcbmZ1bmN0aW9uIGNvbGxlY3RVc2VkRmllbGRzRm9yRGlyZWN0aXZlKGRlZmluaXRpb24sIHRhcmdldFR5cGVFeHRyYWN0b3IsIHVzZWRGaWVsZERlZnMpIHtcbiAgICBmb3IgKGNvbnN0IGFwcGxpY2F0aW9uIG9mIGRlZmluaXRpb24uYXBwbGljYXRpb25zKCkpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRhcmdldFR5cGVFeHRyYWN0b3IoYXBwbGljYXRpb24ucGFyZW50KTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb2xsZWN0VGFyZ2V0RmllbGRzKHtcbiAgICAgICAgICAgIHBhcmVudFR5cGU6IHR5cGUsXG4gICAgICAgICAgICBkaXJlY3RpdmU6IGFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgaW5jbHVkZUludGVyZmFjZUZpZWxkc0ltcGxlbWVudGF0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIHZhbGlkYXRlOiBmYWxzZSxcbiAgICAgICAgfSkuZm9yRWFjaCgoZmllbGQpID0+IHVzZWRGaWVsZERlZnMuYWRkKGZpZWxkKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVBbGxFeHRlcm5hbEZpZWxkc1VzZWQobWV0YWRhdGEsIGVycm9yQ29sbGVjdG9yKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIG1ldGFkYXRhLnNjaGVtYS50eXBlcygpKSB7XG4gICAgICAgIGlmICghKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKSh0eXBlKSAmJiAhKDAsIGRlZmluaXRpb25zXzEuaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhLmlzRmllbGRFeHRlcm5hbChmaWVsZCkgfHwgbWV0YWRhdGEuaXNGaWVsZFVzZWQoZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvckNvbGxlY3Rvci5wdXNoKGVycm9yXzEuRVJST1JTLkVYVEVSTkFMX1VOVVNFRC5lcnIoYEZpZWxkIFwiJHtmaWVsZC5jb29yZGluYXRlfVwiIGlzIG1hcmtlZCBAZXh0ZXJuYWwgYnV0IGlzIG5vdCB1c2VkIGluIGFueSBmZWRlcmF0aW9uIGRpcmVjdGl2ZSAoQGtleSwgQHByb3ZpZGVzLCBAcmVxdWlyZXMpIG9yIHRvIHNhdGlzZnkgYW4gaW50ZXJmYWNlO2BcbiAgICAgICAgICAgICAgICArICcgdGhlIGZpZWxkIGRlY2xhcmF0aW9uIGhhcyBubyB1c2UgYW5kIHNob3VsZCBiZSByZW1vdmVkIChvciB0aGUgZmllbGQgc2hvdWxkIG5vdCBiZSBAZXh0ZXJuYWwpLicsIHsgbm9kZXM6IGZpZWxkLnNvdXJjZUFTVCB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU5vRXh0ZXJuYWxPbkludGVyZmFjZUZpZWxkcyhtZXRhZGF0YSwgZXJyb3JDb2xsZWN0b3IpIHtcbiAgICBmb3IgKGNvbnN0IGl0ZiBvZiBtZXRhZGF0YS5zY2hlbWEuaW50ZXJmYWNlVHlwZXMoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGl0Zi5maWVsZHMoKSkge1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhLmlzRmllbGRFeHRlcm5hbChmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICBlcnJvckNvbGxlY3Rvci5wdXNoKGVycm9yXzEuRVJST1JTLkVYVEVSTkFMX09OX0lOVEVSRkFDRS5lcnIoYEludGVyZmFjZSB0eXBlIGZpZWxkIFwiJHtmaWVsZC5jb29yZGluYXRlfVwiIGlzIG1hcmtlZCBAZXh0ZXJuYWwgYnV0IEBleHRlcm5hbCBpcyBub3QgYWxsb3dlZCBvbiBpbnRlcmZhY2UgZmllbGRzIChpdCBpcyBub25zZW5zaWNhbCkuYCwgeyBub2RlczogZmllbGQuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZXJmYWNlUnVudGltZUltcGxlbWVudGF0aW9uRmllbGRzVHlwZXMoaXRmLCBtZXRhZGF0YSwgZXJyb3JDb2xsZWN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcmVxdWlyZXNEaXJlY3RpdmUgPSAoX2EgPSBmZWRlcmF0aW9uTWV0YWRhdGEoaXRmLnNjaGVtYSgpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcXVpcmVzRGlyZWN0aXZlKCk7XG4gICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShyZXF1aXJlc0RpcmVjdGl2ZSwgJ1NjaGVtYSBzaG91bGQgYmUgYSBmZWRlcmF0aW9uIHN1YmdyYXBoLCBidXQgQHJlcXVpcmVzIGRpcmVjdGl2ZSBub3QgZm91bmQnKTtcbiAgICBjb25zdCBydW50aW1lVHlwZXMgPSBpdGYucG9zc2libGVSdW50aW1lVHlwZXMoKTtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGl0Zi5maWVsZHMoKSkge1xuICAgICAgICBjb25zdCB3aXRoRXh0ZXJuYWxPclJlcXVpcmVzID0gW107XG4gICAgICAgIGNvbnN0IHR5cGVUb0ltcGxlbXMgPSBuZXcgdXRpbHNfMS5NdWx0aU1hcCgpO1xuICAgICAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgcnVudGltZVR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCBpbXBsZW1GaWVsZCA9IHR5cGUuZmllbGQoZmllbGQubmFtZSk7XG4gICAgICAgICAgICBpZiAoIWltcGxlbUZpZWxkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGltcGxlbUZpZWxkLnNvdXJjZUFTVCkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goaW1wbGVtRmllbGQuc291cmNlQVNUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5pc0ZpZWxkRXh0ZXJuYWwoaW1wbGVtRmllbGQpIHx8IGltcGxlbUZpZWxkLmhhc0FwcGxpZWREaXJlY3RpdmUocmVxdWlyZXNEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgd2l0aEV4dGVybmFsT3JSZXF1aXJlcy5wdXNoKGltcGxlbUZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJldHVyblR5cGUgPSBpbXBsZW1GaWVsZC50eXBlO1xuICAgICAgICAgICAgdHlwZVRvSW1wbGVtcy5hZGQocmV0dXJuVHlwZS50b1N0cmluZygpLCBpbXBsZW1GaWVsZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpdGhFeHRlcm5hbE9yUmVxdWlyZXMubGVuZ3RoID4gMCAmJiB0eXBlVG9JbXBsZW1zLnNpemUgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlVG9JbXBsZW1zQXJyYXkgPSBbLi4udHlwZVRvSW1wbGVtcy5lbnRyaWVzKCldO1xuICAgICAgICAgICAgZXJyb3JDb2xsZWN0b3IucHVzaChlcnJvcl8xLkVSUk9SUy5JTlRFUkZBQ0VfRklFTERfSU1QTEVNX1RZUEVfTUlTTUFUQ0guZXJyKGBTb21lIG9mIHRoZSBydW50aW1lIGltcGxlbWVudGF0aW9ucyBvZiBpbnRlcmZhY2UgZmllbGQgXCIke2ZpZWxkLmNvb3JkaW5hdGV9XCIgYXJlIG1hcmtlZCBAZXh0ZXJuYWwgb3IgaGF2ZSBhIEByZXF1aXJlICgke3dpdGhFeHRlcm5hbE9yUmVxdWlyZXMubWFwKHByaW50RmllbGRDb29yZGluYXRlKX0pIHNvIGFsbCB0aGUgaW1wbGVtZW50YXRpb25zIHNob3VsZCB1c2UgdGhlIHNhbWUgdHlwZSAoYSBjdXJyZW50IGxpbWl0YXRpb24gb2YgZmVkZXJhdGlvbjsgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2ZlZGVyYXRpb24vaXNzdWVzLzEyNTcpLCBidXQgJHtmb3JtYXRGaWVsZHNUb1JldHVyblR5cGUodHlwZVRvSW1wbGVtc0FycmF5WzBdKX0gd2hpbGUgJHsoMCwgdXRpbHNfMS5qb2luU3RyaW5ncykodHlwZVRvSW1wbGVtc0FycmF5LnNsaWNlKDEpLm1hcChmb3JtYXRGaWVsZHNUb1JldHVyblR5cGUpLCAnIGFuZCAnKX0uYCwgeyBub2RlcyB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBwcmludEZpZWxkQ29vcmRpbmF0ZSA9IChmKSA9PiBgXCIke2YuY29vcmRpbmF0ZX1cImA7XG5mdW5jdGlvbiBmb3JtYXRGaWVsZHNUb1JldHVyblR5cGUoW3R5cGUsIGltcGxlbXNdKSB7XG4gICAgcmV0dXJuIGAkeygwLCB1dGlsc18xLmpvaW5TdHJpbmdzKShpbXBsZW1zLm1hcChwcmludEZpZWxkQ29vcmRpbmF0ZSkpfSAke2ltcGxlbXMubGVuZ3RoID09IDEgPyAnaGFzJyA6ICdoYXZlJ30gdHlwZSBcIiR7dHlwZX1cImA7XG59XG5jbGFzcyBGZWRlcmF0aW9uTWV0YWRhdGEge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICB9XG4gICAgb25JbnZhbGlkYXRlKCkge1xuICAgICAgICB0aGlzLl9leHRlcm5hbFRlc3RlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2hhcmluZ1ByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5faXNGZWQyU2NoZW1hID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9maWVsZFVzZWRQcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlzRmVkMlNjaGVtYSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0ZlZDJTY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlZGVyYXRpb25GZWF0dXJlKCk7XG4gICAgICAgICAgICB0aGlzLl9pc0ZlZDJTY2hlbWEgPSAhIWZlYXR1cmUgJiYgZmVhdHVyZS51cmwudmVyc2lvbi5zYXRpc2ZpZXMobmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMiwgMCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0ZlZDJTY2hlbWE7XG4gICAgfVxuICAgIGZlZGVyYXRpb25GZWF0dXJlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNjaGVtYS5jb3JlRmVhdHVyZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRCeUlkZW50aXR5KGZlZGVyYXRpb25TcGVjLmlkZW50aXR5KTtcbiAgICB9XG4gICAgZXh0ZXJuYWxUZXN0ZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZXh0ZXJuYWxUZXN0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsVGVzdGVyID0gbmV3IEV4dGVybmFsVGVzdGVyKHRoaXMuc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZXh0ZXJuYWxUZXN0ZXI7XG4gICAgfVxuICAgIHNoYXJpbmdQcmVkaWNhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2hhcmluZ1ByZWRpY2F0ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2hhcmluZ1ByZWRpY2F0ZSA9ICgwLCBwcmVjb21wdXRlXzEuY29tcHV0ZVNoYXJlYWJsZXMpKHRoaXMuc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2hhcmluZ1ByZWRpY2F0ZTtcbiAgICB9XG4gICAgZmllbGRVc2VkUHJlZGljYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpZWxkVXNlZFByZWRpY2F0ZSkge1xuICAgICAgICAgICAgY29uc3QgdXNlZEZpZWxkcyA9IGNvbGxlY3RVc2VkRmllbGRzKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fZmllbGRVc2VkUHJlZGljYXRlID0gKGZpZWxkKSA9PiAhIXVzZWRGaWVsZHMuaGFzKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRVc2VkUHJlZGljYXRlO1xuICAgIH1cbiAgICBpc0ZpZWxkVXNlZChmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZFVzZWRQcmVkaWNhdGUoKShmaWVsZCk7XG4gICAgfVxuICAgIGlzRmllbGRFeHRlcm5hbChmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlcm5hbFRlc3RlcigpLmlzRXh0ZXJuYWwoZmllbGQpO1xuICAgIH1cbiAgICBpc0ZpZWxkUGFydGlhbGx5RXh0ZXJuYWwoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxUZXN0ZXIoKS5pc1BhcnRpYWxseUV4dGVybmFsKGZpZWxkKTtcbiAgICB9XG4gICAgaXNGaWVsZEZ1bGx5RXh0ZXJuYWwoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxUZXN0ZXIoKS5pc0Z1bGx5RXh0ZXJuYWwoZmllbGQpO1xuICAgIH1cbiAgICBpc0ZpZWxkRmFrZUV4dGVybmFsKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVybmFsVGVzdGVyKCkuaXNGYWtlRXh0ZXJuYWwoZmllbGQpO1xuICAgIH1cbiAgICBzZWxlY3Rpb25TZWxlY3RzQW55RXh0ZXJuYWxGaWVsZChzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxUZXN0ZXIoKS5zZWxlY3RzQW55RXh0ZXJuYWxGaWVsZChzZWxlY3Rpb25TZXQpO1xuICAgIH1cbiAgICBpc0ZpZWxkU2hhcmVhYmxlKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYXJpbmdQcmVkaWNhdGUoKShmaWVsZCk7XG4gICAgfVxuICAgIGZlZGVyYXRpb25EaXJlY3RpdmVOYW1lSW5TY2hlbWEobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5pc0ZlZDJTY2hlbWEoKSkge1xuICAgICAgICAgICAgY29uc3QgY29yZUZlYXR1cmVzID0gdGhpcy5zY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShjb3JlRmVhdHVyZXMsICdTY2hlbWEgc2hvdWxkIGJlIGEgY29yZSBzY2hlbWEnKTtcbiAgICAgICAgICAgIGNvbnN0IGZlZGVyYXRpb25GZWF0dXJlID0gY29yZUZlYXR1cmVzLmdldEJ5SWRlbnRpdHkoZmVkZXJhdGlvblNwZWMuaWRlbnRpdHkpO1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmZWRlcmF0aW9uRmVhdHVyZSwgJ1NjaGVtYSBzaG91bGQgaGF2ZSB0aGUgZmVkZXJhdGlvbiBmZWF0dXJlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmVkZXJhdGlvbkZlYXR1cmUuZGlyZWN0aXZlTmFtZUluU2NoZW1hKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmVkZXJhdGlvblR5cGVOYW1lSW5TY2hlbWEobmFtZSkge1xuICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09ICdfJykge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNGZWQyU2NoZW1hKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvcmVGZWF0dXJlcyA9IHRoaXMuc2NoZW1hLmNvcmVGZWF0dXJlcztcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoY29yZUZlYXR1cmVzLCAnU2NoZW1hIHNob3VsZCBiZSBhIGNvcmUgc2NoZW1hJyk7XG4gICAgICAgICAgICBjb25zdCBmZWRlcmF0aW9uRmVhdHVyZSA9IGNvcmVGZWF0dXJlcy5nZXRCeUlkZW50aXR5KGZlZGVyYXRpb25TcGVjLmlkZW50aXR5KTtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmVkZXJhdGlvbkZlYXR1cmUsICdTY2hlbWEgc2hvdWxkIGhhdmUgdGhlIGZlZGVyYXRpb24gZmVhdHVyZScpO1xuICAgICAgICAgICAgcmV0dXJuIGZlZGVyYXRpb25GZWF0dXJlLnR5cGVOYW1lSW5TY2hlbWEobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ18nICsgbmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRGZWRlcmF0aW9uRGlyZWN0aXZlKG5hbWUpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5zY2hlbWEuZGlyZWN0aXZlKHRoaXMuZmVkZXJhdGlvbkRpcmVjdGl2ZU5hbWVJblNjaGVtYShuYW1lKSk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGlyZWN0aXZlLCBgVGhlIHByb3ZpZGVkIHNjaGVtYSBkb2VzIG5vdCBoYXZlIGZlZGVyYXRpb24gZGlyZWN0aXZlIEAke25hbWV9YCk7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuICAgIGtleURpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmVkZXJhdGlvbkRpcmVjdGl2ZShmZWRlcmF0aW9uU3BlY18xLmtleURpcmVjdGl2ZVNwZWMubmFtZSk7XG4gICAgfVxuICAgIG92ZXJyaWRlRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWRlcmF0aW9uRGlyZWN0aXZlKGZlZGVyYXRpb25TcGVjXzEub3ZlcnJpZGVEaXJlY3RpdmVTcGVjLm5hbWUpO1xuICAgIH1cbiAgICBleHRlbmRzRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWRlcmF0aW9uRGlyZWN0aXZlKGZlZGVyYXRpb25TcGVjXzEuZXh0ZW5kc0RpcmVjdGl2ZVNwZWMubmFtZSk7XG4gICAgfVxuICAgIGV4dGVybmFsRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWRlcmF0aW9uRGlyZWN0aXZlKGZlZGVyYXRpb25TcGVjXzEuZXh0ZXJuYWxEaXJlY3RpdmVTcGVjLm5hbWUpO1xuICAgIH1cbiAgICByZXF1aXJlc0RpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmVkZXJhdGlvbkRpcmVjdGl2ZShmZWRlcmF0aW9uU3BlY18xLnJlcXVpcmVzRGlyZWN0aXZlU3BlYy5uYW1lKTtcbiAgICB9XG4gICAgcHJvdmlkZXNEaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZlZGVyYXRpb25EaXJlY3RpdmUoZmVkZXJhdGlvblNwZWNfMS5wcm92aWRlc0RpcmVjdGl2ZVNwZWMubmFtZSk7XG4gICAgfVxuICAgIHNoYXJlYWJsZURpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmVkZXJhdGlvbkRpcmVjdGl2ZShmZWRlcmF0aW9uU3BlY18xLnNoYXJlYWJsZURpcmVjdGl2ZVNwZWMubmFtZSk7XG4gICAgfVxuICAgIHRhZ0RpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmVkZXJhdGlvbkRpcmVjdGl2ZSh0YWdTcGVjLnRhZ0RpcmVjdGl2ZVNwZWMubmFtZSk7XG4gICAgfVxuICAgIGNvbXBvc2VEaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZlZGVyYXRpb25EaXJlY3RpdmUoZmVkZXJhdGlvblNwZWNfMS5jb21wb3NlRGlyZWN0aXZlU3BlYy5uYW1lKTtcbiAgICB9XG4gICAgaW5hY2Nlc3NpYmxlRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWRlcmF0aW9uRGlyZWN0aXZlKGluYWNjZXNzaWJsZVNwZWMuaW5hY2Nlc3NpYmxlRGlyZWN0aXZlU3BlYy5uYW1lKTtcbiAgICB9XG4gICAgYWxsRmVkZXJhdGlvbkRpcmVjdGl2ZXMoKSB7XG4gICAgICAgIGNvbnN0IGJhc2VEaXJlY3RpdmVzID0gW1xuICAgICAgICAgICAgdGhpcy5rZXlEaXJlY3RpdmUoKSxcbiAgICAgICAgICAgIHRoaXMuZXh0ZXJuYWxEaXJlY3RpdmUoKSxcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZXNEaXJlY3RpdmUoKSxcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXNEaXJlY3RpdmUoKSxcbiAgICAgICAgICAgIHRoaXMudGFnRGlyZWN0aXZlKCksXG4gICAgICAgICAgICB0aGlzLmV4dGVuZHNEaXJlY3RpdmUoKSxcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNGZWQyU2NoZW1hKClcbiAgICAgICAgICAgID8gYmFzZURpcmVjdGl2ZXMuY29uY2F0KHRoaXMuc2hhcmVhYmxlRGlyZWN0aXZlKCksIHRoaXMuaW5hY2Nlc3NpYmxlRGlyZWN0aXZlKCksIHRoaXMub3ZlcnJpZGVEaXJlY3RpdmUoKSwgdGhpcy5jb21wb3NlRGlyZWN0aXZlKCkpXG4gICAgICAgICAgICA6IGJhc2VEaXJlY3RpdmVzO1xuICAgIH1cbiAgICBlbnRpdHlUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEudHlwZSh0aGlzLmZlZGVyYXRpb25UeXBlTmFtZUluU2NoZW1hKGV4cG9ydHMuZW50aXR5VHlwZVNwZWMubmFtZSkpO1xuICAgIH1cbiAgICBhbnlUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEudHlwZSh0aGlzLmZlZGVyYXRpb25UeXBlTmFtZUluU2NoZW1hKGV4cG9ydHMuYW55VHlwZVNwZWMubmFtZSkpO1xuICAgIH1cbiAgICBzZXJ2aWNlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hLnR5cGUodGhpcy5mZWRlcmF0aW9uVHlwZU5hbWVJblNjaGVtYShleHBvcnRzLnNlcnZpY2VUeXBlU3BlYy5uYW1lKSk7XG4gICAgfVxuICAgIGZpZWxkU2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hLnR5cGUodGhpcy5mZWRlcmF0aW9uVHlwZU5hbWVJblNjaGVtYShmZWRlcmF0aW9uU3BlY18xLmZpZWxkU2V0VHlwZVNwZWMubmFtZSkpO1xuICAgIH1cbiAgICBhbGxGZWRlcmF0aW9uVHlwZXMoKSB7XG4gICAgICAgIGNvbnN0IGJhc2VUeXBlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuYW55VHlwZSgpLFxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlVHlwZSgpLFxuICAgICAgICAgICAgdGhpcy5maWVsZFNldFR5cGUoKSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgZW50aXR5VHlwZSA9IHRoaXMuZW50aXR5VHlwZSgpO1xuICAgICAgICBpZiAoZW50aXR5VHlwZSkge1xuICAgICAgICAgICAgYmFzZVR5cGVzLnB1c2goZW50aXR5VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUeXBlcztcbiAgICB9XG59XG5leHBvcnRzLkZlZGVyYXRpb25NZXRhZGF0YSA9IEZlZGVyYXRpb25NZXRhZGF0YTtcbmNsYXNzIEZlZGVyYXRpb25CbHVlcHJpbnQgZXh0ZW5kcyBkZWZpbml0aW9uc18xLlNjaGVtYUJsdWVwcmludCB7XG4gICAgY29uc3RydWN0b3Iod2l0aFJvb3RUeXBlUmVuYW1pbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53aXRoUm9vdFR5cGVSZW5hbWluZyA9IHdpdGhSb290VHlwZVJlbmFtaW5nO1xuICAgIH1cbiAgICBvbkFkZGVkQ29yZUZlYXR1cmUoc2NoZW1hLCBmZWF0dXJlKSB7XG4gICAgICAgIHN1cGVyLm9uQWRkZWRDb3JlRmVhdHVyZShzY2hlbWEsIGZlYXR1cmUpO1xuICAgICAgICBpZiAoZmVhdHVyZS51cmwuaWRlbnRpdHkgPT09IGZlZGVyYXRpb25TcGVjXzEuZmVkZXJhdGlvbklkZW50aXR5KSB7XG4gICAgICAgICAgICBjb25zdCBzcGVjID0gZmVkZXJhdGlvblNwZWNfMS5GRURFUkFUSU9OX1ZFUlNJT05TLmZpbmQoZmVhdHVyZS51cmwudmVyc2lvbik7XG4gICAgICAgICAgICBpZiAoc3BlYykge1xuICAgICAgICAgICAgICAgIHNwZWMuYWRkRWxlbWVudHNUb1NjaGVtYShzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uTWlzc2luZ0RpcmVjdGl2ZURlZmluaXRpb24oc2NoZW1hLCBuYW1lLCBhcmdzKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBjb3JlU3BlY18xLmxpbmtEaXJlY3RpdmVEZWZhdWx0TmFtZSkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYXJncyAmJiBhcmdzWyd1cmwnXTtcbiAgICAgICAgICAgIGNvbnN0IGFzID0gdXJsICYmIHVybC5zdGFydHNXaXRoKGxpbmtTcGVjLmlkZW50aXR5KSA/IGFyZ3NbJ2FzJ10gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBsaW5rU3BlYy5hZGREZWZpbml0aW9uc1RvU2NoZW1hKHNjaGVtYSwgYXMpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPiAwID8gZXJyb3JzIDogc2NoZW1hLmRpcmVjdGl2ZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIub25NaXNzaW5nRGlyZWN0aXZlRGVmaW5pdGlvbihzY2hlbWEsIG5hbWUsIGFyZ3MpO1xuICAgIH1cbiAgICBpZ25vcmVQYXJzZWRGaWVsZCh0eXBlLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgaWYgKCFleHBvcnRzLkZFREVSQVRJT05fT1BFUkFUSU9OX0ZJRUxEUy5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBmZWRlcmF0aW9uTWV0YWRhdGEodHlwZS5zY2hlbWEoKSk7XG4gICAgICAgIHJldHVybiAhIW1ldGFkYXRhICYmICFtZXRhZGF0YS5pc0ZlZDJTY2hlbWEoKTtcbiAgICB9XG4gICAgb25Db25zdHJ1Y3RlZChzY2hlbWEpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBmZWRlcmF0aW9uTWV0YWRhdGEoc2NoZW1hKTtcbiAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgc2NoZW1hWydfZmVkZXJhdGlvbk1ldGFkYXRhJ10gPSBuZXcgRmVkZXJhdGlvbk1ldGFkYXRhKHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EaXJlY3RpdmVEZWZpbml0aW9uQW5kU2NoZW1hUGFyc2VkKHNjaGVtYSkge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBjb21wbGV0ZVN1YmdyYXBoU2NoZW1hKHNjaGVtYSk7XG4gICAgICAgIHNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLnByb2Nlc3NVbmFwcGxpZWREaXJlY3RpdmVzKCk7XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuICAgIG9uSW52YWxpZGF0aW9uKHNjaGVtYSkge1xuICAgICAgICBzdXBlci5vbkludmFsaWRhdGlvbihzY2hlbWEpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGZlZGVyYXRpb25NZXRhZGF0YShzY2hlbWEpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKG1ldGFkYXRhLCAnRmVkZXJhdGlvbiBzY2hlbWEgc2hvdWxkIGhhdmUgaGFkIGl0cyBtZXRhZGF0YSBzZXQgb24gY29uc3RydWN0aW9uJyk7XG4gICAgICAgIEZlZGVyYXRpb25NZXRhZGF0YS5wcm90b3R5cGVbJ29uSW52YWxpZGF0ZSddLmNhbGwobWV0YWRhdGEpO1xuICAgIH1cbiAgICBvblZhbGlkYXRpb24oc2NoZW1hKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZXJyb3JDb2xsZWN0b3IgPSBzdXBlci5vblZhbGlkYXRpb24oc2NoZW1hKTtcbiAgICAgICAgaWYgKHRoaXMud2l0aFJvb3RUeXBlUmVuYW1pbmcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiBkZWZpbml0aW9uc18xLmFsbFNjaGVtYVJvb3RLaW5kcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAoX2EgPSBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5yb290KGspKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0TmFtZSA9ICgwLCBkZWZpbml0aW9uc18xLmRlZmF1bHRSb290TmFtZSkoayk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgJiYgdHlwZS5uYW1lICE9PSBkZWZhdWx0TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHNjaGVtYS50eXBlKGRlZmF1bHROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNvbGxlY3Rvci5wdXNoKGVycm9yXzEuRVJST1JfQ0FURUdPUklFUy5ST09UX1RZUEVfVVNFRC5nZXQoaykuZXJyKGBUaGUgc2NoZW1hIGhhcyBhIHR5cGUgbmFtZWQgXCIke2RlZmF1bHROYW1lfVwiIGJ1dCBpdCBpcyBub3Qgc2V0IGFzIHRoZSAke2t9IHJvb3QgdHlwZSAoXCIke3R5cGUubmFtZX1cIiBpcyBpbnN0ZWFkKTogYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3RoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBmZWRlcmF0aW9uLiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnSWYgYSByb290IHR5cGUgZG9lcyBub3QgdXNlIGl0cyBkZWZhdWx0IG5hbWUsIHRoZXJlIHNob3VsZCBiZSBubyBvdGhlciB0eXBlIHdpdGggdGhhdCBkZWZhdWx0IG5hbWUuJywgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykodHlwZSwgZXhpc3RpbmcpIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0eXBlLnJlbmFtZShkZWZhdWx0TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gZmVkZXJhdGlvbk1ldGFkYXRhKHNjaGVtYSk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkobWV0YWRhdGEsICdGZWRlcmF0aW9uIHNjaGVtYSBzaG91bGQgaGF2ZSBoYWQgaXRzIG1ldGFkYXRhIHNldCBvbiBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgaWYgKCFtZXRhZGF0YS5pc0ZlZDJTY2hlbWEoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yQ29sbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleURpcmVjdGl2ZSA9IG1ldGFkYXRhLmtleURpcmVjdGl2ZSgpO1xuICAgICAgICB2YWxpZGF0ZUFsbEZpZWxkU2V0KHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IGtleURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHRhcmdldFR5cGVFeHRyYWN0b3I6IHR5cGUgPT4gdHlwZSxcbiAgICAgICAgICAgIGVycm9yQ29sbGVjdG9yLFxuICAgICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAgICBpc09uUGFyZW50VHlwZTogdHJ1ZSxcbiAgICAgICAgICAgIGFsbG93T25Ob25FeHRlcm5hbExlYWZGaWVsZHM6IHRydWUsXG4gICAgICAgICAgICBvbkZpZWxkczogZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzVW5pb25UeXBlKSh0eXBlKSB8fCAoMCwgZGVmaW5pdGlvbnNfMS5pc0ludGVyZmFjZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBraW5kID0gdHlwZS5raW5kO1xuICAgICAgICAgICAgICAgICAgICBraW5kID0ga2luZC5zbGljZSgwLCBraW5kLmxlbmd0aCAtICdUeXBlJy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5LRVlfRklFTERTX1NFTEVDVF9JTlZBTElEX1RZUEUuZXJyKGBmaWVsZCBcIiR7ZmllbGQuY29vcmRpbmF0ZX1cIiBpcyBhICR7a2luZH0gdHlwZSB3aGljaCBpcyBub3QgYWxsb3dlZCBpbiBAa2V5YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFsaWRhdGVBbGxGaWVsZFNldCh7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiBtZXRhZGF0YS5yZXF1aXJlc0RpcmVjdGl2ZSgpLFxuICAgICAgICAgICAgdGFyZ2V0VHlwZUV4dHJhY3RvcjogZmllbGQgPT4gZmllbGQucGFyZW50LFxuICAgICAgICAgICAgZXJyb3JDb2xsZWN0b3IsXG4gICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIGFsbG93RmllbGRzV2l0aEFyZ3VtZW50czogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhbGlkYXRlQWxsRmllbGRTZXQoe1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogbWV0YWRhdGEucHJvdmlkZXNEaXJlY3RpdmUoKSxcbiAgICAgICAgICAgIHRhcmdldFR5cGVFeHRyYWN0b3I6IGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuaXNGaWVsZEV4dGVybmFsKGZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5FWFRFUk5BTF9DT0xMSVNJT05fV0lUSF9BTk9USEVSX0RJUkVDVElWRS5lcnIoYENhbm5vdCBoYXZlIGJvdGggQHByb3ZpZGVzIGFuZCBAZXh0ZXJuYWwgb24gZmllbGQgXCIke2ZpZWxkLmNvb3JkaW5hdGV9XCJgLCB7IG5vZGVzOiBmaWVsZC5zb3VyY2VBU1QgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkoZmllbGQudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKCEoMCwgZGVmaW5pdGlvbnNfMS5pc0NvbXBvc2l0ZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLlBST1ZJREVTX09OX05PTl9PQkpFQ1RfRklFTEQuZXJyKGBJbnZhbGlkIEBwcm92aWRlcyBkaXJlY3RpdmUgb24gZmllbGQgXCIke2ZpZWxkLmNvb3JkaW5hdGV9XCI6IGZpZWxkIGhhcyB0eXBlIFwiJHtmaWVsZC50eXBlfVwiIHdoaWNoIGlzIG5vdCBhIENvbXBvc2l0ZSBUeXBlYCwgeyBub2RlczogZmllbGQuc291cmNlQVNUIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvbGxlY3RvcixcbiAgICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFsaWRhdGVOb0V4dGVybmFsT25JbnRlcmZhY2VGaWVsZHMobWV0YWRhdGEsIGVycm9yQ29sbGVjdG9yKTtcbiAgICAgICAgdmFsaWRhdGVBbGxFeHRlcm5hbEZpZWxkc1VzZWQobWV0YWRhdGEsIGVycm9yQ29sbGVjdG9yKTtcbiAgICAgICAgY29uc3QgdGFnRGlyZWN0aXZlID0gbWV0YWRhdGEudGFnRGlyZWN0aXZlKCk7XG4gICAgICAgIGlmICh0YWdEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gdGFnU3BlYy5jaGVja0NvbXBhdGlibGVEaXJlY3RpdmUodGFnRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yQ29sbGVjdG9yLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRmIG9mIHNjaGVtYS5pbnRlcmZhY2VUeXBlcygpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUludGVyZmFjZVJ1bnRpbWVJbXBsZW1lbnRhdGlvbkZpZWxkc1R5cGVzKGl0ZiwgbWV0YWRhdGEsIGVycm9yQ29sbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JDb2xsZWN0b3I7XG4gICAgfVxuICAgIHZhbGlkYXRpb25SdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIEZFREVSQVRJT05fVkFMSURBVElPTl9SVUxFUztcbiAgICB9XG4gICAgb25Vbmtub3duRGlyZWN0aXZlVmFsaWRhdGlvbkVycm9yKHNjaGVtYSwgdW5rbm93bkRpcmVjdGl2ZU5hbWUsIGVycm9yKSB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gZmVkZXJhdGlvbk1ldGFkYXRhKHNjaGVtYSk7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkobWV0YWRhdGEsIGBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBoYXZlIGJlZW4gY2FsbGVkIG9uIGEgc3ViZ3JhcGggc2NoZW1hYCk7XG4gICAgICAgIGlmIChmZWRlcmF0aW9uU3BlY18xLkFMTF9GRURFUkFUSU9OX0RJUkVDVElWRVNfREVGQVVMVF9OQU1FUy5pbmNsdWRlcyh1bmtub3duRGlyZWN0aXZlTmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5pc0ZlZDJTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlZGVyYXRpb25GZWF0dXJlID0gbWV0YWRhdGEuZmVkZXJhdGlvbkZlYXR1cmUoKTtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZlZGVyYXRpb25GZWF0dXJlLCAnRmVkMiBzdWJncmFwaCBfbXVzdF8gbGluayB0byB0aGUgZmVkZXJhdGlvbiBmZWF0dXJlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZUluU2NoZW1hID0gZmVkZXJhdGlvbkZlYXR1cmUuZGlyZWN0aXZlTmFtZUluU2NoZW1hKHVua25vd25EaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aXZlTmFtZUluU2NoZW1hLnN0YXJ0c1dpdGgoZmVkZXJhdGlvbkZlYXR1cmUubmFtZUluU2NoZW1hICsgJ19fJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBlcnJvcl8xLndpdGhNb2RpZmllZEVycm9yTWVzc2FnZSkoZXJyb3IsIGAke2Vycm9yLm1lc3NhZ2V9IElmIHlvdSBtZWFudCB0aGUgXCJAJHt1bmtub3duRGlyZWN0aXZlTmFtZX1cIiBmZWRlcmF0aW9uIGRpcmVjdGl2ZSwgeW91IHNob3VsZCB1c2UgZnVsbHktcXVhbGlmaWVkIG5hbWUgXCJAJHtkaXJlY3RpdmVOYW1lSW5TY2hlbWF9XCIgb3IgYWRkIFwiQCR7dW5rbm93bkRpcmVjdGl2ZU5hbWV9XCIgdG8gdGhlIFxcYGltcG9ydFxcYCBhcmd1bWVudCBvZiB0aGUgQGxpbmsgdG8gdGhlIGZlZGVyYXRpb24gc3BlY2lmaWNhdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgZXJyb3JfMS53aXRoTW9kaWZpZWRFcnJvck1lc3NhZ2UpKGVycm9yLCBgJHtlcnJvci5tZXNzYWdlfSBJZiB5b3UgbWVhbnQgdGhlIFwiQCR7dW5rbm93bkRpcmVjdGl2ZU5hbWV9XCIgZmVkZXJhdGlvbiBkaXJlY3RpdmUsIHlvdSBzaG91bGQgdXNlIFwiQCR7ZGlyZWN0aXZlTmFtZUluU2NoZW1hfVwiIGFzIGl0IGlzIGltcG9ydGVkIHVuZGVyIHRoYXQgbmFtZSBpbiB0aGUgQGxpbmsgdG8gdGhlIGZlZGVyYXRpb24gc3BlY2lmaWNhdGlvbiBvZiB0aGlzIHNjaGVtYS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGVycm9yXzEud2l0aE1vZGlmaWVkRXJyb3JNZXNzYWdlKShlcnJvciwgYCR7ZXJyb3IubWVzc2FnZX0gSWYgeW91IG1lYW50IHRoZSBcIkAke3Vua25vd25EaXJlY3RpdmVOYW1lfVwiIGZlZGVyYXRpb24gMiBkaXJlY3RpdmUsIG5vdGUgdGhhdCB0aGlzIHNjaGVtYSBpcyBhIGZlZGVyYXRpb24gMSBzY2hlbWEuIFRvIGJlIGEgZmVkZXJhdGlvbiAyIHNjaGVtYSwgaXQgbmVlZHMgdG8gQGxpbmsgdG8gdGhlIGZlZGVyYXRpb24gc3BlY2lmY2F0aW9uIHYyLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFtZXRhZGF0YS5pc0ZlZDJTY2hlbWEoKSkge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSAoMCwgc3VnZ2VzdGlvbnNfMS5zdWdnZXN0aW9uTGlzdCkodW5rbm93bkRpcmVjdGl2ZU5hbWUsIGZlZGVyYXRpb25TcGVjXzEuRkVERVJBVElPTjJfT05MWV9TUEVDX0RJUkVDVElWRVMubWFwKChzcGVjKSA9PiBzcGVjLm5hbWUpKTtcbiAgICAgICAgICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBlcnJvcl8xLndpdGhNb2RpZmllZEVycm9yTWVzc2FnZSkoZXJyb3IsIGAke2Vycm9yLm1lc3NhZ2V9JHsoMCwgc3VnZ2VzdGlvbnNfMS5kaWRZb3VNZWFuKShzdWdnZXN0aW9ucy5tYXAoKHMpID0+ICdAJyArIHMpKX0gSWYgc28sIG5vdGUgdGhhdCAke3N1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMSA/ICdpdCBpcyBhIGZlZGVyYXRpb24gMiBkaXJlY3RpdmUnIDogJ3RoZXkgYXJlIGZlZGVyYXRpb24gMiBkaXJlY3RpdmVzJ30gYnV0IHRoaXMgc2NoZW1hIGlzIGEgZmVkZXJhdGlvbiAxIG9uZS4gVG8gYmUgYSBmZWRlcmF0aW9uIDIgc2NoZW1hLCBpdCBuZWVkcyB0byBAbGluayB0byB0aGUgZmVkZXJhdGlvbiBzcGVjaWZjYXRpb24gdjIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgICBhcHBseURpcmVjdGl2ZXNBZnRlclBhcnNpbmcoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuRmVkZXJhdGlvbkJsdWVwcmludCA9IEZlZGVyYXRpb25CbHVlcHJpbnQ7XG5mdW5jdGlvbiBmaW5kVW51c2VkTmFtZWRGb3JMaW5rRGlyZWN0aXZlKHNjaGVtYSkge1xuICAgIGlmICghc2NoZW1hLmRpcmVjdGl2ZShsaW5rU3BlYy51cmwubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgYmFzZU5hbWUgPSBsaW5rU3BlYy51cmwubmFtZTtcbiAgICBsZXQgbiA9IDE7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBiYXNlTmFtZSArIG47XG4gICAgICAgIGlmICghc2NoZW1hLmRpcmVjdGl2ZShjYW5kaWRhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0U2NoZW1hQXNGZWQyU3ViZ3JhcGgoc2NoZW1hKSB7XG4gICAgbGV0IGNvcmUgPSBzY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgIGxldCBzcGVjO1xuICAgIGlmIChjb3JlKSB7XG4gICAgICAgIHNwZWMgPSBjb3JlLmNvcmVEZWZpbml0aW9uO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHNwZWMudXJsLnZlcnNpb24uc2F0aXNmaWVzKGxpbmtTcGVjLnZlcnNpb24pLCBgRmVkMiBzY2hlbWEgbXVzdCB1c2UgQGxpbmsgd2l0aCB2ZXJzaW9uID49IDEuMCwgYnV0IHNjaGVtYSB1c2VzICR7c3BlYy51cmx9YCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBhbGlhcyA9IGZpbmRVbnVzZWROYW1lZEZvckxpbmtEaXJlY3RpdmUoc2NoZW1hKTtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gbGlua1NwZWMuYWRkVG9TY2hlbWEoc2NoZW1hLCBhbGlhcyk7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgKDAsIGRlZmluaXRpb25zXzEuRXJyR3JhcGhRTFZhbGlkYXRpb25GYWlsZWQpKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgc3BlYyA9IGxpbmtTcGVjO1xuICAgICAgICBjb3JlID0gc2NoZW1hLmNvcmVGZWF0dXJlcztcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShjb3JlLCAnU2NoZW1hIHNob3VsZCBub3cgYmUgYSBjb3JlIHNjaGVtYScpO1xuICAgIH1cbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCFjb3JlLmdldEJ5SWRlbnRpdHkoZmVkZXJhdGlvblNwZWMuaWRlbnRpdHkpLCAnU2NoZW1hIGFscmVhZHkgc2V0IGFzIGEgZmVkZXJhdGlvbiBzdWJncmFwaCcpO1xuICAgIHNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLmFwcGx5RGlyZWN0aXZlKGNvcmUuY29yZUl0c2VsZi5uYW1lSW5TY2hlbWEsIHtcbiAgICAgICAgdXJsOiBmZWRlcmF0aW9uU3BlYy51cmwudG9TdHJpbmcoKSxcbiAgICAgICAgaW1wb3J0OiBmZWRlcmF0aW9uU3BlY18xLkZFREVSQVRJT04yX1NQRUNfRElSRUNUSVZFUy5tYXAoKHNwZWMpID0+IGBAJHtzcGVjLm5hbWV9YCksXG4gICAgfSk7XG4gICAgY29uc3QgZXJyb3JzID0gY29tcGxldGVTdWJncmFwaFNjaGVtYShzY2hlbWEpO1xuICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyAoMCwgZGVmaW5pdGlvbnNfMS5FcnJHcmFwaFFMVmFsaWRhdGlvbkZhaWxlZCkoZXJyb3JzKTtcbiAgICB9XG59XG5leHBvcnRzLnNldFNjaGVtYUFzRmVkMlN1YmdyYXBoID0gc2V0U2NoZW1hQXNGZWQyU3ViZ3JhcGg7XG5leHBvcnRzLkZFREVSQVRJT04yX0xJTktfV1RIX0ZVTExfSU1QT1JUUyA9ICdAbGluayh1cmw6IFwiaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2ZlZGVyYXRpb24vdjIuMVwiLCBpbXBvcnQ6IFtcIkBrZXlcIiwgXCJAcmVxdWlyZXNcIiwgXCJAcHJvdmlkZXNcIiwgXCJAZXh0ZXJuYWxcIiwgXCJAdGFnXCIsIFwiQGV4dGVuZHNcIiwgXCJAc2hhcmVhYmxlXCIsIFwiQGluYWNjZXNzaWJsZVwiLCBcIkBvdmVycmlkZVwiLCBcIkBjb21wb3NlRGlyZWN0aXZlXCJdKSc7XG5mdW5jdGlvbiBhc0ZlZDJTdWJncmFwaERvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgY29uc3QgZmVkMkxpbmtFeHRlbnNpb24gPSB7XG4gICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLlNDSEVNQV9FWFRFTlNJT04sXG4gICAgICAgIGRpcmVjdGl2ZXM6IFt7XG4gICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuRElSRUNUSVZFLFxuICAgICAgICAgICAgICAgIG5hbWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSwgdmFsdWU6IGNvcmVTcGVjXzEubGlua0RpcmVjdGl2ZURlZmF1bHROYW1lIH0sXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuQVJHVU1FTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiAndXJsJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuU1RSSU5HLCB2YWx1ZTogZmVkZXJhdGlvblNwZWMudXJsLnRvU3RyaW5nKCkgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5BUkdVTUVOVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSwgdmFsdWU6ICdpbXBvcnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBraW5kOiBncmFwaHFsXzEuS2luZC5MSVNULCB2YWx1ZXM6IGZlZGVyYXRpb25TcGVjXzEuRkVERVJBVElPTjJfU1BFQ19ESVJFQ1RJVkVTLm1hcCgoc3BlYykgPT4gKHsga2luZDogZ3JhcGhxbF8xLktpbmQuU1RSSU5HLCB2YWx1ZTogYEAke3NwZWMubmFtZX1gIH0pKSB9XG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuRE9DVU1FTlQsXG4gICAgICAgIGxvYzogZG9jdW1lbnQubG9jLFxuICAgICAgICBkZWZpbml0aW9uczogZG9jdW1lbnQuZGVmaW5pdGlvbnMuY29uY2F0KGZlZDJMaW5rRXh0ZW5zaW9uKVxuICAgIH07XG59XG5leHBvcnRzLmFzRmVkMlN1YmdyYXBoRG9jdW1lbnQgPSBhc0ZlZDJTdWJncmFwaERvY3VtZW50O1xuZnVuY3Rpb24gcHJpbnRTdWJncmFwaE5hbWVzKG5hbWVzKSB7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLnByaW50SHVtYW5SZWFkYWJsZUxpc3QpKG5hbWVzLm1hcChuID0+IGBcIiR7bn1cImApLCB7XG4gICAgICAgIHByZWZpeDogJ3N1YmdyYXBoJyxcbiAgICAgICAgcHJlZml4UGx1cmFsOiAnc3ViZ3JhcGhzJyxcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJpbnRTdWJncmFwaE5hbWVzID0gcHJpbnRTdWJncmFwaE5hbWVzO1xuZnVuY3Rpb24gZmVkZXJhdGlvbk1ldGFkYXRhKHNjaGVtYSkge1xuICAgIHJldHVybiBzY2hlbWFbJ19mZWRlcmF0aW9uTWV0YWRhdGEnXTtcbn1cbmV4cG9ydHMuZmVkZXJhdGlvbk1ldGFkYXRhID0gZmVkZXJhdGlvbk1ldGFkYXRhO1xuZnVuY3Rpb24gaXNGZWRlcmF0aW9uU3ViZ3JhcGhTY2hlbWEoc2NoZW1hKSB7XG4gICAgcmV0dXJuICEhZmVkZXJhdGlvbk1ldGFkYXRhKHNjaGVtYSk7XG59XG5leHBvcnRzLmlzRmVkZXJhdGlvblN1YmdyYXBoU2NoZW1hID0gaXNGZWRlcmF0aW9uU3ViZ3JhcGhTY2hlbWE7XG5mdW5jdGlvbiBpc0ZlZGVyYXRpb25GaWVsZChmaWVsZCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoZmllbGQucGFyZW50ID09PSAoKF9hID0gZmllbGQuc2NoZW1hKCkuc2NoZW1hRGVmaW5pdGlvbi5yb290KFwicXVlcnlcIikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9GSUVMRFMuaW5jbHVkZXMoZmllbGQubmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNGZWRlcmF0aW9uRmllbGQgPSBpc0ZlZGVyYXRpb25GaWVsZDtcbmZ1bmN0aW9uIGlzRW50aXR5VHlwZSh0eXBlKSB7XG4gICAgaWYgKHR5cGUua2luZCAhPT0gXCJPYmplY3RUeXBlXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBtZXRhZGF0YSA9IGZlZGVyYXRpb25NZXRhZGF0YSh0eXBlLnNjaGVtYSgpKTtcbiAgICByZXR1cm4gISFtZXRhZGF0YSAmJiB0eXBlLmhhc0FwcGxpZWREaXJlY3RpdmUobWV0YWRhdGEua2V5RGlyZWN0aXZlKCkpO1xufVxuZXhwb3J0cy5pc0VudGl0eVR5cGUgPSBpc0VudGl0eVR5cGU7XG5mdW5jdGlvbiBidWlsZFN1YmdyYXBoKG5hbWUsIHVybCwgc291cmNlLCB3aXRoUm9vdFR5cGVSZW5hbWluZyA9IHRydWUpIHtcbiAgICBjb25zdCBidWlsZE9wdGlvbnMgPSB7XG4gICAgICAgIGJsdWVwcmludDogbmV3IEZlZGVyYXRpb25CbHVlcHJpbnQod2l0aFJvb3RUeXBlUmVuYW1pbmcpLFxuICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXG4gICAgfTtcbiAgICBsZXQgc3ViZ3JhcGg7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gKDAsIGJ1aWxkU2NoZW1hXzEuYnVpbGRTY2hlbWEpKG5ldyBncmFwaHFsXzEuU291cmNlKHNvdXJjZSwgbmFtZSksIGJ1aWxkT3B0aW9ucylcbiAgICAgICAgICAgIDogKDAsIGJ1aWxkU2NoZW1hXzEuYnVpbGRTY2hlbWFGcm9tQVNUKShzb3VyY2UsIGJ1aWxkT3B0aW9ucyk7XG4gICAgICAgIHN1YmdyYXBoID0gbmV3IFN1YmdyYXBoKG5hbWUsIHVybCwgc2NoZW1hKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yICYmIG5hbWUgIT09IGV4cG9ydHMuRkVERVJBVElPTl9VTk5BTUVEX1NVQkdSQVBIX05BTUUpIHtcbiAgICAgICAgICAgIHRocm93IGFkZFN1YmdyYXBoVG9FcnJvcihlLCBuYW1lLCBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3ViZ3JhcGgudmFsaWRhdGUoKTtcbn1cbmV4cG9ydHMuYnVpbGRTdWJncmFwaCA9IGJ1aWxkU3ViZ3JhcGg7XG5mdW5jdGlvbiBuZXdFbXB0eUZlZGVyYXRpb24yU2NoZW1hKGNvbmZpZykge1xuICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBkZWZpbml0aW9uc18xLlNjaGVtYShuZXcgRmVkZXJhdGlvbkJsdWVwcmludCh0cnVlKSwgY29uZmlnKTtcbiAgICBzZXRTY2hlbWFBc0ZlZDJTdWJncmFwaChzY2hlbWEpO1xuICAgIHJldHVybiBzY2hlbWE7XG59XG5leHBvcnRzLm5ld0VtcHR5RmVkZXJhdGlvbjJTY2hlbWEgPSBuZXdFbXB0eUZlZGVyYXRpb24yU2NoZW1hO1xuZnVuY3Rpb24gY29tcGxldGVTdWJncmFwaFNjaGVtYShzY2hlbWEpIHtcbiAgICBjb25zdCBjb3JlRmVhdHVyZXMgPSBzY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgIGlmIChjb3JlRmVhdHVyZXMpIHtcbiAgICAgICAgY29uc3QgZmVkRmVhdHVyZSA9IGNvcmVGZWF0dXJlcy5nZXRCeUlkZW50aXR5KGZlZGVyYXRpb25TcGVjXzEuZmVkZXJhdGlvbklkZW50aXR5KTtcbiAgICAgICAgaWYgKGZlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZUZlZDJTdWJncmFwaFNjaGVtYShzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlRmVkMVN1YmdyYXBoU2NoZW1hKHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGZlZExpbmsgPSBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5hcHBsaWVkRGlyZWN0aXZlc09mKGNvcmVTcGVjXzEubGlua0RpcmVjdGl2ZURlZmF1bHROYW1lKS5maW5kKGlzRmVkU3BlY0xpbmtEaXJlY3RpdmUpO1xuICAgICAgICBpZiAoZmVkTGluaykge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gbGlua1NwZWMuYWRkVG9TY2hlbWEoc2NoZW1hKTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVGZWQyU3ViZ3JhcGhTY2hlbWEoc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZUZlZDFTdWJncmFwaFNjaGVtYShzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNGZWRTcGVjTGlua0RpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgICBjb25zdCBhcmdzID0gZGlyZWN0aXZlLmFyZ3VtZW50cygpO1xuICAgIHJldHVybiBkaXJlY3RpdmUubmFtZSA9PT0gY29yZVNwZWNfMS5saW5rRGlyZWN0aXZlRGVmYXVsdE5hbWUgJiYgYXJnc1sndXJsJ10gJiYgYXJnc1sndXJsJ10uc3RhcnRzV2l0aChmZWRlcmF0aW9uU3BlY18xLmZlZGVyYXRpb25JZGVudGl0eSk7XG59XG5mdW5jdGlvbiBjb21wbGV0ZUZlZDFTdWJncmFwaFNjaGVtYShzY2hlbWEpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGZvciAoY29uc3Qgc3BlYyBvZiBbZmVkZXJhdGlvblNwZWNfMS5rZXlEaXJlY3RpdmVTcGVjLCBmZWRlcmF0aW9uU3BlY18xLnByb3ZpZGVzRGlyZWN0aXZlU3BlYywgZmVkZXJhdGlvblNwZWNfMS5yZXF1aXJlc0RpcmVjdGl2ZVNwZWNdKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHNjaGVtYS5kaXJlY3RpdmUoc3BlYy5uYW1lKTtcbiAgICAgICAgaWYgKCFkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGlyZWN0aXZlLmFwcGxpY2F0aW9ucygpLmxlbmd0aCA9PT0gMCwgYCR7ZGlyZWN0aXZlfSBzaG91bGRuJ3QgaGF2ZSBoYWQgdmFsaWRhdGlvbiBhdCB0aGF0IHBsYWNlc2ApO1xuICAgICAgICBjb25zdCBmaWVsZFR5cGUgPSAoX2IgPSAoX2EgPSBkaXJlY3RpdmUuYXJndW1lbnQoJ2ZpZWxkcycpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGZpZWxkVHlwZUlzV3JvbmdJbktub3duV2F5cyA9ICEhZmllbGRUeXBlXG4gICAgICAgICAgICAmJiBkaXJlY3RpdmUuYXJndW1lbnRzKCkubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAmJiAoZmllbGRUeXBlID09PSAnU3RyaW5nJyB8fCBmaWVsZFR5cGUgPT09ICdfRmllbGRTZXQnIHx8IGZpZWxkVHlwZSA9PT0gJ0ZpZWxkU2V0Jyk7XG4gICAgICAgIGlmIChkaXJlY3RpdmUuYXJndW1lbnRzKCkubGVuZ3RoID09PSAwIHx8IGZpZWxkVHlwZUlzV3JvbmdJbktub3duV2F5cykge1xuICAgICAgICAgICAgZGlyZWN0aXZlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIGZlZGVyYXRpb25TcGVjXzEuZmllbGRTZXRUeXBlU3BlYy5jaGVja09yQWRkKHNjaGVtYSwgJ18nICsgZmVkZXJhdGlvblNwZWNfMS5maWVsZFNldFR5cGVTcGVjLm5hbWUpLFxuICAgICAgICBmZWRlcmF0aW9uU3BlY18xLmtleURpcmVjdGl2ZVNwZWMuY2hlY2tPckFkZChzY2hlbWEpLFxuICAgICAgICBmZWRlcmF0aW9uU3BlY18xLnJlcXVpcmVzRGlyZWN0aXZlU3BlYy5jaGVja09yQWRkKHNjaGVtYSksXG4gICAgICAgIGZlZGVyYXRpb25TcGVjXzEucHJvdmlkZXNEaXJlY3RpdmVTcGVjLmNoZWNrT3JBZGQoc2NoZW1hKSxcbiAgICAgICAgZmVkZXJhdGlvblNwZWNfMS5leHRlbmRzRGlyZWN0aXZlU3BlYy5jaGVja09yQWRkKHNjaGVtYSksXG4gICAgICAgIGZlZGVyYXRpb25TcGVjXzEuZXh0ZXJuYWxEaXJlY3RpdmVTcGVjLmNoZWNrT3JBZGQoc2NoZW1hKSxcbiAgICAgICAgdGFnU3BlYy50YWdEaXJlY3RpdmVTcGVjLmNoZWNrT3JBZGQoc2NoZW1hKSxcbiAgICBdLmZsYXQoKTtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlRmVkMlN1YmdyYXBoU2NoZW1hKHNjaGVtYSkge1xuICAgIGNvbnN0IGNvcmVGZWF0dXJlcyA9IHNjaGVtYS5jb3JlRmVhdHVyZXM7XG4gICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShjb3JlRmVhdHVyZXMsICdUaGlzIG1ldGhvZCBzaG91bGQgbm90IGhhdmUgYmVlbiBjYWxsZWQgb24gYSBub24tY29yZSBzY2hlbWEnKTtcbiAgICBjb25zdCBmZWRGZWF0dXJlID0gY29yZUZlYXR1cmVzLmdldEJ5SWRlbnRpdHkoZmVkZXJhdGlvblNwZWNfMS5mZWRlcmF0aW9uSWRlbnRpdHkpO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmVkRmVhdHVyZSwgJ1RoaXMgbWV0aG9kIHNob3VsZCBub3QgaGF2ZSBiZWVuIGNhbGxlZCBvbiBhIHNjaGVtYSB3aXRoIG5vIEBsaW5rIGZvciBmZWRlcmF0aW9uJyk7XG4gICAgY29uc3Qgc3BlYyA9IGZlZGVyYXRpb25TcGVjXzEuRkVERVJBVElPTl9WRVJTSU9OUy5maW5kKGZlZEZlYXR1cmUudXJsLnZlcnNpb24pO1xuICAgIGlmICghc3BlYykge1xuICAgICAgICByZXR1cm4gW2Vycm9yXzEuRVJST1JTLlVOS05PV05fRkVERVJBVElPTl9MSU5LX1ZFUlNJT04uZXJyKGBJbnZhbGlkIHZlcnNpb24gJHtmZWRGZWF0dXJlLnVybC52ZXJzaW9ufSBmb3IgdGhlIGZlZGVyYXRpb24gZmVhdHVyZSBpbiBAbGluayBkaXJlY3Rpb24gb24gc2NoZW1hYCwgeyBub2RlczogZmVkRmVhdHVyZS5kaXJlY3RpdmUuc291cmNlQVNUIH0pXTtcbiAgICB9XG4gICAgcmV0dXJuIHNwZWMuYWRkRWxlbWVudHNUb1NjaGVtYShzY2hlbWEpO1xufVxuZnVuY3Rpb24gcGFyc2VGaWVsZFNldEFyZ3VtZW50KHsgcGFyZW50VHlwZSwgZGlyZWN0aXZlLCBmaWVsZEFjY2Vzc29yLCB2YWxpZGF0ZSwgZGVjb3JhdGVWYWxpZGF0aW9uRXJyb3JzID0gdHJ1ZSwgfSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblNldCA9ICgwLCBvcGVyYXRpb25zXzEucGFyc2VTZWxlY3Rpb25TZXQpKHtcbiAgICAgICAgICAgIHBhcmVudFR5cGUsXG4gICAgICAgICAgICBzb3VyY2U6IHZhbGlkYXRlRmllbGRTZXRWYWx1ZShkaXJlY3RpdmUpLFxuICAgICAgICAgICAgZmllbGRBY2Nlc3NvcixcbiAgICAgICAgICAgIHZhbGlkYXRlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZhbGlkYXRlICE9PSBudWxsICYmIHZhbGlkYXRlICE9PSB2b2lkIDAgPyB2YWxpZGF0ZSA6IHRydWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvblNldC5mb3JFYWNoRWxlbWVudCgoZWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVsdC5raW5kID09PSAnRmllbGQnICYmIGVsdC5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxFcnJvcihgQ2Fubm90IHVzZSBhbGlhcyBcIiR7ZWx0LmFsaWFzfVwiIGluIFwiJHtlbHR9XCI6IGFsaWFzZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIEAke2RpcmVjdGl2ZS5uYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25TZXQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yKSB8fCAhZGVjb3JhdGVWYWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGhhbmRsZUZpZWxkU2V0VmFsaWRhdGlvbkVycm9yKGRpcmVjdGl2ZSwgZSwgKG1zZykgPT4ge1xuICAgICAgICAgICAgaWYgKG1zZy5zdGFydHNXaXRoKCdDYW5ub3QgcXVlcnkgZmllbGQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChtc2cuZW5kc1dpdGgoJy4nKSkge1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cuc2xpY2UoMCwgbXNnLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aXZlLm5hbWUgPT09IGZlZGVyYXRpb25TcGVjXzEua2V5RGlyZWN0aXZlU3BlYy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IG1zZyArICcgKHRoZSBmaWVsZCBzaG91bGQgZWl0aGVyIGJlIGFkZGVkIHRvIHRoaXMgc3ViZ3JhcGggb3IsIGlmIGl0IHNob3VsZCBub3QgYmUgcmVzb2x2ZWQgYnkgdGhpcyBzdWJncmFwaCwgeW91IG5lZWQgdG8gYWRkIGl0IHRvIHRoaXMgc3ViZ3JhcGggd2l0aCBAZXh0ZXJuYWwpLic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cgKyAnIChpZiB0aGUgZmllbGQgaXMgZGVmaW5lZCBpbiBhbm90aGVyIHN1YmdyYXBoLCB5b3UgbmVlZCB0byBhZGQgaXQgdG8gdGhpcyBzdWJncmFwaCB3aXRoIEBleHRlcm5hbCkuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLnBhcnNlRmllbGRTZXRBcmd1bWVudCA9IHBhcnNlRmllbGRTZXRBcmd1bWVudDtcbmZ1bmN0aW9uIGNvbGxlY3RUYXJnZXRGaWVsZHMoeyBwYXJlbnRUeXBlLCBkaXJlY3RpdmUsIGluY2x1ZGVJbnRlcmZhY2VGaWVsZHNJbXBsZW1lbnRhdGlvbnMsIHZhbGlkYXRlID0gdHJ1ZSwgfSkge1xuICAgIGNvbnN0IGZpZWxkcyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICAgIHBhcnNlRmllbGRTZXRBcmd1bWVudCh7XG4gICAgICAgICAgICBwYXJlbnRUeXBlLFxuICAgICAgICAgICAgZGlyZWN0aXZlLFxuICAgICAgICAgICAgZmllbGRBY2Nlc3NvcjogKHQsIGYpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHQuZmllbGQoZik7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVJbnRlcmZhY2VGaWVsZHNJbXBsZW1lbnRhdGlvbnMgJiYgKDAsIGRlZmluaXRpb25zXzEuaXNJbnRlcmZhY2VUeXBlKSh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbXBsVHlwZSBvZiB0LnBvc3NpYmxlUnVudGltZVR5cGVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbXBsRmllbGQgPSBpbXBsVHlwZS5maWVsZChmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1wbEZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGltcGxGaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGlzR3JhcGhRTEVycm9yID0gKDAsIGVycm9yXzEuZXJyb3JDYXVzZXMpKGUpICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghaXNHcmFwaFFMRXJyb3IgfHwgdmFsaWRhdGUpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbn1cbmV4cG9ydHMuY29sbGVjdFRhcmdldEZpZWxkcyA9IGNvbGxlY3RUYXJnZXRGaWVsZHM7XG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkU2V0VmFsdWUoZGlyZWN0aXZlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGZpZWxkcyA9IGRpcmVjdGl2ZS5hcmd1bWVudHMoKS5maWVsZHM7XG4gICAgY29uc3Qgbm9kZXMgPSBkaXJlY3RpdmUuc291cmNlQVNUO1xuICAgIGlmICh0eXBlb2YgZmllbGRzICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SX0NBVEVHT1JJRVMuRElSRUNUSVZFX0lOVkFMSURfRklFTERTX1RZUEUuZ2V0KGRpcmVjdGl2ZS5uYW1lKS5lcnIoYEludmFsaWQgdmFsdWUgZm9yIGFyZ3VtZW50IFwiJHtkaXJlY3RpdmUuZGVmaW5pdGlvbi5hcmd1bWVudCgnZmllbGRzJykubmFtZX1cIjogbXVzdCBiZSBhIHN0cmluZy5gLCB7IG5vZGVzIH0pO1xuICAgIH1cbiAgICBpZiAobm9kZXMgJiYgbm9kZXMua2luZCA9PT0gJ0RpcmVjdGl2ZScpIHtcbiAgICAgICAgZm9yIChjb25zdCBhcmdOb2RlIG9mIChfYSA9IG5vZGVzLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pIHtcbiAgICAgICAgICAgIGlmIChhcmdOb2RlLm5hbWUudmFsdWUgPT09ICdmaWVsZHMnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ05vZGUudmFsdWUua2luZCAhPT0gJ1N0cmluZ1ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SX0NBVEVHT1JJRVMuRElSRUNUSVZFX0lOVkFMSURfRklFTERTX1RZUEUuZ2V0KGRpcmVjdGl2ZS5uYW1lKS5lcnIoYEludmFsaWQgdmFsdWUgZm9yIGFyZ3VtZW50IFwiJHtkaXJlY3RpdmUuZGVmaW5pdGlvbi5hcmd1bWVudCgnZmllbGRzJykubmFtZX1cIjogbXVzdCBiZSBhIHN0cmluZy5gLCB7IG5vZGVzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xufVxuZnVuY3Rpb24gc3ViZ3JhcGhzRnJvbVNlcnZpY2VMaXN0KHNlcnZpY2VMaXN0KSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICBjb25zdCBzdWJncmFwaHMgPSBuZXcgU3ViZ3JhcGhzKCk7XG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIHNlcnZpY2VMaXN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJncmFwaHMuYWRkKGJ1aWxkU3ViZ3JhcGgoc2VydmljZS5uYW1lLCAoX2EgPSBzZXJ2aWNlLnVybCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycsIHNlcnZpY2UudHlwZURlZnMpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgY2F1c2VzID0gKDAsIGVycm9yXzEuZXJyb3JDYXVzZXMpKGUpO1xuICAgICAgICAgICAgaWYgKGNhdXNlcykge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoY2F1c2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPT09IDAgPyBzdWJncmFwaHMgOiBlcnJvcnM7XG59XG5leHBvcnRzLnN1YmdyYXBoc0Zyb21TZXJ2aWNlTGlzdCA9IHN1YmdyYXBoc0Zyb21TZXJ2aWNlTGlzdDtcbmNsYXNzIFN1YmdyYXBocyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3ViZ3JhcGhzID0gbmV3IHV0aWxzXzEuT3JkZXJlZE1hcCgpO1xuICAgIH1cbiAgICBhZGQoc3ViZ3JhcGgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3ViZ3JhcGhzLmhhcyhzdWJncmFwaC5uYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIHN1YmdyYXBoIG5hbWVkICR7c3ViZ3JhcGgubmFtZX0gYWxyZWFkeSBleGlzdHNgICsgKHN1YmdyYXBoLnVybCA/IGAgKHdpdGggdXJsICcke3N1YmdyYXBoLnVybH0nKWAgOiAnJykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ViZ3JhcGhzLmFkZChzdWJncmFwaC5uYW1lLCBzdWJncmFwaCk7XG4gICAgICAgIHJldHVybiBzdWJncmFwaDtcbiAgICB9XG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViZ3JhcGhzLmdldChuYW1lKTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViZ3JhcGhzLnNpemU7XG4gICAgfVxuICAgIG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJncmFwaHMua2V5cygpO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YmdyYXBocy52YWx1ZXMoKTtcbiAgICB9XG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHN1YmdyYXBoIG9mIHRoaXMuc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICB5aWVsZCBzdWJncmFwaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YmdyYXBoIG9mIHRoaXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3ViZ3JhcGgudmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F1c2VzID0gKDAsIGVycm9yXzEuZXJyb3JDYXVzZXMpKGUpO1xuICAgICAgICAgICAgICAgIGlmICghY2F1c2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoY2F1c2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IGVycm9ycztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnWycgKyB0aGlzLnN1YmdyYXBocy5rZXlzKCkuam9pbignLCAnKSArICddJztcbiAgICB9XG59XG5leHBvcnRzLlN1YmdyYXBocyA9IFN1YmdyYXBocztcbmV4cG9ydHMuYW55VHlwZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVTY2FsYXJUeXBlU3BlY2lmaWNhdGlvbikoeyBuYW1lOiAnX0FueScgfSk7XG5leHBvcnRzLnNlcnZpY2VUeXBlU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZU9iamVjdFR5cGVTcGVjaWZpY2F0aW9uKSh7XG4gICAgbmFtZTogJ19TZXJ2aWNlJyxcbiAgICBmaWVsZHNGY3Q6IChzY2hlbWEpID0+IFt7IG5hbWU6ICdzZGwnLCB0eXBlOiBzY2hlbWEuc3RyaW5nVHlwZSgpIH1dLFxufSk7XG5leHBvcnRzLmVudGl0eVR5cGVTcGVjID0gKDAsIGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEuY3JlYXRlVW5pb25UeXBlU3BlY2lmaWNhdGlvbikoe1xuICAgIG5hbWU6ICdfRW50aXR5JyxcbiAgICBtZW1iZXJzRmN0OiAoc2NoZW1hKSA9PiB7XG4gICAgICAgIHJldHVybiBzY2hlbWEub2JqZWN0VHlwZXMoKS5maWx0ZXIoaXNFbnRpdHlUeXBlKS5tYXAoKHQpID0+IHQubmFtZSk7XG4gICAgfSxcbn0pO1xuZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9UWVBFUyA9IFtleHBvcnRzLmFueVR5cGVTcGVjLCBleHBvcnRzLnNlcnZpY2VUeXBlU3BlYywgZXhwb3J0cy5lbnRpdHlUeXBlU3BlY107XG5leHBvcnRzLnNlcnZpY2VGaWVsZE5hbWUgPSAnX3NlcnZpY2UnO1xuZXhwb3J0cy5lbnRpdGllc0ZpZWxkTmFtZSA9ICdfZW50aXRpZXMnO1xuZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9GSUVMRFMgPSBbZXhwb3J0cy5zZXJ2aWNlRmllbGROYW1lLCBleHBvcnRzLmVudGl0aWVzRmllbGROYW1lXTtcbmNsYXNzIFN1YmdyYXBoIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB1cmwsIHNjaGVtYSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIGlmIChuYW1lID09PSBleHBvcnRzLkZFREVSQVRJT05fUkVTRVJWRURfU1VCR1JBUEhfTkFNRSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9TVUJHUkFQSF9OQU1FLmVycihgSW52YWxpZCBuYW1lICR7ZXhwb3J0cy5GRURFUkFUSU9OX1JFU0VSVkVEX1NVQkdSQVBIX05BTUV9IGZvciBhIHN1YmdyYXBoOiB0aGlzIG5hbWUgaXMgcmVzZXJ2ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtZXRhZGF0YSgpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBmZWRlcmF0aW9uTWV0YWRhdGEodGhpcy5zY2hlbWEpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKG1ldGFkYXRhLCAnVGhlIHN1YmdyYXBoIHNjaGVtYSBzaG91bGQgaGF2ZSBidWlsdCB3aXRoIHRoZSBmZWRlcmF0aW9uIGJ1aWx0LWlucy4nKTtcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgIH1cbiAgICBpc0ZlZDJTdWJncmFwaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGEoKS5pc0ZlZDJTY2hlbWEoKTtcbiAgICB9XG4gICAgYWRkRmVkZXJhdGlvbk9wZXJhdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YSgpO1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgZXhwb3J0cy5GRURFUkFUSU9OX09QRVJBVElPTl9UWVBFUykge1xuICAgICAgICAgICAgdHlwZS5jaGVja09yQWRkKHRoaXMuc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVJvb3QgPSB0aGlzLnNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLnJvb3QoXCJxdWVyeVwiKTtcbiAgICAgICAgY29uc3QgcXVlcnlUeXBlID0gcXVlcnlSb290ID8gcXVlcnlSb290LnR5cGUgOiB0aGlzLnNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUoXCJRdWVyeVwiKSk7XG4gICAgICAgIGNvbnN0IGVudGl0eUZpZWxkID0gcXVlcnlUeXBlLmZpZWxkKGV4cG9ydHMuZW50aXRpZXNGaWVsZE5hbWUpO1xuICAgICAgICBjb25zdCBlbnRpdHlUeXBlID0gbWV0YWRhdGEuZW50aXR5VHlwZSgpO1xuICAgICAgICBpZiAoZW50aXR5VHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5RmllbGRUeXBlID0gbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUobmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUoZW50aXR5VHlwZSkpO1xuICAgICAgICAgICAgaWYgKCFlbnRpdHlGaWVsZCkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZS5hZGRGaWVsZChleHBvcnRzLmVudGl0aWVzRmllbGROYW1lLCBlbnRpdHlGaWVsZFR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRBcmd1bWVudCgncmVwcmVzZW50YXRpb25zJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUobmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUobmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUobWV0YWRhdGEuYW55VHlwZSgpKSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFlbnRpdHlGaWVsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5RmllbGQudHlwZSA9IGVudGl0eVR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW50aXR5RmllbGQpIHtcbiAgICAgICAgICAgIGVudGl0eUZpZWxkLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcXVlcnlUeXBlLmZpZWxkKGV4cG9ydHMuc2VydmljZUZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgIHF1ZXJ5VHlwZS5hZGRGaWVsZChleHBvcnRzLnNlcnZpY2VGaWVsZE5hbWUsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKG1ldGFkYXRhLnNlcnZpY2VUeXBlKCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYWRkRmVkZXJhdGlvbk9wZXJhdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgYWRkU3ViZ3JhcGhUb0Vycm9yKGUsIHRoaXMubmFtZSwgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNQcmludGVkRGlyZWN0aXZlKGQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5tZXRhZGF0YSgpLmFsbEZlZGVyYXRpb25EaXJlY3RpdmVzKCkuaW5jbHVkZXMoZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3JlID0gdGhpcy5zY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgICAgICByZXR1cm4gIWNvcmUgfHwgKChfYSA9IGNvcmUuc291cmNlRmVhdHVyZShkKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZlYXR1cmUudXJsLmlkZW50aXR5KSAhPT0gY29yZVNwZWNfMS5saW5rSWRlbnRpdHk7XG4gICAgfVxuICAgIGlzUHJpbnRlZFR5cGUodCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLm1ldGFkYXRhKCkuYWxsRmVkZXJhdGlvblR5cGVzKCkuaW5jbHVkZXModCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKSh0KSAmJiB0LmlzUXVlcnlSb290VHlwZSgpICYmIHQuZmllbGRzKCkuZmlsdGVyKChmKSA9PiAhaXNGZWRlcmF0aW9uRmllbGQoZikpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvcmUgPSB0aGlzLnNjaGVtYS5jb3JlRmVhdHVyZXM7XG4gICAgICAgIHJldHVybiAhY29yZSB8fCAoKF9hID0gY29yZS5zb3VyY2VGZWF0dXJlKHQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmVhdHVyZS51cmwuaWRlbnRpdHkpICE9PSBjb3JlU3BlY18xLmxpbmtJZGVudGl0eTtcbiAgICB9XG4gICAgaXNQcmludGVkRGlyZWN0aXZlQXBwbGljYXRpb24oZCkge1xuICAgICAgICBpZiAoIXRoaXMuc2NoZW1hLmNvcmVGZWF0dXJlcyB8fCBkLm5hbWUgIT09IGxpbmtTcGVjLnVybC5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmdzID0gZC5hcmd1bWVudHMoKTtcbiAgICAgICAgbGV0IHVybEFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCd1cmwnIGluIGFyZ3MpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdXJsQXJnID0gY29yZVNwZWNfMS5GZWF0dXJlVXJsLnBhcnNlKGFyZ3NbJ3VybCddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNEZWZhdWx0TGlua1RvTGluayA9ICh1cmxBcmcgPT09IG51bGwgfHwgdXJsQXJnID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1cmxBcmcuaWRlbnRpdHkpID09PSBjb3JlU3BlY18xLmxpbmtJZGVudGl0eSAmJiBPYmplY3Qua2V5cyhhcmdzKS5sZW5ndGggPT09IDE7XG4gICAgICAgIHJldHVybiAhaXNEZWZhdWx0TGlua1RvTGluaztcbiAgICB9XG4gICAgdG9TdHJpbmcoYmFzZVByaW50T3B0aW9ucyA9IHByaW50XzEuZGVmYXVsdFByaW50T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIHByaW50XzEucHJpbnRTY2hlbWEpKHRoaXMuc2NoZW1hLCB7XG4gICAgICAgICAgICAuLi5iYXNlUHJpbnRPcHRpb25zLFxuICAgICAgICAgICAgZGlyZWN0aXZlRGVmaW5pdGlvbkZpbHRlcjogKGQpID0+IHRoaXMuaXNQcmludGVkRGlyZWN0aXZlKGQpLFxuICAgICAgICAgICAgdHlwZUZpbHRlcjogKHQpID0+IHRoaXMuaXNQcmludGVkVHlwZSh0KSxcbiAgICAgICAgICAgIGZpZWxkRmlsdGVyOiAoZikgPT4gIWlzRmVkZXJhdGlvbkZpZWxkKGYpLFxuICAgICAgICAgICAgZGlyZWN0aXZlQXBwbGljYXRpb25GaWx0ZXI6IChkKSA9PiB0aGlzLmlzUHJpbnRlZERpcmVjdGl2ZUFwcGxpY2F0aW9uKGQpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlN1YmdyYXBoID0gU3ViZ3JhcGg7XG5mdW5jdGlvbiBhZGRTdWJncmFwaFRvQVNUTm9kZShub2RlLCBzdWJncmFwaCkge1xuICAgIGlmICgnc3ViZ3JhcGgnIGluIG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLm5vZGUsXG4gICAgICAgIHN1YmdyYXBoXG4gICAgfTtcbn1cbmV4cG9ydHMuYWRkU3ViZ3JhcGhUb0FTVE5vZGUgPSBhZGRTdWJncmFwaFRvQVNUTm9kZTtcbmZ1bmN0aW9uIGFkZFN1YmdyYXBoVG9FcnJvcihlLCBzdWJncmFwaE5hbWUsIGVycm9yQ29kZSkge1xuICAgIGNvbnN0IHVwZGF0ZWRDYXVzZXMgPSAoMCwgZXJyb3JfMS5lcnJvckNhdXNlcykoZSkubWFwKGNhdXNlID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFske3N1YmdyYXBoTmFtZX1dICR7Y2F1c2UubWVzc2FnZX1gO1xuICAgICAgICBjb25zdCBub2RlcyA9IGNhdXNlLm5vZGVzXG4gICAgICAgICAgICA/IGNhdXNlLm5vZGVzLm1hcChub2RlID0+IGFkZFN1YmdyYXBoVG9BU1ROb2RlKG5vZGUsIHN1YmdyYXBoTmFtZSkpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgY29kZSA9IChfYSA9ICgwLCBlcnJvcl8xLmVycm9yQ29kZURlZikoY2F1c2UpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlcnJvckNvZGU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi4oMCwgZXJyb3JfMS5leHRyYWN0R3JhcGhRTEVycm9yT3B0aW9ucykoY2F1c2UpLFxuICAgICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBjYXVzZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNvZGVcbiAgICAgICAgICAgID8gY29kZS5lcnIobWVzc2FnZSwgb3B0aW9ucylcbiAgICAgICAgICAgIDogbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVwZGF0ZWRDYXVzZXMubGVuZ3RoID09PSAxID8gdXBkYXRlZENhdXNlc1swXSA6ICgwLCBkZWZpbml0aW9uc18xLkVyckdyYXBoUUxWYWxpZGF0aW9uRmFpbGVkKSh1cGRhdGVkQ2F1c2VzKTtcbn1cbmV4cG9ydHMuYWRkU3ViZ3JhcGhUb0Vycm9yID0gYWRkU3ViZ3JhcGhUb0Vycm9yO1xuY2xhc3MgRXh0ZXJuYWxUZXN0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5mYWtlRXh0ZXJuYWxGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMucHJvdmlkZWRGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxEaXJlY3RpdmUgPSB0aGlzLm1ldGFkYXRhKCkuZXh0ZXJuYWxEaXJlY3RpdmUoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0RmFrZUV4dGVybmFscygpO1xuICAgICAgICB0aGlzLmNvbGxlY3RQcm92aWRlZEZpZWxkcygpO1xuICAgIH1cbiAgICBtZXRhZGF0YSgpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBmZWRlcmF0aW9uTWV0YWRhdGEodGhpcy5zY2hlbWEpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKG1ldGFkYXRhLCAnU2NoZW1hIHNob3VsZCBiZSBhIHN1YmdyYXBocyBzY2hlbWEnKTtcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgIH1cbiAgICBjb2xsZWN0RmFrZUV4dGVybmFscygpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLm1ldGFkYXRhKCk7XG4gICAgICAgIGNvbnN0IGV4dGVuZHNEaXJlY3RpdmUgPSBtZXRhZGF0YS5leHRlbmRzRGlyZWN0aXZlKCk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIG1ldGFkYXRhLmtleURpcmVjdGl2ZSgpLmFwcGxpY2F0aW9ucygpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRUeXBlID0ga2V5LnBhcmVudDtcbiAgICAgICAgICAgIGlmICghKGtleS5vZkV4dGVuc2lvbigpIHx8IHBhcmVudFR5cGUuaGFzQXBwbGllZERpcmVjdGl2ZShleHRlbmRzRGlyZWN0aXZlKSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbGxlY3RUYXJnZXRGaWVsZHMoe1xuICAgICAgICAgICAgICAgIHBhcmVudFR5cGUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlOiBrZXksXG4gICAgICAgICAgICAgICAgaW5jbHVkZUludGVyZmFjZUZpZWxkc0ltcGxlbWVudGF0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGZhbHNlLFxuICAgICAgICAgICAgfSkuZmlsdGVyKChmaWVsZCkgPT4gZmllbGQuaGFzQXBwbGllZERpcmVjdGl2ZSh0aGlzLmV4dGVybmFsRGlyZWN0aXZlKSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoZmllbGQpID0+IHRoaXMuZmFrZUV4dGVybmFsRmllbGRzLmFkZChmaWVsZC5jb29yZGluYXRlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29sbGVjdFByb3ZpZGVkRmllbGRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVzIG9mIHRoaXMubWV0YWRhdGEoKS5wcm92aWRlc0RpcmVjdGl2ZSgpLmFwcGxpY2F0aW9ucygpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBwcm92aWRlcy5wYXJlbnQ7XG4gICAgICAgICAgICBjb2xsZWN0VGFyZ2V0RmllbGRzKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRUeXBlOiAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkocGFyZW50LnR5cGUpLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZTogcHJvdmlkZXMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZUludGVyZmFjZUZpZWxkc0ltcGxlbWVudGF0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXG4gICAgICAgICAgICB9KS5mb3JFYWNoKChmKSA9PiB0aGlzLnByb3ZpZGVkRmllbGRzLmFkZChmLmNvb3JkaW5hdGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0V4dGVybmFsKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZC5oYXNBcHBsaWVkRGlyZWN0aXZlKHRoaXMuZXh0ZXJuYWxEaXJlY3RpdmUpICYmICF0aGlzLmlzRmFrZUV4dGVybmFsKGZpZWxkKTtcbiAgICB9XG4gICAgaXNGYWtlRXh0ZXJuYWwoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFrZUV4dGVybmFsRmllbGRzLmhhcyhmaWVsZC5jb29yZGluYXRlKTtcbiAgICB9XG4gICAgc2VsZWN0c0FueUV4dGVybmFsRmllbGQoc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zKCkpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkU2VsZWN0aW9uJyAmJiB0aGlzLmlzRXh0ZXJuYWwoc2VsZWN0aW9uLmVsZW1lbnQoKS5kZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RzQW55RXh0ZXJuYWxGaWVsZChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpc1BhcnRpYWxseUV4dGVybmFsKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRXh0ZXJuYWwoZmllbGQpICYmIHRoaXMucHJvdmlkZWRGaWVsZHMuaGFzKGZpZWxkLmNvb3JkaW5hdGUpO1xuICAgIH1cbiAgICBpc0Z1bGx5RXh0ZXJuYWwoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFeHRlcm5hbChmaWVsZCkgJiYgIXRoaXMucHJvdmlkZWRGaWVsZHMuaGFzKGZpZWxkLmNvb3JkaW5hdGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZUluYWN0aXZlUHJvdmlkZXNBbmRSZXF1aXJlcyhzY2hlbWEsIG9uTW9kaWZpZWQgPSAoKSA9PiB7IH0pIHtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGZlZGVyYXRpb25NZXRhZGF0YShzY2hlbWEpO1xuICAgIGlmICghbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcm92aWRlc0RpcmVjdGl2ZSA9IG1ldGFkYXRhLnByb3ZpZGVzRGlyZWN0aXZlKCk7XG4gICAgY29uc3QgcmVxdWlyZXNEaXJlY3RpdmUgPSBtZXRhZGF0YS5yZXF1aXJlc0RpcmVjdGl2ZSgpO1xuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY2hlbWEudHlwZXMoKSkge1xuICAgICAgICBpZiAoISgwLCBkZWZpbml0aW9uc18xLmlzT2JqZWN0VHlwZSkodHlwZSkgJiYgISgwLCBkZWZpbml0aW9uc18xLmlzSW50ZXJmYWNlVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdHlwZS5maWVsZHMoKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRCYXNlVHlwZSA9ICgwLCBkZWZpbml0aW9uc18xLmJhc2VUeXBlKShmaWVsZC50eXBlKTtcbiAgICAgICAgICAgIHJlbW92ZUluYWN0aXZlQXBwbGljYXRpb25zKHByb3ZpZGVzRGlyZWN0aXZlLCBmaWVsZCwgZmllbGRCYXNlVHlwZSwgb25Nb2RpZmllZCk7XG4gICAgICAgICAgICByZW1vdmVJbmFjdGl2ZUFwcGxpY2F0aW9ucyhyZXF1aXJlc0RpcmVjdGl2ZSwgZmllbGQsIHR5cGUsIG9uTW9kaWZpZWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXMgPSByZW1vdmVJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXM7XG5mdW5jdGlvbiByZW1vdmVJbmFjdGl2ZUFwcGxpY2F0aW9ucyhkaXJlY3RpdmVEZWZpbml0aW9uLCBmaWVsZCwgcGFyZW50VHlwZSwgb25Nb2RpZmllZCkge1xuICAgIGZvciAoY29uc3QgYXBwbGljYXRpb24gb2YgZmllbGQuYXBwbGllZERpcmVjdGl2ZXNPZihkaXJlY3RpdmVEZWZpbml0aW9uKSkge1xuICAgICAgICBsZXQgc2VsZWN0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsZWN0aW9uID0gcGFyc2VGaWVsZFNldEFyZ3VtZW50KHsgcGFyZW50VHlwZSwgZGlyZWN0aXZlOiBhcHBsaWNhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdHNOb25FeHRlcm5hbExlYWZGaWVsZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSB3aXRob3V0Tm9uRXh0ZXJuYWxMZWFmRmllbGRzKHNlbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAoIXVwZGF0ZWQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZERpcmVjdGl2ZSA9IGZpZWxkLmFwcGx5RGlyZWN0aXZlKGRpcmVjdGl2ZURlZmluaXRpb24sIHsgZmllbGRzOiB1cGRhdGVkLnRvU3RyaW5nKHRydWUsIGZhbHNlKSB9KTtcbiAgICAgICAgICAgICAgICBvbk1vZGlmaWVkKGZpZWxkLCBhcHBsaWNhdGlvbiwgdXBkYXRlZERpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbk1vZGlmaWVkKGZpZWxkLCBhcHBsaWNhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc0V4dGVybmFsT3JIYXNFeHRlcm5hbEltcGxlbWVudGF0aW9ucyhmaWVsZCkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gZmVkZXJhdGlvbk1ldGFkYXRhKGZpZWxkLnNjaGVtYSgpKTtcbiAgICBpZiAoIW1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmhhc0FwcGxpZWREaXJlY3RpdmUobWV0YWRhdGEuZXh0ZXJuYWxEaXJlY3RpdmUoKSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudFR5cGUgPSBmaWVsZC5wYXJlbnQ7XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzSW50ZXJmYWNlVHlwZSkocGFyZW50VHlwZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbXBsZW0gb2YgcGFyZW50VHlwZS5wb3NzaWJsZVJ1bnRpbWVUeXBlcygpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZEluSW1wbGVtID0gaW1wbGVtLmZpZWxkKGZpZWxkLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpZWxkSW5JbXBsZW0gJiYgZmllbGRJbkltcGxlbS5oYXNBcHBsaWVkRGlyZWN0aXZlKG1ldGFkYXRhLmV4dGVybmFsRGlyZWN0aXZlKCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc2VsZWN0c05vbkV4dGVybmFsTGVhZkZpZWxkKHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzZWxlY3Rpb24uc2VsZWN0aW9ucygpLnNvbWUocyA9PiB7XG4gICAgICAgIGlmIChzLmtpbmQgPT09ICdGaWVsZFNlbGVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChpc0V4dGVybmFsT3JIYXNFeHRlcm5hbEltcGxlbWVudGF0aW9ucyhzLmZpZWxkLmRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICFzLnNlbGVjdGlvblNldCB8fCBzZWxlY3RzTm9uRXh0ZXJuYWxMZWFmRmllbGQocy5zZWxlY3Rpb25TZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdHNOb25FeHRlcm5hbExlYWZGaWVsZChzLnNlbGVjdGlvblNldCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHdpdGhvdXROb25FeHRlcm5hbExlYWZGaWVsZHMoc2VsZWN0aW9uU2V0KSB7XG4gICAgY29uc3QgbmV3U2VsZWN0aW9uU2V0ID0gbmV3IG9wZXJhdGlvbnNfMS5TZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0LnBhcmVudFR5cGUpO1xuICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zKCkpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSAnRmllbGRTZWxlY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoaXNFeHRlcm5hbE9ySGFzRXh0ZXJuYWxJbXBsZW1lbnRhdGlvbnMoc2VsZWN0aW9uLmZpZWxkLmRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgbmV3U2VsZWN0aW9uU2V0LmFkZChzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkID0gd2l0aG91dE5vbkV4dGVybmFsTGVhZkZpZWxkcyhzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICAgIGlmICghdXBkYXRlZC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBuZXdTZWxlY3Rpb25TZXQuYWRkKCgwLCBvcGVyYXRpb25zXzEuc2VsZWN0aW9uT2ZFbGVtZW50KShzZWxlY3Rpb24uZWxlbWVudCgpLCB1cGRhdGVkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1NlbGVjdGlvblNldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlZGVyYXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZFREVSQVRJT05fVkVSU0lPTlMgPSBleHBvcnRzLkZlZGVyYXRpb25TcGVjRGVmaW5pdGlvbiA9IGV4cG9ydHMuRkVERVJBVElPTl9TUEVDX1RZUEVTID0gZXhwb3J0cy5BTExfRkVERVJBVElPTl9ESVJFQ1RJVkVTX0RFRkFVTFRfTkFNRVMgPSBleHBvcnRzLkZFREVSQVRJT04yX1NQRUNfRElSRUNUSVZFUyA9IGV4cG9ydHMuRkVERVJBVElPTjJfMV9PTkxZX1NQRUNfRElSRUNUSVZFUyA9IGV4cG9ydHMuRkVERVJBVElPTjJfT05MWV9TUEVDX0RJUkVDVElWRVMgPSBleHBvcnRzLmNvbXBvc2VEaXJlY3RpdmVTcGVjID0gZXhwb3J0cy5vdmVycmlkZURpcmVjdGl2ZVNwZWMgPSBleHBvcnRzLnNoYXJlYWJsZURpcmVjdGl2ZVNwZWMgPSBleHBvcnRzLnByb3ZpZGVzRGlyZWN0aXZlU3BlYyA9IGV4cG9ydHMucmVxdWlyZXNEaXJlY3RpdmVTcGVjID0gZXhwb3J0cy5leHRlcm5hbERpcmVjdGl2ZVNwZWMgPSBleHBvcnRzLmV4dGVuZHNEaXJlY3RpdmVTcGVjID0gZXhwb3J0cy5rZXlEaXJlY3RpdmVTcGVjID0gZXhwb3J0cy5maWVsZFNldFR5cGVTcGVjID0gZXhwb3J0cy5mZWRlcmF0aW9uSWRlbnRpdHkgPSB2b2lkIDA7XG5jb25zdCBkZWZpbml0aW9uc18xID0gcmVxdWlyZShcIi4vZGVmaW5pdGlvbnNcIik7XG5jb25zdCBjb3JlU3BlY18xID0gcmVxdWlyZShcIi4vY29yZVNwZWNcIik7XG5jb25zdCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xID0gcmVxdWlyZShcIi4vZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25cIik7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IHRhZ1NwZWNfMSA9IHJlcXVpcmUoXCIuL3RhZ1NwZWNcIik7XG5jb25zdCBmZWRlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9mZWRlcmF0aW9uXCIpO1xuY29uc3Qga25vd25Db3JlRmVhdHVyZXNfMSA9IHJlcXVpcmUoXCIuL2tub3duQ29yZUZlYXR1cmVzXCIpO1xuY29uc3QgaW5hY2Nlc3NpYmxlU3BlY18xID0gcmVxdWlyZShcIi4vaW5hY2Nlc3NpYmxlU3BlY1wiKTtcbmV4cG9ydHMuZmVkZXJhdGlvbklkZW50aXR5ID0gJ2h0dHBzOi8vc3BlY3MuYXBvbGxvLmRldi9mZWRlcmF0aW9uJztcbmV4cG9ydHMuZmllbGRTZXRUeXBlU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZVNjYWxhclR5cGVTcGVjaWZpY2F0aW9uKSh7IG5hbWU6ICdGaWVsZFNldCcgfSk7XG5leHBvcnRzLmtleURpcmVjdGl2ZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKSh7XG4gICAgbmFtZTogJ2tleScsXG4gICAgbG9jYXRpb25zOiBbZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLk9CSkVDVCwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOVEVSRkFDRV0sXG4gICAgcmVwZWF0YWJsZTogdHJ1ZSxcbiAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHtcbiAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgZmllbGRzQXJndW1lbnQoc2NoZW1hKSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3Jlc29sdmFibGUnLCB0eXBlOiBzY2hlbWEuYm9vbGVhblR5cGUoKSwgZGVmYXVsdFZhbHVlOiB0cnVlIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgfSksXG59KTtcbmV4cG9ydHMuZXh0ZW5kc0RpcmVjdGl2ZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKSh7XG4gICAgbmFtZTogJ2V4dGVuZHMnLFxuICAgIGxvY2F0aW9uczogW2dyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0VdLFxufSk7XG5leHBvcnRzLmV4dGVybmFsRGlyZWN0aXZlU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICBuYW1lOiAnZXh0ZXJuYWwnLFxuICAgIGxvY2F0aW9uczogW2dyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OXSxcbiAgICBhcmd1bWVudEZjdDogKHNjaGVtYSkgPT4gKHtcbiAgICAgICAgYXJnczogW3sgbmFtZTogJ3JlYXNvbicsIHR5cGU6IHNjaGVtYS5zdHJpbmdUeXBlKCkgfV0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgfSksXG59KTtcbmV4cG9ydHMucmVxdWlyZXNEaXJlY3RpdmVTcGVjID0gKDAsIGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEuY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbikoe1xuICAgIG5hbWU6ICdyZXF1aXJlcycsXG4gICAgbG9jYXRpb25zOiBbZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT05dLFxuICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoe1xuICAgICAgICBhcmdzOiBbZmllbGRzQXJndW1lbnQoc2NoZW1hKV0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgfSksXG59KTtcbmV4cG9ydHMucHJvdmlkZXNEaXJlY3RpdmVTcGVjID0gKDAsIGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEuY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbikoe1xuICAgIG5hbWU6ICdwcm92aWRlcycsXG4gICAgbG9jYXRpb25zOiBbZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT05dLFxuICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoe1xuICAgICAgICBhcmdzOiBbZmllbGRzQXJndW1lbnQoc2NoZW1hKV0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgfSksXG59KTtcbmV4cG9ydHMuc2hhcmVhYmxlRGlyZWN0aXZlU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICBuYW1lOiAnc2hhcmVhYmxlJyxcbiAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNULCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTl0sXG59KTtcbmV4cG9ydHMub3ZlcnJpZGVEaXJlY3RpdmVTcGVjID0gKDAsIGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEuY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbikoe1xuICAgIG5hbWU6ICdvdmVycmlkZScsXG4gICAgbG9jYXRpb25zOiBbZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT05dLFxuICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoe1xuICAgICAgICBhcmdzOiBbeyBuYW1lOiAnZnJvbScsIHR5cGU6IG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpIH1dLFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgIH0pLFxufSk7XG5leHBvcnRzLmNvbXBvc2VEaXJlY3RpdmVTcGVjID0gKDAsIGRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEuY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbikoe1xuICAgIG5hbWU6ICdjb21wb3NlRGlyZWN0aXZlJyxcbiAgICBsb2NhdGlvbnM6IFtncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BXSxcbiAgICByZXBlYXRhYmxlOiB0cnVlLFxuICAgIGFyZ3VtZW50RmN0OiAoc2NoZW1hKSA9PiAoe1xuICAgICAgICBhcmdzOiBbeyBuYW1lOiAnbmFtZScsIHR5cGU6IHNjaGVtYS5zdHJpbmdUeXBlKCkgfV0sXG4gICAgICAgIGVycm9yczogW10sXG4gICAgfSksXG59KTtcbmZ1bmN0aW9uIGZpZWxkc0FyZ3VtZW50KHNjaGVtYSkge1xuICAgIHJldHVybiB7IG5hbWU6ICdmaWVsZHMnLCB0eXBlOiBmaWVsZFNldFR5cGUoc2NoZW1hKSB9O1xufVxuZnVuY3Rpb24gZmllbGRTZXRUeXBlKHNjaGVtYSkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gKDAsIGZlZGVyYXRpb25fMS5mZWRlcmF0aW9uTWV0YWRhdGEpKHNjaGVtYSk7XG4gICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShtZXRhZGF0YSwgYFRoZSBzY2hlbWEgaXMgbm90IGEgZmVkZXJhdGlvbiBzdWJncmFwaGApO1xuICAgIHJldHVybiBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShtZXRhZGF0YS5maWVsZFNldFR5cGUoKSk7XG59XG5leHBvcnRzLkZFREVSQVRJT04yX09OTFlfU1BFQ19ESVJFQ1RJVkVTID0gW1xuICAgIGV4cG9ydHMuc2hhcmVhYmxlRGlyZWN0aXZlU3BlYyxcbiAgICBpbmFjY2Vzc2libGVTcGVjXzEuSU5BQ0NFU1NJQkxFX1ZFUlNJT05TLmxhdGVzdCgpLmluYWNjZXNzaWJsZURpcmVjdGl2ZVNwZWMsXG4gICAgZXhwb3J0cy5vdmVycmlkZURpcmVjdGl2ZVNwZWMsXG5dO1xuZXhwb3J0cy5GRURFUkFUSU9OMl8xX09OTFlfU1BFQ19ESVJFQ1RJVkVTID0gW1xuICAgIGV4cG9ydHMuY29tcG9zZURpcmVjdGl2ZVNwZWMsXG5dO1xuY29uc3QgUFJFX0ZFREVSQVRJT04yX1NQRUNfRElSRUNUSVZFUyA9IFtcbiAgICBleHBvcnRzLmtleURpcmVjdGl2ZVNwZWMsXG4gICAgZXhwb3J0cy5yZXF1aXJlc0RpcmVjdGl2ZVNwZWMsXG4gICAgZXhwb3J0cy5wcm92aWRlc0RpcmVjdGl2ZVNwZWMsXG4gICAgZXhwb3J0cy5leHRlcm5hbERpcmVjdGl2ZVNwZWMsXG4gICAgdGFnU3BlY18xLlRBR19WRVJTSU9OUy5sYXRlc3QoKS50YWdEaXJlY3RpdmVTcGVjLFxuICAgIGV4cG9ydHMuZXh0ZW5kc0RpcmVjdGl2ZVNwZWMsXG5dO1xuZXhwb3J0cy5GRURFUkFUSU9OMl9TUEVDX0RJUkVDVElWRVMgPSBbXG4gICAgLi4uUFJFX0ZFREVSQVRJT04yX1NQRUNfRElSRUNUSVZFUyxcbiAgICAuLi5leHBvcnRzLkZFREVSQVRJT04yX09OTFlfU1BFQ19ESVJFQ1RJVkVTLFxuICAgIC4uLmV4cG9ydHMuRkVERVJBVElPTjJfMV9PTkxZX1NQRUNfRElSRUNUSVZFUyxcbl07XG5leHBvcnRzLkFMTF9GRURFUkFUSU9OX0RJUkVDVElWRVNfREVGQVVMVF9OQU1FUyA9IGV4cG9ydHMuRkVERVJBVElPTjJfU1BFQ19ESVJFQ1RJVkVTLm1hcCgoc3BlYykgPT4gc3BlYy5uYW1lKTtcbmV4cG9ydHMuRkVERVJBVElPTl9TUEVDX1RZUEVTID0gW1xuICAgIGV4cG9ydHMuZmllbGRTZXRUeXBlU3BlYyxcbl07XG5jbGFzcyBGZWRlcmF0aW9uU3BlY0RlZmluaXRpb24gZXh0ZW5kcyBjb3JlU3BlY18xLkZlYXR1cmVEZWZpbml0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uKSB7XG4gICAgICAgIHN1cGVyKG5ldyBjb3JlU3BlY18xLkZlYXR1cmVVcmwoZXhwb3J0cy5mZWRlcmF0aW9uSWRlbnRpdHksICdmZWRlcmF0aW9uJywgdmVyc2lvbikpO1xuICAgIH1cbiAgICBhbGxGZWREaXJlY3RpdmVzKCkge1xuICAgICAgICByZXR1cm4gUFJFX0ZFREVSQVRJT04yX1NQRUNfRElSRUNUSVZFU1xuICAgICAgICAgICAgLmNvbmNhdChleHBvcnRzLkZFREVSQVRJT04yX09OTFlfU1BFQ19ESVJFQ1RJVkVTKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLnVybC52ZXJzaW9uID49IChuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigyLCAxKSkgPyBleHBvcnRzLkZFREVSQVRJT04yXzFfT05MWV9TUEVDX0RJUkVDVElWRVMgOiBbXSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzVG9TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVJblNjaGVtYShzY2hlbWEpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZlYXR1cmUsICdUaGUgZmVkZXJhdGlvbiBzcGVjaWZpY2F0aW9uIHNob3VsZCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIHNjaGVtYSBiZWZvcmUgdGhpcyBpcyBjYWxsZWQnKTtcbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHRoaXMuYWRkVHlwZVNwZWMoc2NoZW1hLCBleHBvcnRzLmZpZWxkU2V0VHlwZVNwZWMpKTtcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgdGhpcy5hbGxGZWREaXJlY3RpdmVzKCkpIHtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5hZGREaXJlY3RpdmVTcGVjKHNjaGVtYSwgZGlyZWN0aXZlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG4gICAgYWxsRWxlbWVudE5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGxGZWREaXJlY3RpdmVzKCkubWFwKChzcGVjKSA9PiBgQCR7c3BlYy5uYW1lfWApLmNvbmNhdChbXG4gICAgICAgICAgICBleHBvcnRzLmZpZWxkU2V0VHlwZVNwZWMubmFtZSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuZXhwb3J0cy5GZWRlcmF0aW9uU3BlY0RlZmluaXRpb24gPSBGZWRlcmF0aW9uU3BlY0RlZmluaXRpb247XG5leHBvcnRzLkZFREVSQVRJT05fVkVSU0lPTlMgPSBuZXcgY29yZVNwZWNfMS5GZWF0dXJlRGVmaW5pdGlvbnMoZXhwb3J0cy5mZWRlcmF0aW9uSWRlbnRpdHkpXG4gICAgLmFkZChuZXcgRmVkZXJhdGlvblNwZWNEZWZpbml0aW9uKG5ldyBjb3JlU3BlY18xLkZlYXR1cmVWZXJzaW9uKDIsIDApKSlcbiAgICAuYWRkKG5ldyBGZWRlcmF0aW9uU3BlY0RlZmluaXRpb24obmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMiwgMSkpKTtcbigwLCBrbm93bkNvcmVGZWF0dXJlc18xLnJlZ2lzdGVyS25vd25GZWF0dXJlKShleHBvcnRzLkZFREVSQVRJT05fVkVSU0lPTlMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVkZXJhdGlvblNwZWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdyYXBoUUxKU0RpcmVjdGl2ZVRvQVNUID0gZXhwb3J0cy5ncmFwaFFMSlNOYW1lZFR5cGVUb0FTVCA9IGV4cG9ydHMuZ3JhcGhRTEpTU2NoZW1hVG9BU1QgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGFsbE9wZXJhdGlvblR5cGVOb2RlID0gW2dyYXBocWxfMS5PcGVyYXRpb25UeXBlTm9kZS5RVUVSWSwgZ3JhcGhxbF8xLk9wZXJhdGlvblR5cGVOb2RlLk1VVEFUSU9OLCBncmFwaHFsXzEuT3BlcmF0aW9uVHlwZU5vZGUuU1VCU0NSSVBUSU9OXTtcbmZ1bmN0aW9uIGdyYXBoUUxKU1NjaGVtYVRvQVNUKHNjaGVtYSkge1xuICAgIGNvbnN0IHR5cGVzID0gT2JqZWN0LnZhbHVlcyhzY2hlbWEuZ2V0VHlwZU1hcCgpKS5maWx0ZXIoKHR5cGUpID0+ICEoMCwgZ3JhcGhxbF8xLmlzSW50cm9zcGVjdGlvblR5cGUpKHR5cGUpICYmICEoMCwgZ3JhcGhxbF8xLmlzU3BlY2lmaWVkU2NhbGFyVHlwZSkodHlwZSkpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpLmZpbHRlcigoZGlyZWN0aXZlKSA9PiAhKDAsIGdyYXBocWxfMS5pc1NwZWNpZmllZERpcmVjdGl2ZSkoZGlyZWN0aXZlKSk7XG4gICAgY29uc3Qgc2NoZW1hQVNUcyA9IHRvTm9kZUFycmF5KGdyYXBoUUxKU1NjaGVtYVRvU2NoZW1hRGVmaW5pdGlvbkFTVChzY2hlbWEpKTtcbiAgICBjb25zdCB0eXBlc0FTVHMgPSB0eXBlcy5tYXAoKHR5cGUpID0+IHRvTm9kZUFycmF5KGdyYXBoUUxKU05hbWVkVHlwZVRvQVNUKHR5cGUpKSkuZmxhdCgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXNBU1RzID0gZGlyZWN0aXZlcy5tYXAoKGRpcmVjdGl2ZSkgPT4gZ3JhcGhRTEpTRGlyZWN0aXZlVG9BU1QoZGlyZWN0aXZlKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuRE9DVU1FTlQsXG4gICAgICAgIGRlZmluaXRpb25zOiBbLi4uc2NoZW1hQVNUcywgLi4udHlwZXNBU1RzLCAuLi5kaXJlY3RpdmVzQVNUc10sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ3JhcGhRTEpTU2NoZW1hVG9BU1QgPSBncmFwaFFMSlNTY2hlbWFUb0FTVDtcbmZ1bmN0aW9uIHRvTm9kZUFycmF5KHsgZGVmaW5pdGlvbiwgZXh0ZW5zaW9ucywgfSkge1xuICAgIHJldHVybiBkZWZpbml0aW9uID8gW2RlZmluaXRpb24sIC4uLmV4dGVuc2lvbnNdIDogZXh0ZW5zaW9ucztcbn1cbmZ1bmN0aW9uIG1heWJlKHYpIHtcbiAgICByZXR1cm4gdiA/IHYgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBncmFwaFFMSlNTY2hlbWFUb1NjaGVtYURlZmluaXRpb25BU1Qoc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYS5hc3ROb2RlIHx8IHNjaGVtYS5leHRlbnNpb25BU1ROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiBtYXliZShzY2hlbWEuYXN0Tm9kZSksXG4gICAgICAgICAgICBleHRlbnNpb25zOiBzY2hlbWEuZXh0ZW5zaW9uQVNUTm9kZXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZGVmaW5pdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGhhc05vbkRlZmF1bHRSb290TmFtZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uVHlwZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIGFsbE9wZXJhdGlvblR5cGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHNjaGVtYS5nZXRSb290VHlwZShvcGVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvblR5cGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuT1BFUkFUSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRURfVFlQRSwgbmFtZTogeyBraW5kOiBncmFwaHFsXzEuS2luZC5OQU1FLCB2YWx1ZTogdHlwZS5uYW1lIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5TQ0hFTUFfREVGSU5JVElPTixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc2NoZW1hLmRlc2NyaXB0aW9uID8ge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5TVFJJTkcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzY2hlbWEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25UeXBlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZmluaXRpb24sXG4gICAgICAgICAgICBleHRlbnNpb25zOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXNOb25EZWZhdWx0Um9vdE5hbWVzKHNjaGVtYSkge1xuICAgIHJldHVybiBhbGxPcGVyYXRpb25UeXBlTm9kZS5zb21lKCh0KSA9PiBpc05vbkRlZmF1bHRSb290TmFtZShzY2hlbWEuZ2V0Um9vdFR5cGUodCksIHQpKTtcbn1cbmZ1bmN0aW9uIGlzTm9uRGVmYXVsdFJvb3ROYW1lKHR5cGUsIG9wZXJhdGlvbikge1xuICAgIHJldHVybiAhIXR5cGUgJiYgdHlwZS5uYW1lICE9PSAoMCwgZGVmaW5pdGlvbnNfMS5kZWZhdWx0Um9vdE5hbWUpKG9wZXJhdGlvbik7XG59XG5mdW5jdGlvbiBncmFwaFFMSlNOYW1lZFR5cGVUb0FTVCh0eXBlKSB7XG4gICAgaWYgKHR5cGUuYXN0Tm9kZSB8fCB0eXBlLmV4dGVuc2lvbkFTVE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IG1heWJlKHR5cGUuYXN0Tm9kZSksXG4gICAgICAgICAgICBleHRlbnNpb25zOiB0eXBlLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246ICgwLCBncmFwaHFsXzEucGFyc2UpKCgwLCBncmFwaHFsXzEucHJpbnRUeXBlKSh0eXBlKSkuZGVmaW5pdGlvbnNbMF0sXG4gICAgICAgICAgICBleHRlbnNpb25zOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmdyYXBoUUxKU05hbWVkVHlwZVRvQVNUID0gZ3JhcGhRTEpTTmFtZWRUeXBlVG9BU1Q7XG5mdW5jdGlvbiBncmFwaFFMSlNEaXJlY3RpdmVUb0FTVChkaXJlY3RpdmUpIHtcbiAgICBpZiAoZGlyZWN0aXZlLmFzdE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZS5hc3ROb2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZmFrZVNjaGVtYSA9IG5ldyBncmFwaHFsXzEuR3JhcGhRTFNjaGVtYSh7XG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBbZGlyZWN0aXZlXSxcbiAgICAgICAgICAgIGFzc3VtZVZhbGlkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVwYXJzZWQgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKSgoMCwgZ3JhcGhxbF8xLnByaW50U2NoZW1hKShmYWtlU2NoZW1hKSk7XG4gICAgICAgIHJldHVybiByZXBhcnNlZC5kZWZpbml0aW9ucy5maW5kKChkZWYpID0+IGRlZi5raW5kID09PSBncmFwaHFsXzEuS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTik7XG4gICAgfVxufVxuZXhwb3J0cy5ncmFwaFFMSlNEaXJlY3RpdmVUb0FTVCA9IGdyYXBoUUxKU0RpcmVjdGl2ZVRvQVNUO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhRTEpTU2NoZW1hVG9BU1QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbW92ZUluYWNjZXNzaWJsZUVsZW1lbnRzID0gZXhwb3J0cy5JTkFDQ0VTU0lCTEVfVkVSU0lPTlMgPSBleHBvcnRzLkluYWNjZXNzaWJsZVNwZWNEZWZpbml0aW9uID0gZXhwb3J0cy5pbmFjY2Vzc2libGVJZGVudGl0eSA9IHZvaWQgMDtcbmNvbnN0IGNvcmVTcGVjXzEgPSByZXF1aXJlKFwiLi9jb3JlU3BlY1wiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3Qga25vd25Db3JlRmVhdHVyZXNfMSA9IHJlcXVpcmUoXCIuL2tub3duQ29yZUZlYXR1cmVzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZXhwb3J0cy5pbmFjY2Vzc2libGVJZGVudGl0eSA9ICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvaW5hY2Nlc3NpYmxlJztcbmNsYXNzIEluYWNjZXNzaWJsZVNwZWNEZWZpbml0aW9uIGV4dGVuZHMgY29yZVNwZWNfMS5GZWF0dXJlRGVmaW5pdGlvbiB7XG4gICAgY29uc3RydWN0b3IodmVyc2lvbikge1xuICAgICAgICBzdXBlcihuZXcgY29yZVNwZWNfMS5GZWF0dXJlVXJsKGV4cG9ydHMuaW5hY2Nlc3NpYmxlSWRlbnRpdHksICdpbmFjY2Vzc2libGUnLCB2ZXJzaW9uKSk7XG4gICAgICAgIHRoaXMuaW5hY2Nlc3NpYmxlTG9jYXRpb25zID0gW1xuICAgICAgICAgICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT04sXG4gICAgICAgICAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNULFxuICAgICAgICAgICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOVEVSRkFDRSxcbiAgICAgICAgICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5VTklPTixcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5wcmludGVkSW5hY2Nlc3NpYmxlRGVmaW5pdGlvbiA9ICdkaXJlY3RpdmUgQGluYWNjZXNzaWJsZSBvbiBGSUVMRF9ERUZJTklUSU9OIHwgSU5URVJGQUNFIHwgT0JKRUNUIHwgVU5JT04nO1xuICAgICAgICBpZiAoIXRoaXMuaXNWMDEoKSkge1xuICAgICAgICAgICAgdGhpcy5pbmFjY2Vzc2libGVMb2NhdGlvbnMucHVzaChncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uQVJHVU1FTlRfREVGSU5JVElPTiwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUiwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU0sIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfT0JKRUNULCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTik7XG4gICAgICAgICAgICB0aGlzLnByaW50ZWRJbmFjY2Vzc2libGVEZWZpbml0aW9uID0gJ2RpcmVjdGl2ZSBAaW5hY2Nlc3NpYmxlIG9uIEZJRUxEX0RFRklOSVRJT04gfCBJTlRFUkZBQ0UgfCBPQkpFQ1QgfCBVTklPTiB8IEFSR1VNRU5UX0RFRklOSVRJT04gfCBTQ0FMQVIgfCBFTlVNIHwgRU5VTV9WQUxVRSB8IElOUFVUX09CSkVDVCB8IElOUFVUX0ZJRUxEX0RFRklOSVRJT04nO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5hY2Nlc3NpYmxlRGlyZWN0aXZlU3BlYyA9ICgwLCBkaXJlY3RpdmVBbmRUeXBlU3BlY2lmaWNhdGlvbl8xLmNyZWF0ZURpcmVjdGl2ZVNwZWNpZmljYXRpb24pKHtcbiAgICAgICAgICAgIG5hbWU6ICdpbmFjY2Vzc2libGUnLFxuICAgICAgICAgICAgbG9jYXRpb25zOiB0aGlzLmluYWNjZXNzaWJsZUxvY2F0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlzVjAxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9uLmVxdWFscyhuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigwLCAxKSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzVG9TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZERpcmVjdGl2ZVNwZWMoc2NoZW1hLCB0aGlzLmluYWNjZXNzaWJsZURpcmVjdGl2ZVNwZWMpO1xuICAgIH1cbiAgICBpbmFjY2Vzc2libGVEaXJlY3RpdmUoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGl2ZShzY2hlbWEsICdpbmFjY2Vzc2libGUnKTtcbiAgICB9XG4gICAgY2hlY2tDb21wYXRpYmxlRGlyZWN0aXZlKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3QgaGFzVW5rbm93bkFyZ3VtZW50cyA9IE9iamVjdC5rZXlzKGRlZmluaXRpb24uYXJndW1lbnRzKCkpLmxlbmd0aCA+IDA7XG4gICAgICAgIGNvbnN0IGhhc1JlcGVhdGFibGUgPSBkZWZpbml0aW9uLnJlcGVhdGFibGU7XG4gICAgICAgIGNvbnN0IGhhc1ZhbGlkTG9jYXRpb25zID0gZGVmaW5pdGlvbi5sb2NhdGlvbnMuZXZlcnkobG9jID0+IHRoaXMuaW5hY2Nlc3NpYmxlTG9jYXRpb25zLmluY2x1ZGVzKGxvYykpO1xuICAgICAgICBpZiAoaGFzVW5rbm93bkFyZ3VtZW50cyB8fCBoYXNSZXBlYXRhYmxlIHx8ICFoYXNWYWxpZExvY2F0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yXzEuRVJST1JTLkRJUkVDVElWRV9ERUZJTklUSU9OX0lOVkFMSUQuZXJyKGBGb3VuZCBpbnZhbGlkIEBpbmFjY2Vzc2libGUgZGlyZWN0aXZlIGRlZmluaXRpb24uIFBsZWFzZSBlbnN1cmUgdGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIGluIHlvdXIgc2NoZW1hJ3MgZGVmaW5pdGlvbnMgbWF0Y2hlcyB0aGUgZm9sbG93aW5nOlxcblxcdCR7dGhpcy5wcmludGVkSW5hY2Nlc3NpYmxlRGVmaW5pdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhbGxFbGVtZW50TmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBbJ0BpbmFjY2Vzc2libGUnXTtcbiAgICB9XG4gICAgZ2V0IGRlZmF1bHRDb3JlUHVycG9zZSgpIHtcbiAgICAgICAgcmV0dXJuICdTRUNVUklUWSc7XG4gICAgfVxufVxuZXhwb3J0cy5JbmFjY2Vzc2libGVTcGVjRGVmaW5pdGlvbiA9IEluYWNjZXNzaWJsZVNwZWNEZWZpbml0aW9uO1xuZXhwb3J0cy5JTkFDQ0VTU0lCTEVfVkVSU0lPTlMgPSBuZXcgY29yZVNwZWNfMS5GZWF0dXJlRGVmaW5pdGlvbnMoZXhwb3J0cy5pbmFjY2Vzc2libGVJZGVudGl0eSlcbiAgICAuYWRkKG5ldyBJbmFjY2Vzc2libGVTcGVjRGVmaW5pdGlvbihuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigwLCAxKSkpXG4gICAgLmFkZChuZXcgSW5hY2Nlc3NpYmxlU3BlY0RlZmluaXRpb24obmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMCwgMikpKTtcbigwLCBrbm93bkNvcmVGZWF0dXJlc18xLnJlZ2lzdGVyS25vd25GZWF0dXJlKShleHBvcnRzLklOQUNDRVNTSUJMRV9WRVJTSU9OUyk7XG5mdW5jdGlvbiByZW1vdmVJbmFjY2Vzc2libGVFbGVtZW50cyhzY2hlbWEpIHtcbiAgICBzY2hlbWEudmFsaWRhdGUoKTtcbiAgICBjb25zdCBjb3JlRmVhdHVyZXMgPSBzY2hlbWEuY29yZUZlYXR1cmVzO1xuICAgIGlmICghY29yZUZlYXR1cmVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5hY2Nlc3NpYmxlRmVhdHVyZSA9IGNvcmVGZWF0dXJlcy5nZXRCeUlkZW50aXR5KGV4cG9ydHMuaW5hY2Nlc3NpYmxlSWRlbnRpdHkpO1xuICAgIGlmICghaW5hY2Nlc3NpYmxlRmVhdHVyZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluYWNjZXNzaWJsZVNwZWMgPSBleHBvcnRzLklOQUNDRVNTSUJMRV9WRVJTSU9OUy5maW5kKGluYWNjZXNzaWJsZUZlYXR1cmUudXJsLnZlcnNpb24pO1xuICAgIGlmICghaW5hY2Nlc3NpYmxlU3BlYykge1xuICAgICAgICB0aHJvdyAoMCwgZGVmaW5pdGlvbnNfMS5FcnJHcmFwaFFMQVBJU2NoZW1hVmFsaWRhdGlvbkZhaWxlZCkoW25ldyBncmFwaHFsXzEuR3JhcGhRTEVycm9yKGBDYW5ub3QgcmVtb3ZlIGluYWNjZXNzaWJsZSBlbGVtZW50czogdGhlIHNjaGVtYSB1c2VzIHVuc3VwcG9ydGVkYCArXG4gICAgICAgICAgICAgICAgYCBpbmFjY2Vzc2libGUgc3BlYyB2ZXJzaW9uICR7aW5hY2Nlc3NpYmxlRmVhdHVyZS51cmwudmVyc2lvbn1gICtcbiAgICAgICAgICAgICAgICBgIChzdXBwb3J0ZWQgdmVyc2lvbnM6ICR7ZXhwb3J0cy5JTkFDQ0VTU0lCTEVfVkVSU0lPTlMudmVyc2lvbnMoKS5qb2luKCcsICcpfSlgKV0pO1xuICAgIH1cbiAgICBjb25zdCBpbmFjY2Vzc2libGVEaXJlY3RpdmUgPSBpbmFjY2Vzc2libGVTcGVjLmluYWNjZXNzaWJsZURpcmVjdGl2ZShzY2hlbWEpO1xuICAgIGlmICghaW5hY2Nlc3NpYmxlRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICgwLCBkZWZpbml0aW9uc18xLkVyckdyYXBoUUxBUElTY2hlbWFWYWxpZGF0aW9uRmFpbGVkKShbbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IoYEludmFsaWQgc2NoZW1hOiBkZWNsYXJlcyAke2luYWNjZXNzaWJsZVNwZWMudXJsfSBzcGVjIGJ1dCBkb2VzIG5vdGAgK1xuICAgICAgICAgICAgICAgIGAgZGVmaW5lIGEgQGluYWNjZXNzaWJsZSBkaXJlY3RpdmUuYCldKTtcbiAgICB9XG4gICAgY29uc3QgaW5jb21wYXRpYmxlRXJyb3IgPSBpbmFjY2Vzc2libGVTcGVjLmNoZWNrQ29tcGF0aWJsZURpcmVjdGl2ZShpbmFjY2Vzc2libGVEaXJlY3RpdmUpO1xuICAgIGlmIChpbmNvbXBhdGlibGVFcnJvcikge1xuICAgICAgICB0aHJvdyAoMCwgZGVmaW5pdGlvbnNfMS5FcnJHcmFwaFFMQVBJU2NoZW1hVmFsaWRhdGlvbkZhaWxlZCkoW2luY29tcGF0aWJsZUVycm9yXSk7XG4gICAgfVxuICAgIHZhbGlkYXRlSW5hY2Nlc3NpYmxlRWxlbWVudHMoc2NoZW1hLCBjb3JlRmVhdHVyZXMsIGluYWNjZXNzaWJsZVNwZWMsIGluYWNjZXNzaWJsZURpcmVjdGl2ZSk7XG4gICAgcmVtb3ZlSW5hY2Nlc3NpYmxlRWxlbWVudHNBc3N1bWluZ1ZhbGlkKHNjaGVtYSwgaW5hY2Nlc3NpYmxlRGlyZWN0aXZlKTtcbn1cbmV4cG9ydHMucmVtb3ZlSW5hY2Nlc3NpYmxlRWxlbWVudHMgPSByZW1vdmVJbmFjY2Vzc2libGVFbGVtZW50cztcbmZ1bmN0aW9uIHZhbGlkYXRlSW5hY2Nlc3NpYmxlRWxlbWVudHMoc2NoZW1hLCBjb3JlRmVhdHVyZXMsIGluYWNjZXNzaWJsZVNwZWMsIGluYWNjZXNzaWJsZURpcmVjdGl2ZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGZ1bmN0aW9uIGlzSW5hY2Nlc3NpYmxlKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuaGFzQXBwbGllZERpcmVjdGl2ZShpbmFjY2Vzc2libGVEaXJlY3RpdmUpO1xuICAgIH1cbiAgICBjb25zdCBmZWF0dXJlTGlzdCA9IFsuLi5jb3JlRmVhdHVyZXMuYWxsRmVhdHVyZXMoKV07XG4gICAgZnVuY3Rpb24gaXNGZWF0dXJlRGVmaW5pdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlTGlzdC5zb21lKChmZWF0dXJlKSA9PiBmZWF0dXJlLmlzRmVhdHVyZURlZmluaXRpb24oZWxlbWVudCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0luQVBJU2NoZW1hKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRGlyZWN0aXZlRGVmaW5pdGlvbikgJiZcbiAgICAgICAgICAgIGlzSW5hY2Nlc3NpYmxlKGVsZW1lbnQpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUpIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuSW50ZXJmYWNlVHlwZSkgfHxcbiAgICAgICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5VbmlvblR5cGUpIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuU2NhbGFyVHlwZSkgfHxcbiAgICAgICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5FbnVtVHlwZSkgfHxcbiAgICAgICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnB1dE9iamVjdFR5cGUpIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRGlyZWN0aXZlRGVmaW5pdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5GaWVsZERlZmluaXRpb24pIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuQXJndW1lbnREZWZpbml0aW9uKSB8fFxuICAgICAgICAgICAgKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLklucHV0RmllbGREZWZpbml0aW9uKSB8fFxuICAgICAgICAgICAgKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkVudW1WYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0luQVBJU2NoZW1hKGVsZW1lbnQucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCBcIlVucmVhY2hhYmxlIGNvZGUsIGVsZW1lbnQgaXMgb2YgdW5rbm93biB0eXBlLlwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmV0Y2hJbmFjY2Vzc2libGVFbGVtZW50c0RlZXAoZWxlbWVudCkge1xuICAgICAgICBjb25zdCBpbmFjY2Vzc2libGVFbGVtZW50cyA9IFtdO1xuICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGluYWNjZXNzaWJsZUVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKSB8fFxuICAgICAgICAgICAgKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkludGVyZmFjZVR5cGUpIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuSW5wdXRPYmplY3RUeXBlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBlbGVtZW50LmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlRWxlbWVudHMucHVzaCguLi5mZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcChmaWVsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluYWNjZXNzaWJsZUVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkVudW1UeXBlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudW1WYWx1ZSBvZiBlbGVtZW50LnZhbHVlcykge1xuICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZUVsZW1lbnRzLnB1c2goLi4uZmV0Y2hJbmFjY2Vzc2libGVFbGVtZW50c0RlZXAoZW51bVZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5hY2Nlc3NpYmxlRWxlbWVudHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkRpcmVjdGl2ZURlZmluaXRpb24pIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRmllbGREZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhcmd1bWVudCBvZiBlbGVtZW50LmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlRWxlbWVudHMucHVzaCguLi5mZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcChhcmd1bWVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluYWNjZXNzaWJsZUVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5VbmlvblR5cGUpIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuU2NhbGFyVHlwZSkgfHxcbiAgICAgICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5Bcmd1bWVudERlZmluaXRpb24pIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuSW5wdXRGaWVsZERlZmluaXRpb24pIHx8XG4gICAgICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRW51bVZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGluYWNjZXNzaWJsZUVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmFsc2UsIFwiVW5yZWFjaGFibGUgY29kZSwgZWxlbWVudCBpcyBvZiB1bmtub3duIHR5cGUuXCIpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICBsZXQgZGVmYXVsdFZhbHVlUmVmZXJlbmNlcnMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKCFpbmFjY2Vzc2libGVTcGVjLmlzVjAxKCkpIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlUmVmZXJlbmNlcnMgPSBjb21wdXRlRGVmYXVsdFZhbHVlUmVmZXJlbmNlcnMoc2NoZW1hKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIHNjaGVtYS5hbGxUeXBlcygpKSB7XG4gICAgICAgIGlmIChoYXNCdWlsdEluTmFtZSh0eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgaW5hY2Nlc3NpYmxlRWxlbWVudHMgPSBmZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcCh0eXBlKTtcbiAgICAgICAgICAgIGlmIChpbmFjY2Vzc2libGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUuZXJyKGBCdWlsdC1pbiB0eXBlIFwiJHt0eXBlLmNvb3JkaW5hdGV9XCIgY2Fubm90IHVzZSBAaW5hY2Nlc3NpYmxlLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHR5cGUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IGluYWNjZXNzaWJsZUVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC5jb29yZGluYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW3R5cGUuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGZWF0dXJlRGVmaW5pdGlvbih0eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgaW5hY2Nlc3NpYmxlRWxlbWVudHMgPSBmZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcCh0eXBlKTtcbiAgICAgICAgICAgIGlmIChpbmFjY2Vzc2libGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUuZXJyKGBDb3JlIGZlYXR1cmUgdHlwZSBcIiR7dHlwZS5jb29yZGluYXRlfVwiIGNhbm5vdCB1c2UgQGluYWNjZXNzaWJsZS5gLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiB0eXBlLnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBpbmFjY2Vzc2libGVFbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGVsZW1lbnQpID0+IGVsZW1lbnQuY29vcmRpbmF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfcmVmZXJlbmNlcnM6IFt0eXBlLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSW5hY2Nlc3NpYmxlKHR5cGUpKSB7XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VycyA9IHR5cGUucmVmZXJlbmNlcnMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVmZXJlbmNlciBvZiByZWZlcmVuY2Vycykge1xuICAgICAgICAgICAgICAgIGlmIChyZWZlcmVuY2VyIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5GaWVsZERlZmluaXRpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlciBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuQXJndW1lbnREZWZpbml0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZXIgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLklucHV0RmllbGREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luQVBJU2NoZW1hKHJlZmVyZW5jZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5SRUZFUkVOQ0VEX0lOQUNDRVNTSUJMRS5lcnIoYFR5cGUgXCIke3R5cGUuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlIGJ1dCBpcyByZWZlcmVuY2VkYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCBieSBcIiR7cmVmZXJlbmNlci5jb29yZGluYXRlfVwiLCB3aGljaCBpcyBpbiB0aGUgQVBJIHNjaGVtYS5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHR5cGUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBbdHlwZS5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzOiBbcmVmZXJlbmNlci5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmZXJlbmNlciBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuU2NoZW1hRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gcmVmZXJlbmNlci5yb290VHlwZSgncXVlcnknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuUVVFUllfUk9PVF9UWVBFX0lOQUNDRVNTSUJMRS5lcnIoYFR5cGUgXCIke3R5cGUuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlIGJ1dCBpcyB0aGUgcm9vdGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgcXVlcnkgdHlwZSwgd2hpY2ggbXVzdCBiZSBpbiB0aGUgQVBJIHNjaGVtYS5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHR5cGUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBbdHlwZS5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkludGVyZmFjZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLklucHV0T2JqZWN0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNJbmFjY2Vzc2libGUoZmllbGQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5PTkxZX0lOQUNDRVNTSUJMRV9DSElMRFJFTi5lcnIoYFR5cGUgXCIke3R5cGUuY29vcmRpbmF0ZX1cIiBpcyBpbiB0aGUgQVBJIHNjaGVtYSBidXQgYWxsIG9mIGl0c2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCAkeyh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnB1dE9iamVjdFR5cGUpID8gJ2lucHV0ICcgOiAnJ31maWVsZHNgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAgYXJlIEBpbmFjY2Vzc2libGUuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHR5cGUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9lbGVtZW50czogdHlwZS5maWVsZHMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChmaWVsZCkgPT4gZmllbGQuY29vcmRpbmF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzOiBbdHlwZS5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLlVuaW9uVHlwZSkge1xuICAgICAgICAgICAgICAgIGxldCBpc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0eXBlLnR5cGVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0luYWNjZXNzaWJsZShtZW1iZXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5PTkxZX0lOQUNDRVNTSUJMRV9DSElMRFJFTi5lcnIoYFR5cGUgXCIke3R5cGUuY29vcmRpbmF0ZX1cIiBpcyBpbiB0aGUgQVBJIHNjaGVtYSBidXQgYWxsIG9mIGl0c2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCBtZW1iZXJzIGFyZSBAaW5hY2Nlc3NpYmxlLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzOiB0eXBlLnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IHR5cGUudHlwZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh0eXBlKSA9PiB0eXBlLmNvb3JkaW5hdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW3R5cGUuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5FbnVtVHlwZSkge1xuICAgICAgICAgICAgICAgIGxldCBpc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVudW1WYWx1ZSBvZiB0eXBlLnZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5hY2Nlc3NpYmxlKGVudW1WYWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yXzEuRVJST1JTLk9OTFlfSU5BQ0NFU1NJQkxFX0NISUxEUkVOLmVycihgVHlwZSBcIiR7dHlwZS5jb29yZGluYXRlfVwiIGlzIGluIHRoZSBBUEkgc2NoZW1hIGJ1dCBhbGwgb2YgaXRzYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgIHZhbHVlcyBhcmUgQGluYWNjZXNzaWJsZS5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlczogdHlwZS5zb3VyY2VBU1QsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiB0eXBlLnZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChlbnVtVmFsdWUpID0+IGVudW1WYWx1ZS5jb29yZGluYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfcmVmZXJlbmNlcnM6IFt0eXBlLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKSB8fFxuICAgICAgICAgICAgICAgICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnRlcmZhY2VUeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGltcGxlbWVudGVkSW50ZXJmYWNlcyA9IHR5cGUuaW50ZXJmYWNlcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltcGxlbWVudGluZ1R5cGVzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkludGVyZmFjZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWZlcmVuY2VyIG9mIHR5cGUucmVmZXJlbmNlcnMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyZWZlcmVuY2VyIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWZlcmVuY2VyIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnRlcmZhY2VUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcGxlbWVudGluZ1R5cGVzLnB1c2gocmVmZXJlbmNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luYWNjZXNzaWJsZShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1wbGVtZW50ZWRJbnRlcmZhY2Ugb2YgaW1wbGVtZW50ZWRJbnRlcmZhY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1wbGVtZW50ZWRGaWVsZCA9IGltcGxlbWVudGVkSW50ZXJmYWNlLmZpZWxkKGZpZWxkLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRlZEZpZWxkICYmIGlzSW5BUElTY2hlbWEoaW1wbGVtZW50ZWRGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuSU1QTEVNRU5URURfQllfSU5BQ0NFU1NJQkxFLmVycihgRmllbGQgXCIke2ZpZWxkLmNvb3JkaW5hdGV9XCIgaXMgQGluYWNjZXNzaWJsZSBidXRgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIGZpZWxkYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIFwiJHtpbXBsZW1lbnRlZEZpZWxkLmNvb3JkaW5hdGV9XCIsIHdoaWNoIGlzIGluIHRoZSBBUElgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgc2NoZW1hLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzOiBmaWVsZC5zb3VyY2VBU1QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBbZmllbGQuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzOiBbaW1wbGVtZW50ZWRGaWVsZC5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXJndW1lbnQgb2YgZmllbGQuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudC5pc1JlcXVpcmVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yXzEuRVJST1JTLlJFUVVJUkVEX0lOQUNDRVNTSUJMRS5lcnIoYEFyZ3VtZW50IFwiJHthcmd1bWVudC5jb29yZGluYXRlfVwiIGlzIEBpbmFjY2Vzc2libGUgYnV0YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50IG9mIGl0cyBmaWVsZC5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGFyZ3VtZW50LnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9lbGVtZW50czogW2FyZ3VtZW50LmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfcmVmZXJlbmNlcnM6IFthcmd1bWVudC5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbXBsZW1lbnRpbmdUeXBlIG9mIGltcGxlbWVudGluZ1R5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbXBsZW1lbnRpbmdGaWVsZCA9IGltcGxlbWVudGluZ1R5cGUuZmllbGQoZmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGltcGxlbWVudGluZ0ZpZWxkLCBcIlNjaGVtYSBzaG91bGQgaGF2ZSBiZWVuIHZhbGlkLCBidXQgYW4gaW1wbGVtZW50aW5nIHR5cGVcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgZGlkIG5vdCBpbXBsZW1lbnQgb25lIG9mIHRoaXMgdHlwZSdzIGZpZWxkcy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbXBsZW1lbnRpbmdBcmd1bWVudCA9IGltcGxlbWVudGluZ0ZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFyZ3VtZW50KGFyZ3VtZW50Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShpbXBsZW1lbnRpbmdBcmd1bWVudCwgXCJTY2hlbWEgc2hvdWxkIGhhdmUgYmVlbiB2YWxpZCwgYnV0IGFuIGltcGxlbWVudGluZyB0eXBlXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGRpZCBub3QgaW1wbGVtZW50IG9uZSBvZiB0aGlzIHR5cGUncyBmaWVsZCdzIGFyZ3VtZW50cy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbkFQSVNjaGVtYShpbXBsZW1lbnRpbmdBcmd1bWVudCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBsZW1lbnRpbmdBcmd1bWVudC5pc1JlcXVpcmVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5SRVFVSVJFRF9JTkFDQ0VTU0lCTEUuZXJyKGBBcmd1bWVudCBcIiR7YXJndW1lbnQuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgYnV0IGlzIGltcGxlbWVudGVkIGJ5IHRoZSByZXF1aXJlZCBhcmd1bWVudGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIFwiJHtpbXBsZW1lbnRpbmdBcmd1bWVudC5jb29yZGluYXRlfVwiLCB3aGljaCBpc2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIGluIHRoZSBBUEkgc2NoZW1hLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGFyZ3VtZW50LnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBbYXJndW1lbnQuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfcmVmZXJlbmNlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBsZW1lbnRpbmdBcmd1bWVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltcGxlbWVudGVkSW50ZXJmYWNlIG9mIGltcGxlbWVudGVkSW50ZXJmYWNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1wbGVtZW50ZWRBcmd1bWVudCA9IChfYSA9IGltcGxlbWVudGVkSW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpZWxkKGZpZWxkLm5hbWUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXJndW1lbnQoYXJndW1lbnQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1wbGVtZW50ZWRBcmd1bWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5BUElTY2hlbWEoaW1wbGVtZW50ZWRBcmd1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTVBMRU1FTlRFRF9CWV9JTkFDQ0VTU0lCTEUuZXJyKGBBcmd1bWVudCBcIiR7YXJndW1lbnQuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgYnV0IGltcGxlbWVudHMgdGhlIGludGVyZmFjZSBhcmd1bWVudGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIFwiJHtpbXBsZW1lbnRlZEFyZ3VtZW50LmNvb3JkaW5hdGV9XCIsIHdoaWNoIGlzIGluYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgdGhlIEFQSSBzY2hlbWEuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlczogYXJndW1lbnQuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IFthcmd1bWVudC5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcGxlbWVudGVkQXJndW1lbnQuY29vcmRpbmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnB1dE9iamVjdFR5cGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlucHV0RmllbGQgb2YgdHlwZS5maWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoaW5wdXRGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dEZpZWxkLmlzUmVxdWlyZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yXzEuRVJST1JTLlJFUVVJUkVEX0lOQUNDRVNTSUJMRS5lcnIoYElucHV0IGZpZWxkIFwiJHtpbnB1dEZpZWxkLmNvb3JkaW5hdGV9XCIgaXMgQGluYWNjZXNzaWJsZWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIGJ1dCBpcyBhIHJlcXVpcmVkIGlucHV0IGZpZWxkIG9mIGl0cyB0eXBlLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGlucHV0RmllbGQuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IFtpbnB1dEZpZWxkLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzOiBbaW5wdXRGaWVsZC5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGVmYXVsdFZhbHVlUmVmZXJlbmNlcnMsIFwiSW5wdXQgZmllbGRzIGNhbid0IGJlIEBpbmFjY2Vzc2libGUgaW4gdjAuMSwgYnV0IGRlZmF1bHQgdmFsdWVcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgcmVmZXJlbmNlcnMgd2VyZW4ndCBjb21wdXRlZCAod2hpY2ggaXMgb25seSBza2lwcGVkIGZvciB2MC4xKS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VycyA9IChfYiA9IGRlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzLmdldChpbnB1dEZpZWxkKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlZmVyZW5jZXIgb2YgcmVmZXJlbmNlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbkFQSVNjaGVtYShyZWZlcmVuY2VyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ERUZBVUxUX1ZBTFVFX1VTRVNfSU5BQ0NFU1NJQkxFLmVycihgSW5wdXQgZmllbGQgXCIke2lucHV0RmllbGQuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIGJ1dCBpcyB1c2VkIGluIHRoZSBkZWZhdWx0IHZhbHVlIG9mYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIFwiJHtyZWZlcmVuY2VyLmNvb3JkaW5hdGV9XCIsIHdoaWNoIGlzIGluIHRoZSBBUEkgc2NoZW1hLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzOiB0eXBlLnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IFt0eXBlLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW3JlZmVyZW5jZXIuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5FbnVtVHlwZSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW51bVZhbHVlIG9mIHR5cGUudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luYWNjZXNzaWJsZShlbnVtVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGRlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzLCBcIkVudW0gdmFsdWVzIGNhbid0IGJlIEBpbmFjY2Vzc2libGUgaW4gdjAuMSwgYnV0IGRlZmF1bHQgdmFsdWVcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgcmVmZXJlbmNlcnMgd2VyZW4ndCBjb21wdXRlZCAod2hpY2ggaXMgb25seSBza2lwcGVkIGZvciB2MC4xKS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VycyA9IChfYyA9IGRlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzLmdldChlbnVtVmFsdWUpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVmZXJlbmNlciBvZiByZWZlcmVuY2Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0luQVBJU2NoZW1hKHJlZmVyZW5jZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yXzEuRVJST1JTLkRFRkFVTFRfVkFMVUVfVVNFU19JTkFDQ0VTU0lCTEUuZXJyKGBFbnVtIHZhbHVlIFwiJHtlbnVtVmFsdWUuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIGJ1dCBpcyB1c2VkIGluIHRoZSBkZWZhdWx0IHZhbHVlIG9mYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIFwiJHtyZWZlcmVuY2VyLmNvb3JkaW5hdGV9XCIsIHdoaWNoIGlzIGluIHRoZSBBUEkgc2NoZW1hLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzOiB0eXBlLnNvdXJjZUFTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IFt0eXBlLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW3JlZmVyZW5jZXIuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2Ygc2NoZW1hLmFsbERpcmVjdGl2ZXMoKSkge1xuICAgICAgICBjb25zdCB0eXBlU3lzdGVtTG9jYXRpb25zID0gZGlyZWN0aXZlLmxvY2F0aW9ucy5maWx0ZXIoKGxvYykgPT4gKDAsIGRlZmluaXRpb25zXzEuaXNUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb24pKGxvYykpO1xuICAgICAgICBpZiAoaGFzQnVpbHRJbk5hbWUoZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgY29uc3QgaW5hY2Nlc3NpYmxlRWxlbWVudHMgPSBmZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgaWYgKGluYWNjZXNzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVNBTExPV0VEX0lOQUNDRVNTSUJMRS5lcnIoYEJ1aWx0LWluIGRpcmVjdGl2ZSBcIiR7ZGlyZWN0aXZlLmNvb3JkaW5hdGV9XCIgY2Fubm90IHVzZSBAaW5hY2Nlc3NpYmxlLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGRpcmVjdGl2ZS5zb3VyY2VBU1QsXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9lbGVtZW50czogaW5hY2Nlc3NpYmxlRWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChlbGVtZW50KSA9PiBlbGVtZW50LmNvb3JkaW5hdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzOiBbZGlyZWN0aXZlLmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRmVhdHVyZURlZmluaXRpb24oZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgY29uc3QgaW5hY2Nlc3NpYmxlRWxlbWVudHMgPSBmZXRjaEluYWNjZXNzaWJsZUVsZW1lbnRzRGVlcChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgaWYgKGluYWNjZXNzaWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5ESVNBTExPV0VEX0lOQUNDRVNTSUJMRS5lcnIoYENvcmUgZmVhdHVyZSBkaXJlY3RpdmUgXCIke2RpcmVjdGl2ZS5jb29yZGluYXRlfVwiIGNhbm5vdCB1c2UgQGluYWNjZXNzaWJsZS5gLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiBkaXJlY3RpdmUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IGluYWNjZXNzaWJsZUVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC5jb29yZGluYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW2RpcmVjdGl2ZS5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlU3lzdGVtTG9jYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGluYWNjZXNzaWJsZUVsZW1lbnRzID0gZmV0Y2hJbmFjY2Vzc2libGVFbGVtZW50c0RlZXAoZGlyZWN0aXZlKTtcbiAgICAgICAgICAgIGlmIChpbmFjY2Vzc2libGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUuZXJyKGBEaXJlY3RpdmUgXCIke2RpcmVjdGl2ZS5jb29yZGluYXRlfVwiIGNhbm5vdCB1c2UgQGluYWNjZXNzaWJsZWAgK1xuICAgICAgICAgICAgICAgICAgICBgIGJlY2F1c2UgaXQgbWF5IGJlIGFwcGxpZWQgdG8gdGhlc2UgdHlwZS1zeXN0ZW0gbG9jYXRpb25zOmAgK1xuICAgICAgICAgICAgICAgICAgICBgICR7dHlwZVN5c3RlbUxvY2F0aW9ucy5qb2luKCcsICcpfS5gLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiBkaXJlY3RpdmUuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmFjY2Vzc2libGVfZWxlbWVudHM6IGluYWNjZXNzaWJsZUVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4gZWxlbWVudC5jb29yZGluYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW2RpcmVjdGl2ZS5jb29yZGluYXRlXSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJndW1lbnQgb2YgZGlyZWN0aXZlLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50LmlzUmVxdWlyZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5SRVFVSVJFRF9JTkFDQ0VTU0lCTEUuZXJyKGBBcmd1bWVudCBcIiR7YXJndW1lbnQuY29vcmRpbmF0ZX1cIiBpcyBAaW5hY2Nlc3NpYmxlIGJ1dCBpcyBhYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCByZXF1aXJlZCBhcmd1bWVudCBvZiBpdHMgZGlyZWN0aXZlLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlczogYXJndW1lbnQuc291cmNlQVNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY2Nlc3NpYmxlX2VsZW1lbnRzOiBbYXJndW1lbnQuY29vcmRpbmF0ZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWNjZXNzaWJsZV9yZWZlcmVuY2VyczogW2FyZ3VtZW50LmNvb3JkaW5hdGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgKDAsIGRlZmluaXRpb25zXzEuRXJyR3JhcGhRTEFQSVNjaGVtYVZhbGlkYXRpb25GYWlsZWQpKGVycm9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcHV0ZURlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzKHNjaGVtYSkge1xuICAgIGNvbnN0IHJlZmVyZW5jZXJzID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGFkZFJlZmVyZW5jZShyZWZlcmVuY2UsIHJlZmVyZW5jZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VyTGlzdCA9IChfYSA9IHJlZmVyZW5jZXJzLmdldChyZWZlcmVuY2UpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZXJMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVmZXJlbmNlcnMuc2V0KHJlZmVyZW5jZSwgcmVmZXJlbmNlckxpc3QpO1xuICAgICAgICB9XG4gICAgICAgIHJlZmVyZW5jZXJMaXN0LnB1c2gocmVmZXJlbmNlcik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY2hlbWEuYWxsVHlwZXMoKSkge1xuICAgICAgICBpZiAoaGFzQnVpbHRJbk5hbWUodHlwZSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKCh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKSB8fFxuICAgICAgICAgICAgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkludGVyZmFjZVR5cGUpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFyZ3VtZW50IG9mIGZpZWxkLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVmZXJlbmNlIG9mIGNvbXB1dGVEZWZhdWx0VmFsdWVSZWZlcmVuY2VzKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmVmZXJlbmNlKHJlZmVyZW5jZSwgYXJndW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnB1dE9iamVjdFR5cGUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaW5wdXRGaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWZlcmVuY2Ugb2YgY29tcHV0ZURlZmF1bHRWYWx1ZVJlZmVyZW5jZXMoaW5wdXRGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmVmZXJlbmNlKHJlZmVyZW5jZSwgaW5wdXRGaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHNjaGVtYS5hbGxEaXJlY3RpdmVzKCkpIHtcbiAgICAgICAgaWYgKGhhc0J1aWx0SW5OYW1lKGRpcmVjdGl2ZSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9yIChjb25zdCBhcmd1bWVudCBvZiBkaXJlY3RpdmUuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVmZXJlbmNlIG9mIGNvbXB1dGVEZWZhdWx0VmFsdWVSZWZlcmVuY2VzKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgIGFkZFJlZmVyZW5jZShyZWZlcmVuY2UsIGFyZ3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmZXJlbmNlcnM7XG59XG5mdW5jdGlvbiBjb21wdXRlRGVmYXVsdFZhbHVlUmVmZXJlbmNlcyhlbGVtZW50KSB7XG4gICAgY29uc3QgcmVmZXJlbmNlcyA9IFtdO1xuICAgIGFkZFZhbHVlUmVmZXJlbmNlcyhlbGVtZW50LmRlZmF1bHRWYWx1ZSwgZ2V0SW5wdXRUeXBlKGVsZW1lbnQpLCByZWZlcmVuY2VzKTtcbiAgICByZXR1cm4gcmVmZXJlbmNlcztcbn1cbmZ1bmN0aW9uIGdldElucHV0VHlwZShlbGVtZW50KSB7XG4gICAgY29uc3QgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKHR5cGUsIFwiU2NoZW1hIHNob3VsZCBoYXZlIGJlZW4gdmFsaWQsIGJ1dCBhcmd1bWVudC9pbnB1dCBmaWVsZCBkaWQgbm90IGhhdmUgdHlwZS5cIik7XG4gICAgcmV0dXJuIHR5cGU7XG59XG5mdW5jdGlvbiBhZGRWYWx1ZVJlZmVyZW5jZXModmFsdWUsIHR5cGUsIHJlZmVyZW5jZXMpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gYWRkVmFsdWVSZWZlcmVuY2VzKHZhbHVlLCB0eXBlLm9mVHlwZSwgcmVmZXJlbmNlcyk7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc1NjYWxhclR5cGUpKHR5cGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzVmFyaWFibGUpKHZhbHVlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNMaXN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1UeXBlID0gdHlwZS5vZlR5cGU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRWYWx1ZVJlZmVyZW5jZXMoaXRlbSwgaXRlbVR5cGUsIHJlZmVyZW5jZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBhZGRWYWx1ZVJlZmVyZW5jZXModmFsdWUsIHR5cGUub2ZUeXBlLCByZWZlcmVuY2VzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IHZhbHVlW2ZpZWxkLm5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkVmFsdWVSZWZlcmVuY2VzKGZpZWxkVmFsdWUsIGZpZWxkLnR5cGUsIHJlZmVyZW5jZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNFbnVtVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudW1WYWx1ZSA9IHR5cGUudmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGVudW1WYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKGVudW1WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybjtcbn1cbmZ1bmN0aW9uIGhhc0J1aWx0SW5OYW1lKGVsZW1lbnQpIHtcbiAgICBjb25zdCBzY2hlbWEgPSBlbGVtZW50LnNjaGVtYSgpO1xuICAgIGlmICgoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuT2JqZWN0VHlwZSkgfHxcbiAgICAgICAgKGVsZW1lbnQgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkludGVyZmFjZVR5cGUpIHx8XG4gICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5VbmlvblR5cGUpIHx8XG4gICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5TY2FsYXJUeXBlKSB8fFxuICAgICAgICAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRW51bVR5cGUpIHx8XG4gICAgICAgIChlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnB1dE9iamVjdFR5cGUpKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuYnVpbHRJblR5cGVzKHRydWUpLnNvbWUoKHR5cGUpID0+IHR5cGUubmFtZSA9PT0gZWxlbWVudC5uYW1lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIGRlZmluaXRpb25zXzEuRGlyZWN0aXZlRGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmJ1aWx0SW5EaXJlY3RpdmVzKHRydWUpLnNvbWUoKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLm5hbWUgPT09IGVsZW1lbnQubmFtZSk7XG4gICAgfVxuICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmFsc2UsIFwiVW5yZWFjaGFibGUgY29kZSwgZWxlbWVudCBpcyBvZiB1bmtub3duIHR5cGUuXCIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlSW5hY2Nlc3NpYmxlRWxlbWVudHNBc3N1bWluZ1ZhbGlkKHNjaGVtYSwgaW5hY2Nlc3NpYmxlRGlyZWN0aXZlKSB7XG4gICAgZnVuY3Rpb24gaXNJbmFjY2Vzc2libGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5oYXNBcHBsaWVkRGlyZWN0aXZlKGluYWNjZXNzaWJsZURpcmVjdGl2ZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY2hlbWEudHlwZXMoKSkge1xuICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUodHlwZSkpIHtcbiAgICAgICAgICAgIHR5cGUucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUpIHx8ICh0eXBlIGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5JbnRlcmZhY2VUeXBlKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdHlwZS5maWVsZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXJndW1lbnQgb2YgZmllbGQuYXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLklucHV0T2JqZWN0VHlwZSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW5wdXRGaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luYWNjZXNzaWJsZShpbnB1dEZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRGaWVsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBkZWZpbml0aW9uc18xLkVudW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbnVtVmFsdWUgb2YgdHlwZS52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5hY2Nlc3NpYmxlKGVudW1WYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1WYWx1ZS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBzY2hlbWEuZGlyZWN0aXZlcygpKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXJndW1lbnQgb2YgZGlyZWN0aXZlLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmFjY2Vzc2libGVTcGVjLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVmaW5pdGlvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J1aWxkU2NoZW1hXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcmludFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdmFsdWVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mZWRlcmF0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb3BlcmF0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlYnVnXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb3JlU3BlY1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vam9pblNwZWNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RhZ1NwZWNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luYWNjZXNzaWJsZVNwZWNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ZlZGVyYXRpb25TcGVjXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdXBlcmdyYXBoc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXh0cmFjdFN1YmdyYXBoc0Zyb21TdXBlcmdyYXBoXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lcnJvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hVXBncmFkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N1Z2dlc3Rpb25zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ncmFwaFFMSlNTY2hlbWFUb0FTVFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkSW50cm9zcGVjdGlvbkZpZWxkcyA9IGV4cG9ydHMuaXNJbnRyb3NwZWN0aW9uTmFtZSA9IGV4cG9ydHMuaW50cm9zcGVjdGlvbkZpZWxkTmFtZXMgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmV4cG9ydHMuaW50cm9zcGVjdGlvbkZpZWxkTmFtZXMgPSBbJ19fc2NoZW1hJywgJ19fdHlwZSddO1xuZnVuY3Rpb24gaXNJbnRyb3NwZWN0aW9uTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuc3RhcnRzV2l0aCgnX18nKTtcbn1cbmV4cG9ydHMuaXNJbnRyb3NwZWN0aW9uTmFtZSA9IGlzSW50cm9zcGVjdGlvbk5hbWU7XG5mdW5jdGlvbiBhZGRJbnRyb3NwZWN0aW9uRmllbGRzKHNjaGVtYSkge1xuICAgIGlmIChzY2hlbWEudHlwZSgnX19TY2hlbWEnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGVLaW5kRW51bSA9IHNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLkVudW1UeXBlKCdfX1R5cGVLaW5kJywgdHJ1ZSkpO1xuICAgIHR5cGVLaW5kRW51bS5hZGRWYWx1ZSgnU0NBTEFSJyk7XG4gICAgdHlwZUtpbmRFbnVtLmFkZFZhbHVlKCdPQkpFQ1QnKTtcbiAgICB0eXBlS2luZEVudW0uYWRkVmFsdWUoJ0lOVEVSRkFDRScpO1xuICAgIHR5cGVLaW5kRW51bS5hZGRWYWx1ZSgnVU5JT04nKTtcbiAgICB0eXBlS2luZEVudW0uYWRkVmFsdWUoJ0VOVU0nKTtcbiAgICB0eXBlS2luZEVudW0uYWRkVmFsdWUoJ0lOUFVUX09CSkVDVCcpO1xuICAgIHR5cGVLaW5kRW51bS5hZGRWYWx1ZSgnTElTVCcpO1xuICAgIHR5cGVLaW5kRW51bS5hZGRWYWx1ZSgnTk9OX05VTEwnKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlVHlwZSA9IHNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUoJ19fSW5wdXRWYWx1ZScsIHRydWUpKTtcbiAgICBjb25zdCBmaWVsZFR5cGUgPSBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKCdfX0ZpZWxkJywgdHJ1ZSkpO1xuICAgIGNvbnN0IHR5cGVUeXBlID0gc2NoZW1hLmFkZFR5cGUobmV3IGRlZmluaXRpb25zXzEuT2JqZWN0VHlwZSgnX19UeXBlJywgdHJ1ZSkpO1xuICAgIGNvbnN0IGVudW1WYWx1ZVR5cGUgPSBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKCdfX0VudW1WYWx1ZScsIHRydWUpKTtcbiAgICB0eXBlVHlwZS5hZGRGaWVsZCgna2luZCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHR5cGVLaW5kRW51bSkpO1xuICAgIHR5cGVUeXBlLmFkZEZpZWxkKCduYW1lJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgdHlwZVR5cGUuYWRkRmllbGQoJ2Rlc2NyaXB0aW9uJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgdHlwZVR5cGUuYWRkRmllbGQoJ2ZpZWxkcycsIG5ldyBkZWZpbml0aW9uc18xLkxpc3RUeXBlKG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGZpZWxkVHlwZSkpKVxuICAgICAgICAuYWRkQXJndW1lbnQoJ2luY2x1ZGVEZXByZWNhdGVkJywgc2NoZW1hLmJvb2xlYW5UeXBlKCksIGZhbHNlKTtcbiAgICB0eXBlVHlwZS5hZGRGaWVsZCgnaW50ZXJmYWNlcycsIG5ldyBkZWZpbml0aW9uc18xLkxpc3RUeXBlKG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHR5cGVUeXBlKSkpO1xuICAgIHR5cGVUeXBlLmFkZEZpZWxkKCdwb3NzaWJsZVR5cGVzJywgbmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUobmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKSk7XG4gICAgdHlwZVR5cGUuYWRkRmllbGQoJ2VudW1WYWx1ZXMnLCBuZXcgZGVmaW5pdGlvbnNfMS5MaXN0VHlwZShuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShlbnVtVmFsdWVUeXBlKSkpXG4gICAgICAgIC5hZGRBcmd1bWVudCgnaW5jbHVkZURlcHJlY2F0ZWQnLCBzY2hlbWEuYm9vbGVhblR5cGUoKSwgZmFsc2UpO1xuICAgIHR5cGVUeXBlLmFkZEZpZWxkKCdpbnB1dEZpZWxkcycsIG5ldyBkZWZpbml0aW9uc18xLkxpc3RUeXBlKG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGlucHV0VmFsdWVUeXBlKSkpXG4gICAgICAgIC5hZGRBcmd1bWVudCgnaW5jbHVkZURlcHJlY2F0ZWQnLCBzY2hlbWEuYm9vbGVhblR5cGUoKSwgZmFsc2UpO1xuICAgIHR5cGVUeXBlLmFkZEZpZWxkKCdvZlR5cGUnLCB0eXBlVHlwZSk7XG4gICAgdHlwZVR5cGUuYWRkRmllbGQoJ3NwZWNpZmllZEJ5VVJMJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgZmllbGRUeXBlLmFkZEZpZWxkKCduYW1lJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUoc2NoZW1hLnN0cmluZ1R5cGUoKSkpO1xuICAgIGZpZWxkVHlwZS5hZGRGaWVsZCgnZGVzY3JpcHRpb24nLCBzY2hlbWEuc3RyaW5nVHlwZSgpKTtcbiAgICBmaWVsZFR5cGUuYWRkRmllbGQoJ2FyZ3MnLCBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5MaXN0VHlwZShuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShpbnB1dFZhbHVlVHlwZSkpKSlcbiAgICAgICAgLmFkZEFyZ3VtZW50KCdpbmNsdWRlRGVwcmVjYXRlZCcsIHNjaGVtYS5ib29sZWFuVHlwZSgpLCBmYWxzZSk7XG4gICAgZmllbGRUeXBlLmFkZEZpZWxkKCd0eXBlJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKTtcbiAgICBmaWVsZFR5cGUuYWRkRmllbGQoJ2lzRGVwcmVjYXRlZCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSk7XG4gICAgZmllbGRUeXBlLmFkZEZpZWxkKCdkZXByZWNhdGlvblJlYXNvbicsIHNjaGVtYS5zdHJpbmdUeXBlKCkpO1xuICAgIGlucHV0VmFsdWVUeXBlLmFkZEZpZWxkKCduYW1lJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUoc2NoZW1hLnN0cmluZ1R5cGUoKSkpO1xuICAgIGlucHV0VmFsdWVUeXBlLmFkZEZpZWxkKCdkZXNjcmlwdGlvbicsIHNjaGVtYS5zdHJpbmdUeXBlKCkpO1xuICAgIGlucHV0VmFsdWVUeXBlLmFkZEZpZWxkKCd0eXBlJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKTtcbiAgICBpbnB1dFZhbHVlVHlwZS5hZGRGaWVsZCgnZGVmYXVsdFZhbHVlJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgaW5wdXRWYWx1ZVR5cGUuYWRkRmllbGQoJ2lzRGVwcmVjYXRlZCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSk7XG4gICAgaW5wdXRWYWx1ZVR5cGUuYWRkRmllbGQoJ2RlcHJlY2F0aW9uUmVhc29uJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgZW51bVZhbHVlVHlwZS5hZGRGaWVsZCgnbmFtZScsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbiAgICBlbnVtVmFsdWVUeXBlLmFkZEZpZWxkKCdkZXNjcmlwdGlvbicsIHNjaGVtYS5zdHJpbmdUeXBlKCkpO1xuICAgIGVudW1WYWx1ZVR5cGUuYWRkRmllbGQoJ2lzRGVwcmVjYXRlZCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSk7XG4gICAgZW51bVZhbHVlVHlwZS5hZGRGaWVsZCgnZGVwcmVjYXRpb25SZWFzb24nLCBzY2hlbWEuc3RyaW5nVHlwZSgpKTtcbiAgICBjb25zdCBkaXJlY3RpdmVMb2NhdGlvbkVudW0gPSBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5FbnVtVHlwZSgnX19EaXJlY3RpdmVMb2NhdGlvbicsIHRydWUpKTtcbiAgICBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIE9iamVjdC52YWx1ZXMoZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uKSkge1xuICAgICAgICBkaXJlY3RpdmVMb2NhdGlvbkVudW0uYWRkVmFsdWUobG9jYXRpb24pO1xuICAgIH1cbiAgICBjb25zdCBkaXJlY3RpdmVUeXBlID0gc2NoZW1hLmFkZFR5cGUobmV3IGRlZmluaXRpb25zXzEuT2JqZWN0VHlwZSgnX19EaXJlY3RpdmUnLCB0cnVlKSk7XG4gICAgZGlyZWN0aXZlVHlwZS5hZGRGaWVsZCgnbmFtZScsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbiAgICBkaXJlY3RpdmVUeXBlLmFkZEZpZWxkKCdkZXNjcmlwdGlvbicsIHNjaGVtYS5zdHJpbmdUeXBlKCkpO1xuICAgIGRpcmVjdGl2ZVR5cGUuYWRkRmllbGQoJ2xvY2F0aW9ucycsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKG5ldyBkZWZpbml0aW9uc18xLkxpc3RUeXBlKG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGRpcmVjdGl2ZUxvY2F0aW9uRW51bSkpKSk7XG4gICAgZGlyZWN0aXZlVHlwZS5hZGRGaWVsZCgnYXJncycsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKG5ldyBkZWZpbml0aW9uc18xLkxpc3RUeXBlKG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGlucHV0VmFsdWVUeXBlKSkpKVxuICAgICAgICAuYWRkQXJndW1lbnQoJ2luY2x1ZGVEZXByZWNhdGVkJywgc2NoZW1hLmJvb2xlYW5UeXBlKCksIGZhbHNlKTtcbiAgICBkaXJlY3RpdmVUeXBlLmFkZEZpZWxkKCdpc1JlcGVhdGFibGUnLCBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShzY2hlbWEuYm9vbGVhblR5cGUoKSkpO1xuICAgIGNvbnN0IHNjaGVtYVR5cGUgPSBzY2hlbWEuYWRkVHlwZShuZXcgZGVmaW5pdGlvbnNfMS5PYmplY3RUeXBlKCdfX1NjaGVtYScsIHRydWUpKTtcbiAgICBzY2hlbWFUeXBlLmFkZEZpZWxkKCdkZXNjcmlwdGlvbicsIHNjaGVtYS5zdHJpbmdUeXBlKCkpO1xuICAgIHNjaGVtYVR5cGUuYWRkRmllbGQoJ3R5cGVzJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUobmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUobmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKSkpO1xuICAgIHNjaGVtYVR5cGUuYWRkRmllbGQoJ3F1ZXJ5VHlwZScsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHR5cGVUeXBlKSk7XG4gICAgc2NoZW1hVHlwZS5hZGRGaWVsZCgnbXV0YXRpb25UeXBlJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKTtcbiAgICBzY2hlbWFUeXBlLmFkZEZpZWxkKCdzdWJzY3JpcHRpb25UeXBlJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUodHlwZVR5cGUpKTtcbiAgICBzY2hlbWFUeXBlLmFkZEZpZWxkKCdkaXJlY3RpdmVzJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUobmV3IGRlZmluaXRpb25zXzEuTGlzdFR5cGUobmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUoZGlyZWN0aXZlVHlwZSkpKSk7XG4gICAgbGV0IHF1ZXJ5Um9vdCA9IHNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLnJvb3RUeXBlKCdxdWVyeScpO1xuICAgIGlmICghcXVlcnlSb290KSB7XG4gICAgICAgIHF1ZXJ5Um9vdCA9IHNjaGVtYS5hZGRUeXBlKG5ldyBkZWZpbml0aW9uc18xLk9iamVjdFR5cGUoJ1F1ZXJ5JykpO1xuICAgICAgICBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5zZXRSb290KCdxdWVyeScsIHF1ZXJ5Um9vdCk7XG4gICAgfVxuICAgIHF1ZXJ5Um9vdC5hZGRGaWVsZChuZXcgZGVmaW5pdGlvbnNfMS5GaWVsZERlZmluaXRpb24oJ19fc2NoZW1hJywgdHJ1ZSksIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYVR5cGUpKTtcbiAgICBxdWVyeVJvb3QuYWRkRmllbGQobmV3IGRlZmluaXRpb25zXzEuRmllbGREZWZpbml0aW9uKCdfX3R5cGUnLCB0cnVlKSwgdHlwZVR5cGUpXG4gICAgICAgIC5hZGRBcmd1bWVudCgnbmFtZScsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbn1cbmV4cG9ydHMuYWRkSW50cm9zcGVjdGlvbkZpZWxkcyA9IGFkZEludHJvc3BlY3Rpb25GaWVsZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRyb3NwZWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KT0lOX1ZFUlNJT05TID0gZXhwb3J0cy5Kb2luU3BlY0RlZmluaXRpb24gPSBleHBvcnRzLmpvaW5JZGVudGl0eSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgY29yZVNwZWNfMSA9IHJlcXVpcmUoXCIuL2NvcmVTcGVjXCIpO1xuY29uc3QgZGVmaW5pdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zXCIpO1xuY29uc3Qga25vd25Db3JlRmVhdHVyZXNfMSA9IHJlcXVpcmUoXCIuL2tub3duQ29yZUZlYXR1cmVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZXhwb3J0cy5qb2luSWRlbnRpdHkgPSAnaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2pvaW4nO1xuZnVuY3Rpb24gc2FuaXRpemVHcmFwaFFMTmFtZShuYW1lKSB7XG4gICAgY29uc3QgYWxwaGFOdW1lcmljVW5kZXJzY29yZU9ubHkgPSBuYW1lLnJlcGxhY2UoL1tcXFddL2csICdfJyk7XG4gICAgY29uc3Qgbm9OdW1lcmljRmlyc3RDaGFyID0gYWxwaGFOdW1lcmljVW5kZXJzY29yZU9ubHkubWF0Y2goL15cXGQvKVxuICAgICAgICA/ICdfJyArIGFscGhhTnVtZXJpY1VuZGVyc2NvcmVPbmx5XG4gICAgICAgIDogYWxwaGFOdW1lcmljVW5kZXJzY29yZU9ubHk7XG4gICAgY29uc3Qgbm9VbmRlcnNjb3JlTnVtZXJpY0VuZGluZyA9IG5vTnVtZXJpY0ZpcnN0Q2hhci5tYXRjaCgvX1xcZCskLylcbiAgICAgICAgPyBub051bWVyaWNGaXJzdENoYXIgKyAnXydcbiAgICAgICAgOiBub051bWVyaWNGaXJzdENoYXI7XG4gICAgY29uc3QgdG9VcHBlciA9IG5vVW5kZXJzY29yZU51bWVyaWNFbmRpbmcudG9Mb2NhbGVVcHBlckNhc2UoKTtcbiAgICByZXR1cm4gdG9VcHBlcjtcbn1cbmNsYXNzIEpvaW5TcGVjRGVmaW5pdGlvbiBleHRlbmRzIGNvcmVTcGVjXzEuRmVhdHVyZURlZmluaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgc3VwZXIobmV3IGNvcmVTcGVjXzEuRmVhdHVyZVVybChleHBvcnRzLmpvaW5JZGVudGl0eSwgJ2pvaW4nLCB2ZXJzaW9uKSk7XG4gICAgfVxuICAgIGlzVjAxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9uLmVxdWFscyhuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigwLCAxKSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzVG9TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGpvaW5HcmFwaCA9IHRoaXMuYWRkRGlyZWN0aXZlKHNjaGVtYSwgJ2dyYXBoJykuYWRkTG9jYXRpb25zKGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFKTtcbiAgICAgICAgam9pbkdyYXBoLmFkZEFyZ3VtZW50KCduYW1lJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUoc2NoZW1hLnN0cmluZ1R5cGUoKSkpO1xuICAgICAgICBqb2luR3JhcGguYWRkQXJndW1lbnQoJ3VybCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbiAgICAgICAgY29uc3QgZ3JhcGhFbnVtID0gdGhpcy5hZGRFbnVtVHlwZShzY2hlbWEsICdHcmFwaCcpO1xuICAgICAgICBjb25zdCBqb2luRmllbGRTZXQgPSB0aGlzLmFkZFNjYWxhclR5cGUoc2NoZW1hLCAnRmllbGRTZXQnKTtcbiAgICAgICAgY29uc3Qgam9pblR5cGUgPSB0aGlzLmFkZERpcmVjdGl2ZShzY2hlbWEsICd0eXBlJykuYWRkTG9jYXRpb25zKGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5VTklPTiwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU0sIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVIpO1xuICAgICAgICBpZiAoIXRoaXMuaXNWMDEoKSkge1xuICAgICAgICAgICAgam9pblR5cGUucmVwZWF0YWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgam9pblR5cGUuYWRkQXJndW1lbnQoJ2dyYXBoJywgbmV3IGRlZmluaXRpb25zXzEuTm9uTnVsbFR5cGUoZ3JhcGhFbnVtKSk7XG4gICAgICAgIGpvaW5UeXBlLmFkZEFyZ3VtZW50KCdrZXknLCBqb2luRmllbGRTZXQpO1xuICAgICAgICBpZiAoIXRoaXMuaXNWMDEoKSkge1xuICAgICAgICAgICAgam9pblR5cGUuYWRkQXJndW1lbnQoJ2V4dGVuc2lvbicsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5ib29sZWFuVHlwZSgpKSwgZmFsc2UpO1xuICAgICAgICAgICAgam9pblR5cGUuYWRkQXJndW1lbnQoJ3Jlc29sdmFibGUnLCBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShzY2hlbWEuYm9vbGVhblR5cGUoKSksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpvaW5GaWVsZCA9IHRoaXMuYWRkRGlyZWN0aXZlKHNjaGVtYSwgJ2ZpZWxkJykuYWRkTG9jYXRpb25zKGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTik7XG4gICAgICAgIGpvaW5GaWVsZC5yZXBlYXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgam9pbkZpZWxkLmFkZEFyZ3VtZW50KCdncmFwaCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGdyYXBoRW51bSkpO1xuICAgICAgICBqb2luRmllbGQuYWRkQXJndW1lbnQoJ3JlcXVpcmVzJywgam9pbkZpZWxkU2V0KTtcbiAgICAgICAgam9pbkZpZWxkLmFkZEFyZ3VtZW50KCdwcm92aWRlcycsIGpvaW5GaWVsZFNldCk7XG4gICAgICAgIGlmICghdGhpcy5pc1YwMSgpKSB7XG4gICAgICAgICAgICBqb2luRmllbGQuYWRkQXJndW1lbnQoJ3R5cGUnLCBzY2hlbWEuc3RyaW5nVHlwZSgpKTtcbiAgICAgICAgICAgIGpvaW5GaWVsZC5hZGRBcmd1bWVudCgnZXh0ZXJuYWwnLCBzY2hlbWEuYm9vbGVhblR5cGUoKSk7XG4gICAgICAgICAgICBqb2luRmllbGQuYWRkQXJndW1lbnQoJ292ZXJyaWRlJywgc2NoZW1hLnN0cmluZ1R5cGUoKSk7XG4gICAgICAgICAgICBqb2luRmllbGQuYWRkQXJndW1lbnQoJ3VzZWRPdmVycmlkZGVuJywgc2NoZW1hLmJvb2xlYW5UeXBlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1YwMSgpKSB7XG4gICAgICAgICAgICBjb25zdCBqb2luSW1wbGVtZW50cyA9IHRoaXMuYWRkRGlyZWN0aXZlKHNjaGVtYSwgJ2ltcGxlbWVudHMnKS5hZGRMb2NhdGlvbnMoZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLk9CSkVDVCwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOVEVSRkFDRSk7XG4gICAgICAgICAgICBqb2luSW1wbGVtZW50cy5yZXBlYXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGpvaW5JbXBsZW1lbnRzLmFkZEFyZ3VtZW50KCdncmFwaCcsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGdyYXBoRW51bSkpO1xuICAgICAgICAgICAgam9pbkltcGxlbWVudHMuYWRkQXJndW1lbnQoJ2ludGVyZmFjZScsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKHNjaGVtYS5zdHJpbmdUeXBlKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1YwMSgpKSB7XG4gICAgICAgICAgICBjb25zdCBqb2luT3duZXIgPSB0aGlzLmFkZERpcmVjdGl2ZShzY2hlbWEsICdvd25lcicpLmFkZExvY2F0aW9ucyhncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNUKTtcbiAgICAgICAgICAgIGpvaW5Pd25lci5hZGRBcmd1bWVudCgnZ3JhcGgnLCBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShncmFwaEVudW0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFsbEVsZW1lbnROYW1lcygpIHtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBbXG4gICAgICAgICAgICAnZ3JhcGgnLFxuICAgICAgICAgICAgJ0dyYXBoJyxcbiAgICAgICAgICAgICdGaWVsZFNldCcsXG4gICAgICAgICAgICAnQHR5cGUnLFxuICAgICAgICAgICAgJ0BmaWVsZCcsXG4gICAgICAgIF07XG4gICAgICAgIGlmICh0aGlzLmlzVjAxKCkpIHtcbiAgICAgICAgICAgIG5hbWVzLnB1c2goJ0Bvd25lcicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmFtZXMucHVzaCgnQGltcGxlbWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZXM7XG4gICAgfVxuICAgIHBvcHVsYXRlR3JhcGhFbnVtKHNjaGVtYSwgc3ViZ3JhcGhzKSB7XG4gICAgICAgIGNvbnN0IHNhbml0aXplZE5hbWVUb1N1YmdyYXBocyA9IG5ldyB1dGlsc18xLk11bHRpTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2Ygc3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWQgPSBzYW5pdGl6ZUdyYXBoUUxOYW1lKHN1YmdyYXBoLm5hbWUpO1xuICAgICAgICAgICAgc2FuaXRpemVkTmFtZVRvU3ViZ3JhcGhzLmFkZChzYW5pdGl6ZWQsIHN1YmdyYXBoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJncmFwaFRvRW51bU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgW3Nhbml0aXplZE5hbWUsIHN1YmdyYXBoc0Zvck5hbWVdIG9mIHNhbml0aXplZE5hbWVUb1N1YmdyYXBocykge1xuICAgICAgICAgICAgaWYgKHN1YmdyYXBoc0Zvck5hbWUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3ViZ3JhcGhUb0VudW1OYW1lLnNldChzdWJncmFwaHNGb3JOYW1lWzBdLm5hbWUsIHNhbml0aXplZE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIHN1YmdyYXBoXSBvZiBzdWJncmFwaHNGb3JOYW1lLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJncmFwaFRvRW51bU5hbWUuc2V0KHN1YmdyYXBoLm5hbWUsIGAke3Nhbml0aXplZE5hbWV9XyR7aW5kZXggKyAxfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBncmFwaEVudW0gPSB0aGlzLmdyYXBoRW51bShzY2hlbWEpO1xuICAgICAgICBjb25zdCBncmFwaERpcmVjdGl2ZSA9IHRoaXMuZ3JhcGhEaXJlY3RpdmUoc2NoZW1hKTtcbiAgICAgICAgZm9yIChjb25zdCBzdWJncmFwaCBvZiBzdWJncmFwaHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudW1WYWx1ZSA9IGdyYXBoRW51bS5hZGRWYWx1ZShzdWJncmFwaFRvRW51bU5hbWUuZ2V0KHN1YmdyYXBoLm5hbWUpKTtcbiAgICAgICAgICAgIGVudW1WYWx1ZS5hcHBseURpcmVjdGl2ZShncmFwaERpcmVjdGl2ZSwgeyBuYW1lOiBzdWJncmFwaC5uYW1lLCB1cmw6IHN1YmdyYXBoLnVybCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ViZ3JhcGhUb0VudW1OYW1lO1xuICAgIH1cbiAgICBmaWVsZFNldFNjYWxhcihzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZShzY2hlbWEsICdGaWVsZFNldCcpO1xuICAgIH1cbiAgICBncmFwaEVudW0oc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUoc2NoZW1hLCAnR3JhcGgnKTtcbiAgICB9XG4gICAgZ3JhcGhEaXJlY3RpdmUoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGl2ZShzY2hlbWEsICdncmFwaCcpO1xuICAgIH1cbiAgICB0eXBlRGlyZWN0aXZlKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmUoc2NoZW1hLCAndHlwZScpO1xuICAgIH1cbiAgICBpbXBsZW1lbnRzRGlyZWN0aXZlKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmUoc2NoZW1hLCAnaW1wbGVtZW50cycpO1xuICAgIH1cbiAgICBmaWVsZERpcmVjdGl2ZShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlKHNjaGVtYSwgJ2ZpZWxkJyk7XG4gICAgfVxuICAgIG93bmVyRGlyZWN0aXZlKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmUoc2NoZW1hLCAnb3duZXInKTtcbiAgICB9XG4gICAgZ2V0IGRlZmF1bHRDb3JlUHVycG9zZSgpIHtcbiAgICAgICAgcmV0dXJuICdFWEVDVVRJT04nO1xuICAgIH1cbn1cbmV4cG9ydHMuSm9pblNwZWNEZWZpbml0aW9uID0gSm9pblNwZWNEZWZpbml0aW9uO1xuZXhwb3J0cy5KT0lOX1ZFUlNJT05TID0gbmV3IGNvcmVTcGVjXzEuRmVhdHVyZURlZmluaXRpb25zKGV4cG9ydHMuam9pbklkZW50aXR5KVxuICAgIC5hZGQobmV3IEpvaW5TcGVjRGVmaW5pdGlvbihuZXcgY29yZVNwZWNfMS5GZWF0dXJlVmVyc2lvbigwLCAxKSkpXG4gICAgLmFkZChuZXcgSm9pblNwZWNEZWZpbml0aW9uKG5ldyBjb3JlU3BlY18xLkZlYXR1cmVWZXJzaW9uKDAsIDIpKSk7XG4oMCwga25vd25Db3JlRmVhdHVyZXNfMS5yZWdpc3Rlcktub3duRmVhdHVyZSkoZXhwb3J0cy5KT0lOX1ZFUlNJT05TKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvaW5TcGVjLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb3JlRmVhdHVyZURlZmluaXRpb25JZktub3duID0gZXhwb3J0cy5yZWdpc3Rlcktub3duRmVhdHVyZSA9IHZvaWQgMDtcbmNvbnN0IHJlZ2lzdGVyZWRGZWF0dXJlcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyS25vd25GZWF0dXJlKGRlZmluaXRpb25zKSB7XG4gICAgaWYgKCFyZWdpc3RlcmVkRmVhdHVyZXMuaGFzKGRlZmluaXRpb25zLmlkZW50aXR5KSkge1xuICAgICAgICByZWdpc3RlcmVkRmVhdHVyZXMuc2V0KGRlZmluaXRpb25zLmlkZW50aXR5LCBkZWZpbml0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5yZWdpc3Rlcktub3duRmVhdHVyZSA9IHJlZ2lzdGVyS25vd25GZWF0dXJlO1xuZnVuY3Rpb24gY29yZUZlYXR1cmVEZWZpbml0aW9uSWZLbm93bih1cmwpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHJlZ2lzdGVyZWRGZWF0dXJlcy5nZXQodXJsLmlkZW50aXR5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbmQodXJsLnZlcnNpb24pO1xufVxuZXhwb3J0cy5jb3JlRmVhdHVyZURlZmluaXRpb25JZktub3duID0gY29yZUZlYXR1cmVEZWZpbml0aW9uSWZLbm93bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtub3duQ29yZUZlYXR1cmVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVyYXRpb25Ub0RvY3VtZW50ID0gZXhwb3J0cy5wYXJzZVNlbGVjdGlvblNldCA9IGV4cG9ydHMucGFyc2VPcGVyYXRpb24gPSBleHBvcnRzLm9wZXJhdGlvbkZyb21Eb2N1bWVudCA9IGV4cG9ydHMuRnJhZ21lbnRTZWxlY3Rpb24gPSBleHBvcnRzLkZpZWxkU2VsZWN0aW9uID0gZXhwb3J0cy5zZWxlY3Rpb25PZkVsZW1lbnQgPSBleHBvcnRzLnNlbGVjdGlvblNldE9mRWxlbWVudCA9IGV4cG9ydHMuYWxsRmllbGREZWZpbml0aW9uc0luU2VsZWN0aW9uU2V0ID0gZXhwb3J0cy5TZWxlY3Rpb25TZXQgPSBleHBvcnRzLk5hbWVkRnJhZ21lbnRzID0gZXhwb3J0cy5OYW1lZEZyYWdtZW50RGVmaW5pdGlvbiA9IGV4cG9ydHMuc2VsZWN0aW9uU2V0T2YgPSBleHBvcnRzLk9wZXJhdGlvbiA9IGV4cG9ydHMuY29uY2F0T3BlcmF0aW9uUGF0aHMgPSBleHBvcnRzLmNvbmRpdGlvbmFsRGlyZWN0aXZlc0luT3BlcmF0aW9uUGF0aCA9IGV4cG9ydHMuc2FtZU9wZXJhdGlvblBhdGhzID0gZXhwb3J0cy5GcmFnbWVudEVsZW1lbnQgPSBleHBvcnRzLkZpZWxkID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBkZWZpbml0aW9uc18xID0gcmVxdWlyZShcIi4vZGVmaW5pdGlvbnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCB2YWx1ZXNfMSA9IHJlcXVpcmUoXCIuL3ZhbHVlc1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlKGNvbmRpdGlvbiwgbWVzc2FnZSwgc291cmNlQVNUKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihtZXNzYWdlKCksIHsgbm9kZXM6IHNvdXJjZUFTVCB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXZlU2FtZURpcmVjdGl2ZXMob3AxLCBvcDIpIHtcbiAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEuc2FtZURpcmVjdGl2ZUFwcGxpY2F0aW9ucykob3AxLmFwcGxpZWREaXJlY3RpdmVzLCBvcDIuYXBwbGllZERpcmVjdGl2ZXMpO1xufVxuY2xhc3MgQWJzdHJhY3RPcGVyYXRpb25FbGVtZW50IGV4dGVuZHMgZGVmaW5pdGlvbnNfMS5EaXJlY3RpdmVUYXJnZXRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEsIHZhcmlhYmxlc0luRWxlbWVudCkge1xuICAgICAgICBzdXBlcihzY2hlbWEpO1xuICAgICAgICB0aGlzLnZhcmlhYmxlc0luRWxlbWVudCA9IHZhcmlhYmxlc0luRWxlbWVudDtcbiAgICB9XG4gICAgdmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEubWVyZ2VWYXJpYWJsZXMpKHRoaXMudmFyaWFibGVzSW5FbGVtZW50LCB0aGlzLnZhcmlhYmxlc0luQXBwbGllZERpcmVjdGl2ZXMoKSk7XG4gICAgfVxuICAgIGFkZEF0dGFjaGVtZW50KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmF0dGFjaGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2hlbWVudHMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBnZXRBdHRhY2hlbWVudChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5hdHRhY2hlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQoa2V5KTtcbiAgICB9XG4gICAgY29weUF0dGFjaGVtZW50c1RvKGVsdCkge1xuICAgICAgICBpZiAodGhpcy5hdHRhY2hlbWVudHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHRoaXMuYXR0YWNoZW1lbnRzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIGVsdC5hZGRBdHRhY2hlbWVudChrLCB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RPcGVyYXRpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihkZWZpbml0aW9uLCBhcmdzID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgdmFyaWFibGVEZWZpbml0aW9ucyA9IG5ldyBkZWZpbml0aW9uc18xLlZhcmlhYmxlRGVmaW5pdGlvbnMoKSwgYWxpYXMpIHtcbiAgICAgICAgc3VwZXIoZGVmaW5pdGlvbi5zY2hlbWEoKSwgKDAsIGRlZmluaXRpb25zXzEudmFyaWFibGVzSW5Bcmd1bWVudHMpKGFyZ3MpKTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAgICAgdGhpcy52YXJpYWJsZURlZmluaXRpb25zID0gdmFyaWFibGVEZWZpbml0aW9ucztcbiAgICAgICAgdGhpcy5hbGlhcyA9IGFsaWFzO1xuICAgICAgICB0aGlzLmtpbmQgPSAnRmllbGQnO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5pdGlvbi5uYW1lO1xuICAgIH1cbiAgICByZXNwb25zZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsaWFzID8gdGhpcy5hbGlhcyA6IHRoaXMubmFtZTtcbiAgICB9XG4gICAgZ2V0IHBhcmVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluaXRpb24ucGFyZW50O1xuICAgIH1cbiAgICB3aXRoVXBkYXRlZERlZmluaXRpb24obmV3RGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBuZXdGaWVsZCA9IG5ldyBGaWVsZChuZXdEZWZpbml0aW9uLCB0aGlzLmFyZ3MsIHRoaXMudmFyaWFibGVEZWZpbml0aW9ucywgdGhpcy5hbGlhcyk7XG4gICAgICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHRoaXMuYXBwbGllZERpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIG5ld0ZpZWxkLmFwcGx5RGlyZWN0aXZlKGRpcmVjdGl2ZS5kZWZpbml0aW9uLCBkaXJlY3RpdmUuYXJndW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29weUF0dGFjaGVtZW50c1RvKG5ld0ZpZWxkKTtcbiAgICAgICAgcmV0dXJuIG5ld0ZpZWxkO1xuICAgIH1cbiAgICBhcHBsaWVzVG8odHlwZSkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gdHlwZS5maWVsZCh0aGlzLm5hbWUpO1xuICAgICAgICByZXR1cm4gISFkZWZpbml0aW9uICYmIHRoaXMuc2VsZWN0cyhkZWZpbml0aW9uKTtcbiAgICB9XG4gICAgc2VsZWN0cyhkZWZpbml0aW9uLCBhc3N1bWVWYWxpZCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChkZWZpbml0aW9uID09IHRoaXMuZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubmFtZSAhPT0gZGVmaW5pdGlvbi5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBhcmdEZWYgb2YgZGVmaW5pdGlvbi5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgY29uc3QgYXBwbGllZFZhbHVlID0gdGhpcy5hcmdzW2FyZ0RlZi5uYW1lXTtcbiAgICAgICAgICAgIGlmIChhcHBsaWVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhcmdEZWYuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQgJiYgISgwLCBkZWZpbml0aW9uc18xLmlzTnVsbGFibGVUeXBlKShhcmdEZWYudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghYXNzdW1lVmFsaWQgJiYgISgwLCB2YWx1ZXNfMS5pc1ZhbGlkVmFsdWUpKGFwcGxpZWRWYWx1ZSwgYXJnRGVmLCB0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhc3N1bWVWYWxpZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuYXJncykpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgZGVmaW5pdGlvbi5hcmd1bWVudChuYW1lKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLm5hbWUgPT09IHRoaXMuZGVmaW5pdGlvbi5uYW1lLCAoKSA9PiBgRmllbGQgbmFtZSBcIiR7dGhpcy5uYW1lfVwiIGNhbm5vdCBzZWxlY3QgZmllbGQgXCIke3RoaXMuZGVmaW5pdGlvbi5jb29yZGluYXRlfTogbmFtZSBtaXNtYXRjaFwiYCk7XG4gICAgICAgIGZvciAoY29uc3QgYXJnRGVmIG9mIHRoaXMuZGVmaW5pdGlvbi5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgY29uc3QgYXBwbGllZFZhbHVlID0gdGhpcy5hcmdzW2FyZ0RlZi5uYW1lXTtcbiAgICAgICAgICAgIGlmIChhcHBsaWVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlKGFyZ0RlZi5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoMCwgZGVmaW5pdGlvbnNfMS5pc051bGxhYmxlVHlwZSkoYXJnRGVmLnR5cGUpLCAoKSA9PiBgTWlzc2luZyBtYW5kYXRvcnkgdmFsdWUgZm9yIGFyZ3VtZW50IFwiJHthcmdEZWYubmFtZX1cIiBvZiBmaWVsZCBcIiR7dGhpcy5kZWZpbml0aW9uLmNvb3JkaW5hdGV9XCIgaW4gc2VsZWN0aW9uIFwiJHt0aGlzfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZSgoMCwgdmFsdWVzXzEuaXNWYWxpZFZhbHVlKShhcHBsaWVkVmFsdWUsIGFyZ0RlZiwgdGhpcy52YXJpYWJsZURlZmluaXRpb25zKSwgKCkgPT4gYEludmFsaWQgdmFsdWUgJHsoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykoYXBwbGllZFZhbHVlKX0gZm9yIGFyZ3VtZW50IFwiJHthcmdEZWYuY29vcmRpbmF0ZX1cIiBvZiB0eXBlICR7YXJnRGVmLnR5cGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuYXJncykpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlID09PSBudWxsIHx8IHRoaXMuZGVmaW5pdGlvbi5hcmd1bWVudChuYW1lKSAhPT0gdW5kZWZpbmVkLCAoKSA9PiBgVW5rbm93biBhcmd1bWVudCBcIiR7bmFtZX1cIiBpbiBmaWVsZCBhcHBsaWNhdGlvbiBvZiBcIiR7dGhpcy5uYW1lfVwiYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlRm9yQWRkaW5nVG8oc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblBhcmVudCA9IHNlbGVjdGlvblNldC5wYXJlbnRUeXBlO1xuICAgICAgICBjb25zdCBmaWVsZFBhcmVudCA9IHRoaXMuZGVmaW5pdGlvbi5wYXJlbnQ7XG4gICAgICAgIGlmIChzZWxlY3Rpb25QYXJlbnQgPT09IGZpZWxkUGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5uYW1lID09PSBkZWZpbml0aW9uc18xLnR5cGVuYW1lRmllbGROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aXRoVXBkYXRlZERlZmluaXRpb24oc2VsZWN0aW9uUGFyZW50LnR5cGVuYW1lRmllbGQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGUoc2VsZWN0aW9uUGFyZW50Lm5hbWUgPT0gZmllbGRQYXJlbnQubmFtZVxuICAgICAgICAgICAgfHwgKCgwLCBkZWZpbml0aW9uc18xLmlzSW50ZXJmYWNlVHlwZSkoZmllbGRQYXJlbnQpICYmIGZpZWxkUGFyZW50LmFsbEltcGxlbWVudGF0aW9ucygpLnNvbWUoaSA9PiBpLm5hbWUgPT0gc2VsZWN0aW9uUGFyZW50Lm5hbWUpKSwgKCkgPT4gYENhbm5vdCBhZGQgc2VsZWN0aW9uIG9mIGZpZWxkIFwiJHt0aGlzLmRlZmluaXRpb24uY29vcmRpbmF0ZX1cIiB0byBzZWxlY3Rpb24gc2V0IG9mIHBhcmVudCB0eXBlIFwiJHtzZWxlY3Rpb25TZXQucGFyZW50VHlwZX1cImApO1xuICAgICAgICBjb25zdCBmaWVsZERlZiA9IHNlbGVjdGlvblBhcmVudC5maWVsZCh0aGlzLm5hbWUpO1xuICAgICAgICB2YWxpZGF0ZShmaWVsZERlZiwgKCkgPT4gYENhbm5vdCBhZGQgc2VsZWN0aW9uIG9mIGZpZWxkIFwiJHt0aGlzLmRlZmluaXRpb24uY29vcmRpbmF0ZX1cIiB0byBzZWxlY3Rpb24gc2V0IG9mIHBhcmVudCB0eXBlIFwiJHtzZWxlY3Rpb25QYXJlbnR9XCIgKHRoYXQgZG9lcyBub3QgZGVjbGFyZSB0aGF0IGZpZWxkKWApO1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoVXBkYXRlZERlZmluaXRpb24oZmllbGREZWYpO1xuICAgIH1cbiAgICBoYXNEZWZlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkZWZlckRpcmVjdGl2ZUFyZ3MoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHdpdGhvdXREZWZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGVxdWFscyh0aGF0KSB7XG4gICAgICAgIGlmICh0aGlzID09PSB0aGF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhhdC5raW5kID09PSAnRmllbGQnXG4gICAgICAgICAgICAmJiB0aGlzLm5hbWUgPT09IHRoYXQubmFtZVxuICAgICAgICAgICAgJiYgdGhpcy5hbGlhcyA9PT0gdGhhdC5hbGlhc1xuICAgICAgICAgICAgJiYgKDAsIHZhbHVlc18xLmFyZ3VtZW50c0VxdWFscykodGhpcy5hcmdzLCB0aGF0LmFyZ3MpXG4gICAgICAgICAgICAmJiBoYXZlU2FtZURpcmVjdGl2ZXModGhpcywgdGhhdCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBhbGlhcyA9IHRoaXMuYWxpYXMgPyB0aGlzLmFsaWFzICsgJzogJyA6ICcnO1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5hcmdzKTtcbiAgICAgICAgY29uc3QgYXJncyA9IGVudHJpZXMubGVuZ3RoID09IDBcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogJygnICsgZW50cmllcy5tYXAoKFtuLCB2XSkgPT4geyB2YXIgX2E7IHJldHVybiBgJHtufTogJHsoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykodiwgKF9hID0gdGhpcy5kZWZpbml0aW9uLmFyZ3VtZW50KG4pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZSl9YDsgfSkuam9pbignLCAnKSArICcpJztcbiAgICAgICAgcmV0dXJuIGFsaWFzICsgdGhpcy5uYW1lICsgYXJncyArIHRoaXMuYXBwbGllZERpcmVjdGl2ZXNUb1N0cmluZygpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmllbGQgPSBGaWVsZDtcbmNsYXNzIEZyYWdtZW50RWxlbWVudCBleHRlbmRzIEFic3RyYWN0T3BlcmF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlVHlwZSwgdHlwZUNvbmRpdGlvbikge1xuICAgICAgICBzdXBlcihzb3VyY2VUeXBlLnNjaGVtYSgpLCBbXSk7XG4gICAgICAgIHRoaXMuc291cmNlVHlwZSA9IHNvdXJjZVR5cGU7XG4gICAgICAgIHRoaXMua2luZCA9ICdGcmFnbWVudEVsZW1lbnQnO1xuICAgICAgICB0aGlzLnR5cGVDb25kaXRpb24gPSB0eXBlQ29uZGl0aW9uICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHR5cGVDb25kaXRpb24gPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IHRoaXMuc2NoZW1hKCkudHlwZSh0eXBlQ29uZGl0aW9uKVxuICAgICAgICAgICAgOiB0eXBlQ29uZGl0aW9uO1xuICAgIH1cbiAgICBnZXQgcGFyZW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlVHlwZTtcbiAgICB9XG4gICAgY2FzdGVkVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZUNvbmRpdGlvbiA/IHRoaXMudHlwZUNvbmRpdGlvbiA6IHRoaXMuc291cmNlVHlwZTtcbiAgICB9XG4gICAgd2l0aFVwZGF0ZWRTb3VyY2VUeXBlKG5ld1NvdXJjZVR5cGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBuZXdGcmFnbWVudCA9IG5ldyBGcmFnbWVudEVsZW1lbnQobmV3U291cmNlVHlwZSwgKF9hID0gdGhpcy50eXBlQ29uZGl0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSk7XG4gICAgICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHRoaXMuYXBwbGllZERpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIG5ld0ZyYWdtZW50LmFwcGx5RGlyZWN0aXZlKGRpcmVjdGl2ZS5kZWZpbml0aW9uLCBkaXJlY3RpdmUuYXJndW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29weUF0dGFjaGVtZW50c1RvKG5ld0ZyYWdtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ld0ZyYWdtZW50O1xuICAgIH1cbiAgICB1cGRhdGVGb3JBZGRpbmdUbyhzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uUGFyZW50ID0gc2VsZWN0aW9uU2V0LnBhcmVudFR5cGU7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50UGFyZW50ID0gdGhpcy5wYXJlbnRUeXBlO1xuICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gdGhpcy50eXBlQ29uZGl0aW9uO1xuICAgICAgICBpZiAoc2VsZWN0aW9uUGFyZW50ICE9IGZyYWdtZW50UGFyZW50KSB7XG4gICAgICAgICAgICB2YWxpZGF0ZSghdHlwZUNvbmRpdGlvbiB8fCAoMCwgZGVmaW5pdGlvbnNfMS5ydW50aW1lVHlwZXNJbnRlcnNlY3RzKShzZWxlY3Rpb25QYXJlbnQsIHR5cGVDb25kaXRpb24pLCAoKSA9PiBgQ2Fubm90IGFkZCBmcmFnbWVudCBvZiBwYXJlbnQgdHlwZSBcIiR7dGhpcy5wYXJlbnRUeXBlfVwiIHRvIHNlbGVjdGlvbiBzZXQgb2YgcGFyZW50IHR5cGUgXCIke3NlbGVjdGlvblNldC5wYXJlbnRUeXBlfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aXRoVXBkYXRlZFNvdXJjZVR5cGUoc2VsZWN0aW9uUGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaGFzRGVmZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0FwcGxpZWREaXJlY3RpdmUoJ2RlZmVyJyk7XG4gICAgfVxuICAgIGhhc1N0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXBwbGllZERpcmVjdGl2ZSgnc3RyZWFtJyk7XG4gICAgfVxuICAgIGRlZmVyRGlyZWN0aXZlQXJncygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5hcHBsaWVkRGlyZWN0aXZlc09mKHRoaXMuc2NoZW1hKCkuZGVmZXJEaXJlY3RpdmUoKSlbMF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hcmd1bWVudHMoKTtcbiAgICB9XG4gICAgd2l0aG91dERlZmVyKCkge1xuICAgICAgICBjb25zdCBkZWZlck5hbWUgPSB0aGlzLnNjaGVtYSgpLmRlZmVyRGlyZWN0aXZlKCkubmFtZTtcbiAgICAgICAgY29uc3QgdXBkYXRlZERpcmVjdGl2ZXMgPSB0aGlzLmFwcGxpZWREaXJlY3RpdmVzLmZpbHRlcigoZCkgPT4gZC5uYW1lICE9PSBkZWZlck5hbWUpO1xuICAgICAgICBpZiAoIXRoaXMudHlwZUNvbmRpdGlvbiAmJiB1cGRhdGVkRGlyZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZWREaXJlY3RpdmVzLmxlbmd0aCA9PT0gdGhpcy5hcHBsaWVkRGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBuZXcgRnJhZ21lbnRFbGVtZW50KHRoaXMuc291cmNlVHlwZSwgdGhpcy50eXBlQ29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5jb3B5QXR0YWNoZW1lbnRzVG8odXBkYXRlZCk7XG4gICAgICAgIHVwZGF0ZWREaXJlY3RpdmVzLmZvckVhY2goKGQpID0+IHVwZGF0ZWQuYXBwbHlEaXJlY3RpdmUoZC5kZWZpbml0aW9uLCBkLmFyZ3VtZW50cygpKSk7XG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cbiAgICB3aXRoTm9ybWFsaXplZERlZmVyKG5vcm1hbGl6ZXIpIHtcbiAgICAgICAgY29uc3QgZGVmZXJBcmdzID0gdGhpcy5kZWZlckRpcmVjdGl2ZUFyZ3MoKTtcbiAgICAgICAgaWYgKCFkZWZlckFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdEZWZlckFyZ3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBjb25kaXRpb25WYXJpYWJsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGRlZmVyQXJncy5pZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZmVyQXJncy5pZiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmVyQXJncy5pZikge1xuICAgICAgICAgICAgICAgICAgICBuZXdEZWZlckFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kZWZlckFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2l0aG91dERlZmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uVmFyaWFibGUgPSBkZWZlckFyZ3MuaWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gZGVmZXJBcmdzLmxhYmVsO1xuICAgICAgICBpZiAoIWxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCA9IG5vcm1hbGl6ZXIubmV3TGFiZWwoKTtcbiAgICAgICAgICAgIGlmIChuZXdEZWZlckFyZ3MpIHtcbiAgICAgICAgICAgICAgICBuZXdEZWZlckFyZ3MubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld0RlZmVyQXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVmZXJBcmdzLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb25kaXRpb25WYXJpYWJsZSkge1xuICAgICAgICAgICAgbm9ybWFsaXplci5yZWdpc3RlckNvbmRpdGlvbihsYWJlbCwgY29uZGl0aW9uVmFyaWFibGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV3RGVmZXJBcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cGRhdGVkID0gbmV3IEZyYWdtZW50RWxlbWVudCh0aGlzLnNvdXJjZVR5cGUsIHRoaXMudHlwZUNvbmRpdGlvbik7XG4gICAgICAgIHRoaXMuY29weUF0dGFjaGVtZW50c1RvKHVwZGF0ZWQpO1xuICAgICAgICBjb25zdCBkZWZlckRpcmVjdGl2ZSA9IHRoaXMuc2NoZW1hKCkuZGVmZXJEaXJlY3RpdmUoKTtcbiAgICAgICAgdGhpcy5hcHBsaWVkRGlyZWN0aXZlcy5maWx0ZXIoKGQpID0+IGQubmFtZSAhPT0gZGVmZXJEaXJlY3RpdmUubmFtZSkuZm9yRWFjaCgoZCkgPT4gdXBkYXRlZC5hcHBseURpcmVjdGl2ZShkLmRlZmluaXRpb24sIGQuYXJndW1lbnRzKCkpKTtcbiAgICAgICAgdXBkYXRlZC5hcHBseURpcmVjdGl2ZSh0aGlzLnNjaGVtYSgpLmRlZmVyRGlyZWN0aXZlKCksIG5ld0RlZmVyQXJncyk7XG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cbiAgICBlcXVhbHModGhhdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcyA9PT0gdGhhdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoYXQua2luZCA9PT0gJ0ZyYWdtZW50RWxlbWVudCdcbiAgICAgICAgICAgICYmICgoX2EgPSB0aGlzLnR5cGVDb25kaXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSA9PT0gKChfYiA9IHRoYXQudHlwZUNvbmRpdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm5hbWUpXG4gICAgICAgICAgICAmJiBoYXZlU2FtZURpcmVjdGl2ZXModGhpcywgdGhhdCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJy4uLicgKyAodGhpcy50eXBlQ29uZGl0aW9uID8gJyBvbiAnICsgdGhpcy50eXBlQ29uZGl0aW9uIDogJycpICsgdGhpcy5hcHBsaWVkRGlyZWN0aXZlc1RvU3RyaW5nKCk7XG4gICAgfVxufVxuZXhwb3J0cy5GcmFnbWVudEVsZW1lbnQgPSBGcmFnbWVudEVsZW1lbnQ7XG5mdW5jdGlvbiBzYW1lT3BlcmF0aW9uUGF0aHMocDEsIHAyKSB7XG4gICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHAxLmxlbmd0aCAhPT0gcDIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwMS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIXAxW2ldLmVxdWFscyhwMltpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuc2FtZU9wZXJhdGlvblBhdGhzID0gc2FtZU9wZXJhdGlvblBhdGhzO1xuZnVuY3Rpb24gY29uZGl0aW9uYWxEaXJlY3RpdmVzSW5PcGVyYXRpb25QYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5tYXAoKGUpID0+IGUuYXBwbGllZERpcmVjdGl2ZXMpLmZsYXQoKS5maWx0ZXIoKGQpID0+ICgwLCBkZWZpbml0aW9uc18xLmlzQ29uZGl0aW9uYWxEaXJlY3RpdmUpKGQpKTtcbn1cbmV4cG9ydHMuY29uZGl0aW9uYWxEaXJlY3RpdmVzSW5PcGVyYXRpb25QYXRoID0gY29uZGl0aW9uYWxEaXJlY3RpdmVzSW5PcGVyYXRpb25QYXRoO1xuZnVuY3Rpb24gY29uY2F0T3BlcmF0aW9uUGF0aHMoaGVhZCwgdGFpbCkge1xuICAgIGlmIChoZWFkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGFpbDtcbiAgICB9XG4gICAgaWYgKHRhaWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBoZWFkO1xuICAgIH1cbiAgICBjb25zdCBsYXN0T2ZIZWFkID0gaGVhZFtoZWFkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IGNvbmRpdGlvbmFscyA9IGNvbmRpdGlvbmFsRGlyZWN0aXZlc0luT3BlcmF0aW9uUGF0aChoZWFkKTtcbiAgICBsZXQgZmlyc3RPZlRhaWwgPSB0YWlsWzBdO1xuICAgIHdoaWxlIChmaXJzdE9mVGFpbCAmJiBpc1VzZWxlc3NGb2xsb3d1cEVsZW1lbnQobGFzdE9mSGVhZCwgZmlyc3RPZlRhaWwsIGNvbmRpdGlvbmFscykpIHtcbiAgICAgICAgdGFpbCA9IHRhaWwuc2xpY2UoMSk7XG4gICAgICAgIGZpcnN0T2ZUYWlsID0gdGFpbFswXTtcbiAgICB9XG4gICAgcmV0dXJuIGhlYWQuY29uY2F0KHRhaWwpO1xufVxuZXhwb3J0cy5jb25jYXRPcGVyYXRpb25QYXRocyA9IGNvbmNhdE9wZXJhdGlvblBhdGhzO1xuZnVuY3Rpb24gaXNVc2VsZXNzRm9sbG93dXBFbGVtZW50KGZpcnN0LCBmb2xsb3d1cCwgY29uZGl0aW9uYWxzKSB7XG4gICAgY29uc3QgdHlwZU9mRmlyc3QgPSBmaXJzdC5raW5kID09PSAnRmllbGQnXG4gICAgICAgID8gKDAsIGRlZmluaXRpb25zXzEuYmFzZVR5cGUpKGZpcnN0LmRlZmluaXRpb24udHlwZSlcbiAgICAgICAgOiBmaXJzdC50eXBlQ29uZGl0aW9uO1xuICAgIHJldHVybiAhIXR5cGVPZkZpcnN0XG4gICAgICAgICYmIGZvbGxvd3VwLmtpbmQgPT09ICdGcmFnbWVudEVsZW1lbnQnXG4gICAgICAgICYmICEhZm9sbG93dXAudHlwZUNvbmRpdGlvblxuICAgICAgICAmJiAoZm9sbG93dXAuYXBwbGllZERpcmVjdGl2ZXMubGVuZ3RoID09PSAwIHx8ICgwLCBkZWZpbml0aW9uc18xLmlzRGlyZWN0aXZlQXBwbGljYXRpb25zU3Vic2V0KShjb25kaXRpb25hbHMsIGZvbGxvd3VwLmFwcGxpZWREaXJlY3RpdmVzKSlcbiAgICAgICAgJiYgKDAsIHR5cGVzXzEuc2FtZVR5cGUpKHR5cGVPZkZpcnN0LCBmb2xsb3d1cC50eXBlQ29uZGl0aW9uKTtcbn1cbmNsYXNzIE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Iocm9vdEtpbmQsIHNlbGVjdGlvblNldCwgdmFyaWFibGVEZWZpbml0aW9ucywgbmFtZSkge1xuICAgICAgICB0aGlzLnJvb3RLaW5kID0gcm9vdEtpbmQ7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0ID0gc2VsZWN0aW9uU2V0O1xuICAgICAgICB0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMgPSB2YXJpYWJsZURlZmluaXRpb25zO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBvcHRpbWl6ZShmcmFnbWVudHMsIG1pblVzYWdlc1RvT3B0aW1pemUgPSAyKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkobWluVXNhZ2VzVG9PcHRpbWl6ZSA+PSAxLCBgRXhwZWN0ZWQgJ21pblVzYWdlc1RvT3B0aW1pemUnIHRvIGJlIGF0IGxlYXN0IDEsIGJ1dCBnb3QgJHttaW5Vc2FnZXNUb09wdGltaXplfWApO1xuICAgICAgICBpZiAoIWZyYWdtZW50cyB8fCBmcmFnbWVudHMuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW1pemVkU2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25TZXQub3B0aW1pemUoZnJhZ21lbnRzKTtcbiAgICAgICAgaWYgKG9wdGltaXplZFNlbGVjdGlvbiA9PT0gdGhpcy5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgb3B0aW1pemVkU2VsZWN0aW9uLmNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyh1c2FnZXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIGZyYWdtZW50cy5uYW1lcygpKSB7XG4gICAgICAgICAgICBpZiAoIXVzYWdlcy5oYXMoZnJhZ21lbnQpKSB7XG4gICAgICAgICAgICAgICAgdXNhZ2VzLnNldChmcmFnbWVudCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9EZW9wdGltaXplID0gKDAsIHV0aWxzXzEubWFwRW50cmllcykodXNhZ2VzKS5maWx0ZXIoKFtfLCBjb3VudF0pID0+IGNvdW50IDwgbWluVXNhZ2VzVG9PcHRpbWl6ZSkubWFwKChbbmFtZV0pID0+IG5hbWUpO1xuICAgICAgICBvcHRpbWl6ZWRTZWxlY3Rpb24gPSBvcHRpbWl6ZWRTZWxlY3Rpb24uZXhwYW5kRnJhZ21lbnRzKHRvRGVvcHRpbWl6ZSk7XG4gICAgICAgIHJldHVybiBuZXcgT3BlcmF0aW9uKHRoaXMucm9vdEtpbmQsIG9wdGltaXplZFNlbGVjdGlvbiwgdGhpcy52YXJpYWJsZURlZmluaXRpb25zLCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBleHBhbmRBbGxGcmFnbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkU2VsZWN0aW9ucyA9IHRoaXMuc2VsZWN0aW9uU2V0LmV4cGFuZEZyYWdtZW50cygpO1xuICAgICAgICBpZiAoZXhwYW5kZWRTZWxlY3Rpb25zID09PSB0aGlzLnNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBPcGVyYXRpb24odGhpcy5yb290S2luZCwgZXhwYW5kZWRTZWxlY3Rpb25zLCB0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMsIHRoaXMubmFtZSk7XG4gICAgfVxuICAgIHdpdGhvdXREZWZlcihsYWJlbHNUb1JlbW92ZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCF0aGlzLnNlbGVjdGlvblNldC5mcmFnbWVudHMgfHwgdGhpcy5zZWxlY3Rpb25TZXQuZnJhZ21lbnRzLmlzRW1wdHkoKSwgJ1JlbW92aW5nIEBkZWZlciBjdXJyZW50bHkgb25seSB3b3JrIG9uIFwiZXhwYW5kZWRcIiBzZWxlY3Rpb25zIChubyBuYW1lZCBmcmFnbWVudHMpJyk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSB0aGlzLnNlbGVjdGlvblNldC53aXRob3V0RGVmZXIobGFiZWxzVG9SZW1vdmUpO1xuICAgICAgICByZXR1cm4gdXBkYXRlZCA9PSB0aGlzLnNlbGVjdGlvblNldFxuICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBPcGVyYXRpb24odGhpcy5yb290S2luZCwgdXBkYXRlZCwgdGhpcy52YXJpYWJsZURlZmluaXRpb25zLCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICB3aXRoTm9ybWFsaXplZERlZmVyKCkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCF0aGlzLnNlbGVjdGlvblNldC5mcmFnbWVudHMgfHwgdGhpcy5zZWxlY3Rpb25TZXQuZnJhZ21lbnRzLmlzRW1wdHkoKSwgJ0Fzc2lnbmluZyBAZGVmZXIgbGFibGVzIGN1cnJlbnRseSBvbmx5IHdvcmsgb24gXCJleHBhbmRlZFwiIHNlbGVjdGlvbnMgKG5vIG5hbWVkIGZyYWdtZW50cyknKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplciA9IG5ldyBEZWZlck5vcm1hbGl6ZXIoKTtcbiAgICAgICAgY29uc3QgeyBoYXNEZWZlcnMsIGhhc05vbkxhYmVsbGVkT3JDb25kaXRpb25hbERlZmVycyB9ID0gbm9ybWFsaXplci5pbml0KHRoaXMuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgbGV0IHVwZGF0ZWRPcGVyYXRpb24gPSB0aGlzO1xuICAgICAgICBpZiAoaGFzTm9uTGFiZWxsZWRPckNvbmRpdGlvbmFsRGVmZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkID0gdGhpcy5zZWxlY3Rpb25TZXQud2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKTtcbiAgICAgICAgICAgIHVwZGF0ZWRPcGVyYXRpb24gPSBuZXcgT3BlcmF0aW9uKHRoaXMucm9vdEtpbmQsIHVwZGF0ZWQsIHRoaXMudmFyaWFibGVEZWZpbml0aW9ucywgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiB1cGRhdGVkT3BlcmF0aW9uLFxuICAgICAgICAgICAgaGFzRGVmZXJzLFxuICAgICAgICAgICAgYXNzaWduZWREZWZlckxhYmVsczogbm9ybWFsaXplci5hc3NpZ25lZExhYmVscyxcbiAgICAgICAgICAgIGRlZmVyQ29uZGl0aW9uczogbm9ybWFsaXplci5kZWZlckNvbmRpdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvU3RyaW5nKGV4cGFuZEZyYWdtZW50cyA9IGZhbHNlLCBwcmV0dHlQcmludCA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2V0LnRvT3BlcmF0aW9uU3RyaW5nKHRoaXMucm9vdEtpbmQsIHRoaXMudmFyaWFibGVEZWZpbml0aW9ucywgdGhpcy5uYW1lLCBleHBhbmRGcmFnbWVudHMsIHByZXR0eVByaW50KTtcbiAgICB9XG59XG5leHBvcnRzLk9wZXJhdGlvbiA9IE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZU5vZGVzVG9FbGVtZW50KGRpcmVjdGl2ZU5vZGVzLCBlbGVtZW50KSB7XG4gICAgaWYgKCFkaXJlY3RpdmVOb2Rlcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtYSA9IGVsZW1lbnQuc2NoZW1hKCk7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIGRpcmVjdGl2ZU5vZGVzKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZiA9IHNjaGVtYS5kaXJlY3RpdmUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgdmFsaWRhdGUoZGlyZWN0aXZlRGVmLCAoKSA9PiBgVW5rbm93biBkaXJlY3RpdmUgXCJAJHtub2RlLm5hbWUudmFsdWV9XCIgaW4gc2VsZWN0aW9uYCk7XG4gICAgICAgIGVsZW1lbnQuYXBwbHlEaXJlY3RpdmUoZGlyZWN0aXZlRGVmLCAoMCwgdmFsdWVzXzEuYXJndW1lbnRzRnJvbUFTVCkoZGlyZWN0aXZlRGVmLmNvb3JkaW5hdGUsIG5vZGUuYXJndW1lbnRzLCBkaXJlY3RpdmVEZWYpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25TZXRPZihwYXJlbnRUeXBlLCBzZWxlY3Rpb24pIHtcbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSBuZXcgU2VsZWN0aW9uU2V0KHBhcmVudFR5cGUpO1xuICAgIHNlbGVjdGlvblNldC5hZGQoc2VsZWN0aW9uKTtcbiAgICByZXR1cm4gc2VsZWN0aW9uU2V0O1xufVxuZXhwb3J0cy5zZWxlY3Rpb25TZXRPZiA9IHNlbGVjdGlvblNldE9mO1xuY2xhc3MgTmFtZWRGcmFnbWVudERlZmluaXRpb24gZXh0ZW5kcyBkZWZpbml0aW9uc18xLkRpcmVjdGl2ZVRhcmdldEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSwgbmFtZSwgdHlwZUNvbmRpdGlvbiwgc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudHlwZUNvbmRpdGlvbiA9IHR5cGVDb25kaXRpb247XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0ID0gc2VsZWN0aW9uU2V0O1xuICAgIH1cbiAgICB3aXRoVXBkYXRlZFNlbGVjdGlvblNldChuZXdTZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZEZyYWdtZW50RGVmaW5pdGlvbih0aGlzLnNjaGVtYSgpLCB0aGlzLm5hbWUsIHRoaXMudHlwZUNvbmRpdGlvbiwgbmV3U2VsZWN0aW9uU2V0KTtcbiAgICB9XG4gICAgdmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEubWVyZ2VWYXJpYWJsZXMpKHRoaXMudmFyaWFibGVzSW5BcHBsaWVkRGlyZWN0aXZlcygpLCB0aGlzLnNlbGVjdGlvblNldC51c2VkVmFyaWFibGVzKCkpO1xuICAgIH1cbiAgICBjb2xsZWN0VXNlZEZyYWdtZW50TmFtZXMoY29sbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0LmNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyhjb2xsZWN0b3IpO1xuICAgIH1cbiAgICB0b0ZyYWdtZW50RGVmaW5pdGlvbk5vZGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OLFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGVDb25kaXRpb246IHtcbiAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5OQU1FRF9UWVBFLFxuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudHlwZUNvbmRpdGlvbi5uYW1lXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbGVjdGlvblNldDogdGhpcy5zZWxlY3Rpb25TZXQudG9TZWxlY3Rpb25TZXROb2RlKClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2FuQXBwbHlBdFR5cGUodHlwZSkge1xuICAgICAgICByZXR1cm4gKCgwLCB0eXBlc18xLnNhbWVUeXBlKSh0aGlzLnR5cGVDb25kaXRpb24sIHR5cGUpXG4gICAgICAgICAgICB8fCAoKDAsIGRlZmluaXRpb25zXzEuaXNBYnN0cmFjdFR5cGUpKHRoaXMudHlwZUNvbmRpdGlvbikgJiYgISgwLCBkZWZpbml0aW9uc18xLmlzVW5pb25UeXBlKSh0eXBlKSAmJiAoMCwgdHlwZXNfMS5pc0RpcmVjdFN1YnR5cGUpKHRoaXMudHlwZUNvbmRpdGlvbiwgdHlwZSkpKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoaW5kZW50KSB7XG4gICAgICAgIHJldHVybiAoaW5kZW50ICE9PSBudWxsICYmIGluZGVudCAhPT0gdm9pZCAwID8gaW5kZW50IDogJycpICsgYGZyYWdtZW50ICR7dGhpcy5uYW1lfSBvbiAke3RoaXMudHlwZUNvbmRpdGlvbn0ke3RoaXMuYXBwbGllZERpcmVjdGl2ZXNUb1N0cmluZygpfSAke3RoaXMuc2VsZWN0aW9uU2V0LnRvU3RyaW5nKGZhbHNlLCB0cnVlLCBpbmRlbnQpfWA7XG4gICAgfVxufVxuZXhwb3J0cy5OYW1lZEZyYWdtZW50RGVmaW5pdGlvbiA9IE5hbWVkRnJhZ21lbnREZWZpbml0aW9uO1xuY2xhc3MgTmFtZWRGcmFnbWVudHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZyYWdtZW50cyA9IG5ldyB1dGlsc18xLk1hcFdpdGhDYWNoZWRBcnJheXMoKTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhZ21lbnRzLnNpemUgPT09IDA7XG4gICAgfVxuICAgIHZhcmlhYmxlcygpIHtcbiAgICAgICAgbGV0IHZhcmlhYmxlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIHRoaXMuZnJhZ21lbnRzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICB2YXJpYWJsZXMgPSAoMCwgZGVmaW5pdGlvbnNfMS5tZXJnZVZhcmlhYmxlcykodmFyaWFibGVzLCBmcmFnbWVudC52YXJpYWJsZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgICB9XG4gICAgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYWdtZW50cy5rZXlzKCk7XG4gICAgfVxuICAgIGFkZChmcmFnbWVudCkge1xuICAgICAgICBpZiAodGhpcy5mcmFnbWVudHMuaGFzKGZyYWdtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBEdXBsaWNhdGUgZnJhZ21lbnQgbmFtZSAnJHtmcmFnbWVudH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mcmFnbWVudHMuc2V0KGZyYWdtZW50Lm5hbWUsIGZyYWdtZW50KTtcbiAgICB9XG4gICAgYWRkSWZOb3RFeGlzdChmcmFnbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZnJhZ21lbnRzLmhhcyhmcmFnbWVudC5uYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMuc2V0KGZyYWdtZW50Lm5hbWUsIGZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXliZUFwcGx5aW5nQXRUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhZ21lbnRzLnZhbHVlcygpLmZpbHRlcihmID0+IGYuY2FuQXBwbHlBdFR5cGUodHlwZSkpO1xuICAgIH1cbiAgICB3aXRob3V0KG5hbWVzKSB7XG4gICAgICAgIGlmICghbmFtZXMuc29tZShuID0+IHRoaXMuZnJhZ21lbnRzLmhhcyhuKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0ZyYWdtZW50cyA9IG5ldyBOYW1lZEZyYWdtZW50cygpO1xuICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIHRoaXMuZnJhZ21lbnRzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAoIW5hbWVzLmluY2x1ZGVzKGZyYWdtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFNlbGVjdGlvbiA9IGZyYWdtZW50LnNlbGVjdGlvblNldC5leHBhbmRGcmFnbWVudHMobmFtZXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdGcmFnbWVudCA9IHVwZGF0ZWRTZWxlY3Rpb24gPT09IGZyYWdtZW50LnNlbGVjdGlvblNldFxuICAgICAgICAgICAgICAgICAgICA/IGZyYWdtZW50XG4gICAgICAgICAgICAgICAgICAgIDogbmV3IE5hbWVkRnJhZ21lbnREZWZpbml0aW9uKGZyYWdtZW50LnNjaGVtYSgpLCBmcmFnbWVudC5uYW1lLCBmcmFnbWVudC50eXBlQ29uZGl0aW9uLCB1cGRhdGVkU2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBuZXdGcmFnbWVudHMuYWRkKG5ld0ZyYWdtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RnJhZ21lbnRzO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFnbWVudHMuZ2V0KG5hbWUpO1xuICAgIH1cbiAgICBoYXMobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFnbWVudHMuaGFzKG5hbWUpO1xuICAgIH1cbiAgICBkZWZpbml0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhZ21lbnRzLnZhbHVlcygpO1xuICAgIH1cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBmcmFnbWVudCBvZiB0aGlzLmZyYWdtZW50cy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9GcmFnbWVudERlZmluaXRpb25Ob2RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5pdGlvbnMoKS5tYXAoZiA9PiBmLnRvRnJhZ21lbnREZWZpbml0aW9uTm9kZSgpKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoaW5kZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluaXRpb25zKCkubWFwKGYgPT4gZi50b1N0cmluZyhpbmRlbnQpKS5qb2luKCdcXG5cXG4nKTtcbiAgICB9XG59XG5leHBvcnRzLk5hbWVkRnJhZ21lbnRzID0gTmFtZWRGcmFnbWVudHM7XG5jbGFzcyBGcmVlemFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0Zyb3plbiA9IGZhbHNlO1xuICAgIH1cbiAgICBmcmVlemUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0Zyb3plbigpKSB7XG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUludGVybmFscygpO1xuICAgICAgICAgICAgdGhpcy5faXNGcm96ZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVzKCk7XG4gICAgfVxuICAgIGlzRnJvemVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGcm96ZW47XG4gICAgfVxuICAgIGNsb25lSWZGcm96ZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRnJvemVuKCkgPyB0aGlzLmNsb25lKCkgOiB0aGlzLnVzKCk7XG4gICAgfVxufVxuY2xhc3MgRGVmZXJOb3JtYWxpemVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYXNzaWduZWRMYWJlbHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZGVmZXJDb25kaXRpb25zID0gbmV3IHV0aWxzXzEuU2V0TXVsdGlNYXAoKTtcbiAgICAgICAgdGhpcy51c2VkTGFiZWxzID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICBpbml0KHNlbGVjdGlvblNldCkge1xuICAgICAgICBsZXQgaGFzTm9uTGFiZWxsZWRPckNvbmRpdGlvbmFsRGVmZXJzID0gZmFsc2U7XG4gICAgICAgIGxldCBoYXNEZWZlcnMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucygpLmNvbmNhdCgpO1xuICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09ICdGcmFnbWVudFNlbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZlckFyZ3MgPSBzZWxlY3Rpb24uZWxlbWVudCgpLmRlZmVyRGlyZWN0aXZlQXJncygpO1xuICAgICAgICAgICAgICAgIGlmIChkZWZlckFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzRGVmZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZlckFyZ3MubGFiZWwgfHwgZGVmZXJBcmdzLmlmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc05vbkxhYmVsbGVkT3JDb25kaXRpb25hbERlZmVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmVyQXJncy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VkTGFiZWxzLmFkZChkZWZlckFyZ3MubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMoKS5mb3JFYWNoKChzKSA9PiBzdGFjay5wdXNoKHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBoYXNEZWZlcnMsIGhhc05vbkxhYmVsbGVkT3JDb25kaXRpb25hbERlZmVycyB9O1xuICAgIH1cbiAgICBuZXh0TGFiZWwoKSB7XG4gICAgICAgIHJldHVybiBgcXBfXyR7dGhpcy5pbmRleCsrfWA7XG4gICAgfVxuICAgIG5ld0xhYmVsKCkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdGhpcy5uZXh0TGFiZWwoKTtcbiAgICAgICAgd2hpbGUgKHRoaXMudXNlZExhYmVscy5oYXMoY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgY2FuZGlkYXRlID0gdGhpcy5uZXh0TGFiZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFzc2lnbmVkTGFiZWxzLmFkZChjYW5kaWRhdGUpO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xuICAgIH1cbiAgICByZWdpc3RlckNvbmRpdGlvbihsYWJlbCwgY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuZGVmZXJDb25kaXRpb25zLmFkZChjb25kaXRpb24ubmFtZSwgbGFiZWwpO1xuICAgIH1cbn1cbmNsYXNzIFNlbGVjdGlvblNldCBleHRlbmRzIEZyZWV6YWJsZSB7XG4gICAgY29uc3RydWN0b3IocGFyZW50VHlwZSwgZnJhZ21lbnRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGFyZW50VHlwZSA9IHBhcmVudFR5cGU7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb25zID0gbmV3IHV0aWxzXzEuTXVsdGlNYXAoKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uQ291bnQgPSAwO1xuICAgICAgICB2YWxpZGF0ZSghKDAsIGRlZmluaXRpb25zXzEuaXNMZWFmVHlwZSkocGFyZW50VHlwZSksICgpID0+IGBDYW5ub3QgaGF2ZSBzZWxlY3Rpb24gb24gbm9uLWxlYWYgdHlwZSAke3BhcmVudFR5cGV9YCk7XG4gICAgfVxuICAgIHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2VsZWN0aW9ucyhyZXZlcnNlZE9yZGVyID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWRTZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25zID0gbmV3IEFycmF5KHRoaXMuX3NlbGVjdGlvbkNvdW50KTtcbiAgICAgICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBieVJlc3BvbnNlTmFtZSBvZiB0aGlzLl9zZWxlY3Rpb25zLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzZWxlY3Rpb24gb2YgYnlSZXNwb25zZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uc1tpZHgrK10gPSBzZWxlY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FjaGVkU2VsZWN0aW9ucyA9IHNlbGVjdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSh0aGlzLl9jYWNoZWRTZWxlY3Rpb25zLCAnQ2FjaGUgc2hvdWxkIGhhdmUgYmVlbiBwb3B1bGF0ZWQnKTtcbiAgICAgICAgaWYgKHJldmVyc2VkT3JkZXIgJiYgdGhpcy5fY2FjaGVkU2VsZWN0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCByZXZlcnNlZCA9IG5ldyBBcnJheSh0aGlzLl9zZWxlY3Rpb25Db3VudCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NlbGVjdGlvbkNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXZlcnNlZFtpXSA9IHRoaXMuX2NhY2hlZFNlbGVjdGlvbnNbdGhpcy5fc2VsZWN0aW9uQ291bnQgLSBpIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV2ZXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFNlbGVjdGlvbnM7XG4gICAgfVxuICAgIHVzZWRWYXJpYWJsZXMoKSB7XG4gICAgICAgIGxldCB2YXJpYWJsZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBieVJlc3BvbnNlTmFtZSBvZiB0aGlzLl9zZWxlY3Rpb25zLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiBieVJlc3BvbnNlTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlcyA9ICgwLCBkZWZpbml0aW9uc18xLm1lcmdlVmFyaWFibGVzKSh2YXJpYWJsZXMsIHNlbGVjdGlvbi51c2VkVmFyaWFibGVzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZyYWdtZW50cykge1xuICAgICAgICAgICAgdmFyaWFibGVzID0gKDAsIGRlZmluaXRpb25zXzEubWVyZ2VWYXJpYWJsZXMpKHZhcmlhYmxlcywgdGhpcy5mcmFnbWVudHMudmFyaWFibGVzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJpYWJsZXM7XG4gICAgfVxuICAgIGNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyhjb2xsZWN0b3IpIHtcbiAgICAgICAgZm9yIChjb25zdCBieVJlc3BvbnNlTmFtZSBvZiB0aGlzLl9zZWxlY3Rpb25zLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiBieVJlc3BvbnNlTmFtZSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5jb2xsZWN0VXNlZEZyYWdtZW50TmFtZXMoY29sbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvcHRpbWl6ZShmcmFnbWVudHMpIHtcbiAgICAgICAgaWYgKCFmcmFnbWVudHMgfHwgZnJhZ21lbnRzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnRzICYmIHRoaXMuZnJhZ21lbnRzLmRlZmluaXRpb25zKCkuc29tZShkZWYgPT4gZnJhZ21lbnRzLmdldChkZWYubmFtZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpbWl6ZWQgPSBuZXcgU2VsZWN0aW9uU2V0KHRoaXMucGFyZW50VHlwZSwgZnJhZ21lbnRzKTtcbiAgICAgICAgZm9yIChjb25zdCBzZWxlY3Rpb24gb2YgdGhpcy5zZWxlY3Rpb25zKCkpIHtcbiAgICAgICAgICAgIG9wdGltaXplZC5hZGQoc2VsZWN0aW9uLm9wdGltaXplKGZyYWdtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpbWl6ZWQ7XG4gICAgfVxuICAgIGV4cGFuZEZyYWdtZW50cyhuYW1lcywgdXBkYXRlU2VsZWN0aW9uU2V0RnJhZ21lbnRzID0gdHJ1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChuYW1lcyAmJiBuYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0ZyYWdtZW50cyA9IHVwZGF0ZVNlbGVjdGlvblNldEZyYWdtZW50c1xuICAgICAgICAgICAgPyAobmFtZXMgPyAoX2EgPSB0aGlzLmZyYWdtZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLndpdGhvdXQobmFtZXMpIDogdW5kZWZpbmVkKVxuICAgICAgICAgICAgOiB0aGlzLmZyYWdtZW50cztcbiAgICAgICAgY29uc3Qgd2l0aEV4cGFuZGVkID0gbmV3IFNlbGVjdGlvblNldCh0aGlzLnBhcmVudFR5cGUsIG5ld0ZyYWdtZW50cyk7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHRoaXMuc2VsZWN0aW9ucygpKSB7XG4gICAgICAgICAgICBjb25zdCBleHBhbmRlZCA9IHNlbGVjdGlvbi5leHBhbmRGcmFnbWVudHMobmFtZXMsIHVwZGF0ZVNlbGVjdGlvblNldEZyYWdtZW50cyk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleHBhbmRlZCkpIHtcbiAgICAgICAgICAgICAgICB3aXRoRXhwYW5kZWQuYWRkQWxsKGV4cGFuZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpdGhFeHBhbmRlZC5hZGQoZXhwYW5kZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aXRoRXhwYW5kZWQ7XG4gICAgfVxuICAgIGxhenlNYXAobWFwcGVyKSB7XG4gICAgICAgIGxldCB1cGRhdGVkU2VsZWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9ucyA9IHRoaXMuc2VsZWN0aW9ucygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNlbGVjdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkID0gbWFwcGVyKHNlbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAodXBkYXRlZCAhPT0gc2VsZWN0aW9uICYmICF1cGRhdGVkU2VsZWN0aW9ucykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRTZWxlY3Rpb25zID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbGVjdGlvbnMucHVzaChzZWxlY3Rpb25zW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISF1cGRhdGVkICYmIHVwZGF0ZWRTZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZWQgaW5zdGFuY2VvZiBTZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZC5zZWxlY3Rpb25zKCkuZm9yRWFjaCgocykgPT4gdXBkYXRlZFNlbGVjdGlvbnMucHVzaChzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VsZWN0aW9ucy5wdXNoKHVwZGF0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXVwZGF0ZWRTZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvblNldCh0aGlzLnBhcmVudFR5cGUsIHRoaXMuZnJhZ21lbnRzKS5hZGRBbGwodXBkYXRlZFNlbGVjdGlvbnMpO1xuICAgIH1cbiAgICB3aXRob3V0RGVmZXIobGFiZWxzVG9SZW1vdmUpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSghdGhpcy5mcmFnbWVudHMsICdOb3QgeWV0IHN1cHBvcnRlZCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sYXp5TWFwKChzZWxlY3Rpb24pID0+IHNlbGVjdGlvbi53aXRob3V0RGVmZXIobGFiZWxzVG9SZW1vdmUpKTtcbiAgICB9XG4gICAgd2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoIXRoaXMuZnJhZ21lbnRzLCAnTm90IHlldCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF6eU1hcCgoc2VsZWN0aW9uKSA9PiBzZWxlY3Rpb24ud2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKSk7XG4gICAgfVxuICAgIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF6eU1hcCgoc2VsZWN0aW9uKSA9PiBzZWxlY3Rpb24uZmlsdGVyKHByZWRpY2F0ZSkpO1xuICAgIH1cbiAgICB3aXRob3V0RW1wdHlCcmFuY2hlcygpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZCA9IHRoaXMuZmlsdGVyKChzZWxlY3Rpb24pID0+IHsgdmFyIF9hOyByZXR1cm4gKChfYSA9IHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0VtcHR5KCkpICE9PSB0cnVlOyB9KTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWQuaXNFbXB0eSgpID8gdW5kZWZpbmVkIDogdXBkYXRlZDtcbiAgICB9XG4gICAgZnJlZXplSW50ZXJuYWxzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiB0aGlzLnNlbGVjdGlvbnMoKSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmZyZWV6ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lcmdlSW4oc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHNlbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkQWxsKHNlbGVjdGlvbnMpIHtcbiAgICAgICAgc2VsZWN0aW9ucy5mb3JFYWNoKHMgPT4gdGhpcy5hZGQocykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkKHNlbGVjdGlvbikge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKCF0aGlzLmlzRnJvemVuKCksICgpID0+IGBDYW5ub3QgYWRkIHRvIGZyb3plbiBzZWxlY3Rpb246ICR7dGhpc31gKTtcbiAgICAgICAgY29uc3QgdG9BZGQgPSBzZWxlY3Rpb24udXBkYXRlRm9yQWRkaW5nVG8odGhpcyk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRvQWRkLmtleSgpO1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuX3NlbGVjdGlvbnMuZ2V0KGtleSk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBleGlzdGluZ1NlbGVjdGlvbiBvZiBleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1NlbGVjdGlvbi5raW5kID09PSB0b0FkZC5raW5kICYmIGhhdmVTYW1lRGlyZWN0aXZlcyhleGlzdGluZ1NlbGVjdGlvbi5lbGVtZW50KCksIHRvQWRkLmVsZW1lbnQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvQWRkLnNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdTZWxlY3Rpb24uc2VsZWN0aW9uU2V0Lm1lcmdlSW4odG9BZGQuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdTZWxlY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NlbGVjdGlvbnMuYWRkKGtleSwgdG9BZGQpO1xuICAgICAgICArK3RoaXMuX3NlbGVjdGlvbkNvdW50O1xuICAgICAgICB0aGlzLl9jYWNoZWRTZWxlY3Rpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdG9BZGQ7XG4gICAgfVxuICAgIGFkZFBhdGgocGF0aCwgb25QYXRoRW5kKSB7XG4gICAgICAgIGxldCBwcmV2aW91c1NlbGVjdGlvbnMgPSB0aGlzO1xuICAgICAgICBsZXQgY3VycmVudFNlbGVjdGlvbnMgPSB0aGlzO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgcGF0aCkge1xuICAgICAgICAgICAgdmFsaWRhdGUoY3VycmVudFNlbGVjdGlvbnMsICgpID0+IGBDYW5ub3QgYXBwbHkgc2VsZWN0aW9uICR7ZWxlbWVudH0gdG8gbm9uLXNlbGVjdGFibGUgcGFyZW50IHR5cGUgXCIke3ByZXZpb3VzU2VsZWN0aW9ucy5wYXJlbnRUeXBlfVwiYCk7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9ucy5hZGQoc2VsZWN0aW9uT2ZFbGVtZW50KGVsZW1lbnQpKTtcbiAgICAgICAgICAgIHByZXZpb3VzU2VsZWN0aW9ucyA9IGN1cnJlbnRTZWxlY3Rpb25zO1xuICAgICAgICAgICAgY3VycmVudFNlbGVjdGlvbnMgPSBtZXJnZWRTZWxlY3Rpb24uc2VsZWN0aW9uU2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvblBhdGhFbmQpIHtcbiAgICAgICAgICAgIG9uUGF0aEVuZChjdXJyZW50U2VsZWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkU2VsZWN0aW9uU2V0Tm9kZShub2RlLCB2YXJpYWJsZURlZmluaXRpb25zLCBmaWVsZEFjY2Vzc29yID0gKHR5cGUsIG5hbWUpID0+IHR5cGUuZmllbGQobmFtZSkpIHtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBzZWxlY3Rpb25Ob2RlIG9mIG5vZGUuc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5hZGRTZWxlY3Rpb25Ob2RlKHNlbGVjdGlvbk5vZGUsIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGZpZWxkQWNjZXNzb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFNlbGVjdGlvbk5vZGUobm9kZSwgdmFyaWFibGVEZWZpbml0aW9ucywgZmllbGRBY2Nlc3NvciA9ICh0eXBlLCBuYW1lKSA9PiB0eXBlLmZpZWxkKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuYWRkKHRoaXMubm9kZVRvU2VsZWN0aW9uKG5vZGUsIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGZpZWxkQWNjZXNzb3IpKTtcbiAgICB9XG4gICAgbm9kZVRvU2VsZWN0aW9uKG5vZGUsIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGZpZWxkQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHNlbGVjdGlvbjtcbiAgICAgICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuRklFTEQ6XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGZpZWxkQWNjZXNzb3IodGhpcy5wYXJlbnRUeXBlLCBub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlKGRlZmluaXRpb24sICgpID0+IGBDYW5ub3QgcXVlcnkgZmllbGQgXCIke25vZGUubmFtZS52YWx1ZX1cIiBvbiB0eXBlIFwiJHt0aGlzLnBhcmVudFR5cGV9XCIuYCwgdGhpcy5wYXJlbnRUeXBlLnNvdXJjZUFTVCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9ICgwLCBkZWZpbml0aW9uc18xLmJhc2VUeXBlKShkZWZpbml0aW9uLnR5cGUpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IG5ldyBGaWVsZFNlbGVjdGlvbihuZXcgRmllbGQoZGVmaW5pdGlvbiwgKDAsIHZhbHVlc18xLmFyZ3VtZW50c0Zyb21BU1QpKGRlZmluaXRpb24uY29vcmRpbmF0ZSwgbm9kZS5hcmd1bWVudHMsIGRlZmluaXRpb24pLCB2YXJpYWJsZURlZmluaXRpb25zLCAoX2EgPSBub2RlLmFsaWFzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWUpLCAoMCwgZGVmaW5pdGlvbnNfMS5pc0xlYWZUeXBlKSh0eXBlKSA/IHVuZGVmaW5lZCA6IG5ldyBTZWxlY3Rpb25TZXQodHlwZSwgdGhpcy5mcmFnbWVudHMpKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGUoc2VsZWN0aW9uLnNlbGVjdGlvblNldCwgKCkgPT4gYFVuZXhwZWN0ZWQgc2VsZWN0aW9uIHNldCBvbiBsZWFmIGZpZWxkIFwiJHtzZWxlY3Rpb24uZWxlbWVudCgpfVwiYCwgc2VsZWN0aW9uLmVsZW1lbnQoKS5kZWZpbml0aW9uLnNvdXJjZUFTVCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQuYWRkU2VsZWN0aW9uU2V0Tm9kZShub2RlLnNlbGVjdGlvblNldCwgdmFyaWFibGVEZWZpbml0aW9ucywgZmllbGRBY2Nlc3Nvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG5ldyBGcmFnbWVudEVsZW1lbnQodGhpcy5wYXJlbnRUeXBlLCAoX2IgPSBub2RlLnR5cGVDb25kaXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24oZWxlbWVudCwgbmV3IFNlbGVjdGlvblNldChlbGVtZW50LnR5cGVDb25kaXRpb24gPyBlbGVtZW50LnR5cGVDb25kaXRpb24gOiBlbGVtZW50LnBhcmVudFR5cGUsIHRoaXMuZnJhZ21lbnRzKSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNlbGVjdGlvblNldC5hZGRTZWxlY3Rpb25TZXROb2RlKG5vZGUuc2VsZWN0aW9uU2V0LCB2YXJpYWJsZURlZmluaXRpb25zLCBmaWVsZEFjY2Vzc29yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50TmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZSh0aGlzLmZyYWdtZW50cywgKCkgPT4gYENhbm5vdCBmaW5kIGZyYWdtZW50IG5hbWUgXCIke2ZyYWdtZW50TmFtZX1cIiAobm8gZnJhZ21lbnRzIHdlcmUgcHJvdmlkZWQpYCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uID0gbmV3IEZyYWdtZW50U3ByZWFkU2VsZWN0aW9uKHRoaXMucGFyZW50VHlwZSwgdGhpcy5mcmFnbWVudHMsIGZyYWdtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYWRkRGlyZWN0aXZlTm9kZXNUb0VsZW1lbnQobm9kZS5kaXJlY3RpdmVzLCBzZWxlY3Rpb24uZWxlbWVudCgpKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgICB9XG4gICAgZXF1YWxzKHRoYXQpIHtcbiAgICAgICAgaWYgKHRoaXMgPT09IHRoYXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25zLnNpemUgIT09IHRoYXQuX3NlbGVjdGlvbnMuc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdGhpc1NlbGVjdGlvbnNdIG9mIHRoaXMuX3NlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoYXRTZWxlY3Rpb25zID0gdGhhdC5fc2VsZWN0aW9ucy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmICghdGhhdFNlbGVjdGlvbnNcbiAgICAgICAgICAgICAgICB8fCB0aGlzU2VsZWN0aW9ucy5sZW5ndGggIT09IHRoYXRTZWxlY3Rpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgIHx8ICF0aGlzU2VsZWN0aW9ucy5ldmVyeSh0aGlzU2VsZWN0aW9uID0+IHRoYXRTZWxlY3Rpb25zLnNvbWUodGhhdFNlbGVjdGlvbiA9PiB0aGlzU2VsZWN0aW9uLmVxdWFscyh0aGF0U2VsZWN0aW9uKSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb250YWlucyh0aGF0KSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25zLnNpemUgPCB0aGF0Ll9zZWxlY3Rpb25zLnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHRoYXRTZWxlY3Rpb25zXSBvZiB0aGF0Ll9zZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzU2VsZWN0aW9ucyA9IHRoaXMuX3NlbGVjdGlvbnMuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoIXRoaXNTZWxlY3Rpb25zXG4gICAgICAgICAgICAgICAgfHwgKHRoaXNTZWxlY3Rpb25zLmxlbmd0aCA8IHRoYXRTZWxlY3Rpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB8fCAhdGhhdFNlbGVjdGlvbnMuZXZlcnkodGhhdFNlbGVjdGlvbiA9PiB0aGlzU2VsZWN0aW9ucy5zb21lKHRoaXNTZWxlY3Rpb24gPT4gdGhpc1NlbGVjdGlvbi5jb250YWlucyh0aGF0U2VsZWN0aW9uKSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIHZhbGlkYXRlKCF0aGlzLmlzRW1wdHkoKSwgKCkgPT4gYEludmFsaWQgZW1wdHkgc2VsZWN0aW9uIHNldGApO1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiB0aGlzLnNlbGVjdGlvbnMoKSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbnMuc2l6ZSA9PT0gMDtcbiAgICB9XG4gICAgdG9TZWxlY3Rpb25TZXROb2RlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuU0VMRUNUSU9OX1NFVCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25zOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuRklFTEQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJy4uLicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuU0VMRUNUSU9OX1NFVCxcbiAgICAgICAgICAgIHNlbGVjdGlvbnM6IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb25zSW5QcmludE9yZGVyKCksIHMgPT4gcy50b1NlbGVjdGlvbk5vZGUoKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2VsZWN0aW9uc0luUHJpbnRPcmRlcigpIHtcbiAgICAgICAgY29uc3QgdHlwZW5hbWVTZWxlY3Rpb24gPSB0aGlzLl9zZWxlY3Rpb25zLmdldChkZWZpbml0aW9uc18xLnR5cGVuYW1lRmllbGROYW1lKTtcbiAgICAgICAgY29uc3QgaXNOb25BbGlhc2VkVHlwZW5hbWVTZWxlY3Rpb24gPSAocykgPT4gcy5raW5kID09PSAnRmllbGRTZWxlY3Rpb24nICYmICFzLmZpZWxkLmFsaWFzICYmIHMuZmllbGQubmFtZSA9PT0gZGVmaW5pdGlvbnNfMS50eXBlbmFtZUZpZWxkTmFtZTtcbiAgICAgICAgaWYgKHR5cGVuYW1lU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW5hbWVTZWxlY3Rpb24uY29uY2F0KHRoaXMuc2VsZWN0aW9ucygpLmZpbHRlcihzID0+ICFpc05vbkFsaWFzZWRUeXBlbmFtZVNlbGVjdGlvbihzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9ucygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvT3BlcmF0aW9uUGF0aHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvT3BlcmF0aW9uUGF0aHNJbnRlcm5hbChbXSk7XG4gICAgfVxuICAgIHRvT3BlcmF0aW9uUGF0aHNJbnRlcm5hbChwYXJlbnRQYXRocykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25zKCkuZmxhdE1hcCgoc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkUGF0aHMgPSBwYXJlbnRQYXRocy5tYXAocGF0aCA9PiBwYXRoLmNvbmNhdChzZWxlY3Rpb24uZWxlbWVudCgpKSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnNlbGVjdGlvblNldFxuICAgICAgICAgICAgICAgID8gc2VsZWN0aW9uLnNlbGVjdGlvblNldC50b09wZXJhdGlvblBhdGhzSW50ZXJuYWwodXBkYXRlZFBhdGhzKVxuICAgICAgICAgICAgICAgIDogdXBkYXRlZFBhdGhzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yRWFjaEVsZW1lbnQoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuc2VsZWN0aW9ucygpLmNvbmNhdCgpO1xuICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICBjYWxsYmFjayhzZWxlY3Rpb24uZWxlbWVudCgpKTtcbiAgICAgICAgICAgIChfYSA9IHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZWxlY3Rpb25zKHRydWUpLmZvckVhY2goKHMpID0+IHN0YWNrLnB1c2gocykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgU2VsZWN0aW9uU2V0KHRoaXMucGFyZW50VHlwZSk7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHRoaXMuc2VsZWN0aW9ucygpKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRTZWxlY3Rpb24gPSBzZWxlY3Rpb24uY2xvbmUoKTtcbiAgICAgICAgICAgIGNsb25lZC5fc2VsZWN0aW9ucy5hZGQoY2xvbmVkU2VsZWN0aW9uLmtleSgpLCBjbG9uZWRTZWxlY3Rpb24pO1xuICAgICAgICAgICAgKytjbG9uZWQuX3NlbGVjdGlvbkNvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuICAgIHRvT3BlcmF0aW9uU3RyaW5nKHJvb3RLaW5kLCB2YXJpYWJsZURlZmluaXRpb25zLCBvcGVyYXRpb25OYW1lLCBleHBhbmRGcmFnbWVudHMgPSBmYWxzZSwgcHJldHR5UHJpbnQgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9IHByZXR0eVByaW50ID8gJycgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50c0RlZmluaXRpb25zID0gIWV4cGFuZEZyYWdtZW50cyAmJiB0aGlzLmZyYWdtZW50cyAmJiAhdGhpcy5mcmFnbWVudHMuaXNFbXB0eSgpXG4gICAgICAgICAgICA/IHRoaXMuZnJhZ21lbnRzLnRvU3RyaW5nKGluZGVudCkgKyBcIlxcblxcblwiXG4gICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIGlmIChyb290S2luZCA9PSBcInF1ZXJ5XCIgJiYgIW9wZXJhdGlvbk5hbWUgJiYgdmFyaWFibGVEZWZpbml0aW9ucy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcmFnbWVudHNEZWZpbml0aW9ucyArIHRoaXMudG9TdHJpbmcoZXhwYW5kRnJhZ21lbnRzLCB0cnVlLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVBbmRWYXJpYWJsZXMgPSBvcGVyYXRpb25OYW1lXG4gICAgICAgICAgICA/IFwiIFwiICsgKG9wZXJhdGlvbk5hbWUgKyAodmFyaWFibGVEZWZpbml0aW9ucy5pc0VtcHR5KCkgPyBcIlwiIDogdmFyaWFibGVEZWZpbml0aW9ucy50b1N0cmluZygpKSlcbiAgICAgICAgICAgIDogKHZhcmlhYmxlRGVmaW5pdGlvbnMuaXNFbXB0eSgpID8gXCJcIiA6IFwiIFwiICsgdmFyaWFibGVEZWZpbml0aW9ucy50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50c0RlZmluaXRpb25zICsgcm9vdEtpbmQgKyBuYW1lQW5kVmFyaWFibGVzICsgXCIgXCIgKyB0aGlzLnRvU3RyaW5nKGV4cGFuZEZyYWdtZW50cywgdHJ1ZSwgaW5kZW50KTtcbiAgICB9XG4gICAgdG9TdHJpbmcoZXhwYW5kRnJhZ21lbnRzID0gdHJ1ZSwgaW5jbHVkZUV4dGVybmFsQnJhY2tldHMgPSB0cnVlLCBpbmRlbnQpIHtcbiAgICAgICAgaWYgKGluZGVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25zVG9TdHJpbmcgPSB0aGlzLnNlbGVjdGlvbnMoKS5tYXAocyA9PiBzLnRvU3RyaW5nKGV4cGFuZEZyYWdtZW50cykpLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIHJldHVybiBpbmNsdWRlRXh0ZXJuYWxCcmFja2V0cyA/ICd7ICcgKyBzZWxlY3Rpb25zVG9TdHJpbmcgKyAnIH0nIDogc2VsZWN0aW9uc1RvU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uSW5kZW50ID0gaW5jbHVkZUV4dGVybmFsQnJhY2tldHMgPyBpbmRlbnQgKyBcIiAgXCIgOiBpbmRlbnQ7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25zVG9TdHJpbmcgPSB0aGlzLnNlbGVjdGlvbnMoKS5tYXAocyA9PiBzLnRvU3RyaW5nKGV4cGFuZEZyYWdtZW50cywgc2VsZWN0aW9uSW5kZW50KSkuam9pbignXFxuJyk7XG4gICAgICAgICAgICByZXR1cm4gaW5jbHVkZUV4dGVybmFsQnJhY2tldHNcbiAgICAgICAgICAgICAgICA/ICd7XFxuJyArIHNlbGVjdGlvbnNUb1N0cmluZyArICdcXG4nICsgaW5kZW50ICsgJ30nXG4gICAgICAgICAgICAgICAgOiBzZWxlY3Rpb25zVG9TdHJpbmc7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNlbGVjdGlvblNldCA9IFNlbGVjdGlvblNldDtcbmZ1bmN0aW9uIGFsbEZpZWxkRGVmaW5pdGlvbnNJblNlbGVjdGlvblNldChzZWxlY3Rpb24pIHtcbiAgICBjb25zdCBzdGFjayA9IEFycmF5LmZyb20oc2VsZWN0aW9uLnNlbGVjdGlvbnMoKSk7XG4gICAgY29uc3QgYWxsRmllbGRzID0gW107XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gc3RhY2sucG9wKCk7XG4gICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkU2VsZWN0aW9uJykge1xuICAgICAgICAgICAgYWxsRmllbGRzLnB1c2goc2VsZWN0aW9uLmZpZWxkLmRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKC4uLnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucygpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWxsRmllbGRzO1xufVxuZXhwb3J0cy5hbGxGaWVsZERlZmluaXRpb25zSW5TZWxlY3Rpb25TZXQgPSBhbGxGaWVsZERlZmluaXRpb25zSW5TZWxlY3Rpb25TZXQ7XG5mdW5jdGlvbiBzZWxlY3Rpb25TZXRPZkVsZW1lbnQoZWxlbWVudCwgc3ViU2VsZWN0aW9uKSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gbmV3IFNlbGVjdGlvblNldChlbGVtZW50LnBhcmVudFR5cGUpO1xuICAgIHNlbGVjdGlvblNldC5hZGQoc2VsZWN0aW9uT2ZFbGVtZW50KGVsZW1lbnQsIHN1YlNlbGVjdGlvbikpO1xuICAgIHJldHVybiBzZWxlY3Rpb25TZXQ7XG59XG5leHBvcnRzLnNlbGVjdGlvblNldE9mRWxlbWVudCA9IHNlbGVjdGlvblNldE9mRWxlbWVudDtcbmZ1bmN0aW9uIHNlbGVjdGlvbk9mRWxlbWVudChlbGVtZW50LCBzdWJTZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gZWxlbWVudC5raW5kID09PSAnRmllbGQnID8gbmV3IEZpZWxkU2VsZWN0aW9uKGVsZW1lbnQsIHN1YlNlbGVjdGlvbikgOiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24oZWxlbWVudCwgc3ViU2VsZWN0aW9uKTtcbn1cbmV4cG9ydHMuc2VsZWN0aW9uT2ZFbGVtZW50ID0gc2VsZWN0aW9uT2ZFbGVtZW50O1xuY2xhc3MgRmllbGRTZWxlY3Rpb24gZXh0ZW5kcyBGcmVlemFibGUge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBpbml0aWFsU2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5raW5kID0gJ0ZpZWxkU2VsZWN0aW9uJztcbiAgICAgICAgY29uc3QgdHlwZSA9ICgwLCBkZWZpbml0aW9uc18xLmJhc2VUeXBlKShmaWVsZC5kZWZpbml0aW9uLnR5cGUpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNldCA9ICgwLCBkZWZpbml0aW9uc18xLmlzTGVhZlR5cGUpKHR5cGUpID8gdW5kZWZpbmVkIDogKGluaXRpYWxTZWxlY3Rpb25TZXQgPyBpbml0aWFsU2VsZWN0aW9uU2V0LmNsb25lSWZGcm96ZW4oKSA6IG5ldyBTZWxlY3Rpb25TZXQodHlwZSkpO1xuICAgIH1cbiAgICB1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCgpLnJlc3BvbnNlTmFtZSgpO1xuICAgIH1cbiAgICBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZDtcbiAgICB9XG4gICAgdXNlZFZhcmlhYmxlcygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuICgwLCBkZWZpbml0aW9uc18xLm1lcmdlVmFyaWFibGVzKSh0aGlzLmVsZW1lbnQoKS52YXJpYWJsZXMoKSwgKF9iID0gKF9hID0gdGhpcy5zZWxlY3Rpb25TZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51c2VkVmFyaWFibGVzKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKTtcbiAgICB9XG4gICAgY29sbGVjdFVzZWRGcmFnbWVudE5hbWVzKGNvbGxlY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0LmNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyhjb2xsZWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wdGltaXplKGZyYWdtZW50cykge1xuICAgICAgICBjb25zdCBvcHRpbWl6ZWRTZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvblNldCA/IHRoaXMuc2VsZWN0aW9uU2V0Lm9wdGltaXplKGZyYWdtZW50cykgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGZpZWxkQmFzZVR5cGUgPSAoMCwgZGVmaW5pdGlvbnNfMS5iYXNlVHlwZSkodGhpcy5maWVsZC5kZWZpbml0aW9uLnR5cGUpO1xuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNDb21wb3NpdGVUeXBlKShmaWVsZEJhc2VUeXBlKSAmJiBvcHRpbWl6ZWRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIGZyYWdtZW50cy5tYXliZUFwcGx5aW5nQXRUeXBlKGZpZWxkQmFzZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGltaXplZFNlbGVjdGlvbi5lcXVhbHMoY2FuZGlkYXRlLnNlbGVjdGlvblNldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhZ21lbnRTZWxlY3Rpb24gPSBuZXcgRnJhZ21lbnRTcHJlYWRTZWxlY3Rpb24oZmllbGRCYXNlVHlwZSwgZnJhZ21lbnRzLCBjYW5kaWRhdGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmllbGRTZWxlY3Rpb24odGhpcy5maWVsZCwgc2VsZWN0aW9uU2V0T2YoZmllbGRCYXNlVHlwZSwgZnJhZ21lbnRTZWxlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2V0ID09PSBvcHRpbWl6ZWRTZWxlY3Rpb25cbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiBuZXcgRmllbGRTZWxlY3Rpb24odGhpcy5maWVsZCwgb3B0aW1pemVkU2VsZWN0aW9uKTtcbiAgICB9XG4gICAgZmlsdGVyKHByZWRpY2F0ZSkge1xuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlZGljYXRlKHRoaXMpID8gdGhpcyA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cGRhdGVkU2VsZWN0aW9uU2V0ID0gdGhpcy5zZWxlY3Rpb25TZXQuZmlsdGVyKHByZWRpY2F0ZSk7XG4gICAgICAgIGNvbnN0IHRoaXNXaXRoRmlsdGVyZWRTZWxlY3Rpb25TZXQgPSB0aGlzLnNlbGVjdGlvblNldCA9PT0gdXBkYXRlZFNlbGVjdGlvblNldFxuICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBGaWVsZFNlbGVjdGlvbih0aGlzLmZpZWxkLCB1cGRhdGVkU2VsZWN0aW9uU2V0KTtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh0aGlzV2l0aEZpbHRlcmVkU2VsZWN0aW9uU2V0KSA/IHRoaXNXaXRoRmlsdGVyZWRTZWxlY3Rpb25TZXQgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZyZWV6ZUludGVybmFscygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLnNlbGVjdGlvblNldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZyZWV6ZSgpO1xuICAgIH1cbiAgICBleHBhbmRGcmFnbWVudHMobmFtZXMsIHVwZGF0ZVNlbGVjdGlvblNldEZyYWdtZW50cyA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgZXhwYW5kZWRTZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvblNldCA/IHRoaXMuc2VsZWN0aW9uU2V0LmV4cGFuZEZyYWdtZW50cyhuYW1lcywgdXBkYXRlU2VsZWN0aW9uU2V0RnJhZ21lbnRzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2V0ID09PSBleHBhbmRlZFNlbGVjdGlvblxuICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBGaWVsZFNlbGVjdGlvbih0aGlzLmZpZWxkLCBleHBhbmRlZFNlbGVjdGlvbik7XG4gICAgfVxuICAgIGZpZWxkQXJndW1lbnRzVG9BU1QoKSB7XG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLmZpZWxkLmFyZ3MpO1xuICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKChbbiwgdl0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuQVJHVU1FTlQsXG4gICAgICAgICAgICAgICAgbmFtZTogeyBraW5kOiBncmFwaHFsXzEuS2luZC5OQU1FLCB2YWx1ZTogbiB9LFxuICAgICAgICAgICAgICAgIHZhbHVlOiAoMCwgdmFsdWVzXzEudmFsdWVUb0FTVCkodiwgdGhpcy5maWVsZC5kZWZpbml0aW9uLmFyZ3VtZW50KG4pLnR5cGUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuZmllbGQudmFsaWRhdGUoKTtcbiAgICAgICAgdmFsaWRhdGUoISh0aGlzLnNlbGVjdGlvblNldCAmJiB0aGlzLnNlbGVjdGlvblNldC5pc0VtcHR5KCkpLCAoKSA9PiBgSW52YWxpZCBlbXB0eSBzZWxlY3Rpb24gc2V0IGZvciBmaWVsZCBcIiR7dGhpcy5maWVsZC5kZWZpbml0aW9uLmNvb3JkaW5hdGV9XCIgb2Ygbm9uLWxlYWYgdHlwZSAke3RoaXMuZmllbGQuZGVmaW5pdGlvbi50eXBlfWAsIHRoaXMuZmllbGQuZGVmaW5pdGlvbi5zb3VyY2VBU1QpO1xuICAgICAgICAoX2EgPSB0aGlzLnNlbGVjdGlvblNldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbGlkYXRlKCk7XG4gICAgfVxuICAgIHVwZGF0ZUZvckFkZGluZ1RvKHNlbGVjdGlvblNldCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGaWVsZCA9IHRoaXMuZmllbGQudXBkYXRlRm9yQWRkaW5nVG8oc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgPT09IHVwZGF0ZWRGaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmVJZkZyb3plbigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRCYXNlVHlwZSA9ICgwLCBkZWZpbml0aW9uc18xLmJhc2VUeXBlKSh1cGRhdGVkRmllbGQuZGVmaW5pdGlvbi50eXBlKTtcbiAgICAgICAgbGV0IHVwZGF0ZWRTZWxlY3Rpb25TZXQ7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblNldCAmJiB0aGlzLnNlbGVjdGlvblNldC5wYXJlbnRUeXBlICE9PSB1cGRhdGVkQmFzZVR5cGUpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFzc2VydCkoKDAsIGRlZmluaXRpb25zXzEuaXNDb21wb3NpdGVUeXBlKSh1cGRhdGVkQmFzZVR5cGUpLCBgRXhwZWN0ZWQgJHt1cGRhdGVkQmFzZVR5cGUuY29vcmRpbmF0ZX0gdG8gYmUgY29tcG9zaXRlIGJ1dCAke3VwZGF0ZWRCYXNlVHlwZS5raW5kfWApO1xuICAgICAgICAgICAgdXBkYXRlZFNlbGVjdGlvblNldCA9IG5ldyBTZWxlY3Rpb25TZXQodXBkYXRlZEJhc2VUeXBlKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHRoaXMuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMoKSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRTZWxlY3Rpb25TZXQuYWRkKHNlbGVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVkU2VsZWN0aW9uU2V0ID0gKF9hID0gdGhpcy5zZWxlY3Rpb25TZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9uZUlmRnJvemVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFNlbGVjdGlvbih1cGRhdGVkRmllbGQsIHVwZGF0ZWRTZWxlY3Rpb25TZXQpO1xuICAgIH1cbiAgICB0b1NlbGVjdGlvbk5vZGUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWxpYXMgPSB0aGlzLmZpZWxkLmFsaWFzID8geyBraW5kOiBncmFwaHFsXzEuS2luZC5OQU1FLCB2YWx1ZTogdGhpcy5maWVsZC5hbGlhcywgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkZJRUxELFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZmllbGQubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlhcyxcbiAgICAgICAgICAgIGFyZ3VtZW50czogdGhpcy5maWVsZEFyZ3VtZW50c1RvQVNUKCksXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLmVsZW1lbnQoKS5hcHBsaWVkRGlyZWN0aXZlc1RvRGlyZWN0aXZlTm9kZXMoKSxcbiAgICAgICAgICAgIHNlbGVjdGlvblNldDogKF9hID0gdGhpcy5zZWxlY3Rpb25TZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1NlbGVjdGlvblNldE5vZGUoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICB3aXRoVXBkYXRlZFN1YlNlbGVjdGlvbihuZXdTdWJTZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZFNlbGVjdGlvbih0aGlzLmZpZWxkLCBuZXdTdWJTZWxlY3Rpb24pO1xuICAgIH1cbiAgICBlcXVhbHModGhhdCkge1xuICAgICAgICBpZiAodGhpcyA9PT0gdGhhdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhhdCBpbnN0YW5jZW9mIEZpZWxkU2VsZWN0aW9uKSB8fCAhdGhpcy5maWVsZC5lcXVhbHModGhhdC5maWVsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoYXQuc2VsZWN0aW9uU2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIXRoYXQuc2VsZWN0aW9uU2V0ICYmIHRoaXMuc2VsZWN0aW9uU2V0LmVxdWFscyh0aGF0LnNlbGVjdGlvblNldCk7XG4gICAgfVxuICAgIGNvbnRhaW5zKHRoYXQpIHtcbiAgICAgICAgaWYgKCEodGhhdCBpbnN0YW5jZW9mIEZpZWxkU2VsZWN0aW9uKSB8fCAhdGhpcy5maWVsZC5lcXVhbHModGhhdC5maWVsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoYXQuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISF0aGlzLnNlbGVjdGlvblNldCAmJiB0aGlzLnNlbGVjdGlvblNldC5jb250YWlucyh0aGF0LnNlbGVjdGlvblNldCk7XG4gICAgfVxuICAgIG5hbWVkRnJhZ21lbnRzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNlbGVjdGlvblNldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZyYWdtZW50cztcbiAgICB9XG4gICAgd2l0aG91dERlZmVyKGxhYmVsc1RvUmVtb3ZlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFN1YlNlbGVjdGlvbnMgPSAoX2EgPSB0aGlzLnNlbGVjdGlvblNldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLndpdGhvdXREZWZlcihsYWJlbHNUb1JlbW92ZSk7XG4gICAgICAgIHJldHVybiB1cGRhdGVkU3ViU2VsZWN0aW9ucyA9PT0gdGhpcy5zZWxlY3Rpb25TZXRcbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiBuZXcgRmllbGRTZWxlY3Rpb24odGhpcy5maWVsZCwgdXBkYXRlZFN1YlNlbGVjdGlvbnMpO1xuICAgIH1cbiAgICB3aXRoTm9ybWFsaXplZERlZmVyKG5vcm1hbGl6ZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB1cGRhdGVkU3ViU2VsZWN0aW9ucyA9IChfYSA9IHRoaXMuc2VsZWN0aW9uU2V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eud2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRTdWJTZWxlY3Rpb25zID09PSB0aGlzLnNlbGVjdGlvblNldFxuICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBGaWVsZFNlbGVjdGlvbih0aGlzLmZpZWxkLCB1cGRhdGVkU3ViU2VsZWN0aW9ucyk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZpZWxkU2VsZWN0aW9uKHRoaXMuZmllbGQsIHRoaXMuc2VsZWN0aW9uU2V0LmNsb25lKCkpO1xuICAgIH1cbiAgICB0b1N0cmluZyhleHBhbmRGcmFnbWVudHMgPSB0cnVlLCBpbmRlbnQpIHtcbiAgICAgICAgcmV0dXJuIChpbmRlbnQgIT09IG51bGwgJiYgaW5kZW50ICE9PSB2b2lkIDAgPyBpbmRlbnQgOiAnJykgKyB0aGlzLmZpZWxkICsgKHRoaXMuc2VsZWN0aW9uU2V0ID8gJyAnICsgdGhpcy5zZWxlY3Rpb25TZXQudG9TdHJpbmcoZXhwYW5kRnJhZ21lbnRzLCB0cnVlLCBpbmRlbnQpIDogJycpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmllbGRTZWxlY3Rpb24gPSBGaWVsZFNlbGVjdGlvbjtcbmNsYXNzIEZyYWdtZW50U2VsZWN0aW9uIGV4dGVuZHMgRnJlZXphYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5raW5kID0gJ0ZyYWdtZW50U2VsZWN0aW9uJztcbiAgICB9XG4gICAgdXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YWxpZGF0ZURlZmVyQW5kU3RyZWFtKCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KCkuaGFzRGVmZXIoKSB8fCB0aGlzLmVsZW1lbnQoKS5oYXNTdHJlYW0oKSkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hRGVmID0gdGhpcy5lbGVtZW50KCkuc2NoZW1hKCkuc2NoZW1hRGVmaW5pdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSB0aGlzLmVsZW1lbnQoKS5wYXJlbnRUeXBlO1xuICAgICAgICAgICAgdmFsaWRhdGUoc2NoZW1hRGVmLnJvb3RUeXBlKCdtdXRhdGlvbicpICE9PSBwYXJlbnRUeXBlICYmIHNjaGVtYURlZi5yb290VHlwZSgnc3Vic2NyaXB0aW9uJykgIT09IHBhcmVudFR5cGUsICgpID0+IHsgdmFyIF9hOyByZXR1cm4gYFRoZSBAZGVmZXIgYW5kIEBzdHJlYW0gZGlyZWN0aXZlcyBjYW5ub3QgYmUgdXNlZCBvbiAkeyhfYSA9IHNjaGVtYURlZi5yb290cygpLmZpbHRlcigodCkgPT4gdC50eXBlID09PSBwYXJlbnRUeXBlKS5wb3AoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJvb3RLaW5kfSByb290IHR5cGUgXCIke3BhcmVudFR5cGV9XCJgOyB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1c2VkVmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEubWVyZ2VWYXJpYWJsZXMpKHRoaXMuZWxlbWVudCgpLnZhcmlhYmxlcygpLCB0aGlzLnNlbGVjdGlvblNldC51c2VkVmFyaWFibGVzKCkpO1xuICAgIH1cbiAgICBmaWx0ZXIocHJlZGljYXRlKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IHRoaXMuc2VsZWN0aW9uU2V0O1xuICAgICAgICBjb25zdCB1cGRhdGVkU2VsZWN0aW9uU2V0ID0gc2VsZWN0aW9uU2V0LmZpbHRlcihwcmVkaWNhdGUpO1xuICAgICAgICBjb25zdCB0aGlzV2l0aEZpbHRlcmVkU2VsZWN0aW9uU2V0ID0gdXBkYXRlZFNlbGVjdGlvblNldCA9PT0gc2VsZWN0aW9uU2V0XG4gICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgIDogbmV3IElubGluZUZyYWdtZW50U2VsZWN0aW9uKHRoaXMuZWxlbWVudCgpLCB1cGRhdGVkU2VsZWN0aW9uU2V0KTtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh0aGlzV2l0aEZpbHRlcmVkU2VsZWN0aW9uU2V0KSA/IHRoaXNXaXRoRmlsdGVyZWRTZWxlY3Rpb25TZXQgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZyZWV6ZUludGVybmFscygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXQuZnJlZXplKCk7XG4gICAgfVxuICAgIGVxdWFscyh0aGF0KSB7XG4gICAgICAgIGlmICh0aGlzID09PSB0aGF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoYXQgaW5zdGFuY2VvZiBGcmFnbWVudFNlbGVjdGlvbilcbiAgICAgICAgICAgICYmIHRoaXMuZWxlbWVudCgpLmVxdWFscyh0aGF0LmVsZW1lbnQoKSlcbiAgICAgICAgICAgICYmIHRoaXMuc2VsZWN0aW9uU2V0LmVxdWFscyh0aGF0LnNlbGVjdGlvblNldCk7XG4gICAgfVxuICAgIGNvbnRhaW5zKHRoYXQpIHtcbiAgICAgICAgcmV0dXJuICh0aGF0IGluc3RhbmNlb2YgRnJhZ21lbnRTZWxlY3Rpb24pXG4gICAgICAgICAgICAmJiB0aGlzLmVsZW1lbnQoKS5lcXVhbHModGhhdC5lbGVtZW50KCkpXG4gICAgICAgICAgICAmJiB0aGlzLnNlbGVjdGlvblNldC5jb250YWlucyh0aGF0LnNlbGVjdGlvblNldCk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IElubGluZUZyYWdtZW50U2VsZWN0aW9uKHRoaXMuZWxlbWVudCgpLCB0aGlzLnNlbGVjdGlvblNldC5jbG9uZSgpKTtcbiAgICB9XG59XG5leHBvcnRzLkZyYWdtZW50U2VsZWN0aW9uID0gRnJhZ21lbnRTZWxlY3Rpb247XG5jbGFzcyBJbmxpbmVGcmFnbWVudFNlbGVjdGlvbiBleHRlbmRzIEZyYWdtZW50U2VsZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihmcmFnbWVudEVsZW1lbnQsIGluaXRpYWxTZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudEVsZW1lbnQgPSBmcmFnbWVudEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3NlbGVjdGlvblNldCA9IGluaXRpYWxTZWxlY3Rpb25TZXRcbiAgICAgICAgICAgID8gaW5pdGlhbFNlbGVjdGlvblNldC5jbG9uZUlmRnJvemVuKClcbiAgICAgICAgICAgIDogbmV3IFNlbGVjdGlvblNldChmcmFnbWVudEVsZW1lbnQudHlwZUNvbmRpdGlvbiA/IGZyYWdtZW50RWxlbWVudC50eXBlQ29uZGl0aW9uIDogZnJhZ21lbnRFbGVtZW50LnBhcmVudFR5cGUpO1xuICAgIH1cbiAgICBrZXkoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLmVsZW1lbnQoKS50eXBlQ29uZGl0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XG4gICAgfVxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlRGVmZXJBbmRTdHJlYW0oKTtcbiAgICAgICAgdmFsaWRhdGUoIXRoaXMuc2VsZWN0aW9uU2V0LmlzRW1wdHkoKSwgKCkgPT4gYEludmFsaWQgZW1wdHkgc2VsZWN0aW9uIHNldCBmb3IgZnJhZ21lbnQgXCIke3RoaXMuZWxlbWVudCgpfVwiYCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0LnZhbGlkYXRlKCk7XG4gICAgfVxuICAgIHVwZGF0ZUZvckFkZGluZ1RvKHNlbGVjdGlvblNldCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGcmFnbWVudCA9IHRoaXMuZWxlbWVudCgpLnVwZGF0ZUZvckFkZGluZ1RvKHNlbGVjdGlvblNldCk7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQoKSA9PT0gdXBkYXRlZEZyYWdtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZUlmRnJvemVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXBkYXRlZENhc3RlZFR5cGUgPSB1cGRhdGVkRnJhZ21lbnQuY2FzdGVkVHlwZSgpO1xuICAgICAgICBsZXQgdXBkYXRlZFNlbGVjdGlvblNldDtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU2V0LnBhcmVudFR5cGUgIT09IHVwZGF0ZWRDYXN0ZWRUeXBlKSB7XG4gICAgICAgICAgICB1cGRhdGVkU2VsZWN0aW9uU2V0ID0gbmV3IFNlbGVjdGlvblNldCh1cGRhdGVkQ2FzdGVkVHlwZSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiB0aGlzLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zKCkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkU2VsZWN0aW9uU2V0LmFkZChzZWxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZFNlbGVjdGlvblNldCA9IChfYSA9IHRoaXMuc2VsZWN0aW9uU2V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xvbmVJZkZyb3plbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24odXBkYXRlZEZyYWdtZW50LCB1cGRhdGVkU2VsZWN0aW9uU2V0KTtcbiAgICB9XG4gICAgZ2V0IHNlbGVjdGlvblNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvblNldDtcbiAgICB9XG4gICAgbmFtZWRGcmFnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblNldC5mcmFnbWVudHM7XG4gICAgfVxuICAgIGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYWdtZW50RWxlbWVudDtcbiAgICB9XG4gICAgdG9TZWxlY3Rpb25Ob2RlKCkge1xuICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gdGhpcy5lbGVtZW50KCkudHlwZUNvbmRpdGlvbjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLklOTElORV9GUkFHTUVOVCxcbiAgICAgICAgICAgIHR5cGVDb25kaXRpb246IHR5cGVDb25kaXRpb25cbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRURfVFlQRSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlQ29uZGl0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGlyZWN0aXZlczogdGhpcy5lbGVtZW50KCkuYXBwbGllZERpcmVjdGl2ZXNUb0RpcmVjdGl2ZU5vZGVzKCksXG4gICAgICAgICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMuc2VsZWN0aW9uU2V0LnRvU2VsZWN0aW9uU2V0Tm9kZSgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGltaXplKGZyYWdtZW50cykge1xuICAgICAgICBsZXQgb3B0aW1pemVkU2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25TZXQub3B0aW1pemUoZnJhZ21lbnRzKTtcbiAgICAgICAgY29uc3QgdHlwZUNvbmRpdGlvbiA9IHRoaXMuZWxlbWVudCgpLnR5cGVDb25kaXRpb247XG4gICAgICAgIGlmICh0eXBlQ29uZGl0aW9uKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZSBvZiBmcmFnbWVudHMubWF5YmVBcHBseWluZ0F0VHlwZSh0eXBlQ29uZGl0aW9uKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpbWl6ZWRTZWxlY3Rpb24uZXF1YWxzKGNhbmRpZGF0ZS5zZWxlY3Rpb25TZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwcmVhZCA9IG5ldyBGcmFnbWVudFNwcmVhZFNlbGVjdGlvbih0aGlzLmVsZW1lbnQoKS5wYXJlbnRUeXBlLCBmcmFnbWVudHMsIGNhbmRpZGF0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCB0eXBlc18xLnNhbWVUeXBlKSh0eXBlQ29uZGl0aW9uLCBjYW5kaWRhdGUudHlwZUNvbmRpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhZ21lbnRFbGVtZW50LmFwcGxpZWREaXJlY3RpdmVzLmZvckVhY2goKGRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZC5lbGVtZW50KCkuYXBwbHlEaXJlY3RpdmUoZGlyZWN0aXZlLmRlZmluaXRpb24sIGRpcmVjdGl2ZS5hcmd1bWVudHMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzcHJlYWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW1pemVkU2VsZWN0aW9uID0gc2VsZWN0aW9uU2V0T2Yoc3ByZWFkLmVsZW1lbnQoKS5wYXJlbnRUeXBlLCBzcHJlYWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2V0ID09PSBvcHRpbWl6ZWRTZWxlY3Rpb25cbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24odGhpcy5mcmFnbWVudEVsZW1lbnQsIG9wdGltaXplZFNlbGVjdGlvbik7XG4gICAgfVxuICAgIGV4cGFuZEZyYWdtZW50cyhuYW1lcywgdXBkYXRlU2VsZWN0aW9uU2V0RnJhZ21lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBleHBhbmRlZFNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uU2V0LmV4cGFuZEZyYWdtZW50cyhuYW1lcywgdXBkYXRlU2VsZWN0aW9uU2V0RnJhZ21lbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2V0ID09PSBleHBhbmRlZFNlbGVjdGlvblxuICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBJbmxpbmVGcmFnbWVudFNlbGVjdGlvbih0aGlzLmVsZW1lbnQoKSwgZXhwYW5kZWRTZWxlY3Rpb24pO1xuICAgIH1cbiAgICBjb2xsZWN0VXNlZEZyYWdtZW50TmFtZXMoY29sbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2V0LmNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyhjb2xsZWN0b3IpO1xuICAgIH1cbiAgICB3aXRob3V0RGVmZXIobGFiZWxzVG9SZW1vdmUpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFN1YlNlbGVjdGlvbnMgPSB0aGlzLnNlbGVjdGlvblNldC53aXRob3V0RGVmZXIobGFiZWxzVG9SZW1vdmUpO1xuICAgICAgICBjb25zdCBkZWZlckFyZ3MgPSB0aGlzLmZyYWdtZW50RWxlbWVudC5kZWZlckRpcmVjdGl2ZUFyZ3MoKTtcbiAgICAgICAgY29uc3QgaGFzRGVmZXJUb1JlbW92ZSA9IGRlZmVyQXJncyAmJiAoIWxhYmVsc1RvUmVtb3ZlIHx8IChkZWZlckFyZ3MubGFiZWwgJiYgbGFiZWxzVG9SZW1vdmUuaGFzKGRlZmVyQXJncy5sYWJlbCkpKTtcbiAgICAgICAgaWYgKHVwZGF0ZWRTdWJTZWxlY3Rpb25zID09PSB0aGlzLnNlbGVjdGlvblNldCAmJiAhaGFzRGVmZXJUb1JlbW92ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3RnJhZ21lbnQgPSBoYXNEZWZlclRvUmVtb3ZlID8gdGhpcy5mcmFnbWVudEVsZW1lbnQud2l0aG91dERlZmVyKCkgOiB0aGlzLmZyYWdtZW50RWxlbWVudDtcbiAgICAgICAgaWYgKCFuZXdGcmFnbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRTdWJTZWxlY3Rpb25zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24obmV3RnJhZ21lbnQsIHVwZGF0ZWRTdWJTZWxlY3Rpb25zKTtcbiAgICB9XG4gICAgd2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKSB7XG4gICAgICAgIGNvbnN0IG5ld0ZyYWdtZW50ID0gdGhpcy5mcmFnbWVudEVsZW1lbnQud2l0aE5vcm1hbGl6ZWREZWZlcihub3JtYWxpemVyKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFN1YlNlbGVjdGlvbnMgPSB0aGlzLnNlbGVjdGlvblNldC53aXRoTm9ybWFsaXplZERlZmVyKG5vcm1hbGl6ZXIpO1xuICAgICAgICBpZiAoIW5ld0ZyYWdtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlZFN1YlNlbGVjdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0ZyYWdtZW50ID09PSB0aGlzLmZyYWdtZW50RWxlbWVudCAmJiB1cGRhdGVkU3ViU2VsZWN0aW9ucyA9PT0gdGhpcy5zZWxlY3Rpb25TZXRcbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24obmV3RnJhZ21lbnQsIHVwZGF0ZWRTdWJTZWxlY3Rpb25zKTtcbiAgICB9XG4gICAgd2l0aFVwZGF0ZWRTdWJTZWxlY3Rpb24obmV3U3ViU2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24odGhpcy5mcmFnbWVudEVsZW1lbnQsIG5ld1N1YlNlbGVjdGlvbik7XG4gICAgfVxuICAgIHRvU3RyaW5nKGV4cGFuZEZyYWdtZW50cyA9IHRydWUsIGluZGVudCkge1xuICAgICAgICByZXR1cm4gKGluZGVudCAhPT0gbnVsbCAmJiBpbmRlbnQgIT09IHZvaWQgMCA/IGluZGVudCA6ICcnKSArIHRoaXMuZnJhZ21lbnRFbGVtZW50ICsgJyAnICsgdGhpcy5zZWxlY3Rpb25TZXQudG9TdHJpbmcoZXhwYW5kRnJhZ21lbnRzLCB0cnVlLCBpbmRlbnQpO1xuICAgIH1cbn1cbmNsYXNzIEZyYWdtZW50U3ByZWFkU2VsZWN0aW9uIGV4dGVuZHMgRnJhZ21lbnRTZWxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZVR5cGUsIGZyYWdtZW50cywgZnJhZ21lbnROYW1lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xuICAgICAgICBjb25zdCBmcmFnbWVudERlZmluaXRpb24gPSBmcmFnbWVudHMuZ2V0KGZyYWdtZW50TmFtZSk7XG4gICAgICAgIHZhbGlkYXRlKGZyYWdtZW50RGVmaW5pdGlvbiwgKCkgPT4gYFVua25vd24gZnJhZ21lbnQgXCIuLi4ke2ZyYWdtZW50TmFtZX1cImApO1xuICAgICAgICB0aGlzLm5hbWVkRnJhZ21lbnQgPSBmcmFnbWVudERlZmluaXRpb247XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBuZXcgRnJhZ21lbnRFbGVtZW50KHNvdXJjZVR5cGUsIGZyYWdtZW50RGVmaW5pdGlvbi50eXBlQ29uZGl0aW9uKTtcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZnJhZ21lbnREZWZpbml0aW9uLmFwcGxpZWREaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGx5RGlyZWN0aXZlKGRpcmVjdGl2ZS5kZWZpbml0aW9uLCBkaXJlY3RpdmUuYXJndW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGtleSgpIHtcbiAgICAgICAgcmV0dXJuICcuLi4nICsgdGhpcy5uYW1lZEZyYWdtZW50Lm5hbWU7XG4gICAgfVxuICAgIGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBuYW1lZEZyYWdtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhZ21lbnRzO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0aW9uU2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lZEZyYWdtZW50LnNlbGVjdGlvblNldDtcbiAgICB9XG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVEZWZlckFuZFN0cmVhbSgpO1xuICAgIH1cbiAgICB0b1NlbGVjdGlvbk5vZGUoKSB7XG4gICAgICAgIGNvbnN0IHNwcmVhZERpcmVjdGl2ZXMgPSB0aGlzLnNwcmVhZERpcmVjdGl2ZXMoKTtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlTm9kZXMgPSBzcHJlYWREaXJlY3RpdmVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogc3ByZWFkRGlyZWN0aXZlcy5tYXAoZGlyZWN0aXZlID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5ESVJFQ1RJVkUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGlyZWN0aXZlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogZGlyZWN0aXZlLmFyZ3VtZW50c1RvQVNUKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5GUkFHTUVOVF9TUFJFQUQsXG4gICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiB0aGlzLm5hbWVkRnJhZ21lbnQubmFtZSB9LFxuICAgICAgICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlTm9kZXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGltaXplKF8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHVwZGF0ZUZvckFkZGluZ1RvKF9zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGV4cGFuZEZyYWdtZW50cyhuYW1lcywgdXBkYXRlU2VsZWN0aW9uU2V0RnJhZ21lbnRzID0gdHJ1ZSkge1xuICAgICAgICBpZiAobmFtZXMgJiYgIW5hbWVzLmluY2x1ZGVzKHRoaXMubmFtZWRGcmFnbWVudC5uYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhwYW5kZWRTdWJTZWxlY3Rpb25zID0gdGhpcy5zZWxlY3Rpb25TZXQuZXhwYW5kRnJhZ21lbnRzKG5hbWVzLCB1cGRhdGVTZWxlY3Rpb25TZXRGcmFnbWVudHMpO1xuICAgICAgICByZXR1cm4gKDAsIHR5cGVzXzEuc2FtZVR5cGUpKHRoaXMuX2VsZW1lbnQucGFyZW50VHlwZSwgdGhpcy5uYW1lZEZyYWdtZW50LnR5cGVDb25kaXRpb24pICYmIHRoaXMuX2VsZW1lbnQuYXBwbGllZERpcmVjdGl2ZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICA/IGV4cGFuZGVkU3ViU2VsZWN0aW9ucy5zZWxlY3Rpb25zKClcbiAgICAgICAgICAgIDogbmV3IElubGluZUZyYWdtZW50U2VsZWN0aW9uKHRoaXMuX2VsZW1lbnQsIGV4cGFuZGVkU3ViU2VsZWN0aW9ucyk7XG4gICAgfVxuICAgIGNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyhjb2xsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXQuY29sbGVjdFVzZWRGcmFnbWVudE5hbWVzKGNvbGxlY3Rvcik7XG4gICAgICAgIGNvbnN0IHVzYWdlQ291bnQgPSBjb2xsZWN0b3IuZ2V0KHRoaXMubmFtZWRGcmFnbWVudC5uYW1lKTtcbiAgICAgICAgY29sbGVjdG9yLnNldCh0aGlzLm5hbWVkRnJhZ21lbnQubmFtZSwgdXNhZ2VDb3VudCA9PT0gdW5kZWZpbmVkID8gMSA6IHVzYWdlQ291bnQgKyAxKTtcbiAgICB9XG4gICAgd2l0aG91dERlZmVyKF9sYWJlbHNUb1JlbW92ZSkge1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGZhbHNlLCAnVW5zdXBwb3J0ZWQsIHNlZSBgT3BlcmF0aW9uLndpdGhvdXREZWZlcmAnKTtcbiAgICB9XG4gICAgd2l0aE5vcm1hbGl6ZWREZWZlcihfbm9ybWFsaXplenIpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmYWxzZSwgJ1Vuc3VwcG9ydGVkLCBzZWUgYE9wZXJhdGlvbi53aXRoQWxsRGVmZXJMYWJlbGxlZGAnKTtcbiAgICB9XG4gICAgc3ByZWFkRGlyZWN0aXZlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuYXBwbGllZERpcmVjdGl2ZXMuc2xpY2UodGhpcy5uYW1lZEZyYWdtZW50LmFwcGxpZWREaXJlY3RpdmVzLmxlbmd0aCk7XG4gICAgfVxuICAgIHdpdGhVcGRhdGVkU3ViU2VsZWN0aW9uKF8pIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmYWxzZSwgYFVuc3N1cHBvcnRlZGApO1xuICAgIH1cbiAgICB0b1N0cmluZyhleHBhbmRGcmFnbWVudHMgPSB0cnVlLCBpbmRlbnQpIHtcbiAgICAgICAgaWYgKGV4cGFuZEZyYWdtZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIChpbmRlbnQgIT09IG51bGwgJiYgaW5kZW50ICE9PSB2b2lkIDAgPyBpbmRlbnQgOiAnJykgKyB0aGlzLl9lbGVtZW50ICsgJyAnICsgdGhpcy5zZWxlY3Rpb25TZXQudG9TdHJpbmcodHJ1ZSwgdHJ1ZSwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnNwcmVhZERpcmVjdGl2ZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZVN0cmluZyA9IGRpcmVjdGl2ZXMubGVuZ3RoID09IDAgPyAnJyA6ICcgJyArIGRpcmVjdGl2ZXMuam9pbignICcpO1xuICAgICAgICAgICAgcmV0dXJuIChpbmRlbnQgIT09IG51bGwgJiYgaW5kZW50ICE9PSB2b2lkIDAgPyBpbmRlbnQgOiAnJykgKyAnLi4uJyArIHRoaXMubmFtZWRGcmFnbWVudC5uYW1lICsgZGlyZWN0aXZlU3RyaW5nO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gb3BlcmF0aW9uRnJvbURvY3VtZW50KHNjaGVtYSwgZG9jdW1lbnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgb3BlcmF0aW9uO1xuICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3BlcmF0aW9uTmFtZTtcbiAgICBjb25zdCBmcmFnbWVudHMgPSBuZXcgTmFtZWRGcmFnbWVudHMoKTtcbiAgICBkb2N1bWVudC5kZWZpbml0aW9ucy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgICAgICBzd2l0Y2ggKGRlZmluaXRpb24ua2luZCkge1xuICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZSghb3BlcmF0aW9uIHx8IG9wZXJhdGlvbk5hbWUsICgpID0+ICdNdXN0IHByb3ZpZGUgb3BlcmF0aW9uIG5hbWUgaWYgcXVlcnkgY29udGFpbnMgbXVsdGlwbGUgb3BlcmF0aW9ucy4nKTtcbiAgICAgICAgICAgICAgICBpZiAoIW9wZXJhdGlvbk5hbWUgfHwgKGRlZmluaXRpb24ubmFtZSAmJiBkZWZpbml0aW9uLm5hbWUudmFsdWUgPT09IG9wZXJhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiA9IGRlZmluaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBkZWZpbml0aW9uLm5hbWUudmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBkZWZpbml0aW9uLnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gc2NoZW1hLnR5cGUodHlwZU5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICghdHlwZUNvbmRpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBVbmtub3duIHR5cGUgXCIke3R5cGVOYW1lfVwiIGZvciBmcmFnbWVudCBcIiR7bmFtZX1cImAsIHsgbm9kZXM6IGRlZmluaXRpb24gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKDAsIGRlZmluaXRpb25zXzEuaXNDb21wb3NpdGVUeXBlKSh0eXBlQ29uZGl0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIGZyYWdtZW50IFwiJHtuYW1lfVwiIG9uIG5vbi1jb21wb3NpdGUgdHlwZSBcIiR7dHlwZU5hbWV9XCJgLCB7IG5vZGVzOiBkZWZpbml0aW9uIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBOYW1lZEZyYWdtZW50RGVmaW5pdGlvbihzY2hlbWEsIG5hbWUsIHR5cGVDb25kaXRpb24sIG5ldyBTZWxlY3Rpb25TZXQodHlwZUNvbmRpdGlvbiwgZnJhZ21lbnRzKSk7XG4gICAgICAgICAgICAgICAgYWRkRGlyZWN0aXZlTm9kZXNUb0VsZW1lbnQoZGVmaW5pdGlvbi5kaXJlY3RpdmVzLCBmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLmFkZChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YWxpZGF0ZShvcGVyYXRpb24sICgpID0+IG9wZXJhdGlvbk5hbWUgPyBgVW5rbm93biBvcGVyYXRpb24gbmFtZWQgXCIke29wZXJhdGlvbk5hbWV9XCJgIDogJ05vIG9wZXJhdGlvbiBmb3VuZCBpbiBwcm92aWRlZCBkb2N1bWVudC4nKTtcbiAgICBjb25zdCB2YXJpYWJsZURlZmluaXRpb25zID0gb3BlcmF0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnNcbiAgICAgICAgPyAoMCwgZGVmaW5pdGlvbnNfMS52YXJpYWJsZURlZmluaXRpb25zRnJvbUFTVCkoc2NoZW1hLCBvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9ucylcbiAgICAgICAgOiBuZXcgZGVmaW5pdGlvbnNfMS5WYXJpYWJsZURlZmluaXRpb25zKCk7XG4gICAgZG9jdW1lbnQuZGVmaW5pdGlvbnMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICAgICAgc3dpdGNoIChkZWZpbml0aW9uLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGZyYWdtZW50cy5nZXQoZGVmaW5pdGlvbi5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBmcmFnbWVudC5zZWxlY3Rpb25TZXQuYWRkU2VsZWN0aW9uU2V0Tm9kZShkZWZpbml0aW9uLnNlbGVjdGlvblNldCwgdmFyaWFibGVEZWZpbml0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmcmFnbWVudHMudmFsaWRhdGUoKTtcbiAgICByZXR1cm4gb3BlcmF0aW9uRnJvbUFTVCh7IHNjaGVtYSwgb3BlcmF0aW9uLCBmcmFnbWVudHMsIHZhbGlkYXRlSW5wdXQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy52YWxpZGF0ZSB9KTtcbn1cbmV4cG9ydHMub3BlcmF0aW9uRnJvbURvY3VtZW50ID0gb3BlcmF0aW9uRnJvbURvY3VtZW50O1xuZnVuY3Rpb24gb3BlcmF0aW9uRnJvbUFTVCh7IHNjaGVtYSwgb3BlcmF0aW9uLCBmcmFnbWVudHMsIHZhbGlkYXRlSW5wdXQsIH0pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgcm9vdFR5cGUgPSBzY2hlbWEuc2NoZW1hRGVmaW5pdGlvbi5yb290KG9wZXJhdGlvbi5vcGVyYXRpb24pO1xuICAgIHZhbGlkYXRlKHJvb3RUeXBlLCAoKSA9PiBgVGhlIHNjaGVtYSBoYXMgbm8gXCIke29wZXJhdGlvbi5vcGVyYXRpb259XCIgcm9vdCB0eXBlIGRlZmluZWRgKTtcbiAgICBjb25zdCB2YXJpYWJsZURlZmluaXRpb25zID0gb3BlcmF0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnMgPyAoMCwgZGVmaW5pdGlvbnNfMS52YXJpYWJsZURlZmluaXRpb25zRnJvbUFTVCkoc2NoZW1hLCBvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9ucykgOiBuZXcgZGVmaW5pdGlvbnNfMS5WYXJpYWJsZURlZmluaXRpb25zKCk7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRpb24ob3BlcmF0aW9uLm9wZXJhdGlvbiwgcGFyc2VTZWxlY3Rpb25TZXQoe1xuICAgICAgICBwYXJlbnRUeXBlOiByb290VHlwZS50eXBlLFxuICAgICAgICBzb3VyY2U6IG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQsXG4gICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnMsXG4gICAgICAgIGZyYWdtZW50cyxcbiAgICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlSW5wdXQsXG4gICAgfSksIHZhcmlhYmxlRGVmaW5pdGlvbnMsIChfYSA9IG9wZXJhdGlvbi5uYW1lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWUpO1xufVxuZnVuY3Rpb24gcGFyc2VPcGVyYXRpb24oc2NoZW1hLCBvcGVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3BlcmF0aW9uRnJvbURvY3VtZW50KHNjaGVtYSwgKDAsIGdyYXBocWxfMS5wYXJzZSkob3BlcmF0aW9uKSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlT3BlcmF0aW9uID0gcGFyc2VPcGVyYXRpb247XG5mdW5jdGlvbiBwYXJzZVNlbGVjdGlvblNldCh7IHBhcmVudFR5cGUsIHNvdXJjZSwgdmFyaWFibGVEZWZpbml0aW9ucywgZnJhZ21lbnRzLCBmaWVsZEFjY2Vzc29yLCB2YWxpZGF0ZSA9IHRydWUsIH0pIHtcbiAgICBjb25zdCBub2RlID0gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBwYXJzZU9wZXJhdGlvbkFTVChzb3VyY2UudHJpbSgpLnN0YXJ0c1dpdGgoJ3snKSA/IHNvdXJjZSA6IGB7JHtzb3VyY2V9fWApLnNlbGVjdGlvblNldFxuICAgICAgICA6IHNvdXJjZTtcbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSBuZXcgU2VsZWN0aW9uU2V0KHBhcmVudFR5cGUsIGZyYWdtZW50cyk7XG4gICAgc2VsZWN0aW9uU2V0LmFkZFNlbGVjdGlvblNldE5vZGUobm9kZSwgdmFyaWFibGVEZWZpbml0aW9ucyAhPT0gbnVsbCAmJiB2YXJpYWJsZURlZmluaXRpb25zICE9PSB2b2lkIDAgPyB2YXJpYWJsZURlZmluaXRpb25zIDogbmV3IGRlZmluaXRpb25zXzEuVmFyaWFibGVEZWZpbml0aW9ucygpLCBmaWVsZEFjY2Vzc29yKTtcbiAgICBpZiAodmFsaWRhdGUpXG4gICAgICAgIHNlbGVjdGlvblNldC52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBzZWxlY3Rpb25TZXQ7XG59XG5leHBvcnRzLnBhcnNlU2VsZWN0aW9uU2V0ID0gcGFyc2VTZWxlY3Rpb25TZXQ7XG5mdW5jdGlvbiBwYXJzZU9wZXJhdGlvbkFTVChzb3VyY2UpIHtcbiAgICBjb25zdCBwYXJzZWQgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKShzb3VyY2UpO1xuICAgIHZhbGlkYXRlKHBhcnNlZC5kZWZpbml0aW9ucy5sZW5ndGggPT09IDEsICgpID0+ICdTZWxlY3Rpb25zIHNob3VsZCBjb250YWluIGEgc2luZ2xlIGRlZmluaXRpb25zLCBmb3VuZCAnICsgcGFyc2VkLmRlZmluaXRpb25zLmxlbmd0aCk7XG4gICAgY29uc3QgZGVmID0gcGFyc2VkLmRlZmluaXRpb25zWzBdO1xuICAgIHZhbGlkYXRlKGRlZi5raW5kID09PSBncmFwaHFsXzEuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTiwgKCkgPT4gJ0V4cGVjdGVkIGFuIG9wZXJhdGlvbiBkZWZpbml0aW9uIGJ1dCBnb3QgYSAnICsgZGVmLmtpbmQpO1xuICAgIHJldHVybiBkZWY7XG59XG5mdW5jdGlvbiBvcGVyYXRpb25Ub0RvY3VtZW50KG9wZXJhdGlvbikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBvcGVyYXRpb25BU1QgPSB7XG4gICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OLFxuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbi5yb290S2luZCxcbiAgICAgICAgbmFtZTogb3BlcmF0aW9uLm5hbWUgPyB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiBvcGVyYXRpb24ubmFtZSB9IDogdW5kZWZpbmVkLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQudG9TZWxlY3Rpb25TZXROb2RlKCksXG4gICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IG9wZXJhdGlvbi52YXJpYWJsZURlZmluaXRpb25zLnRvVmFyaWFibGVEZWZpbml0aW9uTm9kZXMoKSxcbiAgICB9O1xuICAgIGNvbnN0IGZyYWdtZW50QVNUcyA9IG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQuZnJhZ21lbnRzXG4gICAgICAgID8gKF9hID0gb3BlcmF0aW9uLnNlbGVjdGlvblNldC5mcmFnbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0ZyYWdtZW50RGVmaW5pdGlvbk5vZGVzKClcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5ET0NVTUVOVCxcbiAgICAgICAgZGVmaW5pdGlvbnM6IFtvcGVyYXRpb25BU1RdLmNvbmNhdChmcmFnbWVudEFTVHMpLFxuICAgIH07XG59XG5leHBvcnRzLm9wZXJhdGlvblRvRG9jdW1lbnQgPSBvcGVyYXRpb25Ub0RvY3VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9ucy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcHV0ZVNoYXJlYWJsZXMgPSB2b2lkIDA7XG5jb25zdCBfMSA9IHJlcXVpcmUoXCIuXCIpO1xuZnVuY3Rpb24gY29tcHV0ZVNoYXJlYWJsZXMoc2NoZW1hKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSAoMCwgXzEuZmVkZXJhdGlvbk1ldGFkYXRhKShzY2hlbWEpO1xuICAgICgwLCBfMS5hc3NlcnQpKG1ldGFkYXRhLCAnU2NoZW1hIHNob3VsZCBiZSBhIGZlZGVyYXRpb24gc3ViZ3JhcGgnKTtcbiAgICBjb25zdCBrZXlEaXJlY3RpdmUgPSBtZXRhZGF0YS5rZXlEaXJlY3RpdmUoKTtcbiAgICBjb25zdCBwcm92aWRlc0RpcmVjdGl2ZSA9IG1ldGFkYXRhLnByb3ZpZGVzRGlyZWN0aXZlKCk7XG4gICAgY29uc3Qgc2hhcmVhYmxlRGlyZWN0aXZlID0gbWV0YWRhdGEuaXNGZWQyU2NoZW1hKCkgPyBtZXRhZGF0YS5zaGFyZWFibGVEaXJlY3RpdmUoKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzaGFyZWFibGVGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgYWRkS2V5RmllbGRzID0gKHR5cGUpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdHlwZS5hcHBsaWVkRGlyZWN0aXZlc09mKGtleURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICgwLCBfMS5jb2xsZWN0VGFyZ2V0RmllbGRzKSh7XG4gICAgICAgICAgICAgICAgcGFyZW50VHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmU6IGtleSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlSW50ZXJmYWNlRmllbGRzSW1wbGVtZW50YXRpb25zOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pLmZvckVhY2goKGYpID0+IHNoYXJlYWJsZUZpZWxkcy5hZGQoZi5jb29yZGluYXRlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY2hlbWEub2JqZWN0VHlwZXMoKSkge1xuICAgICAgICBhZGRLZXlGaWVsZHModHlwZSk7XG4gICAgICAgIGNvbnN0IHNoYXJlYWJsZXNPblR5cGUgPSBzaGFyZWFibGVEaXJlY3RpdmUgPyB0eXBlLmFwcGxpZWREaXJlY3RpdmVzT2Yoc2hhcmVhYmxlRGlyZWN0aXZlKSA6IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkSXNTaGFyZWFibGUgPSBzaGFyZWFibGVEaXJlY3RpdmUgJiYgZmllbGQuaGFzQXBwbGllZERpcmVjdGl2ZShzaGFyZWFibGVEaXJlY3RpdmUpXG4gICAgICAgICAgICAgICAgfHwgKHNoYXJlYWJsZXNPblR5cGUubGVuZ3RoID4gMCAmJiBzaGFyZWFibGVzT25UeXBlLnNvbWUoKGQpID0+IGZpZWxkLm9mRXh0ZW5zaW9uKCkgPT09IGQub2ZFeHRlbnNpb24oKSkpO1xuICAgICAgICAgICAgaWYgKGZpZWxkSXNTaGFyZWFibGUpIHtcbiAgICAgICAgICAgICAgICBzaGFyZWFibGVGaWVsZHMuYWRkKGZpZWxkLmNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm92aWRlcyBvZiBmaWVsZC5hcHBsaWVkRGlyZWN0aXZlc09mKHByb3ZpZGVzRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICgwLCBfMS5jb2xsZWN0VGFyZ2V0RmllbGRzKSh7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFR5cGU6ICgwLCBfMS5iYXNlVHlwZSkoZmllbGQudHlwZSksXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZTogcHJvdmlkZXMsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVJbnRlcmZhY2VGaWVsZHNJbXBsZW1lbnRhdGlvbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YS5pc0ZpZWxkRXh0ZXJuYWwoZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlYWJsZUZpZWxkcy5hZGQoZi5jb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY2hlbWEuaW50ZXJmYWNlVHlwZXMoKSkge1xuICAgICAgICBhZGRLZXlGaWVsZHModHlwZSk7XG4gICAgfVxuICAgIHJldHVybiAoZmllbGQpID0+IHNoYXJlYWJsZUZpZWxkcy5oYXMoZmllbGQuY29vcmRpbmF0ZSk7XG59XG5leHBvcnRzLmNvbXB1dGVTaGFyZWFibGVzID0gY29tcHV0ZVNoYXJlYWJsZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVjb21wdXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludERpcmVjdGl2ZURlZmluaXRpb24gPSBleHBvcnRzLnByaW50VHlwZURlZmluaXRpb25BbmRFeHRlbnNpb25zID0gZXhwb3J0cy5wcmludFR5cGUgPSBleHBvcnRzLnByaW50U2NoZW1hID0gZXhwb3J0cy5vcmRlclByaW50ZWREZWZpbml0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdFByaW50T3B0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IHZhbHVlc18xID0gcmVxdWlyZShcIi4vdmFsdWVzXCIpO1xuZXhwb3J0cy5kZWZhdWx0UHJpbnRPcHRpb25zID0ge1xuICAgIGluZGVudFN0cmluZzogXCIgIFwiLFxuICAgIGRlZmluaXRpb25zT3JkZXI6IFsnc2NoZW1hJywgJ2RpcmVjdGl2ZXMnLCAndHlwZXMnXSxcbiAgICByb290VHlwZXNPcmRlcjogWydxdWVyeScsICdtdXRhdGlvbicsICdzdWJzY3JpcHRpb24nXSxcbiAgICBtZXJnZVR5cGVzQW5kRXh0ZW5zaW9uczogZmFsc2UsXG4gICAgc2hvd0FsbEJ1aWx0SW5zOiBmYWxzZSxcbiAgICBub0Rlc2NyaXB0aW9uczogZmFsc2UsXG4gICAgdHlwZUZpbHRlcjogKCkgPT4gdHJ1ZSxcbiAgICBmaWVsZEZpbHRlcjogKCkgPT4gdHJ1ZSxcbiAgICBkaXJlY3RpdmVBcHBsaWNhdGlvbkZpbHRlcjogKCkgPT4gdHJ1ZSxcbn07XG5mdW5jdGlvbiBvcmRlclByaW50ZWREZWZpbml0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdHlwZUNvbXBhcmVGbjogKHQxLCB0MikgPT4gdDEubmFtZS5sb2NhbGVDb21wYXJlKHQyLm5hbWUpLFxuICAgICAgICBkaXJlY3RpdmVDb21wYXJlRm46ICh0MSwgdDIpID0+IHQxLm5hbWUubG9jYWxlQ29tcGFyZSh0Mi5uYW1lKSxcbiAgICB9O1xufVxuZXhwb3J0cy5vcmRlclByaW50ZWREZWZpbml0aW9ucyA9IG9yZGVyUHJpbnRlZERlZmluaXRpb25zO1xuZnVuY3Rpb24gaXNEZWZpbml0aW9uT3JkZXJWYWxpZChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVmaW5pdGlvbnNPcmRlci5sZW5ndGggPT09IDNcbiAgICAgICAgJiYgb3B0aW9ucy5kZWZpbml0aW9uc09yZGVyLmluZGV4T2YoJ3NjaGVtYScpID49IDBcbiAgICAgICAgJiYgb3B0aW9ucy5kZWZpbml0aW9uc09yZGVyLmluZGV4T2YoJ3R5cGVzJykgPj0gMFxuICAgICAgICAmJiBvcHRpb25zLmRlZmluaXRpb25zT3JkZXIuaW5kZXhPZignZGlyZWN0aXZlcycpID49IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICghaXNEZWZpbml0aW9uT3JkZXJWYWxpZChvcHRpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdkZWZpbml0aW9uc09yZGVyJyBzaG91bGQgYmUgYSAzLWVsZW1lbnQgYXJyYXkgY29udGFpbmluZyAnc2NoZW1hJywgJ3R5cGVzJyBhbmQgJ2RpcmVjdGl2ZXMnIGluIHRoZSBkZXNpcmVkIG9yZGVyIChnb3Q6IFske29wdGlvbnMuZGVmaW5pdGlvbnNPcmRlci5qb2luKCcsICcpfV0pYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJpbnRTY2hlbWEoc2NoZW1hLCBvcHRpb25zID0gZXhwb3J0cy5kZWZhdWx0UHJpbnRPcHRpb25zKSB7XG4gICAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIGxldCBkaXJlY3RpdmVzID0gb3B0aW9ucy5zaG93QWxsQnVpbHRJbnMgPyBzY2hlbWEuYWxsRGlyZWN0aXZlcygpIDogc2NoZW1hLmRpcmVjdGl2ZXMoKTtcbiAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVEZWZpbml0aW9uRmlsdGVyKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmZpbHRlcihvcHRpb25zLmRpcmVjdGl2ZURlZmluaXRpb25GaWx0ZXIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVDb21wYXJlRm4pIHtcbiAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KCkuc29ydChvcHRpb25zLmRpcmVjdGl2ZUNvbXBhcmVGbik7XG4gICAgfVxuICAgIGxldCB0eXBlcyA9IG9wdGlvbnMuc2hvd0FsbEJ1aWx0SW5zID8gc2NoZW1hLmFsbFR5cGVzKCkgOiBzY2hlbWEudHlwZXMoKTtcbiAgICBpZiAob3B0aW9ucy50eXBlRmlsdGVyKSB7XG4gICAgICAgIHR5cGVzID0gdHlwZXMuZmlsdGVyKG9wdGlvbnMudHlwZUZpbHRlcik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnR5cGVDb21wYXJlRm4pIHtcbiAgICAgICAgdHlwZXMgPSB0eXBlcy5jb25jYXQoKS5zb3J0KG9wdGlvbnMudHlwZUNvbXBhcmVGbik7XG4gICAgfVxuICAgIGNvbnN0IGRlZmluaXRpb25zID0gbmV3IEFycmF5KDMpO1xuICAgIGRlZmluaXRpb25zW29wdGlvbnMuZGVmaW5pdGlvbnNPcmRlci5pbmRleE9mKCdzY2hlbWEnKV0gPSBwcmludFNjaGVtYURlZmluaXRpb25BbmRFeHRlbnNpb25zKHNjaGVtYS5zY2hlbWFEZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICBkZWZpbml0aW9uc1tvcHRpb25zLmRlZmluaXRpb25zT3JkZXIuaW5kZXhPZignZGlyZWN0aXZlcycpXSA9IGRpcmVjdGl2ZXMubWFwKGRpcmVjdGl2ZSA9PiBwcmludERpcmVjdGl2ZURlZmluaXRpb24oZGlyZWN0aXZlLCBvcHRpb25zKSk7XG4gICAgZGVmaW5pdGlvbnNbb3B0aW9ucy5kZWZpbml0aW9uc09yZGVyLmluZGV4T2YoJ3R5cGVzJyldID0gdHlwZXMuZmxhdE1hcCh0eXBlID0+IHByaW50VHlwZURlZmluaXRpb25BbmRFeHRlbnNpb25zKHR5cGUsIG9wdGlvbnMpKTtcbiAgICByZXR1cm4gZGVmaW5pdGlvbnMuZmxhdCgpLmpvaW4oJ1xcblxcbicpO1xufVxuZXhwb3J0cy5wcmludFNjaGVtYSA9IHByaW50U2NoZW1hO1xuZnVuY3Rpb24gZGVmaW5pdGlvbkFuZEV4dGVuc2lvbnMoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLm1lcmdlVHlwZXNBbmRFeHRlbnNpb25zID8gW3VuZGVmaW5lZF0gOiBbbnVsbCwgLi4uZWxlbWVudC5leHRlbnNpb25zKCldO1xufVxuZnVuY3Rpb24gcHJpbnRTY2hlbWFEZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyhzY2hlbWFEZWZpbml0aW9uLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByaW50RGVmaW5pdGlvbkFuZEV4dGVuc2lvbnMoc2NoZW1hRGVmaW5pdGlvbiwgb3B0aW9ucywgcHJpbnRTY2hlbWFEZWZpbml0aW9uT3JFeHRlbnNpb24pO1xufVxuZnVuY3Rpb24gcHJpbnREZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyh0LCBvcHRpb25zLCBwcmludGVyKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25BbmRFeHRlbnNpb25zKHQsIG9wdGlvbnMpXG4gICAgICAgIC5tYXAoZXh0ID0+IHByaW50ZXIodCwgb3B0aW9ucywgZXh0KSlcbiAgICAgICAgLmZpbHRlcih2ID0+IHYgIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBwcmludElzRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgIHJldHVybiBleHRlbnNpb24gPyAnZXh0ZW5kICcgOiAnJztcbn1cbmZ1bmN0aW9uIGZvckV4dGVuc2lvbih0cywgZXh0ZW5zaW9uKSB7XG4gICAgaWYgKGV4dGVuc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cztcbiAgICB9XG4gICAgcmV0dXJuIHRzLmZpbHRlcihyID0+IHsgdmFyIF9hOyByZXR1cm4gKChfYSA9IHIub2ZFeHRlbnNpb24oKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbCkgPT09IGV4dGVuc2lvbjsgfSk7XG59XG5mdW5jdGlvbiBvcmRlclJvb3RzKHJvb3RzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJvb3RzLmNvbmNhdCgpLnNvcnQoKHIxLCByMikgPT4gb3B0aW9ucy5yb290VHlwZXNPcmRlci5pbmRleE9mKHIxLnJvb3RLaW5kKSAtIG9wdGlvbnMucm9vdFR5cGVzT3JkZXIuaW5kZXhPZihyMi5yb290S2luZCkpO1xufVxuZnVuY3Rpb24gYXBwbGllZERpcmVjdGl2ZXMoZWxlbWVudCwgb3B0aW9ucywgZXh0ZW5zaW9uKSB7XG4gICAgbGV0IGRpcmVjdGl2ZXMgPSBmb3JFeHRlbnNpb24oZWxlbWVudC5hcHBsaWVkRGlyZWN0aXZlcywgZXh0ZW5zaW9uKTtcbiAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVBcHBsaWNhdGlvbkZpbHRlcikge1xuICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5maWx0ZXIob3B0aW9ucy5kaXJlY3RpdmVBcHBsaWNhdGlvbkZpbHRlcik7XG4gICAgfVxuICAgIHJldHVybiBkaXJlY3RpdmVzO1xufVxuZnVuY3Rpb24gcHJpbnRTY2hlbWFEZWZpbml0aW9uT3JFeHRlbnNpb24oc2NoZW1hRGVmaW5pdGlvbiwgb3B0aW9ucywgZXh0ZW5zaW9uKSB7XG4gICAgY29uc3Qgcm9vdHMgPSBmb3JFeHRlbnNpb24oc2NoZW1hRGVmaW5pdGlvbi5yb290cygpLCBleHRlbnNpb24pO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBhcHBsaWVkRGlyZWN0aXZlcyhzY2hlbWFEZWZpbml0aW9uLCBvcHRpb25zLCBleHRlbnNpb24pO1xuICAgIGlmICghcm9vdHMubGVuZ3RoICYmICFkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWV4dGVuc2lvbiAmJiAhZGlyZWN0aXZlcy5sZW5ndGggJiYgaXNTY2hlbWFPZkNvbW1vbk5hbWVzKHNjaGVtYURlZmluaXRpb24pKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJvb3RFbnRyaWVzID0gb3JkZXJSb290cyhyb290cywgb3B0aW9ucykubWFwKChyb290VHlwZSkgPT4gYCR7b3B0aW9ucy5pbmRlbnRTdHJpbmd9JHtyb290VHlwZS5yb290S2luZH06ICR7cm9vdFR5cGUudHlwZX1gKTtcbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihzY2hlbWFEZWZpbml0aW9uLCBvcHRpb25zLCBleHRlbnNpb24pXG4gICAgICAgICsgcHJpbnRJc0V4dGVuc2lvbihleHRlbnNpb24pXG4gICAgICAgICsgJ3NjaGVtYSdcbiAgICAgICAgKyBwcmludEFwcGxpZWREaXJlY3RpdmVzKGRpcmVjdGl2ZXMsIG9wdGlvbnMsIHRydWUsIHJvb3RFbnRyaWVzLmxlbmd0aCAhPT0gMClcbiAgICAgICAgKyAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgPyAnICcgOiAnJylcbiAgICAgICAgKyAocm9vdEVudHJpZXMubGVuZ3RoID09PSAwID8gJycgOiAne1xcbicgKyByb290RW50cmllcy5qb2luKCdcXG4nKSArICdcXG59Jyk7XG59XG5mdW5jdGlvbiBpc1NjaGVtYU9mQ29tbW9uTmFtZXMoc2NoZW1hKSB7XG4gICAgcmV0dXJuICFzY2hlbWEuZGVzY3JpcHRpb24gJiYgc2NoZW1hLnJvb3RzKCkuZXZlcnkociA9PiByLmlzRGVmYXVsdFJvb3ROYW1lKCkpO1xufVxuZnVuY3Rpb24gcHJpbnRUeXBlKHR5cGUsIG9wdGlvbnMgPSBleHBvcnRzLmRlZmF1bHRQcmludE9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyA9IHByaW50VHlwZURlZmluaXRpb25BbmRFeHRlbnNpb25zKHR5cGUsIG9wdGlvbnMpO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkoZGVmaW5pdGlvbkFuZEV4dGVuc2lvbnMubGVuZ3RoID09IDEsIGBUeXBlICR7dHlwZX0gaXMgYnVpbHQgZnJvbSBtb3JlIHRoYW4gMSBkZWZpbml0aW9uIG9yIGV4dGVuc2lvbmApO1xuICAgIHJldHVybiBkZWZpbml0aW9uQW5kRXh0ZW5zaW9uc1swXTtcbn1cbmV4cG9ydHMucHJpbnRUeXBlID0gcHJpbnRUeXBlO1xuZnVuY3Rpb24gcHJpbnRUeXBlRGVmaW5pdGlvbkFuZEV4dGVuc2lvbnModHlwZSwgb3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdFByaW50T3B0aW9ucykge1xuICAgIHN3aXRjaCAodHlwZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ1NjYWxhclR5cGUnOiByZXR1cm4gcHJpbnREZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyh0eXBlLCBvcHRpb25zLCBwcmludFNjYWxhckRlZmluaXRpb25PckV4dGVuc2lvbik7XG4gICAgICAgIGNhc2UgJ09iamVjdFR5cGUnOiByZXR1cm4gcHJpbnREZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyh0eXBlLCBvcHRpb25zLCAodCwgb3B0aW9ucywgZXh0KSA9PiBwcmludEZpZWxkQmFzZWRUeXBlRGVmaW5pdGlvbk9yRXh0ZW5zaW9uKCd0eXBlJywgdCwgb3B0aW9ucywgZXh0KSk7XG4gICAgICAgIGNhc2UgJ0ludGVyZmFjZVR5cGUnOiByZXR1cm4gcHJpbnREZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyh0eXBlLCBvcHRpb25zLCAodCwgb3B0aW9ucywgZXh0KSA9PiBwcmludEZpZWxkQmFzZWRUeXBlRGVmaW5pdGlvbk9yRXh0ZW5zaW9uKCdpbnRlcmZhY2UnLCB0LCBvcHRpb25zLCBleHQpKTtcbiAgICAgICAgY2FzZSAnVW5pb25UeXBlJzogcmV0dXJuIHByaW50RGVmaW5pdGlvbkFuZEV4dGVuc2lvbnModHlwZSwgb3B0aW9ucywgcHJpbnRVbmlvbkRlZmluaXRpb25PckV4dGVuc2lvbik7XG4gICAgICAgIGNhc2UgJ0VudW1UeXBlJzogcmV0dXJuIHByaW50RGVmaW5pdGlvbkFuZEV4dGVuc2lvbnModHlwZSwgb3B0aW9ucywgcHJpbnRFbnVtRGVmaW5pdGlvbk9yRXh0ZW5zaW9uKTtcbiAgICAgICAgY2FzZSAnSW5wdXRPYmplY3RUeXBlJzogcmV0dXJuIHByaW50RGVmaW5pdGlvbkFuZEV4dGVuc2lvbnModHlwZSwgb3B0aW9ucywgcHJpbnRJbnB1dERlZmluaXRpb25PckV4dGVuc2lvbik7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludFR5cGVEZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyA9IHByaW50VHlwZURlZmluaXRpb25BbmRFeHRlbnNpb25zO1xuZnVuY3Rpb24gcHJpbnREaXJlY3RpdmVEZWZpbml0aW9uKGRpcmVjdGl2ZSwgb3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdFByaW50T3B0aW9ucykge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGRpcmVjdGl2ZS5sb2NhdGlvbnMuam9pbignIHwgJyk7XG4gICAgcmV0dXJuIGAke3ByaW50RGVzY3JpcHRpb24oZGlyZWN0aXZlLCBvcHRpb25zLCBudWxsKX1kaXJlY3RpdmUgJHtkaXJlY3RpdmV9JHtwcmludEFyZ3MoZGlyZWN0aXZlLmFyZ3VtZW50cygpLCBvcHRpb25zKX0ke2RpcmVjdGl2ZS5yZXBlYXRhYmxlID8gJyByZXBlYXRhYmxlJyA6ICcnfSBvbiAke2xvY2F0aW9uc31gO1xufVxuZXhwb3J0cy5wcmludERpcmVjdGl2ZURlZmluaXRpb24gPSBwcmludERpcmVjdGl2ZURlZmluaXRpb247XG5mdW5jdGlvbiBwcmludEFwcGxpZWREaXJlY3RpdmVzKGFwcGxpZWREaXJlY3RpdmVzLCBvcHRpb25zLCBvbk5ld0xpbmVzID0gZmFsc2UsIGVuZFdpdGhOZXdMaW5lID0gb25OZXdMaW5lcykge1xuICAgIGlmIChhcHBsaWVkRGlyZWN0aXZlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3Qgam9pblN0ciA9IG9uTmV3TGluZXMgPyAnXFxuJyArIG9wdGlvbnMuaW5kZW50U3RyaW5nIDogJyAnO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBhcHBsaWVkRGlyZWN0aXZlcy5tYXAoZCA9PiBkLnRvU3RyaW5nKCkpLmpvaW4oam9pblN0cik7XG4gICAgcmV0dXJuIG9uTmV3TGluZXMgPyAnXFxuJyArIG9wdGlvbnMuaW5kZW50U3RyaW5nICsgZGlyZWN0aXZlcyArIChlbmRXaXRoTmV3TGluZSA/ICdcXG4nIDogJycpIDogJyAnICsgZGlyZWN0aXZlcztcbn1cbmZ1bmN0aW9uIHByaW50RGVzY3JpcHRpb24oZWxlbWVudCwgb3B0aW9ucywgZXh0ZW5zaW9uLCBpbmRlbnRhdGlvbiA9ICcnLCBmaXJzdEluQmxvY2sgPSB0cnVlKSB7XG4gICAgaWYgKGV4dGVuc2lvbiB8fCBlbGVtZW50LmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5ub0Rlc2NyaXB0aW9ucykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHByZWZlck11bHRpcGxlTGluZXMgPSBlbGVtZW50LmRlc2NyaXB0aW9uLmxlbmd0aCA+IDcwO1xuICAgIGNvbnN0IGJsb2NrU3RyaW5nID0gcHJpbnRCbG9ja1N0cmluZyhlbGVtZW50LmRlc2NyaXB0aW9uLCAnJywgcHJlZmVyTXVsdGlwbGVMaW5lcyk7XG4gICAgY29uc3QgcHJlZml4ID0gaW5kZW50YXRpb24gJiYgIWZpcnN0SW5CbG9jayA/ICdcXG4nICsgaW5kZW50YXRpb24gOiBpbmRlbnRhdGlvbjtcbiAgICByZXR1cm4gcHJlZml4ICsgYmxvY2tTdHJpbmcucmVwbGFjZSgvXFxuL2csICdcXG4nICsgaW5kZW50YXRpb24pICsgJ1xcbic7XG59XG5mdW5jdGlvbiBwcmludFNjYWxhckRlZmluaXRpb25PckV4dGVuc2lvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pIHtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gYXBwbGllZERpcmVjdGl2ZXModHlwZSwgb3B0aW9ucywgZXh0ZW5zaW9uKTtcbiAgICBpZiAoZXh0ZW5zaW9uICYmICFkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cHJpbnREZXNjcmlwdGlvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pfSR7cHJpbnRJc0V4dGVuc2lvbihleHRlbnNpb24pfXNjYWxhciAke3R5cGUubmFtZX0ke3ByaW50QXBwbGllZERpcmVjdGl2ZXMoZGlyZWN0aXZlcywgb3B0aW9ucywgdHJ1ZSwgZmFsc2UpfWA7XG59XG5mdW5jdGlvbiBwcmludEltcGxlbWVudGVkSW50ZXJmYWNlcyhpbXBsZW1lbnRhdGlvbnMpIHtcbiAgICByZXR1cm4gaW1wbGVtZW50YXRpb25zLmxlbmd0aFxuICAgICAgICA/ICcgaW1wbGVtZW50cyAnICsgaW1wbGVtZW50YXRpb25zLm1hcChpID0+IGkuaW50ZXJmYWNlLm5hbWUpLmpvaW4oJyAmICcpXG4gICAgICAgIDogJyc7XG59XG5mdW5jdGlvbiBwcmludEZpZWxkQmFzZWRUeXBlRGVmaW5pdGlvbk9yRXh0ZW5zaW9uKGtpbmQsIHR5cGUsIG9wdGlvbnMsIGV4dGVuc2lvbikge1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBhcHBsaWVkRGlyZWN0aXZlcyh0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pO1xuICAgIGNvbnN0IGludGVyZmFjZXMgPSBmb3JFeHRlbnNpb24odHlwZS5pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbnMoKSwgZXh0ZW5zaW9uKTtcbiAgICBsZXQgZmllbGRzID0gZm9yRXh0ZW5zaW9uKHR5cGUuZmllbGRzKCksIGV4dGVuc2lvbik7XG4gICAgaWYgKG9wdGlvbnMuZmllbGRGaWx0ZXIpIHtcbiAgICAgICAgZmllbGRzID0gZmllbGRzLmZpbHRlcihvcHRpb25zLmZpZWxkRmlsdGVyKTtcbiAgICB9XG4gICAgaWYgKCFkaXJlY3RpdmVzLmxlbmd0aCAmJiAhaW50ZXJmYWNlcy5sZW5ndGggJiYgIWZpZWxkcy5sZW5ndGggJiYgKGV4dGVuc2lvbiB8fCAhdHlwZS5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24odHlwZSwgb3B0aW9ucywgZXh0ZW5zaW9uKVxuICAgICAgICArIHByaW50SXNFeHRlbnNpb24oZXh0ZW5zaW9uKVxuICAgICAgICArIGtpbmQgKyAnICcgKyB0eXBlXG4gICAgICAgICsgcHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXMoaW50ZXJmYWNlcylcbiAgICAgICAgKyBwcmludEFwcGxpZWREaXJlY3RpdmVzKGRpcmVjdGl2ZXMsIG9wdGlvbnMsIHRydWUsIGZpZWxkcy5sZW5ndGggPiAwKVxuICAgICAgICArIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID4gMCA/ICcgJyA6ICcnKVxuICAgICAgICArIHByaW50RmllbGRzKGZpZWxkcywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmludFVuaW9uRGVmaW5pdGlvbk9yRXh0ZW5zaW9uKHR5cGUsIG9wdGlvbnMsIGV4dGVuc2lvbikge1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBhcHBsaWVkRGlyZWN0aXZlcyh0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pO1xuICAgIGNvbnN0IG1lbWJlcnMgPSBmb3JFeHRlbnNpb24odHlwZS5tZW1iZXJzKCksIGV4dGVuc2lvbik7XG4gICAgaWYgKCFkaXJlY3RpdmVzLmxlbmd0aCAmJiAhbWVtYmVycy5sZW5ndGggJiYgKGV4dGVuc2lvbiB8fCAhdHlwZS5wcmVzZXJ2ZUVtcHR5RGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgcG9zc2libGVUeXBlcyA9IG1lbWJlcnMubGVuZ3RoID8gJyA9ICcgKyBtZW1iZXJzLm1hcChtID0+IG0udHlwZSkuam9pbignIHwgJykgOiAnJztcbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pXG4gICAgICAgICsgcHJpbnRJc0V4dGVuc2lvbihleHRlbnNpb24pXG4gICAgICAgICsgJ3VuaW9uICcgKyB0eXBlXG4gICAgICAgICsgcHJpbnRBcHBsaWVkRGlyZWN0aXZlcyhkaXJlY3RpdmVzLCBvcHRpb25zLCB0cnVlLCBtZW1iZXJzLmxlbmd0aCA+IDApXG4gICAgICAgICsgcG9zc2libGVUeXBlcztcbn1cbmZ1bmN0aW9uIHByaW50RW51bURlZmluaXRpb25PckV4dGVuc2lvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pIHtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gYXBwbGllZERpcmVjdGl2ZXModHlwZSwgb3B0aW9ucywgZXh0ZW5zaW9uKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBmb3JFeHRlbnNpb24odHlwZS52YWx1ZXMsIGV4dGVuc2lvbik7XG4gICAgaWYgKCFkaXJlY3RpdmVzLmxlbmd0aCAmJiAhdmFsdWVzLmxlbmd0aCAmJiAoZXh0ZW5zaW9uIHx8ICF0eXBlLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB2YWxzID0gdmFsdWVzLm1hcCgodiwgaSkgPT4gcHJpbnREZXNjcmlwdGlvbih2LCBvcHRpb25zLCBleHRlbnNpb24sIG9wdGlvbnMuaW5kZW50U3RyaW5nLCAhaSlcbiAgICAgICAgKyBvcHRpb25zLmluZGVudFN0cmluZ1xuICAgICAgICArIHZcbiAgICAgICAgKyBwcmludEFwcGxpZWREaXJlY3RpdmVzKHYuYXBwbGllZERpcmVjdGl2ZXMsIG9wdGlvbnMpKTtcbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pXG4gICAgICAgICsgcHJpbnRJc0V4dGVuc2lvbihleHRlbnNpb24pXG4gICAgICAgICsgJ2VudW0gJyArIHR5cGVcbiAgICAgICAgKyBwcmludEFwcGxpZWREaXJlY3RpdmVzKGRpcmVjdGl2ZXMsIG9wdGlvbnMsIHRydWUsIHZhbHMubGVuZ3RoID4gMClcbiAgICAgICAgKyAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgdmFscy5sZW5ndGggPiAwID8gJyAnIDogJycpXG4gICAgICAgICsgcHJpbnRCbG9jayh2YWxzKTtcbn1cbmZ1bmN0aW9uIHByaW50SW5wdXREZWZpbml0aW9uT3JFeHRlbnNpb24odHlwZSwgb3B0aW9ucywgZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IGFwcGxpZWREaXJlY3RpdmVzKHR5cGUsIG9wdGlvbnMsIGV4dGVuc2lvbik7XG4gICAgY29uc3QgZmllbGRzID0gZm9yRXh0ZW5zaW9uKHR5cGUuZmllbGRzKCksIGV4dGVuc2lvbik7XG4gICAgaWYgKCFkaXJlY3RpdmVzLmxlbmd0aCAmJiAhZmllbGRzLmxlbmd0aCAmJiAoZXh0ZW5zaW9uIHx8ICF0eXBlLnByZXNlcnZlRW1wdHlEZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlLCBvcHRpb25zLCBleHRlbnNpb24pXG4gICAgICAgICsgcHJpbnRJc0V4dGVuc2lvbihleHRlbnNpb24pXG4gICAgICAgICsgJ2lucHV0ICcgKyB0eXBlXG4gICAgICAgICsgcHJpbnRBcHBsaWVkRGlyZWN0aXZlcyhkaXJlY3RpdmVzLCBvcHRpb25zLCB0cnVlLCBmaWVsZHMubGVuZ3RoID4gMClcbiAgICAgICAgKyAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgZmllbGRzLmxlbmd0aCA+IDAgPyAnICcgOiAnJylcbiAgICAgICAgKyBwcmludEZpZWxkcyhmaWVsZHMsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJpbnRGaWVsZHMoZmllbGRzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByaW50QmxvY2soZmllbGRzLm1hcCgoZiwgaSkgPT4gcHJpbnREZXNjcmlwdGlvbihmLCBvcHRpb25zLCB1bmRlZmluZWQsIG9wdGlvbnMuaW5kZW50U3RyaW5nLCAhaSlcbiAgICAgICAgKyBvcHRpb25zLmluZGVudFN0cmluZ1xuICAgICAgICArIHByaW50RmllbGQoZiwgb3B0aW9ucylcbiAgICAgICAgKyBwcmludEFwcGxpZWREaXJlY3RpdmVzKGFwcGxpZWREaXJlY3RpdmVzKGYsIG9wdGlvbnMpLCBvcHRpb25zKSkpO1xufVxuZnVuY3Rpb24gcHJpbnRGaWVsZChmaWVsZCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGFyZ3MgPSBmaWVsZC5raW5kID09ICdGaWVsZERlZmluaXRpb24nID8gcHJpbnRBcmdzKGZpZWxkLmFyZ3VtZW50cygpLCBvcHRpb25zLCBvcHRpb25zLmluZGVudFN0cmluZykgOiAnJztcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBmaWVsZC5raW5kID09PSAnSW5wdXRGaWVsZERlZmluaXRpb24nICYmIGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gJyA9ICcgKyAoMCwgdmFsdWVzXzEudmFsdWVUb1N0cmluZykoZmllbGQuZGVmYXVsdFZhbHVlLCBmaWVsZC50eXBlKVxuICAgICAgICA6ICcnO1xuICAgIHJldHVybiBgJHtmaWVsZC5uYW1lfSR7YXJnc306ICR7ZmllbGQudHlwZX0ke2RlZmF1bHRWYWx1ZX1gO1xufVxuZnVuY3Rpb24gcHJpbnRBcmdzKGFyZ3MsIG9wdGlvbnMsIGluZGVudGF0aW9uID0gJycpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAoYXJncy5ldmVyeShhcmcgPT4gIWFyZy5kZXNjcmlwdGlvbikpIHtcbiAgICAgICAgcmV0dXJuICcoJyArIGFyZ3MubWFwKGFyZyA9PiBwcmludEFyZyhhcmcsIG9wdGlvbnMpKS5qb2luKCcsICcpICsgJyknO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXR0ZWRBcmdzID0gYXJnc1xuICAgICAgICAubWFwKChhcmcsIGkpID0+IHByaW50RGVzY3JpcHRpb24oYXJnLCBvcHRpb25zLCBudWxsLCAnICAnICsgaW5kZW50YXRpb24sICFpKSArICcgICcgKyBpbmRlbnRhdGlvbiArIHByaW50QXJnKGFyZywgb3B0aW9ucykpXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gYChcXG4ke2Zvcm1hdHRlZEFyZ3N9XFxuJHtpbmRlbnRhdGlvbn0pYDtcbn1cbmZ1bmN0aW9uIHByaW50QXJnKGFyZywgb3B0aW9ucykge1xuICAgIHJldHVybiBgJHthcmd9JHtwcmludEFwcGxpZWREaXJlY3RpdmVzKGFwcGxpZWREaXJlY3RpdmVzKGFyZywgb3B0aW9ucyksIG9wdGlvbnMpfWA7XG59XG5mdW5jdGlvbiBwcmludEJsb2NrKGl0ZW1zKSB7XG4gICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCAhPT0gMCA/ICd7XFxuJyArIGl0ZW1zLmpvaW4oJ1xcbicpICsgJ1xcbn0nIDogJyc7XG59XG5mdW5jdGlvbiBwcmludEJsb2NrU3RyaW5nKHZhbHVlLCBpbmRlbnRhdGlvbiA9ICcnLCBwcmVmZXJNdWx0aXBsZUxpbmVzID0gZmFsc2UpIHtcbiAgICBjb25zdCBpc1NpbmdsZUxpbmUgPSB2YWx1ZS5pbmRleE9mKCdcXG4nKSA9PT0gLTE7XG4gICAgY29uc3QgaGFzTGVhZGluZ1NwYWNlID0gdmFsdWVbMF0gPT09ICcgJyB8fCB2YWx1ZVswXSA9PT0gJ1xcdCc7XG4gICAgY29uc3QgaGFzVHJhaWxpbmdRdW90ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnXCInO1xuICAgIGNvbnN0IGhhc1RyYWlsaW5nU2xhc2ggPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJ1xcXFwnO1xuICAgIGNvbnN0IHByaW50QXNNdWx0aXBsZUxpbmVzID0gIWlzU2luZ2xlTGluZSB8fFxuICAgICAgICBoYXNUcmFpbGluZ1F1b3RlIHx8XG4gICAgICAgIGhhc1RyYWlsaW5nU2xhc2ggfHxcbiAgICAgICAgcHJlZmVyTXVsdGlwbGVMaW5lcztcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzICYmICEoaXNTaW5nbGVMaW5lICYmIGhhc0xlYWRpbmdTcGFjZSkpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50YXRpb247XG4gICAgfVxuICAgIHJlc3VsdCArPSBpbmRlbnRhdGlvbiA/IHZhbHVlLnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIGluZGVudGF0aW9uKSA6IHZhbHVlO1xuICAgIGlmIChwcmludEFzTXVsdGlwbGVMaW5lcykge1xuICAgICAgICByZXN1bHQgKz0gJ1xcbic7XG4gICAgfVxuICAgIHJldHVybiAnXCJcIlwiJyArIHJlc3VsdC5yZXBsYWNlKC9cIlwiXCIvZywgJ1xcXFxcIlwiXCInKSArICdcIlwiXCInO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZ3JhZGVTdWJncmFwaHNJZk5lY2Vzc2FyeSA9IGV4cG9ydHMuUmVtb3ZlZFRhZ09uRXh0ZXJuYWwgPSBleHBvcnRzLkZpZWxkc0FyZ3VtZW50Q29lcmNpb25Ub1N0cmluZyA9IGV4cG9ydHMuUHJvdmlkZXNPbk5vbkNvbXBvc2l0ZVJlbW92YWwgPSBleHBvcnRzLlByb3ZpZGVzT3JSZXF1aXJlc09uSW50ZXJmYWNlRmllbGRSZW1vdmFsID0gZXhwb3J0cy5LZXlPbkludGVyZmFjZVJlbW92YWwgPSBleHBvcnRzLlNoYXJlYWJsZVR5cGVBZGRpdGlvbiA9IGV4cG9ydHMuU2hhcmVhYmxlRmllbGRBZGRpdGlvbiA9IGV4cG9ydHMuSW5hY3RpdmVQcm92aWRlc09yUmVxdWlyZXNGaWVsZHNSZW1vdmFsID0gZXhwb3J0cy5JbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc1JlbW92YWwgPSBleHBvcnRzLlR5cGVXaXRoT25seVVudXNlZEV4dGVybmFsUmVtb3ZhbCA9IGV4cG9ydHMuVW51c2VkRXh0ZXJuYWxSZW1vdmFsID0gZXhwb3J0cy5FeHRlcm5hbE9uSW50ZXJmYWNlUmVtb3ZhbCA9IGV4cG9ydHMuVHlwZUV4dGVuc2lvblJlbW92YWwgPSBleHBvcnRzLkV4dGVybmFsT25UeXBlRXh0ZW5zaW9uUmVtb3ZhbCA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgZGVmaW5pdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zXCIpO1xuY29uc3QgZmVkZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vZmVkZXJhdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGZlZGVyYXRpb25TcGVjXzEgPSByZXF1aXJlKFwiLi9mZWRlcmF0aW9uU3BlY1wiKTtcbmNvbnN0IHZhbHVlc18xID0gcmVxdWlyZShcIi4vdmFsdWVzXCIpO1xuY2xhc3MgRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25SZW1vdmFsIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCkge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMuaWQgPSAnRVhURVJOQUxfT05fVFlQRV9FWFRFTlNJT05fUkVNT1ZBTCc7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFJlbW92ZWQgQGV4dGVybmFsIGZyb20gZmllbGQgXCIke3RoaXMuZmllbGR9XCIgYXMgaXQgaXMgYSBrZXkgb2YgYW4gZXh0ZW5zaW9uIHR5cGVgO1xuICAgIH1cbn1cbmV4cG9ydHMuRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25SZW1vdmFsID0gRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25SZW1vdmFsO1xuY2xhc3MgVHlwZUV4dGVuc2lvblJlbW92YWwge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pZCA9ICdUWVBFX0VYVEVOU0lPTl9SRU1PVkFMJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgU3dpdGNoZWQgdHlwZSBcIiR7dGhpcy50eXBlfVwiIGZyb20gYW4gZXh0ZW5zaW9uIHRvIGEgZGVmaW5pdGlvbmA7XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlRXh0ZW5zaW9uUmVtb3ZhbCA9IFR5cGVFeHRlbnNpb25SZW1vdmFsO1xuY2xhc3MgRXh0ZXJuYWxPbkludGVyZmFjZVJlbW92YWwge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkKSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5pZCA9ICdFWFRFUk5BTF9PTl9JTlRFUkZBQ0VfUkVNT1ZBTCc7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFJlbW92ZWQgQGV4dGVybmFsIGRpcmVjdGl2ZSBvbiBpbnRlcmZhY2UgdHlwZSBmaWVsZCBcIiR7dGhpcy5maWVsZH1cIjogQGV4dGVybmFsIGlzIG5vbnNlbnNpY2FsIG9uIGludGVyZmFjZSBmaWVsZHNgO1xuICAgIH1cbn1cbmV4cG9ydHMuRXh0ZXJuYWxPbkludGVyZmFjZVJlbW92YWwgPSBFeHRlcm5hbE9uSW50ZXJmYWNlUmVtb3ZhbDtcbmNsYXNzIFVudXNlZEV4dGVybmFsUmVtb3ZhbCB7XG4gICAgY29uc3RydWN0b3IoZmllbGQpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLmlkID0gJ1VOVVNFRF9FWFRFUk5BTF9SRU1PVkFMJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgUmVtb3ZlZCBAZXh0ZXJuYWwgZmllbGQgXCIke3RoaXMuZmllbGR9XCIgYXMgaXQgd2FzIG5vdCB1c2VkIGluIGFueSBAa2V5LCBAcHJvdmlkZXMgb3IgQHJlcXVpcmVzYDtcbiAgICB9XG59XG5leHBvcnRzLlVudXNlZEV4dGVybmFsUmVtb3ZhbCA9IFVudXNlZEV4dGVybmFsUmVtb3ZhbDtcbmNsYXNzIFR5cGVXaXRoT25seVVudXNlZEV4dGVybmFsUmVtb3ZhbCB7XG4gICAgY29uc3RydWN0b3IodHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmlkID0gJ1RZUEVfV0lUSF9PTkxZX1VOVVNFRF9FWFRFUk5BTF9SRU1PVkFMJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgUmVtb3ZlZCB0eXBlICR7dGhpcy50eXBlfSB0aGF0IGlzIG5vdCByZWZlcmVuY2VkIGluIHRoZSBzY2hlbWEgYW5kIG9ubHkgZGVjbGFyZXMgdW51c2VkIEBleHRlcm5hbCBmaWVsZHNgO1xuICAgIH1cbn1cbmV4cG9ydHMuVHlwZVdpdGhPbmx5VW51c2VkRXh0ZXJuYWxSZW1vdmFsID0gVHlwZVdpdGhPbmx5VW51c2VkRXh0ZXJuYWxSZW1vdmFsO1xuY2xhc3MgSW5hY3RpdmVQcm92aWRlc09yUmVxdWlyZXNSZW1vdmFsIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHJlbW92ZWQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgICAgIHRoaXMuaWQgPSAnSU5BQ1RJVkVfUFJPVklERVNfT1JfUkVRVUlSRVNfUkVNT1ZBTCc7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFJlbW92ZWQgZGlyZWN0aXZlICR7dGhpcy5yZW1vdmVkfSBvbiBcIiR7dGhpcy5wYXJlbnR9XCI6IG5vbmUgb2YgdGhlIGZpZWxkcyB3ZXJlIHRydWx5IEBleHRlcm5hbGA7XG4gICAgfVxufVxuZXhwb3J0cy5JbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc1JlbW92YWwgPSBJbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc1JlbW92YWw7XG5jbGFzcyBJbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc0ZpZWxkc1JlbW92YWwge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgb3JpZ2luYWwsIHVwZGF0ZWQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub3JpZ2luYWwgPSBvcmlnaW5hbDtcbiAgICAgICAgdGhpcy51cGRhdGVkID0gdXBkYXRlZDtcbiAgICAgICAgdGhpcy5pZCA9ICdJTkFDVElWRV9QUk9WSURFU19PUl9SRVFVSVJFU19GSUVMRFNfUkVNT1ZBTCc7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFVwZGF0ZWQgZGlyZWN0aXZlICR7dGhpcy5vcmlnaW5hbH0gb24gXCIke3RoaXMucGFyZW50fVwiIHRvICR7dGhpcy51cGRhdGVkfTogcmVtb3ZlZCBmaWVsZHMgdGhhdCB3ZXJlIG5vdCB0cnVseSBAZXh0ZXJuYWxgO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5hY3RpdmVQcm92aWRlc09yUmVxdWlyZXNGaWVsZHNSZW1vdmFsID0gSW5hY3RpdmVQcm92aWRlc09yUmVxdWlyZXNGaWVsZHNSZW1vdmFsO1xuY2xhc3MgU2hhcmVhYmxlRmllbGRBZGRpdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZmllbGQsIGRlY2xhcmluZ1N1YmdyYXBocykge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMuZGVjbGFyaW5nU3ViZ3JhcGhzID0gZGVjbGFyaW5nU3ViZ3JhcGhzO1xuICAgICAgICB0aGlzLmlkID0gJ1NIQVJFQUJMRV9GSUVMRF9BRERJVElPTic7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYEFkZGVkIEBzaGFyZWFibGUgdG8gZmllbGQgXCIke3RoaXMuZmllbGR9XCI6IGl0IGlzIGFsc28gcmVzb2x2ZWQgYnkgJHsoMCwgZmVkZXJhdGlvbl8xLnByaW50U3ViZ3JhcGhOYW1lcykodGhpcy5kZWNsYXJpbmdTdWJncmFwaHMpfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TaGFyZWFibGVGaWVsZEFkZGl0aW9uID0gU2hhcmVhYmxlRmllbGRBZGRpdGlvbjtcbmNsYXNzIFNoYXJlYWJsZVR5cGVBZGRpdGlvbiB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgZGVjbGFyaW5nU3ViZ3JhcGhzKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuZGVjbGFyaW5nU3ViZ3JhcGhzID0gZGVjbGFyaW5nU3ViZ3JhcGhzO1xuICAgICAgICB0aGlzLmlkID0gJ1NIQVJFQUJMRV9UWVBFX0FERElUSU9OJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQWRkZWQgQHNoYXJlYWJsZSB0byB0eXBlIFwiJHt0aGlzLnR5cGV9XCI6IGl0IGlzIGEgXCJ2YWx1ZSB0eXBlXCIgYW5kIGlzIGFsc28gZGVjbGFyZWQgaW4gJHsoMCwgZmVkZXJhdGlvbl8xLnByaW50U3ViZ3JhcGhOYW1lcykodGhpcy5kZWNsYXJpbmdTdWJncmFwaHMpfWA7XG4gICAgfVxufVxuZXhwb3J0cy5TaGFyZWFibGVUeXBlQWRkaXRpb24gPSBTaGFyZWFibGVUeXBlQWRkaXRpb247XG5jbGFzcyBLZXlPbkludGVyZmFjZVJlbW92YWwge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pZCA9ICdLRVlfT05fSU5URVJGQUNFX1JFTU9WQUwnO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBSZW1vdmVkIEBrZXkgb24gaW50ZXJmYWNlIFwiJHt0aGlzLnR5cGV9XCI6IHdoaWxlIGFsbG93ZWQgYnkgZmVkZXJhdGlvbiAwLngsIEBrZXkgb24gaW50ZXJmYWNlcyB3ZXJlIGNvbXBsZXRlbHkgaWdub3JlZC9oYWQgbm8gZWZmZWN0YDtcbiAgICB9XG59XG5leHBvcnRzLktleU9uSW50ZXJmYWNlUmVtb3ZhbCA9IEtleU9uSW50ZXJmYWNlUmVtb3ZhbDtcbmNsYXNzIFByb3ZpZGVzT3JSZXF1aXJlc09uSW50ZXJmYWNlRmllbGRSZW1vdmFsIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgZGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgIHRoaXMuaWQgPSAnUFJPVklERVNfT1JfUkVRVUlSRVNfT05fSU5URVJGQUNFX0ZJRUxEX1JFTU9WQUwnO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBSZW1vdmVkIEAke3RoaXMuZGlyZWN0aXZlfSBvbiBpbnRlcmZhY2UgZmllbGQgXCIke3RoaXMuZmllbGR9XCI6IHdoaWxlIGFsbG93ZWQgYnkgZmVkZXJhdGlvbiAwLngsIEAke3RoaXMuZGlyZWN0aXZlfSBvbiBpbnRlcmZhY2UgZmllbGRzIHdlcmUgY29tcGxldGVseSBpZ25vcmVkL2hhZCBubyBlZmZlY3RgO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdmlkZXNPclJlcXVpcmVzT25JbnRlcmZhY2VGaWVsZFJlbW92YWwgPSBQcm92aWRlc09yUmVxdWlyZXNPbkludGVyZmFjZUZpZWxkUmVtb3ZhbDtcbmNsYXNzIFByb3ZpZGVzT25Ob25Db21wb3NpdGVSZW1vdmFsIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgdHlwZSkge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaWQgPSAnUFJPVklERVNfT05fTk9OX0NPTVBPU0lURV9SRU1PVkFMJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgUmVtb3ZlZCBAcHJvdmlkZXMgZGlyZWN0aXZlIG9uIGZpZWxkIFwiJHt0aGlzLmZpZWxkfVwiIGFzIGl0IGlzIG9mIG5vbi1jb21wb3NpdGUgdHlwZSBcIiR7dGhpcy50eXBlfVwiOiB3aGlsZSBub3QgcmVqZWN0ZWQgYnkgZmVkZXJhdGlvbiAwLngsIHN1Y2ggQHByb3ZpZGUgaXMgbm9uc2Vuc2ljYWwgYW5kIHdhcyBpZ25vcmVkYDtcbiAgICB9XG59XG5leHBvcnRzLlByb3ZpZGVzT25Ob25Db21wb3NpdGVSZW1vdmFsID0gUHJvdmlkZXNPbk5vbkNvbXBvc2l0ZVJlbW92YWw7XG5jbGFzcyBGaWVsZHNBcmd1bWVudENvZXJjaW9uVG9TdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGRpcmVjdGl2ZSwgYmVmb3JlLCBhZnRlcikge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgdGhpcy5iZWZvcmUgPSBiZWZvcmU7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgdGhpcy5pZCA9ICdGSUVMRFNfQVJHVU1FTlRfQ09FUkNJT05fVE9fU1RSSU5HJztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgQ29lcmNlZCBcImZpZWxkc1wiIGFyZ3VtZW50IGZvciBkaXJlY3RpdmUgQCR7dGhpcy5kaXJlY3RpdmV9IGZvciBcIiR7dGhpcy5lbGVtZW50fVwiIGludG8gYSBzdHJpbmc6IGNvZXJjZWQgZnJvbSAke3RoaXMuYmVmb3JlfSB0byAke3RoaXMuYWZ0ZXJ9YDtcbiAgICB9XG59XG5leHBvcnRzLkZpZWxkc0FyZ3VtZW50Q29lcmNpb25Ub1N0cmluZyA9IEZpZWxkc0FyZ3VtZW50Q29lcmNpb25Ub1N0cmluZztcbmNsYXNzIFJlbW92ZWRUYWdPbkV4dGVybmFsIHtcbiAgICBjb25zdHJ1Y3RvcihhcHBsaWNhdGlvbiwgZWxlbWVudCkge1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uID0gYXBwbGljYXRpb247XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuaWQgPSAnUkVNT1ZFRF9UQUdfT05fRVhURVJOQUwnO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBSZW1vdmVkICR7dGhpcy5hcHBsaWNhdGlvbn0gYXBwbGljYXRpb24gb24gQGV4dGVybmFsIFwiJHt0aGlzLmVsZW1lbnR9XCIgYXMgdGhlIEB0YWcgYXBwbGljYXRpb24gaXMgb24gYW5vdGhlciBkZWZpbml0aW9uYDtcbiAgICB9XG59XG5leHBvcnRzLlJlbW92ZWRUYWdPbkV4dGVybmFsID0gUmVtb3ZlZFRhZ09uRXh0ZXJuYWw7XG5mdW5jdGlvbiB1cGdyYWRlU3ViZ3JhcGhzSWZOZWNlc3NhcnkoaW5wdXRzKSB7XG4gICAgY29uc3QgY2hhbmdlcyA9IG5ldyBNYXAoKTtcbiAgICBpZiAoaW5wdXRzLnZhbHVlcygpLmV2ZXJ5KChzKSA9PiBzLmlzRmVkMlN1YmdyYXBoKCkpKSB7XG4gICAgICAgIHJldHVybiB7IHN1YmdyYXBoczogaW5wdXRzLCBjaGFuZ2VzIH07XG4gICAgfVxuICAgIGNvbnN0IHN1YmdyYXBocyA9IG5ldyBmZWRlcmF0aW9uXzEuU3ViZ3JhcGhzKCk7XG4gICAgbGV0IGVycm9ycyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc3ViZ3JhcGggb2YgaW5wdXRzLnZhbHVlcygpKSB7XG4gICAgICAgIGlmIChzdWJncmFwaC5pc0ZlZDJTdWJncmFwaCgpKSB7XG4gICAgICAgICAgICBzdWJncmFwaHMuYWRkKHN1YmdyYXBoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyU3ViZ3JhcGhzID0gaW5wdXRzLnZhbHVlcygpLmZpbHRlcigocykgPT4gcy5uYW1lICE9PSBzdWJncmFwaC5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IG5ldyBTY2hlbWFVcGdyYWRlcihzdWJncmFwaCwgb3RoZXJTdWJncmFwaHMpLnVwZ3JhZGUoKTtcbiAgICAgICAgICAgIGlmIChyZXMuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChyZXMuZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YmdyYXBocy5hZGQocmVzLnVwZ3JhZGVkKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzLnNldChzdWJncmFwaC5uYW1lLCByZXMuY2hhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPT09IDAgPyB7IHN1YmdyYXBocywgY2hhbmdlcyB9IDogeyBlcnJvcnMgfTtcbn1cbmV4cG9ydHMudXBncmFkZVN1YmdyYXBoc0lmTmVjZXNzYXJ5ID0gdXBncmFkZVN1YmdyYXBoc0lmTmVjZXNzYXJ5O1xuZnVuY3Rpb24gaXNGZWRlcmF0aW9uVHlwZUV4dGVuc2lvbih0eXBlKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSAoMCwgZmVkZXJhdGlvbl8xLmZlZGVyYXRpb25NZXRhZGF0YSkodHlwZS5zY2hlbWEoKSk7XG4gICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShtZXRhZGF0YSwgJ1Nob3VsZCBiZSBhIHN1YmdyYXBoIHNjaGVtYScpO1xuICAgIGNvbnN0IGhhc0V4dGVuZCA9IHR5cGUuaGFzQXBwbGllZERpcmVjdGl2ZShtZXRhZGF0YS5leHRlbmRzRGlyZWN0aXZlKCkpO1xuICAgIHJldHVybiAodHlwZS5oYXNFeHRlbnNpb25FbGVtZW50cygpIHx8IGhhc0V4dGVuZClcbiAgICAgICAgJiYgKCgwLCBkZWZpbml0aW9uc18xLmlzT2JqZWN0VHlwZSkodHlwZSkgfHwgKDAsIGRlZmluaXRpb25zXzEuaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSlcbiAgICAgICAgJiYgKGhhc0V4dGVuZCB8fCAhdHlwZS5oYXNOb25FeHRlbnNpb25FbGVtZW50cygpKTtcbn1cbmZ1bmN0aW9uIGlzUm9vdFR5cGVFeHRlbnNpb24odHlwZSkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gKDAsIGZlZGVyYXRpb25fMS5mZWRlcmF0aW9uTWV0YWRhdGEpKHR5cGUuc2NoZW1hKCkpO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkobWV0YWRhdGEsICdTaG91bGQgYmUgYSBzdWJncmFwaCBzY2hlbWEnKTtcbiAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKSh0eXBlKVxuICAgICAgICAmJiB0eXBlLmlzUm9vdFR5cGUoKVxuICAgICAgICAmJiAodHlwZS5oYXNBcHBsaWVkRGlyZWN0aXZlKG1ldGFkYXRhLmV4dGVuZHNEaXJlY3RpdmUoKSkgfHwgKHR5cGUuaGFzRXh0ZW5zaW9uRWxlbWVudHMoKSAmJiAhdHlwZS5oYXNOb25FeHRlbnNpb25FbGVtZW50cygpKSk7XG59XG5mdW5jdGlvbiByZXNvbHZlc0ZpZWxkKHN1YmdyYXBoLCBmaWVsZCkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gc3ViZ3JhcGgubWV0YWRhdGEoKTtcbiAgICBjb25zdCB0ID0gc3ViZ3JhcGguc2NoZW1hLnR5cGUoZmllbGQucGFyZW50Lm5hbWUpO1xuICAgIGlmICghdCB8fCAhKDAsIGRlZmluaXRpb25zXzEuaXNPYmplY3RUeXBlKSh0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGYgPSB0LmZpZWxkKGZpZWxkLm5hbWUpO1xuICAgIHJldHVybiAhIWYgJiYgKCFtZXRhZGF0YS5pc0ZpZWxkRXh0ZXJuYWwoZikgfHwgbWV0YWRhdGEuaXNGaWVsZFBhcnRpYWxseUV4dGVybmFsKGYpKTtcbn1cbmZ1bmN0aW9uIGdldEZpZWxkKHNjaGVtYSwgdHlwZU5hbWUsIGZpZWxkTmFtZSkge1xuICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEudHlwZSh0eXBlTmFtZSk7XG4gICAgcmV0dXJuIHR5cGUgJiYgKDAsIGRlZmluaXRpb25zXzEuaXNDb21wb3NpdGVUeXBlKSh0eXBlKSA/IHR5cGUuZmllbGQoZmllbGROYW1lKSA6IHVuZGVmaW5lZDtcbn1cbmNsYXNzIFNjaGVtYVVwZ3JhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcmlnaW5hbFN1YmdyYXBoLCBvdGhlclN1YmdyYXBocykge1xuICAgICAgICB0aGlzLm9yaWdpbmFsU3ViZ3JhcGggPSBvcmlnaW5hbFN1YmdyYXBoO1xuICAgICAgICB0aGlzLm90aGVyU3ViZ3JhcGhzID0gb3RoZXJTdWJncmFwaHM7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyB1dGlsc18xLk11bHRpTWFwKCk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIHRoaXMuc2NoZW1hID0gb3JpZ2luYWxTdWJncmFwaC5zY2hlbWEuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5yZW5hbWVGZWRlcmF0aW9uVHlwZXMoKTtcbiAgICAgICAgdGhpcy5zdWJncmFwaCA9IG5ldyBmZWRlcmF0aW9uXzEuU3ViZ3JhcGgob3JpZ2luYWxTdWJncmFwaC5uYW1lLCBvcmlnaW5hbFN1YmdyYXBoLnVybCwgdGhpcy5zY2hlbWEpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgKDAsIGZlZGVyYXRpb25fMS5zZXRTY2hlbWFBc0ZlZDJTdWJncmFwaCkodGhpcy5zY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCBjYXVzZXMgPSAoMCwgZXJyb3JfMS5lcnJvckNhdXNlcykoZSk7XG4gICAgICAgICAgICBpZiAoY2F1c2VzKSB7XG4gICAgICAgICAgICAgICAgY2F1c2VzLmZvckVhY2goKGMpID0+IHRoaXMuYWRkRXJyb3IoYykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gdGhpcy5zdWJncmFwaC5tZXRhZGF0YSgpO1xuICAgIH1cbiAgICBhZGRFcnJvcihlKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goKDAsIGZlZGVyYXRpb25fMS5hZGRTdWJncmFwaFRvRXJyb3IpKGUsIHRoaXMuc3ViZ3JhcGgubmFtZSwgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMKSk7XG4gICAgfVxuICAgIHJlbmFtZUZlZGVyYXRpb25UeXBlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlU3BlYyBvZiBmZWRlcmF0aW9uU3BlY18xLkZFREVSQVRJT05fU1BFQ19UWVBFUykge1xuICAgICAgICAgICAgY29uc3QgdHlwZU5hbWVJbk9yaWdpbmFsID0gdGhpcy5vcmlnaW5hbFN1YmdyYXBoLm1ldGFkYXRhKCkuZmVkZXJhdGlvblR5cGVOYW1lSW5TY2hlbWEodHlwZVNwZWMubmFtZSk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5zY2hlbWEudHlwZSh0eXBlTmFtZUluT3JpZ2luYWwpO1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0eXBlLnJlbmFtZShgZmVkZXJhdGlvbl9fJHt0eXBlU3BlYy5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGV4dGVybmFsKGVsdCkge1xuICAgICAgICBjb25zdCBhcHBsaWNhdGlvbnMgPSBlbHQuYXBwbGllZERpcmVjdGl2ZXNPZih0aGlzLm1ldGFkYXRhLmV4dGVybmFsRGlyZWN0aXZlKCkpO1xuICAgICAgICByZXR1cm4gYXBwbGljYXRpb25zLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IGFwcGxpY2F0aW9uc1swXTtcbiAgICB9XG4gICAgYWRkQ2hhbmdlKGNoYW5nZSkge1xuICAgICAgICB0aGlzLmNoYW5nZXMuYWRkKGNoYW5nZS5pZCwgY2hhbmdlKTtcbiAgICB9XG4gICAgY2hlY2tGb3JFeHRlbnNpb25XaXRoTm9CYXNlKHR5cGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoaXNSb290VHlwZUV4dGVuc2lvbih0eXBlKSB8fCAhaXNGZWRlcmF0aW9uVHlwZUV4dGVuc2lvbih0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkFTVCA9IChfYSA9ICgwLCB1dGlsc18xLmZpcnN0T2YpKHR5cGUuZXh0ZW5zaW9ucygpLnZhbHVlcygpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNvdXJjZUFTVDtcbiAgICAgICAgZm9yIChjb25zdCBzdWJncmFwaCBvZiB0aGlzLm90aGVyU3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICBjb25zdCBvdGhlclR5cGUgPSBzdWJncmFwaC5zY2hlbWEudHlwZSh0eXBlLm5hbWUpO1xuICAgICAgICAgICAgaWYgKG90aGVyVHlwZSAmJiBvdGhlclR5cGUuaGFzTm9uRXh0ZW5zaW9uRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZEVycm9yKGVycm9yXzEuRVJST1JTLkVYVEVOU0lPTl9XSVRIX05PX0JBU0UuZXJyKGBUeXBlIFwiJHt0eXBlfVwiIGlzIGFuIGV4dGVuc2lvbiB0eXBlLCBidXQgdGhlcmUgaXMgbm8gdHlwZSBkZWZpbml0aW9uIGZvciBcIiR7dHlwZX1cIiBpbiBhbnkgc3ViZ3JhcGguYCwgeyBub2RlczogZXh0ZW5zaW9uQVNUIH0pKTtcbiAgICB9XG4gICAgcHJlVXBncmFkZVZhbGlkYXRpb25zKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy5zY2hlbWEudHlwZXMoKSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0ZvckV4dGVuc2lvbldpdGhOb0Jhc2UodHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBncmFkZSgpIHtcbiAgICAgICAgdGhpcy5wcmVVcGdyYWRlVmFsaWRhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5maXhGZWRlcmF0aW9uRGlyZWN0aXZlc0FyZ3VtZW50cygpO1xuICAgICAgICB0aGlzLnJlbW92ZUV4dGVybmFsT25JbnRlcmZhY2UoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVFeHRlcm5hbE9uVHlwZUV4dGVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5maXhJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVUeXBlRXh0ZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnJlbW92ZURpcmVjdGl2ZXNPbkludGVyZmFjZSgpO1xuICAgICAgICB0aGlzLnJlbW92ZVByb3ZpZGVzT25Ob25Db21wb3NpdGUoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVVbnVzZWRFeHRlcm5hbHMoKTtcbiAgICAgICAgdGhpcy5hZGRTaGFyZWFibGUoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVUYWdPbkV4dGVybmFsKCk7XG4gICAgICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcnM6IHRoaXMuZXJyb3JzIH07XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc3ViZ3JhcGgudmFsaWRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXBncmFkZWQ6IHRoaXMuc3ViZ3JhcGgsXG4gICAgICAgICAgICAgICAgY2hhbmdlczogdGhpcy5jaGFuZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gKDAsIGVycm9yXzEuZXJyb3JDYXVzZXMpKGUpO1xuICAgICAgICAgICAgaWYgKCFlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JzIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZml4RmVkZXJhdGlvbkRpcmVjdGl2ZXNBcmd1bWVudHMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgW3RoaXMubWV0YWRhdGEua2V5RGlyZWN0aXZlKCksIHRoaXMubWV0YWRhdGEucmVxdWlyZXNEaXJlY3RpdmUoKSwgdGhpcy5tZXRhZGF0YS5wcm92aWRlc0RpcmVjdGl2ZSgpXSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiBBcnJheS5mcm9tKGRpcmVjdGl2ZS5hcHBsaWNhdGlvbnMoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBhcHBsaWNhdGlvbi5hcmd1bWVudHMoKS5maWVsZHM7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykgJiYgZmllbGRzLmV2ZXJ5KChmKSA9PiB0eXBlb2YgZiA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VGZWRlcmF0aW9uRGlyZWN0aXZlQXBwbGljYXRpb24oYXBwbGljYXRpb24sIGFwcGxpY2F0aW9uLnRvU3RyaW5nKCksIGZpZWxkcy5qb2luKCcgJyksIGRpcmVjdGl2ZS5zb3VyY2VBU1QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IGFwcGxpY2F0aW9uLnNvdXJjZUFTVDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZXMgJiYgbm9kZXMua2luZCA9PT0gJ0RpcmVjdGl2ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhcmdOb2RlIG9mIChfYSA9IG5vZGVzLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdOb2RlLm5hbWUudmFsdWUgPT09ICdmaWVsZHMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ05vZGUudmFsdWUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuRU5VTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VGZWRlcmF0aW9uRGlyZWN0aXZlQXBwbGljYXRpb24oYXBwbGljYXRpb24sICgwLCBncmFwaHFsXzEucHJpbnQpKG5vZGVzKSwgZmllbGRzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5ub2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXJnTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLlNUUklORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmaWVsZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRXh0ZXJuYWxPbkludGVyZmFjZSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGYgb2YgdGhpcy5zY2hlbWEuaW50ZXJmYWNlVHlwZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBpdGYuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleHRlcm5hbCA9IHRoaXMuZXh0ZXJuYWwoZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmIChleHRlcm5hbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgRXh0ZXJuYWxPbkludGVyZmFjZVJlbW92YWwoZmllbGQuY29vcmRpbmF0ZSkpO1xuICAgICAgICAgICAgICAgICAgICBleHRlcm5hbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVwbGFjZUZlZGVyYXRpb25EaXJlY3RpdmVBcHBsaWNhdGlvbihhcHBsaWNhdGlvbiwgYmVmb3JlLCBmaWVsZHMsIHVwZGF0ZWRTb3VyY2VBU1QpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gYXBwbGljYXRpb24uZGVmaW5pdGlvbjtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gYXBwbGljYXRpb24ucGFyZW50O1xuICAgICAgICBhcHBsaWNhdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgY29uc3QgbmV3RGlyZWN0aXZlID0gcGFyZW50LmFwcGx5RGlyZWN0aXZlKGRpcmVjdGl2ZSwgeyBmaWVsZHMgfSk7XG4gICAgICAgIG5ld0RpcmVjdGl2ZS5zb3VyY2VBU1QgPSB1cGRhdGVkU291cmNlQVNUO1xuICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgRmllbGRzQXJndW1lbnRDb2VyY2lvblRvU3RyaW5nKHBhcmVudC5jb29yZGluYXRlLCBkaXJlY3RpdmUubmFtZSwgYmVmb3JlLCBuZXdEaXJlY3RpdmUudG9TdHJpbmcoKSkpO1xuICAgIH1cbiAgICBmaXhJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXMoKSB7XG4gICAgICAgICgwLCBmZWRlcmF0aW9uXzEucmVtb3ZlSW5hY3RpdmVQcm92aWRlc0FuZFJlcXVpcmVzKSh0aGlzLnNjaGVtYSwgKGZpZWxkLCBvcmlnaW5hbCwgdXBkYXRlZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgSW5hY3RpdmVQcm92aWRlc09yUmVxdWlyZXNGaWVsZHNSZW1vdmFsKGZpZWxkLmNvb3JkaW5hdGUsIG9yaWdpbmFsLnRvU3RyaW5nKCksIHVwZGF0ZWQudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IEluYWN0aXZlUHJvdmlkZXNPclJlcXVpcmVzUmVtb3ZhbChmaWVsZC5jb29yZGluYXRlLCBvcmlnaW5hbC50b1N0cmluZygpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVFeHRlcm5hbE9uVHlwZUV4dGVuc2lvbnMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiB0aGlzLnNjaGVtYS50eXBlcygpKSB7XG4gICAgICAgICAgICBpZiAoISgwLCBkZWZpbml0aW9uc18xLmlzQ29tcG9zaXRlVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNGZWRlcmF0aW9uVHlwZUV4dGVuc2lvbih0eXBlKSAmJiAhaXNSb290VHlwZUV4dGVuc2lvbih0eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5QXBwbGljYXRpb25zID0gdHlwZS5hcHBsaWVkRGlyZWN0aXZlc09mKHRoaXMubWV0YWRhdGEua2V5RGlyZWN0aXZlKCkpO1xuICAgICAgICAgICAgaWYgKGtleUFwcGxpY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXlBcHBsaWNhdGlvbiBvZiB0eXBlLmFwcGxpZWREaXJlY3RpdmVzT2YodGhpcy5tZXRhZGF0YS5rZXlEaXJlY3RpdmUoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIGZlZGVyYXRpb25fMS5jb2xsZWN0VGFyZ2V0RmllbGRzKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRUeXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlOiBrZXlBcHBsaWNhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVJbnRlcmZhY2VGaWVsZHNJbXBsZW1lbnRhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnBhcmVudCAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsID0gdGhpcy5leHRlcm5hbChmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25SZW1vdmFsKGZpZWxkLmNvb3JkaW5hdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlcm5hbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvdGhlciBvZiB0aGlzLm90aGVyU3ViZ3JhcGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVJbk90aGVyID0gb3RoZXIuc2NoZW1hLnR5cGUodHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0eXBlSW5PdGhlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KSgoMCwgZGVmaW5pdGlvbnNfMS5pc0NvbXBvc2l0ZVR5cGUpKHR5cGVJbk90aGVyKSwgKCkgPT4gYFR5cGUgJHt0eXBlfSBpcyBvZiBraW5kICR7dHlwZS5raW5kfSBpbiAke3RoaXMuc3ViZ3JhcGgubmFtZX0gYnV0ICR7dHlwZUluT3RoZXIua2luZH0gaW4gJHtvdGhlci5uYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlzSW5PdGhlciA9IHR5cGVJbk90aGVyLmFwcGxpZWREaXJlY3RpdmVzT2Yob3RoZXIubWV0YWRhdGEoKS5rZXlEaXJlY3RpdmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlzSW5PdGhlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICgwLCBmZWRlcmF0aW9uXzEuY29sbGVjdFRhcmdldEZpZWxkcykoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50VHlwZTogdHlwZUluT3RoZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmU6IGtleXNJbk90aGVyWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZUludGVyZmFjZUZpZWxkc0ltcGxlbWVudGF0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucGFyZW50ICE9PSB0eXBlSW5PdGhlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bkZpZWxkID0gdHlwZS5maWVsZChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3duRmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRlcm5hbCA9IHRoaXMuZXh0ZXJuYWwob3duRmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IEV4dGVybmFsT25UeXBlRXh0ZW5zaW9uUmVtb3ZhbChvd25GaWVsZC5jb29yZGluYXRlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVUeXBlRXh0ZW5zaW9ucygpIHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHRoaXMuc2NoZW1hLnR5cGVzKCkpIHtcbiAgICAgICAgICAgIGlmICghaXNGZWRlcmF0aW9uVHlwZUV4dGVuc2lvbih0eXBlKSAmJiAhaXNSb290VHlwZUV4dGVuc2lvbih0eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IFR5cGVFeHRlbnNpb25SZW1vdmFsKHR5cGUuY29vcmRpbmF0ZSkpO1xuICAgICAgICAgICAgdHlwZS5yZW1vdmVFeHRlbnNpb25zKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlVW51c2VkRXh0ZXJuYWxzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy5zY2hlbWEudHlwZXMoKSkge1xuICAgICAgICAgICAgaWYgKCEoMCwgZGVmaW5pdGlvbnNfMS5pc09iamVjdFR5cGUpKHR5cGUpICYmICEoMCwgZGVmaW5pdGlvbnNfMS5pc0ludGVyZmFjZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXRhZGF0YS5pc0ZpZWxkRXh0ZXJuYWwoZmllbGQpICYmICF0aGlzLm1ldGFkYXRhLmlzRmllbGRVc2VkKGZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgVW51c2VkRXh0ZXJuYWxSZW1vdmFsKGZpZWxkLmNvb3JkaW5hdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlLmhhc0ZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUuaXNSZWZlcmVuY2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlcnJvcl8xLkVSUk9SUy5UWVBFX1dJVEhfT05MWV9VTlVTRURfRVhURVJOQUwuZXJyKGBUeXBlICR7dHlwZX0gY29udGFpbnMgb25seSBleHRlcm5hbCBmaWVsZHMgYW5kIGFsbCB0aG9zZSBmaWVsZHMgYXJlIGFsbCB1bnVzZWQgKHRoZXkgZG8gbm90IGFwcGVhciBpbiBhbnkgQGtleSwgQHByb3ZpZGVzIG9yIEByZXF1aXJlcykuYCwgeyBub2RlczogdHlwZS5zb3VyY2VBU1QgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IFR5cGVXaXRoT25seVVudXNlZEV4dGVybmFsUmVtb3ZhbCh0eXBlLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRGlyZWN0aXZlc09uSW50ZXJmYWNlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy5zY2hlbWEuaW50ZXJmYWNlVHlwZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiB0eXBlLmFwcGxpZWREaXJlY3RpdmVzT2YodGhpcy5tZXRhZGF0YS5rZXlEaXJlY3RpdmUoKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgS2V5T25JbnRlcmZhY2VSZW1vdmFsKHR5cGUubmFtZSkpO1xuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgW3RoaXMubWV0YWRhdGEucHJvdmlkZXNEaXJlY3RpdmUoKSwgdGhpcy5tZXRhZGF0YS5yZXF1aXJlc0RpcmVjdGl2ZSgpXSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFwcGxpY2F0aW9uIG9mIGZpZWxkLmFwcGxpZWREaXJlY3RpdmVzT2YoZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IFByb3ZpZGVzT3JSZXF1aXJlc09uSW50ZXJmYWNlRmllbGRSZW1vdmFsKGZpZWxkLmNvb3JkaW5hdGUsIGRpcmVjdGl2ZS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVQcm92aWRlc09uTm9uQ29tcG9zaXRlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy5zY2hlbWEub2JqZWN0VHlwZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzQ29tcG9zaXRlVHlwZSkoKDAsIGRlZmluaXRpb25zXzEuYmFzZVR5cGUpKGZpZWxkLnR5cGUpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiBmaWVsZC5hcHBsaWVkRGlyZWN0aXZlc09mKHRoaXMubWV0YWRhdGEucHJvdmlkZXNEaXJlY3RpdmUoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IFByb3ZpZGVzT25Ob25Db21wb3NpdGVSZW1vdmFsKGZpZWxkLmNvb3JkaW5hdGUsIGZpZWxkLnR5cGUudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkU2hhcmVhYmxlKCkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGFkYXRhID0gdGhpcy5vcmlnaW5hbFN1YmdyYXBoLm1ldGFkYXRhKCk7XG4gICAgICAgIGNvbnN0IGtleURpcmVjdGl2ZSA9IHRoaXMubWV0YWRhdGEua2V5RGlyZWN0aXZlKCk7XG4gICAgICAgIGNvbnN0IHNoYXJlYWJsZURpcmVjdGl2ZSA9IHRoaXMubWV0YWRhdGEuc2hhcmVhYmxlRGlyZWN0aXZlKCk7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiB0aGlzLnNjaGVtYS5vYmplY3RUeXBlcygpKSB7XG4gICAgICAgICAgICBpZiAodHlwZS5oYXNBcHBsaWVkRGlyZWN0aXZlKGtleURpcmVjdGl2ZSkgfHwgdHlwZS5pc1Jvb3RUeXBlKCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsTWV0YWRhdGEuaXNGaWVsZFNoYXJlYWJsZShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyUmVzb2x2aW5nU3ViZ3JhcGhzID0gdGhpcy5vdGhlclN1YmdyYXBocy5maWx0ZXIoKHMpID0+IHJlc29sdmVzRmllbGQocywgZmllbGQpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyUmVzb2x2aW5nU3ViZ3JhcGhzLmxlbmd0aCA+IDAgJiYgIWZpZWxkLmhhc0FwcGxpZWREaXJlY3RpdmUoc2hhcmVhYmxlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuYXBwbHlEaXJlY3RpdmUoc2hhcmVhYmxlRGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hhbmdlKG5ldyBTaGFyZWFibGVGaWVsZEFkZGl0aW9uKGZpZWxkLmNvb3JkaW5hdGUsIG90aGVyUmVzb2x2aW5nU3ViZ3JhcGhzLm1hcCgocykgPT4gcy5uYW1lKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJEZWNsYXJpbmdTdWJncmFwaHMgPSB0aGlzLm90aGVyU3ViZ3JhcGhzLmZpbHRlcigocykgPT4gcy5zY2hlbWEudHlwZSh0eXBlLm5hbWUpKTtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXJEZWNsYXJpbmdTdWJncmFwaHMubGVuZ3RoID4gMCAmJiAhdHlwZS5oYXNBcHBsaWVkRGlyZWN0aXZlKHNoYXJlYWJsZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5hcHBseURpcmVjdGl2ZShzaGFyZWFibGVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoYW5nZShuZXcgU2hhcmVhYmxlVHlwZUFkZGl0aW9uKHR5cGUuY29vcmRpbmF0ZSwgb3RoZXJEZWNsYXJpbmdTdWJncmFwaHMubWFwKChzKSA9PiBzLm5hbWUpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVRhZ09uRXh0ZXJuYWwoKSB7XG4gICAgICAgIGNvbnN0IHRhZ0RpcmVjdGl2ZSA9IHRoaXMuc2NoZW1hLmRpcmVjdGl2ZSgndGFnJyk7XG4gICAgICAgIGlmICghdGFnRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiBBcnJheS5mcm9tKHRhZ0RpcmVjdGl2ZS5hcHBsaWNhdGlvbnMoKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcHBsaWNhdGlvbi5wYXJlbnQ7XG4gICAgICAgICAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5GaWVsZERlZmluaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5leHRlcm5hbChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhZ0lzVXNlZEluT3RoZXJEZWZpbml0aW9uID0gdGhpcy5vdGhlclN1YmdyYXBoc1xuICAgICAgICAgICAgICAgICAgICAubWFwKChzKSA9PiBnZXRGaWVsZChzLnNjaGVtYSwgZWxlbWVudC5wYXJlbnQubmFtZSwgZWxlbWVudC5uYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZikgPT4gIShmICYmIGYuaGFzQXBwbGllZERpcmVjdGl2ZSgnZXh0ZXJuYWwnKSkpXG4gICAgICAgICAgICAgICAgICAgIC5zb21lKChmKSA9PiBmICYmIGYuYXBwbGllZERpcmVjdGl2ZXNPZigndGFnJykuc29tZSgoZCkgPT4gKDAsIHZhbHVlc18xLnZhbHVlRXF1YWxzKShhcHBsaWNhdGlvbi5hcmd1bWVudHMoKSwgZC5hcmd1bWVudHMoKSkpKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnSXNVc2VkSW5PdGhlckRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGFuZ2UobmV3IFJlbW92ZWRUYWdPbkV4dGVybmFsKGFwcGxpY2F0aW9uLnRvU3RyaW5nKCksIGVsZW1lbnQuY29vcmRpbmF0ZSkpO1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWFVcGdyYWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlkWW91TWVhbiA9IGV4cG9ydHMuc3VnZ2VzdGlvbkxpc3QgPSB2b2lkIDA7XG5jb25zdCBqc19sZXZlbnNodGVpbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJqcy1sZXZlbnNodGVpblwiKSk7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBzdWdnZXN0aW9uTGlzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbnNCeURpc3RhbmNlID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHRocmVzaG9sZCA9IE1hdGguZmxvb3IoaW5wdXQubGVuZ3RoICogMC40KSArIDE7XG4gICAgY29uc3QgaW5wdXRMb3dlckNhc2UgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBpbnB1dExvd2VyQ2FzZSA9PT0gb3B0aW9uLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgOiAoMCwganNfbGV2ZW5zaHRlaW5fMS5kZWZhdWx0KShpbnB1dCwgb3B0aW9uKTtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgb3B0aW9uc0J5RGlzdGFuY2Uuc2V0KG9wdGlvbiwgZGlzdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbHNfMS5tYXBLZXlzKShvcHRpb25zQnlEaXN0YW5jZSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBkaXN0YW5jZURpZmYgPSBvcHRpb25zQnlEaXN0YW5jZS5nZXQoYSkgLSBvcHRpb25zQnlEaXN0YW5jZS5nZXQoYik7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZURpZmYgIT09IDAgPyBkaXN0YW5jZURpZmYgOiBhLmxvY2FsZUNvbXBhcmUoYik7XG4gICAgfSk7XG59XG5leHBvcnRzLnN1Z2dlc3Rpb25MaXN0ID0gc3VnZ2VzdGlvbkxpc3Q7XG5jb25zdCBNQVhfU1VHR0VTVElPTlMgPSA1O1xuZnVuY3Rpb24gZGlkWW91TWVhbihzdWdnZXN0aW9ucykge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnIERpZCB5b3UgbWVhbiAnO1xuICAgIGNvbnN0IHF1b3RlZFN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnMubWFwKCh4KSA9PiBgXCIke3h9XCJgKTtcbiAgICBzd2l0Y2ggKHN1Z2dlc3Rpb25zLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlICsgcXVvdGVkU3VnZ2VzdGlvbnNbMF0gKyAnPyc7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlICsgcXVvdGVkU3VnZ2VzdGlvbnNbMF0gKyAnIG9yICcgKyBxdW90ZWRTdWdnZXN0aW9uc1sxXSArICc/JztcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBxdW90ZWRTdWdnZXN0aW9ucy5zbGljZSgwLCBNQVhfU1VHR0VTVElPTlMpO1xuICAgIGNvbnN0IGxhc3RJdGVtID0gc2VsZWN0ZWQucG9wKCk7XG4gICAgcmV0dXJuIG1lc3NhZ2UgKyBzZWxlY3RlZC5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3RJdGVtICsgJz8nO1xufVxuZXhwb3J0cy5kaWRZb3VNZWFuID0gZGlkWW91TWVhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Z2dlc3Rpb25zLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ZlZDFTdXBlcmdyYXBoID0gZXhwb3J0cy52YWxpZGF0ZVN1cGVyZ3JhcGggPSBleHBvcnRzLmJ1aWxkU3VwZXJncmFwaFNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IGNvcmVTcGVjXzEgPSByZXF1aXJlKFwiLi9jb3JlU3BlY1wiKTtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGpvaW5TcGVjXzEgPSByZXF1aXJlKFwiLi9qb2luU3BlY1wiKTtcbmNvbnN0IGJ1aWxkU2NoZW1hXzEgPSByZXF1aXJlKFwiLi9idWlsZFNjaGVtYVwiKTtcbmNvbnN0IGV4dHJhY3RTdWJncmFwaHNGcm9tU3VwZXJncmFwaF8xID0gcmVxdWlyZShcIi4vZXh0cmFjdFN1YmdyYXBoc0Zyb21TdXBlcmdyYXBoXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgU1VQUE9SVEVEX0ZFQVRVUkVTID0gbmV3IFNldChbXG4gICAgJ2h0dHBzOi8vc3BlY3MuYXBvbGxvLmRldi9jb3JlL3YwLjEnLFxuICAgICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvY29yZS92MC4yJyxcbiAgICAnaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2pvaW4vdjAuMScsXG4gICAgJ2h0dHBzOi8vc3BlY3MuYXBvbGxvLmRldi9qb2luL3YwLjInLFxuICAgICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvdGFnL3YwLjEnLFxuICAgICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvdGFnL3YwLjInLFxuICAgICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvaW5hY2Nlc3NpYmxlL3YwLjEnLFxuICAgICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvaW5hY2Nlc3NpYmxlL3YwLjInLFxuXSk7XG5jb25zdCBjb3JlVmVyc2lvblplcm9Eb3RPbmVVcmwgPSBjb3JlU3BlY18xLkZlYXR1cmVVcmwucGFyc2UoJ2h0dHBzOi8vc3BlY3MuYXBvbGxvLmRldi9jb3JlL3YwLjEnKTtcbmZ1bmN0aW9uIGJ1aWxkU3VwZXJncmFwaFNjaGVtYShzdXBlcmdyYXBoU2RsKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gdHlwZW9mIHN1cGVyZ3JhcGhTZGwgPT09ICdzdHJpbmcnXG4gICAgICAgID8gKDAsIGJ1aWxkU2NoZW1hXzEuYnVpbGRTY2hlbWEpKHN1cGVyZ3JhcGhTZGwsIHsgdmFsaWRhdGU6IGZhbHNlIH0pXG4gICAgICAgIDogKDAsIGJ1aWxkU2NoZW1hXzEuYnVpbGRTY2hlbWFGcm9tQVNUKShzdXBlcmdyYXBoU2RsLCB7IHZhbGlkYXRlOiBmYWxzZSB9KTtcbiAgICBjb25zdCBbY29yZUZlYXR1cmVzXSA9IHZhbGlkYXRlU3VwZXJncmFwaChzY2hlbWEpO1xuICAgIGNoZWNrRmVhdHVyZVN1cHBvcnQoY29yZUZlYXR1cmVzKTtcbiAgICBzY2hlbWEudmFsaWRhdGUoKTtcbiAgICByZXR1cm4gW3NjaGVtYSwgKDAsIGV4dHJhY3RTdWJncmFwaHNGcm9tU3VwZXJncmFwaF8xLmV4dHJhY3RTdWJncmFwaHNOYW1lc0FuZFVybHNGcm9tU3VwZXJncmFwaCkoc2NoZW1hKV07XG59XG5leHBvcnRzLmJ1aWxkU3VwZXJncmFwaFNjaGVtYSA9IGJ1aWxkU3VwZXJncmFwaFNjaGVtYTtcbmZ1bmN0aW9uIGNoZWNrRmVhdHVyZVN1cHBvcnQoY29yZUZlYXR1cmVzKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgY29uc3QgY29yZUl0c2VsZiA9IGNvcmVGZWF0dXJlcy5jb3JlSXRzZWxmO1xuICAgIGlmIChjb3JlSXRzZWxmLnVybC5lcXVhbHMoY29yZVZlcnNpb25aZXJvRG90T25lVXJsKSkge1xuICAgICAgICBjb25zdCBwdXJwb3NlZnVsRmVhdHVyZXMgPSBbLi4uY29yZUZlYXR1cmVzLmFsbEZlYXR1cmVzKCldLmZpbHRlcihmID0+IGYucHVycG9zZSk7XG4gICAgICAgIGlmIChwdXJwb3NlZnVsRmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3JfMS5FUlJPUlMuVU5TVVBQT1JURURfTElOS0VEX0ZFQVRVUkUuZXJyKGB0aGUgXFxgZm9yOlxcYCBhcmd1bWVudCBpcyB1bnN1cHBvcnRlZCBieSB2ZXJzaW9uICR7Y29yZUl0c2VsZi51cmwudmVyc2lvbn0gYCArXG4gICAgICAgICAgICAgICAgYG9mIHRoZSBjb3JlIHNwZWMuIFBsZWFzZSB1cGdyYWRlIHRvIGF0IGxlYXN0IEBjb3JlIHYwLjIgKGh0dHBzOi8vc3BlY3MuYXBvbGxvLmRldi9jb3JlL3YwLjIpLmAsIHtcbiAgICAgICAgICAgICAgICBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykoY29yZUl0c2VsZi5kaXJlY3RpdmUsIC4uLnB1cnBvc2VmdWxGZWF0dXJlcy5tYXAoZiA9PiBmLmRpcmVjdGl2ZSkpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGNvcmVGZWF0dXJlcy5hbGxGZWF0dXJlcygpKSB7XG4gICAgICAgIGlmIChmZWF0dXJlLnVybC5lcXVhbHMoY29yZVZlcnNpb25aZXJvRG90T25lVXJsKSB8fCBmZWF0dXJlLnB1cnBvc2UgPT09ICdFWEVDVVRJT04nIHx8IGZlYXR1cmUucHVycG9zZSA9PT0gJ1NFQ1VSSVRZJykge1xuICAgICAgICAgICAgaWYgKCFTVVBQT1JURURfRkVBVFVSRVMuaGFzKGZlYXR1cmUudXJsLmJhc2UudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5VTlNVUFBPUlRFRF9MSU5LRURfRkVBVFVSRS5lcnIoYGZlYXR1cmUgJHtmZWF0dXJlLnVybH0gaXMgZm9yOiAke2ZlYXR1cmUucHVycG9zZX0gYnV0IGlzIHVuc3VwcG9ydGVkYCwgeyBub2RlczogZmVhdHVyZS5kaXJlY3RpdmUuc291cmNlQVNUIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgKDAsIGNvcmVTcGVjXzEuRXJyQ29yZUNoZWNrRmFpbGVkKShlcnJvcnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlU3VwZXJncmFwaChzdXBlcmdyYXBoKSB7XG4gICAgY29uc3QgY29yZUZlYXR1cmVzID0gc3VwZXJncmFwaC5jb3JlRmVhdHVyZXM7XG4gICAgaWYgKCFjb3JlRmVhdHVyZXMpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9GRURFUkFUSU9OX1NVUEVSR1JBUEguZXJyKFwiSW52YWxpZCBzdXBlcmdyYXBoOiBtdXN0IGJlIGEgY29yZSBzY2hlbWFcIik7XG4gICAgfVxuICAgIGNvbnN0IGpvaW5GZWF0dXJlID0gY29yZUZlYXR1cmVzLmdldEJ5SWRlbnRpdHkoam9pblNwZWNfMS5qb2luSWRlbnRpdHkpO1xuICAgIGlmICgham9pbkZlYXR1cmUpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9GRURFUkFUSU9OX1NVUEVSR1JBUEguZXJyKFwiSW52YWxpZCBzdXBlcmdyYXBoOiBtdXN0IHVzZSB0aGUgam9pbiBzcGVjXCIpO1xuICAgIH1cbiAgICBjb25zdCBqb2luU3BlYyA9IGpvaW5TcGVjXzEuSk9JTl9WRVJTSU9OUy5maW5kKGpvaW5GZWF0dXJlLnVybC52ZXJzaW9uKTtcbiAgICBpZiAoIWpvaW5TcGVjKSB7XG4gICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfRkVERVJBVElPTl9TVVBFUkdSQVBILmVycihgSW52YWxpZCBzdXBlcmdyYXBoOiB1c2VzIHVuc3VwcG9ydGVkIGpvaW4gc3BlYyB2ZXJzaW9uICR7am9pbkZlYXR1cmUudXJsLnZlcnNpb259IChzdXBwb3J0ZWQgdmVyc2lvbnM6ICR7am9pblNwZWNfMS5KT0lOX1ZFUlNJT05TLnZlcnNpb25zKCkuam9pbignLCAnKX0pYCk7XG4gICAgfVxuICAgIHJldHVybiBbY29yZUZlYXR1cmVzLCBqb2luU3BlY107XG59XG5leHBvcnRzLnZhbGlkYXRlU3VwZXJncmFwaCA9IHZhbGlkYXRlU3VwZXJncmFwaDtcbmZ1bmN0aW9uIGlzRmVkMVN1cGVyZ3JhcGgoc3VwZXJncmFwaCkge1xuICAgIHJldHVybiB2YWxpZGF0ZVN1cGVyZ3JhcGgoc3VwZXJncmFwaClbMV0udmVyc2lvbi5lcXVhbHMobmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMCwgMSkpO1xufVxuZXhwb3J0cy5pc0ZlZDFTdXBlcmdyYXBoID0gaXNGZWQxU3VwZXJncmFwaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1cGVyZ3JhcGhzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UQUdfVkVSU0lPTlMgPSBleHBvcnRzLlRhZ1NwZWNEZWZpbml0aW9uID0gZXhwb3J0cy50YWdJZGVudGl0eSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgY29yZVNwZWNfMSA9IHJlcXVpcmUoXCIuL2NvcmVTcGVjXCIpO1xuY29uc3QgZGVmaW5pdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zXCIpO1xuY29uc3QgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3Qga25vd25Db3JlRmVhdHVyZXNfMSA9IHJlcXVpcmUoXCIuL2tub3duQ29yZUZlYXR1cmVzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZXhwb3J0cy50YWdJZGVudGl0eSA9ICdodHRwczovL3NwZWNzLmFwb2xsby5kZXYvdGFnJztcbmNsYXNzIFRhZ1NwZWNEZWZpbml0aW9uIGV4dGVuZHMgY29yZVNwZWNfMS5GZWF0dXJlRGVmaW5pdGlvbiB7XG4gICAgY29uc3RydWN0b3IodmVyc2lvbikge1xuICAgICAgICBzdXBlcihuZXcgY29yZVNwZWNfMS5GZWF0dXJlVXJsKGV4cG9ydHMudGFnSWRlbnRpdHksICd0YWcnLCB2ZXJzaW9uKSk7XG4gICAgICAgIHRoaXMudGFnTG9jYXRpb25zID0gW1xuICAgICAgICAgICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT04sXG4gICAgICAgICAgICBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNULFxuICAgICAgICAgICAgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLklOVEVSRkFDRSxcbiAgICAgICAgICAgIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5VTklPTixcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5wcmludGVkVGFnRGVmaW5pdGlvbiA9ICdkaXJlY3RpdmUgQHRhZyhuYW1lOiBTdHJpbmchKSByZXBlYXRhYmxlIG9uIEZJRUxEX0RFRklOSVRJT04gfCBJTlRFUkZBQ0UgfCBPQkpFQ1QgfCBVTklPTic7XG4gICAgICAgIGlmICghdGhpcy5pc1YwMSgpKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ0xvY2F0aW9ucy5wdXNoKGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uU0NBTEFSLCBncmFwaHFsXzEuRGlyZWN0aXZlTG9jYXRpb24uRU5VTSwgZ3JhcGhxbF8xLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU1fVkFMVUUsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1QsIGdyYXBocWxfMS5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OKTtcbiAgICAgICAgICAgIHRoaXMucHJpbnRlZFRhZ0RlZmluaXRpb24gPSAnZGlyZWN0aXZlIEB0YWcobmFtZTogU3RyaW5nISkgcmVwZWF0YWJsZSBvbiBGSUVMRF9ERUZJTklUSU9OIHwgSU5URVJGQUNFIHwgT0JKRUNUIHwgVU5JT04gfCBBUkdVTUVOVF9ERUZJTklUSU9OIHwgU0NBTEFSIHwgRU5VTSB8IEVOVU1fVkFMVUUgfCBJTlBVVF9PQkpFQ1QgfCBJTlBVVF9GSUVMRF9ERUZJTklUSU9OJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhZ0RpcmVjdGl2ZVNwZWMgPSAoMCwgZGlyZWN0aXZlQW5kVHlwZVNwZWNpZmljYXRpb25fMS5jcmVhdGVEaXJlY3RpdmVTcGVjaWZpY2F0aW9uKSh7XG4gICAgICAgICAgICBuYW1lOiAndGFnJyxcbiAgICAgICAgICAgIGxvY2F0aW9uczogdGhpcy50YWdMb2NhdGlvbnMsXG4gICAgICAgICAgICByZXBlYXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgYXJndW1lbnRGY3Q6IChzY2hlbWEpID0+ICh7XG4gICAgICAgICAgICAgICAgYXJnczogW3sgbmFtZTogJ25hbWUnLCB0eXBlOiBuZXcgZGVmaW5pdGlvbnNfMS5Ob25OdWxsVHlwZShzY2hlbWEuc3RyaW5nVHlwZSgpKSB9XSxcbiAgICAgICAgICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpc1YwMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyc2lvbi5lcXVhbHMobmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMCwgMSkpO1xuICAgIH1cbiAgICBhZGRFbGVtZW50c1RvU2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGREaXJlY3RpdmVTcGVjKHNjaGVtYSwgdGhpcy50YWdEaXJlY3RpdmVTcGVjKTtcbiAgICB9XG4gICAgdGFnRGlyZWN0aXZlKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmUoc2NoZW1hLCAndGFnJyk7XG4gICAgfVxuICAgIGNoZWNrQ29tcGF0aWJsZURpcmVjdGl2ZShkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IGhhc1Vua25vd25Bcmd1bWVudHMgPSBPYmplY3Qua2V5cyhkZWZpbml0aW9uLmFyZ3VtZW50cygpKS5sZW5ndGggPiAxO1xuICAgICAgICBjb25zdCBuYW1lQXJnID0gZGVmaW5pdGlvbi5hcmd1bWVudCgnbmFtZScpO1xuICAgICAgICBjb25zdCBoYXNWYWxpZE5hbWVBcmcgPSBuYW1lQXJnICYmICgwLCB0eXBlc18xLnNhbWVUeXBlKShuYW1lQXJnLnR5cGUsIG5ldyBkZWZpbml0aW9uc18xLk5vbk51bGxUeXBlKGRlZmluaXRpb24uc2NoZW1hKCkuc3RyaW5nVHlwZSgpKSk7XG4gICAgICAgIGNvbnN0IGhhc1ZhbGlkTG9jYXRpb25zID0gZGVmaW5pdGlvbi5sb2NhdGlvbnMuZXZlcnkobG9jID0+IHRoaXMudGFnTG9jYXRpb25zLmluY2x1ZGVzKGxvYykpO1xuICAgICAgICBpZiAoaGFzVW5rbm93bkFyZ3VtZW50cyB8fCAhaGFzVmFsaWROYW1lQXJnIHx8ICFoYXNWYWxpZExvY2F0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yXzEuRVJST1JTLkRJUkVDVElWRV9ERUZJTklUSU9OX0lOVkFMSUQuZXJyKGBGb3VuZCBpbnZhbGlkIEB0YWcgZGlyZWN0aXZlIGRlZmluaXRpb24uIFBsZWFzZSBlbnN1cmUgdGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIGluIHlvdXIgc2NoZW1hJ3MgZGVmaW5pdGlvbnMgbWF0Y2hlcyB0aGUgZm9sbG93aW5nOlxcblxcdCR7dGhpcy5wcmludGVkVGFnRGVmaW5pdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhbGxFbGVtZW50TmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBbXCJAdGFnXCJdO1xuICAgIH1cbn1cbmV4cG9ydHMuVGFnU3BlY0RlZmluaXRpb24gPSBUYWdTcGVjRGVmaW5pdGlvbjtcbmV4cG9ydHMuVEFHX1ZFUlNJT05TID0gbmV3IGNvcmVTcGVjXzEuRmVhdHVyZURlZmluaXRpb25zKGV4cG9ydHMudGFnSWRlbnRpdHkpXG4gICAgLmFkZChuZXcgVGFnU3BlY0RlZmluaXRpb24obmV3IGNvcmVTcGVjXzEuRmVhdHVyZVZlcnNpb24oMCwgMSkpKVxuICAgIC5hZGQobmV3IFRhZ1NwZWNEZWZpbml0aW9uKG5ldyBjb3JlU3BlY18xLkZlYXR1cmVWZXJzaW9uKDAsIDIpKSk7XG4oMCwga25vd25Db3JlRmVhdHVyZXNfMS5yZWdpc3Rlcktub3duRmVhdHVyZSkoZXhwb3J0cy5UQUdfVkVSU0lPTlMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFnU3BlYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTdHJpY3RTdWJ0eXBlID0gZXhwb3J0cy5pc1N1YnR5cGUgPSBleHBvcnRzLmlzRGlyZWN0U3VidHlwZSA9IGV4cG9ydHMuc2FtZVR5cGUgPSBleHBvcnRzLkRFRkFVTFRfU1VCVFlQSU5HX1JVTEVTID0gZXhwb3J0cy5BTExfU1VCVFlQSU5HX1JVTEVTID0gdm9pZCAwO1xuY29uc3QgZGVmaW5pdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zXCIpO1xuZXhwb3J0cy5BTExfU1VCVFlQSU5HX1JVTEVTID0gW1xuICAgICdkaXJlY3QnLFxuICAgICdub25OdWxsYWJsZV9kb3duZ3JhZGUnLFxuICAgICdsaXN0X3VwZ3JhZGUnLFxuICAgICdsaXN0X3Byb3BhZ2F0aW9uJyxcbiAgICAnbm9uTnVsbGFibGVfcHJvcGFnYXRpb24nXG5dO1xuZXhwb3J0cy5ERUZBVUxUX1NVQlRZUElOR19SVUxFUyA9IGV4cG9ydHMuQUxMX1NVQlRZUElOR19SVUxFUy5maWx0ZXIociA9PiByICE9PSBcImxpc3RfdXBncmFkZVwiKTtcbmZ1bmN0aW9uIHNhbWVUeXBlKHQxLCB0Mikge1xuICAgIGlmICh0MS5raW5kICE9PSB0Mi5raW5kKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3dpdGNoICh0MS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0xpc3RUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiBzYW1lVHlwZSh0MS5vZlR5cGUsIHQyLm9mVHlwZSk7XG4gICAgICAgIGNhc2UgJ05vbk51bGxUeXBlJzpcbiAgICAgICAgICAgIHJldHVybiBzYW1lVHlwZSh0MS5vZlR5cGUsIHQyLm9mVHlwZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdDEubmFtZSA9PT0gdDIubmFtZTtcbiAgICB9XG59XG5leHBvcnRzLnNhbWVUeXBlID0gc2FtZVR5cGU7XG5mdW5jdGlvbiBpc0RpcmVjdFN1YnR5cGUodHlwZSwgbWF5YmVTdWJUeXBlLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIgPSAodSwgbSkgPT4gdS5oYXNUeXBlTWVtYmVyKG0pLCBpbXBsZW1lbnRzSW50ZXJmYWNlVGVzdGVyID0gKG0sIGkpID0+IG0uaW1wbGVtZW50c0ludGVyZmFjZShpKSkge1xuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc1VuaW9uVHlwZSkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBkZWZpbml0aW9uc18xLmlzT2JqZWN0VHlwZSkobWF5YmVTdWJUeXBlKSAmJiB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIodHlwZSwgbWF5YmVTdWJUeXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIobWF5YmVTdWJUeXBlLCB0eXBlKTtcbn1cbmV4cG9ydHMuaXNEaXJlY3RTdWJ0eXBlID0gaXNEaXJlY3RTdWJ0eXBlO1xuZnVuY3Rpb24gaXNTdWJ0eXBlKHR5cGUsIG1heWJlU3ViVHlwZSwgYWxsb3dlZFJ1bGVzID0gZXhwb3J0cy5ERUZBVUxUX1NVQlRZUElOR19SVUxFUywgdW5pb25NZW1iZXJzaGlwVGVzdGVyID0gKHUsIG0pID0+IHUuaGFzVHlwZU1lbWJlcihtKSwgaW1wbGVtZW50c0ludGVyZmFjZVRlc3RlciA9IChtLCBpKSA9PiBtLmltcGxlbWVudHNJbnRlcmZhY2UoaSkpIHtcbiAgICByZXR1cm4gc2FtZVR5cGUodHlwZSwgbWF5YmVTdWJUeXBlKSB8fCBpc1N0cmljdFN1YnR5cGUodHlwZSwgbWF5YmVTdWJUeXBlLCBhbGxvd2VkUnVsZXMsIHVuaW9uTWVtYmVyc2hpcFRlc3RlciwgaW1wbGVtZW50c0ludGVyZmFjZVRlc3Rlcik7XG59XG5leHBvcnRzLmlzU3VidHlwZSA9IGlzU3VidHlwZTtcbmZ1bmN0aW9uIGlzU3RyaWN0U3VidHlwZSh0eXBlLCBtYXliZVN1YlR5cGUsIGFsbG93ZWRSdWxlcyA9IGV4cG9ydHMuREVGQVVMVF9TVUJUWVBJTkdfUlVMRVMsIHVuaW9uTWVtYmVyc2hpcFRlc3RlciA9ICh1LCBtKSA9PiB1Lmhhc1R5cGVNZW1iZXIobSksIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIgPSAobSwgaSkgPT4gbS5pbXBsZW1lbnRzSW50ZXJmYWNlKGkpKSB7XG4gICAgc3dpdGNoIChtYXliZVN1YlR5cGUua2luZCkge1xuICAgICAgICBjYXNlICdMaXN0VHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gYWxsb3dlZFJ1bGVzLmluY2x1ZGVzKCdsaXN0X3Byb3BhZ2F0aW9uJylcbiAgICAgICAgICAgICAgICAmJiAoMCwgZGVmaW5pdGlvbnNfMS5pc0xpc3RUeXBlKSh0eXBlKVxuICAgICAgICAgICAgICAgICYmIGlzU3VidHlwZSh0eXBlLm9mVHlwZSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgYWxsb3dlZFJ1bGVzLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIsIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIpO1xuICAgICAgICBjYXNlICdOb25OdWxsVHlwZSc6XG4gICAgICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dlZFJ1bGVzLmluY2x1ZGVzKCdub25OdWxsYWJsZV9wcm9wYWdhdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICYmIGlzU3VidHlwZSh0eXBlLm9mVHlwZSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgYWxsb3dlZFJ1bGVzLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIsIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWRSdWxlcy5pbmNsdWRlcygnbm9uTnVsbGFibGVfZG93bmdyYWRlJylcbiAgICAgICAgICAgICAgICAmJiBpc1N1YnR5cGUodHlwZSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgYWxsb3dlZFJ1bGVzLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIsIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIpO1xuICAgICAgICBjYXNlICdPYmplY3RUeXBlJzpcbiAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNMaXN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dlZFJ1bGVzLmluY2x1ZGVzKCdsaXN0X3VwZ3JhZGUnKVxuICAgICAgICAgICAgICAgICAgICAmJiBpc1N1YnR5cGUodHlwZS5vZlR5cGUsIG1heWJlU3ViVHlwZSwgYWxsb3dlZFJ1bGVzLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIsIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWRSdWxlcy5pbmNsdWRlcygnZGlyZWN0JylcbiAgICAgICAgICAgICAgICAmJiAoKDAsIGRlZmluaXRpb25zXzEuaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSB8fCAoMCwgZGVmaW5pdGlvbnNfMS5pc1VuaW9uVHlwZSkodHlwZSkpXG4gICAgICAgICAgICAgICAgJiYgaXNEaXJlY3RTdWJ0eXBlKHR5cGUsIG1heWJlU3ViVHlwZSwgdW5pb25NZW1iZXJzaGlwVGVzdGVyLCBpbXBsZW1lbnRzSW50ZXJmYWNlVGVzdGVyKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAoMCwgZGVmaW5pdGlvbnNfMS5pc0xpc3RUeXBlKSh0eXBlKVxuICAgICAgICAgICAgICAgICYmIGFsbG93ZWRSdWxlcy5pbmNsdWRlcygnbGlzdF91cGdyYWRlJylcbiAgICAgICAgICAgICAgICAmJiBpc1N1YnR5cGUodHlwZS5vZlR5cGUsIG1heWJlU3ViVHlwZSwgYWxsb3dlZFJ1bGVzLCB1bmlvbk1lbWJlcnNoaXBUZXN0ZXIsIGltcGxlbWVudHNJbnRlcmZhY2VUZXN0ZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNTdHJpY3RTdWJ0eXBlID0gaXNTdHJpY3RTdWJ0eXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbW92ZUFycmF5RWxlbWVudCA9IGV4cG9ydHMuaXNEZWZpbmVkID0gZXhwb3J0cy5wcmludEh1bWFuUmVhZGFibGVMaXN0ID0gZXhwb3J0cy5qb2luU3RyaW5ncyA9IGV4cG9ydHMudmFsaWRhdGVTdHJpbmdDb250YWluc0Jvb2xlYW4gPSBleHBvcnRzLmNvcHlXaXROZXdMZW5ndGggPSBleHBvcnRzLk1hcFdpdGhDYWNoZWRBcnJheXMgPSBleHBvcnRzLnNldFZhbHVlcyA9IGV4cG9ydHMubWFwRW50cmllcyA9IGV4cG9ydHMubWFwS2V5cyA9IGV4cG9ydHMubWFwVmFsdWVzID0gZXhwb3J0cy5maXJzdE9mID0gZXhwb3J0cy5hcnJheUVxdWFscyA9IGV4cG9ydHMuT3JkZXJlZE1hcCA9IGV4cG9ydHMuU2V0TXVsdGlNYXAgPSBleHBvcnRzLk11bHRpTWFwID0gZXhwb3J0cy5hc3NlcnRVbnJlYWNoYWJsZSA9IGV4cG9ydHMuYXNzZXJ0ID0gdm9pZCAwO1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycgPyBtZXNzYWdlIDogbWVzc2FnZSgpKTtcbiAgICB9XG59XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmZ1bmN0aW9uIGFzc2VydFVucmVhY2hhYmxlKF8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaWRuJ3QgZXhwZWN0IHRvIGdldCBoZXJlXCIpO1xufVxuZXhwb3J0cy5hc3NlcnRVbnJlYWNoYWJsZSA9IGFzc2VydFVucmVhY2hhYmxlO1xuY2xhc3MgTXVsdGlNYXAgZXh0ZW5kcyBNYXAge1xuICAgIGFkZChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgW3ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZEFsbChvdGhlck1hcCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2c10gb2Ygb3RoZXJNYXAuZW50cmllcygpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChrLCB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLk11bHRpTWFwID0gTXVsdGlNYXA7XG5jbGFzcyBTZXRNdWx0aU1hcCBleHRlbmRzIE1hcCB7XG4gICAgYWRkKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuZ2V0KGtleSk7XG4gICAgICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICB0aGlzLnNldChrZXksIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLmFkZCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRBbGwob3RoZXJNYXApIHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdnNdIG9mIG90aGVyTWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIHZzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoaywgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5TZXRNdWx0aU1hcCA9IFNldE11bHRpTWFwO1xuY2xhc3MgT3JkZXJlZE1hcCB7XG4gICAgY29uc3RydWN0b3IoY29tcGFyZUZuID0gT3JkZXJlZE1hcC5kZWZhdWx0Q29tcGFyZUZuKSB7XG4gICAgICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9jb21wYXJlRm4gPSBjb21wYXJlRm47XG4gICAgfVxuICAgIHN0YXRpYyBkZWZhdWx0Q29tcGFyZUZuKGEsIGIpIHtcbiAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiA8IGEpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBhZGQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3ZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRLZXlJbk9yZGVyKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmdldChrZXkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlzO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlzLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuX3ZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGFzc2VydCh2LCAndmFsdWUgZm9yIGtub3duIGtleSBub3QgZm91bmQgaW4gT3JkZXJlZE1hcCcpO1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnNlcnRLZXlJbk9yZGVyKGtleSkge1xuICAgICAgICBsZXQgbG93ZXIgPSAwO1xuICAgICAgICBsZXQgdXBwZXIgPSB0aGlzLl9rZXlzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChsb3dlciA8PSB1cHBlcikge1xuICAgICAgICAgICAgY29uc3QgbWlkZGxlID0gTWF0aC5mbG9vcigodXBwZXIgKyBsb3dlcikgLyAyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wYXJlRm4odGhpcy5fa2V5c1ttaWRkbGVdLCBrZXkpIDwgMCkge1xuICAgICAgICAgICAgICAgIGxvd2VyID0gbWlkZGxlICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVwcGVyID0gbWlkZGxlIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9rZXlzID0gdGhpcy5fa2V5cy5zbGljZSgwLCBsb3dlcikuY29uY2F0KGtleSkuY29uY2F0KHRoaXMuX2tleXMuc2xpY2UobG93ZXIpKTtcbiAgICB9XG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2tleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLl92YWx1ZXMuZ2V0KHRoaXMuX2tleXNbaV0pO1xuICAgICAgICAgICAgYXNzZXJ0KHYsICd2YWx1ZSBmb3Iga25vd24ga2V5IG5vdCBmb3VuZCBpbiBPcmRlcmVkTWFwJyk7XG4gICAgICAgICAgICB5aWVsZCB2O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5PcmRlcmVkTWFwID0gT3JkZXJlZE1hcDtcbmZ1bmN0aW9uIGFycmF5RXF1YWxzKGEsIGIsIGVxdWFsRmN0KSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZWx0RXF1YWwgPSBlcXVhbEZjdCA/IGVxdWFsRmN0KGFbaV0sIGJbaV0pIDogYVtpXSA9PT0gYltpXTtcbiAgICAgICAgaWYgKCFlbHRFcXVhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5hcnJheUVxdWFscyA9IGFycmF5RXF1YWxzO1xuZnVuY3Rpb24gZmlyc3RPZihpdGVyYWJsZSkge1xuICAgIGNvbnN0IHJlcyA9IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKS5uZXh0KCk7XG4gICAgcmV0dXJuIHJlcy5kb25lID8gdW5kZWZpbmVkIDogcmVzLnZhbHVlO1xufVxuZXhwb3J0cy5maXJzdE9mID0gZmlyc3RPZjtcbmZ1bmN0aW9uIG1hcFZhbHVlcyhtYXApIHtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShtYXAuc2l6ZSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgdiBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHY7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmV4cG9ydHMubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuZnVuY3Rpb24gbWFwS2V5cyhtYXApIHtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShtYXAuc2l6ZSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgayBvZiBtYXAua2V5cygpKSB7XG4gICAgICAgIGFycmF5W2krK10gPSBrO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLm1hcEtleXMgPSBtYXBLZXlzO1xuZnVuY3Rpb24gbWFwRW50cmllcyhtYXApIHtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShtYXAuc2l6ZSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgbWFwLmVudHJpZXMoKSkge1xuICAgICAgICBhcnJheVtpKytdID0gZW50cnk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmV4cG9ydHMubWFwRW50cmllcyA9IG1hcEVudHJpZXM7XG5mdW5jdGlvbiBzZXRWYWx1ZXMoc2V0KSB7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkoc2V0LnNpemUpO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IHYgb2Ygc2V0LnZhbHVlcygpKSB7XG4gICAgICAgIGFycmF5W2krK10gPSB2O1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLnNldFZhbHVlcyA9IHNldFZhbHVlcztcbmNsYXNzIE1hcFdpdGhDYWNoZWRBcnJheXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgY2xlYXJDYWNoZXMoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkS2V5cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYWNoZWRWYWx1ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuc2l6ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckNhY2hlcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxldGVkO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5tYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jbGVhckNhY2hlcygpO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGVkS2V5cykge1xuICAgICAgICAgICAgdGhpcy5jYWNoZWRLZXlzID0gbWFwS2V5cyh0aGlzLm1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkS2V5cztcbiAgICB9XG4gICAgdmFsdWVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGVkVmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZFZhbHVlcyA9IG1hcFZhbHVlcyh0aGlzLm1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkVmFsdWVzO1xuICAgIH1cbn1cbmV4cG9ydHMuTWFwV2l0aENhY2hlZEFycmF5cyA9IE1hcFdpdGhDYWNoZWRBcnJheXM7XG5mdW5jdGlvbiBjb3B5V2l0TmV3TGVuZ3RoKGFyciwgbmV3TGVuZ3RoKSB7XG4gICAgYXNzZXJ0KG5ld0xlbmd0aCA+PSBhcnIubGVuZ3RoLCAoKSA9PiBgJHtuZXdMZW5ndGh9IDwgJHthcnIubGVuZ3RofWApO1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQXJyYXkobmV3TGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb3B5W2ldID0gYXJyW2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn1cbmV4cG9ydHMuY29weVdpdE5ld0xlbmd0aCA9IGNvcHlXaXROZXdMZW5ndGg7XG5mdW5jdGlvbiB2YWxpZGF0ZVN0cmluZ0NvbnRhaW5zQm9vbGVhbihzdHIpIHtcbiAgICBpZiAoIXN0cikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAoc3RyLnRvTG9jYWxlTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgY2FzZSBcInllc1wiOlxuICAgICAgICBjYXNlIFwiMVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgICBjYXNlIFwibm9cIjpcbiAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZVN0cmluZ0NvbnRhaW5zQm9vbGVhbiA9IHZhbGlkYXRlU3RyaW5nQ29udGFpbnNCb29sZWFuO1xuZnVuY3Rpb24gam9pblN0cmluZ3ModG9Kb2luLCBzZXAgPSAnLCAnLCBmaXJzdFNlcCwgbGFzdFNlcCA9ICcgYW5kICcpIHtcbiAgICBpZiAodG9Kb2luLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3QgZmlyc3QgPSB0b0pvaW5bMF07XG4gICAgaWYgKHRvSm9pbi5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXR1cm4gZmlyc3Q7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSB0b0pvaW5bdG9Kb2luLmxlbmd0aCAtIDFdO1xuICAgIGlmICh0b0pvaW4ubGVuZ3RoID09IDIpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0ICsgKGZpcnN0U2VwID8gZmlyc3RTZXAgOiBsYXN0U2VwKSArIGxhc3Q7XG4gICAgfVxuICAgIHJldHVybiBmaXJzdCArIChmaXJzdFNlcCA/IGZpcnN0U2VwIDogc2VwKSArIHRvSm9pbi5zbGljZSgxLCB0b0pvaW4ubGVuZ3RoIC0gMSkgKyBsYXN0U2VwICsgbGFzdDtcbn1cbmV4cG9ydHMuam9pblN0cmluZ3MgPSBqb2luU3RyaW5ncztcbmNvbnN0IERFRkFVTFRfSFVNQU5fUkVBREFCTEVfTElTVF9DVVRPRkZfTEVOR1RIID0gMTAwO1xuZnVuY3Rpb24gcHJpbnRIdW1hblJlYWRhYmxlTGlzdChuYW1lcywgeyBlbXB0eVZhbHVlLCBwcmVmaXgsIHByZWZpeFBsdXJhbCwgbGFzdFNlcGFyYXRvciwgY3V0b2ZmX291dHB1dF9sZW5ndGgsIH0pIHtcbiAgICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVZhbHVlICE9PSBudWxsICYmIGVtcHR5VmFsdWUgIT09IHZvaWQgMCA/IGVtcHR5VmFsdWUgOiAnJztcbiAgICB9XG4gICAgaWYgKG5hbWVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyAnICcgKyBuYW1lc1swXSA6IG5hbWVzWzBdO1xuICAgIH1cbiAgICBjb25zdCBjdXRvZmYgPSBjdXRvZmZfb3V0cHV0X2xlbmd0aCAhPT0gbnVsbCAmJiBjdXRvZmZfb3V0cHV0X2xlbmd0aCAhPT0gdm9pZCAwID8gY3V0b2ZmX291dHB1dF9sZW5ndGggOiBERUZBVUxUX0hVTUFOX1JFQURBQkxFX0xJU1RfQ1VUT0ZGX0xFTkdUSDtcbiAgICBjb25zdCB7IGxhc3RJZHggfSA9IG5hbWVzLnJlZHVjZSgoeyBsYXN0SWR4LCBsZW5ndGggfSwgbmFtZSkgPT4ge1xuICAgICAgICBpZiAobGVuZ3RoICsgbmFtZS5sZW5ndGggPiBjdXRvZmYpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGFzdElkeCxcbiAgICAgICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXN0SWR4OiBsYXN0SWR4ICsgMSxcbiAgICAgICAgICAgIGxlbmd0aDogbGVuZ3RoICsgbmFtZS5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgfSwgeyBsYXN0SWR4OiAwLCBsZW5ndGg6IDAgfSk7XG4gICAgY29uc3QgdG9EaXNwbGF5ID0gbmFtZXMuc2xpY2UoMCwgTWF0aC5tYXgoMSwgbGFzdElkeCkpO1xuICAgIGNvbnN0IGFjdHVhbFByZWZpeCA9IHByZWZpeFBsdXJhbFxuICAgICAgICA/IHByZWZpeFBsdXJhbCArICcgJ1xuICAgICAgICA6IChwcmVmaXggPyBwcmVmaXggKyAnICcgOiAnJyk7XG4gICAgaWYgKHRvRGlzcGxheS5sZW5ndGggPT09IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gYWN0dWFsUHJlZml4ICsgam9pblN0cmluZ3ModG9EaXNwbGF5LCAnLCAnLCB1bmRlZmluZWQsIGxhc3RTZXBhcmF0b3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFjdHVhbFByZWZpeCArIGpvaW5TdHJpbmdzKHRvRGlzcGxheSwgJywgJywgdW5kZWZpbmVkLCAnLCAnKSArICcsIC4uLic7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludEh1bWFuUmVhZGFibGVMaXN0ID0gcHJpbnRIdW1hblJlYWRhYmxlTGlzdDtcbmNvbnN0IGlzRGVmaW5lZCA9ICh0KSA9PiB0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWU7XG5leHBvcnRzLmlzRGVmaW5lZCA9IGlzRGVmaW5lZDtcbmZ1bmN0aW9uIHJlbW92ZUFycmF5RWxlbWVudChlbGVtZW50LCBhcnJheSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihlbGVtZW50KTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLnJlbW92ZUFycmF5RWxlbWVudCA9IHJlbW92ZUFycmF5RWxlbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZVNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgdmFsdWVzXzEgPSByZXF1aXJlKFwiLi92YWx1ZXNcIik7XG5jb25zdCBpbnRyb3NwZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRyb3NwZWN0aW9uXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKSB7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0b3Ioc2NoZW1hKS52YWxpZGF0ZSgpO1xufVxuZXhwb3J0cy52YWxpZGF0ZVNjaGVtYSA9IHZhbGlkYXRlU2NoZW1hO1xuY2xhc3MgSW5wdXRPYmplY3RDaXJjdWxhclJlZnNWYWxpZGF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gb25FcnJvcjtcbiAgICAgICAgdGhpcy52aXNpdGVkVHlwZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gW107XG4gICAgICAgIHRoaXMuZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBkZXRlY3RDeWNsZXModHlwZSkge1xuICAgICAgICBpZiAodGhpcy52aXNpdGVkVHlwZXMuaGFzKHR5cGUubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpc2l0ZWRUeXBlcy5hZGQodHlwZS5uYW1lKTtcbiAgICAgICAgdGhpcy5maWVsZFBhdGhJbmRleEJ5VHlwZU5hbWUuc2V0KHR5cGUubmFtZSwgdGhpcy5maWVsZFBhdGgubGVuZ3RoKTtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkoZmllbGQudHlwZSkgJiYgKDAsIGRlZmluaXRpb25zXzEuaXNJbnB1dE9iamVjdFR5cGUpKGZpZWxkLnR5cGUub2ZUeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IGZpZWxkLnR5cGUub2ZUeXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN5Y2xlSW5kZXggPSB0aGlzLmZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZS5nZXQoZmllbGRUeXBlLm5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmllbGRQYXRoLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmIChjeWNsZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RDeWNsZXMoZmllbGRUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN5Y2xlUGF0aCA9IHRoaXMuZmllbGRQYXRoLnNsaWNlKGN5Y2xlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoU3RyID0gY3ljbGVQYXRoLm1hcCgoZmllbGRPYmopID0+IGZpZWxkT2JqLm5hbWUpLmpvaW4oJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKGBDYW5ub3QgcmVmZXJlbmNlIElucHV0IE9iamVjdCBcIiR7ZmllbGRUeXBlLm5hbWV9XCIgd2l0aGluIGl0c2VsZiB0aHJvdWdoIGEgc2VyaWVzIG9mIG5vbi1udWxsIGZpZWxkczogXCIke3BhdGhTdHJ9XCIuYCwgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykoLi4uY3ljbGVQYXRoKSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZFBhdGgucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWVsZFBhdGhJbmRleEJ5VHlwZU5hbWUuZGVsZXRlKHR5cGUubmFtZSk7XG4gICAgfVxufVxuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMuZW1wdHlWYXJpYWJsZXMgPSBuZXcgZGVmaW5pdGlvbnNfMS5WYXJpYWJsZURlZmluaXRpb25zKCk7XG4gICAgICAgIHRoaXMuaGFzTWlzc2luZ1R5cGVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgfVxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdGhpcy5zY2hlbWEudHlwZXMoKSkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZU5hbWUodHlwZSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ09iamVjdFR5cGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0ludGVyZmFjZVR5cGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlT2JqZWN0T3JJbnRlcmZhY2VUeXBlKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdJbnB1dE9iamVjdFR5cGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRPYmplY3RUeXBlKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVbmlvblR5cGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlVW5pb25UeXBlKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFbnVtVHlwZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVFbnVtVHlwZSh0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgdGhpcy5zY2hlbWEuYWxsRGlyZWN0aXZlcygpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlTmFtZShkaXJlY3RpdmUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgZGlyZWN0aXZlLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFyZyhhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBhcHBsaWNhdGlvbiBvZiBkaXJlY3RpdmUuYXBwbGljYXRpb25zKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRGlyZWN0aXZlQXBwbGljYXRpb24oZGlyZWN0aXZlLCBhcHBsaWNhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmhhc01pc3NpbmdUeXBlcykge1xuICAgICAgICAgICAgY29uc3QgcmVmc1ZhbGlkYXRvciA9IG5ldyBJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcigobXNnLCBvcHRzKSA9PiB0aGlzLmFkZEVycm9yKG1zZywgb3B0cykpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHRoaXMuc2NoZW1hLnR5cGVzKCkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdPYmplY3RUeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSW50ZXJmYWNlVHlwZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlSW1wbGVtZW50ZWRJbnRlcmZhY2VzKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lucHV0T2JqZWN0VHlwZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZzVmFsaWRhdG9yLmRldGVjdEN5Y2xlcyh0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnM7XG4gICAgfVxuICAgIGFkZEVycm9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKG1lc3NhZ2UsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgdmFsaWRhdGVIYXNUeXBlKGVsdCkge1xuICAgICAgICBpZiAoIWVsdC50eXBlKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBFbGVtZW50ICR7ZWx0LmNvb3JkaW5hdGV9IGRvZXMgbm90IGhhdmUgYSB0eXBlIHNldGAsIHsgbm9kZXM6IGVsdC5zb3VyY2VBU1QgfSk7XG4gICAgICAgICAgICB0aGlzLmhhc01pc3NpbmdUeXBlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWVsdC50eXBlO1xuICAgIH1cbiAgICB2YWxpZGF0ZU5hbWUoZWx0KSB7XG4gICAgICAgIGlmICgoMCwgaW50cm9zcGVjdGlvbl8xLmlzSW50cm9zcGVjdGlvbk5hbWUpKGVsdC5uYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoMCwgZ3JhcGhxbF8xLmFzc2VydE5hbWUpKGVsdC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlLm1lc3NhZ2UsIGVsdC5zb3VyY2VBU1QgPyB7IG5vZGVzOiBlbHQuc291cmNlQVNUIH0gOiB7fSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGVPYmplY3RPckludGVyZmFjZVR5cGUodHlwZSkge1xuICAgICAgICBpZiAoIXR5cGUuaGFzRmllbGRzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYFR5cGUgJHt0eXBlLm5hbWV9IG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIGZpZWxkcy5gLCB7IG5vZGVzOiB0eXBlLnNvdXJjZUFTVCB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVOYW1lKGZpZWxkKTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVIYXNUeXBlKGZpZWxkKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGZpZWxkLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFyZyhhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhbGlkYXRlSW1wbGVtZW50ZWRJbnRlcmZhY2VzKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUuaW1wbGVtZW50c0ludGVyZmFjZSh0eXBlLm5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBUeXBlICR7dHlwZX0gY2Fubm90IGltcGxlbWVudCBpdHNlbGYgYmVjYXVzZSBpdCB3b3VsZCBjcmVhdGUgYSBjaXJjdWxhciByZWZlcmVuY2UuYCwgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykodHlwZSwgdHlwZS5pbnRlcmZhY2VJbXBsZW1lbnRhdGlvbih0eXBlLm5hbWUpKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZiBvZiB0eXBlLmludGVyZmFjZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGZGaWVsZCBvZiBpdGYuZmllbGRzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHR5cGUuZmllbGQoaXRmRmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBJbnRlcmZhY2UgZmllbGQgJHtpdGZGaWVsZC5jb29yZGluYXRlfSBleHBlY3RlZCBidXQgJHt0eXBlfSBkb2VzIG5vdCBwcm92aWRlIGl0LmAsIHsgbm9kZXM6ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGl0ZkZpZWxkLCB0eXBlKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRlSGFzVHlwZShpdGZGaWVsZCkgJiYgISgwLCB0eXBlc18xLmlzU3VidHlwZSkoaXRmRmllbGQudHlwZSwgZmllbGQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihgSW50ZXJmYWNlIGZpZWxkICR7aXRmRmllbGQuY29vcmRpbmF0ZX0gZXhwZWN0cyB0eXBlICR7aXRmRmllbGQudHlwZX0gYnV0ICR7ZmllbGQuY29vcmRpbmF0ZX0gb2YgdHlwZSAke2ZpZWxkLnR5cGV9IGlzIG5vdCBhIHByb3BlciBzdWJ0eXBlLmAsIHsgbm9kZXM6ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGl0ZkZpZWxkLCBmaWVsZCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRmQXJnIG9mIGl0ZkZpZWxkLmFyZ3VtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZyA9IGZpZWxkLmFyZ3VtZW50KGl0ZkFyZy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYEludGVyZmFjZSBmaWVsZCBhcmd1bWVudCAke2l0ZkFyZy5jb29yZGluYXRlfSBleHBlY3RlZCBidXQgJHtmaWVsZC5jb29yZGluYXRlfSBkb2VzIG5vdCBwcm92aWRlIGl0LmAsIHsgbm9kZXM6ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGl0ZkFyZywgZmllbGQpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVIYXNUeXBlKGl0ZkFyZykgJiYgISgwLCB0eXBlc18xLnNhbWVUeXBlKShpdGZBcmcudHlwZSwgYXJnLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBJbnRlcmZhY2UgZmllbGQgYXJndW1lbnQgJHtpdGZBcmcuY29vcmRpbmF0ZX0gZXhwZWN0cyB0eXBlICR7aXRmQXJnLnR5cGV9IGJ1dCAke2FyZy5jb29yZGluYXRlfSBpcyB0eXBlICR7YXJnLnR5cGV9LmAsIHsgbm9kZXM6ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGl0ZkFyZywgYXJnKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBmaWVsZC5hcmd1bWVudHMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRmRmllbGQuYXJndW1lbnQoYXJnLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnLmlzUmVxdWlyZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihgRmllbGQgJHtmaWVsZC5jb29yZGluYXRlfSBpbmNsdWRlcyByZXF1aXJlZCBhcmd1bWVudCAke2FyZy5uYW1lfSB0aGF0IGlzIG1pc3NpbmcgZnJvbSB0aGUgSW50ZXJmYWNlIGZpZWxkICR7aXRmRmllbGQuY29vcmRpbmF0ZX0uYCwgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykoYXJnLCBpdGZGaWVsZCkgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0Zk9mSXRmIG9mIGl0Zi5pbnRlcmZhY2VzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXR5cGUuaW1wbGVtZW50c0ludGVyZmFjZShpdGZPZkl0ZikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0Zk9mSXRmID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBUeXBlICR7dHlwZX0gY2Fubm90IGltcGxlbWVudCAke2l0Zn0gYmVjYXVzZSBpdCB3b3VsZCBjcmVhdGUgYSBjaXJjdWxhciByZWZlcmVuY2UuYCwgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykodHlwZSwgaXRmKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYFR5cGUgJHt0eXBlfSBtdXN0IGltcGxlbWVudCAke2l0Zk9mSXRmfSBiZWNhdXNlIGl0IGlzIGltcGxlbWVudGVkIGJ5ICR7aXRmfS5gLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKSh0eXBlLCBpdGYsIGl0Zk9mSXRmKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZUlucHV0T2JqZWN0VHlwZSh0eXBlKSB7XG4gICAgICAgIGlmICghdHlwZS5oYXNGaWVsZHMoKSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihgSW5wdXQgT2JqZWN0IHR5cGUgJHt0eXBlLm5hbWV9IG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIGZpZWxkcy5gLCB7IG5vZGVzOiB0eXBlLnNvdXJjZUFTVCB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVOYW1lKGZpZWxkKTtcbiAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0ZUhhc1R5cGUoZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmllbGQuaXNSZXF1aXJlZCgpICYmIGZpZWxkLmlzRGVwcmVjYXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihgUmVxdWlyZWQgaW5wdXQgZmllbGQgJHtmaWVsZC5jb29yZGluYXRlfSBjYW5ub3QgYmUgZGVwcmVjYXRlZC5gLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKShmaWVsZC5hcHBsaWVkRGlyZWN0aXZlc09mKCdkZXByZWNhdGVkJylbMF0sIGZpZWxkKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaWVsZC5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhKDAsIHZhbHVlc18xLmlzVmFsaWRWYWx1ZSkoZmllbGQuZGVmYXVsdFZhbHVlLCBmaWVsZCwgbmV3IGRlZmluaXRpb25zXzEuVmFyaWFibGVEZWZpbml0aW9ucygpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYEludmFsaWQgZGVmYXVsdCB2YWx1ZSAoZ290OiAkeygwLCB2YWx1ZXNfMS52YWx1ZVRvU3RyaW5nKShmaWVsZC5kZWZhdWx0VmFsdWUpfSkgcHJvdmlkZWQgZm9yIGlucHV0IGZpZWxkICR7ZmllbGQuY29vcmRpbmF0ZX0gb2YgdHlwZSAke2ZpZWxkLnR5cGV9LmAsIHsgbm9kZXM6ICgwLCBkZWZpbml0aW9uc18xLnNvdXJjZUFTVHMpKGZpZWxkKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZUFyZyhhcmcpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZU5hbWUoYXJnKTtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlSGFzVHlwZShhcmcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZy5pc1JlcXVpcmVkKCkgJiYgYXJnLmlzRGVwcmVjYXRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBSZXF1aXJlZCBhcmd1bWVudCAke2FyZy5jb29yZGluYXRlfSBjYW5ub3QgYmUgZGVwcmVjYXRlZC5gLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKShhcmcuYXBwbGllZERpcmVjdGl2ZXNPZignZGVwcmVjYXRlZCcpWzBdLCBhcmcpIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmcuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgISgwLCB2YWx1ZXNfMS5pc1ZhbGlkVmFsdWUpKGFyZy5kZWZhdWx0VmFsdWUsIGFyZywgbmV3IGRlZmluaXRpb25zXzEuVmFyaWFibGVEZWZpbml0aW9ucygpKSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihgSW52YWxpZCBkZWZhdWx0IHZhbHVlIChnb3Q6ICR7KDAsIHZhbHVlc18xLnZhbHVlVG9TdHJpbmcpKGFyZy5kZWZhdWx0VmFsdWUpfSkgcHJvdmlkZWQgZm9yIGFyZ3VtZW50ICR7YXJnLmNvb3JkaW5hdGV9IG9mIHR5cGUgJHthcmcudHlwZX0uYCwgeyBub2RlczogKDAsIGRlZmluaXRpb25zXzEuc291cmNlQVNUcykoYXJnKSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZVVuaW9uVHlwZSh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlLm1lbWJlcnNDb3VudCgpID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBVbmlvbiB0eXBlICR7dHlwZS5jb29yZGluYXRlfSBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBtZW1iZXIgdHlwZXMuYCwgeyBub2RlczogdHlwZS5zb3VyY2VBU1QgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGVFbnVtVHlwZSh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYEVudW0gdHlwZSAke3R5cGUuY29vcmRpbmF0ZX0gbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgdmFsdWVzLmAsIHsgbm9kZXM6IHR5cGUuc291cmNlQVNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdHlwZS52YWx1ZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVOYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5uYW1lID09PSAndHJ1ZScgfHwgdmFsdWUubmFtZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZS5uYW1lID09PSAnbnVsbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGBFbnVtIHR5cGUgJHt0eXBlLmNvb3JkaW5hdGV9IGNhbm5vdCBpbmNsdWRlIHZhbHVlOiAke3ZhbHVlfS5gLCB7IG5vZGVzOiB2YWx1ZS5zb3VyY2VBU1QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGVEaXJlY3RpdmVBcHBsaWNhdGlvbihkZWZpbml0aW9uLCBhcHBsaWNhdGlvbikge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZ3VtZW50IG9mIGRlZmluaXRpb24uYXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXBwbGljYXRpb24uYXJndW1lbnRzKClbYXJndW1lbnQubmFtZV07XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJndW1lbnQudHlwZSAmJiAhKDAsIHZhbHVlc18xLmlzVmFsaWRWYWx1ZSkodmFsdWUsIGFyZ3VtZW50LCB0aGlzLmVtcHR5VmFyaWFibGVzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGFwcGxpY2F0aW9uLnBhcmVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnREZXNjID0gcGFyZW50IGluc3RhbmNlb2YgZGVmaW5pdGlvbnNfMS5OYW1lZFNjaGVtYUVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJlbnQuY29vcmRpbmF0ZVxuICAgICAgICAgICAgICAgICAgICA6ICdzY2hlbWEnO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIFwiJHthcmd1bWVudC5jb29yZGluYXRlfVwiIG9mIHR5cGUgXCIke2FyZ3VtZW50LnR5cGV9XCIgaW4gYXBwbGljYXRpb24gb2YgXCIke2RlZmluaXRpb24uY29vcmRpbmF0ZX1cIiB0byBcIiR7cGFyZW50RGVzY31cIi5gLCB7IG5vZGVzOiAoMCwgZGVmaW5pdGlvbnNfMS5zb3VyY2VBU1RzKShhcHBsaWNhdGlvbiwgYXJndW1lbnQpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktub3duVHlwZU5hbWVzSW5GZWRlcmF0aW9uUnVsZSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3Qgc3VnZ2VzdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9zdWdnZXN0aW9uc1wiKTtcbmZ1bmN0aW9uIEtub3duVHlwZU5hbWVzSW5GZWRlcmF0aW9uUnVsZShjb250ZXh0KSB7XG4gICAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgICBjb25zdCBleGlzdGluZ1R5cGVzTWFwID0gc2NoZW1hID8gc2NoZW1hLmdldFR5cGVNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3QgZGVmaW5lZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IGRlZiBvZiBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKCgwLCBncmFwaHFsXzEuaXNUeXBlRGVmaW5pdGlvbk5vZGUpKGRlZikgfHwgKDAsIGdyYXBocWxfMS5pc1R5cGVFeHRlbnNpb25Ob2RlKShkZWYpKSB7XG4gICAgICAgICAgICBkZWZpbmVkVHlwZXNbZGVmLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhleGlzdGluZ1R5cGVzTWFwKS5jb25jYXQoT2JqZWN0LmtleXMoZGVmaW5lZFR5cGVzKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgTmFtZWRUeXBlKG5vZGUsIF8xLCBwYXJlbnQsIF8yLCBhbmNlc3RvcnMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZ1R5cGVzTWFwW3R5cGVOYW1lXSAmJiAhZGVmaW5lZFR5cGVzW3R5cGVOYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25Ob2RlID0gKF9hID0gYW5jZXN0b3JzWzJdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNTREwgPSBkZWZpbml0aW9uTm9kZSAhPSBudWxsICYmIGlzU0RMTm9kZShkZWZpbml0aW9uTm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU0RMICYmIGlzU3RhbmRhcmRUeXBlTmFtZSh0eXBlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0ZWRUeXBlcyA9ICgwLCBzdWdnZXN0aW9uc18xLnN1Z2dlc3Rpb25MaXN0KSh0eXBlTmFtZSwgaXNTREwgPyBzdGFuZGFyZFR5cGVOYW1lcy5jb25jYXQodHlwZU5hbWVzKSA6IHR5cGVOYW1lcyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgZ3JhcGhxbF8xLkdyYXBoUUxFcnJvcihgVW5rbm93biB0eXBlIFwiJHt0eXBlTmFtZX1cIi5gICsgKDAsIHN1Z2dlc3Rpb25zXzEuZGlkWW91TWVhbikoc3VnZ2VzdGVkVHlwZXMpLCB7IG5vZGVzOiBub2RlIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5Lbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGUgPSBLbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGU7XG5jb25zdCBzdGFuZGFyZFR5cGVOYW1lcyA9IFsuLi5ncmFwaHFsXzEuc3BlY2lmaWVkU2NhbGFyVHlwZXMsIC4uLmdyYXBocWxfMS5pbnRyb3NwZWN0aW9uVHlwZXNdLm1hcCgodHlwZSkgPT4gdHlwZS5uYW1lKTtcbmZ1bmN0aW9uIGlzU3RhbmRhcmRUeXBlTmFtZSh0eXBlTmFtZSkge1xuICAgIHJldHVybiBzdGFuZGFyZFR5cGVOYW1lcy5pbmRleE9mKHR5cGVOYW1lKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBpc1NETE5vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gKCFBcnJheS5pc0FycmF5KHZhbHVlKSAmJlxuICAgICAgICAoKDAsIGdyYXBocWxfMS5pc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZSkodmFsdWUpIHx8ICgwLCBncmFwaHFsXzEuaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZSkodmFsdWUpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Lbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhcmlhYmxlc0luVmFsdWUgPSBleHBvcnRzLmFyZ3VtZW50c0Zyb21BU1QgPSBleHBvcnRzLnZhbHVlRnJvbUFTVFVudHlwZWQgPSBleHBvcnRzLnZhbHVlRnJvbUFTVCA9IGV4cG9ydHMuaXNWYWxpZFZhbHVlID0gZXhwb3J0cy52YWx1ZVRvQVNUID0gZXhwb3J0cy52YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlID0gZXhwb3J0cy53aXRoRGVmYXVsdFZhbHVlcyA9IGV4cG9ydHMuYXJndW1lbnRzRXF1YWxzID0gZXhwb3J0cy52YWx1ZUVxdWFscyA9IGV4cG9ydHMudmFsdWVUb1N0cmluZyA9IHZvaWQgMDtcbmNvbnN0IGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi9kZWZpbml0aW9uc1wiKTtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3Qgc3VnZ2VzdGlvbnNfMSA9IHJlcXVpcmUoXCIuL3N1Z2dlc3Rpb25zXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCBNQVhfSU5UID0gMjE0NzQ4MzY0NztcbmNvbnN0IE1JTl9JTlQgPSAtMjE0NzQ4MzY0ODtcbmZ1bmN0aW9uIHZhbHVlVG9TdHJpbmcodiwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICB9XG4gICAgaWYgKGV4cGVjdGVkVHlwZSAmJiAoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVRvU3RyaW5nKHYsIGV4cGVjdGVkVHlwZS5vZlR5cGUpO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0ZWRUeXBlICYmICgwLCBkZWZpbml0aW9uc18xLmlzQ3VzdG9tU2NhbGFyVHlwZSkoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgICBleHBlY3RlZFR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc1ZhcmlhYmxlKSh2KSkge1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICBsZXQgZWxlbWVudHNUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZXhwZWN0ZWRUeXBlICYmICgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzVHlwZSA9IGV4cGVjdGVkVHlwZS5vZlR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdbJyArIHYubWFwKGUgPT4gdmFsdWVUb1N0cmluZyhlLCBlbGVtZW50c1R5cGUpKS5qb2luKCcsICcpICsgJ10nO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0ZWRUeXBlICYmICgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9TdHJpbmcodiwgZXhwZWN0ZWRUeXBlLm9mVHlwZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGV4cGVjdGVkVHlwZSAmJiAhKDAsIGRlZmluaXRpb25zXzEuaXNJbnB1dE9iamVjdFR5cGUpKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3snICsgT2JqZWN0LmtleXModikubWFwKGsgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gZXhwZWN0ZWRUeXBlID8gKF9hID0gZXhwZWN0ZWRUeXBlLmZpZWxkKGspKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBgJHtrfTogJHt2YWx1ZVRvU3RyaW5nKHZba10sIHZhbHVlVHlwZSl9YDtcbiAgICAgICAgfSkuam9pbignLCAnKSArICd9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNFbnVtVHlwZSkoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBlY3RlZFR5cGUudmFsdWUodikgPyB2IDogSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSBleHBlY3RlZFR5cGUuc2NoZW1hKCkuaWRUeXBlKCkgJiYgaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHYpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKHYpO1xufVxuZXhwb3J0cy52YWx1ZVRvU3RyaW5nID0gdmFsdWVUb1N0cmluZztcbmZ1bmN0aW9uIHZhbHVlRXF1YWxzKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYXJyYXlWYWx1ZUVxdWFscyhhLCBiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGIgPT09ICdvYmplY3QnICYmIG9iamVjdEVxdWFscyhhLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPT09IGI7XG59XG5leHBvcnRzLnZhbHVlRXF1YWxzID0gdmFsdWVFcXVhbHM7XG5mdW5jdGlvbiBhcnJheVZhbHVlRXF1YWxzKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghdmFsdWVFcXVhbHMoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9iamVjdEVxdWFscyhhLCBiKSB7XG4gICAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKGIpO1xuICAgIGlmIChrZXlzMS5sZW5ndGggIT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czEpIHtcbiAgICAgICAgY29uc3QgdjEgPSBhW2tleV07XG4gICAgICAgIGNvbnN0IHYyID0gYltrZXldO1xuICAgICAgICBpZiAodjIgPT09IHVuZGVmaW5lZCAmJiAha2V5czIuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWVFcXVhbHModjEsIHYyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYXJndW1lbnRzRXF1YWxzKGFyZ3MxLCBhcmdzMikge1xuICAgIGlmIChhcmdzMSA9PT0gYXJnczIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RFcXVhbHMoYXJnczEsIGFyZ3MyKTtcbn1cbmV4cG9ydHMuYXJndW1lbnRzRXF1YWxzID0gYXJndW1lbnRzRXF1YWxzO1xuZnVuY3Rpb24gYnVpbGRFcnJvcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdFZhbHVlcyh2YWx1ZSwgdHlwZSkge1xuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc1ZhcmlhYmxlKSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnZhbGlkIG51bGwgdmFsdWUgZm9yIG5vbi1udWxsIHR5cGUgJHt0eXBlfSB3aGlsZSBjb21wdXRpbmcgZGVmYXVsdCB2YWx1ZXNgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBhcHBseURlZmF1bHRWYWx1ZXModmFsdWUsIHR5cGUub2ZUeXBlKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCh2ID0+IGFwcGx5RGVmYXVsdFZhbHVlcyh2LCB0eXBlLm9mVHlwZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5RGVmYXVsdFZhbHVlcyh2YWx1ZSwgdHlwZS5vZlR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0lucHV0T2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEV4cGVjdGVkIHZhbHVlIGZvciB0eXBlICR7dHlwZX0gdG8gYmUgYW4gb2JqZWN0LCBidXQgaXMgJHt0eXBlb2YgdmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzKCkpIHtcbiAgICAgICAgICAgIGlmICghZmllbGQudHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IGJ1aWxkRXJyb3IoYENhbm5vdCBjb21wdXRlIGRlZmF1bHQgdmFsdWUgZm9yIGZpZWxkICR7ZmllbGQubmFtZX0gb2YgJHt0eXBlfSBhcyB0aGUgZmllbGQgdHlwZSBpcyB1bmRlZmluZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSB2YWx1ZVtmaWVsZC5uYW1lXTtcbiAgICAgICAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFtmaWVsZC5uYW1lXSA9IGFwcGx5RGVmYXVsdFZhbHVlcyhmaWVsZC5kZWZhdWx0VmFsdWUsIGZpZWxkLnR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShmaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBGaWVsZCBcIiR7ZmllbGQubmFtZX1cIiBvZiByZXF1aXJlZCB0eXBlICR7dHlwZX0gd2FzIG5vdCBwcm92aWRlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkW2ZpZWxkLm5hbWVdID0gYXBwbHlEZWZhdWx0VmFsdWVzKGZpZWxkVmFsdWUsIGZpZWxkLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZmllbGROYW1lIG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKCF0eXBlLmZpZWxkKGZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9ICgwLCBzdWdnZXN0aW9uc18xLnN1Z2dlc3Rpb25MaXN0KShmaWVsZE5hbWUsIHR5cGUuZmllbGRzKCkubWFwKGYgPT4gZi5uYW1lKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgRmllbGQgXCIke2ZpZWxkTmFtZX1cIiBpcyBub3QgZGVmaW5lZCBieSB0eXBlIFwiJHt0eXBlfVwiLmAgKyAoMCwgc3VnZ2VzdGlvbnNfMS5kaWRZb3VNZWFuKShzdWdnZXN0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3aXRoRGVmYXVsdFZhbHVlcyh2YWx1ZSwgYXJndW1lbnQpIHtcbiAgICBpZiAoIWFyZ3VtZW50LnR5cGUpIHtcbiAgICAgICAgdGhyb3cgYnVpbGRFcnJvcihgQ2Fubm90IGNvbXB1dGUgZGVmYXVsdCB2YWx1ZSBmb3IgYXJndW1lbnQgJHthcmd1bWVudH0gYXMgdGhlIHR5cGUgaXMgdW5kZWZpbmVkYCk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudC5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseURlZmF1bHRWYWx1ZXMoYXJndW1lbnQuZGVmYXVsdFZhbHVlLCBhcmd1bWVudC50eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXBwbHlEZWZhdWx0VmFsdWVzKHZhbHVlLCBhcmd1bWVudC50eXBlKTtcbn1cbmV4cG9ydHMud2l0aERlZmF1bHRWYWx1ZXMgPSB3aXRoRGVmYXVsdFZhbHVlcztcbmNvbnN0IGludGVnZXJTdHJpbmdSZWdFeHAgPSAvXi0/KD86MHxbMS05XVswLTldKikkLztcbmZ1bmN0aW9uIG9iamVjdEZpZWxkTm9kZVRvQ29uc3QoZmllbGQpIHtcbiAgICByZXR1cm4geyAuLi5maWVsZCwgdmFsdWU6IHZhbHVlTm9kZVRvQ29uc3RWYWx1ZU5vZGUoZmllbGQudmFsdWUpIH07XG59XG5mdW5jdGlvbiB2YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLk5VTExcbiAgICAgICAgfHwgdmFsdWUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuSU5UXG4gICAgICAgIHx8IHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLkZMT0FUXG4gICAgICAgIHx8IHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLlNUUklOR1xuICAgICAgICB8fCB2YWx1ZS5raW5kID09PSBncmFwaHFsXzEuS2luZC5CT09MRUFOXG4gICAgICAgIHx8IHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLkVOVU0pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuTElTVCkge1xuICAgICAgICBjb25zdCBjb25zdFZhbHVlcyA9IHZhbHVlLnZhbHVlcy5tYXAodiA9PiB2YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlKHYpKTtcbiAgICAgICAgcmV0dXJuIHsgLi4udmFsdWUsIHZhbHVlczogY29uc3RWYWx1ZXMgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLk9CSkVDVCkge1xuICAgICAgICBjb25zdCBjb25zdEZpZWxkcyA9IHZhbHVlLmZpZWxkcy5tYXAoZiA9PiBvYmplY3RGaWVsZE5vZGVUb0NvbnN0KGYpKTtcbiAgICAgICAgcmV0dXJuIHsgLi4udmFsdWUsIGZpZWxkczogY29uc3RGaWVsZHMgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLlZBUklBQkxFKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBWYXJpYWJsZU5vZGUgaW4gY29uc3QgQVNUJyk7XG4gICAgfVxuICAgICgwLCB1dGlsc18xLmFzc2VydFVucmVhY2hhYmxlKSh2YWx1ZSk7XG59XG5leHBvcnRzLnZhbHVlTm9kZVRvQ29uc3RWYWx1ZU5vZGUgPSB2YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlO1xuZnVuY3Rpb24gdmFsdWVUb0FTVCh2YWx1ZSwgdHlwZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgICAgICBjb25zdCBhc3RWYWx1ZSA9IHZhbHVlVG9BU1QodmFsdWUsIHR5cGUub2ZUeXBlKTtcbiAgICAgICAgaWYgKChhc3RWYWx1ZSA9PT0gbnVsbCB8fCBhc3RWYWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXN0VmFsdWUua2luZCkgPT09IGdyYXBocWxfMS5LaW5kLk5VTEwpIHtcbiAgICAgICAgICAgIHRocm93IGJ1aWxkRXJyb3IoYEludmFsaWQgbnVsbCB2YWx1ZSAke3ZhbHVlVG9TdHJpbmcodmFsdWUpfSBmb3Igbm9uLW51bGwgdHlwZSAke3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogZ3JhcGhxbF8xLktpbmQuTlVMTCB9O1xuICAgIH1cbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNWYXJpYWJsZSkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLlZBUklBQkxFLCBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiB2YWx1ZS5uYW1lIH0gfTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzQ3VzdG9tU2NhbGFyVHlwZSkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9BU1RVbnR5cGVkKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1UeXBlID0gdHlwZS5vZlR5cGU7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbSh2YWx1ZSk7XG4gICAgICAgIGlmIChpdGVtcyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXNOb2RlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbU5vZGUgPSB2YWx1ZVRvQVNUKGl0ZW0sIGl0ZW1UeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNOb2Rlcy5wdXNoKGl0ZW1Ob2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBraW5kOiBncmFwaHFsXzEuS2luZC5MSVNULCB2YWx1ZXM6IHZhbHVlc05vZGVzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlVG9BU1QodmFsdWUsIGl0ZW1UeXBlKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgYnVpbGRFcnJvcihgSW52YWxpZCBub24tb2JqZXQgdmFsdWUgZm9yIGlucHV0IHR5cGUgJHt0eXBlfSwgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBBU1Q6ICR7KDAsIHV0aWxfMS5pbnNwZWN0KSh2YWx1ZSwgdHJ1ZSwgMTAsIHRydWUpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpZWxkTm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcygpKSB7XG4gICAgICAgICAgICBpZiAoIWZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBidWlsZEVycm9yKGBDYW5ub3QgY29udmVydCB2YWx1ZSAke3ZhbHVlVG9TdHJpbmcodmFsdWUpfSBhcyBmaWVsZCAke2ZpZWxkfSBoYXMgbm8gdHlwZSBzZXRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSB2YWx1ZVRvQVNUKHZhbHVlW2ZpZWxkLm5hbWVdLCBmaWVsZC50eXBlKTtcbiAgICAgICAgICAgIGlmIChmaWVsZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZmllbGROb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuT0JKRUNUX0ZJRUxELFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiBmaWVsZC5uYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmaWVsZFZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk9CSkVDVCwgZmllbGRzOiBmaWVsZE5vZGVzIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4geyBraW5kOiBncmFwaHFsXzEuS2luZC5CT09MRUFOLCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ051bSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBpbnRlZ2VyU3RyaW5nUmVnRXhwLnRlc3Qoc3RyaW5nTnVtKVxuICAgICAgICAgICAgPyB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLklOVCwgdmFsdWU6IHN0cmluZ051bSB9XG4gICAgICAgICAgICA6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuRkxPQVQsIHZhbHVlOiBzdHJpbmdOdW0gfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzRW51bVR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBraW5kOiBncmFwaHFsXzEuS2luZC5FTlVNLCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gdHlwZS5zY2hlbWEoKS5pZFR5cGUoKSAmJiBpbnRlZ2VyU3RyaW5nUmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBraW5kOiBncmFwaHFsXzEuS2luZC5JTlQsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5TVFJJTkcsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IGJ1aWxkRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIHR5cGUgJHt0eXBlfSwgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBBU1Q6ICR7KDAsIHV0aWxfMS5pbnNwZWN0KSh2YWx1ZSl9YCk7XG59XG5leHBvcnRzLnZhbHVlVG9BU1QgPSB2YWx1ZVRvQVNUO1xuZnVuY3Rpb24gdmFsdWVUb0FTVFVudHlwZWQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogZ3JhcGhxbF8xLktpbmQuTlVMTCB9O1xuICAgIH1cbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNWYXJpYWJsZSkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLlZBUklBQkxFLCBuYW1lOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLk5BTUUsIHZhbHVlOiB2YWx1ZS5uYW1lIH0gfTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlc05vZGVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbU5vZGUgPSB2YWx1ZVRvQVNUVW50eXBlZChpdGVtKTtcbiAgICAgICAgICAgIGlmIChpdGVtTm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzTm9kZXMucHVzaChpdGVtTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsga2luZDogZ3JhcGhxbF8xLktpbmQuTElTVCwgdmFsdWVzOiB2YWx1ZXNOb2RlcyB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBmaWVsZE5vZGVzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IHZhbHVlVG9BU1RVbnR5cGVkKHZhbHVlW2tleV0pO1xuICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBmaWVsZE5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5PQkpFQ1RfRklFTEQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHsga2luZDogZ3JhcGhxbF8xLktpbmQuTkFNRSwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmllbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBraW5kOiBncmFwaHFsXzEuS2luZC5PQkpFQ1QsIGZpZWxkczogZmllbGROb2RlcyB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogZ3JhcGhxbF8xLktpbmQuQk9PTEVBTiwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBzdHJpbmdOdW0gPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICByZXR1cm4gaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHN0cmluZ051bSlcbiAgICAgICAgICAgID8geyBraW5kOiBncmFwaHFsXzEuS2luZC5JTlQsIHZhbHVlOiBzdHJpbmdOdW0gfVxuICAgICAgICAgICAgOiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLkZMT0FULCB2YWx1ZTogc3RyaW5nTnVtIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7IGtpbmQ6IGdyYXBocWxfMS5LaW5kLlNUUklORywgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIHRocm93IGJ1aWxkRXJyb3IoYEludmFsaWQgdmFsdWUsIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gQVNUOiAkeygwLCB1dGlsXzEuaW5zcGVjdCkodmFsdWUsIHRydWUsIDEwLCB0cnVlKX1gKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRWYXJpYWJsZSh2YXJpYWJsZSwgbG9jYXRpb25UeXBlLCBsb2NhdGlvbkRlZmF1bHQpIHtcbiAgICBjb25zdCB2YXJpYWJsZVR5cGUgPSB2YXJpYWJsZS50eXBlO1xuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShsb2NhdGlvblR5cGUpICYmICEoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKSh2YXJpYWJsZVR5cGUpKSB7XG4gICAgICAgIGNvbnN0IGhhc1ZhcmlhYmxlRGVmYXVsdCA9IHZhcmlhYmxlLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhcmlhYmxlLmRlZmF1bHRWYWx1ZSAhPT0gbnVsbDtcbiAgICAgICAgY29uc3QgaGFzTG9jYXRpb25EZWZhdWx0ID0gbG9jYXRpb25EZWZhdWx0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghaGFzVmFyaWFibGVEZWZhdWx0ICYmICFoYXNMb2NhdGlvbkRlZmF1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJlVHlwZXNDb21wYXRpYmxlKHZhcmlhYmxlVHlwZSwgbG9jYXRpb25UeXBlLm9mVHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBhcmVUeXBlc0NvbXBhdGlibGUodmFyaWFibGVUeXBlLCBsb2NhdGlvblR5cGUpO1xufVxuZnVuY3Rpb24gYXJlVHlwZXNDb21wYXRpYmxlKHZhcmlhYmxlVHlwZSwgbG9jYXRpb25UeXBlKSB7XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKGxvY2F0aW9uVHlwZSkpIHtcbiAgICAgICAgaWYgKCEoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKSh2YXJpYWJsZVR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZVR5cGVzQ29tcGF0aWJsZSh2YXJpYWJsZVR5cGUub2ZUeXBlLCBsb2NhdGlvblR5cGUub2ZUeXBlKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKHZhcmlhYmxlVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGFyZVR5cGVzQ29tcGF0aWJsZSh2YXJpYWJsZVR5cGUub2ZUeXBlLCBsb2NhdGlvblR5cGUpO1xuICAgIH1cbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNMaXN0VHlwZSkobG9jYXRpb25UeXBlKSkge1xuICAgICAgICBpZiAoISgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKHZhcmlhYmxlVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJlVHlwZXNDb21wYXRpYmxlKHZhcmlhYmxlVHlwZS5vZlR5cGUsIGxvY2F0aW9uVHlwZS5vZlR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gISgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKHZhcmlhYmxlVHlwZSkgJiYgKDAsIHR5cGVzXzEuc2FtZVR5cGUpKHZhcmlhYmxlVHlwZSwgbG9jYXRpb25UeXBlKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRWYWx1ZSh2YWx1ZSwgYXJndW1lbnQsIHZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcbiAgICByZXR1cm4gaXNWYWxpZFZhbHVlQXBwbGljYXRpb24odmFsdWUsIGFyZ3VtZW50LnR5cGUsIGFyZ3VtZW50LmRlZmF1bHRWYWx1ZSwgdmFyaWFibGVEZWZpbml0aW9ucyk7XG59XG5leHBvcnRzLmlzVmFsaWRWYWx1ZSA9IGlzVmFsaWRWYWx1ZTtcbmZ1bmN0aW9uIGlzVmFsaWRWYWx1ZUFwcGxpY2F0aW9uKHZhbHVlLCBsb2NhdGlvblR5cGUsIGxvY2F0aW9uRGVmYXVsdCwgdmFyaWFibGVEZWZpbml0aW9ucykge1xuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc1ZhcmlhYmxlKSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHZhcmlhYmxlRGVmaW5pdGlvbnMuZGVmaW5pdGlvbih2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhIWRlZmluaXRpb24gJiYgaXNWYWxpZFZhcmlhYmxlKGRlZmluaXRpb24sIGxvY2F0aW9uVHlwZSwgbG9jYXRpb25EZWZhdWx0KTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTm9uTnVsbFR5cGUpKGxvY2F0aW9uVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIGlzVmFsaWRWYWx1ZUFwcGxpY2F0aW9uKHZhbHVlLCBsb2NhdGlvblR5cGUub2ZUeXBlLCB1bmRlZmluZWQsIHZhcmlhYmxlRGVmaW5pdGlvbnMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzQ3VzdG9tU2NhbGFyVHlwZSkobG9jYXRpb25UeXBlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzTGlzdFR5cGUpKGxvY2F0aW9uVHlwZSkpIHtcbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSBsb2NhdGlvblR5cGUub2ZUeXBlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShpdGVtID0+IGlzVmFsaWRWYWx1ZUFwcGxpY2F0aW9uKGl0ZW0sIGl0ZW1UeXBlLCB1bmRlZmluZWQsIHZhcmlhYmxlRGVmaW5pdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNWYWxpZFZhbHVlQXBwbGljYXRpb24odmFsdWUsIGl0ZW1UeXBlLCBsb2NhdGlvbkRlZmF1bHQsIHZhcmlhYmxlRGVmaW5pdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNJbnB1dE9iamVjdFR5cGUpKGxvY2F0aW9uVHlwZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZUtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHZhbHVlKSk7XG4gICAgICAgIGNvbnN0IGZpZWxkc0FyZVZhbGlkID0gbG9jYXRpb25UeXBlLmZpZWxkcygpLmV2ZXJ5KGZpZWxkID0+IHtcbiAgICAgICAgICAgIHZhbHVlS2V5cy5kZWxldGUoZmllbGQubmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZFZhbHVlQXBwbGljYXRpb24odmFsdWVbZmllbGQubmFtZV0sIGZpZWxkLnR5cGUsIGZpZWxkLmRlZmF1bHRWYWx1ZSwgdmFyaWFibGVEZWZpbml0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBoYXNVbmV4cGVjdGVkRmllbGQgPSB2YWx1ZUtleXMuc2l6ZSAhPT0gMDtcbiAgICAgICAgcmV0dXJuIGZpZWxkc0FyZVZhbGlkICYmICFoYXNVbmV4cGVjdGVkRmllbGQ7XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtYSA9IGxvY2F0aW9uVHlwZS5zY2hlbWEoKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uVHlwZSA9PT0gc2NoZW1hLmJvb2xlYW5UeXBlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBzdHJpbmdOdW0gPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICBpZiAobG9jYXRpb25UeXBlID09PSBzY2hlbWEuaW50VHlwZSgpIHx8IGxvY2F0aW9uVHlwZSA9PT0gc2NoZW1hLmlkVHlwZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHN0cmluZ051bSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uVHlwZSA9PT0gc2NoZW1hLmZsb2F0VHlwZSgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNFbnVtVHlwZSkobG9jYXRpb25UeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uVHlwZS52YWx1ZSh2YWx1ZSkgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIGRlZmluaXRpb25zXzEuaXNTY2FsYXJUeXBlKShsb2NhdGlvblR5cGUpXG4gICAgICAgICAgICAmJiBsb2NhdGlvblR5cGUgIT09IHNjaGVtYS5ib29sZWFuVHlwZSgpXG4gICAgICAgICAgICAmJiBsb2NhdGlvblR5cGUgIT09IHNjaGVtYS5pbnRUeXBlKClcbiAgICAgICAgICAgICYmIGxvY2F0aW9uVHlwZSAhPT0gc2NoZW1hLmZsb2F0VHlwZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB2YWx1ZUZyb21BU1Qobm9kZSwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgaWYgKG5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuTlVMTCkge1xuICAgICAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNOb25OdWxsVHlwZSkoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCBudWxsIHZhbHVlIGZvciBub24tbnVsbCB0eXBlIFwiJHtleHBlY3RlZFR5cGV9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKG5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuVkFSSUFCTEUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWZpbml0aW9uc18xLlZhcmlhYmxlKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc05vbk51bGxUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZS5vZlR5cGU7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0xpc3RUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGNvbnN0IGJhc2VUeXBlID0gZXhwZWN0ZWRUeXBlLm9mVHlwZTtcbiAgICAgICAgaWYgKG5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuTElTVCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWVzLm1hcCh2ID0+IHZhbHVlRnJvbUFTVCh2LCBiYXNlVHlwZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdmFsdWVGcm9tQVNUKG5vZGUsIGJhc2VUeXBlKV07XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0ludFR5cGUpKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgaWYgKG5vZGUua2luZCAhPT0gZ3JhcGhxbF8xLktpbmQuSU5UKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBJbnQgY2Fubm90IHJlcHJlc2VudCBub24taW50ZWdlciB2YWx1ZSAkeygwLCBncmFwaHFsXzEucHJpbnQpKG5vZGUpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpID0gcGFyc2VJbnQobm9kZS52YWx1ZSwgMTApO1xuICAgICAgICBpZiAoaSA+IE1BWF9JTlQgfHwgaSA8IE1JTl9JTlQpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWUgJHtpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzRmxvYXRUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAgIGlmIChub2RlLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLklOVCkge1xuICAgICAgICAgICAgcGFyc2VkID0gcGFyc2VJbnQobm9kZS52YWx1ZSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuRkxPQVQpIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IHBhcnNlRmxvYXQobm9kZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBGbG9hdCBjYW4gb25seSByZXByZXNlbnQgaW50ZWdlciBvciBmbG9hdCB2YWx1ZSwgYnV0IGdvdCBhICR7bm9kZS5raW5kfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRmluaXRlKHBhcnNlZCkpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEZsb2F0IGNhbm5vdCByZXByZXNlbnQgbm9uIG51bWVyaWMgdmFsdWUgJHtwYXJzZWR9LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0Jvb2xlYW5UeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLkJPT0xFQU4pIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEJvb2xlYW4gY2Fubm90IHJlcHJlc2VudCBhIG5vbiBib29sZWFuIHZhbHVlICR7KDAsIGdyYXBocWxfMS5wcmludCkobm9kZSl9LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNTdHJpbmdUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLlNUUklORykge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgU3RyaW5nIGNhbm5vdCByZXByZXNlbnQgbm9uIHN0cmluZyB2YWx1ZSAkeygwLCBncmFwaHFsXzEucHJpbnQpKG5vZGUpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzSURUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLlNUUklORyAmJiBub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLklOVCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSUQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZSAkeygwLCBncmFwaHFsXzEucHJpbnQpKG5vZGUpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzU2NhbGFyVHlwZSkoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVGcm9tQVNUVW50eXBlZChub2RlKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkZWZpbml0aW9uc18xLmlzSW5wdXRPYmplY3RUeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLk9CSkVDVCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW5wdXQgT2JqZWN0IFR5cGUgJHtleHBlY3RlZFR5cGV9IGNhbm5vdCByZXByZXNlbnQgbm9uLW9iamVjdCB2YWx1ZSAkeygwLCBncmFwaHFsXzEucHJpbnQpKG5vZGUpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGNvbnN0IGYgb2Ygbm9kZS5maWVsZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBmLm5hbWUudmFsdWU7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGV4cGVjdGVkVHlwZS5maWVsZChuYW1lKTtcbiAgICAgICAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcl8xLkVSUk9SUy5JTlZBTElEX0dSQVBIUUwuZXJyKGBVbmtub3duIGZpZWxkIFwiJHtuYW1lfVwiIGZvdW5kIGluIHZhbHVlIGZvciBJbnB1dCBPYmplY3QgVHlwZSBcIiR7ZXhwZWN0ZWRUeXBlfVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqW25hbWVdID0gdmFsdWVGcm9tQVNUKGYudmFsdWUsIGZpZWxkLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmICgoMCwgZGVmaW5pdGlvbnNfMS5pc0VudW1UeXBlKShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLlNUUklORyAmJiBub2RlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLkVOVU0pIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXzEuRVJST1JTLklOVkFMSURfR1JBUEhRTC5lcnIoYEVudW0gVHlwZSAke2V4cGVjdGVkVHlwZX0gY2Fubm90IHJlcHJlc2VudCB2YWx1ZSAkeygwLCBncmFwaHFsXzEucHJpbnQpKG5vZGUpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4cGVjdGVkVHlwZS52YWx1ZShub2RlLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgRW51bSBUeXBlICR7ZXhwZWN0ZWRUeXBlfSBoYXMgbm8gdmFsdWUgJHtub2RlLnZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG4gICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShmYWxzZSwgKCkgPT4gYFVuZXhwZWN0ZWQgaW5wdXQgdHlwZSAke2V4cGVjdGVkVHlwZX0gb2Yga2luZCAke2V4cGVjdGVkVHlwZS5raW5kfS5gKTtcbn1cbmV4cG9ydHMudmFsdWVGcm9tQVNUID0gdmFsdWVGcm9tQVNUO1xuZnVuY3Rpb24gdmFsdWVGcm9tQVNUVW50eXBlZChub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5OVUxMOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuSU5UOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG5vZGUudmFsdWUsIDEwKTtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUudmFsdWUpO1xuICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLlNUUklORzpcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5FTlVNOlxuICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLkJPT0xFQU46XG4gICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5MSVNUOlxuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWVzLm1hcCh2YWx1ZUZyb21BU1RVbnR5cGVkKTtcbiAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5PQkpFQ1Q6XG4gICAgICAgICAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgbm9kZS5maWVsZHMuZm9yRWFjaChmID0+IG9ialtmLm5hbWUudmFsdWVdID0gdmFsdWVGcm9tQVNUVW50eXBlZChmLnZhbHVlKSk7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLlZBUklBQkxFOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBkZWZpbml0aW9uc18xLlZhcmlhYmxlKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgfVxufVxuZXhwb3J0cy52YWx1ZUZyb21BU1RVbnR5cGVkID0gdmFsdWVGcm9tQVNUVW50eXBlZDtcbmZ1bmN0aW9uIGFyZ3VtZW50c0Zyb21BU1QoY29udGV4dCwgYXJncywgYXJnc0RlZmluZXIpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoYXJncykge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZ05vZGUgb2YgYXJncykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGFyZ05vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IChfYSA9IGFyZ3NEZWZpbmVyLmFyZ3VtZW50KG5hbWUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZTtcbiAgICAgICAgICAgIGlmICghZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgVW5rbm93biBhcmd1bWVudCBcIiR7bmFtZX1cIiBmb3VuZCBpbiB2YWx1ZTogXCIke2NvbnRleHR9XCIgaGFzIG5vIGFyZ3VtZW50IG5hbWVkIFwiJHtuYW1lfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlRnJvbUFTVChhcmdOb2RlLnZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGdyYXBocWxfMS5HcmFwaFFMRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMS5FUlJPUlMuSU5WQUxJRF9HUkFQSFFMLmVycihgSW52YWxpZCB2YWx1ZSBmb3IgYXJndW1lbnQgXCIke25hbWV9XCI6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5leHBvcnRzLmFyZ3VtZW50c0Zyb21BU1QgPSBhcmd1bWVudHNGcm9tQVNUO1xuZnVuY3Rpb24gdmFyaWFibGVzSW5WYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IHZhcmlhYmxlcyA9IFtdO1xuICAgIGNvbGxlY3RWYXJpYWJsZXModmFsdWUsIHZhcmlhYmxlcyk7XG4gICAgcmV0dXJuIHZhcmlhYmxlcztcbn1cbmV4cG9ydHMudmFyaWFibGVzSW5WYWx1ZSA9IHZhcmlhYmxlc0luVmFsdWU7XG5mdW5jdGlvbiBjb2xsZWN0VmFyaWFibGVzKHZhbHVlLCB2YXJpYWJsZXMpIHtcbiAgICBpZiAoKDAsIGRlZmluaXRpb25zXzEuaXNWYXJpYWJsZSkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdmFyaWFibGVzLnNvbWUodiA9PiB2Lm5hbWUgPT09IHZhbHVlLm5hbWUpKSB7XG4gICAgICAgICAgICB2YXJpYWJsZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2godiA9PiBjb2xsZWN0VmFyaWFibGVzKHYsIHZhcmlhYmxlcykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChrID0+IGNvbGxlY3RWYXJpYWJsZXModmFsdWVba10sIHZhcmlhYmxlcykpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVpbGRGZWRlcmF0ZWRTY2hlbWEgPSBleHBvcnRzLmJ1aWxkU3ViZ3JhcGhTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3Qgc2NoZW1hX2hlbHBlcl8xID0gcmVxdWlyZShcIi4vc2NoZW1hLWhlbHBlclwiKTtcbmNvbnN0IGZlZGVyYXRpb25faW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFsc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGJ1aWxkU3ViZ3JhcGhTY2hlbWEobW9kdWxlc09yU0RMKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBzaGFwZWRNb2R1bGVzT3JTREw7XG4gICAgaWYgKCd0eXBlRGVmcycgaW4gbW9kdWxlc09yU0RMKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZURlZnMsIHJlc29sdmVycyB9ID0gbW9kdWxlc09yU0RMO1xuICAgICAgICBjb25zdCBhdWdtZW50ZWRUeXBlRGVmcyA9IEFycmF5LmlzQXJyYXkodHlwZURlZnMpID8gdHlwZURlZnMgOiBbdHlwZURlZnNdO1xuICAgICAgICBzaGFwZWRNb2R1bGVzT3JTREwgPSBhdWdtZW50ZWRUeXBlRGVmcy5tYXAoKHR5cGVEZWZzLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2R1bGUgPSB7IHR5cGVEZWZzIH07XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiByZXNvbHZlcnMpXG4gICAgICAgICAgICAgICAgbW9kdWxlLnJlc29sdmVycyA9IHJlc29sdmVycztcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2hhcGVkTW9kdWxlc09yU0RMID0gbW9kdWxlc09yU0RMO1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVzID0gKDAsIHNjaGVtYV9oZWxwZXJfMS5tb2R1bGVzRnJvbVNETCkoc2hhcGVkTW9kdWxlc09yU0RMKTtcbiAgICBjb25zdCBkb2N1bWVudEFTVCA9ICgwLCBncmFwaHFsXzEuY29uY2F0QVNUKShtb2R1bGVzLm1hcChtb2R1bGUgPT4gbW9kdWxlLnR5cGVEZWZzKSk7XG4gICAgY29uc3Qgc3ViZ3JhcGggPSAoMCwgZmVkZXJhdGlvbl9pbnRlcm5hbHNfMS5idWlsZFN1YmdyYXBoKShmZWRlcmF0aW9uX2ludGVybmFsc18xLkZFREVSQVRJT05fVU5OQU1FRF9TVUJHUkFQSF9OQU1FLCAnJywgZG9jdW1lbnRBU1QsIGZhbHNlKTtcbiAgICBjb25zdCBzZGwgPSAoMCwgZmVkZXJhdGlvbl9pbnRlcm5hbHNfMS5wcmludFNjaGVtYSkoc3ViZ3JhcGguc2NoZW1hKTtcbiAgICBjb25zdCBzY2hlbWEgPSBzdWJncmFwaC5zY2hlbWEudG9HcmFwaFFMSlNTY2hlbWEoKTtcbiAgICBjb25zdCBxdWVyeVJvb3ROYW1lID0gKF9hID0gc3ViZ3JhcGguc2NoZW1hLnNjaGVtYURlZmluaXRpb24ucm9vdFR5cGUoJ3F1ZXJ5JykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lO1xuICAgICgwLCBmZWRlcmF0aW9uX2ludGVybmFsc18xLmFzc2VydCkocXVlcnlSb290TmFtZSwgJ0EgUXVlcnkgcm9vdCB0eXBlIHNob3VsZCBoYXZlIGJlZW4gYWRkZWQgYnkgYGJ1aWxkU3ViZ3JhcGhgJyk7XG4gICAgKDAsIHNjaGVtYV9oZWxwZXJfMS5hZGRSZXNvbHZlcnNUb1NjaGVtYSkoc2NoZW1hLCB7XG4gICAgICAgIFtxdWVyeVJvb3ROYW1lXToge1xuICAgICAgICAgICAgX3NlcnZpY2U6ICgpID0+ICh7IHNkbCB9KSxcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdWJncmFwaC5tZXRhZGF0YSgpLmVudGl0eVR5cGUoKSkge1xuICAgICAgICAoMCwgc2NoZW1hX2hlbHBlcl8xLmFkZFJlc29sdmVyc1RvU2NoZW1hKShzY2hlbWEsIHtcbiAgICAgICAgICAgIFtxdWVyeVJvb3ROYW1lXToge1xuICAgICAgICAgICAgICAgIF9lbnRpdGllczogKF9zb3VyY2UsIHsgcmVwcmVzZW50YXRpb25zIH0sIGNvbnRleHQsIGluZm8pID0+ICgwLCB0eXBlc18xLmVudGl0aWVzUmVzb2x2ZXIpKHsgcmVwcmVzZW50YXRpb25zLCBjb250ZXh0LCBpbmZvIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9FbnRpdHk6IHtcbiAgICAgICAgICAgICAgICBfX3Jlc29sdmVUeXBlKHBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50Ll9fdHlwZW5hbWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbW9kdWxlIG9mIG1vZHVsZXMpIHtcbiAgICAgICAgaWYgKCFtb2R1bGUucmVzb2x2ZXJzKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICgwLCBzY2hlbWFfaGVscGVyXzEuYWRkUmVzb2x2ZXJzVG9TY2hlbWEpKHNjaGVtYSwgbW9kdWxlLnJlc29sdmVycyk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG5leHBvcnRzLmJ1aWxkU3ViZ3JhcGhTY2hlbWEgPSBidWlsZFN1YmdyYXBoU2NoZW1hO1xuZXhwb3J0cy5idWlsZEZlZGVyYXRlZFNjaGVtYSA9ICgwLCB1dGlsXzEuZGVwcmVjYXRlKShidWlsZFN1YmdyYXBoU2NoZW1hLCBgJ2J1aWxkRmVkZXJhdGVkU2NoZW1hJyBpcyBkZXByZWNhdGVkLiBVc2UgJ2J1aWxkU3ViZ3JhcGhTY2hlbWEnIGluc3RlYWQuYCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZFN1YmdyYXBoU2NoZW1hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludFN1YmdyYXBoU2NoZW1hID0gZXhwb3J0cy5idWlsZFN1YmdyYXBoU2NoZW1hID0gdm9pZCAwO1xudmFyIGJ1aWxkU3ViZ3JhcGhTY2hlbWFfMSA9IHJlcXVpcmUoXCIuL2J1aWxkU3ViZ3JhcGhTY2hlbWFcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWlsZFN1YmdyYXBoU2NoZW1hXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWlsZFN1YmdyYXBoU2NoZW1hXzEuYnVpbGRTdWJncmFwaFNjaGVtYTsgfSB9KTtcbnZhciBwcmludFN1YmdyYXBoU2NoZW1hXzEgPSByZXF1aXJlKFwiLi9wcmludFN1YmdyYXBoU2NoZW1hXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJpbnRTdWJncmFwaFNjaGVtYVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJpbnRTdWJncmFwaFNjaGVtYV8xLnByaW50U3ViZ3JhcGhTY2hlbWE7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJpbnRCbG9ja1N0cmluZyA9IGV4cG9ydHMucHJpbnRUeXBlID0gZXhwb3J0cy5wcmludEludHJvc3BlY3Rpb25TY2hlbWEgPSBleHBvcnRzLnByaW50U3ViZ3JhcGhTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGZlZGVyYXRpb25faW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiQGFwb2xsby9mZWRlcmF0aW9uLWludGVybmFsc1wiKTtcbmZ1bmN0aW9uIHByaW50U3ViZ3JhcGhTY2hlbWEoc2NoZW1hKSB7XG4gICAgY29uc3QgYXN0ID0gKDAsIGZlZGVyYXRpb25faW50ZXJuYWxzXzEuZ3JhcGhRTEpTU2NoZW1hVG9BU1QpKHNjaGVtYSk7XG4gICAgY29uc3Qgc3ViZ3JhcGggPSAoMCwgZmVkZXJhdGlvbl9pbnRlcm5hbHNfMS5idWlsZFN1YmdyYXBoKShmZWRlcmF0aW9uX2ludGVybmFsc18xLkZFREVSQVRJT05fVU5OQU1FRF9TVUJHUkFQSF9OQU1FLCAnJywgYXN0LCBmYWxzZSk7XG4gICAgcmV0dXJuIHN1YmdyYXBoLnRvU3RyaW5nKCk7XG59XG5leHBvcnRzLnByaW50U3ViZ3JhcGhTY2hlbWEgPSBwcmludFN1YmdyYXBoU2NoZW1hO1xuZnVuY3Rpb24gcHJpbnRJbnRyb3NwZWN0aW9uU2NoZW1hKHNjaGVtYSkge1xuICAgIGNvbnN0IGFzdCA9ICgwLCBmZWRlcmF0aW9uX2ludGVybmFsc18xLmdyYXBoUUxKU1NjaGVtYVRvQVNUKShzY2hlbWEpO1xuICAgIGNvbnN0IHN1YmdyYXBoID0gKDAsIGZlZGVyYXRpb25faW50ZXJuYWxzXzEuYnVpbGRTdWJncmFwaCkoZmVkZXJhdGlvbl9pbnRlcm5hbHNfMS5GRURFUkFUSU9OX1VOTkFNRURfU1VCR1JBUEhfTkFNRSwgJycsIGFzdCwgZmFsc2UpO1xuICAgIHJldHVybiAoMCwgZmVkZXJhdGlvbl9pbnRlcm5hbHNfMS5wcmludFNjaGVtYSkoc3ViZ3JhcGguc2NoZW1hKTtcbn1cbmV4cG9ydHMucHJpbnRJbnRyb3NwZWN0aW9uU2NoZW1hID0gcHJpbnRJbnRyb3NwZWN0aW9uU2NoZW1hO1xuZnVuY3Rpb24gcHJpbnRUeXBlKHR5cGUpIHtcbiAgICBjb25zdCB7IGRlZmluaXRpb24sIGV4dGVuc2lvbnMgfSA9ICgwLCBmZWRlcmF0aW9uX2ludGVybmFsc18xLmdyYXBoUUxKU05hbWVkVHlwZVRvQVNUKSh0eXBlKTtcbiAgICBjb25zdCBkZWZBc3QgPSBkZWZpbml0aW9uID8gW2RlZmluaXRpb25dIDogW107XG4gICAgcmV0dXJuIGRlZkFzdC5jb25jYXQoZXh0ZW5zaW9ucykubWFwKChuKSA9PiAoMCwgZ3JhcGhxbF8xLnByaW50KShuKSkuam9pbignXFxuXFxuJyk7XG59XG5leHBvcnRzLnByaW50VHlwZSA9IHByaW50VHlwZTtcbmZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcodmFsdWUsIHByZWZlck11bHRpcGxlTGluZXMgPSBmYWxzZSkge1xuICAgIGNvbnN0IGlzU2luZ2xlTGluZSA9ICF2YWx1ZS5pbmNsdWRlcygnXFxuJyk7XG4gICAgY29uc3QgaGFzTGVhZGluZ1NwYWNlID0gdmFsdWVbMF0gPT09ICcgJyB8fCB2YWx1ZVswXSA9PT0gJ1xcdCc7XG4gICAgY29uc3QgaGFzVHJhaWxpbmdRdW90ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnXCInO1xuICAgIGNvbnN0IGhhc1RyYWlsaW5nU2xhc2ggPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJ1xcXFwnO1xuICAgIGNvbnN0IHByaW50QXNNdWx0aXBsZUxpbmVzID0gIWlzU2luZ2xlTGluZSB8fFxuICAgICAgICBoYXNUcmFpbGluZ1F1b3RlIHx8XG4gICAgICAgIGhhc1RyYWlsaW5nU2xhc2ggfHxcbiAgICAgICAgcHJlZmVyTXVsdGlwbGVMaW5lcztcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzICYmICEoaXNTaW5nbGVMaW5lICYmIGhhc0xlYWRpbmdTcGFjZSkpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgIH1cbiAgICByZXN1bHQgKz0gdmFsdWU7XG4gICAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzKSB7XG4gICAgICAgIHJlc3VsdCArPSAnXFxuJztcbiAgICB9XG4gICAgcmV0dXJuICdcIlwiXCInICsgcmVzdWx0LnJlcGxhY2UoL1wiXCJcIi9nLCAnXFxcXFwiXCJcIicpICsgJ1wiXCJcIic7XG59XG5leHBvcnRzLnByaW50QmxvY2tTdHJpbmcgPSBwcmludEJsb2NrU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpbnRTdWJncmFwaFNjaGVtYS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVpbGRTY2hlbWFGcm9tU0RMID0gZXhwb3J0cy5hZGRSZXNvbHZlcnNUb1NjaGVtYSA9IGV4cG9ydHMubW9kdWxlc0Zyb21TREwgPSBleHBvcnRzLmlzRG9jdW1lbnROb2RlID0gZXhwb3J0cy5pc05vZGUgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHZhbGlkYXRpb25fMSA9IHJlcXVpcmUoXCJncmFwaHFsL3ZhbGlkYXRpb25cIik7XG5jb25zdCB2YWxpZGF0ZV8xID0gcmVxdWlyZShcImdyYXBocWwvdmFsaWRhdGlvbi92YWxpZGF0ZVwiKTtcbmNvbnN0IHNwZWNpZmllZFJ1bGVzXzEgPSByZXF1aXJlKFwiZ3JhcGhxbC92YWxpZGF0aW9uL3NwZWNpZmllZFJ1bGVzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuZnVuY3Rpb24gaXNOb3ROdWxsT3JVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIGlzTm9kZShtYXliZU5vZGUpIHtcbiAgICByZXR1cm4gbWF5YmVOb2RlICYmIHR5cGVvZiBtYXliZU5vZGUua2luZCA9PT0gXCJzdHJpbmdcIjtcbn1cbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZnVuY3Rpb24gaXNEb2N1bWVudE5vZGUobm9kZSkge1xuICAgIHJldHVybiBpc05vZGUobm9kZSkgJiYgbm9kZS5raW5kID09PSBncmFwaHFsXzEuS2luZC5ET0NVTUVOVDtcbn1cbmV4cG9ydHMuaXNEb2N1bWVudE5vZGUgPSBpc0RvY3VtZW50Tm9kZTtcbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gY2FsbGJhY2sodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3Qgc2tpcHBlZFNETFJ1bGVzID0gW1xuICAgIHZhbGlkYXRpb25fMS5Lbm93blR5cGVOYW1lc1J1bGUsXG4gICAgdmFsaWRhdGlvbl8xLlVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUsXG4gICAgdmFsaWRhdGlvbl8xLlBvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLFxuXTtcbmNvbnN0IHNkbFJ1bGVzID0gc3BlY2lmaWVkUnVsZXNfMS5zcGVjaWZpZWRTRExSdWxlcy5maWx0ZXIocnVsZSA9PiAhc2tpcHBlZFNETFJ1bGVzLmluY2x1ZGVzKHJ1bGUpKTtcbmNvbnN0IGV4dEtpbmRUb0RlZktpbmQgPSB7XG4gICAgW2dyYXBocWxfMS5LaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTl06IGdyYXBocWxfMS5LaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT04sXG4gICAgW2dyYXBocWxfMS5LaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTl06IGdyYXBocWxfMS5LaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT04sXG4gICAgW2dyYXBocWxfMS5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTl06IGdyYXBocWxfMS5LaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04sXG4gICAgW2dyYXBocWxfMS5LaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OXTogZ3JhcGhxbF8xLktpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OLFxuICAgIFtncmFwaHFsXzEuS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OXTogZ3JhcGhxbF8xLktpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04sXG4gICAgW2dyYXBocWxfMS5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTl06IGdyYXBocWxfMS5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT05cbn07XG5mdW5jdGlvbiBtb2R1bGVzRnJvbVNETChtb2R1bGVzT3JTREwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGVzT3JTREwpKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGVzT3JTREwubWFwKG1vZHVsZU9yU0RMID0+IHtcbiAgICAgICAgICAgIGlmIChpc05vZGUobW9kdWxlT3JTREwpICYmIGlzRG9jdW1lbnROb2RlKG1vZHVsZU9yU0RMKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGVEZWZzOiBtb2R1bGVPclNETCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZU9yU0RMO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbeyB0eXBlRGVmczogbW9kdWxlc09yU0RMIH1dO1xuICAgIH1cbn1cbmV4cG9ydHMubW9kdWxlc0Zyb21TREwgPSBtb2R1bGVzRnJvbVNETDtcbmZ1bmN0aW9uIGFkZFJlc29sdmVyc1RvU2NoZW1hKHNjaGVtYSwgcmVzb2x2ZXJzKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBmb3IgKGNvbnN0IFt0eXBlTmFtZSwgZmllbGRDb25maWdzXSBvZiBPYmplY3QuZW50cmllcyhyZXNvbHZlcnMpKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEuZ2V0VHlwZSh0eXBlTmFtZSk7XG4gICAgICAgIGlmICgoMCwgZ3JhcGhxbF8xLmlzQWJzdHJhY3RUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdFeHRlbnNpb25zID0gdHlwZS5leHRlbnNpb25zO1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZmllbGROYW1lLCBmaWVsZENvbmZpZ10gb2YgT2JqZWN0LmVudHJpZXMoZmllbGRDb25maWdzKSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09ICdfX3Jlc29sdmVSZWZlcmVuY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUuZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV4aXN0aW5nRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwb2xsbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV4aXN0aW5nRXh0ZW5zaW9ucy5hcG9sbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViZ3JhcGg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKF9hID0gZXhpc3RpbmdFeHRlbnNpb25zLmFwb2xsbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlUmVmZXJlbmNlOiBmaWVsZENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmllbGROYW1lID09PSAnX19yZXNvbHZlVHlwZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5yZXNvbHZlVHlwZSA9IGZpZWxkQ29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGdyYXBocWxfMS5pc1NjYWxhclR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZuIGluIGZpZWxkQ29uZmlncykge1xuICAgICAgICAgICAgICAgIHR5cGVbZm5dID0gZmllbGRDb25maWdzW2ZuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGdyYXBocWxfMS5pc0VudW1UeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdHlwZS5nZXRWYWx1ZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IGZpZWxkQ29uZmlnc1t2YWx1ZS5uYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlLm5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlc1t2YWx1ZS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogdmFsdWUuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYXN0Tm9kZTogdmFsdWUuYXN0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0eXBlLCBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxFbnVtVHlwZSh7XG4gICAgICAgICAgICAgICAgLi4udHlwZS50b0NvbmZpZygpLFxuICAgICAgICAgICAgICAgIHZhbHVlczogbmV3VmFsdWVzXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoMCwgZ3JhcGhxbF8xLmlzT2JqZWN0VHlwZSkodHlwZSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZmllbGRNYXAgPSB0eXBlLmdldEZpZWxkcygpO1xuICAgICAgICBjb25zdCBleGlzdGluZ0V4dGVuc2lvbnMgPSB0eXBlLmV4dGVuc2lvbnM7XG4gICAgICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgZmllbGRDb25maWddIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkQ29uZmlncykpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09ICdfX3Jlc29sdmVSZWZlcmVuY2UnKSB7XG4gICAgICAgICAgICAgICAgdHlwZS5leHRlbnNpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0V4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgIGFwb2xsbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdFeHRlbnNpb25zLmFwb2xsbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmdyYXBoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKF9iID0gZXhpc3RpbmdFeHRlbnNpb25zLmFwb2xsbykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN1YmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVSZWZlcmVuY2U6IGZpZWxkQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGROYW1lID09PSAnX19pc1R5cGVPZicpIHtcbiAgICAgICAgICAgICAgICB0eXBlLmlzVHlwZU9mID0gZmllbGRDb25maWc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkTWFwW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICBpZiAoIWZpZWxkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWVsZENvbmZpZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZmllbGQucmVzb2x2ZSA9IGZpZWxkQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmllbGQucmVzb2x2ZSA9IGZpZWxkQ29uZmlnLnJlc29sdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFkZFJlc29sdmVyc1RvU2NoZW1hID0gYWRkUmVzb2x2ZXJzVG9TY2hlbWE7XG5mdW5jdGlvbiBidWlsZFNjaGVtYUZyb21TREwobW9kdWxlc09yU0RMLCBzY2hlbWFUb0V4dGVuZCkge1xuICAgIGNvbnN0IG1vZHVsZXMgPSBtb2R1bGVzRnJvbVNETChtb2R1bGVzT3JTREwpO1xuICAgIGNvbnN0IGRvY3VtZW50QVNUID0gKDAsIGdyYXBocWxfMS5jb25jYXRBU1QpKG1vZHVsZXMubWFwKG1vZHVsZSA9PiBtb2R1bGUudHlwZURlZnMpKTtcbiAgICBjb25zdCBlcnJvcnMgPSAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZVNETCkoZG9jdW1lbnRBU1QsIHNjaGVtYVRvRXh0ZW5kLCBzZGxSdWxlcyk7XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLkdyYXBoUUxTY2hlbWFWYWxpZGF0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICB9XG4gICAgY29uc3QgZGVmaW5pdGlvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGV4dGVuc2lvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZURlZmluaXRpb25zID0gW107XG4gICAgY29uc3Qgc2NoZW1hRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBjb25zdCBzY2hlbWFFeHRlbnNpb25zID0gW107XG4gICAgY29uc3Qgc2NoZW1hRGlyZWN0aXZlcyA9IFtdO1xuICAgIGxldCBkZXNjcmlwdGlvbjtcbiAgICBmb3IgKGNvbnN0IGRlZmluaXRpb24gb2YgZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKCgwLCBncmFwaHFsXzEuaXNUeXBlRGVmaW5pdGlvbk5vZGUpKGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGRlZmluaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc01hcFt0eXBlTmFtZV0pIHtcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uc01hcFt0eXBlTmFtZV0ucHVzaChkZWZpbml0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zTWFwW3R5cGVOYW1lXSA9IFtkZWZpbml0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgZ3JhcGhxbF8xLmlzVHlwZUV4dGVuc2lvbk5vZGUpKGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGRlZmluaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChleHRlbnNpb25zTWFwW3R5cGVOYW1lXSkge1xuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNNYXBbdHlwZU5hbWVdLnB1c2goZGVmaW5pdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zTWFwW3R5cGVOYW1lXSA9IFtkZWZpbml0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IGdyYXBocWxfMS5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICAgICAgICBkaXJlY3RpdmVEZWZpbml0aW9ucy5wdXNoKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgIHNjaGVtYURlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbik7XG4gICAgICAgICAgICBzY2hlbWFEaXJlY3RpdmVzLnB1c2goLi4uKGRlZmluaXRpb24uZGlyZWN0aXZlcyA/IGRlZmluaXRpb24uZGlyZWN0aXZlcyA6IFtdKSk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlZmluaXRpb24uZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBncmFwaHFsXzEuS2luZC5TQ0hFTUFfRVhURU5TSU9OKSB7XG4gICAgICAgICAgICBzY2hlbWFFeHRlbnNpb25zLnB1c2goZGVmaW5pdGlvbik7XG4gICAgICAgICAgICBzY2hlbWFEaXJlY3RpdmVzLnB1c2goLi4uKGRlZmluaXRpb24uZGlyZWN0aXZlcyA/IGRlZmluaXRpb24uZGlyZWN0aXZlcyA6IFtdKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNjaGVtYSA9IHNjaGVtYVRvRXh0ZW5kXG4gICAgICAgID8gc2NoZW1hVG9FeHRlbmRcbiAgICAgICAgOiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxTY2hlbWEoe1xuICAgICAgICAgICAgcXVlcnk6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICBjb25zdCBtaXNzaW5nVHlwZURlZmluaXRpb25zID0gW107XG4gICAgZm9yIChjb25zdCBbZXh0ZW5kZWRUeXBlTmFtZSwgZXh0ZW5zaW9uc10gb2YgT2JqZWN0LmVudHJpZXMoZXh0ZW5zaW9uc01hcCkpIHtcbiAgICAgICAgaWYgKCFkZWZpbml0aW9uc01hcFtleHRlbmRlZFR5cGVOYW1lXSkge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBleHRlbnNpb24ua2luZDtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAga2luZDogZXh0S2luZFRvRGVmS2luZFtraW5kXSxcbiAgICAgICAgICAgICAgICBuYW1lOiBleHRlbnNpb24ubmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1pc3NpbmdUeXBlRGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY2hlbWEgPSAoMCwgZ3JhcGhxbF8xLmV4dGVuZFNjaGVtYSkoc2NoZW1hLCB7XG4gICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkRPQ1VNRU5ULFxuICAgICAgICBkZWZpbml0aW9uczogW1xuICAgICAgICAgICAgLi4uT2JqZWN0LnZhbHVlcyhkZWZpbml0aW9uc01hcCkuZmxhdCgpLFxuICAgICAgICAgICAgLi4ubWlzc2luZ1R5cGVEZWZpbml0aW9ucyxcbiAgICAgICAgICAgIC4uLmRpcmVjdGl2ZURlZmluaXRpb25zXG4gICAgICAgIF1cbiAgICB9LCB7XG4gICAgICAgIGFzc3VtZVZhbGlkU0RMOiB0cnVlXG4gICAgfSk7XG4gICAgc2NoZW1hID0gKDAsIGdyYXBocWxfMS5leHRlbmRTY2hlbWEpKHNjaGVtYSwge1xuICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5ET0NVTUVOVCxcbiAgICAgICAgZGVmaW5pdGlvbnM6IE9iamVjdC52YWx1ZXMoZXh0ZW5zaW9uc01hcCkuZmxhdCgpLFxuICAgIH0sIHtcbiAgICAgICAgYXNzdW1lVmFsaWRTREw6IHRydWVcbiAgICB9KTtcbiAgICBsZXQgb3BlcmF0aW9uVHlwZU1hcDtcbiAgICBjb25zdCBvcGVyYXRpb25UeXBlcyA9IFsuLi5zY2hlbWFEZWZpbml0aW9ucywgLi4uc2NoZW1hRXh0ZW5zaW9uc11cbiAgICAgICAgLm1hcChub2RlID0+IG5vZGUub3BlcmF0aW9uVHlwZXMpXG4gICAgICAgIC5maWx0ZXIoaXNOb3ROdWxsT3JVbmRlZmluZWQpXG4gICAgICAgIC5mbGF0KCk7XG4gICAgaWYgKG9wZXJhdGlvblR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3BlcmF0aW9uVHlwZU1hcCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHsgb3BlcmF0aW9uLCB0eXBlIH0gb2Ygb3BlcmF0aW9uVHlwZXMpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvblR5cGVNYXBbb3BlcmF0aW9uXSA9IHR5cGUubmFtZS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3BlcmF0aW9uVHlwZU1hcCA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBcIlF1ZXJ5XCIsXG4gICAgICAgICAgICBtdXRhdGlvbjogXCJNdXRhdGlvblwiLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiBcIlN1YnNjcmlwdGlvblwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNjaGVtYSA9IG5ldyBncmFwaHFsXzEuR3JhcGhRTFNjaGVtYSh7XG4gICAgICAgIC4uLnNjaGVtYS50b0NvbmZpZygpLFxuICAgICAgICAuLi5tYXBWYWx1ZXMob3BlcmF0aW9uVHlwZU1hcCwgdHlwZU5hbWUgPT4gdHlwZU5hbWVcbiAgICAgICAgICAgID8gc2NoZW1hLmdldFR5cGUodHlwZU5hbWUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiA9PT0gbnVsbCB8fCBkZXNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgIGFzdE5vZGU6IHtcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLlNDSEVNQV9ERUZJTklUSU9OLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBzY2hlbWFEaXJlY3RpdmVzLFxuICAgICAgICAgICAgb3BlcmF0aW9uVHlwZXM6IFtdXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IG1vZHVsZSBvZiBtb2R1bGVzKSB7XG4gICAgICAgIGlmICghbW9kdWxlLnJlc29sdmVycylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBhZGRSZXNvbHZlcnNUb1NjaGVtYShzY2hlbWEsIG1vZHVsZS5yZXNvbHZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufVxuZXhwb3J0cy5idWlsZFNjaGVtYUZyb21TREwgPSBidWlsZFNjaGVtYUZyb21TREw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZFNjaGVtYUZyb21TREwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdyYXBoUUxTY2hlbWFWYWxpZGF0aW9uRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBHcmFwaFFMU2NoZW1hVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9ycykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzLm1hcChlcnJvciA9PiBlcnJvci5tZXNzYWdlKS5qb2luKFwiXFxuXFxuXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuR3JhcGhRTFNjaGVtYVZhbGlkYXRpb25FcnJvciA9IEdyYXBoUUxTY2hlbWFWYWxpZGF0aW9uRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Jlc29sdmVyTWFwXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9idWlsZFNjaGVtYUZyb21TRExcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2Zvcm1TY2hlbWFcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlck1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHJhbnNmb3JtU2NoZW1hID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5mdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqZWN0KSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNhbGxiYWNrKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybVNjaGVtYShzY2hlbWEsIHRyYW5zZm9ybVR5cGUpIHtcbiAgICBjb25zdCB0eXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IG9sZFR5cGUgb2YgT2JqZWN0LnZhbHVlcyhzY2hlbWEuZ2V0VHlwZU1hcCgpKSkge1xuICAgICAgICBpZiAoKDAsIGdyYXBocWxfMS5pc0ludHJvc3BlY3Rpb25UeXBlKShvbGRUeXBlKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0cmFuc2Zvcm1UeXBlKG9sZFR5cGUpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IG5ld1R5cGUgPSByZXN1bHQgfHwgb2xkVHlwZTtcbiAgICAgICAgdHlwZU1hcFtuZXdUeXBlLm5hbWVdID0gcmVjcmVhdGVOYW1lZFR5cGUobmV3VHlwZSk7XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtYUNvbmZpZyA9IHNjaGVtYS50b0NvbmZpZygpO1xuICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxTY2hlbWEoe1xuICAgICAgICAuLi5zY2hlbWFDb25maWcsXG4gICAgICAgIHR5cGVzOiBPYmplY3QudmFsdWVzKHR5cGVNYXApLFxuICAgICAgICBxdWVyeTogcmVwbGFjZU1heWJlVHlwZShzY2hlbWFDb25maWcucXVlcnkpLFxuICAgICAgICBtdXRhdGlvbjogcmVwbGFjZU1heWJlVHlwZShzY2hlbWFDb25maWcubXV0YXRpb24pLFxuICAgICAgICBzdWJzY3JpcHRpb246IHJlcGxhY2VNYXliZVR5cGUoc2NoZW1hQ29uZmlnLnN1YnNjcmlwdGlvbiksXG4gICAgICAgIGRpcmVjdGl2ZXM6IHJlcGxhY2VEaXJlY3RpdmVzKHNjaGVtYUNvbmZpZy5kaXJlY3RpdmVzKVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHJlY3JlYXRlTmFtZWRUeXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKCgwLCBncmFwaHFsXzEuaXNPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBncmFwaHFsXzEuR3JhcGhRTE9iamVjdFR5cGUoe1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2VzOiAoKSA9PiBjb25maWcuaW50ZXJmYWNlcy5tYXAocmVwbGFjZU5hbWVkVHlwZSksXG4gICAgICAgICAgICAgICAgZmllbGRzOiAoKSA9PiByZXBsYWNlRmllbGRzKGNvbmZpZy5maWVsZHMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgZ3JhcGhxbF8xLmlzSW50ZXJmYWNlVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxJbnRlcmZhY2VUeXBlKHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gY29uZmlnLmludGVyZmFjZXMubWFwKHJlcGxhY2VOYW1lZFR5cGUpLFxuICAgICAgICAgICAgICAgIGZpZWxkczogKCkgPT4gcmVwbGFjZUZpZWxkcyhjb25maWcuZmllbGRzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIGdyYXBocWxfMS5pc1VuaW9uVHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxVbmlvblR5cGUoe1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICB0eXBlczogKCkgPT4gY29uZmlnLnR5cGVzLm1hcChyZXBsYWNlTmFtZWRUeXBlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIGdyYXBocWxfMS5pc0lucHV0T2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6ICgpID0+IHJlcGxhY2VJbnB1dEZpZWxkcyhjb25maWcuZmllbGRzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcGxhY2VUeXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKCgwLCBncmFwaHFsXzEuaXNMaXN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxMaXN0KHJlcGxhY2VUeXBlKHR5cGUub2ZUeXBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIGdyYXBocWxfMS5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBncmFwaHFsXzEuR3JhcGhRTE5vbk51bGwocmVwbGFjZVR5cGUodHlwZS5vZlR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVwbGFjZU5hbWVkVHlwZSh0eXBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVwbGFjZU5hbWVkVHlwZSh0eXBlKSB7XG4gICAgICAgIGNvbnN0IG5ld1R5cGUgPSB0eXBlTWFwW3R5cGUubmFtZV07XG4gICAgICAgIHJldHVybiBuZXdUeXBlID8gbmV3VHlwZSA6IHR5cGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcGxhY2VNYXliZVR5cGUodHlwZSkge1xuICAgICAgICByZXR1cm4gdHlwZSA/IHJlcGxhY2VOYW1lZFR5cGUodHlwZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcGxhY2VGaWVsZHMoZmllbGRzTWFwKSB7XG4gICAgICAgIHJldHVybiBtYXBWYWx1ZXMoZmllbGRzTWFwLCBmaWVsZCA9PiAoe1xuICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICB0eXBlOiByZXBsYWNlVHlwZShmaWVsZC50eXBlKSxcbiAgICAgICAgICAgIGFyZ3M6IGZpZWxkLmFyZ3MgPyByZXBsYWNlQXJncyhmaWVsZC5hcmdzKSA6IHVuZGVmaW5lZFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcGxhY2VJbnB1dEZpZWxkcyhmaWVsZHNNYXApIHtcbiAgICAgICAgcmV0dXJuIG1hcFZhbHVlcyhmaWVsZHNNYXAsIGZpZWxkID0+ICh7XG4gICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGZpZWxkLnR5cGUpXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVwbGFjZUFyZ3MoYXJncykge1xuICAgICAgICByZXR1cm4gbWFwVmFsdWVzKGFyZ3MsIChhcmcpID0+ICh7XG4gICAgICAgICAgICAuLi5hcmcsXG4gICAgICAgICAgICB0eXBlOiByZXBsYWNlVHlwZShhcmcudHlwZSksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVwbGFjZURpcmVjdGl2ZXMoZGlyZWN0aXZlcykge1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlcy5tYXAoKGRpcmVjdGl2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gZGlyZWN0aXZlLnRvQ29uZmlnKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGdyYXBocWxfMS5HcmFwaFFMRGlyZWN0aXZlKHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgYXJnczogcmVwbGFjZUFyZ3MoY29uZmlnLmFyZ3MpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMudHJhbnNmb3JtU2NoZW1hID0gdHJhbnNmb3JtU2NoZW1hO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtU2NoZW1hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ZlZGVyYXRpb25UeXBlID0gZXhwb3J0cy5mZWRlcmF0aW9uVHlwZXMgPSBleHBvcnRzLnNlcnZpY2VGaWVsZCA9IGV4cG9ydHMuZW50aXRpZXNGaWVsZCA9IGV4cG9ydHMuZW50aXRpZXNSZXNvbHZlciA9IGV4cG9ydHMuTGlua0ltcG9ydFR5cGUgPSBleHBvcnRzLkFueVR5cGUgPSBleHBvcnRzLlNlcnZpY2VUeXBlID0gZXhwb3J0cy5FbnRpdHlUeXBlID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBjYWNoZV9jb250cm9sX3R5cGVzXzEgPSByZXF1aXJlKFwiQGFwb2xsby9jYWNoZS1jb250cm9sLXR5cGVzXCIpO1xuZXhwb3J0cy5FbnRpdHlUeXBlID0gbmV3IGdyYXBocWxfMS5HcmFwaFFMVW5pb25UeXBlKHtcbiAgICBuYW1lOiAnX0VudGl0eScsXG4gICAgdHlwZXM6IFtdLFxufSk7XG5leHBvcnRzLlNlcnZpY2VUeXBlID0gbmV3IGdyYXBocWxfMS5HcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgbmFtZTogJ19TZXJ2aWNlJyxcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgc2RsOiB7XG4gICAgICAgICAgICB0eXBlOiBncmFwaHFsXzEuR3JhcGhRTFN0cmluZyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHNkbCByZXByZXNlbnRpbmcgdGhlIGZlZGVyYXRlZCBzZXJ2aWNlIGNhcGFiaWxpdGllcy4gSW5jbHVkZXMgZmVkZXJhdGlvbiBkaXJlY3RpdmVzLCByZW1vdmVzIGZlZGVyYXRpb24gdHlwZXMsIGFuZCBpbmNsdWRlcyByZXN0IG9mIGZ1bGwgc2NoZW1hIGFmdGVyIHNjaGVtYSBkaXJlY3RpdmVzIGhhdmUgYmVlbiBhcHBsaWVkJyxcbiAgICAgICAgfSxcbiAgICB9LFxufSk7XG5leHBvcnRzLkFueVR5cGUgPSBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICBuYW1lOiAnX0FueScsXG4gICAgc2VyaWFsaXplKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxufSk7XG5leHBvcnRzLkxpbmtJbXBvcnRUeXBlID0gbmV3IGdyYXBocWxfMS5HcmFwaFFMU2NhbGFyVHlwZSh7XG4gICAgbmFtZTogJ2xpbmtfX0ltcG9ydCcsXG4gICAgc3BlY2lmaWVkQnlVUkw6IG51bGxcbn0pO1xuZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkVHlwZU5hbWVUb1Bvc3NpYmxlUmV0dXJuKG1heWJlT2JqZWN0LCB0eXBlbmFtZSkge1xuICAgIGlmIChtYXliZU9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2YgbWF5YmVPYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtYXliZU9iamVjdCwgJ19fdHlwZW5hbWUnLCB7XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW5hbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF5YmVPYmplY3Q7XG59XG5mdW5jdGlvbiBlbnRpdGllc1Jlc29sdmVyKHsgcmVwcmVzZW50YXRpb25zLCBjb250ZXh0LCBpbmZvIH0pIHtcbiAgICByZXR1cm4gcmVwcmVzZW50YXRpb25zLm1hcCgocmVmZXJlbmNlKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCB7IF9fdHlwZW5hbWUgfSA9IHJlZmVyZW5jZTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGluZm8uc2NoZW1hLmdldFR5cGUoX190eXBlbmFtZSk7XG4gICAgICAgIGlmICghdHlwZSB8fCAhKDAsIGdyYXBocWxfMS5pc09iamVjdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBfZW50aXRpZXMgcmVzb2x2ZXIgdHJpZWQgdG8gbG9hZCBhbiBlbnRpdHkgZm9yIHR5cGUgXCIke19fdHlwZW5hbWV9XCIsIGJ1dCBubyBvYmplY3QgdHlwZSBvZiB0aGF0IG5hbWUgd2FzIGZvdW5kIGluIHRoZSBzY2hlbWFgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWNoZUNvbnRyb2wgPSAoMCwgY2FjaGVfY29udHJvbF90eXBlc18xLm1heWJlQ2FjaGVDb250cm9sRnJvbUluZm8pKGluZm8pO1xuICAgICAgICBpZiAoY2FjaGVDb250cm9sKSB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZUhpbnQgPSBjYWNoZUNvbnRyb2wuY2FjaGVIaW50RnJvbVR5cGUodHlwZSk7XG4gICAgICAgICAgICBpZiAoY2FjaGVIaW50KSB7XG4gICAgICAgICAgICAgICAgY2FjaGVDb250cm9sLmNhY2hlSGludC5yZXN0cmljdChjYWNoZUhpbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSB0eXBlLmV4dGVuc2lvbnM7XG4gICAgICAgIGNvbnN0IHJlc29sdmVSZWZlcmVuY2UgPSAoX2MgPSAoX2IgPSAoX2EgPSBleHRlbnNpb25zLmFwb2xsbykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YmdyYXBoKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVzb2x2ZVJlZmVyZW5jZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKCgpID0+IHJlZmVyZW5jZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc29sdmVSZWZlcmVuY2UocmVmZXJlbmNlLCBjb250ZXh0LCBpbmZvKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKHgpID0+IGFkZFR5cGVOYW1lVG9Qb3NzaWJsZVJldHVybih4LCBfX3R5cGVuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZFR5cGVOYW1lVG9Qb3NzaWJsZVJldHVybihyZXN1bHQsIF9fdHlwZW5hbWUpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5lbnRpdGllc1Jlc29sdmVyID0gZW50aXRpZXNSZXNvbHZlcjtcbmV4cG9ydHMuZW50aXRpZXNGaWVsZCA9IHtcbiAgICB0eXBlOiBuZXcgZ3JhcGhxbF8xLkdyYXBoUUxOb25OdWxsKG5ldyBncmFwaHFsXzEuR3JhcGhRTExpc3QoZXhwb3J0cy5FbnRpdHlUeXBlKSksXG4gICAgYXJnczoge1xuICAgICAgICByZXByZXNlbnRhdGlvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IG5ldyBncmFwaHFsXzEuR3JhcGhRTE5vbk51bGwobmV3IGdyYXBocWxfMS5HcmFwaFFMTGlzdChuZXcgZ3JhcGhxbF8xLkdyYXBoUUxOb25OdWxsKGV4cG9ydHMuQW55VHlwZSkpKSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHJlc29sdmUoX3NvdXJjZSwgeyByZXByZXNlbnRhdGlvbnMgfSwgY29udGV4dCwgaW5mbykge1xuICAgICAgICByZXR1cm4gZW50aXRpZXNSZXNvbHZlcih7IHJlcHJlc2VudGF0aW9ucywgY29udGV4dCwgaW5mbyB9KTtcbiAgICB9LFxufTtcbmV4cG9ydHMuc2VydmljZUZpZWxkID0ge1xuICAgIHR5cGU6IG5ldyBncmFwaHFsXzEuR3JhcGhRTE5vbk51bGwoZXhwb3J0cy5TZXJ2aWNlVHlwZSksXG59O1xuZXhwb3J0cy5mZWRlcmF0aW9uVHlwZXMgPSBbXG4gICAgZXhwb3J0cy5TZXJ2aWNlVHlwZSxcbiAgICBleHBvcnRzLkFueVR5cGUsXG4gICAgZXhwb3J0cy5FbnRpdHlUeXBlLFxuICAgIGV4cG9ydHMuTGlua0ltcG9ydFR5cGUsXG5dO1xuZnVuY3Rpb24gaXNGZWRlcmF0aW9uVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuICgoMCwgZ3JhcGhxbF8xLmlzTmFtZWRUeXBlKSh0eXBlKSAmJiBleHBvcnRzLmZlZGVyYXRpb25UeXBlcy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gdHlwZS5uYW1lKSk7XG59XG5leHBvcnRzLmlzRmVkZXJhdGlvblR5cGUgPSBpc0ZlZGVyYXRpb25UeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB3cmFwQW5zaTE2ID0gKGZuLCBvZmZzZXQpID0+ICguLi5hcmdzKSA9PiB7XG5cdGNvbnN0IGNvZGUgPSBmbiguLi5hcmdzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7Y29kZSArIG9mZnNldH1tYDtcbn07XG5cbmNvbnN0IHdyYXBBbnNpMjU2ID0gKGZuLCBvZmZzZXQpID0+ICguLi5hcmdzKSA9PiB7XG5cdGNvbnN0IGNvZGUgPSBmbiguLi5hcmdzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7MzggKyBvZmZzZXR9OzU7JHtjb2RlfW1gO1xufTtcblxuY29uc3Qgd3JhcEFuc2kxNm0gPSAoZm4sIG9mZnNldCkgPT4gKC4uLmFyZ3MpID0+IHtcblx0Y29uc3QgcmdiID0gZm4oLi4uYXJncyk7XG5cdHJldHVybiBgXFx1MDAxQlskezM4ICsgb2Zmc2V0fTsyOyR7cmdiWzBdfTske3JnYlsxXX07JHtyZ2JbMl19bWA7XG59O1xuXG5jb25zdCBhbnNpMmFuc2kgPSBuID0+IG47XG5jb25zdCByZ2IycmdiID0gKHIsIGcsIGIpID0+IFtyLCBnLCBiXTtcblxuY29uc3Qgc2V0TGF6eVByb3BlcnR5ID0gKG9iamVjdCwgcHJvcGVydHksIGdldCkgPT4ge1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwge1xuXHRcdGdldDogKCkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBnZXQoKTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHtcblx0XHRcdFx0dmFsdWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9LFxuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdH0pO1xufTtcblxuLyoqIEB0eXBlIHt0eXBlb2YgaW1wb3J0KCdjb2xvci1jb252ZXJ0Jyl9ICovXG5sZXQgY29sb3JDb252ZXJ0O1xuY29uc3QgbWFrZUR5bmFtaWNTdHlsZXMgPSAod3JhcCwgdGFyZ2V0U3BhY2UsIGlkZW50aXR5LCBpc0JhY2tncm91bmQpID0+IHtcblx0aWYgKGNvbG9yQ29udmVydCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Y29sb3JDb252ZXJ0ID0gcmVxdWlyZSgnY29sb3ItY29udmVydCcpO1xuXHR9XG5cblx0Y29uc3Qgb2Zmc2V0ID0gaXNCYWNrZ3JvdW5kID8gMTAgOiAwO1xuXHRjb25zdCBzdHlsZXMgPSB7fTtcblxuXHRmb3IgKGNvbnN0IFtzb3VyY2VTcGFjZSwgc3VpdGVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbG9yQ29udmVydCkpIHtcblx0XHRjb25zdCBuYW1lID0gc291cmNlU3BhY2UgPT09ICdhbnNpMTYnID8gJ2Fuc2knIDogc291cmNlU3BhY2U7XG5cdFx0aWYgKHNvdXJjZVNwYWNlID09PSB0YXJnZXRTcGFjZSkge1xuXHRcdFx0c3R5bGVzW25hbWVdID0gd3JhcChpZGVudGl0eSwgb2Zmc2V0KTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBzdWl0ZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdHN0eWxlc1tuYW1lXSA9IHdyYXAoc3VpdGVbdGFyZ2V0U3BhY2VdLCBvZmZzZXQpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59O1xuXG5mdW5jdGlvbiBhc3NlbWJsZVN0eWxlcygpIHtcblx0Y29uc3QgY29kZXMgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IHN0eWxlcyA9IHtcblx0XHRtb2RpZmllcjoge1xuXHRcdFx0cmVzZXQ6IFswLCAwXSxcblx0XHRcdC8vIDIxIGlzbid0IHdpZGVseSBzdXBwb3J0ZWQgYW5kIDIyIGRvZXMgdGhlIHNhbWUgdGhpbmdcblx0XHRcdGJvbGQ6IFsxLCAyMl0sXG5cdFx0XHRkaW06IFsyLCAyMl0sXG5cdFx0XHRpdGFsaWM6IFszLCAyM10sXG5cdFx0XHR1bmRlcmxpbmU6IFs0LCAyNF0sXG5cdFx0XHRpbnZlcnNlOiBbNywgMjddLFxuXHRcdFx0aGlkZGVuOiBbOCwgMjhdLFxuXHRcdFx0c3RyaWtldGhyb3VnaDogWzksIDI5XVxuXHRcdH0sXG5cdFx0Y29sb3I6IHtcblx0XHRcdGJsYWNrOiBbMzAsIDM5XSxcblx0XHRcdHJlZDogWzMxLCAzOV0sXG5cdFx0XHRncmVlbjogWzMyLCAzOV0sXG5cdFx0XHR5ZWxsb3c6IFszMywgMzldLFxuXHRcdFx0Ymx1ZTogWzM0LCAzOV0sXG5cdFx0XHRtYWdlbnRhOiBbMzUsIDM5XSxcblx0XHRcdGN5YW46IFszNiwgMzldLFxuXHRcdFx0d2hpdGU6IFszNywgMzldLFxuXG5cdFx0XHQvLyBCcmlnaHQgY29sb3Jcblx0XHRcdGJsYWNrQnJpZ2h0OiBbOTAsIDM5XSxcblx0XHRcdHJlZEJyaWdodDogWzkxLCAzOV0sXG5cdFx0XHRncmVlbkJyaWdodDogWzkyLCAzOV0sXG5cdFx0XHR5ZWxsb3dCcmlnaHQ6IFs5MywgMzldLFxuXHRcdFx0Ymx1ZUJyaWdodDogWzk0LCAzOV0sXG5cdFx0XHRtYWdlbnRhQnJpZ2h0OiBbOTUsIDM5XSxcblx0XHRcdGN5YW5CcmlnaHQ6IFs5NiwgMzldLFxuXHRcdFx0d2hpdGVCcmlnaHQ6IFs5NywgMzldXG5cdFx0fSxcblx0XHRiZ0NvbG9yOiB7XG5cdFx0XHRiZ0JsYWNrOiBbNDAsIDQ5XSxcblx0XHRcdGJnUmVkOiBbNDEsIDQ5XSxcblx0XHRcdGJnR3JlZW46IFs0MiwgNDldLFxuXHRcdFx0YmdZZWxsb3c6IFs0MywgNDldLFxuXHRcdFx0YmdCbHVlOiBbNDQsIDQ5XSxcblx0XHRcdGJnTWFnZW50YTogWzQ1LCA0OV0sXG5cdFx0XHRiZ0N5YW46IFs0NiwgNDldLFxuXHRcdFx0YmdXaGl0ZTogWzQ3LCA0OV0sXG5cblx0XHRcdC8vIEJyaWdodCBjb2xvclxuXHRcdFx0YmdCbGFja0JyaWdodDogWzEwMCwgNDldLFxuXHRcdFx0YmdSZWRCcmlnaHQ6IFsxMDEsIDQ5XSxcblx0XHRcdGJnR3JlZW5CcmlnaHQ6IFsxMDIsIDQ5XSxcblx0XHRcdGJnWWVsbG93QnJpZ2h0OiBbMTAzLCA0OV0sXG5cdFx0XHRiZ0JsdWVCcmlnaHQ6IFsxMDQsIDQ5XSxcblx0XHRcdGJnTWFnZW50YUJyaWdodDogWzEwNSwgNDldLFxuXHRcdFx0YmdDeWFuQnJpZ2h0OiBbMTA2LCA0OV0sXG5cdFx0XHRiZ1doaXRlQnJpZ2h0OiBbMTA3LCA0OV1cblx0XHR9XG5cdH07XG5cblx0Ly8gQWxpYXMgYnJpZ2h0IGJsYWNrIGFzIGdyYXkgKGFuZCBncmV5KVxuXHRzdHlsZXMuY29sb3IuZ3JheSA9IHN0eWxlcy5jb2xvci5ibGFja0JyaWdodDtcblx0c3R5bGVzLmJnQ29sb3IuYmdHcmF5ID0gc3R5bGVzLmJnQ29sb3IuYmdCbGFja0JyaWdodDtcblx0c3R5bGVzLmNvbG9yLmdyZXkgPSBzdHlsZXMuY29sb3IuYmxhY2tCcmlnaHQ7XG5cdHN0eWxlcy5iZ0NvbG9yLmJnR3JleSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7XG5cblx0Zm9yIChjb25zdCBbZ3JvdXBOYW1lLCBncm91cF0gb2YgT2JqZWN0LmVudHJpZXMoc3R5bGVzKSkge1xuXHRcdGZvciAoY29uc3QgW3N0eWxlTmFtZSwgc3R5bGVdIG9mIE9iamVjdC5lbnRyaWVzKGdyb3VwKSkge1xuXHRcdFx0c3R5bGVzW3N0eWxlTmFtZV0gPSB7XG5cdFx0XHRcdG9wZW46IGBcXHUwMDFCWyR7c3R5bGVbMF19bWAsXG5cdFx0XHRcdGNsb3NlOiBgXFx1MDAxQlske3N0eWxlWzFdfW1gXG5cdFx0XHR9O1xuXG5cdFx0XHRncm91cFtzdHlsZU5hbWVdID0gc3R5bGVzW3N0eWxlTmFtZV07XG5cblx0XHRcdGNvZGVzLnNldChzdHlsZVswXSwgc3R5bGVbMV0pO1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsIGdyb3VwTmFtZSwge1xuXHRcdFx0dmFsdWU6IGdyb3VwLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0XHR9KTtcblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsICdjb2RlcycsIHtcblx0XHR2YWx1ZTogY29kZXMsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0fSk7XG5cblx0c3R5bGVzLmNvbG9yLmNsb3NlID0gJ1xcdTAwMUJbMzltJztcblx0c3R5bGVzLmJnQ29sb3IuY2xvc2UgPSAnXFx1MDAxQls0OW0nO1xuXG5cdHNldExhenlQcm9wZXJ0eShzdHlsZXMuY29sb3IsICdhbnNpJywgKCkgPT4gbWFrZUR5bmFtaWNTdHlsZXMod3JhcEFuc2kxNiwgJ2Fuc2kxNicsIGFuc2kyYW5zaSwgZmFsc2UpKTtcblx0c2V0TGF6eVByb3BlcnR5KHN0eWxlcy5jb2xvciwgJ2Fuc2kyNTYnLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTI1NiwgJ2Fuc2kyNTYnLCBhbnNpMmFuc2ksIGZhbHNlKSk7XG5cdHNldExhenlQcm9wZXJ0eShzdHlsZXMuY29sb3IsICdhbnNpMTZtJywgKCkgPT4gbWFrZUR5bmFtaWNTdHlsZXMod3JhcEFuc2kxNm0sICdyZ2InLCByZ2IycmdiLCBmYWxzZSkpO1xuXHRzZXRMYXp5UHJvcGVydHkoc3R5bGVzLmJnQ29sb3IsICdhbnNpJywgKCkgPT4gbWFrZUR5bmFtaWNTdHlsZXMod3JhcEFuc2kxNiwgJ2Fuc2kxNicsIGFuc2kyYW5zaSwgdHJ1ZSkpO1xuXHRzZXRMYXp5UHJvcGVydHkoc3R5bGVzLmJnQ29sb3IsICdhbnNpMjU2JywgKCkgPT4gbWFrZUR5bmFtaWNTdHlsZXMod3JhcEFuc2kyNTYsICdhbnNpMjU2JywgYW5zaTJhbnNpLCB0cnVlKSk7XG5cdHNldExhenlQcm9wZXJ0eShzdHlsZXMuYmdDb2xvciwgJ2Fuc2kxNm0nLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTE2bSwgJ3JnYicsIHJnYjJyZ2IsIHRydWUpKTtcblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG4vLyBNYWtlIHRoZSBleHBvcnQgaW1tdXRhYmxlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0Z2V0OiBhc3NlbWJsZVN0eWxlc1xufSk7XG4iLCIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2Fzc2VydC5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8yYTUxYWU0MjRhNTEzZWM5YTZhYTM0NjZiYWEwY2MxZDU1ZGQ0ZjNiXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvZXJyb3JzJyksXG4gICAgX3JlcXVpcmUkY29kZXMgPSBfcmVxdWlyZS5jb2RlcyxcbiAgICBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UID0gX3JlcXVpcmUkY29kZXMuRVJSX0FNQklHVU9VU19BUkdVTUVOVCxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICAgIEVSUl9JTlZBTElEX0FSR19WQUxVRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19WQUxVRSxcbiAgICBFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUsXG4gICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1M7XG5cbnZhciBBc3NlcnRpb25FcnJvciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvYXNzZXJ0L2Fzc2VydGlvbl9lcnJvcicpO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndXRpbC8nKSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBfcmVxdWlyZSR0eXBlcyA9IHJlcXVpcmUoJ3V0aWwvJykudHlwZXMsXG4gICAgaXNQcm9taXNlID0gX3JlcXVpcmUkdHlwZXMuaXNQcm9taXNlLFxuICAgIGlzUmVnRXhwID0gX3JlcXVpcmUkdHlwZXMuaXNSZWdFeHA7XG5cbnZhciBvYmplY3RBc3NpZ24gPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbiA6IHJlcXVpcmUoJ2VzNi1vYmplY3QtYXNzaWduJykuYXNzaWduO1xudmFyIG9iamVjdElzID0gT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG52YXIgZXJyb3JDYWNoZSA9IG5ldyBNYXAoKTtcbnZhciBpc0RlZXBFcXVhbDtcbnZhciBpc0RlZXBTdHJpY3RFcXVhbDtcbnZhciBwYXJzZUV4cHJlc3Npb25BdDtcbnZhciBmaW5kTm9kZUFyb3VuZDtcbnZhciBkZWNvZGVyO1xuXG5mdW5jdGlvbiBsYXp5TG9hZENvbXBhcmlzb24oKSB7XG4gIHZhciBjb21wYXJpc29uID0gcmVxdWlyZSgnLi9pbnRlcm5hbC91dGlsL2NvbXBhcmlzb25zJyk7XG5cbiAgaXNEZWVwRXF1YWwgPSBjb21wYXJpc29uLmlzRGVlcEVxdWFsO1xuICBpc0RlZXBTdHJpY3RFcXVhbCA9IGNvbXBhcmlzb24uaXNEZWVwU3RyaWN0RXF1YWw7XG59IC8vIEVzY2FwZSBjb250cm9sIGNoYXJhY3RlcnMgYnV0IG5vdCBcXG4gYW5kIFxcdCB0byBrZWVwIHRoZSBsaW5lIGJyZWFrcyBhbmRcbi8vIGluZGVudGF0aW9uIGludGFjdC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cblxudmFyIGVzY2FwZVNlcXVlbmNlc1JlZ0V4cCA9IC9bXFx4MDAtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZdL2c7XG52YXIgbWV0YSA9IFtcIlxcXFx1MDAwMFwiLCBcIlxcXFx1MDAwMVwiLCBcIlxcXFx1MDAwMlwiLCBcIlxcXFx1MDAwM1wiLCBcIlxcXFx1MDAwNFwiLCBcIlxcXFx1MDAwNVwiLCBcIlxcXFx1MDAwNlwiLCBcIlxcXFx1MDAwN1wiLCAnXFxcXGInLCAnJywgJycsIFwiXFxcXHUwMDBiXCIsICdcXFxcZicsICcnLCBcIlxcXFx1MDAwZVwiLCBcIlxcXFx1MDAwZlwiLCBcIlxcXFx1MDAxMFwiLCBcIlxcXFx1MDAxMVwiLCBcIlxcXFx1MDAxMlwiLCBcIlxcXFx1MDAxM1wiLCBcIlxcXFx1MDAxNFwiLCBcIlxcXFx1MDAxNVwiLCBcIlxcXFx1MDAxNlwiLCBcIlxcXFx1MDAxN1wiLCBcIlxcXFx1MDAxOFwiLCBcIlxcXFx1MDAxOVwiLCBcIlxcXFx1MDAxYVwiLCBcIlxcXFx1MDAxYlwiLCBcIlxcXFx1MDAxY1wiLCBcIlxcXFx1MDAxZFwiLCBcIlxcXFx1MDAxZVwiLCBcIlxcXFx1MDAxZlwiXTtcblxudmFyIGVzY2FwZUZuID0gZnVuY3Rpb24gZXNjYXBlRm4oc3RyKSB7XG4gIHJldHVybiBtZXRhW3N0ci5jaGFyQ29kZUF0KDApXTtcbn07XG5cbnZhciB3YXJuZWQgPSBmYWxzZTsgLy8gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xudmFyIE5PX0VYQ0VQVElPTl9TRU5USU5FTCA9IHt9OyAvLyBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGlubmVyRmFpbChvYmopIHtcbiAgaWYgKG9iai5tZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHRocm93IG9iai5tZXNzYWdlO1xuICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3Iob2JqKTtcbn1cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZuKSB7XG4gIHZhciBhcmdzTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGludGVybmFsTWVzc2FnZTtcblxuICBpZiAoYXJnc0xlbiA9PT0gMCkge1xuICAgIGludGVybmFsTWVzc2FnZSA9ICdGYWlsZWQnO1xuICB9IGVsc2UgaWYgKGFyZ3NMZW4gPT09IDEpIHtcbiAgICBtZXNzYWdlID0gYWN0dWFsO1xuICAgIGFjdHVhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAod2FybmVkID09PSBmYWxzZSkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHZhciB3YXJuID0gcHJvY2Vzcy5lbWl0V2FybmluZyA/IHByb2Nlc3MuZW1pdFdhcm5pbmcgOiBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbiAgICAgIHdhcm4oJ2Fzc2VydC5mYWlsKCkgd2l0aCBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSBhc3NlcnQuc3RyaWN0RXF1YWwoKSBpbnN0ZWFkIG9yIG9ubHkgcGFzcyBhIG1lc3NhZ2UuJywgJ0RlcHJlY2F0aW9uV2FybmluZycsICdERVAwMDk0Jyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NMZW4gPT09IDIpIG9wZXJhdG9yID0gJyE9JztcbiAgfVxuXG4gIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHRocm93IG1lc3NhZ2U7XG4gIHZhciBlcnJBcmdzID0ge1xuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IgPT09IHVuZGVmaW5lZCA/ICdmYWlsJyA6IG9wZXJhdG9yLFxuICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuIHx8IGZhaWxcbiAgfTtcblxuICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXJyQXJncy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuXG4gIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyQXJncyk7XG5cbiAgaWYgKGludGVybmFsTWVzc2FnZSkge1xuICAgIGVyci5tZXNzYWdlID0gaW50ZXJuYWxNZXNzYWdlO1xuICAgIGVyci5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgfVxuXG4gIHRocm93IGVycjtcbn1cblxuYXNzZXJ0LmZhaWwgPSBmYWlsOyAvLyBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBpbnRlcm5hbC9lcnJvci5cblxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gQXNzZXJ0aW9uRXJyb3I7XG5cbmZ1bmN0aW9uIGlubmVyT2soZm4sIGFyZ0xlbiwgdmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHZhciBnZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG5cbiAgICBpZiAoYXJnTGVuID09PSAwKSB7XG4gICAgICBnZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgICAgIG1lc3NhZ2UgPSAnTm8gdmFsdWUgYXJndW1lbnQgcGFzc2VkIHRvIGBhc3NlcnQub2soKWAnO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBtZXNzYWdlO1xuICAgIH1cblxuICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgYWN0dWFsOiB2YWx1ZSxcbiAgICAgIGV4cGVjdGVkOiB0cnVlLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnPT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgIH0pO1xuICAgIGVyci5nZW5lcmF0ZWRNZXNzYWdlID0gZ2VuZXJhdGVkTWVzc2FnZTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn0gLy8gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxuLy8gYnkgISF2YWx1ZS5cblxuXG5mdW5jdGlvbiBvaygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlubmVyT2suYXBwbHkodm9pZCAwLCBbb2ssIGFyZ3MubGVuZ3RoXS5jb25jYXQoYXJncykpO1xufVxuXG5hc3NlcnQub2sgPSBvazsgLy8gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoID09LlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXMgKi9cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJz09JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdFxuLy8gZXF1YWwgd2l0aCAhPS5cblxuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cblxuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnIT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3RFcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cblxuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmICghaXNEZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdkZWVwRXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBkZWVwRXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG5cblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoaXNEZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3REZWVwRXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3REZWVwRXF1YWxcbiAgICB9KTtcbiAgfVxufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmICghaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBkZWVwU3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcblxuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmIChpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdERlZXBTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdERlZXBTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKCFvYmplY3RJcyhhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ3N0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAob2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3RTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBDb21wYXJpc29uID0gZnVuY3Rpb24gQ29tcGFyaXNvbihvYmosIGtleXMsIGFjdHVhbCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wYXJpc29uKTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoYWN0dWFsICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGFjdHVhbFtrZXldID09PSAnc3RyaW5nJyAmJiBpc1JlZ0V4cChvYmpba2V5XSkgJiYgb2JqW2tleV0udGVzdChhY3R1YWxba2V5XSkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGFjdHVhbFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjb21wYXJlRXhjZXB0aW9uS2V5KGFjdHVhbCwgZXhwZWN0ZWQsIGtleSwgbWVzc2FnZSwga2V5cywgZm4pIHtcbiAgaWYgKCEoa2V5IGluIGFjdHVhbCkgfHwgIWlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbFtrZXldLCBleHBlY3RlZFtrZXldKSkge1xuICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyIG9iamVjdHMgdG8gY3JlYXRlIGEgbmljZSBvdXRwdXQuXG4gICAgICB2YXIgYSA9IG5ldyBDb21wYXJpc29uKGFjdHVhbCwga2V5cyk7XG4gICAgICB2YXIgYiA9IG5ldyBDb21wYXJpc29uKGV4cGVjdGVkLCBrZXlzLCBhY3R1YWwpO1xuICAgICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICAgIGFjdHVhbDogYSxcbiAgICAgICAgZXhwZWN0ZWQ6IGIsXG4gICAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgICAgfSk7XG4gICAgICBlcnIuYWN0dWFsID0gYWN0dWFsO1xuICAgICAgZXJyLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgICBlcnIub3BlcmF0b3IgPSBmbi5uYW1lO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogZm4ubmFtZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtc2csIGZuKSB7XG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoaXNSZWdFeHAoZXhwZWN0ZWQpKSByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpOyAvLyBhc3NlcnQuZG9lc05vdFRocm93IGRvZXMgbm90IGFjY2VwdCBvYmplY3RzLlxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXhwZWN0ZWQnLCBbJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBleHBlY3RlZCk7XG4gICAgfSAvLyBIYW5kbGUgcHJpbWl0aXZlcyBwcm9wZXJseS5cblxuXG4gICAgaWYgKF90eXBlb2YoYWN0dWFsKSAhPT0gJ29iamVjdCcgfHwgYWN0dWFsID09PSBudWxsKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgICAgbWVzc2FnZTogbXNnLFxuICAgICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICAgIH0pO1xuICAgICAgZXJyLm9wZXJhdG9yID0gZm4ubmFtZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV4cGVjdGVkKTsgLy8gU3BlY2lhbCBoYW5kbGUgZXJyb3JzIHRvIG1ha2Ugc3VyZSB0aGUgbmFtZSBhbmQgdGhlIG1lc3NhZ2UgYXJlIGNvbXBhcmVkXG4gICAgLy8gYXMgd2VsbC5cblxuICAgIGlmIChleHBlY3RlZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBrZXlzLnB1c2goJ25hbWUnLCAnbWVzc2FnZScpO1xuICAgIH0gZWxzZSBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVkFMVUUoJ2Vycm9yJywgZXhwZWN0ZWQsICdtYXkgbm90IGJlIGFuIGVtcHR5IG9iamVjdCcpO1xuICAgIH1cblxuICAgIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBhY3R1YWxba2V5XSA9PT0gJ3N0cmluZycgJiYgaXNSZWdFeHAoZXhwZWN0ZWRba2V5XSkgJiYgZXhwZWN0ZWRba2V5XS50ZXN0KGFjdHVhbFtrZXldKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtc2csIGtleXMsIGZuKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBHdWFyZCBpbnN0YW5jZW9mIGFnYWluc3QgYXJyb3cgZnVuY3Rpb25zIGFzIHRoZXkgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZS5cblxuXG4gIGlmIChleHBlY3RlZC5wcm90b3R5cGUgIT09IHVuZGVmaW5lZCAmJiBhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEFjdHVhbChmbikge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdmbicsICdGdW5jdGlvbicsIGZuKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZm4oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG5cbiAgcmV0dXJuIE5PX0VYQ0VQVElPTl9TRU5USU5FTDtcbn1cblxuZnVuY3Rpb24gY2hlY2tJc1Byb21pc2Uob2JqKSB7XG4gIC8vIEFjY2VwdCBuYXRpdmUgRVM2IHByb21pc2VzIGFuZCBwcm9taXNlcyB0aGF0IGFyZSBpbXBsZW1lbnRlZCBpbiBhIHNpbWlsYXJcbiAgLy8gd2F5LiBEbyBub3QgYWNjZXB0IHRoZW5hYmxlcyB0aGF0IHVzZSBhIGZ1bmN0aW9uIGFzIGBvYmpgIGFuZCB0aGF0IGhhdmUgbm9cbiAgLy8gYGNhdGNoYCBoYW5kbGVyLlxuICAvLyBUT0RPOiB0aGVuYWJsZXMgYXJlIGNoZWNrZWQgdXAgdW50aWwgdGhleSBoYXZlIHRoZSBjb3JyZWN0IG1ldGhvZHMsXG4gIC8vIGJ1dCBhY2NvcmRpbmcgdG8gZG9jdW1lbnRhdGlvbiwgdGhlIGB0aGVuYCBtZXRob2Qgc2hvdWxkIHJlY2VpdmVcbiAgLy8gdGhlIGBmdWxmaWxsYCBhbmQgYHJlamVjdGAgYXJndW1lbnRzIGFzIHdlbGwgb3IgaXQgbWF5IGJlIG5ldmVyIHJlc29sdmVkLlxuICByZXR1cm4gaXNQcm9taXNlKG9iaikgfHwgb2JqICE9PSBudWxsICYmIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouY2F0Y2ggPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JBY3R1YWwocHJvbWlzZUZuKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0UHJvbWlzZTtcblxuICAgIGlmICh0eXBlb2YgcHJvbWlzZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBSZXR1cm4gYSByZWplY3RlZCBwcm9taXNlIGlmIGBwcm9taXNlRm5gIHRocm93cyBzeW5jaHJvbm91c2x5LlxuICAgICAgcmVzdWx0UHJvbWlzZSA9IHByb21pc2VGbigpOyAvLyBGYWlsIGluIGNhc2Ugbm8gcHJvbWlzZSBpcyByZXR1cm5lZC5cblxuICAgICAgaWYgKCFjaGVja0lzUHJvbWlzZShyZXN1bHRQcm9taXNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFKCdpbnN0YW5jZSBvZiBQcm9taXNlJywgJ3Byb21pc2VGbicsIHJlc3VsdFByb21pc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2hlY2tJc1Byb21pc2UocHJvbWlzZUZuKSkge1xuICAgICAgcmVzdWx0UHJvbWlzZSA9IHByb21pc2VGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdwcm9taXNlRm4nLCBbJ0Z1bmN0aW9uJywgJ1Byb21pc2UnXSwgcHJvbWlzZUZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzdWx0UHJvbWlzZTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBOT19FWENFUFRJT05fU0VOVElORUw7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZXhwZWN0c0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwpIHtcbiAgICAgIGlmIChhY3R1YWwubWVzc2FnZSA9PT0gZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQoJ2Vycm9yL21lc3NhZ2UnLCBcIlRoZSBlcnJvciBtZXNzYWdlIFxcXCJcIi5jb25jYXQoYWN0dWFsLm1lc3NhZ2UsIFwiXFxcIiBpcyBpZGVudGljYWwgdG8gdGhlIG1lc3NhZ2UuXCIpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdHVhbCA9PT0gZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UKCdlcnJvci9tZXNzYWdlJywgXCJUaGUgZXJyb3IgXFxcIlwiLmNvbmNhdChhY3R1YWwsIFwiXFxcIiBpcyBpZGVudGljYWwgdG8gdGhlIG1lc3NhZ2UuXCIpKTtcbiAgICB9XG5cbiAgICBtZXNzYWdlID0gZXJyb3I7XG4gICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoZXJyb3IgIT0gbnVsbCAmJiBfdHlwZW9mKGVycm9yKSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdlcnJvcicsIFsnT2JqZWN0JywgJ0Vycm9yJywgJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBlcnJvcik7XG4gIH1cblxuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHtcbiAgICB2YXIgZGV0YWlscyA9ICcnO1xuXG4gICAgaWYgKGVycm9yICYmIGVycm9yLm5hbWUpIHtcbiAgICAgIGRldGFpbHMgKz0gXCIgKFwiLmNvbmNhdChlcnJvci5uYW1lLCBcIilcIik7XG4gICAgfVxuXG4gICAgZGV0YWlscyArPSBtZXNzYWdlID8gXCI6IFwiLmNvbmNhdChtZXNzYWdlKSA6ICcuJztcbiAgICB2YXIgZm5UeXBlID0gc3RhY2tTdGFydEZuLm5hbWUgPT09ICdyZWplY3RzJyA/ICdyZWplY3Rpb24nIDogJ2V4Y2VwdGlvbic7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogdW5kZWZpbmVkLFxuICAgICAgZXhwZWN0ZWQ6IGVycm9yLFxuICAgICAgb3BlcmF0b3I6IHN0YWNrU3RhcnRGbi5uYW1lLFxuICAgICAgbWVzc2FnZTogXCJNaXNzaW5nIGV4cGVjdGVkIFwiLmNvbmNhdChmblR5cGUpLmNvbmNhdChkZXRhaWxzKSxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZXJyb3IgJiYgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UsIHN0YWNrU3RhcnRGbikpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwZWN0c05vRXJyb3Ioc3RhY2tTdGFydEZuLCBhY3R1YWwsIGVycm9yLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT09IE5PX0VYQ0VQVElPTl9TRU5USU5FTCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IGVycm9yO1xuICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFlcnJvciB8fCBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGVycm9yKSkge1xuICAgIHZhciBkZXRhaWxzID0gbWVzc2FnZSA/IFwiOiBcIi5jb25jYXQobWVzc2FnZSkgOiAnLic7XG4gICAgdmFyIGZuVHlwZSA9IHN0YWNrU3RhcnRGbi5uYW1lID09PSAnZG9lc05vdFJlamVjdCcgPyAncmVqZWN0aW9uJyA6ICdleGNlcHRpb24nO1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBlcnJvcixcbiAgICAgIG9wZXJhdG9yOiBzdGFja1N0YXJ0Rm4ubmFtZSxcbiAgICAgIG1lc3NhZ2U6IFwiR290IHVud2FudGVkIFwiLmNvbmNhdChmblR5cGUpLmNvbmNhdChkZXRhaWxzLCBcIlxcblwiKSArIFwiQWN0dWFsIG1lc3NhZ2U6IFxcXCJcIi5jb25jYXQoYWN0dWFsICYmIGFjdHVhbC5tZXNzYWdlLCBcIlxcXCJcIiksXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGblxuICAgIH0pO1xuICB9XG5cbiAgdGhyb3cgYWN0dWFsO1xufVxuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24gdGhyb3dzKHByb21pc2VGbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbdGhyb3dzLCBnZXRBY3R1YWwocHJvbWlzZUZuKV0uY29uY2F0KGFyZ3MpKTtcbn07XG5cbmFzc2VydC5yZWplY3RzID0gZnVuY3Rpb24gcmVqZWN0cyhwcm9taXNlRm4pIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIHdhaXRGb3JBY3R1YWwocHJvbWlzZUZuKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gZXhwZWN0c0Vycm9yLmFwcGx5KHZvaWQgMCwgW3JlamVjdHMsIHJlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG59O1xuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24gZG9lc05vdFRocm93KGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIGV4cGVjdHNOb0Vycm9yLmFwcGx5KHZvaWQgMCwgW2RvZXNOb3RUaHJvdywgZ2V0QWN0dWFsKGZuKV0uY29uY2F0KGFyZ3MpKTtcbn07XG5cbmFzc2VydC5kb2VzTm90UmVqZWN0ID0gZnVuY3Rpb24gZG9lc05vdFJlamVjdChmbikge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUgPiAxID8gX2xlbjUgLSAxIDogMCksIF9rZXk1ID0gMTsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICByZXR1cm4gd2FpdEZvckFjdHVhbChmbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIGV4cGVjdHNOb0Vycm9yLmFwcGx5KHZvaWQgMCwgW2RvZXNOb3RSZWplY3QsIHJlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uIGlmRXJyb3IoZXJyKSB7XG4gIGlmIChlcnIgIT09IG51bGwgJiYgZXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdpZkVycm9yIGdvdCB1bndhbnRlZCBleGNlcHRpb246ICc7XG5cbiAgICBpZiAoX3R5cGVvZihlcnIpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXJyLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UubGVuZ3RoID09PSAwICYmIGVyci5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBtZXNzYWdlICs9IGVyci5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSArPSBlcnIubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSArPSBpbnNwZWN0KGVycik7XG4gICAgfVxuXG4gICAgdmFyIG5ld0VyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IGVycixcbiAgICAgIGV4cGVjdGVkOiBudWxsLFxuICAgICAgb3BlcmF0b3I6ICdpZkVycm9yJyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBzdGFja1N0YXJ0Rm46IGlmRXJyb3JcbiAgICB9KTsgLy8gTWFrZSBzdXJlIHdlIGFjdHVhbGx5IGhhdmUgYSBzdGFjayB0cmFjZSFcblxuICAgIHZhciBvcmlnU3RhY2sgPSBlcnIuc3RhY2s7XG5cbiAgICBpZiAodHlwZW9mIG9yaWdTdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCByZW1vdmUgYW55IGR1cGxpY2F0ZWQgZnJhbWVzIGZyb20gdGhlIGVycm9yIGZyYW1lcyB0YWtlblxuICAgICAgLy8gZnJvbSB3aXRoaW4gYGlmRXJyb3JgIGFuZCBhZGQgdGhlIG9yaWdpbmFsIGVycm9yIGZyYW1lcyB0byB0aGUgbmV3bHlcbiAgICAgIC8vIGNyZWF0ZWQgb25lcy5cbiAgICAgIHZhciB0bXAyID0gb3JpZ1N0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHRtcDIuc2hpZnQoKTsgLy8gRmlsdGVyIGFsbCBmcmFtZXMgZXhpc3RpbmcgaW4gZXJyLnN0YWNrLlxuXG4gICAgICB2YXIgdG1wMSA9IG5ld0Vyci5zdGFjay5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wMi5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBmcmFtZS5cbiAgICAgICAgdmFyIHBvcyA9IHRtcDEuaW5kZXhPZih0bXAyW2ldKTtcblxuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgIC8vIE9ubHkga2VlcCBuZXcgZnJhbWVzLlxuICAgICAgICAgIHRtcDEgPSB0bXAxLnNsaWNlKDAsIHBvcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3RXJyLnN0YWNrID0gXCJcIi5jb25jYXQodG1wMS5qb2luKCdcXG4nKSwgXCJcXG5cIikuY29uY2F0KHRtcDIuam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIHRocm93IG5ld0VycjtcbiAgfVxufTsgLy8gRXhwb3NlIGEgc3RyaWN0IG9ubHkgdmFyaWFudCBvZiBhc3NlcnRcblxuXG5mdW5jdGlvbiBzdHJpY3QoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIGlubmVyT2suYXBwbHkodm9pZCAwLCBbc3RyaWN0LCBhcmdzLmxlbmd0aF0uY29uY2F0KGFyZ3MpKTtcbn1cblxuYXNzZXJ0LnN0cmljdCA9IG9iamVjdEFzc2lnbihzdHJpY3QsIGFzc2VydCwge1xuICBlcXVhbDogYXNzZXJ0LnN0cmljdEVxdWFsLFxuICBkZWVwRXF1YWw6IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwsXG4gIG5vdEVxdWFsOiBhc3NlcnQubm90U3RyaWN0RXF1YWwsXG4gIG5vdERlZXBFcXVhbDogYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbFxufSk7XG5hc3NlcnQuc3RyaWN0LnN0cmljdCA9IGFzc2VydC5zdHJpY3Q7IiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzA4MTc4NDBmNzc1MDMyMTY5ZGRkNzBjODVhYzA1OWYxOGZmY2M4MWNcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyB2YXIgYSA9IFtudWxsXTsgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpOyB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7IHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOyBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTsgcmV0dXJuIGluc3RhbmNlOyB9OyB9IHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHsgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V0aWwvJyksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlLmluc3BlY3Q7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9lcnJvcnMnKSxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlMi5jb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRTsgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBjb3VudCkge1xuICBjb3VudCA9IE1hdGguZmxvb3IoY291bnQpO1xuICBpZiAoc3RyLmxlbmd0aCA9PSAwIHx8IGNvdW50ID09IDApIHJldHVybiAnJztcbiAgdmFyIG1heENvdW50ID0gc3RyLmxlbmd0aCAqIGNvdW50O1xuICBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2coY291bnQpIC8gTWF0aC5sb2coMikpO1xuXG4gIHdoaWxlIChjb3VudCkge1xuICAgIHN0ciArPSBzdHI7XG4gICAgY291bnQtLTtcbiAgfVxuXG4gIHN0ciArPSBzdHIuc3Vic3RyaW5nKDAsIG1heENvdW50IC0gc3RyLmxlbmd0aCk7XG4gIHJldHVybiBzdHI7XG59XG5cbnZhciBibHVlID0gJyc7XG52YXIgZ3JlZW4gPSAnJztcbnZhciByZWQgPSAnJztcbnZhciB3aGl0ZSA9ICcnO1xudmFyIGtSZWFkYWJsZU9wZXJhdG9yID0ge1xuICBkZWVwU3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbDonLFxuICBzdHJpY3RFcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBlcXVhbDonLFxuICBzdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgcmVmZXJlbmNlLWVxdWFsIHRvIFwiZXhwZWN0ZWRcIjonLFxuICBkZWVwRXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsOicsXG4gIGVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZXF1YWw6JyxcbiAgbm90RGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgc3RyaWN0bHkgdW5lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgbm90RGVlcEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsIHRvOicsXG4gIG5vdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSBsb29zZWx5IHVuZXF1YWwgdG86JyxcbiAgbm90SWRlbnRpY2FsOiAnVmFsdWVzIGlkZW50aWNhbCBidXQgbm90IHJlZmVyZW5jZS1lcXVhbDonXG59OyAvLyBDb21wYXJpbmcgc2hvcnQgcHJpbWl0aXZlcyBzaG91bGQganVzdCBzaG93ID09PSAvICE9PSBpbnN0ZWFkIG9mIHVzaW5nIHRoZVxuLy8gZGlmZi5cblxudmFyIGtNYXhTaG9ydExlbmd0aCA9IDEwO1xuXG5mdW5jdGlvbiBjb3B5RXJyb3Ioc291cmNlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCAnbWVzc2FnZScsIHtcbiAgICB2YWx1ZTogc291cmNlLm1lc3NhZ2VcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RWYWx1ZSh2YWwpIHtcbiAgLy8gVGhlIHV0aWwuaW5zcGVjdCBkZWZhdWx0IHZhbHVlcyBjb3VsZCBiZSBjaGFuZ2VkLiBUaGlzIG1ha2VzIHN1cmUgdGhlXG4gIC8vIGVycm9yIG1lc3NhZ2VzIGNvbnRhaW4gdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiBuZXZlcnRoZWxlc3MuXG4gIHJldHVybiBpbnNwZWN0KHZhbCwge1xuICAgIGNvbXBhY3Q6IGZhbHNlLFxuICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlLFxuICAgIGRlcHRoOiAxMDAwLFxuICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgY29tcGFyZXMgb25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgKHdpdGggYSBmZXcgZXhjZXB0aW9ucykuXG4gICAgc2hvd0hpZGRlbjogZmFsc2UsXG4gICAgLy8gSGF2aW5nIGEgbG9uZyBsaW5lIGFzIGVycm9yIGlzIGJldHRlciB0aGFuIHdyYXBwaW5nIHRoZSBsaW5lIGZvclxuICAgIC8vIGNvbXBhcmlzb24gZm9yIG5vdy5cbiAgICAvLyBUT0RPKEJyaWRnZUFSKTogYGJyZWFrTGVuZ3RoYCBzaG91bGQgYmUgbGltaXRlZCBhcyBzb29uIGFzIHNvb24gYXMgd2VcbiAgICAvLyBoYXZlIG1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluc3BlY3RlZCBwcm9wZXJ0aWVzIChpLmUuLCBrbm93IHdoZXJlXG4gICAgLy8gaW4gd2hhdCBsaW5lIHRoZSBwcm9wZXJ0eSBzdGFydHMgYW5kIGVuZHMpLlxuICAgIGJyZWFrTGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgZG9lcyBub3QgZGV0ZWN0IHByb3hpZXMgY3VycmVudGx5LlxuICAgIHNob3dQcm94eTogZmFsc2UsXG4gICAgc29ydGVkOiB0cnVlLFxuICAgIC8vIEluc3BlY3QgZ2V0dGVycyBhcyB3ZSBhbHNvIGNoZWNrIHRoZW0gd2hlbiBjb21wYXJpbmcgZW50cmllcy5cbiAgICBnZXR0ZXJzOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJEaWZmKGFjdHVhbCwgZXhwZWN0ZWQsIG9wZXJhdG9yKSB7XG4gIHZhciBvdGhlciA9ICcnO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBsYXN0UG9zID0gMDtcbiAgdmFyIGVuZCA9ICcnO1xuICB2YXIgc2tpcHBlZCA9IGZhbHNlO1xuICB2YXIgYWN0dWFsSW5zcGVjdGVkID0gaW5zcGVjdFZhbHVlKGFjdHVhbCk7XG4gIHZhciBhY3R1YWxMaW5lcyA9IGFjdHVhbEluc3BlY3RlZC5zcGxpdCgnXFxuJyk7XG4gIHZhciBleHBlY3RlZExpbmVzID0gaW5zcGVjdFZhbHVlKGV4cGVjdGVkKS5zcGxpdCgnXFxuJyk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGluZGljYXRvciA9ICcnOyAvLyBJbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzIGV4cGxpY2l0bHkgbWFyayB0aGVtIGFzIG5vdCByZWZlcmVuY2UgZXF1YWxcbiAgLy8gZm9yIHRoZSBgc3RyaWN0RXF1YWxgIG9wZXJhdG9yLlxuXG4gIGlmIChvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIF90eXBlb2YoZXhwZWN0ZWQpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgZXhwZWN0ZWQgIT09IG51bGwpIHtcbiAgICBvcGVyYXRvciA9ICdzdHJpY3RFcXVhbE9iamVjdCc7XG4gIH0gLy8gSWYgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIGZpdCBvbiBhIHNpbmdsZSBsaW5lIGFuZCB0aGV5IGFyZSBub3Qgc3RyaWN0bHlcbiAgLy8gZXF1YWwsIGNoZWNrIGZ1cnRoZXIgc3BlY2lhbCBoYW5kbGluZy5cblxuXG4gIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDEgJiYgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDEgJiYgYWN0dWFsTGluZXNbMF0gIT09IGV4cGVjdGVkTGluZXNbMF0pIHtcbiAgICB2YXIgaW5wdXRMZW5ndGggPSBhY3R1YWxMaW5lc1swXS5sZW5ndGggKyBleHBlY3RlZExpbmVzWzBdLmxlbmd0aDsgLy8gSWYgdGhlIGNoYXJhY3RlciBsZW5ndGggb2YgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIHRvZ2V0aGVyIGlzIGxlc3MgdGhhblxuICAgIC8vIGtNYXhTaG9ydExlbmd0aCBhbmQgaWYgbmVpdGhlciBpcyBhbiBvYmplY3QgYW5kIGF0IGxlYXN0IG9uZSBvZiB0aGVtIGlzXG4gICAgLy8gbm90IGB6ZXJvYCwgdXNlIHRoZSBzdHJpY3QgZXF1YWwgY29tcGFyaXNvbiB0byB2aXN1YWxpemUgdGhlIG91dHB1dC5cblxuICAgIGlmIChpbnB1dExlbmd0aCA8PSBrTWF4U2hvcnRMZW5ndGgpIHtcbiAgICAgIGlmICgoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpICYmIChfdHlwZW9mKGV4cGVjdGVkKSAhPT0gJ29iamVjdCcgfHwgZXhwZWN0ZWQgPT09IG51bGwpICYmIChhY3R1YWwgIT09IDAgfHwgZXhwZWN0ZWQgIT09IDApKSB7XG4gICAgICAgIC8vIC0wID09PSArMFxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKSArIFwiXCIuY29uY2F0KGFjdHVhbExpbmVzWzBdLCBcIiAhPT0gXCIpLmNvbmNhdChleHBlY3RlZExpbmVzWzBdLCBcIlxcblwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yICE9PSAnc3RyaWN0RXF1YWxPYmplY3QnKSB7XG4gICAgICAvLyBJZiB0aGUgc3RkZXJyIGlzIGEgdHR5IGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnRcbiAgICAgIC8vIGNvbHVtbnMgcGVyIGxpbmUsIGFkZCBhIG1pc21hdGNoIGluZGljYXRvciBiZWxvdyB0aGUgb3V0cHV0LiBJZiBpdCBpc1xuICAgICAgLy8gbm90IGEgdHR5LCB1c2UgYSBkZWZhdWx0IHZhbHVlIG9mIDgwIGNoYXJhY3RlcnMuXG4gICAgICB2YXIgbWF4TGVuZ3RoID0gcHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkgPyBwcm9jZXNzLnN0ZGVyci5jb2x1bW5zIDogODA7XG5cbiAgICAgIGlmIChpbnB1dExlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB3aGlsZSAoYWN0dWFsTGluZXNbMF1baV0gPT09IGV4cGVjdGVkTGluZXNbMF1baV0pIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH0gLy8gSWdub3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXJzLlxuXG5cbiAgICAgICAgaWYgKGkgPiAyKSB7XG4gICAgICAgICAgLy8gQWRkIHBvc2l0aW9uIGluZGljYXRvciBmb3IgdGhlIGZpcnN0IG1pc21hdGNoIGluIGNhc2UgaXQgaXMgYVxuICAgICAgICAgIC8vIHNpbmdsZSBsaW5lIGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgY29sdW1uIGxlbmd0aC5cbiAgICAgICAgICBpbmRpY2F0b3IgPSBcIlxcbiAgXCIuY29uY2F0KHJlcGVhdCgnICcsIGkpLCBcIl5cIik7XG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGFsbCBlbmRpbmcgbGluZXMgdGhhdCBtYXRjaCAodGhpcyBvcHRpbWl6ZXMgdGhlIG91dHB1dCBmb3JcbiAgLy8gcmVhZGFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIG51bWJlciBvZiB0b3RhbCBjaGFuZ2VkIGxpbmVzKS5cblxuXG4gIHZhciBhID0gYWN0dWFsTGluZXNbYWN0dWFsTGluZXMubGVuZ3RoIC0gMV07XG4gIHZhciBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuXG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgaWYgKGkrKyA8IDIpIHtcbiAgICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQoYSkuY29uY2F0KGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyID0gYTtcbiAgICB9XG5cbiAgICBhY3R1YWxMaW5lcy5wb3AoKTtcbiAgICBleHBlY3RlZExpbmVzLnBvcCgpO1xuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDAgfHwgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgIGEgPSBhY3R1YWxMaW5lc1thY3R1YWxMaW5lcy5sZW5ndGggLSAxXTtcbiAgICBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgdmFyIG1heExpbmVzID0gTWF0aC5tYXgoYWN0dWFsTGluZXMubGVuZ3RoLCBleHBlY3RlZExpbmVzLmxlbmd0aCk7IC8vIFN0cmljdCBlcXVhbCB3aXRoIGlkZW50aWNhbCBvYmplY3RzIHRoYXQgYXJlIG5vdCBpZGVudGljYWwgYnkgcmVmZXJlbmNlLlxuICAvLyBFLmcuLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHsgYTogU3ltYm9sKCkgfSwgeyBhOiBTeW1ib2woKSB9KVxuXG4gIGlmIChtYXhMaW5lcyA9PT0gMCkge1xuICAgIC8vIFdlIGhhdmUgdG8gZ2V0IHRoZSByZXN1bHQgYWdhaW4uIFRoZSBsaW5lcyB3ZXJlIGFsbCByZW1vdmVkIGJlZm9yZS5cbiAgICB2YXIgX2FjdHVhbExpbmVzID0gYWN0dWFsSW5zcGVjdGVkLnNwbGl0KCdcXG4nKTsgLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICBpZiAoX2FjdHVhbExpbmVzLmxlbmd0aCA+IDMwKSB7XG4gICAgICBfYWN0dWFsTGluZXNbMjZdID0gXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcblxuICAgICAgd2hpbGUgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAyNykge1xuICAgICAgICBfYWN0dWFsTGluZXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yLm5vdElkZW50aWNhbCwgXCJcXG5cXG5cIikuY29uY2F0KF9hY3R1YWxMaW5lcy5qb2luKCdcXG4nKSwgXCJcXG5cIik7XG4gIH1cblxuICBpZiAoaSA+IDMpIHtcbiAgICBlbmQgPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChlbmQpO1xuICAgIHNraXBwZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG90aGVyICE9PSAnJykge1xuICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpO1xuICAgIG90aGVyID0gJyc7XG4gIH1cblxuICB2YXIgcHJpbnRlZExpbmVzID0gMDtcbiAgdmFyIG1zZyA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSArIFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIisgYWN0dWFsXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChyZWQsIFwiLSBleHBlY3RlZFwiKS5jb25jYXQod2hpdGUpO1xuICB2YXIgc2tpcHBlZE1zZyA9IFwiIFwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUsIFwiIExpbmVzIHNraXBwZWRcIik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG1heExpbmVzOyBpKyspIHtcbiAgICAvLyBPbmx5IGV4dHJhIGV4cGVjdGVkIGxpbmVzIGV4aXN0XG4gICAgdmFyIGN1ciA9IGkgLSBsYXN0UG9zO1xuXG4gICAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDFdKTtcbiAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgIGxhc3RQb3MgPSBpOyAvLyBBZGQgdGhlIGV4cGVjdGVkIGxpbmUgdG8gdGhlIGNhY2hlLlxuXG4gICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpXSk7XG4gICAgICBwcmludGVkTGluZXMrKzsgLy8gT25seSBleHRyYSBhY3R1YWwgbGluZXMgZXhpc3RcbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkTGluZXMubGVuZ3RoIDwgaSArIDEpIHtcbiAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAvLyBjdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgbGluZSB0aHJlZSwgYWRkIHNvbWUgb2YgdGhlIGZvcm1lciBsaW5lcyBhbmRcbiAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgaWYgKGN1ciA+IDQpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXIgPiAzKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0LlxuXG4gICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiK1wiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoYWN0dWFsTGluZXNbaV0pO1xuICAgICAgcHJpbnRlZExpbmVzKys7IC8vIExpbmVzIGRpdmVyZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV4cGVjdGVkTGluZSA9IGV4cGVjdGVkTGluZXNbaV07XG4gICAgICB2YXIgYWN0dWFsTGluZSA9IGFjdHVhbExpbmVzW2ldOyAvLyBJZiB0aGUgbGluZXMgZGl2ZXJnZSwgc3BlY2lmaWNhbGx5IGNoZWNrIGZvciBsaW5lcyB0aGF0IG9ubHkgZGl2ZXJnZSBieVxuICAgICAgLy8gYSB0cmFpbGluZyBjb21tYS4gSW4gdGhhdCBjYXNlIGl0IGlzIGFjdHVhbGx5IGlkZW50aWNhbCBhbmQgd2Ugc2hvdWxkXG4gICAgICAvLyBtYXJrIGl0IGFzIHN1Y2guXG5cbiAgICAgIHZhciBkaXZlcmdpbmdMaW5lcyA9IGFjdHVhbExpbmUgIT09IGV4cGVjdGVkTGluZSAmJiAoIWVuZHNXaXRoKGFjdHVhbExpbmUsICcsJykgfHwgYWN0dWFsTGluZS5zbGljZSgwLCAtMSkgIT09IGV4cGVjdGVkTGluZSk7IC8vIElmIHRoZSBleHBlY3RlZCBsaW5lIGhhcyBhIHRyYWlsaW5nIGNvbW1hIGJ1dCBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLFxuICAgICAgLy8gYWRkIGEgY29tbWEgYXQgdGhlIGVuZCBvZiB0aGUgYWN0dWFsIGxpbmUuIE90aGVyd2lzZSB0aGUgb3V0cHV0IGNvdWxkXG4gICAgICAvLyBsb29rIHdlaXJkIGFzIGluOlxuICAgICAgLy9cbiAgICAgIC8vICAgW1xuICAgICAgLy8gICAgIDEgICAgICAgICAvLyBObyBjb21tYSBhdCB0aGUgZW5kIVxuICAgICAgLy8gKyAgIDJcbiAgICAgIC8vICAgXVxuICAgICAgLy9cblxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzICYmIGVuZHNXaXRoKGV4cGVjdGVkTGluZSwgJywnKSAmJiBleHBlY3RlZExpbmUuc2xpY2UoMCwgLTEpID09PSBhY3R1YWxMaW5lKSB7XG4gICAgICAgIGRpdmVyZ2luZ0xpbmVzID0gZmFsc2U7XG4gICAgICAgIGFjdHVhbExpbmUgKz0gJywnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2ZXJnaW5nTGluZXMpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0IGFuZCBjYWNoZSB0aGUgZXhwZWN0ZWQgZGl2ZXJnaW5nXG4gICAgICAgIC8vIGxpbmUgc28gY29uc2VjdXRpdmUgZGl2ZXJnaW5nIGxpbmVzIHNob3cgdXAgYXMgKysrLS0tIGFuZCBub3QgKy0rLSstLlxuXG4gICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgb3RoZXIgKz0gXCJcXG5cIi5jb25jYXQocmVkLCBcIi1cIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkTGluZSk7XG4gICAgICAgIHByaW50ZWRMaW5lcyArPSAyOyAvLyBMaW5lcyBhcmUgaWRlbnRpY2FsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZGQgYWxsIGNhY2hlZCBpbmZvcm1hdGlvbiB0byB0aGUgcmVzdWx0IGJlZm9yZSBhZGRpbmcgb3RoZXIgdGhpbmdzXG4gICAgICAgIC8vIGFuZCByZXNldCB0aGUgY2FjaGUuXG4gICAgICAgIHJlcyArPSBvdGhlcjtcbiAgICAgICAgb3RoZXIgPSAnJzsgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgZXhhY3RseSBvbmUgbGluZSBhYm92ZSBvciBpZiBpdCBpcyB0aGVcbiAgICAgICAgLy8gdmVyeSBmaXJzdCBsaW5lLCBhZGQgdGhlIGxpbmUgdG8gdGhlIHJlc3VsdC5cblxuICAgICAgICBpZiAoY3VyID09PSAxIHx8IGkgPT09IDApIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gSW5zcGVjdGVkIG9iamVjdCB0byBiaWcgKFNob3cgfjIwIHJvd3MgbWF4KVxuXG5cbiAgICBpZiAocHJpbnRlZExpbmVzID4gMjAgJiYgaSA8IG1heExpbmVzIC0gMikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZykuY29uY2F0KHNraXBwZWRNc2csIFwiXFxuXCIpLmNvbmNhdChyZXMsIFwiXFxuXCIpLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChvdGhlciwgXCJcXG5cIikgKyBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkID8gc2tpcHBlZE1zZyA6ICcnLCBcIlxcblwiKS5jb25jYXQocmVzKS5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpLmNvbmNhdChpbmRpY2F0b3IpO1xufVxuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoQXNzZXJ0aW9uRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NlcnRpb25FcnJvcik7XG5cbiAgICBpZiAoX3R5cGVvZihvcHRpb25zKSAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdvcHRpb25zJywgJ09iamVjdCcsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgICBvcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3IsXG4gICAgICAgIHN0YWNrU3RhcnRGbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZuO1xuICAgIHZhciBhY3R1YWwgPSBvcHRpb25zLmFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICAgIHZhciBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAwO1xuXG4gICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgU3RyaW5nKG1lc3NhZ2UpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgICAgICAvLyBSZXNldCBvbiBlYWNoIGNhbGwgdG8gbWFrZSBzdXJlIHdlIGhhbmRsZSBkeW5hbWljYWxseSBzZXQgZW52aXJvbm1lbnRcbiAgICAgICAgLy8gdmFyaWFibGVzIGNvcnJlY3QuXG4gICAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoICYmIHByb2Nlc3Muc3RkZXJyLmdldENvbG9yRGVwdGgoKSAhPT0gMSkge1xuICAgICAgICAgIGJsdWUgPSBcIlxceDFCWzM0bVwiO1xuICAgICAgICAgIGdyZWVuID0gXCJcXHgxQlszMm1cIjtcbiAgICAgICAgICB3aGl0ZSA9IFwiXFx4MUJbMzltXCI7XG4gICAgICAgICAgcmVkID0gXCJcXHgxQlszMW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibHVlID0gJyc7XG4gICAgICAgICAgZ3JlZW4gPSAnJztcbiAgICAgICAgICB3aGl0ZSA9ICcnO1xuICAgICAgICAgIHJlZCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IC8vIFByZXZlbnQgdGhlIGVycm9yIHN0YWNrIGZyb20gYmVpbmcgdmlzaWJsZSBieSBkdXBsaWNhdGluZyB0aGUgZXJyb3JcbiAgICAgIC8vIGluIGEgdmVyeSBjbG9zZSB3YXkgdG8gdGhlIG9yaWdpbmFsIGluIGNhc2UgYm90aCBzaWRlcyBhcmUgYWN0dWFsbHlcbiAgICAgIC8vIGluc3RhbmNlcyBvZiBFcnJvci5cblxuXG4gICAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGV4cGVjdGVkICE9PSBudWxsICYmICdzdGFjaycgaW4gYWN0dWFsICYmIGFjdHVhbCBpbnN0YW5jZW9mIEVycm9yICYmICdzdGFjaycgaW4gZXhwZWN0ZWQgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBhY3R1YWwgPSBjb3B5RXJyb3IoYWN0dWFsKTtcbiAgICAgICAgZXhwZWN0ZWQgPSBjb3B5RXJyb3IoZXhwZWN0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwU3RyaWN0RXF1YWwnIHx8IG9wZXJhdG9yID09PSAnc3RyaWN0RXF1YWwnKSB7XG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpKSk7XG4gICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJykge1xuICAgICAgICAvLyBJbiBjYXNlIHRoZSBvYmplY3RzIGFyZSBlcXVhbCBidXQgdGhlIG9wZXJhdG9yIHJlcXVpcmVzIHVuZXF1YWwsIHNob3dcbiAgICAgICAgLy8gdGhlIGZpcnN0IG9iamVjdCBhbmQgc2F5IEEgZXF1YWxzIEJcbiAgICAgICAgdmFyIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG4gICAgICAgIHZhciByZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKS5zcGxpdCgnXFxuJyk7IC8vIEluIGNhc2UgXCJhY3R1YWxcIiBpcyBhbiBvYmplY3QsIGl0IHNob3VsZCBub3QgYmUgcmVmZXJlbmNlIGVxdWFsLlxuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvci5ub3RTdHJpY3RFcXVhbE9iamVjdDtcbiAgICAgICAgfSAvLyBPbmx5IHJlbW92ZSBsaW5lcyBpbiBjYXNlIGl0IG1ha2VzIHNlbnNlIHRvIGNvbGxhcHNlIHRob3NlLlxuICAgICAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAzMCkge1xuICAgICAgICAgIHJlc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuXG4gICAgICAgICAgd2hpbGUgKHJlcy5sZW5ndGggPiAyNykge1xuICAgICAgICAgICAgcmVzLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBPbmx5IHByaW50IGEgc2luZ2xlIGlucHV0LlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIiBcIikuY29uY2F0KHJlc1swXSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIlxcblxcblwiKS5jb25jYXQocmVzLmpvaW4oJ1xcbicpLCBcIlxcblwiKSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3JlcyA9IGluc3BlY3RWYWx1ZShhY3R1YWwpO1xuXG4gICAgICAgIHZhciBvdGhlciA9ICcnO1xuICAgICAgICB2YXIga25vd25PcGVyYXRvcnMgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG5cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdEVxdWFsJykge1xuICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0sIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChfcmVzLnNsaWNlKDAsIDEwMjEpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChpbnNwZWN0VmFsdWUoZXhwZWN0ZWQpKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KF9yZXMuc2xpY2UoMCwgNTA5KSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG90aGVyLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChvdGhlci5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwRXF1YWwnIHx8IG9wZXJhdG9yID09PSAnZXF1YWwnKSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoa25vd25PcGVyYXRvcnMsIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzLCBcIlxcblxcbnNob3VsZCBlcXVhbFxcblxcblwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3RoZXIgPSBcIiBcIi5jb25jYXQob3BlcmF0b3IsIFwiIFwiKS5jb25jYXQob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KF9yZXMpLmNvbmNhdChvdGhlcikpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdDtcbiAgICBfdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gIW1lc3NhZ2U7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnbmFtZScsIHtcbiAgICAgIHZhbHVlOiAnQXNzZXJ0aW9uRXJyb3IgW0VSUl9BU1NFUlRJT05dJyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBfdGhpcy5jb2RlID0gJ0VSUl9BU1NFUlRJT04nO1xuICAgIF90aGlzLmFjdHVhbCA9IGFjdHVhbDtcbiAgICBfdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgIF90aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHN0YWNrU3RhcnRGbik7XG4gICAgfSAvLyBDcmVhdGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGUgaW4gdGhlIG5hbWUuXG5cblxuICAgIF90aGlzLnN0YWNrOyAvLyBSZXNldCB0aGUgbmFtZS5cblxuICAgIF90aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXNzZXJ0aW9uRXJyb3IsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgW1wiKS5jb25jYXQodGhpcy5jb2RlLCBcIl06IFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IGluc3BlY3QuY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZWN1cnNlVGltZXMsIGN0eCkge1xuICAgICAgLy8gVGhpcyBsaW1pdHMgdGhlIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgIHByb3BlcnR5IGRlZmF1bHQgaW5zcGVjdGlvbiB0b1xuICAgICAgLy8gdGhlIG1pbmltdW0gZGVwdGguIE90aGVyd2lzZSB0aG9zZSB2YWx1ZXMgd291bGQgYmUgdG9vIHZlcmJvc2UgY29tcGFyZWRcbiAgICAgIC8vIHRvIHRoZSBhY3R1YWwgZXJyb3IgbWVzc2FnZSB3aGljaCBjb250YWlucyBhIGNvbWJpbmVkIHZpZXcgb2YgdGhlc2UgdHdvXG4gICAgICAvLyBpbnB1dCB2YWx1ZXMuXG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBjdHgsIHtcbiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiAwXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFzc2VydGlvbkVycm9yO1xufShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0aW9uRXJyb3I7IiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC9lcnJvcnMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvM2IwNDQ5NjJjNDhmZTMxMzkwNTg3N2E5NmI1ZDA4OTRhNTQwNGY2ZlxuXG4vKiBlc2xpbnQgbm9kZS1jb3JlL2RvY3VtZW50ZWQtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuLyogZXNsaW50IG5vZGUtY29yZS9hbHBoYWJldGl6ZS1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuXG4vKiBlc2xpbnQgbm9kZS1jb3JlL3ByZWZlci11dGlsLWZvcm1hdC1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuJ3VzZSBzdHJpY3QnOyAvLyBUaGUgd2hvbGUgcG9pbnQgYmVoaW5kIHRoaXMgaW50ZXJuYWwgbW9kdWxlIGlzIHRvIGFsbG93IE5vZGUuanMgdG8gbm9cbi8vIGxvbmdlciBiZSBmb3JjZWQgdG8gdHJlYXQgZXZlcnkgZXJyb3IgbWVzc2FnZSBjaGFuZ2UgYXMgYSBzZW12ZXItbWFqb3Jcbi8vIGNoYW5nZS4gVGhlIE5vZGVFcnJvciBjbGFzc2VzIGhlcmUgYWxsIGV4cG9zZSBhIGBjb2RlYCBwcm9wZXJ0eSB3aG9zZVxuLy8gdmFsdWUgc3RhdGljYWxseSBhbmQgcGVybWFuZW50bHkgaWRlbnRpZmllcyB0aGUgZXJyb3IuIFdoaWxlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBtYXkgY2hhbmdlLCB0aGUgY29kZSBzaG91bGQgbm90LlxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBjb2RlcyA9IHt9OyAvLyBMYXp5IGxvYWRlZFxuXG52YXIgYXNzZXJ0O1xudmFyIHV0aWw7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBCYXNlKSB7XG4gIGlmICghQmFzZSkge1xuICAgIEJhc2UgPSBFcnJvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9XG4gIH1cblxuICB2YXIgTm9kZUVycm9yID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0Jhc2UpIHtcbiAgICBfaW5oZXJpdHMoTm9kZUVycm9yLCBfQmFzZSk7XG5cbiAgICBmdW5jdGlvbiBOb2RlRXJyb3IoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZUVycm9yKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTm9kZUVycm9yKS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpKTtcbiAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBOb2RlRXJyb3I7XG4gIH0oQmFzZSk7XG5cbiAgY29kZXNbY29kZV0gPSBOb2RlRXJyb3I7XG59IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMC44LjAvbGliL2ludGVybmFsL2Vycm9ycy5qc1xuXG5cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgIH0pO1xuXG4gICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWQuc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKSwgXCIsIG9yIFwiKSArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdLCBcIiBvciBcIikuY29uY2F0KGV4cGVjdGVkWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KFN0cmluZyhleHBlY3RlZCkpO1xuICB9XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoXG5cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7XG4gIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcblxuXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCwgdGhpc19sZW4pIHtcbiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7XG4gICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVzXG5cblxuZnVuY3Rpb24gaW5jbHVkZXMoc3RyLCBzZWFyY2gsIHN0YXJ0KSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgc3RhcnQgPSAwO1xuICB9XG5cbiAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgfVxufVxuXG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9BTUJJR1VPVVNfQVJHVU1FTlQnLCAnVGhlIFwiJXNcIiBhcmd1bWVudCBpcyBhbWJpZ3VvdXMuICVzJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IHJlcXVpcmUoJy4uL2Fzc2VydCcpO1xuICBhc3NlcnQodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnLCBcIiduYW1lJyBtdXN0IGJlIGEgc3RyaW5nXCIpOyAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuXG4gIHZhciBkZXRlcm1pbmVyO1xuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIHN0YXJ0c1dpdGgoZXhwZWN0ZWQsICdub3QgJykpIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpO1xuICB9IGVsc2Uge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gIH1cblxuICB2YXIgbXNnO1xuXG4gIGlmIChlbmRzV2l0aChuYW1lLCAnIGFyZ3VtZW50JykpIHtcbiAgICAvLyBGb3IgY2FzZXMgbGlrZSAnZmlyc3QgYXJndW1lbnQnXG4gICAgbXNnID0gXCJUaGUgXCIuY29uY2F0KG5hbWUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHR5cGUgPSBpbmNsdWRlcyhuYW1lLCAnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG4gICAgbXNnID0gXCJUaGUgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgXCIpLmNvbmNhdCh0eXBlLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IC8vIFRPRE8oQnJpZGdlQVIpOiBJbXByb3ZlIHRoZSBvdXRwdXQgYnkgc2hvd2luZyBgbnVsbGAgYW5kIHNpbWlsYXIuXG5cblxuICBtc2cgKz0gXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KF90eXBlb2YoYWN0dWFsKSk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgdmFyIHJlYXNvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2lzIGludmFsaWQnO1xuICBpZiAodXRpbCA9PT0gdW5kZWZpbmVkKSB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbiAgdmFyIGluc3BlY3RlZCA9IHV0aWwuaW5zcGVjdCh2YWx1ZSk7XG5cbiAgaWYgKGluc3BlY3RlZC5sZW5ndGggPiAxMjgpIHtcbiAgICBpbnNwZWN0ZWQgPSBcIlwiLmNvbmNhdChpbnNwZWN0ZWQuc2xpY2UoMCwgMTI4KSwgXCIuLi5cIik7XG4gIH1cblxuICByZXR1cm4gXCJUaGUgYXJndW1lbnQgJ1wiLmNvbmNhdChuYW1lLCBcIicgXCIpLmNvbmNhdChyZWFzb24sIFwiLiBSZWNlaXZlZCBcIikuY29uY2F0KGluc3BlY3RlZCk7XG59LCBUeXBlRXJyb3IsIFJhbmdlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUnLCBmdW5jdGlvbiAoaW5wdXQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0eXBlO1xuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgdHlwZSA9IFwiaW5zdGFuY2Ugb2YgXCIuY29uY2F0KHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSBcInR5cGUgXCIuY29uY2F0KF90eXBlb2YodmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiBcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnB1dCwgXCIgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgXFxcIlwiKS5jb25jYXQobmFtZSwgXCJcXFwiXCIpICsgXCIgZnVuY3Rpb24gYnV0IGdvdCBcIi5jb25jYXQodHlwZSwgXCIuXCIpO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01JU1NJTkdfQVJHUycsIGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChhc3NlcnQgPT09IHVuZGVmaW5lZCkgYXNzZXJ0ID0gcmVxdWlyZSgnLi4vYXNzZXJ0Jyk7XG4gIGFzc2VydChhcmdzLmxlbmd0aCA+IDAsICdBdCBsZWFzdCBvbmUgYXJnIG5lZWRzIHRvIGJlIHNwZWNpZmllZCcpO1xuICB2YXIgbXNnID0gJ1RoZSAnO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIGFyZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQoYSwgXCJcXFwiXCIpO1xuICB9KTtcblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMTpcbiAgICAgIG1zZyArPSBcIlwiLmNvbmNhdChhcmdzWzBdLCBcIiBhcmd1bWVudFwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgbXNnICs9IFwiXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGFuZCBcIikuY29uY2F0KGFyZ3NbMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG1zZyArPSBhcmdzLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyk7XG4gICAgICBtc2cgKz0gXCIsIGFuZCBcIi5jb25jYXQoYXJnc1tsZW4gLSAxXSwgXCIgYXJndW1lbnRzXCIpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQobXNnLCBcIiBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbn0sIFR5cGVFcnJvcik7XG5tb2R1bGUuZXhwb3J0cy5jb2RlcyA9IGNvZGVzOyIsIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8xMTJjYzdjMjc1NTEyNTRhYTJiMTcwOThmYjc3NDg2N2YwNWVkMGQ5XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgcmVnZXhGbGFnc1N1cHBvcnRlZCA9IC9hL2cuZmxhZ3MgIT09IHVuZGVmaW5lZDtcblxudmFyIGFycmF5RnJvbVNldCA9IGZ1bmN0aW9uIGFycmF5RnJvbVNldChzZXQpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBhcnJheTtcbn07XG5cbnZhciBhcnJheUZyb21NYXAgPSBmdW5jdGlvbiBhcnJheUZyb21NYXAobWFwKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBtYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgb2JqZWN0SXMgPSBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiByZXF1aXJlKCdvYmplY3QtaXMnKTtcbnZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufTtcbnZhciBudW1iZXJJc05hTiA9IE51bWJlci5pc05hTiA/IE51bWJlci5pc05hTiA6IHJlcXVpcmUoJ2lzLW5hbicpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgX3JlcXVpcmUkdHlwZXMgPSByZXF1aXJlKCd1dGlsLycpLnR5cGVzLFxuICAgIGlzQW55QXJyYXlCdWZmZXIgPSBfcmVxdWlyZSR0eXBlcy5pc0FueUFycmF5QnVmZmVyLFxuICAgIGlzQXJyYXlCdWZmZXJWaWV3ID0gX3JlcXVpcmUkdHlwZXMuaXNBcnJheUJ1ZmZlclZpZXcsXG4gICAgaXNEYXRlID0gX3JlcXVpcmUkdHlwZXMuaXNEYXRlLFxuICAgIGlzTWFwID0gX3JlcXVpcmUkdHlwZXMuaXNNYXAsXG4gICAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cCxcbiAgICBpc1NldCA9IF9yZXF1aXJlJHR5cGVzLmlzU2V0LFxuICAgIGlzTmF0aXZlRXJyb3IgPSBfcmVxdWlyZSR0eXBlcy5pc05hdGl2ZUVycm9yLFxuICAgIGlzQm94ZWRQcmltaXRpdmUgPSBfcmVxdWlyZSR0eXBlcy5pc0JveGVkUHJpbWl0aXZlLFxuICAgIGlzTnVtYmVyT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNOdW1iZXJPYmplY3QsXG4gICAgaXNTdHJpbmdPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc1N0cmluZ09iamVjdCxcbiAgICBpc0Jvb2xlYW5PYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0Jvb2xlYW5PYmplY3QsXG4gICAgaXNCaWdJbnRPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0JpZ0ludE9iamVjdCxcbiAgICBpc1N5bWJvbE9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzU3ltYm9sT2JqZWN0LFxuICAgIGlzRmxvYXQzMkFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDMyQXJyYXksXG4gICAgaXNGbG9hdDY0QXJyYXkgPSBfcmVxdWlyZSR0eXBlcy5pc0Zsb2F0NjRBcnJheTtcblxuZnVuY3Rpb24gaXNOb25JbmRleChrZXkpIHtcbiAgaWYgKGtleS5sZW5ndGggPT09IDAgfHwga2V5Lmxlbmd0aCA+IDEwKSByZXR1cm4gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2RlID0ga2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHJldHVybiB0cnVlO1xuICB9IC8vIFRoZSBtYXhpbXVtIHNpemUgZm9yIGFuIGFycmF5IGlzIDIgKiogMzIgLTEuXG5cblxuICByZXR1cm4ga2V5Lmxlbmd0aCA9PT0gMTAgJiYga2V5ID49IE1hdGgucG93KDIsIDMyKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKGlzTm9uSW5kZXgpLmNvbmNhdChvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpLmZpbHRlcihPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmJpbmQodmFsdWUpKSk7XG59IC8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi82ODBlOWU1ZTQ4OGYyMmFhYzI3NTk5YTU3ZGM4NDRhNjMxNTkyOGRkL2luZGV4LmpzXG4vLyBvcmlnaW5hbCBub3RpY2U6XG5cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmICh5IDwgeCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbnZhciBPTkxZX0VOVU1FUkFCTEUgPSB1bmRlZmluZWQ7XG52YXIga1N0cmljdCA9IHRydWU7XG52YXIga0xvb3NlID0gZmFsc2U7XG52YXIga05vSXRlcmF0b3IgPSAwO1xudmFyIGtJc0FycmF5ID0gMTtcbnZhciBrSXNTZXQgPSAyO1xudmFyIGtJc01hcCA9IDM7IC8vIENoZWNrIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBzb3VyY2UgYW5kIGZsYWdzXG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJSZWdFeHBzKGEsIGIpIHtcbiAgcmV0dXJuIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPyBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncyA6IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO1xufVxuXG5mdW5jdGlvbiBhcmVTaW1pbGFyRmxvYXRBcnJheXMoYSwgYikge1xuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBhLmJ5dGVMZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgaWYgKGFbb2Zmc2V0XSAhPT0gYltvZmZzZXRdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJUeXBlZEFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGEuYnVmZmVyLCBhLmJ5dGVPZmZzZXQsIGEuYnl0ZUxlbmd0aCksIG5ldyBVaW50OEFycmF5KGIuYnVmZmVyLCBiLmJ5dGVPZmZzZXQsIGIuYnl0ZUxlbmd0aCkpID09PSAwO1xufVxuXG5mdW5jdGlvbiBhcmVFcXVhbEFycmF5QnVmZmVycyhidWYxLCBidWYyKSB7XG4gIHJldHVybiBidWYxLmJ5dGVMZW5ndGggPT09IGJ1ZjIuYnl0ZUxlbmd0aCAmJiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGJ1ZjEpLCBuZXcgVWludDhBcnJheShidWYyKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSB7XG4gIGlmIChpc051bWJlck9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc051bWJlck9iamVjdCh2YWwyKSAmJiBvYmplY3RJcyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSwgTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMikpO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nT2JqZWN0KHZhbDIpICYmIFN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIGlmIChpc0Jvb2xlYW5PYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNCb29sZWFuT2JqZWN0KHZhbDIpICYmIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG5cbiAgaWYgKGlzQmlnSW50T2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQmlnSW50T2JqZWN0KHZhbDIpICYmIEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWwyKSAmJiBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG59IC8vIE5vdGVzOiBUeXBlIHRhZ3MgYXJlIGhpc3RvcmljYWwgW1tDbGFzc11dIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgc2V0IGJ5XG4vLyBGdW5jdGlvblRlbXBsYXRlOjpTZXRDbGFzc05hbWUoKSBpbiBDKysgb3IgU3ltYm9sLnRvU3RyaW5nVGFnIGluIEpTXG4vLyBhbmQgcmV0cmlldmVkIHVzaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopIGluIEpTXG4vLyBTZWUgaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuLy8gZm9yIGEgbGlzdCBvZiB0YWdzIHByZS1kZWZpbmVkIGluIHRoZSBzcGVjLlxuLy8gVGhlcmUgYXJlIHNvbWUgdW5zcGVjaWZpZWQgdGFncyBpbiB0aGUgd2lsZCB0b28gKGUuZy4gdHlwZWQgYXJyYXkgdGFncykuXG4vLyBTaW5jZSB0YWdzIGNhbiBiZSBhbHRlcmVkLCB0aGV5IG9ubHkgc2VydmUgZmFzdCBmYWlsdXJlc1xuLy9cbi8vIFR5cGVkIGFycmF5cyBhbmQgYnVmZmVycyBhcmUgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlaXJcbi8vIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIuIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoYXQgaXQnc1xuLy8gcmVhc29uYWJsZSB0byBpbnRlcnByZXQgdGhlaXIgdW5kZXJseWluZyBtZW1vcnkgaW4gdGhlIHNhbWUgd2F5LFxuLy8gd2hpY2ggaXMgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlaXIgdHlwZSB0YWdzLlxuLy8gKGUuZy4gYSBVaW50OEFycmF5IGFuZCBhIFVpbnQxNkFycmF5IHdpdGggdGhlIHNhbWUgbWVtb3J5IGNvbnRlbnRcbi8vIGNvdWxkIHN0aWxsIGJlIGRpZmZlcmVudCBiZWNhdXNlIHRoZXkgd2lsbCBiZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSkuXG4vL1xuLy8gRm9yIHN0cmljdCBjb21wYXJpc29uLCBvYmplY3RzIHNob3VsZCBoYXZlXG4vLyBhKSBUaGUgc2FtZSBidWlsdC1pbiB0eXBlIHRhZ3Ncbi8vIGIpIFRoZSBzYW1lIHByb3RvdHlwZXMuXG5cblxuZnVuY3Rpb24gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcykge1xuICAvLyBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmICh2YWwxID09PSB2YWwyKSB7XG4gICAgaWYgKHZhbDEgIT09IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBzdHJpY3QgPyBvYmplY3RJcyh2YWwxLCB2YWwyKSA6IHRydWU7XG4gIH0gLy8gQ2hlY2sgbW9yZSBjbG9zZWx5IGlmIHZhbDEgYW5kIHZhbDIgYXJlIGVxdWFsLlxuXG5cbiAgaWYgKHN0cmljdCkge1xuICAgIGlmIChfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwxID09PSAnbnVtYmVyJyAmJiBudW1iZXJJc05hTih2YWwxKSAmJiBudW1iZXJJc05hTih2YWwyKTtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcgfHwgdmFsMSA9PT0gbnVsbCB8fCB2YWwyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwxKSAhPT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWwxID09PSBudWxsIHx8IF90eXBlb2YodmFsMSkgIT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgIHJldHVybiB2YWwxID09IHZhbDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciB2YWwxVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMSk7XG4gIHZhciB2YWwyVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMik7XG5cbiAgaWYgKHZhbDFUYWcgIT09IHZhbDJUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwxKSkge1xuICAgIC8vIENoZWNrIGZvciBzcGFyc2UgYXJyYXlzIGFuZCBnZW5lcmFsIGZhc3QgcGF0aFxuICAgIGlmICh2YWwxLmxlbmd0aCAhPT0gdmFsMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIga2V5czEgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcbiAgICB2YXIga2V5czIgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMiwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNBcnJheSwga2V5czEpO1xuICB9IC8vIFticm93c2VyaWZ5XSBUaGlzIHRyaWdnZXJzIG9uIGNlcnRhaW4gdHlwZXMgaW4gSUUgKE1hcC9TZXQpIHNvIHdlIGRvbid0XG4gIC8vIHdhbid0IHRvIGVhcmx5IHJldHVybiBvdXQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNoZWNrcy4gSG93ZXZlciB3ZSBjYW4gY2hlY2tcbiAgLy8gaWYgdGhlIHNlY29uZCB2YWx1ZSBpcyBvbmUgb2YgdGhlc2UgdmFsdWVzIGFuZCB0aGUgZmlyc3QgaXNuJ3QuXG5cblxuICBpZiAodmFsMVRhZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAvLyByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xuICAgIGlmICghaXNNYXAodmFsMSkgJiYgaXNNYXAodmFsMikgfHwgIWlzU2V0KHZhbDEpICYmIGlzU2V0KHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzRGF0ZSh2YWwxKSkge1xuICAgIGlmICghaXNEYXRlKHZhbDIpIHx8IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwxKSAhPT0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZS5jYWxsKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHZhbDEpKSB7XG4gICAgaWYgKCFpc1JlZ0V4cCh2YWwyKSB8fCAhYXJlU2ltaWxhclJlZ0V4cHModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYXRpdmVFcnJvcih2YWwxKSB8fCB2YWwxIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAvLyBEbyBub3QgY29tcGFyZSB0aGUgc3RhY2sgYXMgaXQgbWlnaHQgZGlmZmVyIGV2ZW4gdGhvdWdoIHRoZSBlcnJvciBpdHNlbGZcbiAgICAvLyBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLlxuICAgIGlmICh2YWwxLm1lc3NhZ2UgIT09IHZhbDIubWVzc2FnZSB8fCB2YWwxLm5hbWUgIT09IHZhbDIubmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyVmlldyh2YWwxKSkge1xuICAgIGlmICghc3RyaWN0ICYmIChpc0Zsb2F0MzJBcnJheSh2YWwxKSB8fCBpc0Zsb2F0NjRBcnJheSh2YWwxKSkpIHtcbiAgICAgIGlmICghYXJlU2ltaWxhckZsb2F0QXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhcmVTaW1pbGFyVHlwZWRBcnJheXModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIEJ1ZmZlci5jb21wYXJlIHJldHVybnMgdHJ1ZSwgc28gdmFsMS5sZW5ndGggPT09IHZhbDIubGVuZ3RoLiBJZiB0aGV5IGJvdGhcbiAgICAvLyBvbmx5IGNvbnRhaW4gbnVtZXJpYyBrZXlzLCB3ZSBkb24ndCBuZWVkIHRvIGV4YW0gZnVydGhlciB0aGFuIGNoZWNraW5nXG4gICAgLy8gdGhlIHN5bWJvbHMuXG5cblxuICAgIHZhciBfa2V5cyA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwxLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgdmFyIF9rZXlzMiA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwyLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgaWYgKF9rZXlzLmxlbmd0aCAhPT0gX2tleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvciwgX2tleXMpO1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbDEpKSB7XG4gICAgaWYgKCFpc1NldCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNTZXQpO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbDEpKSB7XG4gICAgaWYgKCFpc01hcCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNNYXApO1xuICB9IGVsc2UgaWYgKGlzQW55QXJyYXlCdWZmZXIodmFsMSkpIHtcbiAgICBpZiAoIWFyZUVxdWFsQXJyYXlCdWZmZXJzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQm94ZWRQcmltaXRpdmUodmFsMSkgJiYgIWlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvcik7XG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVzKHZhbCwga2V5cykge1xuICByZXR1cm4ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUodmFsLCBrKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGl0ZXJhdGlvblR5cGUsIGFLZXlzKSB7XG4gIC8vIEZvciBhbGwgcmVtYWluaW5nIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5LCBvYmplY3RzIGFuZCBNYXBzLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5IGhhdmluZzpcbiAgLy8gYSkgVGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAvLyBiKSBUaGUgc2FtZSBzZXQgb2Yga2V5cy9pbmRleGVzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpXG4gIC8vIGMpIEVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS9pbmRleFxuICAvLyBkKSBGb3IgU2V0cyBhbmQgTWFwcywgZXF1YWwgY29udGVudHNcbiAgLy8gTm90ZTogdGhpcyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICBhS2V5cyA9IE9iamVjdC5rZXlzKHZhbDEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKHZhbDIpOyAvLyBUaGUgcGFpciBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMuXG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2hlYXAga2V5IHRlc3RcblxuXG4gIHZhciBpID0gMDtcblxuICBmb3IgKDsgaSA8IGFLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2YWwyLCBhS2V5c1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RyaWN0ICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICB2YXIgc3ltYm9sS2V5c0EgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMSk7XG5cbiAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc3ltYm9sS2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHN5bWJvbEtleXNBW2ldO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwxLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwyLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChzeW1ib2xLZXlzQS5sZW5ndGggIT09IHN5bWJvbEtleXNCLmxlbmd0aCAmJiBnZXRFbnVtZXJhYmxlcyh2YWwyLCBzeW1ib2xLZXlzQikubGVuZ3RoICE9PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChfc3ltYm9sS2V5c0IubGVuZ3RoICE9PSAwICYmIGdldEVudW1lcmFibGVzKHZhbDIsIF9zeW1ib2xLZXlzQikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYUtleXMubGVuZ3RoID09PSAwICYmIChpdGVyYXRpb25UeXBlID09PSBrTm9JdGVyYXRvciB8fCBpdGVyYXRpb25UeXBlID09PSBrSXNBcnJheSAmJiB2YWwxLmxlbmd0aCA9PT0gMCB8fCB2YWwxLnNpemUgPT09IDApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gVXNlIG1lbW9zIHRvIGhhbmRsZSBjeWNsZXMuXG5cblxuICBpZiAobWVtb3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG1lbW9zID0ge1xuICAgICAgdmFsMTogbmV3IE1hcCgpLFxuICAgICAgdmFsMjogbmV3IE1hcCgpLFxuICAgICAgcG9zaXRpb246IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIHByZXZlbnQgdXAgdG8gdHdvIG1hcC5oYXMoeCkgY2FsbHMgYnkgZGlyZWN0bHkgcmV0cmlldmluZyB0aGUgdmFsdWVcbiAgICAvLyBhbmQgY2hlY2tpbmcgZm9yIHVuZGVmaW5lZC4gVGhlIG1hcCBjYW4gb25seSBjb250YWluIG51bWJlcnMsIHNvIGl0IGlzXG4gICAgLy8gc2FmZSB0byBjaGVjayBmb3IgdW5kZWZpbmVkIG9ubHkuXG4gICAgdmFyIHZhbDJNZW1vQSA9IG1lbW9zLnZhbDEuZ2V0KHZhbDEpO1xuXG4gICAgaWYgKHZhbDJNZW1vQSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdmFsMk1lbW9CID0gbWVtb3MudmFsMi5nZXQodmFsMik7XG5cbiAgICAgIGlmICh2YWwyTWVtb0IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsMk1lbW9BID09PSB2YWwyTWVtb0I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb3MucG9zaXRpb24rKztcbiAgfVxuXG4gIG1lbW9zLnZhbDEuc2V0KHZhbDEsIG1lbW9zLnBvc2l0aW9uKTtcbiAgbWVtb3MudmFsMi5zZXQodmFsMiwgbWVtb3MucG9zaXRpb24pO1xuICB2YXIgYXJlRXEgPSBvYmpFcXVpdih2YWwxLCB2YWwyLCBzdHJpY3QsIGFLZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSk7XG4gIG1lbW9zLnZhbDEuZGVsZXRlKHZhbDEpO1xuICBtZW1vcy52YWwyLmRlbGV0ZSh2YWwyKTtcbiAgcmV0dXJuIGFyZUVxO1xufVxuXG5mdW5jdGlvbiBzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCB2YWwxLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gR28gbG9va2luZy5cbiAgdmFyIHNldFZhbHVlcyA9IGFycmF5RnJvbVNldChzZXQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbDIgPSBzZXRWYWx1ZXNbaV07XG5cbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXRjaGluZyBlbGVtZW50IHRvIG1ha2Ugc3VyZSB3ZSBkbyBub3QgY2hlY2sgdGhhdCBhZ2Fpbi5cbiAgICAgIHNldC5kZWxldGUodmFsMik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L0VxdWFsaXR5X2NvbXBhcmlzb25zX2FuZF9zYW1lbmVzcyNMb29zZV9lcXVhbGl0eV91c2luZ1xuLy8gU2FkbHkgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGRldGVjdCBjb3JyZXNwb25kaW5nIHZhbHVlcyBwcm9wZXJseSBpbiBjYXNlIHRoZVxuLy8gdHlwZSBpcyBhIHN0cmluZywgbnVtYmVyLCBiaWdpbnQgb3IgYm9vbGVhbi4gVGhlIHJlYXNvbiBpcyB0aGF0IHRob3NlIHZhbHVlc1xuLy8gY2FuIG1hdGNoIGxvdHMgb2YgZGlmZmVyZW50IHN0cmluZyB2YWx1ZXMgKGUuZy4sIDFuID09ICcrMDAwMDEnKS5cblxuXG5mdW5jdGlvbiBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSkge1xuICBzd2l0Y2ggKF90eXBlb2YocHJpbSkpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgLy8gT25seSBwYXNzIGluIG51bGwgYXMgb2JqZWN0IVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcHJpbSA9ICtwcmltO1xuICAgIC8vIExvb3NlIGVxdWFsIGVudHJpZXMgZXhpc3Qgb25seSBpZiB0aGUgc3RyaW5nIGlzIHBvc3NpYmxlIHRvIGNvbnZlcnQgdG9cbiAgICAvLyBhIHJlZ3VsYXIgbnVtYmVyIGFuZCBub3QgTmFOLlxuICAgIC8vIEZhbGwgdGhyb3VnaFxuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmIChudW1iZXJJc05hTihwcmltKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgcHJpbSkge1xuICB2YXIgYWx0VmFsdWUgPSBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSk7XG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSByZXR1cm4gYWx0VmFsdWU7XG4gIHJldHVybiBiLmhhcyhhbHRWYWx1ZSkgJiYgIWEuaGFzKGFsdFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0sIGl0ZW0sIG1lbW8pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuXG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFsdFZhbHVlO1xuICB9XG5cbiAgdmFyIGN1ckIgPSBiLmdldChhbHRWYWx1ZSk7XG5cbiAgaWYgKGN1ckIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoYWx0VmFsdWUpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gIWEuaGFzKGFsdFZhbHVlKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbyk7XG59XG5cbmZ1bmN0aW9uIHNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICAvLyBUaGlzIGlzIGEgbGF6aWx5IGluaXRpYXRlZCBTZXQgb2YgZW50cmllcyB3aGljaCBoYXZlIHRvIGJlIGNvbXBhcmVkXG4gIC8vIHBhaXJ3aXNlLlxuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFWYWx1ZXMgPSBhcnJheUZyb21TZXQoYSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbCA9IGFWYWx1ZXNbaV07IC8vIE5vdGU6IENoZWNraW5nIGZvciB0aGUgb2JqZWN0cyBmaXJzdCBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2UgZm9yIG9iamVjdFxuICAgIC8vIGhlYXZ5IHNldHMgYnV0IGl0IGlzIGEgbWlub3Igc2xvdyBkb3duIGZvciBwcmltaXRpdmVzLiBBcyB0aGV5IGFyZSBmYXN0XG4gICAgLy8gdG8gY2hlY2sgdGhpcyBpbXByb3ZlcyB0aGUgd29yc3QgY2FzZSBzY2VuYXJpbyBpbnN0ZWFkLlxuXG4gICAgaWYgKF90eXBlb2YodmFsKSA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH0gLy8gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBkb2Vzbid0IGV4aXN0IGluIHRoZSBzZWNvbmQgc2V0IGl0cyBhbiBub3QgbnVsbFxuICAgICAgLy8gb2JqZWN0IChvciBub24gc3RyaWN0IG9ubHk6IGEgbm90IG1hdGNoaW5nIHByaW1pdGl2ZSkgd2UnbGwgbmVlZCB0byBnb1xuICAgICAgLy8gaHVudGluZyBmb3Igc29tZXRoaW5nIHRoYXRzIGRlZXAtKHN0cmljdC0pZXF1YWwgdG8gaXQuIFRvIG1ha2UgdGhpc1xuICAgICAgLy8gTyhuIGxvZyBuKSBjb21wbGV4aXR5IHdlIGhhdmUgdG8gY29weSB0aGVzZSB2YWx1ZXMgaW4gYSBuZXcgc2V0IGZpcnN0LlxuXG5cbiAgICAgIHNldC5hZGQodmFsKTtcbiAgICB9IGVsc2UgaWYgKCFiLmhhcyh2YWwpKSB7XG4gICAgICBpZiAoc3RyaWN0KSByZXR1cm4gZmFsc2U7IC8vIEZhc3QgcGF0aCB0byBkZXRlY3QgbWlzc2luZyBzdHJpbmcsIHN5bWJvbCwgdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlcy5cblxuICAgICAgaWYgKCFzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgdmFsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuXG4gICAgICBzZXQuYWRkKHZhbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiVmFsdWVzID0gYXJyYXlGcm9tU2V0KGIpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGJWYWx1ZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX3ZhbCA9IGJWYWx1ZXNbX2ldOyAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGEgcHJpbWl0aXZlIHZhbHVlIGlzIGFscmVhZHlcbiAgICAgIC8vIG1hdGNoaW5nIGFuZCBvbmx5IGlmIGl0J3Mgbm90LCBnbyBodW50aW5nIGZvciBpdC5cblxuICAgICAgaWYgKF90eXBlb2YoX3ZhbCkgPT09ICdvYmplY3QnICYmIF92YWwgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgIWEuaGFzKF92YWwpICYmICFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0LnNpemUgPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFwSGFzRXF1YWxFbnRyeShzZXQsIG1hcCwga2V5MSwgaXRlbTEsIHN0cmljdCwgbWVtbykge1xuICAvLyBUbyBiZSBhYmxlIHRvIGhhbmRsZSBjYXNlcyBsaWtlOlxuICAvLyAgIE1hcChbW3t9LCAnYSddLCBbe30sICdiJ11dKSB2cyBNYXAoW1t7fSwgJ2InXSwgW3t9LCAnYSddXSlcbiAgLy8gLi4uIHdlIG5lZWQgdG8gY29uc2lkZXIgKmFsbCogbWF0Y2hpbmcga2V5cywgbm90IGp1c3QgdGhlIGZpcnN0IHdlIGZpbmQuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkyID0gc2V0VmFsdWVzW2ldO1xuXG4gICAgaWYgKGlubmVyRGVlcEVxdWFsKGtleTEsIGtleTIsIHN0cmljdCwgbWVtbykgJiYgaW5uZXJEZWVwRXF1YWwoaXRlbTEsIG1hcC5nZXQoa2V5MiksIHN0cmljdCwgbWVtbykpIHtcbiAgICAgIHNldC5kZWxldGUoa2V5Mik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG1hcEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2FFbnRyaWVzJGkgPSBfc2xpY2VkVG9BcnJheShhRW50cmllc1tpXSwgMiksXG4gICAgICAgIGtleSA9IF9hRW50cmllcyRpWzBdLFxuICAgICAgICBpdGVtMSA9IF9hRW50cmllcyRpWzFdO1xuXG4gICAgaWYgKF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCeSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZSB3ZSBwcmV2ZW50IGFub3RoZXIgYi5oYXMoa2V5KSBjaGVjayBpblxuICAgICAgLy8gYWxtb3N0IGFsbCBwb3NzaWJsZSBjYXNlcy5cbiAgICAgIHZhciBpdGVtMiA9IGIuZ2V0KGtleSk7XG5cbiAgICAgIGlmIChpdGVtMiA9PT0gdW5kZWZpbmVkICYmICFiLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtMSwgaXRlbTIsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgICAgaWYgKHN0cmljdCkgcmV0dXJuIGZhbHNlOyAvLyBGYXN0IHBhdGggdG8gZGV0ZWN0IG1pc3Npbmcgc3RyaW5nLCBzeW1ib2wsIHVuZGVmaW5lZCBhbmQgbnVsbFxuICAgICAgICAvLyBrZXlzLlxuXG4gICAgICAgIGlmICghbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIGtleSwgaXRlbTEsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2V0ICE9PSBudWxsKSB7XG4gICAgdmFyIGJFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGIpO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgYkVudHJpZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIF9iRW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KGJFbnRyaWVzW19pMl0sIDIpLFxuICAgICAgICAgIGtleSA9IF9iRW50cmllcyRfaVswXSxcbiAgICAgICAgICBpdGVtID0gX2JFbnRyaWVzJF9pWzFdO1xuXG4gICAgICBpZiAoX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgKCFhLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhLmdldChrZXkpLCBpdGVtLCBmYWxzZSwgbWVtbykpICYmICFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBmYWxzZSwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZXQuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBzdHJpY3QsIGtleXMsIG1lbW9zLCBpdGVyYXRpb25UeXBlKSB7XG4gIC8vIFNldHMgYW5kIG1hcHMgZG9uJ3QgaGF2ZSB0aGVpciBlbnRyaWVzIGFjY2Vzc2libGUgdmlhIG5vcm1hbCBvYmplY3RcbiAgLy8gcHJvcGVydGllcy5cbiAgdmFyIGkgPSAwO1xuXG4gIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNTZXQpIHtcbiAgICBpZiAoIXNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc01hcCkge1xuICAgIGlmICghbWFwRXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkpIHtcbiAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShhLCBpKSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2ldLCBiW2ldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShiLCBpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBcnJheSBpcyBzcGFyc2UuXG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuXG4gICAgICAgIGZvciAoOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c0FbaV07XG5cbiAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGtleSkgfHwgIWlubmVyRGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlzQS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBUaGUgcGFpciBtdXN0IGhhdmUgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LlxuICAvLyBQb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0OlxuXG5cbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2tleSA9IGtleXNbaV07XG5cbiAgICBpZiAoIWlubmVyRGVlcEVxdWFsKGFbX2tleV0sIGJbX2tleV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtMb29zZSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcFN0cmljdEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtTdHJpY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWVwRXF1YWw6IGlzRGVlcEVxdWFsLFxuICBpc0RlZXBTdHJpY3RFcXVhbDogaXNEZWVwU3RyaWN0RXF1YWxcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcblx0aWYgKCRnT1BEICYmICRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHZhciBkZXNjID0gJGdPUEQoZnVuYywgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0Ly8gb3JpZ2luYWwgbGVuZ3RoLCBwbHVzIHRoZSByZWNlaXZlciwgbWludXMgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIChhZnRlciB0aGUgcmVjZWl2ZXIpXG5cdFx0XHQkZGVmaW5lUHJvcGVydHkoXG5cdFx0XHRcdGZ1bmMsXG5cdFx0XHRcdCdsZW5ndGgnLFxuXHRcdFx0XHR7IHZhbHVlOiAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmdW5jO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgYW5zaVN0eWxlcyA9IHJlcXVpcmUoJ2Fuc2ktc3R5bGVzJyk7XG5jb25zdCB7c3Rkb3V0OiBzdGRvdXRDb2xvciwgc3RkZXJyOiBzdGRlcnJDb2xvcn0gPSByZXF1aXJlKCdzdXBwb3J0cy1jb2xvcicpO1xuY29uc3Qge1xuXHRzdHJpbmdSZXBsYWNlQWxsLFxuXHRzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXhcbn0gPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8vIGBzdXBwb3J0c0NvbG9yLmxldmVsYCDihpIgYGFuc2lTdHlsZXMuY29sb3JbbmFtZV1gIG1hcHBpbmdcbmNvbnN0IGxldmVsTWFwcGluZyA9IFtcblx0J2Fuc2knLFxuXHQnYW5zaScsXG5cdCdhbnNpMjU2Jyxcblx0J2Fuc2kxNm0nXG5dO1xuXG5jb25zdCBzdHlsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5jb25zdCBhcHBseU9wdGlvbnMgPSAob2JqZWN0LCBvcHRpb25zID0ge30pID0+IHtcblx0aWYgKG9wdGlvbnMubGV2ZWwgJiYgIShOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubGV2ZWwpICYmIG9wdGlvbnMubGV2ZWwgPj0gMCAmJiBvcHRpb25zLmxldmVsIDw9IDMpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgYGxldmVsYCBvcHRpb24gc2hvdWxkIGJlIGFuIGludGVnZXIgZnJvbSAwIHRvIDMnKTtcblx0fVxuXG5cdC8vIERldGVjdCBsZXZlbCBpZiBub3Qgc2V0IG1hbnVhbGx5XG5cdGNvbnN0IGNvbG9yTGV2ZWwgPSBzdGRvdXRDb2xvciA/IHN0ZG91dENvbG9yLmxldmVsIDogMDtcblx0b2JqZWN0LmxldmVsID0gb3B0aW9ucy5sZXZlbCA9PT0gdW5kZWZpbmVkID8gY29sb3JMZXZlbCA6IG9wdGlvbnMubGV2ZWw7XG59O1xuXG5jbGFzcyBDaGFsa0NsYXNzIHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cblx0XHRyZXR1cm4gY2hhbGtGYWN0b3J5KG9wdGlvbnMpO1xuXHR9XG59XG5cbmNvbnN0IGNoYWxrRmFjdG9yeSA9IG9wdGlvbnMgPT4ge1xuXHRjb25zdCBjaGFsayA9IHt9O1xuXHRhcHBseU9wdGlvbnMoY2hhbGssIG9wdGlvbnMpO1xuXG5cdGNoYWxrLnRlbXBsYXRlID0gKC4uLmFyZ3VtZW50c18pID0+IGNoYWxrVGFnKGNoYWxrLnRlbXBsYXRlLCAuLi5hcmd1bWVudHNfKTtcblxuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YoY2hhbGssIENoYWxrLnByb3RvdHlwZSk7XG5cdE9iamVjdC5zZXRQcm90b3R5cGVPZihjaGFsay50ZW1wbGF0ZSwgY2hhbGspO1xuXG5cdGNoYWxrLnRlbXBsYXRlLmNvbnN0cnVjdG9yID0gKCkgPT4ge1xuXHRcdHRocm93IG5ldyBFcnJvcignYGNoYWxrLmNvbnN0cnVjdG9yKClgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgbmV3IGNoYWxrLkluc3RhbmNlKClgIGluc3RlYWQuJyk7XG5cdH07XG5cblx0Y2hhbGsudGVtcGxhdGUuSW5zdGFuY2UgPSBDaGFsa0NsYXNzO1xuXG5cdHJldHVybiBjaGFsay50ZW1wbGF0ZTtcbn07XG5cbmZ1bmN0aW9uIENoYWxrKG9wdGlvbnMpIHtcblx0cmV0dXJuIGNoYWxrRmFjdG9yeShvcHRpb25zKTtcbn1cblxuZm9yIChjb25zdCBbc3R5bGVOYW1lLCBzdHlsZV0gb2YgT2JqZWN0LmVudHJpZXMoYW5zaVN0eWxlcykpIHtcblx0c3R5bGVzW3N0eWxlTmFtZV0gPSB7XG5cdFx0Z2V0KCkge1xuXHRcdFx0Y29uc3QgYnVpbGRlciA9IGNyZWF0ZUJ1aWxkZXIodGhpcywgY3JlYXRlU3R5bGVyKHN0eWxlLm9wZW4sIHN0eWxlLmNsb3NlLCB0aGlzLl9zdHlsZXIpLCB0aGlzLl9pc0VtcHR5KTtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBzdHlsZU5hbWUsIHt2YWx1ZTogYnVpbGRlcn0pO1xuXHRcdFx0cmV0dXJuIGJ1aWxkZXI7XG5cdFx0fVxuXHR9O1xufVxuXG5zdHlsZXMudmlzaWJsZSA9IHtcblx0Z2V0KCkge1xuXHRcdGNvbnN0IGJ1aWxkZXIgPSBjcmVhdGVCdWlsZGVyKHRoaXMsIHRoaXMuX3N0eWxlciwgdHJ1ZSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd2aXNpYmxlJywge3ZhbHVlOiBidWlsZGVyfSk7XG5cdFx0cmV0dXJuIGJ1aWxkZXI7XG5cdH1cbn07XG5cbmNvbnN0IHVzZWRNb2RlbHMgPSBbJ3JnYicsICdoZXgnLCAna2V5d29yZCcsICdoc2wnLCAnaHN2JywgJ2h3YicsICdhbnNpJywgJ2Fuc2kyNTYnXTtcblxuZm9yIChjb25zdCBtb2RlbCBvZiB1c2VkTW9kZWxzKSB7XG5cdHN0eWxlc1ttb2RlbF0gPSB7XG5cdFx0Z2V0KCkge1xuXHRcdFx0Y29uc3Qge2xldmVsfSA9IHRoaXM7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3VtZW50c18pIHtcblx0XHRcdFx0Y29uc3Qgc3R5bGVyID0gY3JlYXRlU3R5bGVyKGFuc2lTdHlsZXMuY29sb3JbbGV2ZWxNYXBwaW5nW2xldmVsXV1bbW9kZWxdKC4uLmFyZ3VtZW50c18pLCBhbnNpU3R5bGVzLmNvbG9yLmNsb3NlLCB0aGlzLl9zdHlsZXIpO1xuXHRcdFx0XHRyZXR1cm4gY3JlYXRlQnVpbGRlcih0aGlzLCBzdHlsZXIsIHRoaXMuX2lzRW1wdHkpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH07XG59XG5cbmZvciAoY29uc3QgbW9kZWwgb2YgdXNlZE1vZGVscykge1xuXHRjb25zdCBiZ01vZGVsID0gJ2JnJyArIG1vZGVsWzBdLnRvVXBwZXJDYXNlKCkgKyBtb2RlbC5zbGljZSgxKTtcblx0c3R5bGVzW2JnTW9kZWxdID0ge1xuXHRcdGdldCgpIHtcblx0XHRcdGNvbnN0IHtsZXZlbH0gPSB0aGlzO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICguLi5hcmd1bWVudHNfKSB7XG5cdFx0XHRcdGNvbnN0IHN0eWxlciA9IGNyZWF0ZVN0eWxlcihhbnNpU3R5bGVzLmJnQ29sb3JbbGV2ZWxNYXBwaW5nW2xldmVsXV1bbW9kZWxdKC4uLmFyZ3VtZW50c18pLCBhbnNpU3R5bGVzLmJnQ29sb3IuY2xvc2UsIHRoaXMuX3N0eWxlcik7XG5cdFx0XHRcdHJldHVybiBjcmVhdGVCdWlsZGVyKHRoaXMsIHN0eWxlciwgdGhpcy5faXNFbXB0eSk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcbn1cblxuY29uc3QgcHJvdG8gPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcygoKSA9PiB7fSwge1xuXHQuLi5zdHlsZXMsXG5cdGxldmVsOiB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRnZXQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2VuZXJhdG9yLmxldmVsO1xuXHRcdH0sXG5cdFx0c2V0KGxldmVsKSB7XG5cdFx0XHR0aGlzLl9nZW5lcmF0b3IubGV2ZWwgPSBsZXZlbDtcblx0XHR9XG5cdH1cbn0pO1xuXG5jb25zdCBjcmVhdGVTdHlsZXIgPSAob3BlbiwgY2xvc2UsIHBhcmVudCkgPT4ge1xuXHRsZXQgb3BlbkFsbDtcblx0bGV0IGNsb3NlQWxsO1xuXHRpZiAocGFyZW50ID09PSB1bmRlZmluZWQpIHtcblx0XHRvcGVuQWxsID0gb3Blbjtcblx0XHRjbG9zZUFsbCA9IGNsb3NlO1xuXHR9IGVsc2Uge1xuXHRcdG9wZW5BbGwgPSBwYXJlbnQub3BlbkFsbCArIG9wZW47XG5cdFx0Y2xvc2VBbGwgPSBjbG9zZSArIHBhcmVudC5jbG9zZUFsbDtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0b3Blbixcblx0XHRjbG9zZSxcblx0XHRvcGVuQWxsLFxuXHRcdGNsb3NlQWxsLFxuXHRcdHBhcmVudFxuXHR9O1xufTtcblxuY29uc3QgY3JlYXRlQnVpbGRlciA9IChzZWxmLCBfc3R5bGVyLCBfaXNFbXB0eSkgPT4ge1xuXHRjb25zdCBidWlsZGVyID0gKC4uLmFyZ3VtZW50c18pID0+IHtcblx0XHRpZiAoaXNBcnJheShhcmd1bWVudHNfWzBdKSAmJiBpc0FycmF5KGFyZ3VtZW50c19bMF0ucmF3KSkge1xuXHRcdFx0Ly8gQ2FsbGVkIGFzIGEgdGVtcGxhdGUgbGl0ZXJhbCwgZm9yIGV4YW1wbGU6IGNoYWxrLnJlZGAyICsgMyA9IHtib2xkICR7MiszfX1gXG5cdFx0XHRyZXR1cm4gYXBwbHlTdHlsZShidWlsZGVyLCBjaGFsa1RhZyhidWlsZGVyLCAuLi5hcmd1bWVudHNfKSk7XG5cdFx0fVxuXG5cdFx0Ly8gU2luZ2xlIGFyZ3VtZW50IGlzIGhvdCBwYXRoLCBpbXBsaWNpdCBjb2VyY2lvbiBpcyBmYXN0ZXIgdGhhbiBhbnl0aGluZ1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvblxuXHRcdHJldHVybiBhcHBseVN0eWxlKGJ1aWxkZXIsIChhcmd1bWVudHNfLmxlbmd0aCA9PT0gMSkgPyAoJycgKyBhcmd1bWVudHNfWzBdKSA6IGFyZ3VtZW50c18uam9pbignICcpKTtcblx0fTtcblxuXHQvLyBXZSBhbHRlciB0aGUgcHJvdG90eXBlIGJlY2F1c2Ugd2UgbXVzdCByZXR1cm4gYSBmdW5jdGlvbiwgYnV0IHRoZXJlIGlzXG5cdC8vIG5vIHdheSB0byBjcmVhdGUgYSBmdW5jdGlvbiB3aXRoIGEgZGlmZmVyZW50IHByb3RvdHlwZVxuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVpbGRlciwgcHJvdG8pO1xuXG5cdGJ1aWxkZXIuX2dlbmVyYXRvciA9IHNlbGY7XG5cdGJ1aWxkZXIuX3N0eWxlciA9IF9zdHlsZXI7XG5cdGJ1aWxkZXIuX2lzRW1wdHkgPSBfaXNFbXB0eTtcblxuXHRyZXR1cm4gYnVpbGRlcjtcbn07XG5cbmNvbnN0IGFwcGx5U3R5bGUgPSAoc2VsZiwgc3RyaW5nKSA9PiB7XG5cdGlmIChzZWxmLmxldmVsIDw9IDAgfHwgIXN0cmluZykge1xuXHRcdHJldHVybiBzZWxmLl9pc0VtcHR5ID8gJycgOiBzdHJpbmc7XG5cdH1cblxuXHRsZXQgc3R5bGVyID0gc2VsZi5fc3R5bGVyO1xuXG5cdGlmIChzdHlsZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH1cblxuXHRjb25zdCB7b3BlbkFsbCwgY2xvc2VBbGx9ID0gc3R5bGVyO1xuXHRpZiAoc3RyaW5nLmluZGV4T2YoJ1xcdTAwMUInKSAhPT0gLTEpIHtcblx0XHR3aGlsZSAoc3R5bGVyICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIFJlcGxhY2UgYW55IGluc3RhbmNlcyBhbHJlYWR5IHByZXNlbnQgd2l0aCBhIHJlLW9wZW5pbmcgY29kZVxuXHRcdFx0Ly8gb3RoZXJ3aXNlIG9ubHkgdGhlIHBhcnQgb2YgdGhlIHN0cmluZyB1bnRpbCBzYWlkIGNsb3NpbmcgY29kZVxuXHRcdFx0Ly8gd2lsbCBiZSBjb2xvcmVkLCBhbmQgdGhlIHJlc3Qgd2lsbCBzaW1wbHkgYmUgJ3BsYWluJy5cblx0XHRcdHN0cmluZyA9IHN0cmluZ1JlcGxhY2VBbGwoc3RyaW5nLCBzdHlsZXIuY2xvc2UsIHN0eWxlci5vcGVuKTtcblxuXHRcdFx0c3R5bGVyID0gc3R5bGVyLnBhcmVudDtcblx0XHR9XG5cdH1cblxuXHQvLyBXZSBjYW4gbW92ZSBib3RoIG5leHQgYWN0aW9ucyBvdXQgb2YgbG9vcCwgYmVjYXVzZSByZW1haW5pbmcgYWN0aW9ucyBpbiBsb29wIHdvbid0IGhhdmVcblx0Ly8gYW55L3Zpc2libGUgZWZmZWN0IG9uIHBhcnRzIHdlIGFkZCBoZXJlLiBDbG9zZSB0aGUgc3R5bGluZyBiZWZvcmUgYSBsaW5lYnJlYWsgYW5kIHJlb3BlblxuXHQvLyBhZnRlciBuZXh0IGxpbmUgdG8gZml4IGEgYmxlZWQgaXNzdWUgb24gbWFjT1M6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFsay9jaGFsay9wdWxsLzkyXG5cdGNvbnN0IGxmSW5kZXggPSBzdHJpbmcuaW5kZXhPZignXFxuJyk7XG5cdGlmIChsZkluZGV4ICE9PSAtMSkge1xuXHRcdHN0cmluZyA9IHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleChzdHJpbmcsIGNsb3NlQWxsLCBvcGVuQWxsLCBsZkluZGV4KTtcblx0fVxuXG5cdHJldHVybiBvcGVuQWxsICsgc3RyaW5nICsgY2xvc2VBbGw7XG59O1xuXG5sZXQgdGVtcGxhdGU7XG5jb25zdCBjaGFsa1RhZyA9IChjaGFsaywgLi4uc3RyaW5ncykgPT4ge1xuXHRjb25zdCBbZmlyc3RTdHJpbmddID0gc3RyaW5ncztcblxuXHRpZiAoIWlzQXJyYXkoZmlyc3RTdHJpbmcpIHx8ICFpc0FycmF5KGZpcnN0U3RyaW5nLnJhdykpIHtcblx0XHQvLyBJZiBjaGFsaygpIHdhcyBjYWxsZWQgYnkgaXRzZWxmIG9yIHdpdGggYSBzdHJpbmcsXG5cdFx0Ly8gcmV0dXJuIHRoZSBzdHJpbmcgaXRzZWxmIGFzIGEgc3RyaW5nLlxuXHRcdHJldHVybiBzdHJpbmdzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGNvbnN0IGFyZ3VtZW50c18gPSBzdHJpbmdzLnNsaWNlKDEpO1xuXHRjb25zdCBwYXJ0cyA9IFtmaXJzdFN0cmluZy5yYXdbMF1dO1xuXG5cdGZvciAobGV0IGkgPSAxOyBpIDwgZmlyc3RTdHJpbmcubGVuZ3RoOyBpKyspIHtcblx0XHRwYXJ0cy5wdXNoKFxuXHRcdFx0U3RyaW5nKGFyZ3VtZW50c19baSAtIDFdKS5yZXBsYWNlKC9be31cXFxcXS9nLCAnXFxcXCQmJyksXG5cdFx0XHRTdHJpbmcoZmlyc3RTdHJpbmcucmF3W2ldKVxuXHRcdCk7XG5cdH1cblxuXHRpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRlbXBsYXRlID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMnKTtcblx0fVxuXG5cdHJldHVybiB0ZW1wbGF0ZShjaGFsaywgcGFydHMuam9pbignJykpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2hhbGsucHJvdG90eXBlLCBzdHlsZXMpO1xuXG5jb25zdCBjaGFsayA9IENoYWxrKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuY2hhbGsuc3VwcG9ydHNDb2xvciA9IHN0ZG91dENvbG9yO1xuY2hhbGsuc3RkZXJyID0gQ2hhbGsoe2xldmVsOiBzdGRlcnJDb2xvciA/IHN0ZGVyckNvbG9yLmxldmVsIDogMH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbmNoYWxrLnN0ZGVyci5zdXBwb3J0c0NvbG9yID0gc3RkZXJyQ29sb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gY2hhbGs7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBURU1QTEFURV9SRUdFWCA9IC8oPzpcXFxcKHUoPzpbYS1mXFxkXXs0fXxcXHtbYS1mXFxkXXsxLDZ9XFx9KXx4W2EtZlxcZF17Mn18LikpfCg/Olxceyh+KT8oXFx3Kyg/OlxcKFteKV0qXFwpKT8oPzpcXC5cXHcrKD86XFwoW14pXSpcXCkpPykqKSg/OlsgXFx0XXwoPz1cXHI/XFxuKSkpfChcXH0pfCgoPzoufFtcXHJcXG5cXGZdKSs/KS9naTtcbmNvbnN0IFNUWUxFX1JFR0VYID0gLyg/Ol58XFwuKShcXHcrKSg/OlxcKChbXildKilcXCkpPy9nO1xuY29uc3QgU1RSSU5HX1JFR0VYID0gL14oWydcIl0pKCg/OlxcXFwufCg/IVxcMSlbXlxcXFxdKSopXFwxJC87XG5jb25zdCBFU0NBUEVfUkVHRVggPSAvXFxcXCh1KD86W2EtZlxcZF17NH18e1thLWZcXGRdezEsNn19KXx4W2EtZlxcZF17Mn18Lil8KFteXFxcXF0pL2dpO1xuXG5jb25zdCBFU0NBUEVTID0gbmV3IE1hcChbXG5cdFsnbicsICdcXG4nXSxcblx0WydyJywgJ1xcciddLFxuXHRbJ3QnLCAnXFx0J10sXG5cdFsnYicsICdcXGInXSxcblx0WydmJywgJ1xcZiddLFxuXHRbJ3YnLCAnXFx2J10sXG5cdFsnMCcsICdcXDAnXSxcblx0WydcXFxcJywgJ1xcXFwnXSxcblx0WydlJywgJ1xcdTAwMUInXSxcblx0WydhJywgJ1xcdTAwMDcnXVxuXSk7XG5cbmZ1bmN0aW9uIHVuZXNjYXBlKGMpIHtcblx0Y29uc3QgdSA9IGNbMF0gPT09ICd1Jztcblx0Y29uc3QgYnJhY2tldCA9IGNbMV0gPT09ICd7JztcblxuXHRpZiAoKHUgJiYgIWJyYWNrZXQgJiYgYy5sZW5ndGggPT09IDUpIHx8IChjWzBdID09PSAneCcgJiYgYy5sZW5ndGggPT09IDMpKSB7XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYy5zbGljZSgxKSwgMTYpKTtcblx0fVxuXG5cdGlmICh1ICYmIGJyYWNrZXQpIHtcblx0XHRyZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoYy5zbGljZSgyLCAtMSksIDE2KSk7XG5cdH1cblxuXHRyZXR1cm4gRVNDQVBFUy5nZXQoYykgfHwgYztcbn1cblxuZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMobmFtZSwgYXJndW1lbnRzXykge1xuXHRjb25zdCByZXN1bHRzID0gW107XG5cdGNvbnN0IGNodW5rcyA9IGFyZ3VtZW50c18udHJpbSgpLnNwbGl0KC9cXHMqLFxccyovZyk7XG5cdGxldCBtYXRjaGVzO1xuXG5cdGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG5cdFx0Y29uc3QgbnVtYmVyID0gTnVtYmVyKGNodW5rKTtcblx0XHRpZiAoIU51bWJlci5pc05hTihudW1iZXIpKSB7XG5cdFx0XHRyZXN1bHRzLnB1c2gobnVtYmVyKTtcblx0XHR9IGVsc2UgaWYgKChtYXRjaGVzID0gY2h1bmsubWF0Y2goU1RSSU5HX1JFR0VYKSkpIHtcblx0XHRcdHJlc3VsdHMucHVzaChtYXRjaGVzWzJdLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCAobSwgZXNjYXBlLCBjaGFyYWN0ZXIpID0+IGVzY2FwZSA/IHVuZXNjYXBlKGVzY2FwZSkgOiBjaGFyYWN0ZXIpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIENoYWxrIHRlbXBsYXRlIHN0eWxlIGFyZ3VtZW50OiAke2NodW5rfSAoaW4gc3R5bGUgJyR7bmFtZX0nKWApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVN0eWxlKHN0eWxlKSB7XG5cdFNUWUxFX1JFR0VYLmxhc3RJbmRleCA9IDA7XG5cblx0Y29uc3QgcmVzdWx0cyA9IFtdO1xuXHRsZXQgbWF0Y2hlcztcblxuXHR3aGlsZSAoKG1hdGNoZXMgPSBTVFlMRV9SRUdFWC5leGVjKHN0eWxlKSkgIT09IG51bGwpIHtcblx0XHRjb25zdCBuYW1lID0gbWF0Y2hlc1sxXTtcblxuXHRcdGlmIChtYXRjaGVzWzJdKSB7XG5cdFx0XHRjb25zdCBhcmdzID0gcGFyc2VBcmd1bWVudHMobmFtZSwgbWF0Y2hlc1syXSk7XG5cdFx0XHRyZXN1bHRzLnB1c2goW25hbWVdLmNvbmNhdChhcmdzKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdHMucHVzaChbbmFtZV0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBidWlsZFN0eWxlKGNoYWxrLCBzdHlsZXMpIHtcblx0Y29uc3QgZW5hYmxlZCA9IHt9O1xuXG5cdGZvciAoY29uc3QgbGF5ZXIgb2Ygc3R5bGVzKSB7XG5cdFx0Zm9yIChjb25zdCBzdHlsZSBvZiBsYXllci5zdHlsZXMpIHtcblx0XHRcdGVuYWJsZWRbc3R5bGVbMF1dID0gbGF5ZXIuaW52ZXJzZSA/IG51bGwgOiBzdHlsZS5zbGljZSgxKTtcblx0XHR9XG5cdH1cblxuXHRsZXQgY3VycmVudCA9IGNoYWxrO1xuXHRmb3IgKGNvbnN0IFtzdHlsZU5hbWUsIHN0eWxlc10gb2YgT2JqZWN0LmVudHJpZXMoZW5hYmxlZCkpIHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoc3R5bGVzKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKCEoc3R5bGVOYW1lIGluIGN1cnJlbnQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gQ2hhbGsgc3R5bGU6ICR7c3R5bGVOYW1lfWApO1xuXHRcdH1cblxuXHRcdGN1cnJlbnQgPSBzdHlsZXMubGVuZ3RoID4gMCA/IGN1cnJlbnRbc3R5bGVOYW1lXSguLi5zdHlsZXMpIDogY3VycmVudFtzdHlsZU5hbWVdO1xuXHR9XG5cblx0cmV0dXJuIGN1cnJlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKGNoYWxrLCB0ZW1wb3JhcnkpID0+IHtcblx0Y29uc3Qgc3R5bGVzID0gW107XG5cdGNvbnN0IGNodW5rcyA9IFtdO1xuXHRsZXQgY2h1bmsgPSBbXTtcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuXHR0ZW1wb3JhcnkucmVwbGFjZShURU1QTEFURV9SRUdFWCwgKG0sIGVzY2FwZUNoYXJhY3RlciwgaW52ZXJzZSwgc3R5bGUsIGNsb3NlLCBjaGFyYWN0ZXIpID0+IHtcblx0XHRpZiAoZXNjYXBlQ2hhcmFjdGVyKSB7XG5cdFx0XHRjaHVuay5wdXNoKHVuZXNjYXBlKGVzY2FwZUNoYXJhY3RlcikpO1xuXHRcdH0gZWxzZSBpZiAoc3R5bGUpIHtcblx0XHRcdGNvbnN0IHN0cmluZyA9IGNodW5rLmpvaW4oJycpO1xuXHRcdFx0Y2h1bmsgPSBbXTtcblx0XHRcdGNodW5rcy5wdXNoKHN0eWxlcy5sZW5ndGggPT09IDAgPyBzdHJpbmcgOiBidWlsZFN0eWxlKGNoYWxrLCBzdHlsZXMpKHN0cmluZykpO1xuXHRcdFx0c3R5bGVzLnB1c2goe2ludmVyc2UsIHN0eWxlczogcGFyc2VTdHlsZShzdHlsZSl9KTtcblx0XHR9IGVsc2UgaWYgKGNsb3NlKSB7XG5cdFx0XHRpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGV4dHJhbmVvdXMgfSBpbiBDaGFsayB0ZW1wbGF0ZSBsaXRlcmFsJyk7XG5cdFx0XHR9XG5cblx0XHRcdGNodW5rcy5wdXNoKGJ1aWxkU3R5bGUoY2hhbGssIHN0eWxlcykoY2h1bmsuam9pbignJykpKTtcblx0XHRcdGNodW5rID0gW107XG5cdFx0XHRzdHlsZXMucG9wKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNodW5rLnB1c2goY2hhcmFjdGVyKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNodW5rcy5wdXNoKGNodW5rLmpvaW4oJycpKTtcblxuXHRpZiAoc3R5bGVzLmxlbmd0aCA+IDApIHtcblx0XHRjb25zdCBlcnJNZXNzYWdlID0gYENoYWxrIHRlbXBsYXRlIGxpdGVyYWwgaXMgbWlzc2luZyAke3N0eWxlcy5sZW5ndGh9IGNsb3NpbmcgYnJhY2tldCR7c3R5bGVzLmxlbmd0aCA9PT0gMSA/ICcnIDogJ3MnfSAoXFxgfVxcYClgO1xuXHRcdHRocm93IG5ldyBFcnJvcihlcnJNZXNzYWdlKTtcblx0fVxuXG5cdHJldHVybiBjaHVua3Muam9pbignJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpbmdSZXBsYWNlQWxsID0gKHN0cmluZywgc3Vic3RyaW5nLCByZXBsYWNlcikgPT4ge1xuXHRsZXQgaW5kZXggPSBzdHJpbmcuaW5kZXhPZihzdWJzdHJpbmcpO1xuXHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0cmV0dXJuIHN0cmluZztcblx0fVxuXG5cdGNvbnN0IHN1YnN0cmluZ0xlbmd0aCA9IHN1YnN0cmluZy5sZW5ndGg7XG5cdGxldCBlbmRJbmRleCA9IDA7XG5cdGxldCByZXR1cm5WYWx1ZSA9ICcnO1xuXHRkbyB7XG5cdFx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgaW5kZXggLSBlbmRJbmRleCkgKyBzdWJzdHJpbmcgKyByZXBsYWNlcjtcblx0XHRlbmRJbmRleCA9IGluZGV4ICsgc3Vic3RyaW5nTGVuZ3RoO1xuXHRcdGluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nLCBlbmRJbmRleCk7XG5cdH0gd2hpbGUgKGluZGV4ICE9PSAtMSk7XG5cblx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCk7XG5cdHJldHVybiByZXR1cm5WYWx1ZTtcbn07XG5cbmNvbnN0IHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleCA9IChzdHJpbmcsIHByZWZpeCwgcG9zdGZpeCwgaW5kZXgpID0+IHtcblx0bGV0IGVuZEluZGV4ID0gMDtcblx0bGV0IHJldHVyblZhbHVlID0gJyc7XG5cdGRvIHtcblx0XHRjb25zdCBnb3RDUiA9IHN0cmluZ1tpbmRleCAtIDFdID09PSAnXFxyJztcblx0XHRyZXR1cm5WYWx1ZSArPSBzdHJpbmcuc3Vic3RyKGVuZEluZGV4LCAoZ290Q1IgPyBpbmRleCAtIDEgOiBpbmRleCkgLSBlbmRJbmRleCkgKyBwcmVmaXggKyAoZ290Q1IgPyAnXFxyXFxuJyA6ICdcXG4nKSArIHBvc3RmaXg7XG5cdFx0ZW5kSW5kZXggPSBpbmRleCArIDE7XG5cdFx0aW5kZXggPSBzdHJpbmcuaW5kZXhPZignXFxuJywgZW5kSW5kZXgpO1xuXHR9IHdoaWxlIChpbmRleCAhPT0gLTEpO1xuXG5cdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgpO1xuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3RyaW5nUmVwbGFjZUFsbCxcblx0c3RyaW5nRW5jYXNlQ1JMRldpdGhGaXJzdEluZGV4XG59O1xuIiwiLyogTUlUIGxpY2Vuc2UgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuY29uc3QgY3NzS2V5d29yZHMgPSByZXF1aXJlKCdjb2xvci1uYW1lJyk7XG5cbi8vIE5PVEU6IGNvbnZlcnNpb25zIHNob3VsZCBvbmx5IHJldHVybiBwcmltaXRpdmUgdmFsdWVzIChpLmUuIGFycmF5cywgb3Jcbi8vICAgICAgIHZhbHVlcyB0aGF0IGdpdmUgY29ycmVjdCBgdHlwZW9mYCByZXN1bHRzKS5cbi8vICAgICAgIGRvIG5vdCB1c2UgYm94IHZhbHVlcyB0eXBlcyAoaS5lLiBOdW1iZXIoKSwgU3RyaW5nKCksIGV0Yy4pXG5cbmNvbnN0IHJldmVyc2VLZXl3b3JkcyA9IHt9O1xuZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY3NzS2V5d29yZHMpKSB7XG5cdHJldmVyc2VLZXl3b3Jkc1tjc3NLZXl3b3Jkc1trZXldXSA9IGtleTtcbn1cblxuY29uc3QgY29udmVydCA9IHtcblx0cmdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3JnYid9LFxuXHRoc2w6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHNsJ30sXG5cdGhzdjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc3YnfSxcblx0aHdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2h3Yid9LFxuXHRjbXlrOiB7Y2hhbm5lbHM6IDQsIGxhYmVsczogJ2NteWsnfSxcblx0eHl6OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3h5eid9LFxuXHRsYWI6IHtjaGFubmVsczogMywgbGFiZWxzOiAnbGFiJ30sXG5cdGxjaDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsY2gnfSxcblx0aGV4OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydoZXgnXX0sXG5cdGtleXdvcmQ6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2tleXdvcmQnXX0sXG5cdGFuc2kxNjoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnYW5zaTE2J119LFxuXHRhbnNpMjU2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMjU2J119LFxuXHRoY2c6IHtjaGFubmVsczogMywgbGFiZWxzOiBbJ2gnLCAnYycsICdnJ119LFxuXHRhcHBsZToge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsncjE2JywgJ2cxNicsICdiMTYnXX0sXG5cdGdyYXk6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2dyYXknXX1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcblxuLy8gSGlkZSAuY2hhbm5lbHMgYW5kIC5sYWJlbHMgcHJvcGVydGllc1xuZm9yIChjb25zdCBtb2RlbCBvZiBPYmplY3Qua2V5cyhjb252ZXJ0KSkge1xuXHRpZiAoISgnY2hhbm5lbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0fVxuXG5cdGlmICghKCdsYWJlbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVsIGxhYmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0fVxuXG5cdGlmIChjb252ZXJ0W21vZGVsXS5sYWJlbHMubGVuZ3RoICE9PSBjb252ZXJ0W21vZGVsXS5jaGFubmVscykge1xuXHRcdHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBhbmQgbGFiZWwgY291bnRzIG1pc21hdGNoOiAnICsgbW9kZWwpO1xuXHR9XG5cblx0Y29uc3Qge2NoYW5uZWxzLCBsYWJlbHN9ID0gY29udmVydFttb2RlbF07XG5cdGRlbGV0ZSBjb252ZXJ0W21vZGVsXS5jaGFubmVscztcblx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W21vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogbGFiZWxzfSk7XG59XG5cbmNvbnZlcnQucmdiLmhzbCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXSAvIDI1NTtcblx0Y29uc3QgZyA9IHJnYlsxXSAvIDI1NTtcblx0Y29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcblx0Y29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHRjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcblx0bGV0IGg7XG5cdGxldCBzO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdGggPSAwO1xuXHR9IGVsc2UgaWYgKHIgPT09IG1heCkge1xuXHRcdGggPSAoZyAtIGIpIC8gZGVsdGE7XG5cdH0gZWxzZSBpZiAoZyA9PT0gbWF4KSB7XG5cdFx0aCA9IDIgKyAoYiAtIHIpIC8gZGVsdGE7XG5cdH0gZWxzZSBpZiAoYiA9PT0gbWF4KSB7XG5cdFx0aCA9IDQgKyAociAtIGcpIC8gZGVsdGE7XG5cdH1cblxuXHRoID0gTWF0aC5taW4oaCAqIDYwLCAzNjApO1xuXG5cdGlmIChoIDwgMCkge1xuXHRcdGggKz0gMzYwO1xuXHR9XG5cblx0Y29uc3QgbCA9IChtaW4gKyBtYXgpIC8gMjtcblxuXHRpZiAobWF4ID09PSBtaW4pIHtcblx0XHRzID0gMDtcblx0fSBlbHNlIGlmIChsIDw9IDAuNSkge1xuXHRcdHMgPSBkZWx0YSAvIChtYXggKyBtaW4pO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkZWx0YSAvICgyIC0gbWF4IC0gbWluKTtcblx0fVxuXG5cdHJldHVybiBbaCwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5oc3YgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGxldCByZGlmO1xuXHRsZXQgZ2RpZjtcblx0bGV0IGJkaWY7XG5cdGxldCBoO1xuXHRsZXQgcztcblxuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXHRjb25zdCB2ID0gTWF0aC5tYXgociwgZywgYik7XG5cdGNvbnN0IGRpZmYgPSB2IC0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IGRpZmZjID0gZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gKHYgLSBjKSAvIDYgLyBkaWZmICsgMSAvIDI7XG5cdH07XG5cblx0aWYgKGRpZmYgPT09IDApIHtcblx0XHRoID0gMDtcblx0XHRzID0gMDtcblx0fSBlbHNlIHtcblx0XHRzID0gZGlmZiAvIHY7XG5cdFx0cmRpZiA9IGRpZmZjKHIpO1xuXHRcdGdkaWYgPSBkaWZmYyhnKTtcblx0XHRiZGlmID0gZGlmZmMoYik7XG5cblx0XHRpZiAociA9PT0gdikge1xuXHRcdFx0aCA9IGJkaWYgLSBnZGlmO1xuXHRcdH0gZWxzZSBpZiAoZyA9PT0gdikge1xuXHRcdFx0aCA9ICgxIC8gMykgKyByZGlmIC0gYmRpZjtcblx0XHR9IGVsc2UgaWYgKGIgPT09IHYpIHtcblx0XHRcdGggPSAoMiAvIDMpICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXG5cdFx0aWYgKGggPCAwKSB7XG5cdFx0XHRoICs9IDE7XG5cdFx0fSBlbHNlIGlmIChoID4gMSkge1xuXHRcdFx0aCAtPSAxO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBbXG5cdFx0aCAqIDM2MCxcblx0XHRzICogMTAwLFxuXHRcdHYgKiAxMDBcblx0XTtcbn07XG5cbmNvbnZlcnQucmdiLmh3YiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXTtcblx0Y29uc3QgZyA9IHJnYlsxXTtcblx0bGV0IGIgPSByZ2JbMl07XG5cdGNvbnN0IGggPSBjb252ZXJ0LnJnYi5oc2wocmdiKVswXTtcblx0Y29uc3QgdyA9IDEgLyAyNTUgKiBNYXRoLm1pbihyLCBNYXRoLm1pbihnLCBiKSk7XG5cblx0YiA9IDEgLSAxIC8gMjU1ICogTWF0aC5tYXgociwgTWF0aC5tYXgoZywgYikpO1xuXG5cdHJldHVybiBbaCwgdyAqIDEwMCwgYiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5jbXlrID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdGNvbnN0IGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblx0Y29uc3QgYyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXHRjb25zdCBtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdGNvbnN0IHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcblxuXHRyZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufTtcblxuZnVuY3Rpb24gY29tcGFyYXRpdmVEaXN0YW5jZSh4LCB5KSB7XG5cdC8qXG5cdFx0U2VlIGh0dHBzOi8vZW4ubS53aWtpcGVkaWEub3JnL3dpa2kvRXVjbGlkZWFuX2Rpc3RhbmNlI1NxdWFyZWRfRXVjbGlkZWFuX2Rpc3RhbmNlXG5cdCovXG5cdHJldHVybiAoXG5cdFx0KCh4WzBdIC0geVswXSkgKiogMikgK1xuXHRcdCgoeFsxXSAtIHlbMV0pICoqIDIpICtcblx0XHQoKHhbMl0gLSB5WzJdKSAqKiAyKVxuXHQpO1xufVxuXG5jb252ZXJ0LnJnYi5rZXl3b3JkID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByZXZlcnNlZCA9IHJldmVyc2VLZXl3b3Jkc1tyZ2JdO1xuXHRpZiAocmV2ZXJzZWQpIHtcblx0XHRyZXR1cm4gcmV2ZXJzZWQ7XG5cdH1cblxuXHRsZXQgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHRsZXQgY3VycmVudENsb3Nlc3RLZXl3b3JkO1xuXG5cdGZvciAoY29uc3Qga2V5d29yZCBvZiBPYmplY3Qua2V5cyhjc3NLZXl3b3JkcykpIHtcblx0XHRjb25zdCB2YWx1ZSA9IGNzc0tleXdvcmRzW2tleXdvcmRdO1xuXG5cdFx0Ly8gQ29tcHV0ZSBjb21wYXJhdGl2ZSBkaXN0YW5jZVxuXHRcdGNvbnN0IGRpc3RhbmNlID0gY29tcGFyYXRpdmVEaXN0YW5jZShyZ2IsIHZhbHVlKTtcblxuXHRcdC8vIENoZWNrIGlmIGl0cyBsZXNzLCBpZiBzbyBzZXQgYXMgY2xvc2VzdFxuXHRcdGlmIChkaXN0YW5jZSA8IGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UpIHtcblx0XHRcdGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHRcdGN1cnJlbnRDbG9zZXN0S2V5d29yZCA9IGtleXdvcmQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGN1cnJlbnRDbG9zZXN0S2V5d29yZDtcbn07XG5cbmNvbnZlcnQua2V5d29yZC5yZ2IgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHRyZXR1cm4gY3NzS2V5d29yZHNba2V5d29yZF07XG59O1xuXG5jb252ZXJ0LnJnYi54eXogPSBmdW5jdGlvbiAocmdiKSB7XG5cdGxldCByID0gcmdiWzBdIC8gMjU1O1xuXHRsZXQgZyA9IHJnYlsxXSAvIDI1NTtcblx0bGV0IGIgPSByZ2JbMl0gLyAyNTU7XG5cblx0Ly8gQXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjA0MDQ1ID8gKCgociArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQpIDogKHIgLyAxMi45Mik7XG5cdGcgPSBnID4gMC4wNDA0NSA/ICgoKGcgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40KSA6IChnIC8gMTIuOTIpO1xuXHRiID0gYiA+IDAuMDQwNDUgPyAoKChiICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNCkgOiAoYiAvIDEyLjkyKTtcblxuXHRjb25zdCB4ID0gKHIgKiAwLjQxMjQpICsgKGcgKiAwLjM1NzYpICsgKGIgKiAwLjE4MDUpO1xuXHRjb25zdCB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHRjb25zdCB6ID0gKHIgKiAwLjAxOTMpICsgKGcgKiAwLjExOTIpICsgKGIgKiAwLjk1MDUpO1xuXG5cdHJldHVybiBbeCAqIDEwMCwgeSAqIDEwMCwgeiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LnJnYi5sYWIgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGNvbnN0IHh5eiA9IGNvbnZlcnQucmdiLnh5eihyZ2IpO1xuXHRsZXQgeCA9IHh5elswXTtcblx0bGV0IHkgPSB4eXpbMV07XG5cdGxldCB6ID0geHl6WzJdO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyAoeCAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/ICh5ICoqICgxIC8gMykpIDogKDcuNzg3ICogeSkgKyAoMTYgLyAxMTYpO1xuXHR6ID0geiA+IDAuMDA4ODU2ID8gKHogKiogKDEgLyAzKSkgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0Y29uc3QgbCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRjb25zdCBhID0gNTAwICogKHggLSB5KTtcblx0Y29uc3QgYiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQuaHNsLnJnYiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgaCA9IGhzbFswXSAvIDM2MDtcblx0Y29uc3QgcyA9IGhzbFsxXSAvIDEwMDtcblx0Y29uc3QgbCA9IGhzbFsyXSAvIDEwMDtcblx0bGV0IHQyO1xuXHRsZXQgdDM7XG5cdGxldCB2YWw7XG5cblx0aWYgKHMgPT09IDApIHtcblx0XHR2YWwgPSBsICogMjU1O1xuXHRcdHJldHVybiBbdmFsLCB2YWwsIHZhbF07XG5cdH1cblxuXHRpZiAobCA8IDAuNSkge1xuXHRcdHQyID0gbCAqICgxICsgcyk7XG5cdH0gZWxzZSB7XG5cdFx0dDIgPSBsICsgcyAtIGwgKiBzO1xuXHR9XG5cblx0Y29uc3QgdDEgPSAyICogbCAtIHQyO1xuXG5cdGNvbnN0IHJnYiA9IFswLCAwLCAwXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHR0MyA9IGggKyAxIC8gMyAqIC0oaSAtIDEpO1xuXHRcdGlmICh0MyA8IDApIHtcblx0XHRcdHQzKys7XG5cdFx0fVxuXG5cdFx0aWYgKHQzID4gMSkge1xuXHRcdFx0dDMtLTtcblx0XHR9XG5cblx0XHRpZiAoNiAqIHQzIDwgMSkge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDM7XG5cdFx0fSBlbHNlIGlmICgyICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0Mjtcblx0XHR9IGVsc2UgaWYgKDMgKiB0MyA8IDIpIHtcblx0XHRcdHZhbCA9IHQxICsgKHQyIC0gdDEpICogKDIgLyAzIC0gdDMpICogNjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsID0gdDE7XG5cdFx0fVxuXG5cdFx0cmdiW2ldID0gdmFsICogMjU1O1xuXHR9XG5cblx0cmV0dXJuIHJnYjtcbn07XG5cbmNvbnZlcnQuaHNsLmhzdiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgaCA9IGhzbFswXTtcblx0bGV0IHMgPSBoc2xbMV0gLyAxMDA7XG5cdGxldCBsID0gaHNsWzJdIC8gMTAwO1xuXHRsZXQgc21pbiA9IHM7XG5cdGNvbnN0IGxtaW4gPSBNYXRoLm1heChsLCAwLjAxKTtcblxuXHRsICo9IDI7XG5cdHMgKj0gKGwgPD0gMSkgPyBsIDogMiAtIGw7XG5cdHNtaW4gKj0gbG1pbiA8PSAxID8gbG1pbiA6IDIgLSBsbWluO1xuXHRjb25zdCB2ID0gKGwgKyBzKSAvIDI7XG5cdGNvbnN0IHN2ID0gbCA9PT0gMCA/ICgyICogc21pbikgLyAobG1pbiArIHNtaW4pIDogKDIgKiBzKSAvIChsICsgcyk7XG5cblx0cmV0dXJuIFtoLCBzdiAqIDEwMCwgdiAqIDEwMF07XG59O1xuXG5jb252ZXJ0Lmhzdi5yZ2IgPSBmdW5jdGlvbiAoaHN2KSB7XG5cdGNvbnN0IGggPSBoc3ZbMF0gLyA2MDtcblx0Y29uc3QgcyA9IGhzdlsxXSAvIDEwMDtcblx0bGV0IHYgPSBoc3ZbMl0gLyAxMDA7XG5cdGNvbnN0IGhpID0gTWF0aC5mbG9vcihoKSAlIDY7XG5cblx0Y29uc3QgZiA9IGggLSBNYXRoLmZsb29yKGgpO1xuXHRjb25zdCBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdGNvbnN0IHEgPSAyNTUgKiB2ICogKDEgLSAocyAqIGYpKTtcblx0Y29uc3QgdCA9IDI1NSAqIHYgKiAoMSAtIChzICogKDEgLSBmKSkpO1xuXHR2ICo9IDI1NTtcblxuXHRzd2l0Y2ggKGhpKSB7XG5cdFx0Y2FzZSAwOlxuXHRcdFx0cmV0dXJuIFt2LCB0LCBwXTtcblx0XHRjYXNlIDE6XG5cdFx0XHRyZXR1cm4gW3EsIHYsIHBdO1xuXHRcdGNhc2UgMjpcblx0XHRcdHJldHVybiBbcCwgdiwgdF07XG5cdFx0Y2FzZSAzOlxuXHRcdFx0cmV0dXJuIFtwLCBxLCB2XTtcblx0XHRjYXNlIDQ6XG5cdFx0XHRyZXR1cm4gW3QsIHAsIHZdO1xuXHRcdGNhc2UgNTpcblx0XHRcdHJldHVybiBbdiwgcCwgcV07XG5cdH1cbn07XG5cbmNvbnZlcnQuaHN2LmhzbCA9IGZ1bmN0aW9uIChoc3YpIHtcblx0Y29uc3QgaCA9IGhzdlswXTtcblx0Y29uc3QgcyA9IGhzdlsxXSAvIDEwMDtcblx0Y29uc3QgdiA9IGhzdlsyXSAvIDEwMDtcblx0Y29uc3Qgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHRsZXQgc2w7XG5cdGxldCBsO1xuXG5cdGwgPSAoMiAtIHMpICogdjtcblx0Y29uc3QgbG1pbiA9ICgyIC0gcykgKiB2bWluO1xuXHRzbCA9IHMgKiB2bWluO1xuXHRzbCAvPSAobG1pbiA8PSAxKSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0c2wgPSBzbCB8fCAwO1xuXHRsIC89IDI7XG5cblx0cmV0dXJuIFtoLCBzbCAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG4vLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtY29sb3IvI2h3Yi10by1yZ2JcbmNvbnZlcnQuaHdiLnJnYiA9IGZ1bmN0aW9uIChod2IpIHtcblx0Y29uc3QgaCA9IGh3YlswXSAvIDM2MDtcblx0bGV0IHdoID0gaHdiWzFdIC8gMTAwO1xuXHRsZXQgYmwgPSBod2JbMl0gLyAxMDA7XG5cdGNvbnN0IHJhdGlvID0gd2ggKyBibDtcblx0bGV0IGY7XG5cblx0Ly8gV2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRjb25zdCBpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdGNvbnN0IHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRjb25zdCBuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIExpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0bGV0IHI7XG5cdGxldCBnO1xuXHRsZXQgYjtcblx0LyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUsbm8tbXVsdGktc3BhY2VzICovXG5cdHN3aXRjaCAoaSkge1xuXHRcdGRlZmF1bHQ6XG5cdFx0Y2FzZSA2OlxuXHRcdGNhc2UgMDogciA9IHY7ICBnID0gbjsgIGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgIGcgPSB2OyAgYiA9IHdoOyBicmVhaztcblx0XHRjYXNlIDI6IHIgPSB3aDsgZyA9IHY7ICBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyAgYiA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgNDogciA9IG47ICBnID0gd2g7IGIgPSB2OyBicmVhaztcblx0XHRjYXNlIDU6IHIgPSB2OyAgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblx0LyogZXNsaW50LWVuYWJsZSBtYXgtc3RhdGVtZW50cy1wZXItbGluZSxuby1tdWx0aS1zcGFjZXMgKi9cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdGNvbnN0IGMgPSBjbXlrWzBdIC8gMTAwO1xuXHRjb25zdCBtID0gY215a1sxXSAvIDEwMDtcblx0Y29uc3QgeSA9IGNteWtbMl0gLyAxMDA7XG5cdGNvbnN0IGsgPSBjbXlrWzNdIC8gMTAwO1xuXG5cdGNvbnN0IHIgPSAxIC0gTWF0aC5taW4oMSwgYyAqICgxIC0gaykgKyBrKTtcblx0Y29uc3QgZyA9IDEgLSBNYXRoLm1pbigxLCBtICogKDEgLSBrKSArIGspO1xuXHRjb25zdCBiID0gMSAtIE1hdGgubWluKDEsIHkgKiAoMSAtIGspICsgayk7XG5cblx0cmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn07XG5cbmNvbnZlcnQueHl6LnJnYiA9IGZ1bmN0aW9uICh4eXopIHtcblx0Y29uc3QgeCA9IHh5elswXSAvIDEwMDtcblx0Y29uc3QgeSA9IHh5elsxXSAvIDEwMDtcblx0Y29uc3QgeiA9IHh5elsyXSAvIDEwMDtcblx0bGV0IHI7XG5cdGxldCBnO1xuXHRsZXQgYjtcblxuXHRyID0gKHggKiAzLjI0MDYpICsgKHkgKiAtMS41MzcyKSArICh6ICogLTAuNDk4Nik7XG5cdGcgPSAoeCAqIC0wLjk2ODkpICsgKHkgKiAxLjg3NTgpICsgKHogKiAwLjA0MTUpO1xuXHRiID0gKHggKiAwLjA1NTcpICsgKHkgKiAtMC4yMDQwKSArICh6ICogMS4wNTcwKTtcblxuXHQvLyBBc3N1bWUgc1JHQlxuXHRyID0gciA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChyICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IHIgKiAxMi45MjtcblxuXHRnID0gZyA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChnICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIChiICoqICgxLjAgLyAyLjQpKSkgLSAwLjA1NSlcblx0XHQ6IGIgKiAxMi45MjtcblxuXHRyID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgciksIDEpO1xuXHRnID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgZyksIDEpO1xuXHRiID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYiksIDEpO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5sYWIgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdGxldCB4ID0geHl6WzBdO1xuXHRsZXQgeSA9IHh5elsxXTtcblx0bGV0IHogPSB4eXpbMl07XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/ICh4ICoqICgxIC8gMykpIDogKDcuNzg3ICogeCkgKyAoMTYgLyAxMTYpO1xuXHR5ID0geSA+IDAuMDA4ODU2ID8gKHkgKiogKDEgLyAzKSkgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyAoeiAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRjb25zdCBsID0gKDExNiAqIHkpIC0gMTY7XG5cdGNvbnN0IGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRjb25zdCBiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5sYWIueHl6ID0gZnVuY3Rpb24gKGxhYikge1xuXHRjb25zdCBsID0gbGFiWzBdO1xuXHRjb25zdCBhID0gbGFiWzFdO1xuXHRjb25zdCBiID0gbGFiWzJdO1xuXHRsZXQgeDtcblx0bGV0IHk7XG5cdGxldCB6O1xuXG5cdHkgPSAobCArIDE2KSAvIDExNjtcblx0eCA9IGEgLyA1MDAgKyB5O1xuXHR6ID0geSAtIGIgLyAyMDA7XG5cblx0Y29uc3QgeTIgPSB5ICoqIDM7XG5cdGNvbnN0IHgyID0geCAqKiAzO1xuXHRjb25zdCB6MiA9IHogKiogMztcblx0eSA9IHkyID4gMC4wMDg4NTYgPyB5MiA6ICh5IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cdHggPSB4MiA+IDAuMDA4ODU2ID8geDIgOiAoeCAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR6ID0gejIgPiAwLjAwODg1NiA/IHoyIDogKHogLSAxNiAvIDExNikgLyA3Ljc4NztcblxuXHR4ICo9IDk1LjA0Nztcblx0eSAqPSAxMDA7XG5cdHogKj0gMTA4Ljg4MztcblxuXHRyZXR1cm4gW3gsIHksIHpdO1xufTtcblxuY29udmVydC5sYWIubGNoID0gZnVuY3Rpb24gKGxhYikge1xuXHRjb25zdCBsID0gbGFiWzBdO1xuXHRjb25zdCBhID0gbGFiWzFdO1xuXHRjb25zdCBiID0gbGFiWzJdO1xuXHRsZXQgaDtcblxuXHRjb25zdCBociA9IE1hdGguYXRhbjIoYiwgYSk7XG5cdGggPSBociAqIDM2MCAvIDIgLyBNYXRoLlBJO1xuXG5cdGlmIChoIDwgMCkge1xuXHRcdGggKz0gMzYwO1xuXHR9XG5cblx0Y29uc3QgYyA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcblxuXHRyZXR1cm4gW2wsIGMsIGhdO1xufTtcblxuY29udmVydC5sY2gubGFiID0gZnVuY3Rpb24gKGxjaCkge1xuXHRjb25zdCBsID0gbGNoWzBdO1xuXHRjb25zdCBjID0gbGNoWzFdO1xuXHRjb25zdCBoID0gbGNoWzJdO1xuXG5cdGNvbnN0IGhyID0gaCAvIDM2MCAqIDIgKiBNYXRoLlBJO1xuXHRjb25zdCBhID0gYyAqIE1hdGguY29zKGhyKTtcblx0Y29uc3QgYiA9IGMgKiBNYXRoLnNpbihocik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzLCBzYXR1cmF0aW9uID0gbnVsbCkge1xuXHRjb25zdCBbciwgZywgYl0gPSBhcmdzO1xuXHRsZXQgdmFsdWUgPSBzYXR1cmF0aW9uID09PSBudWxsID8gY29udmVydC5yZ2IuaHN2KGFyZ3MpWzJdIDogc2F0dXJhdGlvbjsgLy8gSHN2IC0+IGFuc2kxNiBvcHRpbWl6YXRpb25cblxuXHR2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgLyA1MCk7XG5cblx0aWYgKHZhbHVlID09PSAwKSB7XG5cdFx0cmV0dXJuIDMwO1xuXHR9XG5cblx0bGV0IGFuc2kgPSAzMFxuXHRcdCsgKChNYXRoLnJvdW5kKGIgLyAyNTUpIDw8IDIpXG5cdFx0fCAoTWF0aC5yb3VuZChnIC8gMjU1KSA8PCAxKVxuXHRcdHwgTWF0aC5yb3VuZChyIC8gMjU1KSk7XG5cblx0aWYgKHZhbHVlID09PSAyKSB7XG5cdFx0YW5zaSArPSA2MDtcblx0fVxuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5oc3YuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gT3B0aW1pemF0aW9uIGhlcmU7IHdlIGFscmVhZHkga25vdyB0aGUgdmFsdWUgYW5kIGRvbid0IG5lZWQgdG8gZ2V0XG5cdC8vIGl0IGNvbnZlcnRlZCBmb3IgdXMuXG5cdHJldHVybiBjb252ZXJ0LnJnYi5hbnNpMTYoY29udmVydC5oc3YucmdiKGFyZ3MpLCBhcmdzWzJdKTtcbn07XG5cbmNvbnZlcnQucmdiLmFuc2kyNTYgPSBmdW5jdGlvbiAoYXJncykge1xuXHRjb25zdCByID0gYXJnc1swXTtcblx0Y29uc3QgZyA9IGFyZ3NbMV07XG5cdGNvbnN0IGIgPSBhcmdzWzJdO1xuXG5cdC8vIFdlIHVzZSB0aGUgZXh0ZW5kZWQgZ3JleXNjYWxlIHBhbGV0dGUgaGVyZSwgd2l0aCB0aGUgZXhjZXB0aW9uIG9mXG5cdC8vIGJsYWNrIGFuZCB3aGl0ZS4gbm9ybWFsIHBhbGV0dGUgb25seSBoYXMgNCBncmV5c2NhbGUgc2hhZGVzLlxuXHRpZiAociA9PT0gZyAmJiBnID09PSBiKSB7XG5cdFx0aWYgKHIgPCA4KSB7XG5cdFx0XHRyZXR1cm4gMTY7XG5cdFx0fVxuXG5cdFx0aWYgKHIgPiAyNDgpIHtcblx0XHRcdHJldHVybiAyMzE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgucm91bmQoKChyIC0gOCkgLyAyNDcpICogMjQpICsgMjMyO1xuXHR9XG5cblx0Y29uc3QgYW5zaSA9IDE2XG5cdFx0KyAoMzYgKiBNYXRoLnJvdW5kKHIgLyAyNTUgKiA1KSlcblx0XHQrICg2ICogTWF0aC5yb3VuZChnIC8gMjU1ICogNSkpXG5cdFx0KyBNYXRoLnJvdW5kKGIgLyAyNTUgKiA1KTtcblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuYW5zaTE2LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGxldCBjb2xvciA9IGFyZ3MgJSAxMDtcblxuXHQvLyBIYW5kbGUgZ3JleXNjYWxlXG5cdGlmIChjb2xvciA9PT0gMCB8fCBjb2xvciA9PT0gNykge1xuXHRcdGlmIChhcmdzID4gNTApIHtcblx0XHRcdGNvbG9yICs9IDMuNTtcblx0XHR9XG5cblx0XHRjb2xvciA9IGNvbG9yIC8gMTAuNSAqIDI1NTtcblxuXHRcdHJldHVybiBbY29sb3IsIGNvbG9yLCBjb2xvcl07XG5cdH1cblxuXHRjb25zdCBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0Y29uc3QgciA9ICgoY29sb3IgJiAxKSAqIG11bHQpICogMjU1O1xuXHRjb25zdCBnID0gKCgoY29sb3IgPj4gMSkgJiAxKSAqIG11bHQpICogMjU1O1xuXHRjb25zdCBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gSGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHRjb25zdCBjID0gKGFyZ3MgLSAyMzIpICogMTAgKyA4O1xuXHRcdHJldHVybiBbYywgYywgY107XG5cdH1cblxuXHRhcmdzIC09IDE2O1xuXG5cdGxldCByZW07XG5cdGNvbnN0IHIgPSBNYXRoLmZsb29yKGFyZ3MgLyAzNikgLyA1ICogMjU1O1xuXHRjb25zdCBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0Y29uc3QgYiA9IChyZW0gJSA2KSAvIDUgKiAyNTU7XG5cblx0cmV0dXJuIFtyLCBnLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmhleCA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGNvbnN0IGludGVnZXIgPSAoKE1hdGgucm91bmQoYXJnc1swXSkgJiAweEZGKSA8PCAxNilcblx0XHQrICgoTWF0aC5yb3VuZChhcmdzWzFdKSAmIDB4RkYpIDw8IDgpXG5cdFx0KyAoTWF0aC5yb3VuZChhcmdzWzJdKSAmIDB4RkYpO1xuXG5cdGNvbnN0IHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHRjb25zdCBtYXRjaCA9IGFyZ3MudG9TdHJpbmcoMTYpLm1hdGNoKC9bYS1mMC05XXs2fXxbYS1mMC05XXszfS9pKTtcblx0aWYgKCFtYXRjaCkge1xuXHRcdHJldHVybiBbMCwgMCwgMF07XG5cdH1cblxuXHRsZXQgY29sb3JTdHJpbmcgPSBtYXRjaFswXTtcblxuXHRpZiAobWF0Y2hbMF0ubGVuZ3RoID09PSAzKSB7XG5cdFx0Y29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5zcGxpdCgnJykubWFwKGNoYXIgPT4ge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0Y29uc3QgaW50ZWdlciA9IHBhcnNlSW50KGNvbG9yU3RyaW5nLCAxNik7XG5cdGNvbnN0IHIgPSAoaW50ZWdlciA+PiAxNikgJiAweEZGO1xuXHRjb25zdCBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHRjb25zdCBiID0gaW50ZWdlciAmIDB4RkY7XG5cblx0cmV0dXJuIFtyLCBnLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmhjZyA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXSAvIDI1NTtcblx0Y29uc3QgZyA9IHJnYlsxXSAvIDI1NTtcblx0Y29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcblx0Y29uc3QgbWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgociwgZyksIGIpO1xuXHRjb25zdCBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdGNvbnN0IGNocm9tYSA9IChtYXggLSBtaW4pO1xuXHRsZXQgZ3JheXNjYWxlO1xuXHRsZXQgaHVlO1xuXG5cdGlmIChjaHJvbWEgPCAxKSB7XG5cdFx0Z3JheXNjYWxlID0gbWluIC8gKDEgLSBjaHJvbWEpO1xuXHR9IGVsc2Uge1xuXHRcdGdyYXlzY2FsZSA9IDA7XG5cdH1cblxuXHRpZiAoY2hyb21hIDw9IDApIHtcblx0XHRodWUgPSAwO1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gcikge1xuXHRcdGh1ZSA9ICgoZyAtIGIpIC8gY2hyb21hKSAlIDY7XG5cdH0gZWxzZVxuXHRpZiAobWF4ID09PSBnKSB7XG5cdFx0aHVlID0gMiArIChiIC0gcikgLyBjaHJvbWE7XG5cdH0gZWxzZSB7XG5cdFx0aHVlID0gNCArIChyIC0gZykgLyBjaHJvbWE7XG5cdH1cblxuXHRodWUgLz0gNjtcblx0aHVlICU9IDE7XG5cblx0cmV0dXJuIFtodWUgKiAzNjAsIGNocm9tYSAqIDEwMCwgZ3JheXNjYWxlICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHNsLmhjZyA9IGZ1bmN0aW9uIChoc2wpIHtcblx0Y29uc3QgcyA9IGhzbFsxXSAvIDEwMDtcblx0Y29uc3QgbCA9IGhzbFsyXSAvIDEwMDtcblxuXHRjb25zdCBjID0gbCA8IDAuNSA/ICgyLjAgKiBzICogbCkgOiAoMi4wICogcyAqICgxLjAgLSBsKSk7XG5cblx0bGV0IGYgPSAwO1xuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAobCAtIDAuNSAqIGMpIC8gKDEuMCAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtoc2xbMF0sIGMgKiAxMDAsIGYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YuaGNnID0gZnVuY3Rpb24gKGhzdikge1xuXHRjb25zdCBzID0gaHN2WzFdIC8gMTAwO1xuXHRjb25zdCB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdGNvbnN0IGMgPSBzICogdjtcblx0bGV0IGYgPSAwO1xuXG5cdGlmIChjIDwgMS4wKSB7XG5cdFx0ZiA9ICh2IC0gYykgLyAoMSAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtoc3ZbMF0sIGMgKiAxMDAsIGYgKiAxMDBdO1xufTtcblxuY29udmVydC5oY2cucmdiID0gZnVuY3Rpb24gKGhjZykge1xuXHRjb25zdCBoID0gaGNnWzBdIC8gMzYwO1xuXHRjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuXHRjb25zdCBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdGlmIChjID09PSAwLjApIHtcblx0XHRyZXR1cm4gW2cgKiAyNTUsIGcgKiAyNTUsIGcgKiAyNTVdO1xuXHR9XG5cblx0Y29uc3QgcHVyZSA9IFswLCAwLCAwXTtcblx0Y29uc3QgaGkgPSAoaCAlIDEpICogNjtcblx0Y29uc3QgdiA9IGhpICUgMTtcblx0Y29uc3QgdyA9IDEgLSB2O1xuXHRsZXQgbWcgPSAwO1xuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lICovXG5cdHN3aXRjaCAoTWF0aC5mbG9vcihoaSkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IHY7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHRwdXJlWzBdID0gdzsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSB2OyBicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IHc7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRjYXNlIDQ6XG5cdFx0XHRwdXJlWzBdID0gdjsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0cHVyZVswXSA9IDE7IHB1cmVbMV0gPSAwOyBwdXJlWzJdID0gdztcblx0fVxuXHQvKiBlc2xpbnQtZW5hYmxlIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lICovXG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0Y29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcblx0Y29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRjb25zdCB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdGxldCBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0Y29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcblx0Y29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRjb25zdCBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdGxldCBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdGNvbnN0IGMgPSBoY2dbMV0gLyAxMDA7XG5cdGNvbnN0IGcgPSBoY2dbMl0gLyAxMDA7XG5cdGNvbnN0IHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHRjb25zdCB3ID0gaHdiWzFdIC8gMTAwO1xuXHRjb25zdCBiID0gaHdiWzJdIC8gMTAwO1xuXHRjb25zdCB2ID0gMSAtIGI7XG5cdGNvbnN0IGMgPSB2IC0gdztcblx0bGV0IGcgPSAwO1xuXG5cdGlmIChjIDwgMSkge1xuXHRcdGcgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHdiWzBdLCBjICogMTAwLCBnICogMTAwXTtcbn07XG5cbmNvbnZlcnQuYXBwbGUucmdiID0gZnVuY3Rpb24gKGFwcGxlKSB7XG5cdHJldHVybiBbKGFwcGxlWzBdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMV0gLyA2NTUzNSkgKiAyNTUsIChhcHBsZVsyXSAvIDY1NTM1KSAqIDI1NV07XG59O1xuXG5jb252ZXJ0LnJnYi5hcHBsZSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0cmV0dXJuIFsocmdiWzBdIC8gMjU1KSAqIDY1NTM1LCAocmdiWzFdIC8gMjU1KSAqIDY1NTM1LCAocmdiWzJdIC8gMjU1KSAqIDY1NTM1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHRyZXR1cm4gW2FyZ3NbMF0gLyAxMDAgKiAyNTUsIGFyZ3NbMF0gLyAxMDAgKiAyNTUsIGFyZ3NbMF0gLyAxMDAgKiAyNTVdO1xufTtcblxuY29udmVydC5ncmF5LmhzbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHJldHVybiBbMCwgMCwgYXJnc1swXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuaHN2ID0gY29udmVydC5ncmF5LmhzbDtcblxuY29udmVydC5ncmF5Lmh3YiA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMTAwLCBncmF5WzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5jbXlrID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFswLCAwLCAwLCBncmF5WzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5sYWIgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gW2dyYXlbMF0sIDAsIDBdO1xufTtcblxuY29udmVydC5ncmF5LmhleCA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdGNvbnN0IHZhbCA9IE1hdGgucm91bmQoZ3JheVswXSAvIDEwMCAqIDI1NSkgJiAweEZGO1xuXHRjb25zdCBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdGNvbnN0IHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LnJnYi5ncmF5ID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCB2YWwgPSAocmdiWzBdICsgcmdiWzFdICsgcmdiWzJdKSAvIDM7XG5cdHJldHVybiBbdmFsIC8gMjU1ICogMTAwXTtcbn07XG4iLCJjb25zdCBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbmNvbnN0IHJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZScpO1xuXG5jb25zdCBjb252ZXJ0ID0ge307XG5cbmNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHRjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdGNvbnN0IGFyZzAgPSBhcmdzWzBdO1xuXHRcdGlmIChhcmcwID09PSB1bmRlZmluZWQgfHwgYXJnMCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZzA7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZzAubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IGFyZzA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIFByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0Y29uc3Qgd3JhcHBlZEZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRjb25zdCBhcmcwID0gYXJnc1swXTtcblxuXHRcdGlmIChhcmcwID09PSB1bmRlZmluZWQgfHwgYXJnMCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZzA7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZzAubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IGFyZzA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyBXZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yIChsZXQgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBQcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZyb21Nb2RlbCA9PiB7XG5cdGNvbnZlcnRbZnJvbU1vZGVsXSA9IHt9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5jaGFubmVsc30pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmxhYmVsc30pO1xuXG5cdGNvbnN0IHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdGNvbnN0IHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKHRvTW9kZWwgPT4ge1xuXHRcdGNvbnN0IGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIiwiY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbi8qXG5cdFRoaXMgZnVuY3Rpb24gcm91dGVzIGEgbW9kZWwgdG8gYWxsIG90aGVyIG1vZGVscy5cblxuXHRhbGwgZnVuY3Rpb25zIHRoYXQgYXJlIHJvdXRlZCBoYXZlIGEgcHJvcGVydHkgYC5jb252ZXJzaW9uYCBhdHRhY2hlZFxuXHR0byB0aGUgcmV0dXJuZWQgc3ludGhldGljIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGFuIGFycmF5XG5cdG9mIHN0cmluZ3MsIGVhY2ggd2l0aCB0aGUgc3RlcHMgaW4gYmV0d2VlbiB0aGUgJ2Zyb20nIGFuZCAndG8nXG5cdGNvbG9yIG1vZGVscyAoaW5jbHVzaXZlKS5cblxuXHRjb252ZXJzaW9ucyB0aGF0IGFyZSBub3QgcG9zc2libGUgc2ltcGx5IGFyZSBub3QgaW5jbHVkZWQuXG4qL1xuXG5mdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuXHRjb25zdCBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdGNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKGxldCBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0Y29uc3QgZ3JhcGggPSBidWlsZEdyYXBoKCk7XG5cdGNvbnN0IHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIFVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHRjb25zdCBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG5cblx0XHRmb3IgKGxldCBsZW4gPSBhZGphY2VudHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRjb25zdCBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdGNvbnN0IG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdGNvbnN0IHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcblx0bGV0IGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuXHRsZXQgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuXHR3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcblx0XHRwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuXHRcdGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuXHRcdGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuXHR9XG5cblx0Zm4uY29udmVyc2lvbiA9IHBhdGg7XG5cdHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdGNvbnN0IGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdGNvbnN0IGNvbnZlcnNpb24gPSB7fTtcblxuXHRjb25zdCBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRjb25zdCB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdGNvbnN0IG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuXHRcdGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gTm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuXHR9XG5cblx0cmV0dXJuIGNvbnZlcnNpb247XG59O1xuXG4iLCIndXNlIHN0cmljdCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcclxuXHRcImFudGlxdWV3aGl0ZVwiOiBbMjUwLCAyMzUsIDIxNV0sXHJcblx0XCJhcXVhXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcclxuXHRcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcclxuXHRcImJlaWdlXCI6IFsyNDUsIDI0NSwgMjIwXSxcclxuXHRcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXHJcblx0XCJibGFja1wiOiBbMCwgMCwgMF0sXHJcblx0XCJibGFuY2hlZGFsbW9uZFwiOiBbMjU1LCAyMzUsIDIwNV0sXHJcblx0XCJibHVlXCI6IFswLCAwLCAyNTVdLFxyXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcclxuXHRcImJyb3duXCI6IFsxNjUsIDQyLCA0Ml0sXHJcblx0XCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxyXG5cdFwiY2FkZXRibHVlXCI6IFs5NSwgMTU4LCAxNjBdLFxyXG5cdFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxyXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxyXG5cdFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXHJcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwLCAxNDksIDIzN10sXHJcblx0XCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXHJcblx0XCJjcmltc29uXCI6IFsyMjAsIDIwLCA2MF0sXHJcblx0XCJjeWFuXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcclxuXHRcImRhcmtjeWFuXCI6IFswLCAxMzksIDEzOV0sXHJcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQsIDEzNCwgMTFdLFxyXG5cdFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxyXG5cdFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcclxuXHRcImRhcmttYWdlbnRhXCI6IFsxMzksIDAsIDEzOV0sXHJcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUsIDEwNywgNDddLFxyXG5cdFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxyXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcclxuXHRcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXHJcblx0XCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcclxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXHJcblx0XCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXHJcblx0XCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3R1cnF1b2lzZVwiOiBbMCwgMjA2LCAyMDldLFxyXG5cdFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxyXG5cdFwiZGVlcHBpbmtcIjogWzI1NSwgMjAsIDE0N10sXHJcblx0XCJkZWVwc2t5Ymx1ZVwiOiBbMCwgMTkxLCAyNTVdLFxyXG5cdFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRvZGdlcmJsdWVcIjogWzMwLCAxNDQsIDI1NV0sXHJcblx0XCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcclxuXHRcImZsb3JhbHdoaXRlXCI6IFsyNTUsIDI1MCwgMjQwXSxcclxuXHRcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXHJcblx0XCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJnYWluc2Jvcm9cIjogWzIyMCwgMjIwLCAyMjBdLFxyXG5cdFwiZ2hvc3R3aGl0ZVwiOiBbMjQ4LCAyNDgsIDI1NV0sXHJcblx0XCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXHJcblx0XCJnb2xkZW5yb2RcIjogWzIxOCwgMTY1LCAzMl0sXHJcblx0XCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxyXG5cdFwiZ3JlZW55ZWxsb3dcIjogWzE3MywgMjU1LCA0N10sXHJcblx0XCJncmV5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcclxuXHRcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxyXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUsIDkyLCA5Ml0sXHJcblx0XCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxyXG5cdFwiaXZvcnlcIjogWzI1NSwgMjU1LCAyNDBdLFxyXG5cdFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxyXG5cdFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxyXG5cdFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXHJcblx0XCJsYXduZ3JlZW5cIjogWzEyNCwgMjUyLCAwXSxcclxuXHRcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXHJcblx0XCJsaWdodGJsdWVcIjogWzE3MywgMjE2LCAyMzBdLFxyXG5cdFwibGlnaHRjb3JhbFwiOiBbMjQwLCAxMjgsIDEyOF0sXHJcblx0XCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxyXG5cdFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxyXG5cdFwibGlnaHRncmF5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxyXG5cdFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXHJcblx0XCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXHJcblx0XCJsaWdodHNlYWdyZWVuXCI6IFszMiwgMTc4LCAxNzBdLFxyXG5cdFwibGlnaHRza3libHVlXCI6IFsxMzUsIDIwNiwgMjUwXSxcclxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c3RlZWxibHVlXCI6IFsxNzYsIDE5NiwgMjIyXSxcclxuXHRcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcclxuXHRcImxpbWVcIjogWzAsIDI1NSwgMF0sXHJcblx0XCJsaW1lZ3JlZW5cIjogWzUwLCAyMDUsIDUwXSxcclxuXHRcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcclxuXHRcIm1hZ2VudGFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcIm1hcm9vblwiOiBbMTI4LCAwLCAwXSxcclxuXHRcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxyXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1XSxcclxuXHRcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcclxuXHRcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXHJcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAsIDE3OSwgMTEzXSxcclxuXHRcIm1lZGl1bXNsYXRlYmx1ZVwiOiBbMTIzLCAxMDQsIDIzOF0sXHJcblx0XCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxyXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwgMjA5LCAyMDRdLFxyXG5cdFwibWVkaXVtdmlvbGV0cmVkXCI6IFsxOTksIDIxLCAxMzNdLFxyXG5cdFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXHJcblx0XCJtaW50Y3JlYW1cIjogWzI0NSwgMjU1LCAyNTBdLFxyXG5cdFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcclxuXHRcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcclxuXHRcIm5hdmFqb3doaXRlXCI6IFsyNTUsIDIyMiwgMTczXSxcclxuXHRcIm5hdnlcIjogWzAsIDAsIDEyOF0sXHJcblx0XCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcclxuXHRcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXHJcblx0XCJvbGl2ZWRyYWJcIjogWzEwNywgMTQyLCAzNV0sXHJcblx0XCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcclxuXHRcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXHJcblx0XCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxyXG5cdFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXHJcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxyXG5cdFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXHJcblx0XCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcclxuXHRcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxyXG5cdFwicGVhY2hwdWZmXCI6IFsyNTUsIDIxOCwgMTg1XSxcclxuXHRcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXHJcblx0XCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcclxuXHRcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxyXG5cdFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXHJcblx0XCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcclxuXHRcInJlYmVjY2FwdXJwbGVcIjogWzEwMiwgNTEsIDE1M10sXHJcblx0XCJyZWRcIjogWzI1NSwgMCwgMF0sXHJcblx0XCJyb3N5YnJvd25cIjogWzE4OCwgMTQzLCAxNDNdLFxyXG5cdFwicm95YWxibHVlXCI6IFs2NSwgMTA1LCAyMjVdLFxyXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcclxuXHRcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXHJcblx0XCJzYW5keWJyb3duXCI6IFsyNDQsIDE2NCwgOTZdLFxyXG5cdFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcclxuXHRcInNlYXNoZWxsXCI6IFsyNTUsIDI0NSwgMjM4XSxcclxuXHRcInNpZW5uYVwiOiBbMTYwLCA4MiwgNDVdLFxyXG5cdFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcclxuXHRcInNreWJsdWVcIjogWzEzNSwgMjA2LCAyMzVdLFxyXG5cdFwic2xhdGVibHVlXCI6IFsxMDYsIDkwLCAyMDVdLFxyXG5cdFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNsYXRlZ3JleVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbm93XCI6IFsyNTUsIDI1MCwgMjUwXSxcclxuXHRcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXHJcblx0XCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXHJcblx0XCJ0YW5cIjogWzIxMCwgMTgwLCAxNDBdLFxyXG5cdFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxyXG5cdFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXHJcblx0XCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcclxuXHRcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcclxuXHRcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXHJcblx0XCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXHJcblx0XCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXHJcblx0XCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcclxuXHRcInllbGxvd1wiOiBbMjU1LCAyNTUsIDBdLFxyXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cclxufTtcclxuIiwiLypnbG9iYWwgd2luZG93LCBnbG9iYWwqL1xudmFyIHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKVxudmFyIGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIilcbmZ1bmN0aW9uIG5vdygpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIH1cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlXG52YXIgY29uc29sZVxudmFyIHRpbWVzID0ge31cblxuaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGVcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZVxufSBlbHNlIHtcbiAgICBjb25zb2xlID0ge31cbn1cblxudmFyIGZ1bmN0aW9ucyA9IFtcbiAgICBbbG9nLCBcImxvZ1wiXSxcbiAgICBbaW5mbywgXCJpbmZvXCJdLFxuICAgIFt3YXJuLCBcIndhcm5cIl0sXG4gICAgW2Vycm9yLCBcImVycm9yXCJdLFxuICAgIFt0aW1lLCBcInRpbWVcIl0sXG4gICAgW3RpbWVFbmQsIFwidGltZUVuZFwiXSxcbiAgICBbdHJhY2UsIFwidHJhY2VcIl0sXG4gICAgW2RpciwgXCJkaXJcIl0sXG4gICAgW2NvbnNvbGVBc3NlcnQsIFwiYXNzZXJ0XCJdXG5dXG5cbmZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHR1cGxlID0gZnVuY3Rpb25zW2ldXG4gICAgdmFyIGYgPSB0dXBsZVswXVxuICAgIHZhciBuYW1lID0gdHVwbGVbMV1cblxuICAgIGlmICghY29uc29sZVtuYW1lXSkge1xuICAgICAgICBjb25zb2xlW25hbWVdID0gZlxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zb2xlXG5cbmZ1bmN0aW9uIGxvZygpIHt9XG5cbmZ1bmN0aW9uIGluZm8oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB3YXJuKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgIHRpbWVzW2xhYmVsXSA9IG5vdygpXG59XG5cbmZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICB2YXIgdGltZSA9IHRpbWVzW2xhYmVsXVxuICAgIGlmICghdGltZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsOiBcIiArIGxhYmVsKVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aW1lc1tsYWJlbF1cbiAgICB2YXIgZHVyYXRpb24gPSBub3coKSAtIHRpbWVcbiAgICBjb25zb2xlLmxvZyhsYWJlbCArIFwiOiBcIiArIGR1cmF0aW9uICsgXCJtc1wiKVxufVxuXG5mdW5jdGlvbiB0cmFjZSgpIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKClcbiAgICBlcnIubmFtZSA9IFwiVHJhY2VcIlxuICAgIGVyci5tZXNzYWdlID0gdXRpbC5mb3JtYXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKVxufVxuXG5mdW5jdGlvbiBkaXIob2JqZWN0KSB7XG4gICAgY29uc29sZS5sb2codXRpbC5pbnNwZWN0KG9iamVjdCkgKyBcIlxcblwiKVxufVxuXG5mdW5jdGlvbiBjb25zb2xlQXNzZXJ0KGV4cHJlc3Npb24pIHtcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIGFyciA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICAgICBhc3NlcnQub2soZmFsc2UsIHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFycikpXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgb3JpZ0RlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKSgpO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSwgcHJlZGljYXRlKSB7XG5cdGlmIChuYW1lIGluIG9iamVjdCAmJiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG9iamVjdFtuYW1lXSA9IHZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIvKipcbiAqIENvZGUgcmVmYWN0b3JlZCBmcm9tIE1vemlsbGEgRGV2ZWxvcGVyIE5ldHdvcms6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBmaXJzdFNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcbiAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIGlmICghT2JqZWN0LmFzc2lnbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGFzc2lnblxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NpZ246IGFzc2lnbixcbiAgcG9seWZpbGw6IHBvbHlmaWxsXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm9yRWFjaEFycmF5ID0gZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGkpKSB7XG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaFN0cmluZyA9IGZ1bmN0aW9uIGZvckVhY2hTdHJpbmcoc3RyaW5nLCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIG5vIHN1Y2ggdGhpbmcgYXMgYSBzcGFyc2Ugc3RyaW5nLlxuICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlcmF0b3Ioc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaE9iamVjdCA9IGZ1bmN0aW9uIGZvckVhY2hPYmplY3Qob2JqZWN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBrIGluIG9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGspKSB7XG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgb2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGxpc3QsIGl0ZXJhdG9yLCB0aGlzQXJnKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlKGl0ZXJhdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjZWl2ZXI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykge1xuICAgICAgICByZWNlaXZlciA9IHRoaXNBcmc7XG4gICAgfVxuXG4gICAgaWYgKHRvU3RyLmNhbGwobGlzdCkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgZm9yRWFjaEFycmF5KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZm9yRWFjaFN0cmluZyhsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvckVhY2hPYmplY3QobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRTeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIG5lZWRzRXZhbCA9IHt9O1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXRcbn07XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXMnKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuR3JhcGhRTEVycm9yID0gdm9pZCAwO1xuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZvcm1hdEVycm9yO1xuZXhwb3J0cy5wcmludEVycm9yID0gcHJpbnRFcnJvcjtcblxudmFyIF9pc09iamVjdExpa2UgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5qcycpO1xuXG52YXIgX2xvY2F0aW9uID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvbG9jYXRpb24uanMnKTtcblxudmFyIF9wcmludExvY2F0aW9uID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvcHJpbnRMb2NhdGlvbi5qcycpO1xuXG5mdW5jdGlvbiB0b05vcm1hbGl6ZWRPcHRpb25zKGFyZ3MpIHtcbiAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzBdO1xuXG4gIGlmIChmaXJzdEFyZyA9PSBudWxsIHx8ICdraW5kJyBpbiBmaXJzdEFyZyB8fCAnbGVuZ3RoJyBpbiBmaXJzdEFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlczogZmlyc3RBcmcsXG4gICAgICBzb3VyY2U6IGFyZ3NbMV0sXG4gICAgICBwb3NpdGlvbnM6IGFyZ3NbMl0sXG4gICAgICBwYXRoOiBhcmdzWzNdLFxuICAgICAgb3JpZ2luYWxFcnJvcjogYXJnc1s0XSxcbiAgICAgIGV4dGVuc2lvbnM6IGFyZ3NbNV0sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmaXJzdEFyZztcbn1cbi8qKlxuICogQSBHcmFwaFFMRXJyb3IgZGVzY3JpYmVzIGFuIEVycm9yIGZvdW5kIGR1cmluZyB0aGUgcGFyc2UsIHZhbGlkYXRlLCBvclxuICogZXhlY3V0ZSBwaGFzZXMgb2YgcGVyZm9ybWluZyBhIEdyYXBoUUwgb3BlcmF0aW9uLiBJbiBhZGRpdGlvbiB0byBhIG1lc3NhZ2VcbiAqIGFuZCBzdGFjayB0cmFjZSwgaXQgYWxzbyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9jYXRpb25zIGluIGFcbiAqIEdyYXBoUUwgZG9jdW1lbnQgYW5kL29yIGV4ZWN1dGlvbiByZXN1bHQgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBFcnJvci5cbiAqL1xuXG5jbGFzcyBHcmFwaFFMRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBgeyBsaW5lLCBjb2x1bW4gfWAgbG9jYXRpb25zIHdpdGhpbiB0aGUgc291cmNlIEdyYXBoUUwgZG9jdW1lbnRcbiAgICogd2hpY2ggY29ycmVzcG9uZCB0byB0aGlzIGVycm9yLlxuICAgKlxuICAgKiBFcnJvcnMgZHVyaW5nIHZhbGlkYXRpb24gb2Z0ZW4gY29udGFpbiBtdWx0aXBsZSBsb2NhdGlvbnMsIGZvciBleGFtcGxlIHRvXG4gICAqIHBvaW50IG91dCB0d28gdGhpbmdzIHdpdGggdGhlIHNhbWUgbmFtZS4gRXJyb3JzIGR1cmluZyBleGVjdXRpb24gaW5jbHVkZSBhXG4gICAqIHNpbmdsZSBsb2NhdGlvbiwgdGhlIGZpZWxkIHdoaWNoIHByb2R1Y2VkIHRoZSBlcnJvci5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgZGVzY3JpYmluZyB0aGUgSlNPTi1wYXRoIGludG8gdGhlIGV4ZWN1dGlvbiByZXNwb25zZSB3aGljaFxuICAgKiBjb3JyZXNwb25kcyB0byB0aGlzIGVycm9yLiBPbmx5IGluY2x1ZGVkIGZvciBlcnJvcnMgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgR3JhcGhRTCBBU1QgTm9kZXMgY29ycmVzcG9uZGluZyB0byB0aGlzIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50IGZvciB0aGUgZmlyc3QgbG9jYXRpb24gb2YgdGhpcyBlcnJvci5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHRoaXMgRXJyb3IgcmVwcmVzZW50cyBtb3JlIHRoYW4gb25lIG5vZGUsIHRoZSBzb3VyY2UgbWF5IG5vdFxuICAgKiByZXByZXNlbnQgbm9kZXMgYWZ0ZXIgdGhlIGZpcnN0IG5vZGUuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXIgb2Zmc2V0cyB3aXRoaW4gdGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50XG4gICAqIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhpcyBlcnJvci5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBvcmlnaW5hbCBlcnJvciB0aHJvd24gZnJvbSBhIGZpZWxkIHJlc29sdmVyIGR1cmluZyBleGVjdXRpb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFeHRlbnNpb24gZmllbGRzIHRvIGFkZCB0byB0aGUgZm9ybWF0dGVkIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB0aGUgYEdyYXBoUUxFcnJvck9wdGlvbnNgIGNvbnN0cnVjdG9yIG92ZXJsb2FkIGluc3RlYWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCAuLi5yYXdBcmdzKSB7XG4gICAgdmFyIF90aGlzJG5vZGVzLCBfbm9kZUxvY2F0aW9ucyQsIF9yZWY7XG5cbiAgICBjb25zdCB7IG5vZGVzLCBzb3VyY2UsIHBvc2l0aW9ucywgcGF0aCwgb3JpZ2luYWxFcnJvciwgZXh0ZW5zaW9ucyB9ID1cbiAgICAgIHRvTm9ybWFsaXplZE9wdGlvbnMocmF3QXJncyk7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0dyYXBoUUxFcnJvcic7XG4gICAgdGhpcy5wYXRoID0gcGF0aCAhPT0gbnVsbCAmJiBwYXRoICE9PSB2b2lkIDAgPyBwYXRoIDogdW5kZWZpbmVkO1xuICAgIHRoaXMub3JpZ2luYWxFcnJvciA9XG4gICAgICBvcmlnaW5hbEVycm9yICE9PSBudWxsICYmIG9yaWdpbmFsRXJyb3IgIT09IHZvaWQgMFxuICAgICAgICA/IG9yaWdpbmFsRXJyb3JcbiAgICAgICAgOiB1bmRlZmluZWQ7IC8vIENvbXB1dGUgbGlzdCBvZiBibGFtZSBub2Rlcy5cblxuICAgIHRoaXMubm9kZXMgPSB1bmRlZmluZWRJZkVtcHR5KFxuICAgICAgQXJyYXkuaXNBcnJheShub2RlcykgPyBub2RlcyA6IG5vZGVzID8gW25vZGVzXSA6IHVuZGVmaW5lZCxcbiAgICApO1xuICAgIGNvbnN0IG5vZGVMb2NhdGlvbnMgPSB1bmRlZmluZWRJZkVtcHR5KFxuICAgICAgKF90aGlzJG5vZGVzID0gdGhpcy5ub2RlcykgPT09IG51bGwgfHwgX3RoaXMkbm9kZXMgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IF90aGlzJG5vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS5sb2MpLmZpbHRlcigobG9jKSA9PiBsb2MgIT0gbnVsbCksXG4gICAgKTsgLy8gQ29tcHV0ZSBsb2NhdGlvbnMgaW4gdGhlIHNvdXJjZSBmb3IgdGhlIGdpdmVuIG5vZGVzL3Bvc2l0aW9ucy5cblxuICAgIHRoaXMuc291cmNlID1cbiAgICAgIHNvdXJjZSAhPT0gbnVsbCAmJiBzb3VyY2UgIT09IHZvaWQgMFxuICAgICAgICA/IHNvdXJjZVxuICAgICAgICA6IG5vZGVMb2NhdGlvbnMgPT09IG51bGwgfHwgbm9kZUxvY2F0aW9ucyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogKF9ub2RlTG9jYXRpb25zJCA9IG5vZGVMb2NhdGlvbnNbMF0pID09PSBudWxsIHx8XG4gICAgICAgICAgX25vZGVMb2NhdGlvbnMkID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBfbm9kZUxvY2F0aW9ucyQuc291cmNlO1xuICAgIHRoaXMucG9zaXRpb25zID1cbiAgICAgIHBvc2l0aW9ucyAhPT0gbnVsbCAmJiBwb3NpdGlvbnMgIT09IHZvaWQgMFxuICAgICAgICA/IHBvc2l0aW9uc1xuICAgICAgICA6IG5vZGVMb2NhdGlvbnMgPT09IG51bGwgfHwgbm9kZUxvY2F0aW9ucyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogbm9kZUxvY2F0aW9ucy5tYXAoKGxvYykgPT4gbG9jLnN0YXJ0KTtcbiAgICB0aGlzLmxvY2F0aW9ucyA9XG4gICAgICBwb3NpdGlvbnMgJiYgc291cmNlXG4gICAgICAgID8gcG9zaXRpb25zLm1hcCgocG9zKSA9PiAoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShzb3VyY2UsIHBvcykpXG4gICAgICAgIDogbm9kZUxvY2F0aW9ucyA9PT0gbnVsbCB8fCBub2RlTG9jYXRpb25zID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBub2RlTG9jYXRpb25zLm1hcCgobG9jKSA9PlxuICAgICAgICAgICAgKDAsIF9sb2NhdGlvbi5nZXRMb2NhdGlvbikobG9jLnNvdXJjZSwgbG9jLnN0YXJ0KSxcbiAgICAgICAgICApO1xuICAgIGNvbnN0IG9yaWdpbmFsRXh0ZW5zaW9ucyA9ICgwLCBfaXNPYmplY3RMaWtlLmlzT2JqZWN0TGlrZSkoXG4gICAgICBvcmlnaW5hbEVycm9yID09PSBudWxsIHx8IG9yaWdpbmFsRXJyb3IgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IG9yaWdpbmFsRXJyb3IuZXh0ZW5zaW9ucyxcbiAgICApXG4gICAgICA/IG9yaWdpbmFsRXJyb3IgPT09IG51bGwgfHwgb3JpZ2luYWxFcnJvciA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogb3JpZ2luYWxFcnJvci5leHRlbnNpb25zXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPVxuICAgICAgKF9yZWYgPVxuICAgICAgICBleHRlbnNpb25zICE9PSBudWxsICYmIGV4dGVuc2lvbnMgIT09IHZvaWQgMFxuICAgICAgICAgID8gZXh0ZW5zaW9uc1xuICAgICAgICAgIDogb3JpZ2luYWxFeHRlbnNpb25zKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDBcbiAgICAgICAgPyBfcmVmXG4gICAgICAgIDogT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gT25seSBwcm9wZXJ0aWVzIHByZXNjcmliZWQgYnkgdGhlIHNwZWMgc2hvdWxkIGJlIGVudW1lcmFibGUuXG4gICAgLy8gS2VlcCB0aGUgcmVzdCBhcyBub24tZW51bWVyYWJsZS5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBub2Rlczoge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB9LFxuICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pOyAvLyBJbmNsdWRlIChub24tZW51bWVyYWJsZSkgc3RhY2sgdHJhY2UuXG5cbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxN1xuXG4gICAgaWYgKFxuICAgICAgb3JpZ2luYWxFcnJvciAhPT0gbnVsbCAmJlxuICAgICAgb3JpZ2luYWxFcnJvciAhPT0gdm9pZCAwICYmXG4gICAgICBvcmlnaW5hbEVycm9yLnN0YWNrXG4gICAgKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxFcnJvci5zdGFjayxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEdyYXBoUUxFcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCB7XG4gICAgICAgIHZhbHVlOiBFcnJvcigpLnN0YWNrLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdHcmFwaFFMRXJyb3InO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG91dHB1dCA9IHRoaXMubWVzc2FnZTtcblxuICAgIGlmICh0aGlzLm5vZGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5ub2Rlcykge1xuICAgICAgICBpZiAobm9kZS5sb2MpIHtcbiAgICAgICAgICBvdXRwdXQgKz0gJ1xcblxcbicgKyAoMCwgX3ByaW50TG9jYXRpb24ucHJpbnRMb2NhdGlvbikobm9kZS5sb2MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnNvdXJjZSAmJiB0aGlzLmxvY2F0aW9ucykge1xuICAgICAgZm9yIChjb25zdCBsb2NhdGlvbiBvZiB0aGlzLmxvY2F0aW9ucykge1xuICAgICAgICBvdXRwdXQgKz1cbiAgICAgICAgICAnXFxuXFxuJyArXG4gICAgICAgICAgKDAsIF9wcmludExvY2F0aW9uLnByaW50U291cmNlTG9jYXRpb24pKHRoaXMuc291cmNlLCBsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IHtcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMubG9jYXRpb25zICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHRlZEVycm9yLmxvY2F0aW9ucyA9IHRoaXMubG9jYXRpb25zO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhdGggIT0gbnVsbCkge1xuICAgICAgZm9ybWF0dGVkRXJyb3IucGF0aCA9IHRoaXMucGF0aDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5leHRlbnNpb25zICE9IG51bGwgJiYgT2JqZWN0LmtleXModGhpcy5leHRlbnNpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICBmb3JtYXR0ZWRFcnJvci5leHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0ZWRFcnJvcjtcbiAgfVxufVxuXG5leHBvcnRzLkdyYXBoUUxFcnJvciA9IEdyYXBoUUxFcnJvcjtcblxuZnVuY3Rpb24gdW5kZWZpbmVkSWZFbXB0eShhcnJheSkge1xuICByZXR1cm4gYXJyYXkgPT09IHVuZGVmaW5lZCB8fCBhcnJheS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBhcnJheTtcbn1cbi8qKlxuICogU2VlOiBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1FcnJvcnNcbiAqL1xuXG4vKipcbiAqIFByaW50cyBhIEdyYXBoUUxFcnJvciB0byBhIHN0cmluZywgcmVwcmVzZW50aW5nIHVzZWZ1bCBsb2NhdGlvbiBpbmZvcm1hdGlvblxuICogYWJvdXQgdGhlIGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBlcnJvci50b1N0cmluZ2AgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHYxN1xuICovXG5mdW5jdGlvbiBwcmludEVycm9yKGVycm9yKSB7XG4gIHJldHVybiBlcnJvci50b1N0cmluZygpO1xufVxuLyoqXG4gKiBHaXZlbiBhIEdyYXBoUUxFcnJvciwgZm9ybWF0IGl0IGFjY29yZGluZyB0byB0aGUgcnVsZXMgZGVzY3JpYmVkIGJ5IHRoZVxuICogUmVzcG9uc2UgRm9ybWF0LCBFcnJvcnMgc2VjdGlvbiBvZiB0aGUgR3JhcGhRTCBTcGVjaWZpY2F0aW9uLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYGVycm9yLnRvSlNPTmAgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHYxN1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKGVycm9yKSB7XG4gIHJldHVybiBlcnJvci50b0pTT04oKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5jb2xsZWN0RmllbGRzID0gY29sbGVjdEZpZWxkcztcbmV4cG9ydHMuY29sbGVjdFN1YmZpZWxkcyA9IGNvbGxlY3RTdWJmaWVsZHM7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxudmFyIF9kaXJlY3RpdmVzID0gcmVxdWlyZSgnLi4vdHlwZS9kaXJlY3RpdmVzLmpzJyk7XG5cbnZhciBfdHlwZUZyb21BU1QgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdHlwZUZyb21BU1QuanMnKTtcblxudmFyIF92YWx1ZXMgPSByZXF1aXJlKCcuL3ZhbHVlcy5qcycpO1xuXG4vKipcbiAqIEdpdmVuIGEgc2VsZWN0aW9uU2V0LCBjb2xsZWN0cyBhbGwgb2YgdGhlIGZpZWxkcyBhbmQgcmV0dXJucyB0aGVtLlxuICpcbiAqIENvbGxlY3RGaWVsZHMgcmVxdWlyZXMgdGhlIFwicnVudGltZSB0eXBlXCIgb2YgYW4gb2JqZWN0LiBGb3IgYSBmaWVsZCB0aGF0XG4gKiByZXR1cm5zIGFuIEludGVyZmFjZSBvciBVbmlvbiB0eXBlLCB0aGUgXCJydW50aW1lIHR5cGVcIiB3aWxsIGJlIHRoZSBhY3R1YWxcbiAqIG9iamVjdCB0eXBlIHJldHVybmVkIGJ5IHRoYXQgZmllbGQuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNvbGxlY3RGaWVsZHMoXG4gIHNjaGVtYSxcbiAgZnJhZ21lbnRzLFxuICB2YXJpYWJsZVZhbHVlcyxcbiAgcnVudGltZVR5cGUsXG4gIHNlbGVjdGlvblNldCxcbikge1xuICBjb25zdCBmaWVsZHMgPSBuZXcgTWFwKCk7XG4gIGNvbGxlY3RGaWVsZHNJbXBsKFxuICAgIHNjaGVtYSxcbiAgICBmcmFnbWVudHMsXG4gICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgcnVudGltZVR5cGUsXG4gICAgc2VsZWN0aW9uU2V0LFxuICAgIGZpZWxkcyxcbiAgICBuZXcgU2V0KCksXG4gICk7XG4gIHJldHVybiBmaWVsZHM7XG59XG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIGZpZWxkIG5vZGVzLCBjb2xsZWN0cyBhbGwgb2YgdGhlIHN1YmZpZWxkcyBvZiB0aGUgcGFzc2VkXG4gKiBpbiBmaWVsZHMsIGFuZCByZXR1cm5zIHRoZW0gYXQgdGhlIGVuZC5cbiAqXG4gKiBDb2xsZWN0U3ViRmllbGRzIHJlcXVpcmVzIHRoZSBcInJldHVybiB0eXBlXCIgb2YgYW4gb2JqZWN0LiBGb3IgYSBmaWVsZCB0aGF0XG4gKiByZXR1cm5zIGFuIEludGVyZmFjZSBvciBVbmlvbiB0eXBlLCB0aGUgXCJyZXR1cm4gdHlwZVwiIHdpbGwgYmUgdGhlIGFjdHVhbFxuICogb2JqZWN0IHR5cGUgcmV0dXJuZWQgYnkgdGhhdCBmaWVsZC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBjb2xsZWN0U3ViZmllbGRzKFxuICBzY2hlbWEsXG4gIGZyYWdtZW50cyxcbiAgdmFyaWFibGVWYWx1ZXMsXG4gIHJldHVyblR5cGUsXG4gIGZpZWxkTm9kZXMsXG4pIHtcbiAgY29uc3Qgc3ViRmllbGROb2RlcyA9IG5ldyBNYXAoKTtcbiAgY29uc3QgdmlzaXRlZEZyYWdtZW50TmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCBub2RlIG9mIGZpZWxkTm9kZXMpIHtcbiAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQpIHtcbiAgICAgIGNvbGxlY3RGaWVsZHNJbXBsKFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIGZyYWdtZW50cyxcbiAgICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgIHJldHVyblR5cGUsXG4gICAgICAgIG5vZGUuc2VsZWN0aW9uU2V0LFxuICAgICAgICBzdWJGaWVsZE5vZGVzLFxuICAgICAgICB2aXNpdGVkRnJhZ21lbnROYW1lcyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YkZpZWxkTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RGaWVsZHNJbXBsKFxuICBzY2hlbWEsXG4gIGZyYWdtZW50cyxcbiAgdmFyaWFibGVWYWx1ZXMsXG4gIHJ1bnRpbWVUeXBlLFxuICBzZWxlY3Rpb25TZXQsXG4gIGZpZWxkcyxcbiAgdmlzaXRlZEZyYWdtZW50TmFtZXMsXG4pIHtcbiAgZm9yIChjb25zdCBzZWxlY3Rpb24gb2Ygc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMpIHtcbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkZJRUxEOiB7XG4gICAgICAgIGlmICghc2hvdWxkSW5jbHVkZU5vZGUodmFyaWFibGVWYWx1ZXMsIHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZXRGaWVsZEVudHJ5S2V5KHNlbGVjdGlvbik7XG4gICAgICAgIGNvbnN0IGZpZWxkTGlzdCA9IGZpZWxkcy5nZXQobmFtZSk7XG5cbiAgICAgICAgaWYgKGZpZWxkTGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZmllbGRMaXN0LnB1c2goc2VsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaWVsZHMuc2V0KG5hbWUsIFtzZWxlY3Rpb25dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLklOTElORV9GUkFHTUVOVDoge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXNob3VsZEluY2x1ZGVOb2RlKHZhcmlhYmxlVmFsdWVzLCBzZWxlY3Rpb24pIHx8XG4gICAgICAgICAgIWRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoKHNjaGVtYSwgc2VsZWN0aW9uLCBydW50aW1lVHlwZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0RmllbGRzSW1wbChcbiAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgZnJhZ21lbnRzLFxuICAgICAgICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgICAgICAgIHJ1bnRpbWVUeXBlLFxuICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQsXG4gICAgICAgICAgZmllbGRzLFxuICAgICAgICAgIHZpc2l0ZWRGcmFnbWVudE5hbWVzLFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBfa2luZHMuS2luZC5GUkFHTUVOVF9TUFJFQUQ6IHtcbiAgICAgICAgY29uc3QgZnJhZ05hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdmlzaXRlZEZyYWdtZW50TmFtZXMuaGFzKGZyYWdOYW1lKSB8fFxuICAgICAgICAgICFzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgc2VsZWN0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZpc2l0ZWRGcmFnbWVudE5hbWVzLmFkZChmcmFnTmFtZSk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzW2ZyYWdOYW1lXTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWZyYWdtZW50IHx8XG4gICAgICAgICAgIWRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoKHNjaGVtYSwgZnJhZ21lbnQsIHJ1bnRpbWVUeXBlKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3RGaWVsZHNJbXBsKFxuICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICBmcmFnbWVudHMsXG4gICAgICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgICAgcnVudGltZVR5cGUsXG4gICAgICAgICAgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICB2aXNpdGVkRnJhZ21lbnROYW1lcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBmaWVsZCBzaG91bGQgYmUgaW5jbHVkZWQgYmFzZWQgb24gdGhlIGBAaW5jbHVkZWAgYW5kIGBAc2tpcGBcbiAqIGRpcmVjdGl2ZXMsIHdoZXJlIGBAc2tpcGAgaGFzIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gYEBpbmNsdWRlYC5cbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgbm9kZSkge1xuICBjb25zdCBza2lwID0gKDAsIF92YWx1ZXMuZ2V0RGlyZWN0aXZlVmFsdWVzKShcbiAgICBfZGlyZWN0aXZlcy5HcmFwaFFMU2tpcERpcmVjdGl2ZSxcbiAgICBub2RlLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICApO1xuXG4gIGlmICgoc2tpcCA9PT0gbnVsbCB8fCBza2lwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBza2lwLmlmKSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGluY2x1ZGUgPSAoMCwgX3ZhbHVlcy5nZXREaXJlY3RpdmVWYWx1ZXMpKFxuICAgIF9kaXJlY3RpdmVzLkdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlLFxuICAgIG5vZGUsXG4gICAgdmFyaWFibGVWYWx1ZXMsXG4gICk7XG5cbiAgaWYgKFxuICAgIChpbmNsdWRlID09PSBudWxsIHx8IGluY2x1ZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluY2x1ZGUuaWYpID09PSBmYWxzZVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGZyYWdtZW50IGlzIGFwcGxpY2FibGUgdG8gdGhlIGdpdmVuIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gZG9lc0ZyYWdtZW50Q29uZGl0aW9uTWF0Y2goc2NoZW1hLCBmcmFnbWVudCwgdHlwZSkge1xuICBjb25zdCB0eXBlQ29uZGl0aW9uTm9kZSA9IGZyYWdtZW50LnR5cGVDb25kaXRpb247XG5cbiAgaWYgKCF0eXBlQ29uZGl0aW9uTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgY29uZGl0aW9uYWxUeXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgc2NoZW1hLFxuICAgIHR5cGVDb25kaXRpb25Ob2RlLFxuICApO1xuXG4gIGlmIChjb25kaXRpb25hbFR5cGUgPT09IHR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNBYnN0cmFjdFR5cGUpKGNvbmRpdGlvbmFsVHlwZSkpIHtcbiAgICByZXR1cm4gc2NoZW1hLmlzU3ViVHlwZShjb25kaXRpb25hbFR5cGUsIHR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBsb2dpYyB0byBjb21wdXRlIHRoZSBrZXkgb2YgYSBnaXZlbiBmaWVsZCdzIGVudHJ5XG4gKi9cblxuZnVuY3Rpb24gZ2V0RmllbGRFbnRyeUtleShub2RlKSB7XG4gIHJldHVybiBub2RlLmFsaWFzID8gbm9kZS5hbGlhcy52YWx1ZSA6IG5vZGUubmFtZS52YWx1ZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5nZXRBcmd1bWVudFZhbHVlcyA9IGdldEFyZ3VtZW50VmFsdWVzO1xuZXhwb3J0cy5nZXREaXJlY3RpdmVWYWx1ZXMgPSBnZXREaXJlY3RpdmVWYWx1ZXM7XG5leHBvcnRzLmdldFZhcmlhYmxlVmFsdWVzID0gZ2V0VmFyaWFibGVWYWx1ZXM7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX2tleU1hcCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMva2V5TWFwLmpzJyk7XG5cbnZhciBfcHJpbnRQYXRoQXJyYXkgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3ByaW50UGF0aEFycmF5LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3ByaW50ZXIgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9wcmludGVyLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX2NvZXJjZUlucHV0VmFsdWUgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvY29lcmNlSW5wdXRWYWx1ZS5qcycpO1xuXG52YXIgX3R5cGVGcm9tQVNUID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULmpzJyk7XG5cbnZhciBfdmFsdWVGcm9tQVNUID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIFByZXBhcmVzIGFuIG9iamVjdCBtYXAgb2YgdmFyaWFibGVWYWx1ZXMgb2YgdGhlIGNvcnJlY3QgdHlwZSBiYXNlZCBvbiB0aGVcbiAqIHByb3ZpZGVkIHZhcmlhYmxlIGRlZmluaXRpb25zIGFuZCBhcmJpdHJhcnkgaW5wdXQuIElmIHRoZSBpbnB1dCBjYW5ub3QgYmVcbiAqIHBhcnNlZCB0byBtYXRjaCB0aGUgdmFyaWFibGUgZGVmaW5pdGlvbnMsIGEgR3JhcGhRTEVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIE5vdGU6IFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCB3aXRoIGEgcHJvdG90eXBlLCBzaW5jZSBpdCBpc1xuICogZXhwb3NlZCB0byB1c2VyIGNvZGUuIENhcmUgc2hvdWxkIGJlIHRha2VuIHRvIG5vdCBwdWxsIHZhbHVlcyBmcm9tIHRoZVxuICogT2JqZWN0IHByb3RvdHlwZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZXMoc2NoZW1hLCB2YXJEZWZOb2RlcywgaW5wdXRzLCBvcHRpb25zKSB7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBjb25zdCBtYXhFcnJvcnMgPVxuICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhFcnJvcnM7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb2VyY2VkID0gY29lcmNlVmFyaWFibGVWYWx1ZXMoXG4gICAgICBzY2hlbWEsXG4gICAgICB2YXJEZWZOb2RlcyxcbiAgICAgIGlucHV0cyxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAobWF4RXJyb3JzICE9IG51bGwgJiYgZXJyb3JzLmxlbmd0aCA+PSBtYXhFcnJvcnMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAnVG9vIG1hbnkgZXJyb3JzIHByb2Nlc3NpbmcgdmFyaWFibGVzLCBlcnJvciBsaW1pdCByZWFjaGVkLiBFeGVjdXRpb24gYWJvcnRlZC4nLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29lcmNlZCxcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb2VyY2VWYXJpYWJsZVZhbHVlcyhzY2hlbWEsIHZhckRlZk5vZGVzLCBpbnB1dHMsIG9uRXJyb3IpIHtcbiAgY29uc3QgY29lcmNlZFZhbHVlcyA9IHt9O1xuXG4gIGZvciAoY29uc3QgdmFyRGVmTm9kZSBvZiB2YXJEZWZOb2Rlcykge1xuICAgIGNvbnN0IHZhck5hbWUgPSB2YXJEZWZOb2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgY29uc3QgdmFyVHlwZSA9ICgwLCBfdHlwZUZyb21BU1QudHlwZUZyb21BU1QpKHNjaGVtYSwgdmFyRGVmTm9kZS50eXBlKTtcblxuICAgIGlmICghKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRUeXBlKSh2YXJUeXBlKSkge1xuICAgICAgLy8gTXVzdCB1c2UgaW5wdXQgdHlwZXMgZm9yIHZhcmlhYmxlcy4gVGhpcyBzaG91bGQgYmUgY2F1Z2h0IGR1cmluZ1xuICAgICAgLy8gdmFsaWRhdGlvbiwgaG93ZXZlciBpcyBjaGVja2VkIGFnYWluIGhlcmUgZm9yIHNhZmV0eS5cbiAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKHZhckRlZk5vZGUudHlwZSk7XG4gICAgICBvbkVycm9yKFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBleHBlY3RlZCB2YWx1ZSBvZiB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHdoaWNoIGNhbm5vdCBiZSB1c2VkIGFzIGFuIGlucHV0IHR5cGUuYCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBub2RlczogdmFyRGVmTm9kZS50eXBlLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShpbnB1dHMsIHZhck5hbWUpKSB7XG4gICAgICBpZiAodmFyRGVmTm9kZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29lcmNlZFZhbHVlc1t2YXJOYW1lXSA9ICgwLCBfdmFsdWVGcm9tQVNULnZhbHVlRnJvbUFTVCkoXG4gICAgICAgICAgdmFyRGVmTm9kZS5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgdmFyVHlwZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKHZhclR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodmFyVHlwZSk7XG4gICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBvZiByZXF1aXJlZCB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHdhcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IHZhckRlZk5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gaW5wdXRzW3Zhck5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsICYmICgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh2YXJUeXBlKSkge1xuICAgICAgY29uc3QgdmFyVHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh2YXJUeXBlKTtcbiAgICAgIG9uRXJyb3IoXG4gICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICBgVmFyaWFibGUgXCIkJHt2YXJOYW1lfVwiIG9mIG5vbi1udWxsIHR5cGUgXCIke3ZhclR5cGVTdHJ9XCIgbXVzdCBub3QgYmUgbnVsbC5gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiB2YXJEZWZOb2RlLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29lcmNlZFZhbHVlc1t2YXJOYW1lXSA9ICgwLCBfY29lcmNlSW5wdXRWYWx1ZS5jb2VyY2VJbnB1dFZhbHVlKShcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyVHlwZSxcbiAgICAgIChwYXRoLCBpbnZhbGlkVmFsdWUsIGVycm9yKSA9PiB7XG4gICAgICAgIGxldCBwcmVmaXggPVxuICAgICAgICAgIGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgZ290IGludmFsaWQgdmFsdWUgYCArXG4gICAgICAgICAgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGludmFsaWRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHByZWZpeCArPSBgIGF0IFwiJHt2YXJOYW1lfSR7KDAsIF9wcmludFBhdGhBcnJheS5wcmludFBhdGhBcnJheSkoXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICl9XCJgO1xuICAgICAgICB9XG5cbiAgICAgICAgb25FcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IocHJlZml4ICsgJzsgJyArIGVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgIG5vZGVzOiB2YXJEZWZOb2RlLFxuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3Iub3JpZ2luYWxFcnJvcixcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjb2VyY2VkVmFsdWVzO1xufVxuLyoqXG4gKiBQcmVwYXJlcyBhbiBvYmplY3QgbWFwIG9mIGFyZ3VtZW50IHZhbHVlcyBnaXZlbiBhIGxpc3Qgb2YgYXJndW1lbnRcbiAqIGRlZmluaXRpb25zIGFuZCBsaXN0IG9mIGFyZ3VtZW50IEFTVCBub2Rlcy5cbiAqXG4gKiBOb3RlOiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3Qgd2l0aCBhIHByb3RvdHlwZSwgc2luY2UgaXQgaXNcbiAqIGV4cG9zZWQgdG8gdXNlciBjb2RlLiBDYXJlIHNob3VsZCBiZSB0YWtlbiB0byBub3QgcHVsbCB2YWx1ZXMgZnJvbSB0aGVcbiAqIE9iamVjdCBwcm90b3R5cGUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0QXJndW1lbnRWYWx1ZXMoZGVmLCBub2RlLCB2YXJpYWJsZVZhbHVlcykge1xuICB2YXIgX25vZGUkYXJndW1lbnRzO1xuXG4gIGNvbnN0IGNvZXJjZWRWYWx1ZXMgPSB7fTsgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gIGNvbnN0IGFyZ3VtZW50Tm9kZXMgPVxuICAgIChfbm9kZSRhcmd1bWVudHMgPSBub2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX25vZGUkYXJndW1lbnRzICE9PSB2b2lkIDBcbiAgICAgID8gX25vZGUkYXJndW1lbnRzXG4gICAgICA6IFtdO1xuICBjb25zdCBhcmdOb2RlTWFwID0gKDAsIF9rZXlNYXAua2V5TWFwKShcbiAgICBhcmd1bWVudE5vZGVzLFxuICAgIChhcmcpID0+IGFyZy5uYW1lLnZhbHVlLFxuICApO1xuXG4gIGZvciAoY29uc3QgYXJnRGVmIG9mIGRlZi5hcmdzKSB7XG4gICAgY29uc3QgbmFtZSA9IGFyZ0RlZi5uYW1lO1xuICAgIGNvbnN0IGFyZ1R5cGUgPSBhcmdEZWYudHlwZTtcbiAgICBjb25zdCBhcmd1bWVudE5vZGUgPSBhcmdOb2RlTWFwW25hbWVdO1xuXG4gICAgaWYgKCFhcmd1bWVudE5vZGUpIHtcbiAgICAgIGlmIChhcmdEZWYuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29lcmNlZFZhbHVlc1tuYW1lXSA9IGFyZ0RlZi5kZWZhdWx0VmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShhcmdUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYEFyZ3VtZW50IFwiJHtuYW1lfVwiIG9mIHJlcXVpcmVkIHR5cGUgXCIkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICAgIGFyZ1R5cGUsXG4gICAgICAgICAgKX1cIiBgICsgJ3dhcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBhcmd1bWVudE5vZGUudmFsdWU7XG4gICAgbGV0IGlzTnVsbCA9IHZhbHVlTm9kZS5raW5kID09PSBfa2luZHMuS2luZC5OVUxMO1xuXG4gICAgaWYgKHZhbHVlTm9kZS5raW5kID09PSBfa2luZHMuS2luZC5WQVJJQUJMRSkge1xuICAgICAgY29uc3QgdmFyaWFibGVOYW1lID0gdmFsdWVOb2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdmFyaWFibGVWYWx1ZXMgPT0gbnVsbCB8fFxuICAgICAgICAhaGFzT3duUHJvcGVydHkodmFyaWFibGVWYWx1ZXMsIHZhcmlhYmxlTmFtZSlcbiAgICAgICkge1xuICAgICAgICBpZiAoYXJnRGVmLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZFZhbHVlc1tuYW1lXSA9IGFyZ0RlZi5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKGFyZ1R5cGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEFyZ3VtZW50IFwiJHtuYW1lfVwiIG9mIHJlcXVpcmVkIHR5cGUgXCIkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICAgICAgYXJnVHlwZSxcbiAgICAgICAgICAgICl9XCIgYCArXG4gICAgICAgICAgICAgIGB3YXMgcHJvdmlkZWQgdGhlIHZhcmlhYmxlIFwiJCR7dmFyaWFibGVOYW1lfVwiIHdoaWNoIHdhcyBub3QgcHJvdmlkZWQgYSBydW50aW1lIHZhbHVlLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaXNOdWxsID0gdmFyaWFibGVWYWx1ZXNbdmFyaWFibGVOYW1lXSA9PSBudWxsO1xuICAgIH1cblxuICAgIGlmIChpc051bGwgJiYgKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKGFyZ1R5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgIGBBcmd1bWVudCBcIiR7bmFtZX1cIiBvZiBub24tbnVsbCB0eXBlIFwiJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgYXJnVHlwZSxcbiAgICAgICAgKX1cIiBgICsgJ211c3Qgbm90IGJlIG51bGwuJyxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9ICgwLCBfdmFsdWVGcm9tQVNULnZhbHVlRnJvbUFTVCkoXG4gICAgICB2YWx1ZU5vZGUsXG4gICAgICBhcmdUeXBlLFxuICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgKTtcblxuICAgIGlmIChjb2VyY2VkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm90ZTogVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUgdmFsaWRhdGlvbiBzaG91bGQgY2F0Y2ggdGhpcyBiZWZvcmVcbiAgICAgIC8vIGV4ZWN1dGlvbi4gVGhpcyBpcyBhIHJ1bnRpbWUgY2hlY2sgdG8gZW5zdXJlIGV4ZWN1dGlvbiBkb2VzIG5vdFxuICAgICAgLy8gY29udGludWUgd2l0aCBhbiBpbnZhbGlkIGFyZ3VtZW50IHZhbHVlLlxuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgQXJndW1lbnQgXCIke25hbWV9XCIgaGFzIGludmFsaWQgdmFsdWUgJHsoMCwgX3ByaW50ZXIucHJpbnQpKFxuICAgICAgICAgIHZhbHVlTm9kZSxcbiAgICAgICAgKX0uYCxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvZXJjZWRWYWx1ZXNbbmFtZV0gPSBjb2VyY2VkVmFsdWU7XG4gIH1cblxuICByZXR1cm4gY29lcmNlZFZhbHVlcztcbn1cbi8qKlxuICogUHJlcGFyZXMgYW4gb2JqZWN0IG1hcCBvZiBhcmd1bWVudCB2YWx1ZXMgZ2l2ZW4gYSBkaXJlY3RpdmUgZGVmaW5pdGlvblxuICogYW5kIGEgQVNUIG5vZGUgd2hpY2ggbWF5IGNvbnRhaW4gZGlyZWN0aXZlcy4gT3B0aW9uYWxseSBhbHNvIGFjY2VwdHMgYSBtYXBcbiAqIG9mIHZhcmlhYmxlIHZhbHVlcy5cbiAqXG4gKiBJZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGV4aXN0IG9uIHRoZSBub2RlLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqXG4gKiBOb3RlOiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3Qgd2l0aCBhIHByb3RvdHlwZSwgc2luY2UgaXQgaXNcbiAqIGV4cG9zZWQgdG8gdXNlciBjb2RlLiBDYXJlIHNob3VsZCBiZSB0YWtlbiB0byBub3QgcHVsbCB2YWx1ZXMgZnJvbSB0aGVcbiAqIE9iamVjdCBwcm90b3R5cGUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlVmFsdWVzKGRpcmVjdGl2ZURlZiwgbm9kZSwgdmFyaWFibGVWYWx1ZXMpIHtcbiAgdmFyIF9ub2RlJGRpcmVjdGl2ZXM7XG5cbiAgY29uc3QgZGlyZWN0aXZlTm9kZSA9XG4gICAgKF9ub2RlJGRpcmVjdGl2ZXMgPSBub2RlLmRpcmVjdGl2ZXMpID09PSBudWxsIHx8IF9ub2RlJGRpcmVjdGl2ZXMgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogX25vZGUkZGlyZWN0aXZlcy5maW5kKFxuICAgICAgICAgIChkaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBkaXJlY3RpdmVEZWYubmFtZSxcbiAgICAgICAgKTtcblxuICBpZiAoZGlyZWN0aXZlTm9kZSkge1xuICAgIHJldHVybiBnZXRBcmd1bWVudFZhbHVlcyhkaXJlY3RpdmVEZWYsIGRpcmVjdGl2ZU5vZGUsIHZhcmlhYmxlVmFsdWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmFkZFBhdGggPSBhZGRQYXRoO1xuZXhwb3J0cy5wYXRoVG9BcnJheSA9IHBhdGhUb0FycmF5O1xuXG4vKipcbiAqIEdpdmVuIGEgUGF0aCBhbmQgYSBrZXksIHJldHVybiBhIG5ldyBQYXRoIGNvbnRhaW5pbmcgdGhlIG5ldyBrZXkuXG4gKi9cbmZ1bmN0aW9uIGFkZFBhdGgocHJldiwga2V5LCB0eXBlbmFtZSkge1xuICByZXR1cm4ge1xuICAgIHByZXYsXG4gICAga2V5LFxuICAgIHR5cGVuYW1lLFxuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBhIFBhdGgsIHJldHVybiBhbiBBcnJheSBvZiB0aGUgcGF0aCBrZXlzLlxuICovXG5cbmZ1bmN0aW9uIHBhdGhUb0FycmF5KHBhdGgpIHtcbiAgY29uc3QgZmxhdHRlbmVkID0gW107XG4gIGxldCBjdXJyID0gcGF0aDtcblxuICB3aGlsZSAoY3Vycikge1xuICAgIGZsYXR0ZW5lZC5wdXNoKGN1cnIua2V5KTtcbiAgICBjdXJyID0gY3Vyci5wcmV2O1xuICB9XG5cbiAgcmV0dXJuIGZsYXR0ZW5lZC5yZXZlcnNlKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuZGV2QXNzZXJ0ID0gZGV2QXNzZXJ0O1xuXG5mdW5jdGlvbiBkZXZBc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGNvbnN0IGJvb2xlYW5Db25kaXRpb24gPSBCb29sZWFuKGNvbmRpdGlvbik7XG5cbiAgaWYgKCFib29sZWFuQ29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuZGlkWW91TWVhbiA9IGRpZFlvdU1lYW47XG5jb25zdCBNQVhfU1VHR0VTVElPTlMgPSA1O1xuLyoqXG4gKiBHaXZlbiBbIEEsIEIsIEMgXSByZXR1cm4gJyBEaWQgeW91IG1lYW4gQSwgQiwgb3IgQz8nLlxuICovXG5cbmZ1bmN0aW9uIGRpZFlvdU1lYW4oZmlyc3RBcmcsIHNlY29uZEFyZykge1xuICBjb25zdCBbc3ViTWVzc2FnZSwgc3VnZ2VzdGlvbnNBcmddID0gc2Vjb25kQXJnXG4gICAgPyBbZmlyc3RBcmcsIHNlY29uZEFyZ11cbiAgICA6IFt1bmRlZmluZWQsIGZpcnN0QXJnXTtcbiAgbGV0IG1lc3NhZ2UgPSAnIERpZCB5b3UgbWVhbiAnO1xuXG4gIGlmIChzdWJNZXNzYWdlKSB7XG4gICAgbWVzc2FnZSArPSBzdWJNZXNzYWdlICsgJyAnO1xuICB9XG5cbiAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uc0FyZy5tYXAoKHgpID0+IGBcIiR7eH1cImApO1xuXG4gIHN3aXRjaCAoc3VnZ2VzdGlvbnMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICcnO1xuXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBzdWdnZXN0aW9uc1swXSArICc/JztcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBtZXNzYWdlICsgc3VnZ2VzdGlvbnNbMF0gKyAnIG9yICcgKyBzdWdnZXN0aW9uc1sxXSArICc/JztcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdGVkID0gc3VnZ2VzdGlvbnMuc2xpY2UoMCwgTUFYX1NVR0dFU1RJT05TKTtcbiAgY29uc3QgbGFzdEl0ZW0gPSBzZWxlY3RlZC5wb3AoKTtcbiAgcmV0dXJuIG1lc3NhZ2UgKyBzZWxlY3RlZC5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3RJdGVtICsgJz8nO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmdyb3VwQnkgPSBncm91cEJ5O1xuXG4vKipcbiAqIEdyb3VwcyBhcnJheSBpdGVtcyBpbnRvIGEgTWFwLCBnaXZlbiBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgZ3JvdXBpbmcga2V5LlxuICovXG5mdW5jdGlvbiBncm91cEJ5KGxpc3QsIGtleUZuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgIGNvbnN0IGtleSA9IGtleUZuKGl0ZW0pO1xuICAgIGNvbnN0IGdyb3VwID0gcmVzdWx0LmdldChrZXkpO1xuXG4gICAgaWYgKGdyb3VwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCBbaXRlbV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuaWRlbnRpdHlGdW5jID0gaWRlbnRpdHlGdW5jO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICovXG5mdW5jdGlvbiBpZGVudGl0eUZ1bmMoeCkge1xuICByZXR1cm4geDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcbmNvbnN0IE1BWF9BUlJBWV9MRU5HVEggPSAxMDtcbmNvbnN0IE1BWF9SRUNVUlNJVkVfREVQVEggPSAyO1xuLyoqXG4gKiBVc2VkIHRvIHByaW50IHZhbHVlcyBpbiBlcnJvciBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBpbnNwZWN0KHZhbHVlKSB7XG4gIHJldHVybiBmb3JtYXRWYWx1ZSh2YWx1ZSwgW10pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcykge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgPyBgW2Z1bmN0aW9uICR7dmFsdWUubmFtZX1dYCA6ICdbZnVuY3Rpb25dJztcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG5cbiAgaWYgKHByZXZpb3VzbHlTZWVuVmFsdWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gIH1cblxuICBjb25zdCBzZWVuVmFsdWVzID0gWy4uLnByZXZpb3VzbHlTZWVuVmFsdWVzLCB2YWx1ZV07XG5cbiAgaWYgKGlzSlNPTmFibGUodmFsdWUpKSB7XG4gICAgY29uc3QganNvblZhbHVlID0gdmFsdWUudG9KU09OKCk7IC8vIGNoZWNrIGZvciBpbmZpbml0ZSByZWN1cnNpb25cblxuICAgIGlmIChqc29uVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGpzb25WYWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBqc29uVmFsdWVcbiAgICAgICAgOiBmb3JtYXRWYWx1ZShqc29uVmFsdWUsIHNlZW5WYWx1ZXMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmb3JtYXRBcnJheSh2YWx1ZSwgc2VlblZhbHVlcyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0T2JqZWN0KHZhbHVlLCBzZWVuVmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gaXNKU09OYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZm9ybWF0T2JqZWN0KG9iamVjdCwgc2VlblZhbHVlcykge1xuICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMob2JqZWN0KTtcblxuICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ3t9JztcbiAgfVxuXG4gIGlmIChzZWVuVmFsdWVzLmxlbmd0aCA+IE1BWF9SRUNVUlNJVkVfREVQVEgpIHtcbiAgICByZXR1cm4gJ1snICsgZ2V0T2JqZWN0VGFnKG9iamVjdCkgKyAnXSc7XG4gIH1cblxuICBjb25zdCBwcm9wZXJ0aWVzID0gZW50cmllcy5tYXAoXG4gICAgKFtrZXksIHZhbHVlXSkgPT4ga2V5ICsgJzogJyArIGZvcm1hdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKSxcbiAgKTtcbiAgcmV0dXJuICd7ICcgKyBwcm9wZXJ0aWVzLmpvaW4oJywgJykgKyAnIH0nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdbXSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbQXJyYXldJztcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKE1BWF9BUlJBWV9MRU5HVEgsIGFycmF5Lmxlbmd0aCk7XG4gIGNvbnN0IHJlbWFpbmluZyA9IGFycmF5Lmxlbmd0aCAtIGxlbjtcbiAgY29uc3QgaXRlbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmluZyA9PT0gMSkge1xuICAgIGl0ZW1zLnB1c2goJy4uLiAxIG1vcmUgaXRlbScpO1xuICB9IGVsc2UgaWYgKHJlbWFpbmluZyA+IDEpIHtcbiAgICBpdGVtcy5wdXNoKGAuLi4gJHtyZW1haW5pbmd9IG1vcmUgaXRlbXNgKTtcbiAgfVxuXG4gIHJldHVybiAnWycgKyBpdGVtcy5qb2luKCcsICcpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RUYWcob2JqZWN0KSB7XG4gIGNvbnN0IHRhZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbiAgICAuY2FsbChvYmplY3QpXG4gICAgLnJlcGxhY2UoL15cXFtvYmplY3QgLywgJycpXG4gICAgLnJlcGxhY2UoL10kLywgJycpO1xuXG4gIGlmICh0YWcgPT09ICdPYmplY3QnICYmIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBuYW1lID0gb2JqZWN0LmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIG5hbWUgIT09ICcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmluc3RhbmNlT2YgPSB2b2lkIDA7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdC5qcycpO1xuXG4vKipcbiAqIEEgcmVwbGFjZW1lbnQgZm9yIGluc3RhbmNlb2Ygd2hpY2ggaW5jbHVkZXMgYW4gZXJyb3Igd2FybmluZyB3aGVuIG11bHRpLXJlYWxtXG4gKiBjb25zdHJ1Y3RvcnMgYXJlIGRldGVjdGVkLlxuICogU2VlOiBodHRwczovL2V4cHJlc3Nqcy5jb20vZW4vYWR2YW5jZWQvYmVzdC1wcmFjdGljZS1wZXJmb3JtYW5jZS5odG1sI3NldC1ub2RlX2Vudi10by1wcm9kdWN0aW9uXG4gKiBTZWU6IGh0dHBzOi8vd2VicGFjay5qcy5vcmcvZ3VpZGVzL3Byb2R1Y3Rpb24vXG4gKi9cbmNvbnN0IGluc3RhbmNlT2YgPVxuICAvKiBjOCBpZ25vcmUgbmV4dCA2ICovXG4gIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBmdW5jdGlvbiBpbnN0YW5jZU9mKHZhbHVlLCBjb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcjtcbiAgICAgIH1cbiAgICA6IGZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBfdmFsdWUkY29uc3RydWN0b3I7XG5cbiAgICAgICAgICAvLyBQcmVmZXIgU3ltYm9sLnRvU3RyaW5nVGFnIHNpbmNlIGl0IGlzIGltbXVuZSB0byBtaW5pZmljYXRpb24uXG4gICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gY29uc3RydWN0b3IucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ107XG4gICAgICAgICAgY29uc3QgdmFsdWVDbGFzc05hbWUgPSAvLyBXZSBzdGlsbCBuZWVkIHRvIHN1cHBvcnQgY29uc3RydWN0b3IncyBuYW1lIHRvIGRldGVjdCBjb25mbGljdHMgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiB0aGlzIGxpYnJhcnkuXG4gICAgICAgICAgICBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUgLy8gQHRzLWV4cGVjdC1lcnJvciBUUyBidWcgc2VlLCBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM4MDA5XG4gICAgICAgICAgICAgID8gdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXVxuICAgICAgICAgICAgICA6IChfdmFsdWUkY29uc3RydWN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBfdmFsdWUkY29uc3RydWN0b3IgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF92YWx1ZSRjb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gdmFsdWVDbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkVmFsdWUgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodmFsdWUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlICR7Y2xhc3NOYW1lfSBcIiR7c3RyaW5naWZpZWRWYWx1ZX1cIiBmcm9tIGFub3RoZXIgbW9kdWxlIG9yIHJlYWxtLlxuXG5FbnN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBpbnN0YW5jZSBvZiBcImdyYXBocWxcIiBpbiB0aGUgbm9kZV9tb2R1bGVzXG5kaXJlY3RvcnkuIElmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBcImdyYXBocWxcIiBhcmUgdGhlIGRlcGVuZGVuY2llcyBvZiBvdGhlclxucmVsaWVkIG9uIG1vZHVsZXMsIHVzZSBcInJlc29sdXRpb25zXCIgdG8gZW5zdXJlIG9ubHkgb25lIHZlcnNpb24gaXMgaW5zdGFsbGVkLlxuXG5odHRwczovL3lhcm5wa2cuY29tL2VuL2RvY3Mvc2VsZWN0aXZlLXZlcnNpb24tcmVzb2x1dGlvbnNcblxuRHVwbGljYXRlIFwiZ3JhcGhxbFwiIG1vZHVsZXMgY2Fubm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZSBzaW5jZSBkaWZmZXJlbnRcbnZlcnNpb25zIG1heSBoYXZlIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMgYW5kIGJlaGF2aW9yLiBUaGUgZGF0YSBmcm9tIG9uZVxudmVyc2lvbiB1c2VkIGluIHRoZSBmdW5jdGlvbiBmcm9tIGFub3RoZXIgY291bGQgcHJvZHVjZSBjb25mdXNpbmcgYW5kXG5zcHVyaW91cyByZXN1bHRzLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5leHBvcnRzLmluc3RhbmNlT2YgPSBpbnN0YW5jZU9mO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmludmFyaWFudCA9IGludmFyaWFudDtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBjb25zdCBib29sZWFuQ29uZGl0aW9uID0gQm9vbGVhbihjb25kaXRpb24pO1xuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiAnVW5leHBlY3RlZCBpbnZhcmlhbnQgdHJpZ2dlcmVkLicsXG4gICAgKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmlzSXRlcmFibGVPYmplY3QgPSBpc0l0ZXJhYmxlT2JqZWN0O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgb2JqZWN0IGlzIGFuIE9iamVjdCAoaS5lLiBub3QgYSBzdHJpbmcgbGl0ZXJhbClcbiAqIGFuZCBpbXBsZW1lbnRzIHRoZSBJdGVyYXRvciBwcm90b2NvbC5cbiAqXG4gKiBUaGlzIG1heSBiZSB1c2VkIGluIHBsYWNlIG9mIFtBcnJheS5pc0FycmF5KCldW2lzQXJyYXldIHRvIGRldGVybWluZSBpZlxuICogYW4gb2JqZWN0IHNob3VsZCBiZSBpdGVyYXRlZC1vdmVyIGUuZy4gQXJyYXksIE1hcCwgU2V0LCBJbnQ4QXJyYXksXG4gKiBUeXBlZEFycmF5LCBldGMuIGJ1dCBleGNsdWRlcyBzdHJpbmcgbGl0ZXJhbHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KFsgMSwgMiwgMyBdKSAvLyB0cnVlXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KG5ldyBNYXAoKSkgLy8gdHJ1ZVxuICogaXNJdGVyYWJsZU9iamVjdCgnQUJDJykgLy8gZmFsc2VcbiAqIGlzSXRlcmFibGVPYmplY3QoeyBrZXk6ICd2YWx1ZScgfSkgLy8gZmFsc2VcbiAqIGlzSXRlcmFibGVPYmplY3QoeyBsZW5ndGg6IDEsIDA6ICdBbHBoYScgfSkgLy8gZmFsc2VcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpc0l0ZXJhYmxlT2JqZWN0KG1heWJlSXRlcmFibGUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgbWF5YmVJdGVyYWJsZSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgbWF5YmVJdGVyYWJsZSA9PT0gdm9pZCAwXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBtYXliZUl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0pID09PSAnZnVuY3Rpb24nXG4gICk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3RcbiAqIGBudWxsYCBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmtleU1hcCA9IGtleU1hcDtcblxuLyoqXG4gKiBDcmVhdGVzIGEga2V5ZWQgSlMgb2JqZWN0IGZyb20gYW4gYXJyYXksIGdpdmVuIGEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUga2V5c1xuICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGFycmF5LlxuICpcbiAqIFRoaXMgcHJvdmlkZXMgYSBjb252ZW5pZW50IGxvb2t1cCBmb3IgdGhlIGFycmF5IGl0ZW1zIGlmIHRoZSBrZXkgZnVuY3Rpb25cbiAqIHByb2R1Y2VzIHVuaXF1ZSByZXN1bHRzLlxuICogYGBgdHNcbiAqIGNvbnN0IHBob25lQm9vayA9IFtcbiAqICAgeyBuYW1lOiAnSm9uJywgbnVtOiAnNTU1LTEyMzQnIH0sXG4gKiAgIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODY3LTUzMDknIH1cbiAqIF1cbiAqXG4gKiBjb25zdCBlbnRyaWVzQnlOYW1lID0ga2V5TWFwKFxuICogICBwaG9uZUJvb2ssXG4gKiAgIGVudHJ5ID0+IGVudHJ5Lm5hbWVcbiAqIClcbiAqXG4gKiAvLyB7XG4gKiAvLyAgIEpvbjogeyBuYW1lOiAnSm9uJywgbnVtOiAnNTU1LTEyMzQnIH0sXG4gKiAvLyAgIEplbm55OiB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg2Ny01MzA5JyB9XG4gKiAvLyB9XG4gKlxuICogY29uc3QgamVubnlFbnRyeSA9IGVudHJpZXNCeU5hbWVbJ0plbm55J11cbiAqXG4gKiAvLyB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg1Ny02MzA5JyB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24ga2V5TWFwKGxpc3QsIGtleUZuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICByZXN1bHRba2V5Rm4oaXRlbSldID0gaXRlbTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMua2V5VmFsTWFwID0ga2V5VmFsTWFwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBrZXllZCBKUyBvYmplY3QgZnJvbSBhbiBhcnJheSwgZ2l2ZW4gYSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSBrZXlzXG4gKiBhbmQgYSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZXMgZnJvbSBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LlxuICogYGBgdHNcbiAqIGNvbnN0IHBob25lQm9vayA9IFtcbiAqICAgeyBuYW1lOiAnSm9uJywgbnVtOiAnNTU1LTEyMzQnIH0sXG4gKiAgIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODY3LTUzMDknIH1cbiAqIF1cbiAqXG4gKiAvLyB7IEpvbjogJzU1NS0xMjM0JywgSmVubnk6ICc4NjctNTMwOScgfVxuICogY29uc3QgcGhvbmVzQnlOYW1lID0ga2V5VmFsTWFwKFxuICogICBwaG9uZUJvb2ssXG4gKiAgIGVudHJ5ID0+IGVudHJ5Lm5hbWUsXG4gKiAgIGVudHJ5ID0+IGVudHJ5Lm51bVxuICogKVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGtleVZhbE1hcChsaXN0LCBrZXlGbiwgdmFsRm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgIHJlc3VsdFtrZXlGbihpdGVtKV0gPSB2YWxGbihpdGVtKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMubWFwVmFsdWUgPSBtYXBWYWx1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBtYXAgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBtYXBgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkIGJ5XG4gKiBydW5uaW5nIGVhY2ggdmFsdWUgb2YgYG1hcGAgdGhydSBgZm5gLlxuICovXG5mdW5jdGlvbiBtYXBWYWx1ZShtYXAsIGZuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobWFwKSkge1xuICAgIHJlc3VsdFtrZXldID0gZm4obWFwW2tleV0sIGtleSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLm5hdHVyYWxDb21wYXJlID0gbmF0dXJhbENvbXBhcmU7XG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciBpbmRpY2F0aW5nIHdoZXRoZXIgYSByZWZlcmVuY2Ugc3RyaW5nIGNvbWVzIGJlZm9yZSwgb3IgYWZ0ZXIsXG4gKiBvciBpcyB0aGUgc2FtZSBhcyB0aGUgZ2l2ZW4gc3RyaW5nIGluIG5hdHVyYWwgc29ydCBvcmRlci5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05hdHVyYWxfc29ydF9vcmRlclxuICpcbiAqL1xuZnVuY3Rpb24gbmF0dXJhbENvbXBhcmUoYVN0ciwgYlN0cikge1xuICBsZXQgYUluZGV4ID0gMDtcbiAgbGV0IGJJbmRleCA9IDA7XG5cbiAgd2hpbGUgKGFJbmRleCA8IGFTdHIubGVuZ3RoICYmIGJJbmRleCA8IGJTdHIubGVuZ3RoKSB7XG4gICAgbGV0IGFDaGFyID0gYVN0ci5jaGFyQ29kZUF0KGFJbmRleCk7XG4gICAgbGV0IGJDaGFyID0gYlN0ci5jaGFyQ29kZUF0KGJJbmRleCk7XG5cbiAgICBpZiAoaXNEaWdpdChhQ2hhcikgJiYgaXNEaWdpdChiQ2hhcikpIHtcbiAgICAgIGxldCBhTnVtID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICArK2FJbmRleDtcbiAgICAgICAgYU51bSA9IGFOdW0gKiAxMCArIGFDaGFyIC0gRElHSVRfMDtcbiAgICAgICAgYUNoYXIgPSBhU3RyLmNoYXJDb2RlQXQoYUluZGV4KTtcbiAgICAgIH0gd2hpbGUgKGlzRGlnaXQoYUNoYXIpICYmIGFOdW0gPiAwKTtcblxuICAgICAgbGV0IGJOdW0gPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgICsrYkluZGV4O1xuICAgICAgICBiTnVtID0gYk51bSAqIDEwICsgYkNoYXIgLSBESUdJVF8wO1xuICAgICAgICBiQ2hhciA9IGJTdHIuY2hhckNvZGVBdChiSW5kZXgpO1xuICAgICAgfSB3aGlsZSAoaXNEaWdpdChiQ2hhcikgJiYgYk51bSA+IDApO1xuXG4gICAgICBpZiAoYU51bSA8IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoYU51bSA+IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhQ2hhciA8IGJDaGFyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFDaGFyID4gYkNoYXIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgICsrYUluZGV4O1xuICAgICAgKytiSW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFTdHIubGVuZ3RoIC0gYlN0ci5sZW5ndGg7XG59XG5cbmNvbnN0IERJR0lUXzAgPSA0ODtcbmNvbnN0IERJR0lUXzkgPSA1NztcblxuZnVuY3Rpb24gaXNEaWdpdChjb2RlKSB7XG4gIHJldHVybiAhaXNOYU4oY29kZSkgJiYgRElHSVRfMCA8PSBjb2RlICYmIGNvZGUgPD0gRElHSVRfOTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5wcmludFBhdGhBcnJheSA9IHByaW50UGF0aEFycmF5O1xuXG4vKipcbiAqIEJ1aWxkIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIHByaW50UGF0aEFycmF5KHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAubWFwKChrZXkpID0+XG4gICAgICB0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyA/ICdbJyArIGtleS50b1N0cmluZygpICsgJ10nIDogJy4nICsga2V5LFxuICAgIClcbiAgICAuam9pbignJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuc3VnZ2VzdGlvbkxpc3QgPSBzdWdnZXN0aW9uTGlzdDtcblxudmFyIF9uYXR1cmFsQ29tcGFyZSA9IHJlcXVpcmUoJy4vbmF0dXJhbENvbXBhcmUuanMnKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbnZhbGlkIGlucHV0IHN0cmluZyBhbmQgYSBsaXN0IG9mIHZhbGlkIG9wdGlvbnMsIHJldHVybnMgYSBmaWx0ZXJlZFxuICogbGlzdCBvZiB2YWxpZCBvcHRpb25zIHNvcnRlZCBiYXNlZCBvbiB0aGVpciBzaW1pbGFyaXR5IHdpdGggdGhlIGlucHV0LlxuICovXG5mdW5jdGlvbiBzdWdnZXN0aW9uTGlzdChpbnB1dCwgb3B0aW9ucykge1xuICBjb25zdCBvcHRpb25zQnlEaXN0YW5jZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IGxleGljYWxEaXN0YW5jZSA9IG5ldyBMZXhpY2FsRGlzdGFuY2UoaW5wdXQpO1xuICBjb25zdCB0aHJlc2hvbGQgPSBNYXRoLmZsb29yKGlucHV0Lmxlbmd0aCAqIDAuNCkgKyAxO1xuXG4gIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkaXN0YW5jZSA9IGxleGljYWxEaXN0YW5jZS5tZWFzdXJlKG9wdGlvbiwgdGhyZXNob2xkKTtcblxuICAgIGlmIChkaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zQnlEaXN0YW5jZVtvcHRpb25dID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9wdGlvbnNCeURpc3RhbmNlKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgZGlzdGFuY2VEaWZmID0gb3B0aW9uc0J5RGlzdGFuY2VbYV0gLSBvcHRpb25zQnlEaXN0YW5jZVtiXTtcbiAgICByZXR1cm4gZGlzdGFuY2VEaWZmICE9PSAwXG4gICAgICA/IGRpc3RhbmNlRGlmZlxuICAgICAgOiAoMCwgX25hdHVyYWxDb21wYXJlLm5hdHVyYWxDb21wYXJlKShhLCBiKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbXB1dGVzIHRoZSBsZXhpY2FsIGRpc3RhbmNlIGJldHdlZW4gc3RyaW5ncyBBIGFuZCBCLlxuICpcbiAqIFRoZSBcImRpc3RhbmNlXCIgYmV0d2VlbiB0d28gc3RyaW5ncyBpcyBnaXZlbiBieSBjb3VudGluZyB0aGUgbWluaW11bSBudW1iZXJcbiAqIG9mIGVkaXRzIG5lZWRlZCB0byB0cmFuc2Zvcm0gc3RyaW5nIEEgaW50byBzdHJpbmcgQi4gQW4gZWRpdCBjYW4gYmUgYW5cbiAqIGluc2VydGlvbiwgZGVsZXRpb24sIG9yIHN1YnN0aXR1dGlvbiBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIsIG9yIGEgc3dhcCBvZiB0d29cbiAqIGFkamFjZW50IGNoYXJhY3RlcnMuXG4gKlxuICogSW5jbHVkZXMgYSBjdXN0b20gYWx0ZXJhdGlvbiBmcm9tIERhbWVyYXUtTGV2ZW5zaHRlaW4gdG8gdHJlYXQgY2FzZSBjaGFuZ2VzXG4gKiBhcyBhIHNpbmdsZSBlZGl0IHdoaWNoIGhlbHBzIGlkZW50aWZ5IG1pcy1jYXNlZCB2YWx1ZXMgd2l0aCBhbiBlZGl0IGRpc3RhbmNlXG4gKiBvZiAxLlxuICpcbiAqIFRoaXMgZGlzdGFuY2UgY2FuIGJlIHVzZWZ1bCBmb3IgZGV0ZWN0aW5nIHR5cG9zIGluIGlucHV0IG9yIHNvcnRpbmdcbiAqL1xuXG5jbGFzcyBMZXhpY2FsRGlzdGFuY2Uge1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5faW5wdXRMb3dlckNhc2UgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuX2lucHV0QXJyYXkgPSBzdHJpbmdUb0FycmF5KHRoaXMuX2lucHV0TG93ZXJDYXNlKTtcbiAgICB0aGlzLl9yb3dzID0gW1xuICAgICAgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCArIDEpLmZpbGwoMCksXG4gICAgICBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoICsgMSkuZmlsbCgwKSxcbiAgICAgIG5ldyBBcnJheShpbnB1dC5sZW5ndGggKyAxKS5maWxsKDApLFxuICAgIF07XG4gIH1cblxuICBtZWFzdXJlKG9wdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0ID09PSBvcHRpb24pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbkxvd2VyQ2FzZSA9IG9wdGlvbi50b0xvd2VyQ2FzZSgpOyAvLyBBbnkgY2FzZSBjaGFuZ2UgY291bnRzIGFzIGEgc2luZ2xlIGVkaXRcblxuICAgIGlmICh0aGlzLl9pbnB1dExvd2VyQ2FzZSA9PT0gb3B0aW9uTG93ZXJDYXNlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBsZXQgYSA9IHN0cmluZ1RvQXJyYXkob3B0aW9uTG93ZXJDYXNlKTtcbiAgICBsZXQgYiA9IHRoaXMuX2lucHV0QXJyYXk7XG5cbiAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkge1xuICAgICAgY29uc3QgdG1wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRtcDtcbiAgICB9XG5cbiAgICBjb25zdCBhTGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgY29uc3QgYkxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgaWYgKGFMZW5ndGggLSBiTGVuZ3RoID4gdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLl9yb3dzO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gYkxlbmd0aDsgaisrKSB7XG4gICAgICByb3dzWzBdW2pdID0gajtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHVwUm93ID0gcm93c1soaSAtIDEpICUgM107XG4gICAgICBjb25zdCBjdXJyZW50Um93ID0gcm93c1tpICUgM107XG4gICAgICBsZXQgc21hbGxlc3RDZWxsID0gKGN1cnJlbnRSb3dbMF0gPSBpKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gYkxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNvc3QgPSBhW2kgLSAxXSA9PT0gYltqIC0gMV0gPyAwIDogMTtcbiAgICAgICAgbGV0IGN1cnJlbnRDZWxsID0gTWF0aC5taW4oXG4gICAgICAgICAgdXBSb3dbal0gKyAxLCAvLyBkZWxldGVcbiAgICAgICAgICBjdXJyZW50Um93W2ogLSAxXSArIDEsIC8vIGluc2VydFxuICAgICAgICAgIHVwUm93W2ogLSAxXSArIGNvc3QsIC8vIHN1YnN0aXR1dGVcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaSA+IDEgJiYgaiA+IDEgJiYgYVtpIC0gMV0gPT09IGJbaiAtIDJdICYmIGFbaSAtIDJdID09PSBiW2ogLSAxXSkge1xuICAgICAgICAgIC8vIHRyYW5zcG9zaXRpb25cbiAgICAgICAgICBjb25zdCBkb3VibGVEaWFnb25hbENlbGwgPSByb3dzWyhpIC0gMikgJSAzXVtqIC0gMl07XG4gICAgICAgICAgY3VycmVudENlbGwgPSBNYXRoLm1pbihjdXJyZW50Q2VsbCwgZG91YmxlRGlhZ29uYWxDZWxsICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudENlbGwgPCBzbWFsbGVzdENlbGwpIHtcbiAgICAgICAgICBzbWFsbGVzdENlbGwgPSBjdXJyZW50Q2VsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRSb3dbal0gPSBjdXJyZW50Q2VsbDtcbiAgICAgIH0gLy8gRWFybHkgZXhpdCwgc2luY2UgZGlzdGFuY2UgY2FuJ3QgZ28gc21hbGxlciB0aGFuIHNtYWxsZXN0IGVsZW1lbnQgb2YgdGhlIHByZXZpb3VzIHJvdy5cblxuICAgICAgaWYgKHNtYWxsZXN0Q2VsbCA+IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3RhbmNlID0gcm93c1thTGVuZ3RoICUgM11bYkxlbmd0aF07XG4gICAgcmV0dXJuIGRpc3RhbmNlIDw9IHRocmVzaG9sZCA/IGRpc3RhbmNlIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyKSB7XG4gIGNvbnN0IHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KHN0ckxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkge1xuICAgIGFycmF5W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMudG9PYmpNYXAgPSB0b09iak1hcDtcblxuZnVuY3Rpb24gdG9PYmpNYXAob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgIG1hcFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlRva2VuID1cbiAgZXhwb3J0cy5RdWVyeURvY3VtZW50S2V5cyA9XG4gIGV4cG9ydHMuT3BlcmF0aW9uVHlwZU5vZGUgPVxuICBleHBvcnRzLkxvY2F0aW9uID1cbiAgICB2b2lkIDA7XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcblxuLyoqXG4gKiBDb250YWlucyBhIHJhbmdlIG9mIFVURi04IGNoYXJhY3RlciBvZmZzZXRzIGFuZCB0b2tlbiByZWZlcmVuY2VzIHRoYXRcbiAqIGlkZW50aWZ5IHRoZSByZWdpb24gb2YgdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHRoZSBBU1QgZGVyaXZlZC5cbiAqL1xuY2xhc3MgTG9jYXRpb24ge1xuICAvKipcbiAgICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhpcyBOb2RlIGJlZ2lucy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBlbmRzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFRva2VuIGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgVG9rZW4gYXQgd2hpY2ggdGhpcyBOb2RlIGVuZHMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgU291cmNlIGRvY3VtZW50IHRoZSBBU1QgcmVwcmVzZW50cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0YXJ0VG9rZW4sIGVuZFRva2VuLCBzb3VyY2UpIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnRUb2tlbi5zdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZFRva2VuLmVuZDtcbiAgICB0aGlzLnN0YXJ0VG9rZW4gPSBzdGFydFRva2VuO1xuICAgIHRoaXMuZW5kVG9rZW4gPSBlbmRUb2tlbjtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0xvY2F0aW9uJztcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHRoaXMuc3RhcnQsXG4gICAgICBlbmQ6IHRoaXMuZW5kLFxuICAgIH07XG4gIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIHJhbmdlIG9mIGNoYXJhY3RlcnMgcmVwcmVzZW50ZWQgYnkgYSBsZXhpY2FsIHRva2VuXG4gKiB3aXRoaW4gYSBTb3VyY2UuXG4gKi9cblxuZXhwb3J0cy5Mb2NhdGlvbiA9IExvY2F0aW9uO1xuXG5jbGFzcyBUb2tlbiB7XG4gIC8qKlxuICAgKiBUaGUga2luZCBvZiBUb2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSAxLWluZGV4ZWQgbGluZSBudW1iZXIgb24gd2hpY2ggdGhpcyBUb2tlbiBhcHBlYXJzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIDEtaW5kZXhlZCBjb2x1bW4gbnVtYmVyIGF0IHdoaWNoIHRoaXMgVG9rZW4gYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogRm9yIG5vbi1wdW5jdHVhdGlvbiB0b2tlbnMsIHJlcHJlc2VudHMgdGhlIGludGVycHJldGVkIHZhbHVlIG9mIHRoZSB0b2tlbi5cbiAgICpcbiAgICogTm90ZTogaXMgdW5kZWZpbmVkIGZvciBwdW5jdHVhdGlvbiB0b2tlbnMsIGJ1dCB0eXBlZCBhcyBzdHJpbmcgZm9yXG4gICAqIGNvbnZlbmllbmNlIGluIHRoZSBwYXJzZXIuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUb2tlbnMgZXhpc3QgYXMgbm9kZXMgaW4gYSBkb3VibGUtbGlua2VkLWxpc3QgYW1vbmdzdCBhbGwgdG9rZW5zXG4gICAqIGluY2x1ZGluZyBpZ25vcmVkIHRva2Vucy4gPFNPRj4gaXMgYWx3YXlzIHRoZSBmaXJzdCBub2RlIGFuZCA8RU9GPlxuICAgKiB0aGUgbGFzdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGtpbmQsIHN0YXJ0LCBlbmQsIGxpbmUsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1Rva2VuJztcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgIH07XG4gIH1cbn1cbi8qKlxuICogVGhlIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIEFTVCBub2RlIHR5cGVzLlxuICovXG5cbmV4cG9ydHMuVG9rZW4gPSBUb2tlbjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgUXVlcnlEb2N1bWVudEtleXMgPSB7XG4gIE5hbWU6IFtdLFxuICBEb2N1bWVudDogWydkZWZpbml0aW9ucyddLFxuICBPcGVyYXRpb25EZWZpbml0aW9uOiBbXG4gICAgJ25hbWUnLFxuICAgICd2YXJpYWJsZURlZmluaXRpb25zJyxcbiAgICAnZGlyZWN0aXZlcycsXG4gICAgJ3NlbGVjdGlvblNldCcsXG4gIF0sXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjogWyd2YXJpYWJsZScsICd0eXBlJywgJ2RlZmF1bHRWYWx1ZScsICdkaXJlY3RpdmVzJ10sXG4gIFZhcmlhYmxlOiBbJ25hbWUnXSxcbiAgU2VsZWN0aW9uU2V0OiBbJ3NlbGVjdGlvbnMnXSxcbiAgRmllbGQ6IFsnYWxpYXMnLCAnbmFtZScsICdhcmd1bWVudHMnLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgQXJndW1lbnQ6IFsnbmFtZScsICd2YWx1ZSddLFxuICBGcmFnbWVudFNwcmVhZDogWyduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5saW5lRnJhZ21lbnQ6IFsndHlwZUNvbmRpdGlvbicsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBGcmFnbWVudERlZmluaXRpb246IFtcbiAgICAnbmFtZScsIC8vIE5vdGU6IGZyYWdtZW50IHZhcmlhYmxlIGRlZmluaXRpb25zIGFyZSBkZXByZWNhdGVkIGFuZCB3aWxsIHJlbW92ZWQgaW4gdjE3LjAuMFxuICAgICd2YXJpYWJsZURlZmluaXRpb25zJyxcbiAgICAndHlwZUNvbmRpdGlvbicsXG4gICAgJ2RpcmVjdGl2ZXMnLFxuICAgICdzZWxlY3Rpb25TZXQnLFxuICBdLFxuICBJbnRWYWx1ZTogW10sXG4gIEZsb2F0VmFsdWU6IFtdLFxuICBTdHJpbmdWYWx1ZTogW10sXG4gIEJvb2xlYW5WYWx1ZTogW10sXG4gIE51bGxWYWx1ZTogW10sXG4gIEVudW1WYWx1ZTogW10sXG4gIExpc3RWYWx1ZTogWyd2YWx1ZXMnXSxcbiAgT2JqZWN0VmFsdWU6IFsnZmllbGRzJ10sXG4gIE9iamVjdEZpZWxkOiBbJ25hbWUnLCAndmFsdWUnXSxcbiAgRGlyZWN0aXZlOiBbJ25hbWUnLCAnYXJndW1lbnRzJ10sXG4gIE5hbWVkVHlwZTogWyduYW1lJ10sXG4gIExpc3RUeXBlOiBbJ3R5cGUnXSxcbiAgTm9uTnVsbFR5cGU6IFsndHlwZSddLFxuICBTY2hlbWFEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnb3BlcmF0aW9uVHlwZXMnXSxcbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IFsndHlwZSddLFxuICBTY2FsYXJUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgT2JqZWN0VHlwZURlZmluaXRpb246IFtcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICduYW1lJyxcbiAgICAnaW50ZXJmYWNlcycsXG4gICAgJ2RpcmVjdGl2ZXMnLFxuICAgICdmaWVsZHMnLFxuICBdLFxuICBGaWVsZERlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdhcmd1bWVudHMnLCAndHlwZScsICdkaXJlY3RpdmVzJ10sXG4gIElucHV0VmFsdWVEZWZpbml0aW9uOiBbXG4gICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAnbmFtZScsXG4gICAgJ3R5cGUnLFxuICAgICdkZWZhdWx0VmFsdWUnLFxuICAgICdkaXJlY3RpdmVzJyxcbiAgXSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IFtcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICduYW1lJyxcbiAgICAnaW50ZXJmYWNlcycsXG4gICAgJ2RpcmVjdGl2ZXMnLFxuICAgICdmaWVsZHMnLFxuICBdLFxuICBVbmlvblR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcycsICd0eXBlcyddLFxuICBFbnVtVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ3ZhbHVlcyddLFxuICBFbnVtVmFsdWVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgRGlyZWN0aXZlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2FyZ3VtZW50cycsICdsb2NhdGlvbnMnXSxcbiAgU2NoZW1hRXh0ZW5zaW9uOiBbJ2RpcmVjdGl2ZXMnLCAnb3BlcmF0aW9uVHlwZXMnXSxcbiAgU2NhbGFyVHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgT2JqZWN0VHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2ludGVyZmFjZXMnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgSW50ZXJmYWNlVHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2ludGVyZmFjZXMnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgVW5pb25UeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICd0eXBlcyddLFxuICBFbnVtVHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndmFsdWVzJ10sXG4gIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG59O1xuZXhwb3J0cy5RdWVyeURvY3VtZW50S2V5cyA9IFF1ZXJ5RG9jdW1lbnRLZXlzO1xuY29uc3Qga2luZFZhbHVlcyA9IG5ldyBTZXQoT2JqZWN0LmtleXMoUXVlcnlEb2N1bWVudEtleXMpKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlKG1heWJlTm9kZSkge1xuICBjb25zdCBtYXliZUtpbmQgPVxuICAgIG1heWJlTm9kZSA9PT0gbnVsbCB8fCBtYXliZU5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heWJlTm9kZS5raW5kO1xuICByZXR1cm4gdHlwZW9mIG1heWJlS2luZCA9PT0gJ3N0cmluZycgJiYga2luZFZhbHVlcy5oYXMobWF5YmVLaW5kKTtcbn1cbi8qKiBOYW1lICovXG5cbnZhciBPcGVyYXRpb25UeXBlTm9kZTtcbmV4cG9ydHMuT3BlcmF0aW9uVHlwZU5vZGUgPSBPcGVyYXRpb25UeXBlTm9kZTtcblxuKGZ1bmN0aW9uIChPcGVyYXRpb25UeXBlTm9kZSkge1xuICBPcGVyYXRpb25UeXBlTm9kZVsnUVVFUlknXSA9ICdxdWVyeSc7XG4gIE9wZXJhdGlvblR5cGVOb2RlWydNVVRBVElPTiddID0gJ211dGF0aW9uJztcbiAgT3BlcmF0aW9uVHlwZU5vZGVbJ1NVQlNDUklQVElPTiddID0gJ3N1YnNjcmlwdGlvbic7XG59KShPcGVyYXRpb25UeXBlTm9kZSB8fCAoZXhwb3J0cy5PcGVyYXRpb25UeXBlTm9kZSA9IE9wZXJhdGlvblR5cGVOb2RlID0ge30pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5kZWRlbnRCbG9ja1N0cmluZ0xpbmVzID0gZGVkZW50QmxvY2tTdHJpbmdMaW5lcztcbmV4cG9ydHMuaXNQcmludGFibGVBc0Jsb2NrU3RyaW5nID0gaXNQcmludGFibGVBc0Jsb2NrU3RyaW5nO1xuZXhwb3J0cy5wcmludEJsb2NrU3RyaW5nID0gcHJpbnRCbG9ja1N0cmluZztcblxudmFyIF9jaGFyYWN0ZXJDbGFzc2VzID0gcmVxdWlyZSgnLi9jaGFyYWN0ZXJDbGFzc2VzLmpzJyk7XG5cbi8qKlxuICogUHJvZHVjZXMgdGhlIHZhbHVlIG9mIGEgYmxvY2sgc3RyaW5nIGZyb20gaXRzIHBhcnNlZCByYXcgdmFsdWUsIHNpbWlsYXIgdG9cbiAqIENvZmZlZVNjcmlwdCdzIGJsb2NrIHN0cmluZywgUHl0aG9uJ3MgZG9jc3RyaW5nIHRyaW0gb3IgUnVieSdzIHN0cmlwX2hlcmVkb2MuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIHRoZSBHcmFwaFFMIHNwZWMncyBCbG9ja1N0cmluZ1ZhbHVlKCkgc3RhdGljIGFsZ29yaXRobS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZGVkZW50QmxvY2tTdHJpbmdMaW5lcyhsaW5lcykge1xuICB2YXIgX2ZpcnN0Tm9uRW1wdHlMaW5lMjtcblxuICBsZXQgY29tbW9uSW5kZW50ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gIGxldCBmaXJzdE5vbkVtcHR5TGluZSA9IG51bGw7XG4gIGxldCBsYXN0Tm9uRW1wdHlMaW5lID0gLTE7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBfZmlyc3ROb25FbXB0eUxpbmU7XG5cbiAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgY29uc3QgaW5kZW50ID0gbGVhZGluZ1doaXRlc3BhY2UobGluZSk7XG5cbiAgICBpZiAoaW5kZW50ID09PSBsaW5lLmxlbmd0aCkge1xuICAgICAgY29udGludWU7IC8vIHNraXAgZW1wdHkgbGluZXNcbiAgICB9XG5cbiAgICBmaXJzdE5vbkVtcHR5TGluZSA9XG4gICAgICAoX2ZpcnN0Tm9uRW1wdHlMaW5lID0gZmlyc3ROb25FbXB0eUxpbmUpICE9PSBudWxsICYmXG4gICAgICBfZmlyc3ROb25FbXB0eUxpbmUgIT09IHZvaWQgMFxuICAgICAgICA/IF9maXJzdE5vbkVtcHR5TGluZVxuICAgICAgICA6IGk7XG4gICAgbGFzdE5vbkVtcHR5TGluZSA9IGk7XG5cbiAgICBpZiAoaSAhPT0gMCAmJiBpbmRlbnQgPCBjb21tb25JbmRlbnQpIHtcbiAgICAgIGNvbW1vbkluZGVudCA9IGluZGVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGluZXMgLy8gUmVtb3ZlIGNvbW1vbiBpbmRlbnRhdGlvbiBmcm9tIGFsbCBsaW5lcyBidXQgZmlyc3QuXG4gICAgLm1hcCgobGluZSwgaSkgPT4gKGkgPT09IDAgPyBsaW5lIDogbGluZS5zbGljZShjb21tb25JbmRlbnQpKSkgLy8gUmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGJsYW5rIGxpbmVzLlxuICAgIC5zbGljZShcbiAgICAgIChfZmlyc3ROb25FbXB0eUxpbmUyID0gZmlyc3ROb25FbXB0eUxpbmUpICE9PSBudWxsICYmXG4gICAgICAgIF9maXJzdE5vbkVtcHR5TGluZTIgIT09IHZvaWQgMFxuICAgICAgICA/IF9maXJzdE5vbkVtcHR5TGluZTJcbiAgICAgICAgOiAwLFxuICAgICAgbGFzdE5vbkVtcHR5TGluZSArIDEsXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gbGVhZGluZ1doaXRlc3BhY2Uoc3RyKSB7XG4gIGxldCBpID0gMDtcblxuICB3aGlsZSAoXG4gICAgaSA8IHN0ci5sZW5ndGggJiZcbiAgICAoMCwgX2NoYXJhY3RlckNsYXNzZXMuaXNXaGl0ZVNwYWNlKShzdHIuY2hhckNvZGVBdChpKSlcbiAgKSB7XG4gICAgKytpO1xuICB9XG5cbiAgcmV0dXJuIGk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIGlzUHJpbnRhYmxlQXNCbG9ja1N0cmluZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIGVtcHR5IHN0cmluZyBpcyBwcmludGFibGVcbiAgfVxuXG4gIGxldCBpc0VtcHR5TGluZSA9IHRydWU7XG4gIGxldCBoYXNJbmRlbnQgPSBmYWxzZTtcbiAgbGV0IGhhc0NvbW1vbkluZGVudCA9IHRydWU7XG4gIGxldCBzZWVuTm9uRW1wdHlMaW5lID0gZmFsc2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgIHN3aXRjaCAodmFsdWUuY29kZVBvaW50QXQoaSkpIHtcbiAgICAgIGNhc2UgMHgwMDAwOlxuICAgICAgY2FzZSAweDAwMDE6XG4gICAgICBjYXNlIDB4MDAwMjpcbiAgICAgIGNhc2UgMHgwMDAzOlxuICAgICAgY2FzZSAweDAwMDQ6XG4gICAgICBjYXNlIDB4MDAwNTpcbiAgICAgIGNhc2UgMHgwMDA2OlxuICAgICAgY2FzZSAweDAwMDc6XG4gICAgICBjYXNlIDB4MDAwODpcbiAgICAgIGNhc2UgMHgwMDBiOlxuICAgICAgY2FzZSAweDAwMGM6XG4gICAgICBjYXNlIDB4MDAwZTpcbiAgICAgIGNhc2UgMHgwMDBmOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvLyBIYXMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzXG5cbiAgICAgIGNhc2UgMHgwMDBkOlxuICAgICAgICAvLyAgXFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIEhhcyBcXHIgb3IgXFxyXFxuIHdoaWNoIHdpbGwgYmUgcmVwbGFjZWQgYXMgXFxuXG5cbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIC8vICBcXG5cbiAgICAgICAgaWYgKGlzRW1wdHlMaW5lICYmICFzZWVuTm9uRW1wdHlMaW5lKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBIYXMgbGVhZGluZyBuZXcgbGluZVxuICAgICAgICB9XG5cbiAgICAgICAgc2Vlbk5vbkVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgIGlzRW1wdHlMaW5lID0gdHJ1ZTtcbiAgICAgICAgaGFzSW5kZW50ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk6IC8vICAgXFx0XG5cbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIC8vICA8c3BhY2U+XG4gICAgICAgIGhhc0luZGVudCB8fCAoaGFzSW5kZW50ID0gaXNFbXB0eUxpbmUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaGFzQ29tbW9uSW5kZW50ICYmIChoYXNDb21tb25JbmRlbnQgPSBoYXNJbmRlbnQpO1xuICAgICAgICBpc0VtcHR5TGluZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0VtcHR5TGluZSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gSGFzIHRyYWlsaW5nIGVtcHR5IGxpbmVzXG4gIH1cblxuICBpZiAoaGFzQ29tbW9uSW5kZW50ICYmIHNlZW5Ob25FbXB0eUxpbmUpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIEhhcyBpbnRlcm5hbCBpbmRlbnRcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBQcmludCBhIGJsb2NrIHN0cmluZyBpbiB0aGUgaW5kZW50ZWQgYmxvY2sgZm9ybSBieSBhZGRpbmcgYSBsZWFkaW5nIGFuZFxuICogdHJhaWxpbmcgYmxhbmsgbGluZS4gSG93ZXZlciwgaWYgYSBibG9jayBzdHJpbmcgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSBhbmQgaXNcbiAqIGEgc2luZ2xlLWxpbmUsIGFkZGluZyBhIGxlYWRpbmcgYmxhbmsgbGluZSB3b3VsZCBzdHJpcCB0aGF0IHdoaXRlc3BhY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gcHJpbnRCbG9ja1N0cmluZyh2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBlc2NhcGVkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cIlwiXCIvZywgJ1xcXFxcIlwiXCInKTsgLy8gRXhwYW5kIGEgYmxvY2sgc3RyaW5nJ3MgcmF3IHZhbHVlIGludG8gaW5kZXBlbmRlbnQgbGluZXMuXG5cbiAgY29uc3QgbGluZXMgPSBlc2NhcGVkVmFsdWUuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTtcbiAgY29uc3QgaXNTaW5nbGVMaW5lID0gbGluZXMubGVuZ3RoID09PSAxOyAvLyBJZiBjb21tb24gaW5kZW50YXRpb24gaXMgZm91bmQgd2UgY2FuIGZpeCBzb21lIG9mIHRob3NlIGNhc2VzIGJ5IGFkZGluZyBsZWFkaW5nIG5ldyBsaW5lXG5cbiAgY29uc3QgZm9yY2VMZWFkaW5nTmV3TGluZSA9XG4gICAgbGluZXMubGVuZ3RoID4gMSAmJlxuICAgIGxpbmVzXG4gICAgICAuc2xpY2UoMSlcbiAgICAgIC5ldmVyeShcbiAgICAgICAgKGxpbmUpID0+XG4gICAgICAgICAgbGluZS5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAoMCwgX2NoYXJhY3RlckNsYXNzZXMuaXNXaGl0ZVNwYWNlKShsaW5lLmNoYXJDb2RlQXQoMCkpLFxuICAgICAgKTsgLy8gVHJhaWxpbmcgdHJpcGxlIHF1b3RlcyBqdXN0IGxvb2tzIGNvbmZ1c2luZyBidXQgZG9lc24ndCBmb3JjZSB0cmFpbGluZyBuZXcgbGluZVxuXG4gIGNvbnN0IGhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzID0gZXNjYXBlZFZhbHVlLmVuZHNXaXRoKCdcXFxcXCJcIlwiJyk7IC8vIFRyYWlsaW5nIHF1b3RlIChzaW5nbGUgb3IgZG91YmxlKSBvciBzbGFzaCBmb3JjZXMgdHJhaWxpbmcgbmV3IGxpbmVcblxuICBjb25zdCBoYXNUcmFpbGluZ1F1b3RlID0gdmFsdWUuZW5kc1dpdGgoJ1wiJykgJiYgIWhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzO1xuICBjb25zdCBoYXNUcmFpbGluZ1NsYXNoID0gdmFsdWUuZW5kc1dpdGgoJ1xcXFwnKTtcbiAgY29uc3QgZm9yY2VUcmFpbGluZ05ld2xpbmUgPSBoYXNUcmFpbGluZ1F1b3RlIHx8IGhhc1RyYWlsaW5nU2xhc2g7XG4gIGNvbnN0IHByaW50QXNNdWx0aXBsZUxpbmVzID1cbiAgICAhKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMubWluaW1pemUpICYmIC8vIGFkZCBsZWFkaW5nIGFuZCB0cmFpbGluZyBuZXcgbGluZXMgb25seSBpZiBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eVxuICAgICghaXNTaW5nbGVMaW5lIHx8XG4gICAgICB2YWx1ZS5sZW5ndGggPiA3MCB8fFxuICAgICAgZm9yY2VUcmFpbGluZ05ld2xpbmUgfHxcbiAgICAgIGZvcmNlTGVhZGluZ05ld0xpbmUgfHxcbiAgICAgIGhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzKTtcbiAgbGV0IHJlc3VsdCA9ICcnOyAvLyBGb3JtYXQgYSBtdWx0aS1saW5lIGJsb2NrIHF1b3RlIHRvIGFjY291bnQgZm9yIGxlYWRpbmcgc3BhY2UuXG5cbiAgY29uc3Qgc2tpcExlYWRpbmdOZXdMaW5lID1cbiAgICBpc1NpbmdsZUxpbmUgJiYgKDAsIF9jaGFyYWN0ZXJDbGFzc2VzLmlzV2hpdGVTcGFjZSkodmFsdWUuY2hhckNvZGVBdCgwKSk7XG5cbiAgaWYgKChwcmludEFzTXVsdGlwbGVMaW5lcyAmJiAhc2tpcExlYWRpbmdOZXdMaW5lKSB8fCBmb3JjZUxlYWRpbmdOZXdMaW5lKSB7XG4gICAgcmVzdWx0ICs9ICdcXG4nO1xuICB9XG5cbiAgcmVzdWx0ICs9IGVzY2FwZWRWYWx1ZTtcblxuICBpZiAocHJpbnRBc011bHRpcGxlTGluZXMgfHwgZm9yY2VUcmFpbGluZ05ld2xpbmUpIHtcbiAgICByZXN1bHQgKz0gJ1xcbic7XG4gIH1cblxuICByZXR1cm4gJ1wiXCJcIicgKyByZXN1bHQgKyAnXCJcIlwiJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pc0RpZ2l0ID0gaXNEaWdpdDtcbmV4cG9ydHMuaXNMZXR0ZXIgPSBpc0xldHRlcjtcbmV4cG9ydHMuaXNOYW1lQ29udGludWUgPSBpc05hbWVDb250aW51ZTtcbmV4cG9ydHMuaXNOYW1lU3RhcnQgPSBpc05hbWVTdGFydDtcbmV4cG9ydHMuaXNXaGl0ZVNwYWNlID0gaXNXaGl0ZVNwYWNlO1xuXG4vKipcbiAqIGBgYFxuICogV2hpdGVTcGFjZSA6OlxuICogICAtIFwiSG9yaXpvbnRhbCBUYWIgKFUrMDAwOSlcIlxuICogICAtIFwiU3BhY2UgKFUrMDAyMClcIlxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDB4MDAwOSB8fCBjb2RlID09PSAweDAwMjA7XG59XG4vKipcbiAqIGBgYFxuICogRGlnaXQgOjogb25lIG9mXG4gKiAgIC0gYDBgIGAxYCBgMmAgYDNgIGA0YCBgNWAgYDZgIGA3YCBgOGAgYDlgXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSAweDAwMzAgJiYgY29kZSA8PSAweDAwMzk7XG59XG4vKipcbiAqIGBgYFxuICogTGV0dGVyIDo6IG9uZSBvZlxuICogICAtIGBBYCBgQmAgYENgIGBEYCBgRWAgYEZgIGBHYCBgSGAgYElgIGBKYCBgS2AgYExgIGBNYFxuICogICAtIGBOYCBgT2AgYFBgIGBRYCBgUmAgYFNgIGBUYCBgVWAgYFZgIGBXYCBgWGAgYFlgIGBaYFxuICogICAtIGBhYCBgYmAgYGNgIGBkYCBgZWAgYGZgIGBnYCBgaGAgYGlgIGBqYCBga2AgYGxgIGBtYFxuICogICAtIGBuYCBgb2AgYHBgIGBxYCBgcmAgYHNgIGB0YCBgdWAgYHZgIGB3YCBgeGAgYHlgIGB6YFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBpc0xldHRlcihjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDYxICYmIGNvZGUgPD0gMHgwMDdhKSB8fCAvLyBBLVpcbiAgICAoY29kZSA+PSAweDAwNDEgJiYgY29kZSA8PSAweDAwNWEpIC8vIGEtelxuICApO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVTdGFydCA6OlxuICogICAtIExldHRlclxuICogICAtIGBfYFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBpc05hbWVTdGFydChjb2RlKSB7XG4gIHJldHVybiBpc0xldHRlcihjb2RlKSB8fCBjb2RlID09PSAweDAwNWY7XG59XG4vKipcbiAqIGBgYFxuICogTmFtZUNvbnRpbnVlIDo6XG4gKiAgIC0gTGV0dGVyXG4gKiAgIC0gRGlnaXRcbiAqICAgLSBgX2BcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gaXNOYW1lQ29udGludWUoY29kZSkge1xuICByZXR1cm4gaXNMZXR0ZXIoY29kZSkgfHwgaXNEaWdpdChjb2RlKSB8fCBjb2RlID09PSAweDAwNWY7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuRGlyZWN0aXZlTG9jYXRpb24gPSB2b2lkIDA7XG5cbi8qKlxuICogVGhlIHNldCBvZiBhbGxvd2VkIGRpcmVjdGl2ZSBsb2NhdGlvbiB2YWx1ZXMuXG4gKi9cbnZhciBEaXJlY3RpdmVMb2NhdGlvbjtcbmV4cG9ydHMuRGlyZWN0aXZlTG9jYXRpb24gPSBEaXJlY3RpdmVMb2NhdGlvbjtcblxuKGZ1bmN0aW9uIChEaXJlY3RpdmVMb2NhdGlvbikge1xuICBEaXJlY3RpdmVMb2NhdGlvblsnUVVFUlknXSA9ICdRVUVSWSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydNVVRBVElPTiddID0gJ01VVEFUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NVQlNDUklQVElPTiddID0gJ1NVQlNDUklQVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGSUVMRCddID0gJ0ZJRUxEJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZSQUdNRU5UX0RFRklOSVRJT04nXSA9ICdGUkFHTUVOVF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZSQUdNRU5UX1NQUkVBRCddID0gJ0ZSQUdNRU5UX1NQUkVBRCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTkxJTkVfRlJBR01FTlQnXSA9ICdJTkxJTkVfRlJBR01FTlQnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnVkFSSUFCTEVfREVGSU5JVElPTiddID0gJ1ZBUklBQkxFX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnU0NIRU1BJ10gPSAnU0NIRU1BJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NDQUxBUiddID0gJ1NDQUxBUic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydPQkpFQ1QnXSA9ICdPQkpFQ1QnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRklFTERfREVGSU5JVElPTiddID0gJ0ZJRUxEX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnQVJHVU1FTlRfREVGSU5JVElPTiddID0gJ0FSR1VNRU5UX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5URVJGQUNFJ10gPSAnSU5URVJGQUNFJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1VOSU9OJ10gPSAnVU5JT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRU5VTSddID0gJ0VOVU0nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRU5VTV9WQUxVRSddID0gJ0VOVU1fVkFMVUUnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5QVVRfT0JKRUNUJ10gPSAnSU5QVVRfT0JKRUNUJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOUFVUX0ZJRUxEX0RFRklOSVRJT04nXSA9ICdJTlBVVF9GSUVMRF9ERUZJTklUSU9OJztcbn0pKERpcmVjdGl2ZUxvY2F0aW9uIHx8IChleHBvcnRzLkRpcmVjdGl2ZUxvY2F0aW9uID0gRGlyZWN0aXZlTG9jYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBEaXJlY3RpdmVMb2NhdGlvbmAuIFdpbGwgYmUgcmVtb3ZlIGluIHYxNy5cbiAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLktpbmQgPSB2b2lkIDA7XG5cbi8qKlxuICogVGhlIHNldCBvZiBhbGxvd2VkIGtpbmQgdmFsdWVzIGZvciBBU1Qgbm9kZXMuXG4gKi9cbnZhciBLaW5kO1xuZXhwb3J0cy5LaW5kID0gS2luZDtcblxuKGZ1bmN0aW9uIChLaW5kKSB7XG4gIEtpbmRbJ05BTUUnXSA9ICdOYW1lJztcbiAgS2luZFsnRE9DVU1FTlQnXSA9ICdEb2N1bWVudCc7XG4gIEtpbmRbJ09QRVJBVElPTl9ERUZJTklUSU9OJ10gPSAnT3BlcmF0aW9uRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1ZBUklBQkxFX0RFRklOSVRJT04nXSA9ICdWYXJpYWJsZURlZmluaXRpb24nO1xuICBLaW5kWydTRUxFQ1RJT05fU0VUJ10gPSAnU2VsZWN0aW9uU2V0JztcbiAgS2luZFsnRklFTEQnXSA9ICdGaWVsZCc7XG4gIEtpbmRbJ0FSR1VNRU5UJ10gPSAnQXJndW1lbnQnO1xuICBLaW5kWydGUkFHTUVOVF9TUFJFQUQnXSA9ICdGcmFnbWVudFNwcmVhZCc7XG4gIEtpbmRbJ0lOTElORV9GUkFHTUVOVCddID0gJ0lubGluZUZyYWdtZW50JztcbiAgS2luZFsnRlJBR01FTlRfREVGSU5JVElPTiddID0gJ0ZyYWdtZW50RGVmaW5pdGlvbic7XG4gIEtpbmRbJ1ZBUklBQkxFJ10gPSAnVmFyaWFibGUnO1xuICBLaW5kWydJTlQnXSA9ICdJbnRWYWx1ZSc7XG4gIEtpbmRbJ0ZMT0FUJ10gPSAnRmxvYXRWYWx1ZSc7XG4gIEtpbmRbJ1NUUklORyddID0gJ1N0cmluZ1ZhbHVlJztcbiAgS2luZFsnQk9PTEVBTiddID0gJ0Jvb2xlYW5WYWx1ZSc7XG4gIEtpbmRbJ05VTEwnXSA9ICdOdWxsVmFsdWUnO1xuICBLaW5kWydFTlVNJ10gPSAnRW51bVZhbHVlJztcbiAgS2luZFsnTElTVCddID0gJ0xpc3RWYWx1ZSc7XG4gIEtpbmRbJ09CSkVDVCddID0gJ09iamVjdFZhbHVlJztcbiAgS2luZFsnT0JKRUNUX0ZJRUxEJ10gPSAnT2JqZWN0RmllbGQnO1xuICBLaW5kWydESVJFQ1RJVkUnXSA9ICdEaXJlY3RpdmUnO1xuICBLaW5kWydOQU1FRF9UWVBFJ10gPSAnTmFtZWRUeXBlJztcbiAgS2luZFsnTElTVF9UWVBFJ10gPSAnTGlzdFR5cGUnO1xuICBLaW5kWydOT05fTlVMTF9UWVBFJ10gPSAnTm9uTnVsbFR5cGUnO1xuICBLaW5kWydTQ0hFTUFfREVGSU5JVElPTiddID0gJ1NjaGVtYURlZmluaXRpb24nO1xuICBLaW5kWydPUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OJ10gPSAnT3BlcmF0aW9uVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydTQ0FMQVJfVFlQRV9ERUZJTklUSU9OJ10gPSAnU2NhbGFyVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydPQkpFQ1RfVFlQRV9ERUZJTklUSU9OJ10gPSAnT2JqZWN0VHlwZURlZmluaXRpb24nO1xuICBLaW5kWydGSUVMRF9ERUZJTklUSU9OJ10gPSAnRmllbGREZWZpbml0aW9uJztcbiAgS2luZFsnSU5QVVRfVkFMVUVfREVGSU5JVElPTiddID0gJ0lucHV0VmFsdWVEZWZpbml0aW9uJztcbiAgS2luZFsnSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiddID0gJ0ludGVyZmFjZVR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnVU5JT05fVFlQRV9ERUZJTklUSU9OJ10gPSAnVW5pb25UeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0VOVU1fVFlQRV9ERUZJTklUSU9OJ10gPSAnRW51bVR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRU5VTV9WQUxVRV9ERUZJTklUSU9OJ10gPSAnRW51bVZhbHVlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04nXSA9ICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRElSRUNUSVZFX0RFRklOSVRJT04nXSA9ICdEaXJlY3RpdmVEZWZpbml0aW9uJztcbiAgS2luZFsnU0NIRU1BX0VYVEVOU0lPTiddID0gJ1NjaGVtYUV4dGVuc2lvbic7XG4gIEtpbmRbJ1NDQUxBUl9UWVBFX0VYVEVOU0lPTiddID0gJ1NjYWxhclR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydPQkpFQ1RfVFlQRV9FWFRFTlNJT04nXSA9ICdPYmplY3RUeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OJ10gPSAnSW50ZXJmYWNlVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ1VOSU9OX1RZUEVfRVhURU5TSU9OJ10gPSAnVW5pb25UeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnRU5VTV9UWVBFX0VYVEVOU0lPTiddID0gJ0VudW1UeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OJ10gPSAnSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uJztcbn0pKEtpbmQgfHwgKGV4cG9ydHMuS2luZCA9IEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgcG9zc2libGUga2luZCB2YWx1ZXMgb2YgQVNUIG5vZGVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYEtpbmRgLiBXaWxsIGJlIHJlbW92ZSBpbiB2MTcuXG4gKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGdldExvY2F0aW9uO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW52YXJpYW50LmpzJyk7XG5cbmNvbnN0IExpbmVSZWdFeHAgPSAvXFxyXFxufFtcXG5cXHJdL2c7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIFNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIFRha2VzIGEgU291cmNlIGFuZCBhIFVURi04IGNoYXJhY3RlciBvZmZzZXQsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBsaW5lIGFuZCBjb2x1bW4gYXMgYSBTb3VyY2VMb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oc291cmNlLCBwb3NpdGlvbikge1xuICBsZXQgbGFzdExpbmVTdGFydCA9IDA7XG4gIGxldCBsaW5lID0gMTtcblxuICBmb3IgKGNvbnN0IG1hdGNoIG9mIHNvdXJjZS5ib2R5Lm1hdGNoQWxsKExpbmVSZWdFeHApKSB7XG4gICAgdHlwZW9mIG1hdGNoLmluZGV4ID09PSAnbnVtYmVyJyB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcblxuICAgIGlmIChtYXRjaC5pbmRleCA+PSBwb3NpdGlvbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGFzdExpbmVTdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGxpbmUgKz0gMTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZSxcbiAgICBjb2x1bW46IHBvc2l0aW9uICsgMSAtIGxhc3RMaW5lU3RhcnQsXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuaXNDb25zdFZhbHVlTm9kZSA9IGlzQ29uc3RWYWx1ZU5vZGU7XG5leHBvcnRzLmlzRGVmaW5pdGlvbk5vZGUgPSBpc0RlZmluaXRpb25Ob2RlO1xuZXhwb3J0cy5pc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZSA9IGlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlO1xuZXhwb3J0cy5pc1NlbGVjdGlvbk5vZGUgPSBpc1NlbGVjdGlvbk5vZGU7XG5leHBvcnRzLmlzVHlwZURlZmluaXRpb25Ob2RlID0gaXNUeXBlRGVmaW5pdGlvbk5vZGU7XG5leHBvcnRzLmlzVHlwZUV4dGVuc2lvbk5vZGUgPSBpc1R5cGVFeHRlbnNpb25Ob2RlO1xuZXhwb3J0cy5pc1R5cGVOb2RlID0gaXNUeXBlTm9kZTtcbmV4cG9ydHMuaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUgPSBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZTtcbmV4cG9ydHMuaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZSA9IGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGU7XG5leHBvcnRzLmlzVmFsdWVOb2RlID0gaXNWYWx1ZU5vZGU7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuL2tpbmRzLmpzJyk7XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIGlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKG5vZGUpIHx8XG4gICAgaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUobm9kZSkgfHxcbiAgICBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKG5vZGUpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzU2VsZWN0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GSUVMRCB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuRlJBR01FTlRfU1BSRUFEIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTkxJTkVfRlJBR01FTlRcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNWYWx1ZU5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuVkFSSUFCTEUgfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLklOVCB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuRkxPQVQgfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLlNUUklORyB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuQk9PTEVBTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuTlVMTCB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuRU5VTSB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuTElTVCB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuT0JKRUNUXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RWYWx1ZU5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIGlzVmFsdWVOb2RlKG5vZGUpICYmXG4gICAgKG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuTElTVFxuICAgICAgPyBub2RlLnZhbHVlcy5zb21lKGlzQ29uc3RWYWx1ZU5vZGUpXG4gICAgICA6IG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuT0JKRUNUXG4gICAgICA/IG5vZGUuZmllbGRzLnNvbWUoKGZpZWxkKSA9PiBpc0NvbnN0VmFsdWVOb2RlKGZpZWxkLnZhbHVlKSlcbiAgICAgIDogbm9kZS5raW5kICE9PSBfa2luZHMuS2luZC5WQVJJQUJMRSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5OQU1FRF9UWVBFIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5MSVNUX1RZUEUgfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLk5PTl9OVUxMX1RZUEVcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NIRU1BX0RFRklOSVRJT04gfHxcbiAgICBpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuRElSRUNUSVZFX0RFRklOSVRJT05cbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLlNDSEVNQV9FWFRFTlNJT04gfHwgaXNUeXBlRXh0ZW5zaW9uTm9kZShub2RlKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT05cbiAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5wcmludExvY2F0aW9uID0gcHJpbnRMb2NhdGlvbjtcbmV4cG9ydHMucHJpbnRTb3VyY2VMb2NhdGlvbiA9IHByaW50U291cmNlTG9jYXRpb247XG5cbnZhciBfbG9jYXRpb24gPSByZXF1aXJlKCcuL2xvY2F0aW9uLmpzJyk7XG5cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiBwcmludExvY2F0aW9uKGxvY2F0aW9uKSB7XG4gIHJldHVybiBwcmludFNvdXJjZUxvY2F0aW9uKFxuICAgIGxvY2F0aW9uLnNvdXJjZSxcbiAgICAoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShsb2NhdGlvbi5zb3VyY2UsIGxvY2F0aW9uLnN0YXJ0KSxcbiAgKTtcbn1cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5cbmZ1bmN0aW9uIHByaW50U291cmNlTG9jYXRpb24oc291cmNlLCBzb3VyY2VMb2NhdGlvbikge1xuICBjb25zdCBmaXJzdExpbmVDb2x1bW5PZmZzZXQgPSBzb3VyY2UubG9jYXRpb25PZmZzZXQuY29sdW1uIC0gMTtcbiAgY29uc3QgYm9keSA9ICcnLnBhZFN0YXJ0KGZpcnN0TGluZUNvbHVtbk9mZnNldCkgKyBzb3VyY2UuYm9keTtcbiAgY29uc3QgbGluZUluZGV4ID0gc291cmNlTG9jYXRpb24ubGluZSAtIDE7XG4gIGNvbnN0IGxpbmVPZmZzZXQgPSBzb3VyY2UubG9jYXRpb25PZmZzZXQubGluZSAtIDE7XG4gIGNvbnN0IGxpbmVOdW0gPSBzb3VyY2VMb2NhdGlvbi5saW5lICsgbGluZU9mZnNldDtcbiAgY29uc3QgY29sdW1uT2Zmc2V0ID0gc291cmNlTG9jYXRpb24ubGluZSA9PT0gMSA/IGZpcnN0TGluZUNvbHVtbk9mZnNldCA6IDA7XG4gIGNvbnN0IGNvbHVtbk51bSA9IHNvdXJjZUxvY2F0aW9uLmNvbHVtbiArIGNvbHVtbk9mZnNldDtcbiAgY29uc3QgbG9jYXRpb25TdHIgPSBgJHtzb3VyY2UubmFtZX06JHtsaW5lTnVtfToke2NvbHVtbk51bX1cXG5gO1xuICBjb25zdCBsaW5lcyA9IGJvZHkuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTtcbiAgY29uc3QgbG9jYXRpb25MaW5lID0gbGluZXNbbGluZUluZGV4XTsgLy8gU3BlY2lhbCBjYXNlIGZvciBtaW5pZmllZCBkb2N1bWVudHNcblxuICBpZiAobG9jYXRpb25MaW5lLmxlbmd0aCA+IDEyMCkge1xuICAgIGNvbnN0IHN1YkxpbmVJbmRleCA9IE1hdGguZmxvb3IoY29sdW1uTnVtIC8gODApO1xuICAgIGNvbnN0IHN1YkxpbmVDb2x1bW5OdW0gPSBjb2x1bW5OdW0gJSA4MDtcbiAgICBjb25zdCBzdWJMaW5lcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhdGlvbkxpbmUubGVuZ3RoOyBpICs9IDgwKSB7XG4gICAgICBzdWJMaW5lcy5wdXNoKGxvY2F0aW9uTGluZS5zbGljZShpLCBpICsgODApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgbG9jYXRpb25TdHIgK1xuICAgICAgcHJpbnRQcmVmaXhlZExpbmVzKFtcbiAgICAgICAgW2Ake2xpbmVOdW19IHxgLCBzdWJMaW5lc1swXV0sXG4gICAgICAgIC4uLnN1YkxpbmVzLnNsaWNlKDEsIHN1YkxpbmVJbmRleCArIDEpLm1hcCgoc3ViTGluZSkgPT4gWyd8Jywgc3ViTGluZV0pLFxuICAgICAgICBbJ3wnLCAnXicucGFkU3RhcnQoc3ViTGluZUNvbHVtbk51bSldLFxuICAgICAgICBbJ3wnLCBzdWJMaW5lc1tzdWJMaW5lSW5kZXggKyAxXV0sXG4gICAgICBdKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGxvY2F0aW9uU3RyICtcbiAgICBwcmludFByZWZpeGVkTGluZXMoW1xuICAgICAgLy8gTGluZXMgc3BlY2lmaWVkIGxpa2UgdGhpczogW1wicHJlZml4XCIsIFwic3RyaW5nXCJdLFxuICAgICAgW2Ake2xpbmVOdW0gLSAxfSB8YCwgbGluZXNbbGluZUluZGV4IC0gMV1dLFxuICAgICAgW2Ake2xpbmVOdW19IHxgLCBsb2NhdGlvbkxpbmVdLFxuICAgICAgWyd8JywgJ14nLnBhZFN0YXJ0KGNvbHVtbk51bSldLFxuICAgICAgW2Ake2xpbmVOdW0gKyAxfSB8YCwgbGluZXNbbGluZUluZGV4ICsgMV1dLFxuICAgIF0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHByaW50UHJlZml4ZWRMaW5lcyhsaW5lcykge1xuICBjb25zdCBleGlzdGluZ0xpbmVzID0gbGluZXMuZmlsdGVyKChbXywgbGluZV0pID0+IGxpbmUgIT09IHVuZGVmaW5lZCk7XG4gIGNvbnN0IHBhZExlbiA9IE1hdGgubWF4KC4uLmV4aXN0aW5nTGluZXMubWFwKChbcHJlZml4XSkgPT4gcHJlZml4Lmxlbmd0aCkpO1xuICByZXR1cm4gZXhpc3RpbmdMaW5lc1xuICAgIC5tYXAoKFtwcmVmaXgsIGxpbmVdKSA9PiBwcmVmaXgucGFkU3RhcnQocGFkTGVuKSArIChsaW5lID8gJyAnICsgbGluZSA6ICcnKSlcbiAgICAuam9pbignXFxuJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMucHJpbnRTdHJpbmcgPSBwcmludFN0cmluZztcblxuLyoqXG4gKiBQcmludHMgYSBzdHJpbmcgYXMgYSBHcmFwaFFMIFN0cmluZ1ZhbHVlIGxpdGVyYWwuIFJlcGxhY2VzIGNvbnRyb2wgY2hhcmFjdGVyc1xuICogYW5kIGV4Y2x1ZGVkIGNoYXJhY3RlcnMgKFwiIFUrMDAyMiBhbmQgXFxcXCBVKzAwNUMpIHdpdGggZXNjYXBlIHNlcXVlbmNlcy5cbiAqL1xuZnVuY3Rpb24gcHJpbnRTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBgXCIke3N0ci5yZXBsYWNlKGVzY2FwZWRSZWdFeHAsIGVzY2FwZWRSZXBsYWNlcil9XCJgO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG5jb25zdCBlc2NhcGVkUmVnRXhwID0gL1tcXHgwMC1cXHgxZlxceDIyXFx4NWNcXHg3Zi1cXHg5Zl0vZztcblxuZnVuY3Rpb24gZXNjYXBlZFJlcGxhY2VyKHN0cikge1xuICByZXR1cm4gZXNjYXBlU2VxdWVuY2VzW3N0ci5jaGFyQ29kZUF0KDApXTtcbn0gLy8gcHJldHRpZXItaWdub3JlXG5cbmNvbnN0IGVzY2FwZVNlcXVlbmNlcyA9IFtcbiAgJ1xcXFx1MDAwMCcsXG4gICdcXFxcdTAwMDEnLFxuICAnXFxcXHUwMDAyJyxcbiAgJ1xcXFx1MDAwMycsXG4gICdcXFxcdTAwMDQnLFxuICAnXFxcXHUwMDA1JyxcbiAgJ1xcXFx1MDAwNicsXG4gICdcXFxcdTAwMDcnLFxuICAnXFxcXGInLFxuICAnXFxcXHQnLFxuICAnXFxcXG4nLFxuICAnXFxcXHUwMDBCJyxcbiAgJ1xcXFxmJyxcbiAgJ1xcXFxyJyxcbiAgJ1xcXFx1MDAwRScsXG4gICdcXFxcdTAwMEYnLFxuICAnXFxcXHUwMDEwJyxcbiAgJ1xcXFx1MDAxMScsXG4gICdcXFxcdTAwMTInLFxuICAnXFxcXHUwMDEzJyxcbiAgJ1xcXFx1MDAxNCcsXG4gICdcXFxcdTAwMTUnLFxuICAnXFxcXHUwMDE2JyxcbiAgJ1xcXFx1MDAxNycsXG4gICdcXFxcdTAwMTgnLFxuICAnXFxcXHUwMDE5JyxcbiAgJ1xcXFx1MDAxQScsXG4gICdcXFxcdTAwMUInLFxuICAnXFxcXHUwMDFDJyxcbiAgJ1xcXFx1MDAxRCcsXG4gICdcXFxcdTAwMUUnLFxuICAnXFxcXHUwMDFGJyxcbiAgJycsXG4gICcnLFxuICAnXFxcXFwiJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDJGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLCAvLyAzRlxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNEZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJ1xcXFxcXFxcJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNUZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDZGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICdcXFxcdTAwN0YnLFxuICAnXFxcXHUwMDgwJyxcbiAgJ1xcXFx1MDA4MScsXG4gICdcXFxcdTAwODInLFxuICAnXFxcXHUwMDgzJyxcbiAgJ1xcXFx1MDA4NCcsXG4gICdcXFxcdTAwODUnLFxuICAnXFxcXHUwMDg2JyxcbiAgJ1xcXFx1MDA4NycsXG4gICdcXFxcdTAwODgnLFxuICAnXFxcXHUwMDg5JyxcbiAgJ1xcXFx1MDA4QScsXG4gICdcXFxcdTAwOEInLFxuICAnXFxcXHUwMDhDJyxcbiAgJ1xcXFx1MDA4RCcsXG4gICdcXFxcdTAwOEUnLFxuICAnXFxcXHUwMDhGJyxcbiAgJ1xcXFx1MDA5MCcsXG4gICdcXFxcdTAwOTEnLFxuICAnXFxcXHUwMDkyJyxcbiAgJ1xcXFx1MDA5MycsXG4gICdcXFxcdTAwOTQnLFxuICAnXFxcXHUwMDk1JyxcbiAgJ1xcXFx1MDA5NicsXG4gICdcXFxcdTAwOTcnLFxuICAnXFxcXHUwMDk4JyxcbiAgJ1xcXFx1MDA5OScsXG4gICdcXFxcdTAwOUEnLFxuICAnXFxcXHUwMDlCJyxcbiAgJ1xcXFx1MDA5QycsXG4gICdcXFxcdTAwOUQnLFxuICAnXFxcXHUwMDlFJyxcbiAgJ1xcXFx1MDA5RicsXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnByaW50ID0gcHJpbnQ7XG5cbnZhciBfYmxvY2tTdHJpbmcgPSByZXF1aXJlKCcuL2Jsb2NrU3RyaW5nLmpzJyk7XG5cbnZhciBfcHJpbnRTdHJpbmcgPSByZXF1aXJlKCcuL3ByaW50U3RyaW5nLmpzJyk7XG5cbnZhciBfdmlzaXRvciA9IHJlcXVpcmUoJy4vdmlzaXRvci5qcycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIEFTVCBpbnRvIGEgc3RyaW5nLCB1c2luZyBvbmUgc2V0IG9mIHJlYXNvbmFibGVcbiAqIGZvcm1hdHRpbmcgcnVsZXMuXG4gKi9cbmZ1bmN0aW9uIHByaW50KGFzdCkge1xuICByZXR1cm4gKDAsIF92aXNpdG9yLnZpc2l0KShhc3QsIHByaW50RG9jQVNUUmVkdWNlcik7XG59XG5cbmNvbnN0IE1BWF9MSU5FX0xFTkdUSCA9IDgwO1xuY29uc3QgcHJpbnREb2NBU1RSZWR1Y2VyID0ge1xuICBOYW1lOiB7XG4gICAgbGVhdmU6IChub2RlKSA9PiBub2RlLnZhbHVlLFxuICB9LFxuICBWYXJpYWJsZToge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gJyQnICsgbm9kZS5uYW1lLFxuICB9LFxuICAvLyBEb2N1bWVudFxuICBEb2N1bWVudDoge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gam9pbihub2RlLmRlZmluaXRpb25zLCAnXFxuXFxuJyksXG4gIH0sXG4gIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICBsZWF2ZShub2RlKSB7XG4gICAgICBjb25zdCB2YXJEZWZzID0gd3JhcCgnKCcsIGpvaW4obm9kZS52YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKTtcbiAgICAgIGNvbnN0IHByZWZpeCA9IGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICBub2RlLm9wZXJhdGlvbixcbiAgICAgICAgICBqb2luKFtub2RlLm5hbWUsIHZhckRlZnNdKSxcbiAgICAgICAgICBqb2luKG5vZGUuZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKTsgLy8gQW5vbnltb3VzIHF1ZXJpZXMgd2l0aCBubyBkaXJlY3RpdmVzIG9yIHZhcmlhYmxlIGRlZmluaXRpb25zIGNhbiB1c2VcbiAgICAgIC8vIHRoZSBxdWVyeSBzaG9ydCBmb3JtLlxuXG4gICAgICByZXR1cm4gKHByZWZpeCA9PT0gJ3F1ZXJ5JyA/ICcnIDogcHJlZml4ICsgJyAnKSArIG5vZGUuc2VsZWN0aW9uU2V0O1xuICAgIH0sXG4gIH0sXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyB2YXJpYWJsZSwgdHlwZSwgZGVmYXVsdFZhbHVlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB2YXJpYWJsZSArXG4gICAgICAnOiAnICtcbiAgICAgIHR5cGUgK1xuICAgICAgd3JhcCgnID0gJywgZGVmYXVsdFZhbHVlKSArXG4gICAgICB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgU2VsZWN0aW9uU2V0OiB7XG4gICAgbGVhdmU6ICh7IHNlbGVjdGlvbnMgfSkgPT4gYmxvY2soc2VsZWN0aW9ucyksXG4gIH0sXG4gIEZpZWxkOiB7XG4gICAgbGVhdmUoeyBhbGlhcywgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCBkaXJlY3RpdmVzLCBzZWxlY3Rpb25TZXQgfSkge1xuICAgICAgY29uc3QgcHJlZml4ID0gd3JhcCgnJywgYWxpYXMsICc6ICcpICsgbmFtZTtcbiAgICAgIGxldCBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpO1xuXG4gICAgICBpZiAoYXJnc0xpbmUubGVuZ3RoID4gTUFYX0xJTkVfTEVOR1RIKSB7XG4gICAgICAgIGFyZ3NMaW5lID0gcHJlZml4ICsgd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqb2luKFthcmdzTGluZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBzZWxlY3Rpb25TZXRdLCAnICcpO1xuICAgIH0sXG4gIH0sXG4gIEFyZ3VtZW50OiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIHZhbHVlIH0pID0+IG5hbWUgKyAnOiAnICsgdmFsdWUsXG4gIH0sXG4gIC8vIEZyYWdtZW50c1xuICBGcmFnbWVudFNwcmVhZDoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICAnLi4uJyArIG5hbWUgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgSW5saW5lRnJhZ21lbnQ6IHtcbiAgICBsZWF2ZTogKHsgdHlwZUNvbmRpdGlvbiwgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJy4uLicsXG4gICAgICAgICAgd3JhcCgnb24gJywgdHlwZUNvbmRpdGlvbiksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIHNlbGVjdGlvblNldCxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRnJhZ21lbnREZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6IChcbiAgICAgIHsgbmFtZSwgdHlwZUNvbmRpdGlvbiwgdmFyaWFibGVEZWZpbml0aW9ucywgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0sIC8vIE5vdGU6IGZyYWdtZW50IHZhcmlhYmxlIGRlZmluaXRpb25zIGFyZSBleHBlcmltZW50YWwgYW5kIG1heSBiZSBjaGFuZ2VkXG4gICAgKSA9PlxuICAgICAgLy8gb3IgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAgICAgYGZyYWdtZW50ICR7bmFtZX0ke3dyYXAoJygnLCBqb2luKHZhcmlhYmxlRGVmaW5pdGlvbnMsICcsICcpLCAnKScpfSBgICtcbiAgICAgIGBvbiAke3R5cGVDb25kaXRpb259ICR7d3JhcCgnJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCAnICcpfWAgK1xuICAgICAgc2VsZWN0aW9uU2V0LFxuICB9LFxuICAvLyBWYWx1ZVxuICBJbnRWYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgRmxvYXRWYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgU3RyaW5nVmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUsIGJsb2NrOiBpc0Jsb2NrU3RyaW5nIH0pID0+XG4gICAgICBpc0Jsb2NrU3RyaW5nXG4gICAgICAgID8gKDAsIF9ibG9ja1N0cmluZy5wcmludEJsb2NrU3RyaW5nKSh2YWx1ZSlcbiAgICAgICAgOiAoMCwgX3ByaW50U3RyaW5nLnByaW50U3RyaW5nKSh2YWx1ZSksXG4gIH0sXG4gIEJvb2xlYW5WYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiAodmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKSxcbiAgfSxcbiAgTnVsbFZhbHVlOiB7XG4gICAgbGVhdmU6ICgpID0+ICdudWxsJyxcbiAgfSxcbiAgRW51bVZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlIH0pID0+IHZhbHVlLFxuICB9LFxuICBMaXN0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWVzIH0pID0+ICdbJyArIGpvaW4odmFsdWVzLCAnLCAnKSArICddJyxcbiAgfSxcbiAgT2JqZWN0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgZmllbGRzIH0pID0+ICd7JyArIGpvaW4oZmllbGRzLCAnLCAnKSArICd9JyxcbiAgfSxcbiAgT2JqZWN0RmllbGQ6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgdmFsdWUgfSkgPT4gbmFtZSArICc6ICcgKyB2YWx1ZSxcbiAgfSxcbiAgLy8gRGlyZWN0aXZlXG4gIERpcmVjdGl2ZToge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBhcmd1bWVudHM6IGFyZ3MgfSkgPT5cbiAgICAgICdAJyArIG5hbWUgKyB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSxcbiAgfSxcbiAgLy8gVHlwZVxuICBOYW1lZFR5cGU6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSB9KSA9PiBuYW1lLFxuICB9LFxuICBMaXN0VHlwZToge1xuICAgIGxlYXZlOiAoeyB0eXBlIH0pID0+ICdbJyArIHR5cGUgKyAnXScsXG4gIH0sXG4gIE5vbk51bGxUeXBlOiB7XG4gICAgbGVhdmU6ICh7IHR5cGUgfSkgPT4gdHlwZSArICchJyxcbiAgfSxcbiAgLy8gVHlwZSBTeXN0ZW0gRGVmaW5pdGlvbnNcbiAgU2NoZW1hRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgZGlyZWN0aXZlcywgb3BlcmF0aW9uVHlwZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ3NjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSwgJyAnKSxcbiAgfSxcbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgb3BlcmF0aW9uLCB0eXBlIH0pID0+IG9wZXJhdGlvbiArICc6ICcgKyB0eXBlLFxuICB9LFxuICBTY2FsYXJUeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFsnc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgT2JqZWN0VHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ3R5cGUnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEZpZWxkRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCB0eXBlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIG5hbWUgK1xuICAgICAgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpXG4gICAgICAgID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJylcbiAgICAgICAgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgK1xuICAgICAgJzogJyArXG4gICAgICB0eXBlICtcbiAgICAgIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpLFxuICB9LFxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgdHlwZSwgZGVmYXVsdFZhbHVlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oXG4gICAgICAgIFtuYW1lICsgJzogJyArIHR5cGUsIHdyYXAoJz0gJywgZGVmYXVsdFZhbHVlKSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2ludGVyZmFjZScsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSxcbiAgICAgICAgICBqb2luKGRpcmVjdGl2ZXMsICcgJyksXG4gICAgICAgICAgYmxvY2soZmllbGRzKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgVW5pb25UeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgdHlwZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgWyd1bmlvbicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgd3JhcCgnPSAnLCBqb2luKHR5cGVzLCAnIHwgJykpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRW51bVR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBkaXJlY3RpdmVzLCB2YWx1ZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ2VudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpLFxuICB9LFxuICBFbnVtVmFsdWVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICsgam9pbihbbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyksXG4gIH0sXG4gIERpcmVjdGl2ZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGFyZ3VtZW50czogYXJncywgcmVwZWF0YWJsZSwgbG9jYXRpb25zIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgICdkaXJlY3RpdmUgQCcgK1xuICAgICAgbmFtZSArXG4gICAgICAoaGFzTXVsdGlsaW5lSXRlbXMoYXJncylcbiAgICAgICAgPyB3cmFwKCcoXFxuJywgaW5kZW50KGpvaW4oYXJncywgJ1xcbicpKSwgJ1xcbiknKVxuICAgICAgICA6IHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpKSArXG4gICAgICAocmVwZWF0YWJsZSA/ICcgcmVwZWF0YWJsZScgOiAnJykgK1xuICAgICAgJyBvbiAnICtcbiAgICAgIGpvaW4obG9jYXRpb25zLCAnIHwgJyksXG4gIH0sXG4gIFNjaGVtYUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBkaXJlY3RpdmVzLCBvcGVyYXRpb25UeXBlcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgWydleHRlbmQgc2NoZW1hJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhvcGVyYXRpb25UeXBlcyldLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMgfSkgPT5cbiAgICAgIGpvaW4oWydleHRlbmQgc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgT2JqZWN0VHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICAnZXh0ZW5kIHR5cGUnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEludGVyZmFjZVR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgaW50ZXJmYWNlcywgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2V4dGVuZCBpbnRlcmZhY2UnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIFVuaW9uVHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzLCB0eXBlcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdleHRlbmQgdW5pb24nLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIHdyYXAoJz0gJywgam9pbih0eXBlcywgJyB8ICcpKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRW51bVR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgdmFsdWVzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIGVudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpLFxuICB9LFxuICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIGlucHV0JywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKSxcbiAgfSxcbn07XG4vKipcbiAqIEdpdmVuIG1heWJlQXJyYXksIHByaW50IGFuIGVtcHR5IHN0cmluZyBpZiBpdCBpcyBudWxsIG9yIGVtcHR5LCBvdGhlcndpc2VcbiAqIHByaW50IGFsbCBpdGVtcyB0b2dldGhlciBzZXBhcmF0ZWQgYnkgc2VwYXJhdG9yIGlmIHByb3ZpZGVkXG4gKi9cblxuZnVuY3Rpb24gam9pbihtYXliZUFycmF5LCBzZXBhcmF0b3IgPSAnJykge1xuICB2YXIgX21heWJlQXJyYXkkZmlsdGVyJGpvO1xuXG4gIHJldHVybiAoX21heWJlQXJyYXkkZmlsdGVyJGpvID1cbiAgICBtYXliZUFycmF5ID09PSBudWxsIHx8IG1heWJlQXJyYXkgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVBcnJheS5maWx0ZXIoKHgpID0+IHgpLmpvaW4oc2VwYXJhdG9yKSkgIT09IG51bGwgJiZcbiAgICBfbWF5YmVBcnJheSRmaWx0ZXIkam8gIT09IHZvaWQgMFxuICAgID8gX21heWJlQXJyYXkkZmlsdGVyJGpvXG4gICAgOiAnJztcbn1cbi8qKlxuICogR2l2ZW4gYXJyYXksIHByaW50IGVhY2ggaXRlbSBvbiBpdHMgb3duIGxpbmUsIHdyYXBwZWQgaW4gYW4gaW5kZW50ZWQgYHsgfWAgYmxvY2suXG4gKi9cblxuZnVuY3Rpb24gYmxvY2soYXJyYXkpIHtcbiAgcmV0dXJuIHdyYXAoJ3tcXG4nLCBpbmRlbnQoam9pbihhcnJheSwgJ1xcbicpKSwgJ1xcbn0nKTtcbn1cbi8qKlxuICogSWYgbWF5YmVTdHJpbmcgaXMgbm90IG51bGwgb3IgZW1wdHksIHRoZW4gd3JhcCB3aXRoIHN0YXJ0IGFuZCBlbmQsIG90aGVyd2lzZSBwcmludCBhbiBlbXB0eSBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gd3JhcChzdGFydCwgbWF5YmVTdHJpbmcsIGVuZCA9ICcnKSB7XG4gIHJldHVybiBtYXliZVN0cmluZyAhPSBudWxsICYmIG1heWJlU3RyaW5nICE9PSAnJ1xuICAgID8gc3RhcnQgKyBtYXliZVN0cmluZyArIGVuZFxuICAgIDogJyc7XG59XG5cbmZ1bmN0aW9uIGluZGVudChzdHIpIHtcbiAgcmV0dXJuIHdyYXAoJyAgJywgc3RyLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKSk7XG59XG5cbmZ1bmN0aW9uIGhhc011bHRpbGluZUl0ZW1zKG1heWJlQXJyYXkpIHtcbiAgdmFyIF9tYXliZUFycmF5JHNvbWU7XG5cbiAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gKF9tYXliZUFycmF5JHNvbWUgPVxuICAgIG1heWJlQXJyYXkgPT09IG51bGwgfHwgbWF5YmVBcnJheSA9PT0gdm9pZCAwXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBtYXliZUFycmF5LnNvbWUoKHN0cikgPT4gc3RyLmluY2x1ZGVzKCdcXG4nKSkpICE9PSBudWxsICYmXG4gICAgX21heWJlQXJyYXkkc29tZSAhPT0gdm9pZCAwXG4gICAgPyBfbWF5YmVBcnJheSRzb21lXG4gICAgOiBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5CUkVBSyA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0RW50ZXJMZWF2ZUZvcktpbmQgPSBnZXRFbnRlckxlYXZlRm9yS2luZDtcbmV4cG9ydHMuZ2V0VmlzaXRGbiA9IGdldFZpc2l0Rm47XG5leHBvcnRzLnZpc2l0ID0gdmlzaXQ7XG5leHBvcnRzLnZpc2l0SW5QYXJhbGxlbCA9IHZpc2l0SW5QYXJhbGxlbDtcblxudmFyIF9kZXZBc3NlcnQgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2RldkFzc2VydC5qcycpO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9hc3QgPSByZXF1aXJlKCcuL2FzdC5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi9raW5kcy5qcycpO1xuXG5jb25zdCBCUkVBSyA9IE9iamVjdC5mcmVlemUoe30pO1xuLyoqXG4gKiB2aXNpdCgpIHdpbGwgd2FsayB0aHJvdWdoIGFuIEFTVCB1c2luZyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCwgY2FsbGluZ1xuICogdGhlIHZpc2l0b3IncyBlbnRlciBmdW5jdGlvbiBhdCBlYWNoIG5vZGUgaW4gdGhlIHRyYXZlcnNhbCwgYW5kIGNhbGxpbmcgdGhlXG4gKiBsZWF2ZSBmdW5jdGlvbiBhZnRlciB2aXNpdGluZyB0aGF0IG5vZGUgYW5kIGFsbCBvZiBpdHMgY2hpbGQgbm9kZXMuXG4gKlxuICogQnkgcmV0dXJuaW5nIGRpZmZlcmVudCB2YWx1ZXMgZnJvbSB0aGUgZW50ZXIgYW5kIGxlYXZlIGZ1bmN0aW9ucywgdGhlXG4gKiBiZWhhdmlvciBvZiB0aGUgdmlzaXRvciBjYW4gYmUgYWx0ZXJlZCwgaW5jbHVkaW5nIHNraXBwaW5nIG92ZXIgYSBzdWItdHJlZSBvZlxuICogdGhlIEFTVCAoYnkgcmV0dXJuaW5nIGZhbHNlKSwgZWRpdGluZyB0aGUgQVNUIGJ5IHJldHVybmluZyBhIHZhbHVlIG9yIG51bGxcbiAqIHRvIHJlbW92ZSB0aGUgdmFsdWUsIG9yIHRvIHN0b3AgdGhlIHdob2xlIHRyYXZlcnNhbCBieSByZXR1cm5pbmcgQlJFQUsuXG4gKlxuICogV2hlbiB1c2luZyB2aXNpdCgpIHRvIGVkaXQgYW4gQVNULCB0aGUgb3JpZ2luYWwgQVNUIHdpbGwgbm90IGJlIG1vZGlmaWVkLCBhbmRcbiAqIGEgbmV3IHZlcnNpb24gb2YgdGhlIEFTVCB3aXRoIHRoZSBjaGFuZ2VzIGFwcGxpZWQgd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoZVxuICogdmlzaXQgZnVuY3Rpb24uXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGVkaXRlZEFTVCA9IHZpc2l0KGFzdCwge1xuICogICBlbnRlcihub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKSB7XG4gKiAgICAgLy8gQHJldHVyblxuICogICAgIC8vICAgdW5kZWZpbmVkOiBubyBhY3Rpb25cbiAqICAgICAvLyAgIGZhbHNlOiBza2lwIHZpc2l0aW5nIHRoaXMgbm9kZVxuICogICAgIC8vICAgdmlzaXRvci5CUkVBSzogc3RvcCB2aXNpdGluZyBhbHRvZ2V0aGVyXG4gKiAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgLy8gICBhbnkgdmFsdWU6IHJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIHJldHVybmVkIHZhbHVlXG4gKiAgIH0sXG4gKiAgIGxlYXZlKG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpIHtcbiAqICAgICAvLyBAcmV0dXJuXG4gKiAgICAgLy8gICB1bmRlZmluZWQ6IG5vIGFjdGlvblxuICogICAgIC8vICAgZmFsc2U6IG5vIGFjdGlvblxuICogICAgIC8vICAgdmlzaXRvci5CUkVBSzogc3RvcCB2aXNpdGluZyBhbHRvZ2V0aGVyXG4gKiAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgLy8gICBhbnkgdmFsdWU6IHJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIHJldHVybmVkIHZhbHVlXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQWx0ZXJuYXRpdmVseSB0byBwcm92aWRpbmcgZW50ZXIoKSBhbmQgbGVhdmUoKSBmdW5jdGlvbnMsIGEgdmlzaXRvciBjYW5cbiAqIGluc3RlYWQgcHJvdmlkZSBmdW5jdGlvbnMgbmFtZWQgdGhlIHNhbWUgYXMgdGhlIGtpbmRzIG9mIEFTVCBub2Rlcywgb3JcbiAqIGVudGVyL2xlYXZlIHZpc2l0b3JzIGF0IGEgbmFtZWQga2V5LCBsZWFkaW5nIHRvIHRocmVlIHBlcm11dGF0aW9ucyBvZiB0aGVcbiAqIHZpc2l0b3IgQVBJOlxuICpcbiAqIDEpIE5hbWVkIHZpc2l0b3JzIHRyaWdnZXJlZCB3aGVuIGVudGVyaW5nIGEgbm9kZSBvZiBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogYGBgdHNcbiAqIHZpc2l0KGFzdCwge1xuICogICBLaW5kKG5vZGUpIHtcbiAqICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKlxuICogMikgTmFtZWQgdmlzaXRvcnMgdGhhdCB0cmlnZ2VyIHVwb24gZW50ZXJpbmcgYW5kIGxlYXZpbmcgYSBub2RlIG9mIGEgc3BlY2lmaWMga2luZC5cbiAqXG4gKiBgYGB0c1xuICogdmlzaXQoYXN0LCB7XG4gKiAgIEtpbmQ6IHtcbiAqICAgICBlbnRlcihub2RlKSB7XG4gKiAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgIH1cbiAqICAgICBsZWF2ZShub2RlKSB7XG4gKiAgICAgICAvLyBsZWF2ZSB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICpcbiAqIDMpIEdlbmVyaWMgdmlzaXRvcnMgdGhhdCB0cmlnZ2VyIHVwb24gZW50ZXJpbmcgYW5kIGxlYXZpbmcgYW55IG5vZGUuXG4gKlxuICogYGBgdHNcbiAqIHZpc2l0KGFzdCwge1xuICogICBlbnRlcihub2RlKSB7XG4gKiAgICAgLy8gZW50ZXIgYW55IG5vZGVcbiAqICAgfSxcbiAqICAgbGVhdmUobm9kZSkge1xuICogICAgIC8vIGxlYXZlIGFueSBub2RlXG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqL1xuXG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5cbmZ1bmN0aW9uIHZpc2l0KHJvb3QsIHZpc2l0b3IsIHZpc2l0b3JLZXlzID0gX2FzdC5RdWVyeURvY3VtZW50S2V5cykge1xuICBjb25zdCBlbnRlckxlYXZlTWFwID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3Qga2luZCBvZiBPYmplY3QudmFsdWVzKF9raW5kcy5LaW5kKSkge1xuICAgIGVudGVyTGVhdmVNYXAuc2V0KGtpbmQsIGdldEVudGVyTGVhdmVGb3JLaW5kKHZpc2l0b3IsIGtpbmQpKTtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZi1pbml0ICovXG5cbiAgbGV0IHN0YWNrID0gdW5kZWZpbmVkO1xuICBsZXQgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkocm9vdCk7XG4gIGxldCBrZXlzID0gW3Jvb3RdO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgbGV0IGVkaXRzID0gW107XG4gIGxldCBub2RlID0gcm9vdDtcbiAgbGV0IGtleSA9IHVuZGVmaW5lZDtcbiAgbGV0IHBhcmVudCA9IHVuZGVmaW5lZDtcbiAgY29uc3QgcGF0aCA9IFtdO1xuICBjb25zdCBhbmNlc3RvcnMgPSBbXTtcbiAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZi1pbml0ICovXG5cbiAgZG8ge1xuICAgIGluZGV4Kys7XG4gICAgY29uc3QgaXNMZWF2aW5nID0gaW5kZXggPT09IGtleXMubGVuZ3RoO1xuICAgIGNvbnN0IGlzRWRpdGVkID0gaXNMZWF2aW5nICYmIGVkaXRzLmxlbmd0aCAhPT0gMDtcblxuICAgIGlmIChpc0xlYXZpbmcpIHtcbiAgICAgIGtleSA9IGFuY2VzdG9ycy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgcGFyZW50ID0gYW5jZXN0b3JzLnBvcCgpO1xuXG4gICAgICBpZiAoaXNFZGl0ZWQpIHtcbiAgICAgICAgaWYgKGluQXJyYXkpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5zbGljZSgpO1xuICAgICAgICAgIGxldCBlZGl0T2Zmc2V0ID0gMDtcblxuICAgICAgICAgIGZvciAoY29uc3QgW2VkaXRLZXksIGVkaXRWYWx1ZV0gb2YgZWRpdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5S2V5ID0gZWRpdEtleSAtIGVkaXRPZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmIChlZGl0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgbm9kZS5zcGxpY2UoYXJyYXlLZXksIDEpO1xuICAgICAgICAgICAgICBlZGl0T2Zmc2V0Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlW2FycmF5S2V5XSA9IGVkaXRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhub2RlKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBbZWRpdEtleSwgZWRpdFZhbHVlXSBvZiBlZGl0cykge1xuICAgICAgICAgICAgbm9kZVtlZGl0S2V5XSA9IGVkaXRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBzdGFjay5pbmRleDtcbiAgICAgIGtleXMgPSBzdGFjay5rZXlzO1xuICAgICAgZWRpdHMgPSBzdGFjay5lZGl0cztcbiAgICAgIGluQXJyYXkgPSBzdGFjay5pbkFycmF5O1xuICAgICAgc3RhY2sgPSBzdGFjay5wcmV2O1xuICAgIH0gZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICBrZXkgPSBpbkFycmF5ID8gaW5kZXggOiBrZXlzW2luZGV4XTtcbiAgICAgIG5vZGUgPSBwYXJlbnRba2V5XTtcblxuICAgICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwYXRoLnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICB2YXIgX2VudGVyTGVhdmVNYXAkZ2V0LCBfZW50ZXJMZWF2ZU1hcCRnZXQyO1xuXG4gICAgICAoMCwgX2FzdC5pc05vZGUpKG5vZGUpIHx8XG4gICAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYEludmFsaWQgQVNUIE5vZGU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKG5vZGUpfS5gLFxuICAgICAgICApO1xuICAgICAgY29uc3QgdmlzaXRGbiA9IGlzTGVhdmluZ1xuICAgICAgICA/IChfZW50ZXJMZWF2ZU1hcCRnZXQgPSBlbnRlckxlYXZlTWFwLmdldChub2RlLmtpbmQpKSA9PT0gbnVsbCB8fFxuICAgICAgICAgIF9lbnRlckxlYXZlTWFwJGdldCA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IF9lbnRlckxlYXZlTWFwJGdldC5sZWF2ZVxuICAgICAgICA6IChfZW50ZXJMZWF2ZU1hcCRnZXQyID0gZW50ZXJMZWF2ZU1hcC5nZXQobm9kZS5raW5kKSkgPT09IG51bGwgfHxcbiAgICAgICAgICBfZW50ZXJMZWF2ZU1hcCRnZXQyID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBfZW50ZXJMZWF2ZU1hcCRnZXQyLmVudGVyO1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgdmlzaXRGbiA9PT0gbnVsbCB8fCB2aXNpdEZuID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogdmlzaXRGbi5jYWxsKHZpc2l0b3IsIG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICBwYXRoLnBvcCgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVkaXRzLnB1c2goW2tleSwgcmVzdWx0XSk7XG5cbiAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICBpZiAoKDAsIF9hc3QuaXNOb2RlKShyZXN1bHQpKSB7XG4gICAgICAgICAgICBub2RlID0gcmVzdWx0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGlzRWRpdGVkKSB7XG4gICAgICBlZGl0cy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX25vZGUka2luZDtcblxuICAgICAgc3RhY2sgPSB7XG4gICAgICAgIGluQXJyYXksXG4gICAgICAgIGluZGV4LFxuICAgICAgICBrZXlzLFxuICAgICAgICBlZGl0cyxcbiAgICAgICAgcHJldjogc3RhY2ssXG4gICAgICB9O1xuICAgICAgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZSk7XG4gICAgICBrZXlzID0gaW5BcnJheVxuICAgICAgICA/IG5vZGVcbiAgICAgICAgOiAoX25vZGUka2luZCA9IHZpc2l0b3JLZXlzW25vZGUua2luZF0pICE9PSBudWxsICYmXG4gICAgICAgICAgX25vZGUka2luZCAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGUka2luZFxuICAgICAgICA6IFtdO1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGVkaXRzID0gW107XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gbm9kZTtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YWNrICE9PSB1bmRlZmluZWQpO1xuXG4gIGlmIChlZGl0cy5sZW5ndGggIT09IDApIHtcbiAgICAvLyBOZXcgcm9vdFxuICAgIHJldHVybiBlZGl0c1tlZGl0cy5sZW5ndGggLSAxXVsxXTtcbiAgfVxuXG4gIHJldHVybiByb290O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZpc2l0b3IgaW5zdGFuY2Ugd2hpY2ggZGVsZWdhdGVzIHRvIG1hbnkgdmlzaXRvcnMgdG8gcnVuIGluXG4gKiBwYXJhbGxlbC4gRWFjaCB2aXNpdG9yIHdpbGwgYmUgdmlzaXRlZCBmb3IgZWFjaCBub2RlIGJlZm9yZSBtb3Zpbmcgb24uXG4gKlxuICogSWYgYSBwcmlvciB2aXNpdG9yIGVkaXRzIGEgbm9kZSwgbm8gZm9sbG93aW5nIHZpc2l0b3JzIHdpbGwgc2VlIHRoYXQgbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiB2aXNpdEluUGFyYWxsZWwodmlzaXRvcnMpIHtcbiAgY29uc3Qgc2tpcHBpbmcgPSBuZXcgQXJyYXkodmlzaXRvcnMubGVuZ3RoKS5maWxsKG51bGwpO1xuICBjb25zdCBtZXJnZWRWaXNpdG9yID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGtpbmQgb2YgT2JqZWN0LnZhbHVlcyhfa2luZHMuS2luZCkpIHtcbiAgICBsZXQgaGFzVmlzaXRvciA9IGZhbHNlO1xuICAgIGNvbnN0IGVudGVyTGlzdCA9IG5ldyBBcnJheSh2aXNpdG9ycy5sZW5ndGgpLmZpbGwodW5kZWZpbmVkKTtcbiAgICBjb25zdCBsZWF2ZUxpc3QgPSBuZXcgQXJyYXkodmlzaXRvcnMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpc2l0b3JzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCB7IGVudGVyLCBsZWF2ZSB9ID0gZ2V0RW50ZXJMZWF2ZUZvcktpbmQodmlzaXRvcnNbaV0sIGtpbmQpO1xuICAgICAgaGFzVmlzaXRvciB8fCAoaGFzVmlzaXRvciA9IGVudGVyICE9IG51bGwgfHwgbGVhdmUgIT0gbnVsbCk7XG4gICAgICBlbnRlckxpc3RbaV0gPSBlbnRlcjtcbiAgICAgIGxlYXZlTGlzdFtpXSA9IGxlYXZlO1xuICAgIH1cblxuICAgIGlmICghaGFzVmlzaXRvcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWVyZ2VkRW50ZXJMZWF2ZSA9IHtcbiAgICAgIGVudGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aXNpdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChza2lwcGluZ1tpXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9lbnRlckxpc3QkaTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID1cbiAgICAgICAgICAgICAgKF9lbnRlckxpc3QkaSA9IGVudGVyTGlzdFtpXSkgPT09IG51bGwgfHwgX2VudGVyTGlzdCRpID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICAgIDogX2VudGVyTGlzdCRpLmFwcGx5KHZpc2l0b3JzW2ldLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgc2tpcHBpbmdbaV0gPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBsZWF2ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlzaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc2tpcHBpbmdbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBfbGVhdmVMaXN0JGk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICAgICAgICAgIChfbGVhdmVMaXN0JGkgPSBsZWF2ZUxpc3RbaV0pID09PSBudWxsIHx8IF9sZWF2ZUxpc3QkaSA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgICA6IF9sZWF2ZUxpc3QkaS5hcHBseSh2aXNpdG9yc1tpXSwgYXJncyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHNraXBwaW5nW2ldID09PSBub2RlKSB7XG4gICAgICAgICAgICBza2lwcGluZ1tpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gICAgbWVyZ2VkVmlzaXRvcltraW5kXSA9IG1lcmdlZEVudGVyTGVhdmU7XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkVmlzaXRvcjtcbn1cbi8qKlxuICogR2l2ZW4gYSB2aXNpdG9yIGluc3RhbmNlIGFuZCBhIG5vZGUga2luZCwgcmV0dXJuIEVudGVyTGVhdmVWaXNpdG9yIGZvciB0aGF0IGtpbmQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RW50ZXJMZWF2ZUZvcktpbmQodmlzaXRvciwga2luZCkge1xuICBjb25zdCBraW5kVmlzaXRvciA9IHZpc2l0b3Jba2luZF07XG5cbiAgaWYgKHR5cGVvZiBraW5kVmlzaXRvciA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyB7IEtpbmQ6IHsgZW50ZXIoKSB7fSwgbGVhdmUoKSB7fSB9IH1cbiAgICByZXR1cm4ga2luZFZpc2l0b3I7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGtpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8geyBLaW5kKCkge30gfVxuICAgIHJldHVybiB7XG4gICAgICBlbnRlcjoga2luZFZpc2l0b3IsXG4gICAgICBsZWF2ZTogdW5kZWZpbmVkLFxuICAgIH07XG4gIH0gLy8geyBlbnRlcigpIHt9LCBsZWF2ZSgpIHt9IH1cblxuICByZXR1cm4ge1xuICAgIGVudGVyOiB2aXNpdG9yLmVudGVyLFxuICAgIGxlYXZlOiB2aXNpdG9yLmxlYXZlLFxuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBhIHZpc2l0b3IgaW5zdGFuY2UsIGlmIGl0IGlzIGxlYXZpbmcgb3Igbm90LCBhbmQgYSBub2RlIGtpbmQsIHJldHVyblxuICogdGhlIGZ1bmN0aW9uIHRoZSB2aXNpdG9yIHJ1bnRpbWUgc2hvdWxkIGNhbGwuXG4gKlxuICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgZ2V0RW50ZXJMZWF2ZUZvcktpbmRgIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2MTdcbiAqL1xuXG4vKiBjOCBpZ25vcmUgbmV4dCA4ICovXG5cbmZ1bmN0aW9uIGdldFZpc2l0Rm4odmlzaXRvciwga2luZCwgaXNMZWF2aW5nKSB7XG4gIGNvbnN0IHsgZW50ZXIsIGxlYXZlIH0gPSBnZXRFbnRlckxlYXZlRm9yS2luZCh2aXNpdG9yLCBraW5kKTtcbiAgcmV0dXJuIGlzTGVhdmluZyA/IGxlYXZlIDogZW50ZXI7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuYXNzZXJ0RW51bVZhbHVlTmFtZSA9IGFzc2VydEVudW1WYWx1ZU5hbWU7XG5leHBvcnRzLmFzc2VydE5hbWUgPSBhc3NlcnROYW1lO1xuXG52YXIgX2RldkFzc2VydCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfY2hhcmFjdGVyQ2xhc3NlcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMuanMnKTtcblxuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0TmFtZShuYW1lKSB7XG4gIG5hbWUgIT0gbnVsbCB8fCAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKGZhbHNlLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoZmFsc2UsICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgc3RyaW5nLicpO1xuXG4gIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nLFxuICAgICk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMTsgaSA8IG5hbWUubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoISgwLCBfY2hhcmFjdGVyQ2xhc3Nlcy5pc05hbWVDb250aW51ZSkobmFtZS5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgTmFtZXMgbXVzdCBvbmx5IGNvbnRhaW4gW19hLXpBLVowLTldIGJ1dCBcIiR7bmFtZX1cIiBkb2VzIG5vdC5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoISgwLCBfY2hhcmFjdGVyQ2xhc3Nlcy5pc05hbWVTdGFydCkobmFtZS5jaGFyQ29kZUF0KDApKSkge1xuICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgIGBOYW1lcyBtdXN0IHN0YXJ0IHdpdGggW19hLXpBLVpdIGJ1dCBcIiR7bmFtZX1cIiBkb2VzIG5vdC5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cbi8qKlxuICogVXBob2xkcyB0aGUgc3BlYyBydWxlcyBhYm91dCBuYW1pbmcgZW51bSB2YWx1ZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0RW51bVZhbHVlTmFtZShuYW1lKSB7XG4gIGlmIChuYW1lID09PSAndHJ1ZScgfHwgbmFtZSA9PT0gJ2ZhbHNlJyB8fCBuYW1lID09PSAnbnVsbCcpIHtcbiAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICBgRW51bSB2YWx1ZXMgY2Fubm90IGJlIG5hbWVkOiAke25hbWV9YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydE5hbWUobmFtZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuR3JhcGhRTFVuaW9uVHlwZSA9XG4gIGV4cG9ydHMuR3JhcGhRTFNjYWxhclR5cGUgPVxuICBleHBvcnRzLkdyYXBoUUxPYmplY3RUeXBlID1cbiAgZXhwb3J0cy5HcmFwaFFMTm9uTnVsbCA9XG4gIGV4cG9ydHMuR3JhcGhRTExpc3QgPVxuICBleHBvcnRzLkdyYXBoUUxJbnRlcmZhY2VUeXBlID1cbiAgZXhwb3J0cy5HcmFwaFFMSW5wdXRPYmplY3RUeXBlID1cbiAgZXhwb3J0cy5HcmFwaFFMRW51bVR5cGUgPVxuICAgIHZvaWQgMDtcbmV4cG9ydHMuYXJnc1RvQXJnc0NvbmZpZyA9IGFyZ3NUb0FyZ3NDb25maWc7XG5leHBvcnRzLmFzc2VydEFic3RyYWN0VHlwZSA9IGFzc2VydEFic3RyYWN0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0Q29tcG9zaXRlVHlwZSA9IGFzc2VydENvbXBvc2l0ZVR5cGU7XG5leHBvcnRzLmFzc2VydEVudW1UeXBlID0gYXNzZXJ0RW51bVR5cGU7XG5leHBvcnRzLmFzc2VydElucHV0T2JqZWN0VHlwZSA9IGFzc2VydElucHV0T2JqZWN0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0SW5wdXRUeXBlID0gYXNzZXJ0SW5wdXRUeXBlO1xuZXhwb3J0cy5hc3NlcnRJbnRlcmZhY2VUeXBlID0gYXNzZXJ0SW50ZXJmYWNlVHlwZTtcbmV4cG9ydHMuYXNzZXJ0TGVhZlR5cGUgPSBhc3NlcnRMZWFmVHlwZTtcbmV4cG9ydHMuYXNzZXJ0TGlzdFR5cGUgPSBhc3NlcnRMaXN0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0TmFtZWRUeXBlID0gYXNzZXJ0TmFtZWRUeXBlO1xuZXhwb3J0cy5hc3NlcnROb25OdWxsVHlwZSA9IGFzc2VydE5vbk51bGxUeXBlO1xuZXhwb3J0cy5hc3NlcnROdWxsYWJsZVR5cGUgPSBhc3NlcnROdWxsYWJsZVR5cGU7XG5leHBvcnRzLmFzc2VydE9iamVjdFR5cGUgPSBhc3NlcnRPYmplY3RUeXBlO1xuZXhwb3J0cy5hc3NlcnRPdXRwdXRUeXBlID0gYXNzZXJ0T3V0cHV0VHlwZTtcbmV4cG9ydHMuYXNzZXJ0U2NhbGFyVHlwZSA9IGFzc2VydFNjYWxhclR5cGU7XG5leHBvcnRzLmFzc2VydFR5cGUgPSBhc3NlcnRUeXBlO1xuZXhwb3J0cy5hc3NlcnRVbmlvblR5cGUgPSBhc3NlcnRVbmlvblR5cGU7XG5leHBvcnRzLmFzc2VydFdyYXBwaW5nVHlwZSA9IGFzc2VydFdyYXBwaW5nVHlwZTtcbmV4cG9ydHMuZGVmaW5lQXJndW1lbnRzID0gZGVmaW5lQXJndW1lbnRzO1xuZXhwb3J0cy5nZXROYW1lZFR5cGUgPSBnZXROYW1lZFR5cGU7XG5leHBvcnRzLmdldE51bGxhYmxlVHlwZSA9IGdldE51bGxhYmxlVHlwZTtcbmV4cG9ydHMuaXNBYnN0cmFjdFR5cGUgPSBpc0Fic3RyYWN0VHlwZTtcbmV4cG9ydHMuaXNDb21wb3NpdGVUeXBlID0gaXNDb21wb3NpdGVUeXBlO1xuZXhwb3J0cy5pc0VudW1UeXBlID0gaXNFbnVtVHlwZTtcbmV4cG9ydHMuaXNJbnB1dE9iamVjdFR5cGUgPSBpc0lucHV0T2JqZWN0VHlwZTtcbmV4cG9ydHMuaXNJbnB1dFR5cGUgPSBpc0lucHV0VHlwZTtcbmV4cG9ydHMuaXNJbnRlcmZhY2VUeXBlID0gaXNJbnRlcmZhY2VUeXBlO1xuZXhwb3J0cy5pc0xlYWZUeXBlID0gaXNMZWFmVHlwZTtcbmV4cG9ydHMuaXNMaXN0VHlwZSA9IGlzTGlzdFR5cGU7XG5leHBvcnRzLmlzTmFtZWRUeXBlID0gaXNOYW1lZFR5cGU7XG5leHBvcnRzLmlzTm9uTnVsbFR5cGUgPSBpc05vbk51bGxUeXBlO1xuZXhwb3J0cy5pc051bGxhYmxlVHlwZSA9IGlzTnVsbGFibGVUeXBlO1xuZXhwb3J0cy5pc09iamVjdFR5cGUgPSBpc09iamVjdFR5cGU7XG5leHBvcnRzLmlzT3V0cHV0VHlwZSA9IGlzT3V0cHV0VHlwZTtcbmV4cG9ydHMuaXNSZXF1aXJlZEFyZ3VtZW50ID0gaXNSZXF1aXJlZEFyZ3VtZW50O1xuZXhwb3J0cy5pc1JlcXVpcmVkSW5wdXRGaWVsZCA9IGlzUmVxdWlyZWRJbnB1dEZpZWxkO1xuZXhwb3J0cy5pc1NjYWxhclR5cGUgPSBpc1NjYWxhclR5cGU7XG5leHBvcnRzLmlzVHlwZSA9IGlzVHlwZTtcbmV4cG9ydHMuaXNVbmlvblR5cGUgPSBpc1VuaW9uVHlwZTtcbmV4cG9ydHMuaXNXcmFwcGluZ1R5cGUgPSBpc1dyYXBwaW5nVHlwZTtcbmV4cG9ydHMucmVzb2x2ZU9iak1hcFRodW5rID0gcmVzb2x2ZU9iak1hcFRodW5rO1xuZXhwb3J0cy5yZXNvbHZlUmVhZG9ubHlBcnJheVRodW5rID0gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuaztcblxudmFyIF9kZXZBc3NlcnQgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2RldkFzc2VydC5qcycpO1xuXG52YXIgX2RpZFlvdU1lYW4gPSByZXF1aXJlKCcuLi9qc3V0aWxzL2RpZFlvdU1lYW4uanMnKTtcblxudmFyIF9pZGVudGl0eUZ1bmMgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2lkZW50aXR5RnVuYy5qcycpO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9pbnN0YW5jZU9mID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnN0YW5jZU9mLmpzJyk7XG5cbnZhciBfaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi4vanN1dGlscy9pc09iamVjdExpa2UuanMnKTtcblxudmFyIF9rZXlNYXAgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2tleU1hcC5qcycpO1xuXG52YXIgX2tleVZhbE1hcCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMva2V5VmFsTWFwLmpzJyk7XG5cbnZhciBfbWFwVmFsdWUgPSByZXF1aXJlKCcuLi9qc3V0aWxzL21hcFZhbHVlLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfdG9PYmpNYXAgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3RvT2JqTWFwLmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3ByaW50ZXIgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9wcmludGVyLmpzJyk7XG5cbnZhciBfdmFsdWVGcm9tQVNUVW50eXBlZCA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy92YWx1ZUZyb21BU1RVbnR5cGVkLmpzJyk7XG5cbnZhciBfYXNzZXJ0TmFtZSA9IHJlcXVpcmUoJy4vYXNzZXJ0TmFtZS5qcycpO1xuXG5mdW5jdGlvbiBpc1R5cGUodHlwZSkge1xuICByZXR1cm4gKFxuICAgIGlzU2NhbGFyVHlwZSh0eXBlKSB8fFxuICAgIGlzT2JqZWN0VHlwZSh0eXBlKSB8fFxuICAgIGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fFxuICAgIGlzVW5pb25UeXBlKHR5cGUpIHx8XG4gICAgaXNFbnVtVHlwZSh0eXBlKSB8fFxuICAgIGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHx8XG4gICAgaXNMaXN0VHlwZSh0eXBlKSB8fFxuICAgIGlzTm9uTnVsbFR5cGUodHlwZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlcmUgYXJlIHByZWRpY2F0ZXMgZm9yIGVhY2gga2luZCBvZiBHcmFwaFFMIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gaXNTY2FsYXJUeXBlKHR5cGUpIHtcbiAgcmV0dXJuICgwLCBfaW5zdGFuY2VPZi5pbnN0YW5jZU9mKSh0eXBlLCBHcmFwaFFMU2NhbGFyVHlwZSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNjYWxhclR5cGUodHlwZSkge1xuICBpZiAoIWlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIFNjYWxhciB0eXBlLmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFR5cGUodHlwZSkge1xuICByZXR1cm4gKDAsIF9pbnN0YW5jZU9mLmluc3RhbmNlT2YpKHR5cGUsIEdyYXBoUUxPYmplY3RUeXBlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgT2JqZWN0IHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB7XG4gIHJldHVybiAoMCwgX2luc3RhbmNlT2YuaW5zdGFuY2VPZikodHlwZSwgR3JhcGhRTEludGVyZmFjZVR5cGUpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJbnRlcmZhY2VUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBJbnRlcmZhY2UgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gaXNVbmlvblR5cGUodHlwZSkge1xuICByZXR1cm4gKDAsIF9pbnN0YW5jZU9mLmluc3RhbmNlT2YpKHR5cGUsIEdyYXBoUUxVbmlvblR5cGUpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRVbmlvblR5cGUodHlwZSkge1xuICBpZiAoIWlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgVW5pb24gdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gaXNFbnVtVHlwZSh0eXBlKSB7XG4gIHJldHVybiAoMCwgX2luc3RhbmNlT2YuaW5zdGFuY2VPZikodHlwZSwgR3JhcGhRTEVudW1UeXBlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0RW51bVR5cGUodHlwZSkge1xuICBpZiAoIWlzRW51bVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBFbnVtIHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmZ1bmN0aW9uIGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuICgwLCBfaW5zdGFuY2VPZi5pbnN0YW5jZU9mKSh0eXBlLCBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgdHlwZSxcbiAgICAgICl9IHRvIGJlIGEgR3JhcGhRTCBJbnB1dCBPYmplY3QgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gaXNMaXN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiAoMCwgX2luc3RhbmNlT2YuaW5zdGFuY2VPZikodHlwZSwgR3JhcGhRTExpc3QpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRMaXN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIExpc3QgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gaXNOb25OdWxsVHlwZSh0eXBlKSB7XG4gIHJldHVybiAoMCwgX2luc3RhbmNlT2YuaW5zdGFuY2VPZikodHlwZSwgR3JhcGhRTE5vbk51bGwpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnROb25OdWxsVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIE5vbi1OdWxsIHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBiZSB1c2VkIGFzIGlucHV0IHR5cGVzIGZvciBhcmd1bWVudHMgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cblxuZnVuY3Rpb24gaXNJbnB1dFR5cGUodHlwZSkge1xuICByZXR1cm4gKFxuICAgIGlzU2NhbGFyVHlwZSh0eXBlKSB8fFxuICAgIGlzRW51bVR5cGUodHlwZSkgfHxcbiAgICBpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSB8fFxuICAgIChpc1dyYXBwaW5nVHlwZSh0eXBlKSAmJiBpc0lucHV0VHlwZSh0eXBlLm9mVHlwZSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydElucHV0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNJbnB1dFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBpbnB1dCB0eXBlLmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgYmUgdXNlZCBhcyBvdXRwdXQgdHlwZXMgYXMgdGhlIHJlc3VsdCBvZiBmaWVsZHMuXG4gKi9cblxuZnVuY3Rpb24gaXNPdXRwdXRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIChcbiAgICBpc1NjYWxhclR5cGUodHlwZSkgfHxcbiAgICBpc09iamVjdFR5cGUodHlwZSkgfHxcbiAgICBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHxcbiAgICBpc1VuaW9uVHlwZSh0eXBlKSB8fFxuICAgIGlzRW51bVR5cGUodHlwZSkgfHxcbiAgICAoaXNXcmFwcGluZ1R5cGUodHlwZSkgJiYgaXNPdXRwdXRUeXBlKHR5cGUub2ZUeXBlKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3V0cHV0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNPdXRwdXRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgb3V0cHV0IHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0eXBlcyB3aGljaCBtYXkgYmUgbGVhZiB2YWx1ZXMuXG4gKi9cblxuZnVuY3Rpb24gaXNMZWFmVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNFbnVtVHlwZSh0eXBlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TGVhZlR5cGUodHlwZSkge1xuICBpZiAoIWlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBsZWFmIHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0aGUgcGFyZW50IGNvbnRleHQgb2YgYSBzZWxlY3Rpb24gc2V0LlxuICovXG5cbmZ1bmN0aW9uIGlzQ29tcG9zaXRlVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzVW5pb25UeXBlKHR5cGUpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRDb21wb3NpdGVUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBjb21wb3NpdGUgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgbWF5IGRlc2NyaWJlIHRoZSBwYXJlbnQgY29udGV4dCBvZiBhIHNlbGVjdGlvbiBzZXQuXG4gKi9cblxuZnVuY3Rpb24gaXNBYnN0cmFjdFR5cGUodHlwZSkge1xuICByZXR1cm4gaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzVW5pb25UeXBlKHR5cGUpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBYnN0cmFjdFR5cGUodHlwZSkge1xuICBpZiAoIWlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgYWJzdHJhY3QgdHlwZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogTGlzdCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIGxpc3QgaXMgYSB3cmFwcGluZyB0eXBlIHdoaWNoIHBvaW50cyB0byBhbm90aGVyIHR5cGUuXG4gKiBMaXN0cyBhcmUgb2Z0ZW4gY3JlYXRlZCB3aXRoaW4gdGhlIGNvbnRleHQgb2YgZGVmaW5pbmcgdGhlIGZpZWxkcyBvZlxuICogYW4gb2JqZWN0IHR5cGUuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgUGVyc29uVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgIG5hbWU6ICdQZXJzb24nLFxuICogICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgcGFyZW50czogeyB0eXBlOiBuZXcgR3JhcGhRTExpc3QoUGVyc29uVHlwZSkgfSxcbiAqICAgICBjaGlsZHJlbjogeyB0eXBlOiBuZXcgR3JhcGhRTExpc3QoUGVyc29uVHlwZSkgfSxcbiAqICAgfSlcbiAqIH0pXG4gKiBgYGBcbiAqL1xuXG5jbGFzcyBHcmFwaFFMTGlzdCB7XG4gIGNvbnN0cnVjdG9yKG9mVHlwZSkge1xuICAgIGlzVHlwZShvZlR5cGUpIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKG9mVHlwZSl9IHRvIGJlIGEgR3JhcGhRTCB0eXBlLmAsXG4gICAgICApO1xuICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTExpc3QnO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbJyArIFN0cmluZyh0aGlzLm9mVHlwZSkgKyAnXSc7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuLyoqXG4gKiBOb24tTnVsbCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIG5vbi1udWxsIGlzIGEgd3JhcHBpbmcgdHlwZSB3aGljaCBwb2ludHMgdG8gYW5vdGhlciB0eXBlLlxuICogTm9uLW51bGwgdHlwZXMgZW5mb3JjZSB0aGF0IHRoZWlyIHZhbHVlcyBhcmUgbmV2ZXIgbnVsbCBhbmQgY2FuIGVuc3VyZVxuICogYW4gZXJyb3IgaXMgcmFpc2VkIGlmIHRoaXMgZXZlciBvY2N1cnMgZHVyaW5nIGEgcmVxdWVzdC4gSXQgaXMgdXNlZnVsIGZvclxuICogZmllbGRzIHdoaWNoIHlvdSBjYW4gbWFrZSBhIHN0cm9uZyBndWFyYW50ZWUgb24gbm9uLW51bGxhYmlsaXR5LCBmb3IgZXhhbXBsZVxuICogdXN1YWxseSB0aGUgaWQgZmllbGQgb2YgYSBkYXRhYmFzZSByb3cgd2lsbCBuZXZlciBiZSBudWxsLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IFJvd1R5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnUm93JyxcbiAqICAgZmllbGRzOiAoKSA9PiAoe1xuICogICAgIGlkOiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSB9LFxuICogICB9KVxuICogfSlcbiAqIGBgYFxuICogTm90ZTogdGhlIGVuZm9yY2VtZW50IG9mIG5vbi1udWxsYWJpbGl0eSBvY2N1cnMgd2l0aGluIHRoZSBleGVjdXRvci5cbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxMaXN0ID0gR3JhcGhRTExpc3Q7XG5cbmNsYXNzIEdyYXBoUUxOb25OdWxsIHtcbiAgY29uc3RydWN0b3Iob2ZUeXBlKSB7XG4gICAgaXNOdWxsYWJsZVR5cGUob2ZUeXBlKSB8fFxuICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICBvZlR5cGUsXG4gICAgICAgICl9IHRvIGJlIGEgR3JhcGhRTCBudWxsYWJsZSB0eXBlLmAsXG4gICAgICApO1xuICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTE5vbk51bGwnO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLm9mVHlwZSkgKyAnISc7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyB3cmFwIGFuZCBtb2RpZnkgb3RoZXIgdHlwZXNcbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxOb25OdWxsID0gR3JhcGhRTE5vbk51bGw7XG5cbmZ1bmN0aW9uIGlzV3JhcHBpbmdUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzTGlzdFR5cGUodHlwZSkgfHwgaXNOb25OdWxsVHlwZSh0eXBlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0V3JhcHBpbmdUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1dyYXBwaW5nVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIHdyYXBwaW5nIHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIGNhbiBhbGwgYWNjZXB0IG51bGwgYXMgYSB2YWx1ZS5cbiAqL1xuXG5mdW5jdGlvbiBpc051bGxhYmxlVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1R5cGUodHlwZSkgJiYgIWlzTm9uTnVsbFR5cGUodHlwZSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE51bGxhYmxlVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOdWxsYWJsZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBudWxsYWJsZSB0eXBlLmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuXG5mdW5jdGlvbiBnZXROdWxsYWJsZVR5cGUodHlwZSkge1xuICBpZiAodHlwZSkge1xuICAgIHJldHVybiBpc05vbk51bGxUeXBlKHR5cGUpID8gdHlwZS5vZlR5cGUgOiB0eXBlO1xuICB9XG59XG4vKipcbiAqIFRoZXNlIG5hbWVkIHR5cGVzIGRvIG5vdCBpbmNsdWRlIG1vZGlmaWVycyBsaWtlIExpc3Qgb3IgTm9uTnVsbC5cbiAqL1xuXG5mdW5jdGlvbiBpc05hbWVkVHlwZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNTY2FsYXJUeXBlKHR5cGUpIHx8XG4gICAgaXNPYmplY3RUeXBlKHR5cGUpIHx8XG4gICAgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8XG4gICAgaXNVbmlvblR5cGUodHlwZSkgfHxcbiAgICBpc0VudW1UeXBlKHR5cGUpIHx8XG4gICAgaXNJbnB1dE9iamVjdFR5cGUodHlwZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TmFtZWRUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc05hbWVkVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIG5hbWVkIHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmZ1bmN0aW9uIGdldE5hbWVkVHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlKSB7XG4gICAgbGV0IHVud3JhcHBlZFR5cGUgPSB0eXBlO1xuXG4gICAgd2hpbGUgKGlzV3JhcHBpbmdUeXBlKHVud3JhcHBlZFR5cGUpKSB7XG4gICAgICB1bndyYXBwZWRUeXBlID0gdW53cmFwcGVkVHlwZS5vZlR5cGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVud3JhcHBlZFR5cGU7XG4gIH1cbn1cbi8qKlxuICogVXNlZCB3aGlsZSBkZWZpbmluZyBHcmFwaFFMIHR5cGVzIHRvIGFsbG93IGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGluXG4gKiBvdGhlcndpc2UgaW1tdXRhYmxlIHR5cGUgZGVmaW5pdGlvbnMuXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuayh0aHVuaykge1xuICByZXR1cm4gdHlwZW9mIHRodW5rID09PSAnZnVuY3Rpb24nID8gdGh1bmsoKSA6IHRodW5rO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlT2JqTWFwVGh1bmsodGh1bmspIHtcbiAgcmV0dXJuIHR5cGVvZiB0aHVuayA9PT0gJ2Z1bmN0aW9uJyA/IHRodW5rKCkgOiB0aHVuaztcbn1cbi8qKlxuICogQ3VzdG9tIGV4dGVuc2lvbnNcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIGEgdW5pcXVlIGlkZW50aWZpZXIgbmFtZSBmb3IgeW91ciBleHRlbnNpb24sIGZvciBleGFtcGxlIHRoZSBuYW1lIG9mXG4gKiB5b3VyIGxpYnJhcnkgb3IgcHJvamVjdC4gRG8gbm90IHVzZSBhIHNob3J0ZW5lZCBpZGVudGlmaWVyIGFzIHRoaXMgaW5jcmVhc2VzXG4gKiB0aGUgcmlzayBvZiBjb25mbGljdHMuIFdlIHJlY29tbWVuZCB5b3UgYWRkIGF0IG1vc3Qgb25lIGV4dGVuc2lvbiBmaWVsZCxcbiAqIGFuIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBhbGwgdGhlIHZhbHVlcyB5b3UgbmVlZC5cbiAqL1xuXG4vKipcbiAqIFNjYWxhciBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBUaGUgbGVhZiB2YWx1ZXMgb2YgYW55IHJlcXVlc3QgYW5kIGlucHV0IHZhbHVlcyB0byBhcmd1bWVudHMgYXJlXG4gKiBTY2FsYXJzIChvciBFbnVtcykgYW5kIGFyZSBkZWZpbmVkIHdpdGggYSBuYW1lIGFuZCBhIHNlcmllcyBvZiBmdW5jdGlvbnNcbiAqIHVzZWQgdG8gcGFyc2UgaW5wdXQgZnJvbSBhc3Qgb3IgdmFyaWFibGVzIGFuZCB0byBlbnN1cmUgdmFsaWRpdHkuXG4gKlxuICogSWYgYSB0eXBlJ3Mgc2VyaWFsaXplIGZ1bmN0aW9uIHJldHVybnMgYG51bGxgIG9yIGRvZXMgbm90IHJldHVybiBhIHZhbHVlXG4gKiAoaS5lLiBpdCByZXR1cm5zIGB1bmRlZmluZWRgKSB0aGVuIGFuIGVycm9yIHdpbGwgYmUgcmFpc2VkIGFuZCBhIGBudWxsYFxuICogdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgcmVzcG9uc2UuIEl0IGlzIGFsd2F5cyBiZXR0ZXIgdG8gdmFsaWRhdGVcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBPZGRUeXBlID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAqICAgbmFtZTogJ09kZCcsXG4gKiAgIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICogICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkge1xuICogICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICogICAgICAgICBgU2NhbGFyIFwiT2RkXCIgY2Fubm90IHJlcHJlc2VudCBcIiR7dmFsdWV9XCIgc2luY2UgaXQgaXMgbm90IGEgZmluaXRlIG51bWJlci5gLFxuICogICAgICAgKTtcbiAqICAgICB9XG4gKlxuICogICAgIGlmICh2YWx1ZSAlIDIgPT09IDApIHtcbiAqICAgICAgIHRocm93IG5ldyBFcnJvcihgU2NhbGFyIFwiT2RkXCIgY2Fubm90IHJlcHJlc2VudCBcIiR7dmFsdWV9XCIgc2luY2UgaXQgaXMgZXZlbi5gKTtcbiAqICAgICB9XG4gKiAgICAgcmV0dXJuIHZhbHVlO1xuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jbGFzcyBHcmFwaFFMU2NhbGFyVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJHBhcnNlVmFsdWUsXG4gICAgICBfY29uZmlnJHNlcmlhbGl6ZSxcbiAgICAgIF9jb25maWckcGFyc2VMaXRlcmFsLFxuICAgICAgX2NvbmZpZyRleHRlbnNpb25BU1ROO1xuXG4gICAgY29uc3QgcGFyc2VWYWx1ZSA9XG4gICAgICAoX2NvbmZpZyRwYXJzZVZhbHVlID0gY29uZmlnLnBhcnNlVmFsdWUpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJHBhcnNlVmFsdWUgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckcGFyc2VWYWx1ZVxuICAgICAgICA6IF9pZGVudGl0eUZ1bmMuaWRlbnRpdHlGdW5jO1xuICAgIHRoaXMubmFtZSA9ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShjb25maWcubmFtZSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLnNwZWNpZmllZEJ5VVJMID0gY29uZmlnLnNwZWNpZmllZEJ5VVJMO1xuICAgIHRoaXMuc2VyaWFsaXplID1cbiAgICAgIChfY29uZmlnJHNlcmlhbGl6ZSA9IGNvbmZpZy5zZXJpYWxpemUpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJHNlcmlhbGl6ZSAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRzZXJpYWxpemVcbiAgICAgICAgOiBfaWRlbnRpdHlGdW5jLmlkZW50aXR5RnVuYztcbiAgICB0aGlzLnBhcnNlVmFsdWUgPSBwYXJzZVZhbHVlO1xuICAgIHRoaXMucGFyc2VMaXRlcmFsID1cbiAgICAgIChfY29uZmlnJHBhcnNlTGl0ZXJhbCA9IGNvbmZpZy5wYXJzZUxpdGVyYWwpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJHBhcnNlTGl0ZXJhbCAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRwYXJzZUxpdGVyYWxcbiAgICAgICAgOiAobm9kZSwgdmFyaWFibGVzKSA9PlxuICAgICAgICAgICAgcGFyc2VWYWx1ZShcbiAgICAgICAgICAgICAgKDAsIF92YWx1ZUZyb21BU1RVbnR5cGVkLnZhbHVlRnJvbUFTVFVudHlwZWQpKG5vZGUsIHZhcmlhYmxlcyksXG4gICAgICAgICAgICApO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzID1cbiAgICAgIChfY29uZmlnJGV4dGVuc2lvbkFTVE4gPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE4gIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTlxuICAgICAgICA6IFtdO1xuICAgIGNvbmZpZy5zcGVjaWZpZWRCeVVSTCA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgY29uZmlnLnNwZWNpZmllZEJ5VVJMID09PSAnc3RyaW5nJyB8fFxuICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke3RoaXMubmFtZX0gbXVzdCBwcm92aWRlIFwic3BlY2lmaWVkQnlVUkxcIiBhcyBhIHN0cmluZywgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGNvbmZpZy5zcGVjaWZpZWRCeVVSTCl9LmAsXG4gICAgICApO1xuICAgIGNvbmZpZy5zZXJpYWxpemUgPT0gbnVsbCB8fFxuICAgICAgdHlwZW9mIGNvbmZpZy5zZXJpYWxpemUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBcInNlcmlhbGl6ZVwiIGZ1bmN0aW9uLiBJZiB0aGlzIGN1c3RvbSBTY2FsYXIgaXMgYWxzbyB1c2VkIGFzIGFuIGlucHV0IHR5cGUsIGVuc3VyZSBcInBhcnNlVmFsdWVcIiBhbmQgXCJwYXJzZUxpdGVyYWxcIiBmdW5jdGlvbnMgYXJlIGFsc28gcHJvdmlkZWQuYCxcbiAgICAgICk7XG5cbiAgICBpZiAoY29uZmlnLnBhcnNlTGl0ZXJhbCkge1xuICAgICAgKHR5cGVvZiBjb25maWcucGFyc2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgY29uZmlnLnBhcnNlTGl0ZXJhbCA9PT0gJ2Z1bmN0aW9uJykgfHxcbiAgICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBib3RoIFwicGFyc2VWYWx1ZVwiIGFuZCBcInBhcnNlTGl0ZXJhbFwiIGZ1bmN0aW9ucy5gLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxTY2FsYXJUeXBlJztcbiAgfVxuXG4gIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHNwZWNpZmllZEJ5VVJMOiB0aGlzLnNwZWNpZmllZEJ5VVJMLFxuICAgICAgc2VyaWFsaXplOiB0aGlzLnNlcmlhbGl6ZSxcbiAgICAgIHBhcnNlVmFsdWU6IHRoaXMucGFyc2VWYWx1ZSxcbiAgICAgIHBhcnNlTGl0ZXJhbDogdGhpcy5wYXJzZUxpdGVyYWwsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogdGhpcy5leHRlbnNpb25BU1ROb2RlcyxcbiAgICB9O1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbmV4cG9ydHMuR3JhcGhRTFNjYWxhclR5cGUgPSBHcmFwaFFMU2NhbGFyVHlwZTtcblxuLyoqXG4gKiBPYmplY3QgVHlwZSBEZWZpbml0aW9uXG4gKlxuICogQWxtb3N0IGFsbCBvZiB0aGUgR3JhcGhRTCB0eXBlcyB5b3UgZGVmaW5lIHdpbGwgYmUgb2JqZWN0IHR5cGVzLiBPYmplY3QgdHlwZXNcbiAqIGhhdmUgYSBuYW1lLCBidXQgbW9zdCBpbXBvcnRhbnRseSBkZXNjcmliZSB0aGVpciBmaWVsZHMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgQWRkcmVzc1R5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnQWRkcmVzcycsXG4gKiAgIGZpZWxkczoge1xuICogICAgIHN0cmVldDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gKiAgICAgbnVtYmVyOiB7IHR5cGU6IEdyYXBoUUxJbnQgfSxcbiAqICAgICBmb3JtYXR0ZWQ6IHtcbiAqICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gKiAgICAgICByZXNvbHZlKG9iaikge1xuICogICAgICAgICByZXR1cm4gb2JqLm51bWJlciArICcgJyArIG9iai5zdHJlZXRcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogV2hlbiB0d28gdHlwZXMgbmVlZCB0byByZWZlciB0byBlYWNoIG90aGVyLCBvciBhIHR5cGUgbmVlZHMgdG8gcmVmZXIgdG9cbiAqIGl0c2VsZiBpbiBhIGZpZWxkLCB5b3UgY2FuIHVzZSBhIGZ1bmN0aW9uIGV4cHJlc3Npb24gKGFrYSBhIGNsb3N1cmUgb3IgYVxuICogdGh1bmspIHRvIHN1cHBseSB0aGUgZmllbGRzIGxhemlseS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBQZXJzb25UeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgbmFtZTogJ1BlcnNvbicsXG4gKiAgIGZpZWxkczogKCkgPT4gKHtcbiAqICAgICBuYW1lOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAqICAgICBiZXN0RnJpZW5kOiB7IHR5cGU6IFBlcnNvblR5cGUgfSxcbiAqICAgfSlcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNsYXNzIEdyYXBoUUxPYmplY3RUeXBlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdmFyIF9jb25maWckZXh0ZW5zaW9uQVNUTjI7XG5cbiAgICB0aGlzLm5hbWUgPSAoMCwgX2Fzc2VydE5hbWUuYXNzZXJ0TmFtZSkoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5pc1R5cGVPZiA9IGNvbmZpZy5pc1R5cGVPZjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAoMCwgX3RvT2JqTWFwLnRvT2JqTWFwKShjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1ROMiA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTjIgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTjJcbiAgICAgICAgOiBbXTtcblxuICAgIHRoaXMuX2ZpZWxkcyA9ICgpID0+IGRlZmluZUZpZWxkTWFwKGNvbmZpZyk7XG5cbiAgICB0aGlzLl9pbnRlcmZhY2VzID0gKCkgPT4gZGVmaW5lSW50ZXJmYWNlcyhjb25maWcpO1xuXG4gICAgY29uZmlnLmlzVHlwZU9mID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjb25maWcuaXNUeXBlT2YgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBcImlzVHlwZU9mXCIgYXMgYSBmdW5jdGlvbiwgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGNvbmZpZy5pc1R5cGVPZil9LmAsXG4gICAgICApO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTE9iamVjdFR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgZ2V0SW50ZXJmYWNlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ludGVyZmFjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSB0aGlzLl9pbnRlcmZhY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludGVyZmFjZXM7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICBpc1R5cGVPZjogdGhpcy5pc1R5cGVPZixcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMT2JqZWN0VHlwZSA9IEdyYXBoUUxPYmplY3RUeXBlO1xuXG5mdW5jdGlvbiBkZWZpbmVJbnRlcmZhY2VzKGNvbmZpZykge1xuICB2YXIgX2NvbmZpZyRpbnRlcmZhY2VzO1xuXG4gIGNvbnN0IGludGVyZmFjZXMgPSByZXNvbHZlUmVhZG9ubHlBcnJheVRodW5rKFxuICAgIChfY29uZmlnJGludGVyZmFjZXMgPSBjb25maWcuaW50ZXJmYWNlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckaW50ZXJmYWNlcyAhPT0gdm9pZCAwXG4gICAgICA/IF9jb25maWckaW50ZXJmYWNlc1xuICAgICAgOiBbXSxcbiAgKTtcbiAgQXJyYXkuaXNBcnJheShpbnRlcmZhY2VzKSB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICBmYWxzZSxcbiAgICAgIGAke2NvbmZpZy5uYW1lfSBpbnRlcmZhY2VzIG11c3QgYmUgYW4gQXJyYXkgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIEFycmF5LmAsXG4gICAgKTtcbiAgcmV0dXJuIGludGVyZmFjZXM7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUZpZWxkTWFwKGNvbmZpZykge1xuICBjb25zdCBmaWVsZE1hcCA9IHJlc29sdmVPYmpNYXBUaHVuayhjb25maWcuZmllbGRzKTtcbiAgaXNQbGFpbk9iaihmaWVsZE1hcCkgfHxcbiAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgZmFsc2UsXG4gICAgICBgJHtjb25maWcubmFtZX0gZmllbGRzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggZmllbGQgbmFtZXMgYXMga2V5cyBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgc3VjaCBhbiBvYmplY3QuYCxcbiAgICApO1xuICByZXR1cm4gKDAsIF9tYXBWYWx1ZS5tYXBWYWx1ZSkoZmllbGRNYXAsIChmaWVsZENvbmZpZywgZmllbGROYW1lKSA9PiB7XG4gICAgdmFyIF9maWVsZENvbmZpZyRhcmdzO1xuXG4gICAgaXNQbGFpbk9iaihmaWVsZENvbmZpZykgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHtjb25maWcubmFtZX0uJHtmaWVsZE5hbWV9IGZpZWxkIGNvbmZpZyBtdXN0IGJlIGFuIG9iamVjdC5gLFxuICAgICAgKTtcbiAgICBmaWVsZENvbmZpZy5yZXNvbHZlID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBmaWVsZENvbmZpZy5yZXNvbHZlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7Y29uZmlnLm5hbWV9LiR7ZmllbGROYW1lfSBmaWVsZCByZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24gaWYgYCArXG4gICAgICAgICAgYHByb3ZpZGVkLCBidXQgZ290OiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShmaWVsZENvbmZpZy5yZXNvbHZlKX0uYCxcbiAgICAgICk7XG4gICAgY29uc3QgYXJnc0NvbmZpZyA9XG4gICAgICAoX2ZpZWxkQ29uZmlnJGFyZ3MgPSBmaWVsZENvbmZpZy5hcmdzKSAhPT0gbnVsbCAmJlxuICAgICAgX2ZpZWxkQ29uZmlnJGFyZ3MgIT09IHZvaWQgMFxuICAgICAgICA/IF9maWVsZENvbmZpZyRhcmdzXG4gICAgICAgIDoge307XG4gICAgaXNQbGFpbk9iaihhcmdzQ29uZmlnKSB8fFxuICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke2NvbmZpZy5uYW1lfS4ke2ZpZWxkTmFtZX0gYXJncyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGFyZ3VtZW50IG5hbWVzIGFzIGtleXMuYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShmaWVsZE5hbWUpLFxuICAgICAgZGVzY3JpcHRpb246IGZpZWxkQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGRDb25maWcudHlwZSxcbiAgICAgIGFyZ3M6IGRlZmluZUFyZ3VtZW50cyhhcmdzQ29uZmlnKSxcbiAgICAgIHJlc29sdmU6IGZpZWxkQ29uZmlnLnJlc29sdmUsXG4gICAgICBzdWJzY3JpYmU6IGZpZWxkQ29uZmlnLnN1YnNjcmliZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZENvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGZpZWxkQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgYXN0Tm9kZTogZmllbGRDb25maWcuYXN0Tm9kZSxcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lQXJndW1lbnRzKGNvbmZpZykge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29uZmlnKS5tYXAoKFthcmdOYW1lLCBhcmdDb25maWddKSA9PiAoe1xuICAgIG5hbWU6ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShhcmdOYW1lKSxcbiAgICBkZXNjcmlwdGlvbjogYXJnQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgIHR5cGU6IGFyZ0NvbmZpZy50eXBlLFxuICAgIGRlZmF1bHRWYWx1ZTogYXJnQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICBkZXByZWNhdGlvblJlYXNvbjogYXJnQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIGV4dGVuc2lvbnM6ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGFyZ0NvbmZpZy5leHRlbnNpb25zKSxcbiAgICBhc3ROb2RlOiBhcmdDb25maWcuYXN0Tm9kZSxcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBpc1BsYWluT2JqKG9iaikge1xuICByZXR1cm4gKDAsIF9pc09iamVjdExpa2UuaXNPYmplY3RMaWtlKShvYmopICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5cbmZ1bmN0aW9uIGZpZWxkc1RvRmllbGRzQ29uZmlnKGZpZWxkcykge1xuICByZXR1cm4gKDAsIF9tYXBWYWx1ZS5tYXBWYWx1ZSkoZmllbGRzLCAoZmllbGQpID0+ICh7XG4gICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgIHR5cGU6IGZpZWxkLnR5cGUsXG4gICAgYXJnczogYXJnc1RvQXJnc0NvbmZpZyhmaWVsZC5hcmdzKSxcbiAgICByZXNvbHZlOiBmaWVsZC5yZXNvbHZlLFxuICAgIHN1YnNjcmliZTogZmllbGQuc3Vic2NyaWJlLFxuICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbixcbiAgICBleHRlbnNpb25zOiBmaWVsZC5leHRlbnNpb25zLFxuICAgIGFzdE5vZGU6IGZpZWxkLmFzdE5vZGUsXG4gIH0pKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gYXJnc1RvQXJnc0NvbmZpZyhhcmdzKSB7XG4gIHJldHVybiAoMCwgX2tleVZhbE1hcC5rZXlWYWxNYXApKFxuICAgIGFyZ3MsXG4gICAgKGFyZykgPT4gYXJnLm5hbWUsXG4gICAgKGFyZykgPT4gKHtcbiAgICAgIGRlc2NyaXB0aW9uOiBhcmcuZGVzY3JpcHRpb24sXG4gICAgICB0eXBlOiBhcmcudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogYXJnLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBhcmcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiBhcmcuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IGFyZy5hc3ROb2RlLFxuICAgIH0pLFxuICApO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVpcmVkQXJndW1lbnQoYXJnKSB7XG4gIHJldHVybiBpc05vbk51bGxUeXBlKGFyZy50eXBlKSAmJiBhcmcuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFdoZW4gYSBmaWVsZCBjYW4gcmV0dXJuIG9uZSBvZiBhIGhldGVyb2dlbmVvdXMgc2V0IG9mIHR5cGVzLCBhIEludGVyZmFjZSB0eXBlXG4gKiBpcyB1c2VkIHRvIGRlc2NyaWJlIHdoYXQgdHlwZXMgYXJlIHBvc3NpYmxlLCB3aGF0IGZpZWxkcyBhcmUgaW4gY29tbW9uIGFjcm9zc1xuICogYWxsIHR5cGVzLCBhcyB3ZWxsIGFzIGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIHR5cGUgaXMgYWN0dWFsbHkgdXNlZFxuICogd2hlbiB0aGUgZmllbGQgaXMgcmVzb2x2ZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgRW50aXR5VHlwZSA9IG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gKiAgIG5hbWU6ICdFbnRpdHknLFxuICogICBmaWVsZHM6IHtcbiAqICAgICBuYW1lOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jbGFzcyBHcmFwaFFMSW50ZXJmYWNlVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJGV4dGVuc2lvbkFTVE4zO1xuXG4gICAgdGhpcy5uYW1lID0gKDAsIF9hc3NlcnROYW1lLmFzc2VydE5hbWUpKGNvbmZpZy5uYW1lKTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMucmVzb2x2ZVR5cGUgPSBjb25maWcucmVzb2x2ZVR5cGU7XG4gICAgdGhpcy5leHRlbnNpb25zID0gKDAsIF90b09iak1hcC50b09iak1hcCkoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTjMgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE4zICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE4zXG4gICAgICAgIDogW107XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lRmllbGRNYXAuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdGhpcy5faW50ZXJmYWNlcyA9IGRlZmluZUludGVyZmFjZXMuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgY29uZmlnLnJlc29sdmVUeXBlID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjb25maWcucmVzb2x2ZVR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBcInJlc29sdmVUeXBlXCIgYXMgYSBmdW5jdGlvbiwgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGNvbmZpZy5yZXNvbHZlVHlwZSl9LmAsXG4gICAgICApO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTEludGVyZmFjZVR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgZ2V0SW50ZXJmYWNlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ludGVyZmFjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSB0aGlzLl9pbnRlcmZhY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludGVyZmFjZXM7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMSW50ZXJmYWNlVHlwZSA9IEdyYXBoUUxJbnRlcmZhY2VUeXBlO1xuXG4vKipcbiAqIFVuaW9uIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFdoZW4gYSBmaWVsZCBjYW4gcmV0dXJuIG9uZSBvZiBhIGhldGVyb2dlbmVvdXMgc2V0IG9mIHR5cGVzLCBhIFVuaW9uIHR5cGVcbiAqIGlzIHVzZWQgdG8gZGVzY3JpYmUgd2hhdCB0eXBlcyBhcmUgcG9zc2libGUgYXMgd2VsbCBhcyBwcm92aWRpbmcgYSBmdW5jdGlvblxuICogdG8gZGV0ZXJtaW5lIHdoaWNoIHR5cGUgaXMgYWN0dWFsbHkgdXNlZCB3aGVuIHRoZSBmaWVsZCBpcyByZXNvbHZlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBQZXRUeXBlID0gbmV3IEdyYXBoUUxVbmlvblR5cGUoe1xuICogICBuYW1lOiAnUGV0JyxcbiAqICAgdHlwZXM6IFsgRG9nVHlwZSwgQ2F0VHlwZSBdLFxuICogICByZXNvbHZlVHlwZSh2YWx1ZSkge1xuICogICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERvZykge1xuICogICAgICAgcmV0dXJuIERvZ1R5cGU7XG4gKiAgICAgfVxuICogICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENhdCkge1xuICogICAgICAgcmV0dXJuIENhdFR5cGU7XG4gKiAgICAgfVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jbGFzcyBHcmFwaFFMVW5pb25UeXBlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdmFyIF9jb25maWckZXh0ZW5zaW9uQVNUTjQ7XG5cbiAgICB0aGlzLm5hbWUgPSAoMCwgX2Fzc2VydE5hbWUuYXNzZXJ0TmFtZSkoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5yZXNvbHZlVHlwZSA9IGNvbmZpZy5yZXNvbHZlVHlwZTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAoMCwgX3RvT2JqTWFwLnRvT2JqTWFwKShjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1RONCA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTjQgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTjRcbiAgICAgICAgOiBbXTtcbiAgICB0aGlzLl90eXBlcyA9IGRlZmluZVR5cGVzLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIGNvbmZpZy5yZXNvbHZlVHlwZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgY29uZmlnLnJlc29sdmVUeXBlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7dGhpcy5uYW1lfSBtdXN0IHByb3ZpZGUgXCJyZXNvbHZlVHlwZVwiIGFzIGEgZnVuY3Rpb24sIGAgK1xuICAgICAgICAgIGBidXQgZ290OiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShjb25maWcucmVzb2x2ZVR5cGUpfS5gLFxuICAgICAgKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxVbmlvblR5cGUnO1xuICB9XG5cbiAgZ2V0VHlwZXMoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl90eXBlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fdHlwZXMgPSB0aGlzLl90eXBlcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl90eXBlcztcbiAgfVxuXG4gIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGVzOiB0aGlzLmdldFR5cGVzKCksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMVW5pb25UeXBlID0gR3JhcGhRTFVuaW9uVHlwZTtcblxuZnVuY3Rpb24gZGVmaW5lVHlwZXMoY29uZmlnKSB7XG4gIGNvbnN0IHR5cGVzID0gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuayhjb25maWcudHlwZXMpO1xuICBBcnJheS5pc0FycmF5KHR5cGVzKSB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICBmYWxzZSxcbiAgICAgIGBNdXN0IHByb3ZpZGUgQXJyYXkgb2YgdHlwZXMgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHN1Y2ggYW4gYXJyYXkgZm9yIFVuaW9uICR7Y29uZmlnLm5hbWV9LmAsXG4gICAgKTtcbiAgcmV0dXJuIHR5cGVzO1xufVxuXG4vKipcbiAqIEVudW0gVHlwZSBEZWZpbml0aW9uXG4gKlxuICogU29tZSBsZWFmIHZhbHVlcyBvZiByZXF1ZXN0cyBhbmQgaW5wdXQgdmFsdWVzIGFyZSBFbnVtcy4gR3JhcGhRTCBzZXJpYWxpemVzXG4gKiBFbnVtIHZhbHVlcyBhcyBzdHJpbmdzLCBob3dldmVyIGludGVybmFsbHkgRW51bXMgY2FuIGJlIHJlcHJlc2VudGVkIGJ5IGFueVxuICoga2luZCBvZiB0eXBlLCBvZnRlbiBpbnRlZ2Vycy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBSR0JUeXBlID0gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gKiAgIG5hbWU6ICdSR0InLFxuICogICB2YWx1ZXM6IHtcbiAqICAgICBSRUQ6IHsgdmFsdWU6IDAgfSxcbiAqICAgICBHUkVFTjogeyB2YWx1ZTogMSB9LFxuICogICAgIEJMVUU6IHsgdmFsdWU6IDIgfVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE5vdGU6IElmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkIGluIGEgZGVmaW5pdGlvbiwgdGhlIG5hbWUgb2YgdGhlIGVudW0gdmFsdWVcbiAqIHdpbGwgYmUgdXNlZCBhcyBpdHMgaW50ZXJuYWwgdmFsdWUuXG4gKi9cbmNsYXNzIEdyYXBoUUxFbnVtVHlwZSB7XG4gIC8qIDxUPiAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRleHRlbnNpb25BU1RONTtcblxuICAgIHRoaXMubmFtZSA9ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShjb25maWcubmFtZSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAoMCwgX3RvT2JqTWFwLnRvT2JqTWFwKShjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1RONSA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTjUgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTjVcbiAgICAgICAgOiBbXTtcbiAgICB0aGlzLl92YWx1ZXMgPSBkZWZpbmVFbnVtVmFsdWVzKHRoaXMubmFtZSwgY29uZmlnLnZhbHVlcyk7XG4gICAgdGhpcy5fdmFsdWVMb29rdXAgPSBuZXcgTWFwKFxuICAgICAgdGhpcy5fdmFsdWVzLm1hcCgoZW51bVZhbHVlKSA9PiBbZW51bVZhbHVlLnZhbHVlLCBlbnVtVmFsdWVdKSxcbiAgICApO1xuICAgIHRoaXMuX25hbWVMb29rdXAgPSAoMCwgX2tleU1hcC5rZXlNYXApKHRoaXMuX3ZhbHVlcywgKHZhbHVlKSA9PiB2YWx1ZS5uYW1lKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxFbnVtVHlwZSc7XG4gIH1cblxuICBnZXRWYWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfVxuXG4gIGdldFZhbHVlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZUxvb2t1cFtuYW1lXTtcbiAgfVxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGVudW1WYWx1ZSA9IHRoaXMuX3ZhbHVlTG9va3VwLmdldChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYEVudW0gXCIke3RoaXMubmFtZX1cIiBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICBvdXRwdXRWYWx1ZSxcbiAgICAgICAgKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLm5hbWU7XG4gIH1cblxuICBwYXJzZVZhbHVlKGlucHV0VmFsdWUpIC8qIFQgKi9cbiAge1xuICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHZhbHVlU3RyID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGlucHV0VmFsdWUpO1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgRW51bSBcIiR7dGhpcy5uYW1lfVwiIGNhbm5vdCByZXByZXNlbnQgbm9uLXN0cmluZyB2YWx1ZTogJHt2YWx1ZVN0cn0uYCArXG4gICAgICAgICAgZGlkWW91TWVhbkVudW1WYWx1ZSh0aGlzLCB2YWx1ZVN0ciksXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGVudW1WYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoaW5wdXRWYWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYFZhbHVlIFwiJHtpbnB1dFZhbHVlfVwiIGRvZXMgbm90IGV4aXN0IGluIFwiJHt0aGlzLm5hbWV9XCIgZW51bS5gICtcbiAgICAgICAgICBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIGlucHV0VmFsdWUpLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLnZhbHVlO1xuICB9XG5cbiAgcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSwgX3ZhcmlhYmxlcykgLyogVCAqL1xuICB7XG4gICAgLy8gTm90ZTogdmFyaWFibGVzIHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSB2YWx1ZSBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gX2tpbmRzLktpbmQuRU5VTSkge1xuICAgICAgY29uc3QgdmFsdWVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKHZhbHVlTm9kZSk7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgIGBFbnVtIFwiJHt0aGlzLm5hbWV9XCIgY2Fubm90IHJlcHJlc2VudCBub24tZW51bSB2YWx1ZTogJHt2YWx1ZVN0cn0uYCArXG4gICAgICAgICAgZGlkWW91TWVhbkVudW1WYWx1ZSh0aGlzLCB2YWx1ZVN0ciksXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBlbnVtVmFsdWUgPSB0aGlzLmdldFZhbHVlKHZhbHVlTm9kZS52YWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09IG51bGwpIHtcbiAgICAgIGNvbnN0IHZhbHVlU3RyID0gKDAsIF9wcmludGVyLnByaW50KSh2YWx1ZU5vZGUpO1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgVmFsdWUgXCIke3ZhbHVlU3RyfVwiIGRvZXMgbm90IGV4aXN0IGluIFwiJHt0aGlzLm5hbWV9XCIgZW51bS5gICtcbiAgICAgICAgICBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIHZhbHVlU3RyKSxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBlbnVtVmFsdWUudmFsdWU7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSAoMCwgX2tleVZhbE1hcC5rZXlWYWxNYXApKFxuICAgICAgdGhpcy5nZXRWYWx1ZXMoKSxcbiAgICAgICh2YWx1ZSkgPT4gdmFsdWUubmFtZSxcbiAgICAgICh2YWx1ZSkgPT4gKHtcbiAgICAgICAgZGVzY3JpcHRpb246IHZhbHVlLmRlc2NyaXB0aW9uLFxuICAgICAgICB2YWx1ZTogdmFsdWUudmFsdWUsXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB2YWx1ZS5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgICAgZXh0ZW5zaW9uczogdmFsdWUuZXh0ZW5zaW9ucyxcbiAgICAgICAgYXN0Tm9kZTogdmFsdWUuYXN0Tm9kZSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgdmFsdWVzLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMsXG4gICAgfTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuXG5leHBvcnRzLkdyYXBoUUxFbnVtVHlwZSA9IEdyYXBoUUxFbnVtVHlwZTtcblxuZnVuY3Rpb24gZGlkWW91TWVhbkVudW1WYWx1ZShlbnVtVHlwZSwgdW5rbm93blZhbHVlU3RyKSB7XG4gIGNvbnN0IGFsbE5hbWVzID0gZW51bVR5cGUuZ2V0VmFsdWVzKCkubWFwKCh2YWx1ZSkgPT4gdmFsdWUubmFtZSk7XG4gIGNvbnN0IHN1Z2dlc3RlZFZhbHVlcyA9ICgwLCBfc3VnZ2VzdGlvbkxpc3Quc3VnZ2VzdGlvbkxpc3QpKFxuICAgIHVua25vd25WYWx1ZVN0cixcbiAgICBhbGxOYW1lcyxcbiAgKTtcbiAgcmV0dXJuICgwLCBfZGlkWW91TWVhbi5kaWRZb3VNZWFuKSgndGhlIGVudW0gdmFsdWUnLCBzdWdnZXN0ZWRWYWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFbnVtVmFsdWVzKHR5cGVOYW1lLCB2YWx1ZU1hcCkge1xuICBpc1BsYWluT2JqKHZhbHVlTWFwKSB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICBmYWxzZSxcbiAgICAgIGAke3R5cGVOYW1lfSB2YWx1ZXMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB2YWx1ZSBuYW1lcyBhcyBrZXlzLmAsXG4gICAgKTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHZhbHVlTWFwKS5tYXAoKFt2YWx1ZU5hbWUsIHZhbHVlQ29uZmlnXSkgPT4ge1xuICAgIGlzUGxhaW5PYmoodmFsdWVDb25maWcpIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7dHlwZU5hbWV9LiR7dmFsdWVOYW1lfSBtdXN0IHJlZmVyIHRvIGFuIG9iamVjdCB3aXRoIGEgXCJ2YWx1ZVwiIGtleSBgICtcbiAgICAgICAgICBgcmVwcmVzZW50aW5nIGFuIGludGVybmFsIHZhbHVlIGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICAgICAgdmFsdWVDb25maWcsXG4gICAgICAgICAgKX0uYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnRFbnVtVmFsdWVOYW1lKSh2YWx1ZU5hbWUpLFxuICAgICAgZGVzY3JpcHRpb246IHZhbHVlQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdmFsdWU6IHZhbHVlQ29uZmlnLnZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZUNvbmZpZy52YWx1ZSA6IHZhbHVlTmFtZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB2YWx1ZUNvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKHZhbHVlQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgYXN0Tm9kZTogdmFsdWVDb25maWcuYXN0Tm9kZSxcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBJbnB1dCBPYmplY3QgVHlwZSBEZWZpbml0aW9uXG4gKlxuICogQW4gaW5wdXQgb2JqZWN0IGRlZmluZXMgYSBzdHJ1Y3R1cmVkIGNvbGxlY3Rpb24gb2YgZmllbGRzIHdoaWNoIG1heSBiZVxuICogc3VwcGxpZWQgdG8gYSBmaWVsZCBhcmd1bWVudC5cbiAqXG4gKiBVc2luZyBgTm9uTnVsbGAgd2lsbCBlbnN1cmUgdGhhdCBhIHZhbHVlIG11c3QgYmUgcHJvdmlkZWQgYnkgdGhlIHF1ZXJ5XG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgR2VvUG9pbnQgPSBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gKiAgIG5hbWU6ICdHZW9Qb2ludCcsXG4gKiAgIGZpZWxkczoge1xuICogICAgIGxhdDogeyB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSB9LFxuICogICAgIGxvbjogeyB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSB9LFxuICogICAgIGFsdDogeyB0eXBlOiBHcmFwaFFMRmxvYXQsIGRlZmF1bHRWYWx1ZTogMCB9LFxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jbGFzcyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdmFyIF9jb25maWckZXh0ZW5zaW9uQVNUTjY7XG5cbiAgICB0aGlzLm5hbWUgPSAoMCwgX2Fzc2VydE5hbWUuYXNzZXJ0TmFtZSkoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gKDAsIF90b09iak1hcC50b09iak1hcCkoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTjYgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE42ICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE42XG4gICAgICAgIDogW107XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lSW5wdXRGaWVsZE1hcC5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxJbnB1dE9iamVjdFR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgdG9Db25maWcoKSB7XG4gICAgY29uc3QgZmllbGRzID0gKDAsIF9tYXBWYWx1ZS5tYXBWYWx1ZSkodGhpcy5nZXRGaWVsZHMoKSwgKGZpZWxkKSA9PiAoe1xuICAgICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGQudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGQuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgZXh0ZW5zaW9uczogZmllbGQuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IGZpZWxkLmFzdE5vZGUsXG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGZpZWxkcyxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMSW5wdXRPYmplY3RUeXBlID0gR3JhcGhRTElucHV0T2JqZWN0VHlwZTtcblxuZnVuY3Rpb24gZGVmaW5lSW5wdXRGaWVsZE1hcChjb25maWcpIHtcbiAgY29uc3QgZmllbGRNYXAgPSByZXNvbHZlT2JqTWFwVGh1bmsoY29uZmlnLmZpZWxkcyk7XG4gIGlzUGxhaW5PYmooZmllbGRNYXApIHx8XG4gICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgIGZhbHNlLFxuICAgICAgYCR7Y29uZmlnLm5hbWV9IGZpZWxkcyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGZpZWxkIG5hbWVzIGFzIGtleXMgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHN1Y2ggYW4gb2JqZWN0LmAsXG4gICAgKTtcbiAgcmV0dXJuICgwLCBfbWFwVmFsdWUubWFwVmFsdWUpKGZpZWxkTWFwLCAoZmllbGRDb25maWcsIGZpZWxkTmFtZSkgPT4ge1xuICAgICEoJ3Jlc29sdmUnIGluIGZpZWxkQ29uZmlnKSB8fFxuICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke2NvbmZpZy5uYW1lfS4ke2ZpZWxkTmFtZX0gZmllbGQgaGFzIGEgcmVzb2x2ZSBwcm9wZXJ0eSwgYnV0IElucHV0IFR5cGVzIGNhbm5vdCBkZWZpbmUgcmVzb2x2ZXJzLmAsXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAoMCwgX2Fzc2VydE5hbWUuYXNzZXJ0TmFtZSkoZmllbGROYW1lKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZENvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGZpZWxkQ29uZmlnLnR5cGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGZpZWxkQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZENvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGZpZWxkQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgYXN0Tm9kZTogZmllbGRDb25maWcuYXN0Tm9kZSxcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNSZXF1aXJlZElucHV0RmllbGQoZmllbGQpIHtcbiAgcmV0dXJuIGlzTm9uTnVsbFR5cGUoZmllbGQudHlwZSkgJiYgZmllbGQuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID1cbiAgZXhwb3J0cy5HcmFwaFFMU2tpcERpcmVjdGl2ZSA9XG4gIGV4cG9ydHMuR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUgPVxuICBleHBvcnRzLkdyYXBoUUxEaXJlY3RpdmUgPVxuICBleHBvcnRzLkdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlID1cbiAgZXhwb3J0cy5ERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTiA9XG4gICAgdm9pZCAwO1xuZXhwb3J0cy5hc3NlcnREaXJlY3RpdmUgPSBhc3NlcnREaXJlY3RpdmU7XG5leHBvcnRzLmlzRGlyZWN0aXZlID0gaXNEaXJlY3RpdmU7XG5leHBvcnRzLmlzU3BlY2lmaWVkRGlyZWN0aXZlID0gaXNTcGVjaWZpZWREaXJlY3RpdmU7XG5leHBvcnRzLnNwZWNpZmllZERpcmVjdGl2ZXMgPSB2b2lkIDA7XG5cbnZhciBfZGV2QXNzZXJ0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9kZXZBc3NlcnQuanMnKTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zdGFuY2VPZi5qcycpO1xuXG52YXIgX2lzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLmpzJyk7XG5cbnZhciBfdG9PYmpNYXAgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3RvT2JqTWFwLmpzJyk7XG5cbnZhciBfZGlyZWN0aXZlTG9jYXRpb24gPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5qcycpO1xuXG52YXIgX2Fzc2VydE5hbWUgPSByZXF1aXJlKCcuL2Fzc2VydE5hbWUuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfc2NhbGFycyA9IHJlcXVpcmUoJy4vc2NhbGFycy5qcycpO1xuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgR3JhcGhRTCBkaXJlY3RpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICByZXR1cm4gKDAsIF9pbnN0YW5jZU9mLmluc3RhbmNlT2YpKGRpcmVjdGl2ZSwgR3JhcGhRTERpcmVjdGl2ZSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKCFpc0RpcmVjdGl2ZShkaXJlY3RpdmUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGRpcmVjdGl2ZSl9IHRvIGJlIGEgR3JhcGhRTCBkaXJlY3RpdmUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cbi8qKlxuICogQ3VzdG9tIGV4dGVuc2lvbnNcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIGEgdW5pcXVlIGlkZW50aWZpZXIgbmFtZSBmb3IgeW91ciBleHRlbnNpb24sIGZvciBleGFtcGxlIHRoZSBuYW1lIG9mXG4gKiB5b3VyIGxpYnJhcnkgb3IgcHJvamVjdC4gRG8gbm90IHVzZSBhIHNob3J0ZW5lZCBpZGVudGlmaWVyIGFzIHRoaXMgaW5jcmVhc2VzXG4gKiB0aGUgcmlzayBvZiBjb25mbGljdHMuIFdlIHJlY29tbWVuZCB5b3UgYWRkIGF0IG1vc3Qgb25lIGV4dGVuc2lvbiBmaWVsZCxcbiAqIGFuIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBhbGwgdGhlIHZhbHVlcyB5b3UgbmVlZC5cbiAqL1xuXG4vKipcbiAqIERpcmVjdGl2ZXMgYXJlIHVzZWQgYnkgdGhlIEdyYXBoUUwgcnVudGltZSBhcyBhIHdheSBvZiBtb2RpZnlpbmcgZXhlY3V0aW9uXG4gKiBiZWhhdmlvci4gVHlwZSBzeXN0ZW0gY3JlYXRvcnMgd2lsbCB1c3VhbGx5IG5vdCBjcmVhdGUgdGhlc2UgZGlyZWN0bHkuXG4gKi9cbmNsYXNzIEdyYXBoUUxEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRpc1JlcGVhdGFibGUsIF9jb25maWckYXJncztcblxuICAgIHRoaXMubmFtZSA9ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShjb25maWcubmFtZSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmxvY2F0aW9ucyA9IGNvbmZpZy5sb2NhdGlvbnM7XG4gICAgdGhpcy5pc1JlcGVhdGFibGUgPVxuICAgICAgKF9jb25maWckaXNSZXBlYXRhYmxlID0gY29uZmlnLmlzUmVwZWF0YWJsZSkgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckaXNSZXBlYXRhYmxlICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGlzUmVwZWF0YWJsZVxuICAgICAgICA6IGZhbHNlO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICBBcnJheS5pc0FycmF5KGNvbmZpZy5sb2NhdGlvbnMpIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEAke2NvbmZpZy5uYW1lfSBsb2NhdGlvbnMgbXVzdCBiZSBhbiBBcnJheS5gLFxuICAgICAgKTtcbiAgICBjb25zdCBhcmdzID1cbiAgICAgIChfY29uZmlnJGFyZ3MgPSBjb25maWcuYXJncykgIT09IG51bGwgJiYgX2NvbmZpZyRhcmdzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGFyZ3NcbiAgICAgICAgOiB7fTtcbiAgICAoKDAsIF9pc09iamVjdExpa2UuaXNPYmplY3RMaWtlKShhcmdzKSAmJiAhQXJyYXkuaXNBcnJheShhcmdzKSkgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgQCR7Y29uZmlnLm5hbWV9IGFyZ3MgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhcmd1bWVudCBuYW1lcyBhcyBrZXlzLmAsXG4gICAgICApO1xuICAgIHRoaXMuYXJncyA9ICgwLCBfZGVmaW5pdGlvbi5kZWZpbmVBcmd1bWVudHMpKGFyZ3MpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTERpcmVjdGl2ZSc7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBsb2NhdGlvbnM6IHRoaXMubG9jYXRpb25zLFxuICAgICAgYXJnczogKDAsIF9kZWZpbml0aW9uLmFyZ3NUb0FyZ3NDb25maWcpKHRoaXMuYXJncyksXG4gICAgICBpc1JlcGVhdGFibGU6IHRoaXMuaXNSZXBlYXRhYmxlLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0AnICsgdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMRGlyZWN0aXZlID0gR3JhcGhRTERpcmVjdGl2ZTtcblxuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgaW5jbHVkZSBmaWVsZHMgb3IgZnJhZ21lbnRzLlxuICovXG5jb25zdCBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2luY2x1ZGUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IG9ubHkgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlLicsXG4gIGxvY2F0aW9uczogW1xuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRCxcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gIF0sXG4gIGFyZ3M6IHtcbiAgICBpZjoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxCb29sZWFuKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5jbHVkZWQgd2hlbiB0cnVlLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgc2tpcCAoZXhjbHVkZSkgZmllbGRzIG9yIGZyYWdtZW50cy5cbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlID0gR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmU7XG5jb25zdCBHcmFwaFFMU2tpcERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ3NraXAnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gc2tpcCB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZS4nLFxuICBsb2NhdGlvbnM6IFtcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsXG4gICAgX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uSU5MSU5FX0ZSQUdNRU5ULFxuICBdLFxuICBhcmdzOiB7XG4gICAgaWY6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfc2NhbGFycy5HcmFwaFFMQm9vbGVhbiksXG4gICAgICBkZXNjcmlwdGlvbjogJ1NraXBwZWQgd2hlbiB0cnVlLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBDb25zdGFudCBzdHJpbmcgdXNlZCBmb3IgZGVmYXVsdCByZWFzb24gZm9yIGEgZGVwcmVjYXRpb24uXG4gKi9cblxuZXhwb3J0cy5HcmFwaFFMU2tpcERpcmVjdGl2ZSA9IEdyYXBoUUxTa2lwRGlyZWN0aXZlO1xuY29uc3QgREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04gPSAnTm8gbG9uZ2VyIHN1cHBvcnRlZCc7XG4vKipcbiAqIFVzZWQgdG8gZGVjbGFyZSBlbGVtZW50IG9mIGEgR3JhcGhRTCBzY2hlbWEgYXMgZGVwcmVjYXRlZC5cbiAqL1xuXG5leHBvcnRzLkRFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OID0gREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT047XG5jb25zdCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2RlcHJlY2F0ZWQnLFxuICBkZXNjcmlwdGlvbjogJ01hcmtzIGFuIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBubyBsb25nZXIgc3VwcG9ydGVkLicsXG4gIGxvY2F0aW9uczogW1xuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICBdLFxuICBhcmdzOiB7XG4gICAgcmVhc29uOiB7XG4gICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMU3RyaW5nLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdFeHBsYWlucyB3aHkgdGhpcyBlbGVtZW50IHdhcyBkZXByZWNhdGVkLCB1c3VhbGx5IGFsc28gaW5jbHVkaW5nIGEgc3VnZ2VzdGlvbiBmb3IgaG93IHRvIGFjY2VzcyBzdXBwb3J0ZWQgc2ltaWxhciBkYXRhLiBGb3JtYXR0ZWQgdXNpbmcgdGhlIE1hcmtkb3duIHN5bnRheCwgYXMgc3BlY2lmaWVkIGJ5IFtDb21tb25NYXJrXShodHRwczovL2NvbW1vbm1hcmsub3JnLykuJyxcbiAgICAgIGRlZmF1bHRWYWx1ZTogREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04sXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIHByb3ZpZGUgYSBVUkwgZm9yIHNwZWNpZnlpbmcgdGhlIGJlaGF2aW9yIG9mIGN1c3RvbSBzY2FsYXIgZGVmaW5pdGlvbnMuXG4gKi9cblxuZXhwb3J0cy5HcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlO1xuY29uc3QgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnc3BlY2lmaWVkQnknLFxuICBkZXNjcmlwdGlvbjogJ0V4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgc2NhbGFyLicsXG4gIGxvY2F0aW9uczogW19kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVJdLFxuICBhcmdzOiB7XG4gICAgdXJsOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTFN0cmluZyksXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgc2NhbGFyLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBUaGUgZnVsbCBsaXN0IG9mIHNwZWNpZmllZCBkaXJlY3RpdmVzLlxuICovXG5cbmV4cG9ydHMuR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID0gR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlO1xuY29uc3Qgc3BlY2lmaWVkRGlyZWN0aXZlcyA9IE9iamVjdC5mcmVlemUoW1xuICBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSxcbiAgR3JhcGhRTFNraXBEaXJlY3RpdmUsXG4gIEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLFxuICBHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmUsXG5dKTtcbmV4cG9ydHMuc3BlY2lmaWVkRGlyZWN0aXZlcyA9IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbmZ1bmN0aW9uIGlzU3BlY2lmaWVkRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICByZXR1cm4gc3BlY2lmaWVkRGlyZWN0aXZlcy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gZGlyZWN0aXZlLm5hbWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmludHJvc3BlY3Rpb25UeXBlcyA9XG4gIGV4cG9ydHMuX19UeXBlS2luZCA9XG4gIGV4cG9ydHMuX19UeXBlID1cbiAgZXhwb3J0cy5fX1NjaGVtYSA9XG4gIGV4cG9ydHMuX19JbnB1dFZhbHVlID1cbiAgZXhwb3J0cy5fX0ZpZWxkID1cbiAgZXhwb3J0cy5fX0VudW1WYWx1ZSA9XG4gIGV4cG9ydHMuX19EaXJlY3RpdmVMb2NhdGlvbiA9XG4gIGV4cG9ydHMuX19EaXJlY3RpdmUgPVxuICBleHBvcnRzLlR5cGVOYW1lTWV0YUZpZWxkRGVmID1cbiAgZXhwb3J0cy5UeXBlTWV0YUZpZWxkRGVmID1cbiAgZXhwb3J0cy5UeXBlS2luZCA9XG4gIGV4cG9ydHMuU2NoZW1hTWV0YUZpZWxkRGVmID1cbiAgICB2b2lkIDA7XG5leHBvcnRzLmlzSW50cm9zcGVjdGlvblR5cGUgPSBpc0ludHJvc3BlY3Rpb25UeXBlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2ludmFyaWFudC5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZUxvY2F0aW9uID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvZGlyZWN0aXZlTG9jYXRpb24uanMnKTtcblxudmFyIF9wcmludGVyID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvcHJpbnRlci5qcycpO1xuXG52YXIgX2FzdEZyb21WYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hc3RGcm9tVmFsdWUuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfc2NhbGFycyA9IHJlcXVpcmUoJy4vc2NhbGFycy5qcycpO1xuXG5jb25zdCBfX1NjaGVtYSA9IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1NjaGVtYScsXG4gIGRlc2NyaXB0aW9uOlxuICAgICdBIEdyYXBoUUwgU2NoZW1hIGRlZmluZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIEdyYXBoUUwgc2VydmVyLiBJdCBleHBvc2VzIGFsbCBhdmFpbGFibGUgdHlwZXMgYW5kIGRpcmVjdGl2ZXMgb24gdGhlIHNlcnZlciwgYXMgd2VsbCBhcyB0aGUgZW50cnkgcG9pbnRzIGZvciBxdWVyeSwgbXV0YXRpb24sIGFuZCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucy4nLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZGVzY3JpcHRpb24sXG4gICAgfSxcbiAgICB0eXBlczoge1xuICAgICAgZGVzY3JpcHRpb246ICdBIGxpc3Qgb2YgYWxsIHR5cGVzIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZlci4nLFxuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTExpc3QobmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9fVHlwZSkpLFxuICAgICAgKSxcblxuICAgICAgcmVzb2x2ZShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc2NoZW1hLmdldFR5cGVNYXAoKSk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlUeXBlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSB0eXBlIHRoYXQgcXVlcnkgb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9fVHlwZSksXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZ2V0UXVlcnlUeXBlKCksXG4gICAgfSxcbiAgICBtdXRhdGlvblR5cGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSWYgdGhpcyBzZXJ2ZXIgc3VwcG9ydHMgbXV0YXRpb24sIHRoZSB0eXBlIHRoYXQgbXV0YXRpb24gb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgcmVzb2x2ZTogKHNjaGVtYSkgPT4gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uVHlwZToge1xuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJZiB0aGlzIHNlcnZlciBzdXBwb3J0IHN1YnNjcmlwdGlvbiwgdGhlIHR5cGUgdGhhdCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgcmVzb2x2ZTogKHNjaGVtYSkgPT4gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKSxcbiAgICB9LFxuICAgIGRpcmVjdGl2ZXM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiAnQSBsaXN0IG9mIGFsbCBkaXJlY3RpdmVzIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZlci4nLFxuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTExpc3QoXG4gICAgICAgICAgbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9fRGlyZWN0aXZlKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpLFxuICAgIH0sXG4gIH0pLFxufSk7XG5cbmV4cG9ydHMuX19TY2hlbWEgPSBfX1NjaGVtYTtcblxuY29uc3QgX19EaXJlY3RpdmUgPSBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19EaXJlY3RpdmUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICBcIkEgRGlyZWN0aXZlIHByb3ZpZGVzIGEgd2F5IHRvIGRlc2NyaWJlIGFsdGVybmF0ZSBydW50aW1lIGV4ZWN1dGlvbiBhbmQgdHlwZSB2YWxpZGF0aW9uIGJlaGF2aW9yIGluIGEgR3JhcGhRTCBkb2N1bWVudC5cXG5cXG5JbiBzb21lIGNhc2VzLCB5b3UgbmVlZCB0byBwcm92aWRlIG9wdGlvbnMgdG8gYWx0ZXIgR3JhcGhRTCdzIGV4ZWN1dGlvbiBiZWhhdmlvciBpbiB3YXlzIGZpZWxkIGFyZ3VtZW50cyB3aWxsIG5vdCBzdWZmaWNlLCBzdWNoIGFzIGNvbmRpdGlvbmFsbHkgaW5jbHVkaW5nIG9yIHNraXBwaW5nIGEgZmllbGQuIERpcmVjdGl2ZXMgcHJvdmlkZSB0aGlzIGJ5IGRlc2NyaWJpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZXhlY3V0b3IuXCIsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTFN0cmluZyksXG4gICAgICByZXNvbHZlOiAoZGlyZWN0aXZlKSA9PiBkaXJlY3RpdmUubmFtZSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLmRlc2NyaXB0aW9uLFxuICAgIH0sXG4gICAgaXNSZXBlYXRhYmxlOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgcmVzb2x2ZTogKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLmlzUmVwZWF0YWJsZSxcbiAgICB9LFxuICAgIGxvY2F0aW9uczoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTExpc3QoXG4gICAgICAgICAgbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9fRGlyZWN0aXZlTG9jYXRpb24pLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICAgIHJlc29sdmU6IChkaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5sb2NhdGlvbnMsXG4gICAgfSxcbiAgICBhcmdzOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoXG4gICAgICAgIG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTGlzdChcbiAgICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICBhcmdzOiB7XG4gICAgICAgIGluY2x1ZGVEZXByZWNhdGVkOiB7XG4gICAgICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHJlc29sdmUoZmllbGQsIHsgaW5jbHVkZURlcHJlY2F0ZWQgfSkge1xuICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWRcbiAgICAgICAgICA/IGZpZWxkLmFyZ3NcbiAgICAgICAgICA6IGZpZWxkLmFyZ3MuZmlsdGVyKChhcmcpID0+IGFyZy5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG59KTtcblxuZXhwb3J0cy5fX0RpcmVjdGl2ZSA9IF9fRGlyZWN0aXZlO1xuXG5jb25zdCBfX0RpcmVjdGl2ZUxvY2F0aW9uID0gbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxFbnVtVHlwZSh7XG4gIG5hbWU6ICdfX0RpcmVjdGl2ZUxvY2F0aW9uJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ0EgRGlyZWN0aXZlIGNhbiBiZSBhZGphY2VudCB0byBtYW55IHBhcnRzIG9mIHRoZSBHcmFwaFFMIGxhbmd1YWdlLCBhIF9fRGlyZWN0aXZlTG9jYXRpb24gZGVzY3JpYmVzIG9uZSBzdWNoIHBvc3NpYmxlIGFkamFjZW5jaWVzLicsXG4gIHZhbHVlczoge1xuICAgIFFVRVJZOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLlFVRVJZLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHF1ZXJ5IG9wZXJhdGlvbi4nLFxuICAgIH0sXG4gICAgTVVUQVRJT046IHtcbiAgICAgIHZhbHVlOiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uTVVUQVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgbXV0YXRpb24gb3BlcmF0aW9uLicsXG4gICAgfSxcbiAgICBTVUJTQ1JJUFRJT046IHtcbiAgICAgIHZhbHVlOiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uU1VCU0NSSVBUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHN1YnNjcmlwdGlvbiBvcGVyYXRpb24uJyxcbiAgICB9LFxuICAgIEZJRUxEOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxELFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZpZWxkLicsXG4gICAgfSxcbiAgICBGUkFHTUVOVF9ERUZJTklUSU9OOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZnJhZ21lbnQgZGVmaW5pdGlvbi4nLFxuICAgIH0sXG4gICAgRlJBR01FTlRfU1BSRUFEOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBmcmFnbWVudCBzcHJlYWQuJyxcbiAgICB9LFxuICAgIElOTElORV9GUkFHTUVOVDoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGlubGluZSBmcmFnbWVudC4nLFxuICAgIH0sXG4gICAgVkFSSUFCTEVfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5WQVJJQUJMRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHZhcmlhYmxlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIFNDSEVNQToge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5TQ0hFTUEsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgc2NoZW1hIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIFNDQUxBUjoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVIsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgc2NhbGFyIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIE9CSkVDVDoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIG9iamVjdCB0eXBlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIEZJRUxEX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBmaWVsZCBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBBUkdVTUVOVF9ERUZJTklUSU9OOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkFSR1VNRU5UX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGFyZ3VtZW50IGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIElOVEVSRkFDRToge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGludGVyZmFjZSBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBVTklPTjoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5VTklPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSB1bmlvbiBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBFTlVNOiB7XG4gICAgICB2YWx1ZTogX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkVOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGVudW0gZGVmaW5pdGlvbi4nLFxuICAgIH0sXG4gICAgRU5VTV9WQUxVRToge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBlbnVtIHZhbHVlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIElOUFVUX09CSkVDVDoge1xuICAgICAgdmFsdWU6IF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGlucHV0IG9iamVjdCB0eXBlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIElOUFVUX0ZJRUxEX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gaW5wdXQgb2JqZWN0IGZpZWxkIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydHMuX19EaXJlY3RpdmVMb2NhdGlvbiA9IF9fRGlyZWN0aXZlTG9jYXRpb247XG5cbmNvbnN0IF9fVHlwZSA9IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1R5cGUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnVGhlIGZ1bmRhbWVudGFsIHVuaXQgb2YgYW55IEdyYXBoUUwgU2NoZW1hIGlzIHRoZSB0eXBlLiBUaGVyZSBhcmUgbWFueSBraW5kcyBvZiB0eXBlcyBpbiBHcmFwaFFMIGFzIHJlcHJlc2VudGVkIGJ5IHRoZSBgX19UeXBlS2luZGAgZW51bS5cXG5cXG5EZXBlbmRpbmcgb24gdGhlIGtpbmQgb2YgYSB0eXBlLCBjZXJ0YWluIGZpZWxkcyBkZXNjcmliZSBpbmZvcm1hdGlvbiBhYm91dCB0aGF0IHR5cGUuIFNjYWxhciB0eXBlcyBwcm92aWRlIG5vIGluZm9ybWF0aW9uIGJleW9uZCBhIG5hbWUsIGRlc2NyaXB0aW9uIGFuZCBvcHRpb25hbCBgc3BlY2lmaWVkQnlVUkxgLCB3aGlsZSBFbnVtIHR5cGVzIHByb3ZpZGUgdGhlaXIgdmFsdWVzLiBPYmplY3QgYW5kIEludGVyZmFjZSB0eXBlcyBwcm92aWRlIHRoZSBmaWVsZHMgdGhleSBkZXNjcmliZS4gQWJzdHJhY3QgdHlwZXMsIFVuaW9uIGFuZCBJbnRlcmZhY2UsIHByb3ZpZGUgdGhlIE9iamVjdCB0eXBlcyBwb3NzaWJsZSBhdCBydW50aW1lLiBMaXN0IGFuZCBOb25OdWxsIHR5cGVzIGNvbXBvc2Ugb3RoZXIgdHlwZXMuJyxcbiAgZmllbGRzOiAoKSA9PiAoe1xuICAgIGtpbmQ6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfX1R5cGVLaW5kKSxcblxuICAgICAgcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNTY2FsYXJUeXBlKSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5TQ0FMQVI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuT0JKRUNUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLklOVEVSRkFDRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNVbmlvblR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLlVOSU9OO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0VudW1UeXBlKSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5FTlVNO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuSU5QVVRfT0JKRUNUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0xpc3RUeXBlKSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5MSVNUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5OT05fTlVMTDtcbiAgICAgICAgfVxuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgICAgIC8vIE5vdCByZWFjaGFibGUsIGFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuICAgICAgICBmYWxzZSB8fFxuICAgICAgICAgICgwLCBfaW52YXJpYW50LmludmFyaWFudCkoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGBVbmV4cGVjdGVkIHR5cGU6IFwiJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSl9XCIuYCxcbiAgICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAodHlwZSkgPT4gKCduYW1lJyBpbiB0eXBlID8gdHlwZS5uYW1lIDogdW5kZWZpbmVkKSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKFxuICAgICAgICB0eXBlLCAvLyBGSVhNRTogYWRkIHRlc3QgY2FzZVxuICAgICAgKSA9PlxuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAnZGVzY3JpcHRpb24nIGluIHR5cGUgPyB0eXBlLmRlc2NyaXB0aW9uIDogdW5kZWZpbmVkLFxuICAgIH0sXG4gICAgc3BlY2lmaWVkQnlVUkw6IHtcbiAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAob2JqKSA9PlxuICAgICAgICAnc3BlY2lmaWVkQnlVUkwnIGluIG9iaiA/IG9iai5zcGVjaWZpZWRCeVVSTCA6IHVuZGVmaW5lZCxcbiAgICB9LFxuICAgIGZpZWxkczoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxMaXN0KFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19GaWVsZCksXG4gICAgICApLFxuICAgICAgYXJnczoge1xuICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICByZXNvbHZlKHR5cGUsIHsgaW5jbHVkZURlcHJlY2F0ZWQgfSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkodHlwZSkgfHxcbiAgICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKSh0eXBlKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSBPYmplY3QudmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZFxuICAgICAgICAgICAgPyBmaWVsZHNcbiAgICAgICAgICAgIDogZmllbGRzLmZpbHRlcigoZmllbGQpID0+IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgaW50ZXJmYWNlczoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxMaXN0KG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfX1R5cGUpKSxcblxuICAgICAgcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKSh0eXBlKSB8fFxuICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0eXBlLmdldEludGVyZmFjZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIHBvc3NpYmxlVHlwZXM6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTGlzdChuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19UeXBlKSksXG5cbiAgICAgIHJlc29sdmUodHlwZSwgX2FyZ3MsIF9jb250ZXh0LCB7IHNjaGVtYSB9KSB7XG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNBYnN0cmFjdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgZW51bVZhbHVlczoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxMaXN0KFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19FbnVtVmFsdWUpLFxuICAgICAgKSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcmVzb2x2ZSh0eXBlLCB7IGluY2x1ZGVEZXByZWNhdGVkIH0pIHtcbiAgICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0VudW1UeXBlKSh0eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHR5cGUuZ2V0VmFsdWVzKCk7XG4gICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkXG4gICAgICAgICAgICA/IHZhbHVlc1xuICAgICAgICAgICAgOiB2YWx1ZXMuZmlsdGVyKChmaWVsZCkgPT4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gPT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICBpbnB1dEZpZWxkczoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxMaXN0KFxuICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSxcbiAgICAgICksXG4gICAgICBhcmdzOiB7XG4gICAgICAgIGluY2x1ZGVEZXByZWNhdGVkOiB7XG4gICAgICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHJlc29sdmUodHlwZSwgeyBpbmNsdWRlRGVwcmVjYXRlZCB9KSB7XG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnB1dE9iamVjdFR5cGUpKHR5cGUpKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTtcbiAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWRcbiAgICAgICAgICAgID8gdmFsdWVzXG4gICAgICAgICAgICA6IHZhbHVlcy5maWx0ZXIoKGZpZWxkKSA9PiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIG9mVHlwZToge1xuICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgcmVzb2x2ZTogKHR5cGUpID0+ICgnb2ZUeXBlJyBpbiB0eXBlID8gdHlwZS5vZlR5cGUgOiB1bmRlZmluZWQpLFxuICAgIH0sXG4gIH0pLFxufSk7XG5cbmV4cG9ydHMuX19UeXBlID0gX19UeXBlO1xuXG5jb25zdCBfX0ZpZWxkID0gbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fRmllbGQnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnT2JqZWN0IGFuZCBJbnRlcmZhY2UgdHlwZXMgYXJlIGRlc2NyaWJlZCBieSBhIGxpc3Qgb2YgRmllbGRzLCBlYWNoIG9mIHdoaWNoIGhhcyBhIG5hbWUsIHBvdGVudGlhbGx5IGEgbGlzdCBvZiBhcmd1bWVudHMsIGFuZCBhIHJldHVybiB0eXBlLicsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTFN0cmluZyksXG4gICAgICByZXNvbHZlOiAoZmllbGQpID0+IGZpZWxkLm5hbWUsXG4gICAgfSxcbiAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6IChmaWVsZCkgPT4gZmllbGQuZGVzY3JpcHRpb24sXG4gICAgfSxcbiAgICBhcmdzOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoXG4gICAgICAgIG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTGlzdChcbiAgICAgICAgICBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICBhcmdzOiB7XG4gICAgICAgIGluY2x1ZGVEZXByZWNhdGVkOiB7XG4gICAgICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHJlc29sdmUoZmllbGQsIHsgaW5jbHVkZURlcHJlY2F0ZWQgfSkge1xuICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWRcbiAgICAgICAgICA/IGZpZWxkLmFyZ3NcbiAgICAgICAgICA6IGZpZWxkLmFyZ3MuZmlsdGVyKChhcmcpID0+IGFyZy5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19UeXBlKSxcbiAgICAgIHJlc29sdmU6IChmaWVsZCkgPT4gZmllbGQudHlwZSxcbiAgICB9LFxuICAgIGlzRGVwcmVjYXRlZDoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxCb29sZWFuKSxcbiAgICAgIHJlc29sdmU6IChmaWVsZCkgPT4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCxcbiAgICB9LFxuICAgIGRlcHJlY2F0aW9uUmVhc29uOiB7XG4gICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKGZpZWxkKSA9PiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbixcbiAgICB9LFxuICB9KSxcbn0pO1xuXG5leHBvcnRzLl9fRmllbGQgPSBfX0ZpZWxkO1xuXG5jb25zdCBfX0lucHV0VmFsdWUgPSBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19JbnB1dFZhbHVlJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ0FyZ3VtZW50cyBwcm92aWRlZCB0byBGaWVsZHMgb3IgRGlyZWN0aXZlcyBhbmQgdGhlIGlucHV0IGZpZWxkcyBvZiBhbiBJbnB1dE9iamVjdCBhcmUgcmVwcmVzZW50ZWQgYXMgSW5wdXQgVmFsdWVzIHdoaWNoIGRlc2NyaWJlIHRoZWlyIHR5cGUgYW5kIG9wdGlvbmFsbHkgYSBkZWZhdWx0IHZhbHVlLicsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTFN0cmluZyksXG4gICAgICByZXNvbHZlOiAoaW5wdXRWYWx1ZSkgPT4gaW5wdXRWYWx1ZS5uYW1lLFxuICAgIH0sXG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoaW5wdXRWYWx1ZSkgPT4gaW5wdXRWYWx1ZS5kZXNjcmlwdGlvbixcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfX1R5cGUpLFxuICAgICAgcmVzb2x2ZTogKGlucHV0VmFsdWUpID0+IGlucHV0VmFsdWUudHlwZSxcbiAgICB9LFxuICAgIGRlZmF1bHRWYWx1ZToge1xuICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTFN0cmluZyxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnQSBHcmFwaFFMLWZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzIGlucHV0IHZhbHVlLicsXG5cbiAgICAgIHJlc29sdmUoaW5wdXRWYWx1ZSkge1xuICAgICAgICBjb25zdCB7IHR5cGUsIGRlZmF1bHRWYWx1ZSB9ID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVBU1QgPSAoMCwgX2FzdEZyb21WYWx1ZS5hc3RGcm9tVmFsdWUpKGRlZmF1bHRWYWx1ZSwgdHlwZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZUFTVCA/ICgwLCBfcHJpbnRlci5wcmludCkodmFsdWVBU1QpIDogbnVsbDtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBpc0RlcHJlY2F0ZWQ6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfc2NhbGFycy5HcmFwaFFMQm9vbGVhbiksXG4gICAgICByZXNvbHZlOiAoZmllbGQpID0+IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwsXG4gICAgfSxcbiAgICBkZXByZWNhdGlvblJlYXNvbjoge1xuICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6IChvYmopID0+IG9iai5kZXByZWNhdGlvblJlYXNvbixcbiAgICB9LFxuICB9KSxcbn0pO1xuXG5leHBvcnRzLl9fSW5wdXRWYWx1ZSA9IF9fSW5wdXRWYWx1ZTtcblxuY29uc3QgX19FbnVtVmFsdWUgPSBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19FbnVtVmFsdWUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnT25lIHBvc3NpYmxlIHZhbHVlIGZvciBhIGdpdmVuIEVudW0uIEVudW0gdmFsdWVzIGFyZSB1bmlxdWUgdmFsdWVzLCBub3QgYSBwbGFjZWhvbGRlciBmb3IgYSBzdHJpbmcgb3IgbnVtZXJpYyB2YWx1ZS4gSG93ZXZlciBhbiBFbnVtIHZhbHVlIGlzIHJldHVybmVkIGluIGEgSlNPTiByZXNwb25zZSBhcyBhIHN0cmluZy4nLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcpLFxuICAgICAgcmVzb2x2ZTogKGVudW1WYWx1ZSkgPT4gZW51bVZhbHVlLm5hbWUsXG4gICAgfSxcbiAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgdHlwZTogX3NjYWxhcnMuR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6IChlbnVtVmFsdWUpID0+IGVudW1WYWx1ZS5kZXNjcmlwdGlvbixcbiAgICB9LFxuICAgIGlzRGVwcmVjYXRlZDoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxCb29sZWFuKSxcbiAgICAgIHJlc29sdmU6IChlbnVtVmFsdWUpID0+IGVudW1WYWx1ZS5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsLFxuICAgIH0sXG4gICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgIHR5cGU6IF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoZW51bVZhbHVlKSA9PiBlbnVtVmFsdWUuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgfSxcbiAgfSksXG59KTtcblxuZXhwb3J0cy5fX0VudW1WYWx1ZSA9IF9fRW51bVZhbHVlO1xudmFyIFR5cGVLaW5kO1xuZXhwb3J0cy5UeXBlS2luZCA9IFR5cGVLaW5kO1xuXG4oZnVuY3Rpb24gKFR5cGVLaW5kKSB7XG4gIFR5cGVLaW5kWydTQ0FMQVInXSA9ICdTQ0FMQVInO1xuICBUeXBlS2luZFsnT0JKRUNUJ10gPSAnT0JKRUNUJztcbiAgVHlwZUtpbmRbJ0lOVEVSRkFDRSddID0gJ0lOVEVSRkFDRSc7XG4gIFR5cGVLaW5kWydVTklPTiddID0gJ1VOSU9OJztcbiAgVHlwZUtpbmRbJ0VOVU0nXSA9ICdFTlVNJztcbiAgVHlwZUtpbmRbJ0lOUFVUX09CSkVDVCddID0gJ0lOUFVUX09CSkVDVCc7XG4gIFR5cGVLaW5kWydMSVNUJ10gPSAnTElTVCc7XG4gIFR5cGVLaW5kWydOT05fTlVMTCddID0gJ05PTl9OVUxMJztcbn0pKFR5cGVLaW5kIHx8IChleHBvcnRzLlR5cGVLaW5kID0gVHlwZUtpbmQgPSB7fSkpO1xuXG5jb25zdCBfX1R5cGVLaW5kID0gbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxFbnVtVHlwZSh7XG4gIG5hbWU6ICdfX1R5cGVLaW5kJyxcbiAgZGVzY3JpcHRpb246ICdBbiBlbnVtIGRlc2NyaWJpbmcgd2hhdCBraW5kIG9mIHR5cGUgYSBnaXZlbiBgX19UeXBlYCBpcy4nLFxuICB2YWx1ZXM6IHtcbiAgICBTQ0FMQVI6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5TQ0FMQVIsXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYSBzY2FsYXIuJyxcbiAgICB9LFxuICAgIE9CSkVDVDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLk9CSkVDVCxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBvYmplY3QuIGBmaWVsZHNgIGFuZCBgaW50ZXJmYWNlc2AgYXJlIHZhbGlkIGZpZWxkcy4nLFxuICAgIH0sXG4gICAgSU5URVJGQUNFOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuSU5URVJGQUNFLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIGludGVyZmFjZS4gYGZpZWxkc2AsIGBpbnRlcmZhY2VzYCwgYW5kIGBwb3NzaWJsZVR5cGVzYCBhcmUgdmFsaWQgZmllbGRzLicsXG4gICAgfSxcbiAgICBVTklPTjoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLlVOSU9OLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgdW5pb24uIGBwb3NzaWJsZVR5cGVzYCBpcyBhIHZhbGlkIGZpZWxkLicsXG4gICAgfSxcbiAgICBFTlVNOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuRU5VTSxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBlbnVtLiBgZW51bVZhbHVlc2AgaXMgYSB2YWxpZCBmaWVsZC4nLFxuICAgIH0sXG4gICAgSU5QVVRfT0JKRUNUOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuSU5QVVRfT0JKRUNULFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIGlucHV0IG9iamVjdC4gYGlucHV0RmllbGRzYCBpcyBhIHZhbGlkIGZpZWxkLicsXG4gICAgfSxcbiAgICBMSVNUOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuTElTVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhIGxpc3QuIGBvZlR5cGVgIGlzIGEgdmFsaWQgZmllbGQuJyxcbiAgICB9LFxuICAgIE5PTl9OVUxMOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuTk9OX05VTEwsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYSBub24tbnVsbC4gYG9mVHlwZWAgaXMgYSB2YWxpZCBmaWVsZC4nLFxuICAgIH0sXG4gIH0sXG59KTtcbi8qKlxuICogTm90ZSB0aGF0IHRoZXNlIGFyZSBHcmFwaFFMRmllbGQgYW5kIG5vdCBHcmFwaFFMRmllbGRDb25maWcsXG4gKiBzbyB0aGUgZm9ybWF0IGZvciBhcmdzIGlzIGRpZmZlcmVudC5cbiAqL1xuXG5leHBvcnRzLl9fVHlwZUtpbmQgPSBfX1R5cGVLaW5kO1xuY29uc3QgU2NoZW1hTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX19zY2hlbWEnLFxuICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX19TY2hlbWEpLFxuICBkZXNjcmlwdGlvbjogJ0FjY2VzcyB0aGUgY3VycmVudCB0eXBlIHNjaGVtYSBvZiB0aGlzIHNlcnZlci4nLFxuICBhcmdzOiBbXSxcbiAgcmVzb2x2ZTogKF9zb3VyY2UsIF9hcmdzLCBfY29udGV4dCwgeyBzY2hlbWEgfSkgPT4gc2NoZW1hLFxuICBkZXByZWNhdGlvblJlYXNvbjogdW5kZWZpbmVkLFxuICBleHRlbnNpb25zOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICBhc3ROb2RlOiB1bmRlZmluZWQsXG59O1xuZXhwb3J0cy5TY2hlbWFNZXRhRmllbGREZWYgPSBTY2hlbWFNZXRhRmllbGREZWY7XG5jb25zdCBUeXBlTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX190eXBlJyxcbiAgdHlwZTogX19UeXBlLFxuICBkZXNjcmlwdGlvbjogJ1JlcXVlc3QgdGhlIHR5cGUgaW5mb3JtYXRpb24gb2YgYSBzaW5nbGUgdHlwZS4nLFxuICBhcmdzOiBbXG4gICAge1xuICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfc2NhbGFycy5HcmFwaFFMU3RyaW5nKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgICAgIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBhc3ROb2RlOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgXSxcbiAgcmVzb2x2ZTogKF9zb3VyY2UsIHsgbmFtZSB9LCBfY29udGV4dCwgeyBzY2hlbWEgfSkgPT4gc2NoZW1hLmdldFR5cGUobmFtZSksXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gIGFzdE5vZGU6IHVuZGVmaW5lZCxcbn07XG5leHBvcnRzLlR5cGVNZXRhRmllbGREZWYgPSBUeXBlTWV0YUZpZWxkRGVmO1xuY29uc3QgVHlwZU5hbWVNZXRhRmllbGREZWYgPSB7XG4gIG5hbWU6ICdfX3R5cGVuYW1lJyxcbiAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxTdHJpbmcpLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBuYW1lIG9mIHRoZSBjdXJyZW50IE9iamVjdCB0eXBlIGF0IHJ1bnRpbWUuJyxcbiAgYXJnczogW10sXG4gIHJlc29sdmU6IChfc291cmNlLCBfYXJncywgX2NvbnRleHQsIHsgcGFyZW50VHlwZSB9KSA9PiBwYXJlbnRUeXBlLm5hbWUsXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gIGFzdE5vZGU6IHVuZGVmaW5lZCxcbn07XG5leHBvcnRzLlR5cGVOYW1lTWV0YUZpZWxkRGVmID0gVHlwZU5hbWVNZXRhRmllbGREZWY7XG5jb25zdCBpbnRyb3NwZWN0aW9uVHlwZXMgPSBPYmplY3QuZnJlZXplKFtcbiAgX19TY2hlbWEsXG4gIF9fRGlyZWN0aXZlLFxuICBfX0RpcmVjdGl2ZUxvY2F0aW9uLFxuICBfX1R5cGUsXG4gIF9fRmllbGQsXG4gIF9fSW5wdXRWYWx1ZSxcbiAgX19FbnVtVmFsdWUsXG4gIF9fVHlwZUtpbmQsXG5dKTtcbmV4cG9ydHMuaW50cm9zcGVjdGlvblR5cGVzID0gaW50cm9zcGVjdGlvblR5cGVzO1xuXG5mdW5jdGlvbiBpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGludHJvc3BlY3Rpb25UeXBlcy5zb21lKCh7IG5hbWUgfSkgPT4gdHlwZS5uYW1lID09PSBuYW1lKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5HcmFwaFFMU3RyaW5nID1cbiAgZXhwb3J0cy5HcmFwaFFMSW50ID1cbiAgZXhwb3J0cy5HcmFwaFFMSUQgPVxuICBleHBvcnRzLkdyYXBoUUxGbG9hdCA9XG4gIGV4cG9ydHMuR3JhcGhRTEJvb2xlYW4gPVxuICBleHBvcnRzLkdSQVBIUUxfTUlOX0lOVCA9XG4gIGV4cG9ydHMuR1JBUEhRTF9NQVhfSU5UID1cbiAgICB2b2lkIDA7XG5leHBvcnRzLmlzU3BlY2lmaWVkU2NhbGFyVHlwZSA9IGlzU3BlY2lmaWVkU2NhbGFyVHlwZTtcbmV4cG9ydHMuc3BlY2lmaWVkU2NhbGFyVHlwZXMgPSB2b2lkIDA7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX2lzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3ByaW50ZXIgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9wcmludGVyLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIE1heGltdW0gcG9zc2libGUgSW50IHZhbHVlIGFzIHBlciBHcmFwaFFMIFNwZWMgKDMyLWJpdCBzaWduZWQgaW50ZWdlcikuXG4gKiBuLmIuIFRoaXMgZGlmZmVycyBmcm9tIEphdmFTY3JpcHQncyBudW1iZXJzIHRoYXQgYXJlIElFRUUgNzU0IGRvdWJsZXMgc2FmZSB1cC10byAyXjUzIC0gMVxuICogKi9cbmNvbnN0IEdSQVBIUUxfTUFYX0lOVCA9IDIxNDc0ODM2NDc7XG4vKipcbiAqIE1pbmltdW0gcG9zc2libGUgSW50IHZhbHVlIGFzIHBlciBHcmFwaFFMIFNwZWMgKDMyLWJpdCBzaWduZWQgaW50ZWdlcikuXG4gKiBuLmIuIFRoaXMgZGlmZmVycyBmcm9tIEphdmFTY3JpcHQncyBudW1iZXJzIHRoYXQgYXJlIElFRUUgNzU0IGRvdWJsZXMgc2FmZSBzdGFydGluZyBhdCAtKDJeNTMgLSAxKVxuICogKi9cblxuZXhwb3J0cy5HUkFQSFFMX01BWF9JTlQgPSBHUkFQSFFMX01BWF9JTlQ7XG5jb25zdCBHUkFQSFFMX01JTl9JTlQgPSAtMjE0NzQ4MzY0ODtcbmV4cG9ydHMuR1JBUEhRTF9NSU5fSU5UID0gR1JBUEhRTF9NSU5fSU5UO1xuY29uc3QgR3JhcGhRTEludCA9IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdJbnQnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnVGhlIGBJbnRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgbm9uLWZyYWN0aW9uYWwgc2lnbmVkIHdob2xlIG51bWVyaWMgdmFsdWVzLiBJbnQgY2FuIHJlcHJlc2VudCB2YWx1ZXMgYmV0d2VlbiAtKDJeMzEpIGFuZCAyXjMxIC0gMS4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlID8gMSA6IDA7XG4gICAgfVxuXG4gICAgbGV0IG51bSA9IGNvZXJjZWRWYWx1ZTtcblxuICAgIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnc3RyaW5nJyAmJiBjb2VyY2VkVmFsdWUgIT09ICcnKSB7XG4gICAgICBudW0gPSBOdW1iZXIoY29lcmNlZFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIobnVtKSkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICAgIGNvZXJjZWRWYWx1ZSxcbiAgICAgICAgKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAobnVtID4gR1JBUEhRTF9NQVhfSU5UIHx8IG51bSA8IEdSQVBIUUxfTUlOX0lOVCkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAnSW50IGNhbm5vdCByZXByZXNlbnQgbm9uIDMyLWJpdCBzaWduZWQgaW50ZWdlciB2YWx1ZTogJyArXG4gICAgICAgICAgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGNvZXJjZWRWYWx1ZSksXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZShpbnB1dFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihpbnB1dFZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICl9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0VmFsdWUgPiBHUkFQSFFMX01BWF9JTlQgfHwgaW5wdXRWYWx1ZSA8IEdSQVBIUUxfTUlOX0lOVCkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uIDMyLWJpdCBzaWduZWQgaW50ZWdlciB2YWx1ZTogJHtpbnB1dFZhbHVlfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9LFxuXG4gIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IF9raW5kcy5LaW5kLklOVCkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6ICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICB2YWx1ZU5vZGUsXG4gICAgICAgICl9YCxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KHZhbHVlTm9kZS52YWx1ZSwgMTApO1xuXG4gICAgaWYgKG51bSA+IEdSQVBIUUxfTUFYX0lOVCB8fCBudW0gPCBHUkFQSFFMX01JTl9JTlQpIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYEludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWU6ICR7dmFsdWVOb2RlLnZhbHVlfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtO1xuICB9LFxufSk7XG5leHBvcnRzLkdyYXBoUUxJbnQgPSBHcmFwaFFMSW50O1xuY29uc3QgR3JhcGhRTEZsb2F0ID0gbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0Zsb2F0JyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ1RoZSBgRmxvYXRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgc2lnbmVkIGRvdWJsZS1wcmVjaXNpb24gZnJhY3Rpb25hbCB2YWx1ZXMgYXMgc3BlY2lmaWVkIGJ5IFtJRUVFIDc1NF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV9mbG9hdGluZ19wb2ludCkuJyxcblxuICBzZXJpYWxpemUob3V0cHV0VmFsdWUpIHtcbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSA/IDEgOiAwO1xuICAgIH1cblxuICAgIGxldCBudW0gPSBjb2VyY2VkVmFsdWU7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycgJiYgY29lcmNlZFZhbHVlICE9PSAnJykge1xuICAgICAgbnVtID0gTnVtYmVyKGNvZXJjZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNGaW5pdGUobnVtKSkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgRmxvYXQgY2Fubm90IHJlcHJlc2VudCBub24gbnVtZXJpYyB2YWx1ZTogJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgY29lcmNlZFZhbHVlLFxuICAgICAgICApfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZShpbnB1dFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzRmluaXRlKGlucHV0VmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgIGBGbG9hdCBjYW5ub3QgcmVwcmVzZW50IG5vbiBudW1lcmljIHZhbHVlOiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICBpbnB1dFZhbHVlLFxuICAgICAgICApfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9LFxuXG4gIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAoXG4gICAgICB2YWx1ZU5vZGUua2luZCAhPT0gX2tpbmRzLktpbmQuRkxPQVQgJiZcbiAgICAgIHZhbHVlTm9kZS5raW5kICE9PSBfa2luZHMuS2luZC5JTlRcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYEZsb2F0IGNhbm5vdCByZXByZXNlbnQgbm9uIG51bWVyaWMgdmFsdWU6ICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICB2YWx1ZU5vZGUsXG4gICAgICAgICl9YCxcbiAgICAgICAgdmFsdWVOb2RlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZU5vZGUudmFsdWUpO1xuICB9LFxufSk7XG5leHBvcnRzLkdyYXBoUUxGbG9hdCA9IEdyYXBoUUxGbG9hdDtcbmNvbnN0IEdyYXBoUUxTdHJpbmcgPSBuZXcgX2RlZmluaXRpb24uR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnU3RyaW5nJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ1RoZSBgU3RyaW5nYCBzY2FsYXIgdHlwZSByZXByZXNlbnRzIHRleHR1YWwgZGF0YSwgcmVwcmVzZW50ZWQgYXMgVVRGLTggY2hhcmFjdGVyIHNlcXVlbmNlcy4gVGhlIFN0cmluZyB0eXBlIGlzIG1vc3Qgb2Z0ZW4gdXNlZCBieSBHcmFwaFFMIHRvIHJlcHJlc2VudCBmcmVlLWZvcm0gaHVtYW4tcmVhZGFibGUgdGV4dC4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7IC8vIFNlcmlhbGl6ZSBzdHJpbmcsIGJvb2xlYW4gYW5kIG51bWJlciB2YWx1ZXMgdG8gYSBzdHJpbmcsIGJ1dCBkbyBub3RcbiAgICAvLyBhdHRlbXB0IHRvIGNvZXJjZSBvYmplY3QsIGZ1bmN0aW9uLCBzeW1ib2wsIG9yIG90aGVyIHR5cGVzIGFzIHN0cmluZ3MuXG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdudW1iZXInICYmIE51bWJlci5pc0Zpbml0ZShjb2VyY2VkVmFsdWUpKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgYFN0cmluZyBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShvdXRwdXRWYWx1ZSl9YCxcbiAgICApO1xuICB9LFxuXG4gIHBhcnNlVmFsdWUoaW5wdXRWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYFN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyB2YWx1ZTogJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgaW5wdXRWYWx1ZSxcbiAgICAgICAgKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgfSxcblxuICBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBfa2luZHMuS2luZC5TVFJJTkcpIHtcbiAgICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYFN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyB2YWx1ZTogJHsoMCwgX3ByaW50ZXIucHJpbnQpKFxuICAgICAgICAgIHZhbHVlTm9kZSxcbiAgICAgICAgKX1gLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IHZhbHVlTm9kZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcbiAgfSxcbn0pO1xuZXhwb3J0cy5HcmFwaFFMU3RyaW5nID0gR3JhcGhRTFN0cmluZztcbmNvbnN0IEdyYXBoUUxCb29sZWFuID0gbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0Jvb2xlYW4nLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBgQm9vbGVhbmAgc2NhbGFyIHR5cGUgcmVwcmVzZW50cyBgdHJ1ZWAgb3IgYGZhbHNlYC4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICAgIH1cblxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoY29lcmNlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSAhPT0gMDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICBgQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICBjb2VyY2VkVmFsdWUsXG4gICAgICApfWAsXG4gICAgKTtcbiAgfSxcblxuICBwYXJzZVZhbHVlKGlucHV0VmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICl9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gIH0sXG5cbiAgcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gX2tpbmRzLktpbmQuQk9PTEVBTikge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6ICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICB2YWx1ZU5vZGUsXG4gICAgICAgICl9YCxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWU7XG4gIH0sXG59KTtcbmV4cG9ydHMuR3JhcGhRTEJvb2xlYW4gPSBHcmFwaFFMQm9vbGVhbjtcbmNvbnN0IEdyYXBoUUxJRCA9IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdJRCcsXG4gIGRlc2NyaXB0aW9uOlxuICAgICdUaGUgYElEYCBzY2FsYXIgdHlwZSByZXByZXNlbnRzIGEgdW5pcXVlIGlkZW50aWZpZXIsIG9mdGVuIHVzZWQgdG8gcmVmZXRjaCBhbiBvYmplY3Qgb3IgYXMga2V5IGZvciBhIGNhY2hlLiBUaGUgSUQgdHlwZSBhcHBlYXJzIGluIGEgSlNPTiByZXNwb25zZSBhcyBhIFN0cmluZzsgaG93ZXZlciwgaXQgaXMgbm90IGludGVuZGVkIHRvIGJlIGh1bWFuLXJlYWRhYmxlLiBXaGVuIGV4cGVjdGVkIGFzIGFuIGlucHV0IHR5cGUsIGFueSBzdHJpbmcgKHN1Y2ggYXMgYFwiNFwiYCkgb3IgaW50ZWdlciAoc3VjaCBhcyBgNGApIGlucHV0IHZhbHVlIHdpbGwgYmUgYWNjZXB0ZWQgYXMgYW4gSUQuJyxcblxuICBzZXJpYWxpemUob3V0cHV0VmFsdWUpIHtcbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICAgIH1cblxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoY29lcmNlZFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICBgSUQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkob3V0cHV0VmFsdWUpfWAsXG4gICAgKTtcbiAgfSxcblxuICBwYXJzZVZhbHVlKGlucHV0VmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBpbnB1dFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgYElEIGNhbm5vdCByZXByZXNlbnQgdmFsdWU6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGlucHV0VmFsdWUpfWAsXG4gICAgKTtcbiAgfSxcblxuICBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKFxuICAgICAgdmFsdWVOb2RlLmtpbmQgIT09IF9raW5kcy5LaW5kLlNUUklORyAmJlxuICAgICAgdmFsdWVOb2RlLmtpbmQgIT09IF9raW5kcy5LaW5kLklOVFxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAnSUQgY2Fubm90IHJlcHJlc2VudCBhIG5vbi1zdHJpbmcgYW5kIG5vbi1pbnRlZ2VyIHZhbHVlOiAnICtcbiAgICAgICAgICAoMCwgX3ByaW50ZXIucHJpbnQpKHZhbHVlTm9kZSksXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9LFxufSk7XG5leHBvcnRzLkdyYXBoUUxJRCA9IEdyYXBoUUxJRDtcbmNvbnN0IHNwZWNpZmllZFNjYWxhclR5cGVzID0gT2JqZWN0LmZyZWV6ZShbXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxJbnQsXG4gIEdyYXBoUUxGbG9hdCxcbiAgR3JhcGhRTEJvb2xlYW4sXG4gIEdyYXBoUUxJRCxcbl0pO1xuZXhwb3J0cy5zcGVjaWZpZWRTY2FsYXJUeXBlcyA9IHNwZWNpZmllZFNjYWxhclR5cGVzO1xuXG5mdW5jdGlvbiBpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkge1xuICByZXR1cm4gc3BlY2lmaWVkU2NhbGFyVHlwZXMuc29tZSgoeyBuYW1lIH0pID0+IHR5cGUubmFtZSA9PT0gbmFtZSk7XG59IC8vIFN1cHBvcnQgc2VyaWFsaXppbmcgb2JqZWN0cyB3aXRoIGN1c3RvbSB2YWx1ZU9mKCkgb3IgdG9KU09OKCkgZnVuY3Rpb25zIC1cbi8vIGEgY29tbW9uIHdheSB0byByZXByZXNlbnQgYSBjb21wbGV4IHZhbHVlIHdoaWNoIGNhbiBiZSByZXByZXNlbnRlZCBhc1xuLy8gYSBzdHJpbmcgKGV4OiBNb25nb0RCIGlkIG9iamVjdHMpLlxuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpIHtcbiAgaWYgKCgwLCBfaXNPYmplY3RMaWtlLmlzT2JqZWN0TGlrZSkob3V0cHV0VmFsdWUpKSB7XG4gICAgaWYgKHR5cGVvZiBvdXRwdXRWYWx1ZS52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCB2YWx1ZU9mUmVzdWx0ID0gb3V0cHV0VmFsdWUudmFsdWVPZigpO1xuXG4gICAgICBpZiAoISgwLCBfaXNPYmplY3RMaWtlLmlzT2JqZWN0TGlrZSkodmFsdWVPZlJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlT2ZSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdXRwdXRWYWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvdXRwdXRWYWx1ZS50b0pTT04oKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0VmFsdWU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuR3JhcGhRTFNjaGVtYSA9IHZvaWQgMDtcbmV4cG9ydHMuYXNzZXJ0U2NoZW1hID0gYXNzZXJ0U2NoZW1hO1xuZXhwb3J0cy5pc1NjaGVtYSA9IGlzU2NoZW1hO1xuXG52YXIgX2RldkFzc2VydCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX2luc3RhbmNlT2YgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2luc3RhbmNlT2YuanMnKTtcblxudmFyIF9pc09iamVjdExpa2UgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5qcycpO1xuXG52YXIgX3RvT2JqTWFwID0gcmVxdWlyZSgnLi4vanN1dGlscy90b09iak1hcC5qcycpO1xuXG52YXIgX2FzdCA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2FzdC5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuL2RlZmluaXRpb24uanMnKTtcblxudmFyIF9kaXJlY3RpdmVzID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzLmpzJyk7XG5cbnZhciBfaW50cm9zcGVjdGlvbiA9IHJlcXVpcmUoJy4vaW50cm9zcGVjdGlvbi5qcycpO1xuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgR3JhcGhRTCBzY2hlbWEuXG4gKi9cbmZ1bmN0aW9uIGlzU2NoZW1hKHNjaGVtYSkge1xuICByZXR1cm4gKDAsIF9pbnN0YW5jZU9mLmluc3RhbmNlT2YpKHNjaGVtYSwgR3JhcGhRTFNjaGVtYSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNjaGVtYShzY2hlbWEpIHtcbiAgaWYgKCFpc1NjaGVtYShzY2hlbWEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHNjaGVtYSl9IHRvIGJlIGEgR3JhcGhRTCBzY2hlbWEuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYTtcbn1cbi8qKlxuICogQ3VzdG9tIGV4dGVuc2lvbnNcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIGEgdW5pcXVlIGlkZW50aWZpZXIgbmFtZSBmb3IgeW91ciBleHRlbnNpb24sIGZvciBleGFtcGxlIHRoZSBuYW1lIG9mXG4gKiB5b3VyIGxpYnJhcnkgb3IgcHJvamVjdC4gRG8gbm90IHVzZSBhIHNob3J0ZW5lZCBpZGVudGlmaWVyIGFzIHRoaXMgaW5jcmVhc2VzXG4gKiB0aGUgcmlzayBvZiBjb25mbGljdHMuIFdlIHJlY29tbWVuZCB5b3UgYWRkIGF0IG1vc3Qgb25lIGV4dGVuc2lvbiBmaWVsZCxcbiAqIGFuIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBhbGwgdGhlIHZhbHVlcyB5b3UgbmVlZC5cbiAqL1xuXG4vKipcbiAqIFNjaGVtYSBEZWZpbml0aW9uXG4gKlxuICogQSBTY2hlbWEgaXMgY3JlYXRlZCBieSBzdXBwbHlpbmcgdGhlIHJvb3QgdHlwZXMgb2YgZWFjaCB0eXBlIG9mIG9wZXJhdGlvbixcbiAqIHF1ZXJ5IGFuZCBtdXRhdGlvbiAob3B0aW9uYWwpLiBBIHNjaGVtYSBkZWZpbml0aW9uIGlzIHRoZW4gc3VwcGxpZWQgdG8gdGhlXG4gKiB2YWxpZGF0b3IgYW5kIGV4ZWN1dG9yLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IE15QXBwU2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICogICBxdWVyeTogTXlBcHBRdWVyeVJvb3RUeXBlLFxuICogICBtdXRhdGlvbjogTXlBcHBNdXRhdGlvblJvb3RUeXBlLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIE5vdGU6IFdoZW4gdGhlIHNjaGVtYSBpcyBjb25zdHJ1Y3RlZCwgYnkgZGVmYXVsdCBvbmx5IHRoZSB0eXBlcyB0aGF0IGFyZVxuICogcmVhY2hhYmxlIGJ5IHRyYXZlcnNpbmcgdGhlIHJvb3QgdHlwZXMgYXJlIGluY2x1ZGVkLCBvdGhlciB0eXBlcyBtdXN0IGJlXG4gKiBleHBsaWNpdGx5IHJlZmVyZW5jZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgY2hhcmFjdGVySW50ZXJmYWNlID0gbmV3IEdyYXBoUUxJbnRlcmZhY2VUeXBlKHtcbiAqICAgbmFtZTogJ0NoYXJhY3RlcicsXG4gKiAgIC4uLlxuICogfSk7XG4gKlxuICogY29uc3QgaHVtYW5UeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgbmFtZTogJ0h1bWFuJyxcbiAqICAgaW50ZXJmYWNlczogW2NoYXJhY3RlckludGVyZmFjZV0sXG4gKiAgIC4uLlxuICogfSk7XG4gKlxuICogY29uc3QgZHJvaWRUeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgbmFtZTogJ0Ryb2lkJyxcbiAqICAgaW50ZXJmYWNlczogW2NoYXJhY3RlckludGVyZmFjZV0sXG4gKiAgIC4uLlxuICogfSk7XG4gKlxuICogY29uc3Qgc2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICogICBxdWVyeTogbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICBuYW1lOiAnUXVlcnknLFxuICogICAgIGZpZWxkczoge1xuICogICAgICAgaGVybzogeyB0eXBlOiBjaGFyYWN0ZXJJbnRlcmZhY2UsIC4uLiB9LFxuICogICAgIH1cbiAqICAgfSksXG4gKiAgIC4uLlxuICogICAvLyBTaW5jZSB0aGlzIHNjaGVtYSByZWZlcmVuY2VzIG9ubHkgdGhlIGBDaGFyYWN0ZXJgIGludGVyZmFjZSBpdCdzXG4gKiAgIC8vIG5lY2Vzc2FyeSB0byBleHBsaWNpdGx5IGxpc3QgdGhlIHR5cGVzIHRoYXQgaW1wbGVtZW50IGl0IGlmXG4gKiAgIC8vIHlvdSB3YW50IHRoZW0gdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHNjaGVtYS5cbiAqICAgdHlwZXM6IFtodW1hblR5cGUsIGRyb2lkVHlwZV0sXG4gKiB9KVxuICogYGBgXG4gKlxuICogTm90ZTogSWYgYW4gYXJyYXkgb2YgYGRpcmVjdGl2ZXNgIGFyZSBwcm92aWRlZCB0byBHcmFwaFFMU2NoZW1hLCB0aGF0IHdpbGwgYmVcbiAqIHRoZSBleGFjdCBsaXN0IG9mIGRpcmVjdGl2ZXMgcmVwcmVzZW50ZWQgYW5kIGFsbG93ZWQuIElmIGBkaXJlY3RpdmVzYCBpcyBub3RcbiAqIHByb3ZpZGVkIHRoZW4gYSBkZWZhdWx0IHNldCBvZiB0aGUgc3BlY2lmaWVkIGRpcmVjdGl2ZXMgKGUuZy4gYEBpbmNsdWRlYCBhbmRcbiAqIGBAc2tpcGApIHdpbGwgYmUgdXNlZC4gSWYgeW91IHdpc2ggdG8gcHJvdmlkZSAqYWRkaXRpb25hbCogZGlyZWN0aXZlcyB0byB0aGVzZVxuICogc3BlY2lmaWVkIGRpcmVjdGl2ZXMsIHlvdSBtdXN0IGV4cGxpY2l0bHkgZGVjbGFyZSB0aGVtLiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBNeUFwcFNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAqICAgLi4uXG4gKiAgIGRpcmVjdGl2ZXM6IHNwZWNpZmllZERpcmVjdGl2ZXMuY29uY2F0KFsgbXlDdXN0b21EaXJlY3RpdmUgXSksXG4gKiB9KVxuICogYGBgXG4gKi9cbmNsYXNzIEdyYXBoUUxTY2hlbWEge1xuICAvLyBVc2VkIGFzIGEgY2FjaGUgZm9yIHZhbGlkYXRlU2NoZW1hKCkuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJGV4dGVuc2lvbkFTVE4sIF9jb25maWckZGlyZWN0aXZlcztcblxuICAgIC8vIElmIHRoaXMgc2NoZW1hIHdhcyBidWlsdCBmcm9tIGEgc291cmNlIGtub3duIHRvIGJlIHZhbGlkLCB0aGVuIGl0IG1heSBiZVxuICAgIC8vIG1hcmtlZCB3aXRoIGFzc3VtZVZhbGlkIHRvIGF2b2lkIGFuIGFkZGl0aW9uYWwgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvbi5cbiAgICB0aGlzLl9fdmFsaWRhdGlvbkVycm9ycyA9IGNvbmZpZy5hc3N1bWVWYWxpZCA9PT0gdHJ1ZSA/IFtdIDogdW5kZWZpbmVkOyAvLyBDaGVjayBmb3IgY29tbW9uIG1pc3Rha2VzIGR1cmluZyBjb25zdHJ1Y3Rpb24gdG8gcHJvZHVjZSBlYXJseSBlcnJvcnMuXG5cbiAgICAoMCwgX2lzT2JqZWN0TGlrZS5pc09iamVjdExpa2UpKGNvbmZpZykgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoZmFsc2UsICdNdXN0IHByb3ZpZGUgY29uZmlndXJhdGlvbiBvYmplY3QuJyk7XG4gICAgIWNvbmZpZy50eXBlcyB8fFxuICAgICAgQXJyYXkuaXNBcnJheShjb25maWcudHlwZXMpIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYFwidHlwZXNcIiBtdXN0IGJlIEFycmF5IGlmIHByb3ZpZGVkIGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKFxuICAgICAgICAgIGNvbmZpZy50eXBlcyxcbiAgICAgICAgKX0uYCxcbiAgICAgICk7XG4gICAgIWNvbmZpZy5kaXJlY3RpdmVzIHx8XG4gICAgICBBcnJheS5pc0FycmF5KGNvbmZpZy5kaXJlY3RpdmVzKSB8fFxuICAgICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdcImRpcmVjdGl2ZXNcIiBtdXN0IGJlIEFycmF5IGlmIHByb3ZpZGVkIGJ1dCBnb3Q6ICcgK1xuICAgICAgICAgIGAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShjb25maWcuZGlyZWN0aXZlcyl9LmAsXG4gICAgICApO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gKDAsIF90b09iak1hcC50b09iak1hcCkoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTiA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTiAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRleHRlbnNpb25BU1ROXG4gICAgICAgIDogW107XG4gICAgdGhpcy5fcXVlcnlUeXBlID0gY29uZmlnLnF1ZXJ5O1xuICAgIHRoaXMuX211dGF0aW9uVHlwZSA9IGNvbmZpZy5tdXRhdGlvbjtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25UeXBlID0gY29uZmlnLnN1YnNjcmlwdGlvbjsgLy8gUHJvdmlkZSBzcGVjaWZpZWQgZGlyZWN0aXZlcyAoZS5nLiBAaW5jbHVkZSBhbmQgQHNraXApIGJ5IGRlZmF1bHQuXG5cbiAgICB0aGlzLl9kaXJlY3RpdmVzID1cbiAgICAgIChfY29uZmlnJGRpcmVjdGl2ZXMgPSBjb25maWcuZGlyZWN0aXZlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZGlyZWN0aXZlcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRkaXJlY3RpdmVzXG4gICAgICAgIDogX2RpcmVjdGl2ZXMuc3BlY2lmaWVkRGlyZWN0aXZlczsgLy8gVG8gcHJlc2VydmUgb3JkZXIgb2YgdXNlci1wcm92aWRlZCB0eXBlcywgd2UgYWRkIGZpcnN0IHRvIGFkZCB0aGVtIHRvXG4gICAgLy8gdGhlIHNldCBvZiBcImNvbGxlY3RlZFwiIHR5cGVzLCBzbyBgY29sbGVjdFJlZmVyZW5jZWRUeXBlc2AgaWdub3JlIHRoZW0uXG5cbiAgICBjb25zdCBhbGxSZWZlcmVuY2VkVHlwZXMgPSBuZXcgU2V0KGNvbmZpZy50eXBlcyk7XG5cbiAgICBpZiAoY29uZmlnLnR5cGVzICE9IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBjb25maWcudHlwZXMpIHtcbiAgICAgICAgLy8gV2hlbiB3ZSByZWFkeSB0byBwcm9jZXNzIHRoaXMgdHlwZSwgd2UgcmVtb3ZlIGl0IGZyb20gXCJjb2xsZWN0ZWRcIiB0eXBlc1xuICAgICAgICAvLyBhbmQgdGhlbiBhZGQgaXQgdG9nZXRoZXIgd2l0aCBhbGwgZGVwZW5kZW50IHR5cGVzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uLlxuICAgICAgICBhbGxSZWZlcmVuY2VkVHlwZXMuZGVsZXRlKHR5cGUpO1xuICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3F1ZXJ5VHlwZSAhPSBudWxsKSB7XG4gICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHRoaXMuX3F1ZXJ5VHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbXV0YXRpb25UeXBlICE9IG51bGwpIHtcbiAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModGhpcy5fbXV0YXRpb25UeXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25UeXBlICE9IG51bGwpIHtcbiAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModGhpcy5fc3Vic2NyaXB0aW9uVHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiB0aGlzLl9kaXJlY3RpdmVzKSB7XG4gICAgICAvLyBEaXJlY3RpdmVzIGFyZSBub3QgdmFsaWRhdGVkIHVudGlsIHZhbGlkYXRlU2NoZW1hKCkgaXMgY2FsbGVkLlxuICAgICAgaWYgKCgwLCBfZGlyZWN0aXZlcy5pc0RpcmVjdGl2ZSkoZGlyZWN0aXZlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBkaXJlY3RpdmUuYXJncykge1xuICAgICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMoYXJnLnR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKF9pbnRyb3NwZWN0aW9uLl9fU2NoZW1hLCBhbGxSZWZlcmVuY2VkVHlwZXMpOyAvLyBTdG9yaW5nIHRoZSByZXN1bHRpbmcgbWFwIGZvciByZWZlcmVuY2UgYnkgdGhlIHNjaGVtYS5cblxuICAgIHRoaXMuX3R5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3N1YlR5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBLZWVwIHRyYWNrIG9mIGFsbCBpbXBsZW1lbnRhdGlvbnMgYnkgaW50ZXJmYWNlIG5hbWUuXG5cbiAgICB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBuYW1lZFR5cGUgb2YgYWxsUmVmZXJlbmNlZFR5cGVzKSB7XG4gICAgICBpZiAobmFtZWRUeXBlID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHR5cGVOYW1lID0gbmFtZWRUeXBlLm5hbWU7XG4gICAgICB0eXBlTmFtZSB8fFxuICAgICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdPbmUgb2YgdGhlIHByb3ZpZGVkIHR5cGVzIGZvciBidWlsZGluZyB0aGUgU2NoZW1hIGlzIG1pc3NpbmcgYSBuYW1lLicsXG4gICAgICAgICk7XG5cbiAgICAgIGlmICh0aGlzLl90eXBlTWFwW3R5cGVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgU2NoZW1hIG11c3QgY29udGFpbiB1bmlxdWVseSBuYW1lZCB0eXBlcyBidXQgY29udGFpbnMgbXVsdGlwbGUgdHlwZXMgbmFtZWQgXCIke3R5cGVOYW1lfVwiLmAsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3R5cGVNYXBbdHlwZU5hbWVdID0gbmFtZWRUeXBlO1xuXG4gICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzSW50ZXJmYWNlVHlwZSkobmFtZWRUeXBlKSkge1xuICAgICAgICAvLyBTdG9yZSBpbXBsZW1lbnRhdGlvbnMgYnkgaW50ZXJmYWNlLlxuICAgICAgICBmb3IgKGNvbnN0IGlmYWNlIG9mIG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzSW50ZXJmYWNlVHlwZSkoaWZhY2UpKSB7XG4gICAgICAgICAgICBsZXQgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2lmYWNlLm5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoaW1wbGVtZW50YXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2lmYWNlLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6IFtdLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbnMuaW50ZXJmYWNlcy5wdXNoKG5hbWVkVHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc09iamVjdFR5cGUpKG5hbWVkVHlwZSkpIHtcbiAgICAgICAgLy8gU3RvcmUgaW1wbGVtZW50YXRpb25zIGJ5IG9iamVjdHMuXG4gICAgICAgIGZvciAoY29uc3QgaWZhY2Ugb2YgbmFtZWRUeXBlLmdldEludGVyZmFjZXMoKSkge1xuICAgICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKShpZmFjZSkpIHtcbiAgICAgICAgICAgIGxldCBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbaWZhY2UubmFtZV07XG5cbiAgICAgICAgICAgIGlmIChpbXBsZW1lbnRhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbaWZhY2UubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0czogW10sXG4gICAgICAgICAgICAgICAgaW50ZXJmYWNlczogW10sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGltcGxlbWVudGF0aW9ucy5vYmplY3RzLnB1c2gobmFtZWRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdHcmFwaFFMU2NoZW1hJztcbiAgfVxuXG4gIGdldFF1ZXJ5VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVlcnlUeXBlO1xuICB9XG5cbiAgZ2V0TXV0YXRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9tdXRhdGlvblR5cGU7XG4gIH1cblxuICBnZXRTdWJzY3JpcHRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25UeXBlO1xuICB9XG5cbiAgZ2V0Um9vdFR5cGUob3BlcmF0aW9uKSB7XG4gICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgX2FzdC5PcGVyYXRpb25UeXBlTm9kZS5RVUVSWTpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnlUeXBlKCk7XG5cbiAgICAgIGNhc2UgX2FzdC5PcGVyYXRpb25UeXBlTm9kZS5NVVRBVElPTjpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TXV0YXRpb25UeXBlKCk7XG5cbiAgICAgIGNhc2UgX2FzdC5PcGVyYXRpb25UeXBlTm9kZS5TVUJTQ1JJUFRJT046XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXRUeXBlTWFwKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlTWFwO1xuICB9XG5cbiAgZ2V0VHlwZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHlwZU1hcCgpW25hbWVdO1xuICB9XG5cbiAgZ2V0UG9zc2libGVUeXBlcyhhYnN0cmFjdFR5cGUpIHtcbiAgICByZXR1cm4gKDAsIF9kZWZpbml0aW9uLmlzVW5pb25UeXBlKShhYnN0cmFjdFR5cGUpXG4gICAgICA/IGFic3RyYWN0VHlwZS5nZXRUeXBlcygpXG4gICAgICA6IHRoaXMuZ2V0SW1wbGVtZW50YXRpb25zKGFic3RyYWN0VHlwZSkub2JqZWN0cztcbiAgfVxuXG4gIGdldEltcGxlbWVudGF0aW9ucyhpbnRlcmZhY2VUeXBlKSB7XG4gICAgY29uc3QgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2ludGVyZmFjZVR5cGUubmFtZV07XG4gICAgcmV0dXJuIGltcGxlbWVudGF0aW9ucyAhPT0gbnVsbCAmJiBpbXBsZW1lbnRhdGlvbnMgIT09IHZvaWQgMFxuICAgICAgPyBpbXBsZW1lbnRhdGlvbnNcbiAgICAgIDoge1xuICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgIGludGVyZmFjZXM6IFtdLFxuICAgICAgICB9O1xuICB9XG5cbiAgaXNTdWJUeXBlKGFic3RyYWN0VHlwZSwgbWF5YmVTdWJUeXBlKSB7XG4gICAgbGV0IG1hcCA9IHRoaXMuX3N1YlR5cGVNYXBbYWJzdHJhY3RUeXBlLm5hbWVdO1xuXG4gICAgaWYgKG1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzVW5pb25UeXBlKShhYnN0cmFjdFR5cGUpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBhYnN0cmFjdFR5cGUuZ2V0VHlwZXMoKSkge1xuICAgICAgICAgIG1hcFt0eXBlLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaW1wbGVtZW50YXRpb25zID0gdGhpcy5nZXRJbXBsZW1lbnRhdGlvbnMoYWJzdHJhY3RUeXBlKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgaW1wbGVtZW50YXRpb25zLm9iamVjdHMpIHtcbiAgICAgICAgICBtYXBbdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgaW1wbGVtZW50YXRpb25zLmludGVyZmFjZXMpIHtcbiAgICAgICAgICBtYXBbdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3ViVHlwZU1hcFthYnN0cmFjdFR5cGUubmFtZV0gPSBtYXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcFttYXliZVN1YlR5cGUubmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldERpcmVjdGl2ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGl2ZXM7XG4gIH1cblxuICBnZXREaXJlY3RpdmUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmdldERpcmVjdGl2ZXMoKS5maW5kKChkaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5uYW1lID09PSBuYW1lKTtcbiAgfVxuXG4gIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHF1ZXJ5OiB0aGlzLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgbXV0YXRpb246IHRoaXMuZ2V0TXV0YXRpb25UeXBlKCksXG4gICAgICBzdWJzY3JpcHRpb246IHRoaXMuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpLFxuICAgICAgdHlwZXM6IE9iamVjdC52YWx1ZXModGhpcy5nZXRUeXBlTWFwKCkpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5nZXREaXJlY3RpdmVzKCksXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogdGhpcy5leHRlbnNpb25BU1ROb2RlcyxcbiAgICAgIGFzc3VtZVZhbGlkOiB0aGlzLl9fdmFsaWRhdGlvbkVycm9ycyAhPT0gdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMU2NoZW1hID0gR3JhcGhRTFNjaGVtYTtcblxuZnVuY3Rpb24gY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0eXBlLCB0eXBlU2V0KSB7XG4gIGNvbnN0IG5hbWVkVHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKHR5cGUpO1xuXG4gIGlmICghdHlwZVNldC5oYXMobmFtZWRUeXBlKSkge1xuICAgIHR5cGVTZXQuYWRkKG5hbWVkVHlwZSk7XG5cbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzVW5pb25UeXBlKShuYW1lZFR5cGUpKSB7XG4gICAgICBmb3IgKGNvbnN0IG1lbWJlclR5cGUgb2YgbmFtZWRUeXBlLmdldFR5cGVzKCkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhtZW1iZXJUeXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkobmFtZWRUeXBlKSB8fFxuICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW50ZXJmYWNlVHlwZSkobmFtZWRUeXBlKVxuICAgICkge1xuICAgICAgZm9yIChjb25zdCBpbnRlcmZhY2VUeXBlIG9mIG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhpbnRlcmZhY2VUeXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3QudmFsdWVzKG5hbWVkVHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhmaWVsZC50eXBlLCB0eXBlU2V0KTtcblxuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBmaWVsZC5hcmdzKSB7XG4gICAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhhcmcudHlwZSwgdHlwZVNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkobmFtZWRUeXBlKSkge1xuICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3QudmFsdWVzKG5hbWVkVHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhmaWVsZC50eXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZVNldDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5hc3NlcnRWYWxpZFNjaGVtYSA9IGFzc2VydFZhbGlkU2NoZW1hO1xuZXhwb3J0cy52YWxpZGF0ZVNjaGVtYSA9IHZhbGlkYXRlU2NoZW1hO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9hc3QgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9hc3QuanMnKTtcblxudmFyIF90eXBlQ29tcGFyYXRvcnMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZXMgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMuanMnKTtcblxudmFyIF9pbnRyb3NwZWN0aW9uID0gcmVxdWlyZSgnLi9pbnRyb3NwZWN0aW9uLmpzJyk7XG5cbnZhciBfc2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEuanMnKTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIlR5cGUgVmFsaWRhdGlvblwiIHN1Yi1zZWN0aW9ucyBvZiB0aGUgc3BlY2lmaWNhdGlvbidzXG4gKiBcIlR5cGUgU3lzdGVtXCIgc2VjdGlvbi5cbiAqXG4gKiBWYWxpZGF0aW9uIHJ1bnMgc3luY2hyb25vdXNseSwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGVuY291bnRlcmVkIGVycm9ycywgb3JcbiAqIGFuIGVtcHR5IGFycmF5IGlmIG5vIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkIGFuZCB0aGUgU2NoZW1hIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpIHtcbiAgLy8gRmlyc3QgY2hlY2sgdG8gZW5zdXJlIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBpbiBmYWN0IGEgR3JhcGhRTFNjaGVtYS5cbiAgKDAsIF9zY2hlbWEuYXNzZXJ0U2NoZW1hKShzY2hlbWEpOyAvLyBJZiB0aGlzIFNjaGVtYSBoYXMgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCwgcmV0dXJuIHRoZSBwcmV2aW91cyByZXN1bHRzLlxuXG4gIGlmIChzY2hlbWEuX192YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5fX3ZhbGlkYXRpb25FcnJvcnM7XG4gIH0gLy8gVmFsaWRhdGUgdGhlIHNjaGVtYSwgcHJvZHVjaW5nIGEgbGlzdCBvZiBlcnJvcnMuXG5cbiAgY29uc3QgY29udGV4dCA9IG5ldyBTY2hlbWFWYWxpZGF0aW9uQ29udGV4dChzY2hlbWEpO1xuICB2YWxpZGF0ZVJvb3RUeXBlcyhjb250ZXh0KTtcbiAgdmFsaWRhdGVEaXJlY3RpdmVzKGNvbnRleHQpO1xuICB2YWxpZGF0ZVR5cGVzKGNvbnRleHQpOyAvLyBQZXJzaXN0IHRoZSByZXN1bHRzIG9mIHZhbGlkYXRpb24gYmVmb3JlIHJldHVybmluZyB0byBlbnN1cmUgdmFsaWRhdGlvblxuICAvLyBkb2VzIG5vdCBydW4gbXVsdGlwbGUgdGltZXMgZm9yIHRoaXMgc2NoZW1hLlxuXG4gIGNvbnN0IGVycm9ycyA9IGNvbnRleHQuZ2V0RXJyb3JzKCk7XG4gIHNjaGVtYS5fX3ZhbGlkYXRpb25FcnJvcnMgPSBlcnJvcnM7XG4gIHJldHVybiBlcnJvcnM7XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gd2hpY2ggYXNzZXJ0cyBhIHNjaGVtYSBpcyB2YWxpZCBieSB0aHJvd2luZyBhbiBlcnJvciBpZlxuICogaXQgaXMgaW52YWxpZC5cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFNjaGVtYShzY2hlbWEpIHtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG5cbmNsYXNzIFNjaGVtYVZhbGlkYXRpb25Db250ZXh0IHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgdGhpcy5fZXJyb3JzID0gW107XG4gICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gIH1cblxuICByZXBvcnRFcnJvcihtZXNzYWdlLCBub2Rlcykge1xuICAgIGNvbnN0IF9ub2RlcyA9IEFycmF5LmlzQXJyYXkobm9kZXMpID8gbm9kZXMuZmlsdGVyKEJvb2xlYW4pIDogbm9kZXM7XG5cbiAgICB0aGlzLl9lcnJvcnMucHVzaChcbiAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihtZXNzYWdlLCB7XG4gICAgICAgIG5vZGVzOiBfbm9kZXMsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgZ2V0RXJyb3JzKCkge1xuICAgIHJldHVybiB0aGlzLl9lcnJvcnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVSb290VHlwZXMoY29udGV4dCkge1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LnNjaGVtYTtcbiAgY29uc3QgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gIGlmICghcXVlcnlUeXBlKSB7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcignUXVlcnkgcm9vdCB0eXBlIG11c3QgYmUgcHJvdmlkZWQuJywgc2NoZW1hLmFzdE5vZGUpO1xuICB9IGVsc2UgaWYgKCEoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShxdWVyeVR5cGUpKSB7XG4gICAgdmFyIF9nZXRPcGVyYXRpb25UeXBlTm9kZTtcblxuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICBgUXVlcnkgcm9vdCB0eXBlIG11c3QgYmUgT2JqZWN0IHR5cGUsIGl0IGNhbm5vdCBiZSAkeygwLFxuICAgICAgX2luc3BlY3QuaW5zcGVjdCkocXVlcnlUeXBlKX0uYCxcbiAgICAgIChfZ2V0T3BlcmF0aW9uVHlwZU5vZGUgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBfYXN0Lk9wZXJhdGlvblR5cGVOb2RlLlFVRVJZLFxuICAgICAgKSkgIT09IG51bGwgJiYgX2dldE9wZXJhdGlvblR5cGVOb2RlICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZ2V0T3BlcmF0aW9uVHlwZU5vZGVcbiAgICAgICAgOiBxdWVyeVR5cGUuYXN0Tm9kZSxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbXV0YXRpb25UeXBlID0gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpO1xuXG4gIGlmIChtdXRhdGlvblR5cGUgJiYgISgwLCBfZGVmaW5pdGlvbi5pc09iamVjdFR5cGUpKG11dGF0aW9uVHlwZSkpIHtcbiAgICB2YXIgX2dldE9wZXJhdGlvblR5cGVOb2RlMjtcblxuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAnTXV0YXRpb24gcm9vdCB0eXBlIG11c3QgYmUgT2JqZWN0IHR5cGUgaWYgcHJvdmlkZWQsIGl0IGNhbm5vdCBiZSAnICtcbiAgICAgICAgYCR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKG11dGF0aW9uVHlwZSl9LmAsXG4gICAgICAoX2dldE9wZXJhdGlvblR5cGVOb2RlMiA9IGdldE9wZXJhdGlvblR5cGVOb2RlKFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIF9hc3QuT3BlcmF0aW9uVHlwZU5vZGUuTVVUQVRJT04sXG4gICAgICApKSAhPT0gbnVsbCAmJiBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyXG4gICAgICAgIDogbXV0YXRpb25UeXBlLmFzdE5vZGUsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChzdWJzY3JpcHRpb25UeXBlICYmICEoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShzdWJzY3JpcHRpb25UeXBlKSkge1xuICAgIHZhciBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzO1xuXG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICdTdWJzY3JpcHRpb24gcm9vdCB0eXBlIG11c3QgYmUgT2JqZWN0IHR5cGUgaWYgcHJvdmlkZWQsIGl0IGNhbm5vdCBiZSAnICtcbiAgICAgICAgYCR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHN1YnNjcmlwdGlvblR5cGUpfS5gLFxuICAgICAgKF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBfYXN0Lk9wZXJhdGlvblR5cGVOb2RlLlNVQlNDUklQVElPTixcbiAgICAgICkpICE9PSBudWxsICYmIF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgIT09IHZvaWQgMFxuICAgICAgICA/IF9nZXRPcGVyYXRpb25UeXBlTm9kZTNcbiAgICAgICAgOiBzdWJzY3JpcHRpb25UeXBlLmFzdE5vZGUsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25UeXBlTm9kZShzY2hlbWEsIG9wZXJhdGlvbikge1xuICB2YXIgX2ZsYXRNYXAkZmluZDtcblxuICByZXR1cm4gKF9mbGF0TWFwJGZpbmQgPSBbc2NoZW1hLmFzdE5vZGUsIC4uLnNjaGVtYS5leHRlbnNpb25BU1ROb2Rlc11cbiAgICAuZmxhdE1hcChcbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG4gICAgICAoc2NoZW1hTm9kZSkgPT4ge1xuICAgICAgICB2YXIgX3NjaGVtYU5vZGUkb3BlcmF0aW9uO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAoX3NjaGVtYU5vZGUkb3BlcmF0aW9uID1cbiAgICAgICAgICAgIHNjaGVtYU5vZGUgPT09IG51bGwgfHwgc2NoZW1hTm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogc2NoZW1hTm9kZS5vcGVyYXRpb25UeXBlcykgIT09IG51bGwgJiZcbiAgICAgICAgICAgIF9zY2hlbWFOb2RlJG9wZXJhdGlvbiAhPT0gdm9pZCAwXG4gICAgICAgICAgICA/IF9zY2hlbWFOb2RlJG9wZXJhdGlvblxuICAgICAgICAgICAgOiBbXVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICApXG4gICAgLmZpbmQoKG9wZXJhdGlvbk5vZGUpID0+IG9wZXJhdGlvbk5vZGUub3BlcmF0aW9uID09PSBvcGVyYXRpb24pKSA9PT0gbnVsbCB8fFxuICAgIF9mbGF0TWFwJGZpbmQgPT09IHZvaWQgMFxuICAgID8gdm9pZCAwXG4gICAgOiBfZmxhdE1hcCRmaW5kLnR5cGU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlcyhjb250ZXh0KSB7XG4gIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGNvbnRleHQuc2NoZW1hLmdldERpcmVjdGl2ZXMoKSkge1xuICAgIC8vIEVuc3VyZSBhbGwgZGlyZWN0aXZlcyBhcmUgaW4gZmFjdCBHcmFwaFFMIGRpcmVjdGl2ZXMuXG4gICAgaWYgKCEoMCwgX2RpcmVjdGl2ZXMuaXNEaXJlY3RpdmUpKGRpcmVjdGl2ZSkpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCBkaXJlY3RpdmUgYnV0IGdvdDogJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoZGlyZWN0aXZlKX0uYCxcbiAgICAgICAgZGlyZWN0aXZlID09PSBudWxsIHx8IGRpcmVjdGl2ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlyZWN0aXZlLmFzdE5vZGUsXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGRpcmVjdGl2ZSk7IC8vIFRPRE86IEVuc3VyZSBwcm9wZXIgbG9jYXRpb25zLlxuICAgIC8vIEVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSB2YWxpZC5cblxuICAgIGZvciAoY29uc3QgYXJnIG9mIGRpcmVjdGl2ZS5hcmdzKSB7XG4gICAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGFyZyk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBpbnB1dCB0eXBlLlxuXG4gICAgICBpZiAoISgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkoYXJnLnR5cGUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgYFRoZSB0eXBlIG9mIEAke2RpcmVjdGl2ZS5uYW1lfSgke2FyZy5uYW1lfTopIG11c3QgYmUgSW5wdXQgVHlwZSBgICtcbiAgICAgICAgICAgIGBidXQgZ290OiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShhcmcudHlwZSl9LmAsXG4gICAgICAgICAgYXJnLmFzdE5vZGUsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzUmVxdWlyZWRBcmd1bWVudCkoYXJnKSAmJlxuICAgICAgICBhcmcuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHZhciBfYXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgUmVxdWlyZWQgYXJndW1lbnQgQCR7ZGlyZWN0aXZlLm5hbWV9KCR7YXJnLm5hbWV9OikgY2Fubm90IGJlIGRlcHJlY2F0ZWQuYCxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShhcmcuYXN0Tm9kZSksXG4gICAgICAgICAgICAoX2FyZyRhc3ROb2RlID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX2FyZyRhc3ROb2RlLnR5cGUsXG4gICAgICAgICAgXSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKGNvbnRleHQsIG5vZGUpIHtcbiAgLy8gRW5zdXJlIG5hbWVzIGFyZSB2YWxpZCwgaG93ZXZlciBpbnRyb3NwZWN0aW9uIHR5cGVzIG9wdCBvdXQuXG4gIGlmIChub2RlLm5hbWUuc3RhcnRzV2l0aCgnX18nKSkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICBgTmFtZSBcIiR7bm9kZS5uYW1lfVwiIG11c3Qgbm90IGJlZ2luIHdpdGggXCJfX1wiLCB3aGljaCBpcyByZXNlcnZlZCBieSBHcmFwaFFMIGludHJvc3BlY3Rpb24uYCxcbiAgICAgIG5vZGUuYXN0Tm9kZSxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZXMoY29udGV4dCkge1xuICBjb25zdCB2YWxpZGF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzID1cbiAgICBjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcihjb250ZXh0KTtcbiAgY29uc3QgdHlwZU1hcCA9IGNvbnRleHQuc2NoZW1hLmdldFR5cGVNYXAoKTtcblxuICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LnZhbHVlcyh0eXBlTWFwKSkge1xuICAgIC8vIEVuc3VyZSBhbGwgcHJvdmlkZWQgdHlwZXMgYXJlIGluIGZhY3QgR3JhcGhRTCB0eXBlLlxuICAgIGlmICghKDAsIF9kZWZpbml0aW9uLmlzTmFtZWRUeXBlKSh0eXBlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIEdyYXBoUUwgbmFtZWQgdHlwZSBidXQgZ290OiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKX0uYCxcbiAgICAgICAgdHlwZS5hc3ROb2RlLFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gRW5zdXJlIGl0IGlzIG5hbWVkIGNvcnJlY3RseSAoZXhjbHVkaW5nIGludHJvc3BlY3Rpb24gdHlwZXMpLlxuXG4gICAgaWYgKCEoMCwgX2ludHJvc3BlY3Rpb24uaXNJbnRyb3NwZWN0aW9uVHlwZSkodHlwZSkpIHtcbiAgICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCB0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBmaWVsZHMgYXJlIHZhbGlkXG4gICAgICB2YWxpZGF0ZUZpZWxkcyhjb250ZXh0LCB0eXBlKTsgLy8gRW5zdXJlIG9iamVjdHMgaW1wbGVtZW50IHRoZSBpbnRlcmZhY2VzIHRoZXkgY2xhaW0gdG8uXG5cbiAgICAgIHZhbGlkYXRlSW50ZXJmYWNlcyhjb250ZXh0LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgZmllbGRzIGFyZSB2YWxpZC5cbiAgICAgIHZhbGlkYXRlRmllbGRzKGNvbnRleHQsIHR5cGUpOyAvLyBFbnN1cmUgaW50ZXJmYWNlcyBpbXBsZW1lbnQgdGhlIGludGVyZmFjZXMgdGhleSBjbGFpbSB0by5cblxuICAgICAgdmFsaWRhdGVJbnRlcmZhY2VzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9kZWZpbml0aW9uLmlzVW5pb25UeXBlKSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIFVuaW9ucyBpbmNsdWRlIHZhbGlkIG1lbWJlciB0eXBlcy5cbiAgICAgIHZhbGlkYXRlVW5pb25NZW1iZXJzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9kZWZpbml0aW9uLmlzRW51bVR5cGUpKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgRW51bXMgaGF2ZSB2YWxpZCB2YWx1ZXMuXG4gICAgICB2YWxpZGF0ZUVudW1WYWx1ZXMoY29udGV4dCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnB1dE9iamVjdFR5cGUpKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgSW5wdXQgT2JqZWN0IGZpZWxkcyBhcmUgdmFsaWQuXG4gICAgICB2YWxpZGF0ZUlucHV0RmllbGRzKGNvbnRleHQsIHR5cGUpOyAvLyBFbnN1cmUgSW5wdXQgT2JqZWN0cyBkbyBub3QgY29udGFpbiBub24tbnVsbGFibGUgY2lyY3VsYXIgcmVmZXJlbmNlc1xuXG4gICAgICB2YWxpZGF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzKHR5cGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkcyhjb250ZXh0LCB0eXBlKSB7XG4gIGNvbnN0IGZpZWxkcyA9IE9iamVjdC52YWx1ZXModHlwZS5nZXRGaWVsZHMoKSk7IC8vIE9iamVjdHMgYW5kIEludGVyZmFjZXMgYm90aCBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBmaWVsZHMuXG5cbiAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKGBUeXBlICR7dHlwZS5uYW1lfSBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBmaWVsZHMuYCwgW1xuICAgICAgdHlwZS5hc3ROb2RlLFxuICAgICAgLi4udHlwZS5leHRlbnNpb25BU1ROb2RlcyxcbiAgICBdKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgLy8gRW5zdXJlIHRoZXkgYXJlIG5hbWVkIGNvcnJlY3RseS5cbiAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgZmllbGQpOyAvLyBFbnN1cmUgdGhlIHR5cGUgaXMgYW4gb3V0cHV0IHR5cGVcblxuICAgIGlmICghKDAsIF9kZWZpbml0aW9uLmlzT3V0cHV0VHlwZSkoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTtcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFRoZSB0eXBlIG9mICR7dHlwZS5uYW1lfS4ke2ZpZWxkLm5hbWV9IG11c3QgYmUgT3V0cHV0IFR5cGUgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGZpZWxkLnR5cGUpfS5gLFxuICAgICAgICAoX2ZpZWxkJGFzdE5vZGUgPSBmaWVsZC5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfZmllbGQkYXN0Tm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IF9maWVsZCRhc3ROb2RlLnR5cGUsXG4gICAgICApO1xuICAgIH0gLy8gRW5zdXJlIHRoZSBhcmd1bWVudHMgYXJlIHZhbGlkXG5cbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBmaWVsZC5hcmdzKSB7XG4gICAgICBjb25zdCBhcmdOYW1lID0gYXJnLm5hbWU7IC8vIEVuc3VyZSB0aGV5IGFyZSBuYW1lZCBjb3JyZWN0bHkuXG5cbiAgICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBhcmcpOyAvLyBFbnN1cmUgdGhlIHR5cGUgaXMgYW4gaW5wdXQgdHlwZVxuXG4gICAgICBpZiAoISgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkoYXJnLnR5cGUpKSB7XG4gICAgICAgIHZhciBfYXJnJGFzdE5vZGUyO1xuXG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgYFRoZSB0eXBlIG9mICR7dHlwZS5uYW1lfS4ke2ZpZWxkLm5hbWV9KCR7YXJnTmFtZX06KSBtdXN0IGJlIElucHV0IGAgK1xuICAgICAgICAgICAgYFR5cGUgYnV0IGdvdDogJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoYXJnLnR5cGUpfS5gLFxuICAgICAgICAgIChfYXJnJGFzdE5vZGUyID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZTIgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgIDogX2FyZyRhc3ROb2RlMi50eXBlLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc1JlcXVpcmVkQXJndW1lbnQpKGFyZykgJiZcbiAgICAgICAgYXJnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGxcbiAgICAgICkge1xuICAgICAgICB2YXIgX2FyZyRhc3ROb2RlMztcblxuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIGBSZXF1aXJlZCBhcmd1bWVudCAke3R5cGUubmFtZX0uJHtmaWVsZC5uYW1lfSgke2FyZ05hbWV9OikgY2Fubm90IGJlIGRlcHJlY2F0ZWQuYCxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShhcmcuYXN0Tm9kZSksXG4gICAgICAgICAgICAoX2FyZyRhc3ROb2RlMyA9IGFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfYXJnJGFzdE5vZGUzID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfYXJnJGFzdE5vZGUzLnR5cGUsXG4gICAgICAgICAgXSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbnRlcmZhY2VzKGNvbnRleHQsIHR5cGUpIHtcbiAgY29uc3QgaWZhY2VUeXBlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3QgaWZhY2Ugb2YgdHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICBpZiAoISgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKGlmYWNlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFR5cGUgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgKX0gbXVzdCBvbmx5IGltcGxlbWVudCBJbnRlcmZhY2UgdHlwZXMsIGAgK1xuICAgICAgICAgIGBpdCBjYW5ub3QgaW1wbGVtZW50ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGlmYWNlKX0uYCxcbiAgICAgICAgZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKHR5cGUsIGlmYWNlKSxcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gaWZhY2UpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBUeXBlICR7dHlwZS5uYW1lfSBjYW5ub3QgaW1wbGVtZW50IGl0c2VsZiBiZWNhdXNlIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyIHJlZmVyZW5jZS5gLFxuICAgICAgICBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpLFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpZmFjZVR5cGVOYW1lc1tpZmFjZS5uYW1lXSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFR5cGUgJHt0eXBlLm5hbWV9IGNhbiBvbmx5IGltcGxlbWVudCAke2lmYWNlLm5hbWV9IG9uY2UuYCxcbiAgICAgICAgZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKHR5cGUsIGlmYWNlKSxcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZmFjZVR5cGVOYW1lc1tpZmFjZS5uYW1lXSA9IHRydWU7XG4gICAgdmFsaWRhdGVUeXBlSW1wbGVtZW50c0FuY2VzdG9ycyhjb250ZXh0LCB0eXBlLCBpZmFjZSk7XG4gICAgdmFsaWRhdGVUeXBlSW1wbGVtZW50c0ludGVyZmFjZShjb250ZXh0LCB0eXBlLCBpZmFjZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlSW1wbGVtZW50c0ludGVyZmFjZShjb250ZXh0LCB0eXBlLCBpZmFjZSkge1xuICBjb25zdCB0eXBlRmllbGRNYXAgPSB0eXBlLmdldEZpZWxkcygpOyAvLyBBc3NlcnQgZWFjaCBpbnRlcmZhY2UgZmllbGQgaXMgaW1wbGVtZW50ZWQuXG5cbiAgZm9yIChjb25zdCBpZmFjZUZpZWxkIG9mIE9iamVjdC52YWx1ZXMoaWZhY2UuZ2V0RmllbGRzKCkpKSB7XG4gICAgY29uc3QgZmllbGROYW1lID0gaWZhY2VGaWVsZC5uYW1lO1xuICAgIGNvbnN0IHR5cGVGaWVsZCA9IHR5cGVGaWVsZE1hcFtmaWVsZE5hbWVdOyAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIGV4aXN0cyBvbiB0eXBlLlxuXG4gICAgaWYgKCF0eXBlRmllbGQpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBJbnRlcmZhY2UgZmllbGQgJHtpZmFjZS5uYW1lfS4ke2ZpZWxkTmFtZX0gZXhwZWN0ZWQgYnV0ICR7dHlwZS5uYW1lfSBkb2VzIG5vdCBwcm92aWRlIGl0LmAsXG4gICAgICAgIFtpZmFjZUZpZWxkLmFzdE5vZGUsIHR5cGUuYXN0Tm9kZSwgLi4udHlwZS5leHRlbnNpb25BU1ROb2Rlc10sXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIHR5cGUgaXMgc2F0aXNmaWVkIGJ5IHR5cGUgZmllbGQgdHlwZSwgYnkgYmVpbmdcbiAgICAvLyBhIHZhbGlkIHN1YnR5cGUuIChjb3ZhcmlhbnQpXG5cbiAgICBpZiAoXG4gICAgICAhKDAsIF90eXBlQ29tcGFyYXRvcnMuaXNUeXBlU3ViVHlwZU9mKShcbiAgICAgICAgY29udGV4dC5zY2hlbWEsXG4gICAgICAgIHR5cGVGaWVsZC50eXBlLFxuICAgICAgICBpZmFjZUZpZWxkLnR5cGUsXG4gICAgICApXG4gICAgKSB7XG4gICAgICB2YXIgX2lmYWNlRmllbGQkYXN0Tm9kZSwgX3R5cGVGaWVsZCRhc3ROb2RlO1xuXG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBgSW50ZXJmYWNlIGZpZWxkICR7aWZhY2UubmFtZX0uJHtmaWVsZE5hbWV9IGV4cGVjdHMgdHlwZSBgICtcbiAgICAgICAgICBgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoaWZhY2VGaWVsZC50eXBlKX0gYnV0ICR7XG4gICAgICAgICAgICB0eXBlLm5hbWVcbiAgICAgICAgICB9LiR7ZmllbGROYW1lfSBgICtcbiAgICAgICAgICBgaXMgdHlwZSAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlRmllbGQudHlwZSl9LmAsXG4gICAgICAgIFtcbiAgICAgICAgICAoX2lmYWNlRmllbGQkYXN0Tm9kZSA9IGlmYWNlRmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHxcbiAgICAgICAgICBfaWZhY2VGaWVsZCRhc3ROb2RlID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IF9pZmFjZUZpZWxkJGFzdE5vZGUudHlwZSxcbiAgICAgICAgICAoX3R5cGVGaWVsZCRhc3ROb2RlID0gdHlwZUZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8XG4gICAgICAgICAgX3R5cGVGaWVsZCRhc3ROb2RlID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IF90eXBlRmllbGQkYXN0Tm9kZS50eXBlLFxuICAgICAgICBdLFxuICAgICAgKTtcbiAgICB9IC8vIEFzc2VydCBlYWNoIGludGVyZmFjZSBmaWVsZCBhcmcgaXMgaW1wbGVtZW50ZWQuXG5cbiAgICBmb3IgKGNvbnN0IGlmYWNlQXJnIG9mIGlmYWNlRmllbGQuYXJncykge1xuICAgICAgY29uc3QgYXJnTmFtZSA9IGlmYWNlQXJnLm5hbWU7XG4gICAgICBjb25zdCB0eXBlQXJnID0gdHlwZUZpZWxkLmFyZ3MuZmluZCgoYXJnKSA9PiBhcmcubmFtZSA9PT0gYXJnTmFtZSk7IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgYXJnIGV4aXN0cyBvbiBvYmplY3QgZmllbGQuXG5cbiAgICAgIGlmICghdHlwZUFyZykge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIGBJbnRlcmZhY2UgZmllbGQgYXJndW1lbnQgJHtpZmFjZS5uYW1lfS4ke2ZpZWxkTmFtZX0oJHthcmdOYW1lfTopIGV4cGVjdGVkIGJ1dCAke3R5cGUubmFtZX0uJHtmaWVsZE5hbWV9IGRvZXMgbm90IHByb3ZpZGUgaXQuYCxcbiAgICAgICAgICBbaWZhY2VBcmcuYXN0Tm9kZSwgdHlwZUZpZWxkLmFzdE5vZGVdLFxuICAgICAgICApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gQXNzZXJ0IGludGVyZmFjZSBmaWVsZCBhcmcgdHlwZSBtYXRjaGVzIG9iamVjdCBmaWVsZCBhcmcgdHlwZS5cbiAgICAgIC8vIChpbnZhcmlhbnQpXG4gICAgICAvLyBUT0RPOiBjaGFuZ2UgdG8gY29udHJhdmFyaWFudD9cblxuICAgICAgaWYgKCEoMCwgX3R5cGVDb21wYXJhdG9ycy5pc0VxdWFsVHlwZSkoaWZhY2VBcmcudHlwZSwgdHlwZUFyZy50eXBlKSkge1xuICAgICAgICB2YXIgX2lmYWNlQXJnJGFzdE5vZGUsIF90eXBlQXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgSW50ZXJmYWNlIGZpZWxkIGFyZ3VtZW50ICR7aWZhY2UubmFtZX0uJHtmaWVsZE5hbWV9KCR7YXJnTmFtZX06KSBgICtcbiAgICAgICAgICAgIGBleHBlY3RzIHR5cGUgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoaWZhY2VBcmcudHlwZSl9IGJ1dCBgICtcbiAgICAgICAgICAgIGAke3R5cGUubmFtZX0uJHtmaWVsZE5hbWV9KCR7YXJnTmFtZX06KSBpcyB0eXBlIGAgK1xuICAgICAgICAgICAgYCR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGVBcmcudHlwZSl9LmAsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgKF9pZmFjZUFyZyRhc3ROb2RlID0gaWZhY2VBcmcuYXN0Tm9kZSkgPT09IG51bGwgfHxcbiAgICAgICAgICAgIF9pZmFjZUFyZyRhc3ROb2RlID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfaWZhY2VBcmckYXN0Tm9kZS50eXBlLFxuICAgICAgICAgICAgKF90eXBlQXJnJGFzdE5vZGUgPSB0eXBlQXJnLmFzdE5vZGUpID09PSBudWxsIHx8XG4gICAgICAgICAgICBfdHlwZUFyZyRhc3ROb2RlID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfdHlwZUFyZyRhc3ROb2RlLnR5cGUsXG4gICAgICAgICAgXSxcbiAgICAgICAgKTtcbiAgICAgIH0gLy8gVE9ETzogdmFsaWRhdGUgZGVmYXVsdCB2YWx1ZXM/XG4gICAgfSAvLyBBc3NlcnQgYWRkaXRpb25hbCBhcmd1bWVudHMgbXVzdCBub3QgYmUgcmVxdWlyZWQuXG5cbiAgICBmb3IgKGNvbnN0IHR5cGVBcmcgb2YgdHlwZUZpZWxkLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGFyZ05hbWUgPSB0eXBlQXJnLm5hbWU7XG4gICAgICBjb25zdCBpZmFjZUFyZyA9IGlmYWNlRmllbGQuYXJncy5maW5kKChhcmcpID0+IGFyZy5uYW1lID09PSBhcmdOYW1lKTtcblxuICAgICAgaWYgKCFpZmFjZUFyZyAmJiAoMCwgX2RlZmluaXRpb24uaXNSZXF1aXJlZEFyZ3VtZW50KSh0eXBlQXJnKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIGBPYmplY3QgZmllbGQgJHt0eXBlLm5hbWV9LiR7ZmllbGROYW1lfSBpbmNsdWRlcyByZXF1aXJlZCBhcmd1bWVudCAke2FyZ05hbWV9IHRoYXQgaXMgbWlzc2luZyBmcm9tIHRoZSBJbnRlcmZhY2UgZmllbGQgJHtpZmFjZS5uYW1lfS4ke2ZpZWxkTmFtZX0uYCxcbiAgICAgICAgICBbdHlwZUFyZy5hc3ROb2RlLCBpZmFjZUZpZWxkLmFzdE5vZGVdLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzKGNvbnRleHQsIHR5cGUsIGlmYWNlKSB7XG4gIGNvbnN0IGlmYWNlSW50ZXJmYWNlcyA9IHR5cGUuZ2V0SW50ZXJmYWNlcygpO1xuXG4gIGZvciAoY29uc3QgdHJhbnNpdGl2ZSBvZiBpZmFjZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICBpZiAoIWlmYWNlSW50ZXJmYWNlcy5pbmNsdWRlcyh0cmFuc2l0aXZlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgdHJhbnNpdGl2ZSA9PT0gdHlwZVxuICAgICAgICAgID8gYFR5cGUgJHt0eXBlLm5hbWV9IGNhbm5vdCBpbXBsZW1lbnQgJHtpZmFjZS5uYW1lfSBiZWNhdXNlIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyIHJlZmVyZW5jZS5gXG4gICAgICAgICAgOiBgVHlwZSAke3R5cGUubmFtZX0gbXVzdCBpbXBsZW1lbnQgJHt0cmFuc2l0aXZlLm5hbWV9IGJlY2F1c2UgaXQgaXMgaW1wbGVtZW50ZWQgYnkgJHtpZmFjZS5uYW1lfS5gLFxuICAgICAgICBbXG4gICAgICAgICAgLi4uZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKGlmYWNlLCB0cmFuc2l0aXZlKSxcbiAgICAgICAgICAuLi5nZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpLFxuICAgICAgICBdLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVVbmlvbk1lbWJlcnMoY29udGV4dCwgdW5pb24pIHtcbiAgY29uc3QgbWVtYmVyVHlwZXMgPSB1bmlvbi5nZXRUeXBlcygpO1xuXG4gIGlmIChtZW1iZXJUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgYFVuaW9uIHR5cGUgJHt1bmlvbi5uYW1lfSBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBtZW1iZXIgdHlwZXMuYCxcbiAgICAgIFt1bmlvbi5hc3ROb2RlLCAuLi51bmlvbi5leHRlbnNpb25BU1ROb2Rlc10sXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGluY2x1ZGVkVHlwZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IG1lbWJlclR5cGUgb2YgbWVtYmVyVHlwZXMpIHtcbiAgICBpZiAoaW5jbHVkZWRUeXBlTmFtZXNbbWVtYmVyVHlwZS5uYW1lXSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFVuaW9uIHR5cGUgJHt1bmlvbi5uYW1lfSBjYW4gb25seSBpbmNsdWRlIHR5cGUgJHttZW1iZXJUeXBlLm5hbWV9IG9uY2UuYCxcbiAgICAgICAgZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIG1lbWJlclR5cGUubmFtZSksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaW5jbHVkZWRUeXBlTmFtZXNbbWVtYmVyVHlwZS5uYW1lXSA9IHRydWU7XG5cbiAgICBpZiAoISgwLCBfZGVmaW5pdGlvbi5pc09iamVjdFR5cGUpKG1lbWJlclR5cGUpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBgVW5pb24gdHlwZSAke3VuaW9uLm5hbWV9IGNhbiBvbmx5IGluY2x1ZGUgT2JqZWN0IHR5cGVzLCBgICtcbiAgICAgICAgICBgaXQgY2Fubm90IGluY2x1ZGUgJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkobWVtYmVyVHlwZSl9LmAsXG4gICAgICAgIGdldFVuaW9uTWVtYmVyVHlwZU5vZGVzKHVuaW9uLCBTdHJpbmcobWVtYmVyVHlwZSkpLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbnVtVmFsdWVzKGNvbnRleHQsIGVudW1UeXBlKSB7XG4gIGNvbnN0IGVudW1WYWx1ZXMgPSBlbnVtVHlwZS5nZXRWYWx1ZXMoKTtcblxuICBpZiAoZW51bVZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgYEVudW0gdHlwZSAke2VudW1UeXBlLm5hbWV9IG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIHZhbHVlcy5gLFxuICAgICAgW2VudW1UeXBlLmFzdE5vZGUsIC4uLmVudW1UeXBlLmV4dGVuc2lvbkFTVE5vZGVzXSxcbiAgICApO1xuICB9XG5cbiAgZm9yIChjb25zdCBlbnVtVmFsdWUgb2YgZW51bVZhbHVlcykge1xuICAgIC8vIEVuc3VyZSB2YWxpZCBuYW1lLlxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBlbnVtVmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRGaWVsZHMoY29udGV4dCwgaW5wdXRPYmopIHtcbiAgY29uc3QgZmllbGRzID0gT2JqZWN0LnZhbHVlcyhpbnB1dE9iai5nZXRGaWVsZHMoKSk7XG5cbiAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgYElucHV0IE9iamVjdCB0eXBlICR7aW5wdXRPYmoubmFtZX0gbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgZmllbGRzLmAsXG4gICAgICBbaW5wdXRPYmouYXN0Tm9kZSwgLi4uaW5wdXRPYmouZXh0ZW5zaW9uQVNUTm9kZXNdLFxuICAgICk7XG4gIH0gLy8gRW5zdXJlIHRoZSBhcmd1bWVudHMgYXJlIHZhbGlkXG5cbiAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBmaWVsZCk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBpbnB1dCB0eXBlXG5cbiAgICBpZiAoISgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTI7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBUaGUgdHlwZSBvZiAke2lucHV0T2JqLm5hbWV9LiR7ZmllbGQubmFtZX0gbXVzdCBiZSBJbnB1dCBUeXBlIGAgK1xuICAgICAgICAgIGBidXQgZ290OiAkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShmaWVsZC50eXBlKX0uYCxcbiAgICAgICAgKF9maWVsZCRhc3ROb2RlMiA9IGZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF9maWVsZCRhc3ROb2RlMiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IF9maWVsZCRhc3ROb2RlMi50eXBlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoMCwgX2RlZmluaXRpb24uaXNSZXF1aXJlZElucHV0RmllbGQpKGZpZWxkKSAmJlxuICAgICAgZmllbGQuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIF9maWVsZCRhc3ROb2RlMztcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFJlcXVpcmVkIGlucHV0IGZpZWxkICR7aW5wdXRPYmoubmFtZX0uJHtmaWVsZC5uYW1lfSBjYW5ub3QgYmUgZGVwcmVjYXRlZC5gLFxuICAgICAgICBbXG4gICAgICAgICAgZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoZmllbGQuYXN0Tm9kZSksXG4gICAgICAgICAgKF9maWVsZCRhc3ROb2RlMyA9IGZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8XG4gICAgICAgICAgX2ZpZWxkJGFzdE5vZGUzID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IF9maWVsZCRhc3ROb2RlMy50eXBlLFxuICAgICAgICBdLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnNWYWxpZGF0b3IoY29udGV4dCkge1xuICAvLyBNb2RpZmllZCBjb3B5IG9mIGFsZ29yaXRobSBmcm9tICdzcmMvdmFsaWRhdGlvbi9ydWxlcy9Ob0ZyYWdtZW50Q3ljbGVzLmpzJy5cbiAgLy8gVHJhY2tzIGFscmVhZHkgdmlzaXRlZCB0eXBlcyB0byBtYWludGFpbiBPKE4pIGFuZCB0byBlbnN1cmUgdGhhdCBjeWNsZXNcbiAgLy8gYXJlIG5vdCByZWR1bmRhbnRseSByZXBvcnRlZC5cbiAgY29uc3QgdmlzaXRlZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gQXJyYXkgb2YgdHlwZXMgbm9kZXMgdXNlZCB0byBwcm9kdWNlIG1lYW5pbmdmdWwgZXJyb3JzXG5cbiAgY29uc3QgZmllbGRQYXRoID0gW107IC8vIFBvc2l0aW9uIGluIHRoZSB0eXBlIHBhdGhcblxuICBjb25zdCBmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZGV0ZWN0Q3ljbGVSZWN1cnNpdmU7IC8vIFRoaXMgZG9lcyBhIHN0cmFpZ2h0LWZvcndhcmQgREZTIHRvIGZpbmQgY3ljbGVzLlxuICAvLyBJdCBkb2VzIG5vdCB0ZXJtaW5hdGUgd2hlbiBhIGN5Y2xlIHdhcyBmb3VuZCBidXQgY29udGludWVzIHRvIGV4cGxvcmVcbiAgLy8gdGhlIGdyYXBoIHRvIGZpbmQgYWxsIHBvc3NpYmxlIGN5Y2xlcy5cblxuICBmdW5jdGlvbiBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShpbnB1dE9iaikge1xuICAgIGlmICh2aXNpdGVkVHlwZXNbaW5wdXRPYmoubmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2aXNpdGVkVHlwZXNbaW5wdXRPYmoubmFtZV0gPSB0cnVlO1xuICAgIGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZVtpbnB1dE9iai5uYW1lXSA9IGZpZWxkUGF0aC5sZW5ndGg7XG4gICAgY29uc3QgZmllbGRzID0gT2JqZWN0LnZhbHVlcyhpbnB1dE9iai5nZXRGaWVsZHMoKSk7XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgICAgaWYgKFxuICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkoZmllbGQudHlwZSkgJiZcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKShmaWVsZC50eXBlLm9mVHlwZSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBmaWVsZFR5cGUgPSBmaWVsZC50eXBlLm9mVHlwZTtcbiAgICAgICAgY29uc3QgY3ljbGVJbmRleCA9IGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZVtmaWVsZFR5cGUubmFtZV07XG4gICAgICAgIGZpZWxkUGF0aC5wdXNoKGZpZWxkKTtcblxuICAgICAgICBpZiAoY3ljbGVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoZmllbGRUeXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBjeWNsZVBhdGggPSBmaWVsZFBhdGguc2xpY2UoY3ljbGVJbmRleCk7XG4gICAgICAgICAgY29uc3QgcGF0aFN0ciA9IGN5Y2xlUGF0aC5tYXAoKGZpZWxkT2JqKSA9PiBmaWVsZE9iai5uYW1lKS5qb2luKCcuJyk7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIGBDYW5ub3QgcmVmZXJlbmNlIElucHV0IE9iamVjdCBcIiR7ZmllbGRUeXBlLm5hbWV9XCIgd2l0aGluIGl0c2VsZiB0aHJvdWdoIGEgc2VyaWVzIG9mIG5vbi1udWxsIGZpZWxkczogXCIke3BhdGhTdHJ9XCIuYCxcbiAgICAgICAgICAgIGN5Y2xlUGF0aC5tYXAoKGZpZWxkT2JqKSA9PiBmaWVsZE9iai5hc3ROb2RlKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRQYXRoLnBvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZVtpbnB1dE9iai5uYW1lXSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpIHtcbiAgY29uc3QgeyBhc3ROb2RlLCBleHRlbnNpb25BU1ROb2RlcyB9ID0gdHlwZTtcbiAgY29uc3Qgbm9kZXMgPVxuICAgIGFzdE5vZGUgIT0gbnVsbCA/IFthc3ROb2RlLCAuLi5leHRlbnNpb25BU1ROb2Rlc10gOiBleHRlbnNpb25BU1ROb2RlczsgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICByZXR1cm4gbm9kZXNcbiAgICAuZmxhdE1hcCgodHlwZU5vZGUpID0+IHtcbiAgICAgIHZhciBfdHlwZU5vZGUkaW50ZXJmYWNlcztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgKF90eXBlTm9kZSRpbnRlcmZhY2VzID0gdHlwZU5vZGUuaW50ZXJmYWNlcykgIT09IG51bGwgJiZcbiAgICAgICAgICBfdHlwZU5vZGUkaW50ZXJmYWNlcyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfdHlwZU5vZGUkaW50ZXJmYWNlc1xuICAgICAgICAgIDogW11cbiAgICAgICk7XG4gICAgfSlcbiAgICAuZmlsdGVyKChpZmFjZU5vZGUpID0+IGlmYWNlTm9kZS5uYW1lLnZhbHVlID09PSBpZmFjZS5uYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIHR5cGVOYW1lKSB7XG4gIGNvbnN0IHsgYXN0Tm9kZSwgZXh0ZW5zaW9uQVNUTm9kZXMgfSA9IHVuaW9uO1xuICBjb25zdCBub2RlcyA9XG4gICAgYXN0Tm9kZSAhPSBudWxsID8gW2FzdE5vZGUsIC4uLmV4dGVuc2lvbkFTVE5vZGVzXSA6IGV4dGVuc2lvbkFTVE5vZGVzOyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gIHJldHVybiBub2Rlc1xuICAgIC5mbGF0TWFwKCh1bmlvbk5vZGUpID0+IHtcbiAgICAgIHZhciBfdW5pb25Ob2RlJHR5cGVzO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAoX3VuaW9uTm9kZSR0eXBlcyA9IHVuaW9uTm9kZS50eXBlcykgIT09IG51bGwgJiZcbiAgICAgICAgICBfdW5pb25Ob2RlJHR5cGVzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF91bmlvbk5vZGUkdHlwZXNcbiAgICAgICAgICA6IFtdXG4gICAgICApO1xuICAgIH0pXG4gICAgLmZpbHRlcigodHlwZU5vZGUpID0+IHR5cGVOb2RlLm5hbWUudmFsdWUgPT09IHR5cGVOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoZGVmaW5pdGlvbk5vZGUpIHtcbiAgdmFyIF9kZWZpbml0aW9uTm9kZSRkaXJlYztcblxuICByZXR1cm4gZGVmaW5pdGlvbk5vZGUgPT09IG51bGwgfHwgZGVmaW5pdGlvbk5vZGUgPT09IHZvaWQgMFxuICAgID8gdm9pZCAwXG4gICAgOiAoX2RlZmluaXRpb25Ob2RlJGRpcmVjID0gZGVmaW5pdGlvbk5vZGUuZGlyZWN0aXZlcykgPT09IG51bGwgfHxcbiAgICAgIF9kZWZpbml0aW9uTm9kZSRkaXJlYyA9PT0gdm9pZCAwXG4gICAgPyB2b2lkIDBcbiAgICA6IF9kZWZpbml0aW9uTm9kZSRkaXJlYy5maW5kKFxuICAgICAgICAobm9kZSkgPT5cbiAgICAgICAgICBub2RlLm5hbWUudmFsdWUgPT09IF9kaXJlY3RpdmVzLkdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLm5hbWUsXG4gICAgICApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlR5cGVJbmZvID0gdm9pZCAwO1xuZXhwb3J0cy52aXNpdFdpdGhUeXBlSW5mbyA9IHZpc2l0V2l0aFR5cGVJbmZvO1xuXG52YXIgX2FzdCA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2FzdC5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF92aXNpdG9yID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvdmlzaXRvci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxudmFyIF9pbnRyb3NwZWN0aW9uID0gcmVxdWlyZSgnLi4vdHlwZS9pbnRyb3NwZWN0aW9uLmpzJyk7XG5cbnZhciBfdHlwZUZyb21BU1QgPSByZXF1aXJlKCcuL3R5cGVGcm9tQVNULmpzJyk7XG5cbi8qKlxuICogVHlwZUluZm8gaXMgYSB1dGlsaXR5IGNsYXNzIHdoaWNoLCBnaXZlbiBhIEdyYXBoUUwgc2NoZW1hLCBjYW4ga2VlcCB0cmFja1xuICogb2YgdGhlIGN1cnJlbnQgZmllbGQgYW5kIHR5cGUgZGVmaW5pdGlvbnMgYXQgYW55IHBvaW50IGluIGEgR3JhcGhRTCBkb2N1bWVudFxuICogQVNUIGR1cmluZyBhIHJlY3Vyc2l2ZSBkZXNjZW50IGJ5IGNhbGxpbmcgYGVudGVyKG5vZGUpYCBhbmQgYGxlYXZlKG5vZGUpYC5cbiAqL1xuY2xhc3MgVHlwZUluZm8ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY2hlbWEsXG4gICAgLyoqXG4gICAgICogSW5pdGlhbCB0eXBlIG1heSBiZSBwcm92aWRlZCBpbiByYXJlIGNhc2VzIHRvIGZhY2lsaXRhdGUgdHJhdmVyc2Fsc1xuICAgICAqICBiZWdpbm5pbmcgc29tZXdoZXJlIG90aGVyIHRoYW4gZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGluaXRpYWxUeXBlLFxuICAgIC8qKiBAZGVwcmVjYXRlZCB3aWxsIGJlIHJlbW92ZWQgaW4gMTcuMC4wICovXG4gICAgZ2V0RmllbGREZWZGbixcbiAgKSB7XG4gICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICAgIHRoaXMuX3R5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrID0gW107XG4gICAgdGhpcy5fZmllbGREZWZTdGFjayA9IFtdO1xuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrID0gW107XG4gICAgdGhpcy5fZGlyZWN0aXZlID0gbnVsbDtcbiAgICB0aGlzLl9hcmd1bWVudCA9IG51bGw7XG4gICAgdGhpcy5fZW51bVZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl9nZXRGaWVsZERlZiA9XG4gICAgICBnZXRGaWVsZERlZkZuICE9PSBudWxsICYmIGdldEZpZWxkRGVmRm4gIT09IHZvaWQgMFxuICAgICAgICA/IGdldEZpZWxkRGVmRm5cbiAgICAgICAgOiBnZXRGaWVsZERlZjtcblxuICAgIGlmIChpbml0aWFsVHlwZSkge1xuICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkoaW5pdGlhbFR5cGUpKSB7XG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goaW5pdGlhbFR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQ29tcG9zaXRlVHlwZSkoaW5pdGlhbFR5cGUpKSB7XG4gICAgICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjay5wdXNoKGluaXRpYWxUeXBlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc091dHB1dFR5cGUpKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpbml0aWFsVHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnVHlwZUluZm8nO1xuICB9XG5cbiAgZ2V0VHlwZSgpIHtcbiAgICBpZiAodGhpcy5fdHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl90eXBlU3RhY2tbdGhpcy5fdHlwZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldFBhcmVudFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyZW50VHlwZVN0YWNrW3RoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cblxuICBnZXRJbnB1dFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGVTdGFja1t0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cblxuICBnZXRQYXJlbnRJbnB1dFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGVTdGFja1t0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cblxuICBnZXRGaWVsZERlZigpIHtcbiAgICBpZiAodGhpcy5fZmllbGREZWZTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmllbGREZWZTdGFja1t0aGlzLl9maWVsZERlZlN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5fZGVmYXVsdFZhbHVlU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrW3RoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldERpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aXZlO1xuICB9XG5cbiAgZ2V0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FyZ3VtZW50O1xuICB9XG5cbiAgZ2V0RW51bVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnVtVmFsdWU7XG4gIH1cblxuICBlbnRlcihub2RlKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fc2NoZW1hOyAvLyBOb3RlOiBtYW55IG9mIHRoZSB0eXBlcyBiZWxvdyBhcmUgZXhwbGljaXRseSB0eXBlZCBhcyBcInVua25vd25cIiB0byBkcm9wXG4gICAgLy8gYW55IGFzc3VtcHRpb25zIG9mIGEgdmFsaWQgc2NoZW1hIHRvIGVuc3VyZSBydW50aW1lIHR5cGVzIGFyZSBwcm9wZXJseVxuICAgIC8vIGNoZWNrZWQgYmVmb3JlIGNvbnRpbnVpbmcgc2luY2UgVHlwZUluZm8gaXMgdXNlZCBhcyBwYXJ0IG9mIHZhbGlkYXRpb25cbiAgICAvLyB3aGljaCBvY2N1cnMgYmVmb3JlIGd1YXJhbnRlZXMgb2Ygc2NoZW1hIGFuZCBkb2N1bWVudCB2YWxpZGl0eS5cblxuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlIF9raW5kcy5LaW5kLlNFTEVDVElPTl9TRVQ6IHtcbiAgICAgICAgY29uc3QgbmFtZWRUeXBlID0gKDAsIF9kZWZpbml0aW9uLmdldE5hbWVkVHlwZSkodGhpcy5nZXRUeXBlKCkpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjay5wdXNoKFxuICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0NvbXBvc2l0ZVR5cGUpKG5hbWVkVHlwZSkgPyBuYW1lZFR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuRklFTEQ6IHtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZSA9IHRoaXMuZ2V0UGFyZW50VHlwZSgpO1xuICAgICAgICBsZXQgZmllbGREZWY7XG4gICAgICAgIGxldCBmaWVsZFR5cGU7XG5cbiAgICAgICAgaWYgKHBhcmVudFR5cGUpIHtcbiAgICAgICAgICBmaWVsZERlZiA9IHRoaXMuX2dldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgbm9kZSk7XG5cbiAgICAgICAgICBpZiAoZmllbGREZWYpIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSA9IGZpZWxkRGVmLnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZmllbGREZWZTdGFjay5wdXNoKGZpZWxkRGVmKTtcblxuICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChcbiAgICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNPdXRwdXRUeXBlKShmaWVsZFR5cGUpID8gZmllbGRUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkRJUkVDVElWRTpcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlID0gc2NoZW1hLmdldERpcmVjdGl2ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBfa2luZHMuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjoge1xuICAgICAgICBjb25zdCByb290VHlwZSA9IHNjaGVtYS5nZXRSb290VHlwZShub2RlLm9wZXJhdGlvbik7XG5cbiAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goXG4gICAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkocm9vdFR5cGUpID8gcm9vdFR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgY2FzZSBfa2luZHMuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOiB7XG4gICAgICAgIGNvbnN0IHR5cGVDb25kaXRpb25BU1QgPSBub2RlLnR5cGVDb25kaXRpb247XG4gICAgICAgIGNvbnN0IG91dHB1dFR5cGUgPSB0eXBlQ29uZGl0aW9uQVNUXG4gICAgICAgICAgPyAoMCwgX3R5cGVGcm9tQVNULnR5cGVGcm9tQVNUKShzY2hlbWEsIHR5cGVDb25kaXRpb25BU1QpXG4gICAgICAgICAgOiAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKSh0aGlzLmdldFR5cGUoKSk7XG5cbiAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goXG4gICAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzT3V0cHV0VHlwZSkob3V0cHV0VHlwZSkgPyBvdXRwdXRUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLlZBUklBQkxFX0RFRklOSVRJT046IHtcbiAgICAgICAgY29uc3QgaW5wdXRUeXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoc2NoZW1hLCBub2RlLnR5cGUpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goXG4gICAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRUeXBlKShpbnB1dFR5cGUpID8gaW5wdXRUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkFSR1VNRU5UOiB7XG4gICAgICAgIHZhciBfdGhpcyRnZXREaXJlY3RpdmU7XG5cbiAgICAgICAgbGV0IGFyZ0RlZjtcbiAgICAgICAgbGV0IGFyZ1R5cGU7XG4gICAgICAgIGNvbnN0IGZpZWxkT3JEaXJlY3RpdmUgPVxuICAgICAgICAgIChfdGhpcyRnZXREaXJlY3RpdmUgPSB0aGlzLmdldERpcmVjdGl2ZSgpKSAhPT0gbnVsbCAmJlxuICAgICAgICAgIF90aGlzJGdldERpcmVjdGl2ZSAhPT0gdm9pZCAwXG4gICAgICAgICAgICA/IF90aGlzJGdldERpcmVjdGl2ZVxuICAgICAgICAgICAgOiB0aGlzLmdldEZpZWxkRGVmKCk7XG5cbiAgICAgICAgaWYgKGZpZWxkT3JEaXJlY3RpdmUpIHtcbiAgICAgICAgICBhcmdEZWYgPSBmaWVsZE9yRGlyZWN0aXZlLmFyZ3MuZmluZChcbiAgICAgICAgICAgIChhcmcpID0+IGFyZy5uYW1lID09PSBub2RlLm5hbWUudmFsdWUsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChhcmdEZWYpIHtcbiAgICAgICAgICAgIGFyZ1R5cGUgPSBhcmdEZWYudHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hcmd1bWVudCA9IGFyZ0RlZjtcblxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wdXNoKGFyZ0RlZiA/IGFyZ0RlZi5kZWZhdWx0VmFsdWUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goXG4gICAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRUeXBlKShhcmdUeXBlKSA/IGFyZ1R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuTElTVDoge1xuICAgICAgICBjb25zdCBsaXN0VHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROdWxsYWJsZVR5cGUpKHRoaXMuZ2V0SW5wdXRUeXBlKCkpO1xuICAgICAgICBjb25zdCBpdGVtVHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5pc0xpc3RUeXBlKShsaXN0VHlwZSlcbiAgICAgICAgICA/IGxpc3RUeXBlLm9mVHlwZVxuICAgICAgICAgIDogbGlzdFR5cGU7IC8vIExpc3QgcG9zaXRpb25zIG5ldmVyIGhhdmUgYSBkZWZhdWx0IHZhbHVlLlxuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnB1c2godW5kZWZpbmVkKTtcblxuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKFxuICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkoaXRlbVR5cGUpID8gaXRlbVR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuT0JKRUNUX0ZJRUxEOiB7XG4gICAgICAgIGNvbnN0IG9iamVjdFR5cGUgPSAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKSh0aGlzLmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgbGV0IGlucHV0RmllbGRUeXBlO1xuICAgICAgICBsZXQgaW5wdXRGaWVsZDtcblxuICAgICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKShvYmplY3RUeXBlKSkge1xuICAgICAgICAgIGlucHV0RmllbGQgPSBvYmplY3RUeXBlLmdldEZpZWxkcygpW25vZGUubmFtZS52YWx1ZV07XG5cbiAgICAgICAgICBpZiAoaW5wdXRGaWVsZCkge1xuICAgICAgICAgICAgaW5wdXRGaWVsZFR5cGUgPSBpbnB1dEZpZWxkLnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucHVzaChcbiAgICAgICAgICBpbnB1dEZpZWxkID8gaW5wdXRGaWVsZC5kZWZhdWx0VmFsdWUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChcbiAgICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNJbnB1dFR5cGUpKGlucHV0RmllbGRUeXBlKVxuICAgICAgICAgICAgPyBpbnB1dEZpZWxkVHlwZVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTToge1xuICAgICAgICBjb25zdCBlbnVtVHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKHRoaXMuZ2V0SW5wdXRUeXBlKCkpO1xuICAgICAgICBsZXQgZW51bVZhbHVlO1xuXG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNFbnVtVHlwZSkoZW51bVR5cGUpKSB7XG4gICAgICAgICAgZW51bVZhbHVlID0gZW51bVR5cGUuZ2V0VmFsdWUobm9kZS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbnVtVmFsdWUgPSBlbnVtVmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiAvLyBJZ25vcmUgb3RoZXIgbm9kZXNcbiAgICB9XG4gIH1cblxuICBsZWF2ZShub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuU0VMRUNUSU9OX1NFVDpcbiAgICAgICAgdGhpcy5fcGFyZW50VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkZJRUxEOlxuICAgICAgICB0aGlzLl9maWVsZERlZlN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBfa2luZHMuS2luZC5ESVJFQ1RJVkU6XG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZSA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OOlxuICAgICAgY2FzZSBfa2luZHMuS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBfa2luZHMuS2luZC5WQVJJQUJMRV9ERUZJTklUSU9OOlxuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBfa2luZHMuS2luZC5BUkdVTUVOVDpcbiAgICAgICAgdGhpcy5fYXJndW1lbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkxJU1Q6XG4gICAgICBjYXNlIF9raW5kcy5LaW5kLk9CSkVDVF9GSUVMRDpcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTTpcbiAgICAgICAgdGhpcy5fZW51bVZhbHVlID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6IC8vIElnbm9yZSBvdGhlciBub2Rlc1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLlR5cGVJbmZvID0gVHlwZUluZm87XG5cbi8qKlxuICogTm90IGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhlIGV4ZWN1dG9yJ3MgZGVmaW5pdGlvbiBvZiBnZXRGaWVsZERlZiwgaW4gdGhpc1xuICogc3RhdGljYWxseSBldmFsdWF0ZWQgZW52aXJvbm1lbnQgd2UgZG8gbm90IGFsd2F5cyBoYXZlIGFuIE9iamVjdCB0eXBlLFxuICogYW5kIG5lZWQgdG8gaGFuZGxlIEludGVyZmFjZSBhbmQgVW5pb24gdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgZmllbGROb2RlKSB7XG4gIGNvbnN0IG5hbWUgPSBmaWVsZE5vZGUubmFtZS52YWx1ZTtcblxuICBpZiAoXG4gICAgbmFtZSA9PT0gX2ludHJvc3BlY3Rpb24uU2NoZW1hTWV0YUZpZWxkRGVmLm5hbWUgJiZcbiAgICBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkgPT09IHBhcmVudFR5cGVcbiAgKSB7XG4gICAgcmV0dXJuIF9pbnRyb3NwZWN0aW9uLlNjaGVtYU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIGlmIChcbiAgICBuYW1lID09PSBfaW50cm9zcGVjdGlvbi5UeXBlTWV0YUZpZWxkRGVmLm5hbWUgJiZcbiAgICBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkgPT09IHBhcmVudFR5cGVcbiAgKSB7XG4gICAgcmV0dXJuIF9pbnRyb3NwZWN0aW9uLlR5cGVNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAoXG4gICAgbmFtZSA9PT0gX2ludHJvc3BlY3Rpb24uVHlwZU5hbWVNZXRhRmllbGREZWYubmFtZSAmJlxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0NvbXBvc2l0ZVR5cGUpKHBhcmVudFR5cGUpXG4gICkge1xuICAgIHJldHVybiBfaW50cm9zcGVjdGlvbi5UeXBlTmFtZU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIGlmIChcbiAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShwYXJlbnRUeXBlKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHBhcmVudFR5cGUpXG4gICkge1xuICAgIHJldHVybiBwYXJlbnRUeXBlLmdldEZpZWxkcygpW25hbWVdO1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBtYWludGFpbnMgYSBwcm92aWRlZCBUeXBlSW5mbyBpbnN0YW5jZVxuICogYWxvbmcgd2l0aCB2aXNpdGluZyB2aXNpdG9yLlxuICovXG5cbmZ1bmN0aW9uIHZpc2l0V2l0aFR5cGVJbmZvKHR5cGVJbmZvLCB2aXNpdG9yKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXIoLi4uYXJncykge1xuICAgICAgY29uc3Qgbm9kZSA9IGFyZ3NbMF07XG4gICAgICB0eXBlSW5mby5lbnRlcihub2RlKTtcbiAgICAgIGNvbnN0IGZuID0gKDAsIF92aXNpdG9yLmdldEVudGVyTGVhdmVGb3JLaW5kKSh2aXNpdG9yLCBub2RlLmtpbmQpLmVudGVyO1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvciwgYXJncyk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHlwZUluZm8ubGVhdmUobm9kZSk7XG5cbiAgICAgICAgICBpZiAoKDAsIF9hc3QuaXNOb2RlKShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0eXBlSW5mby5lbnRlcihyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGxlYXZlKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuICAgICAgY29uc3QgZm4gPSAoMCwgX3Zpc2l0b3IuZ2V0RW50ZXJMZWF2ZUZvcktpbmQpKHZpc2l0b3IsIG5vZGUua2luZCkubGVhdmU7XG4gICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvciwgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHR5cGVJbmZvLmxlYXZlKG5vZGUpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmFzdEZyb21WYWx1ZSA9IGFzdEZyb21WYWx1ZTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9pc0l0ZXJhYmxlT2JqZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pc0l0ZXJhYmxlT2JqZWN0LmpzJyk7XG5cbnZhciBfaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi4vanN1dGlscy9pc09iamVjdExpa2UuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX3NjYWxhcnMgPSByZXF1aXJlKCcuLi90eXBlL3NjYWxhcnMuanMnKTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIEdyYXBoUUwgVmFsdWUgQVNUIGdpdmVuIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBGdW5jdGlvbiB3aWxsIG1hdGNoIEphdmFTY3JpcHQvSlNPTiB2YWx1ZXMgdG8gR3JhcGhRTCBBU1Qgc2NoZW1hIGZvcm1hdFxuICogYnkgdXNpbmcgc3VnZ2VzdGVkIEdyYXBoUUxJbnB1dFR5cGUuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBhc3RGcm9tVmFsdWUoXCJ2YWx1ZVwiLCBHcmFwaFFMU3RyaW5nKVxuICpcbiAqIEEgR3JhcGhRTCB0eXBlIG11c3QgYmUgcHJvdmlkZWQsIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBpbnRlcnByZXQgZGlmZmVyZW50XG4gKiBKYXZhU2NyaXB0IHZhbHVlcy5cbiAqXG4gKiB8IEpTT04gVmFsdWUgICAgfCBHcmFwaFFMIFZhbHVlICAgICAgICB8XG4gKiB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IE9iamVjdCAgICAgICAgfCBJbnB1dCBPYmplY3QgICAgICAgICB8XG4gKiB8IEFycmF5ICAgICAgICAgfCBMaXN0ICAgICAgICAgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgfCBCb29sZWFuICAgICAgICAgICAgICB8XG4gKiB8IFN0cmluZyAgICAgICAgfCBTdHJpbmcgLyBFbnVtIFZhbHVlICB8XG4gKiB8IE51bWJlciAgICAgICAgfCBJbnQgLyBGbG9hdCAgICAgICAgICB8XG4gKiB8IFVua25vd24gICAgICAgfCBFbnVtIFZhbHVlICAgICAgICAgICB8XG4gKiB8IG51bGwgICAgICAgICAgfCBOdWxsVmFsdWUgICAgICAgICAgICB8XG4gKlxuICovXG5mdW5jdGlvbiBhc3RGcm9tVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgIGNvbnN0IGFzdFZhbHVlID0gYXN0RnJvbVZhbHVlKHZhbHVlLCB0eXBlLm9mVHlwZSk7XG5cbiAgICBpZiAoXG4gICAgICAoYXN0VmFsdWUgPT09IG51bGwgfHwgYXN0VmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFzdFZhbHVlLmtpbmQpID09PVxuICAgICAgX2tpbmRzLktpbmQuTlVMTFxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzdFZhbHVlO1xuICB9IC8vIG9ubHkgZXhwbGljaXQgbnVsbCwgbm90IHVuZGVmaW5lZCwgTmFOXG5cbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk5VTEwsXG4gICAgfTtcbiAgfSAvLyB1bmRlZmluZWRcblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIENvbnZlcnQgSmF2YVNjcmlwdCBhcnJheSB0byBHcmFwaFFMIGxpc3QuIElmIHRoZSBHcmFwaFFMVHlwZSBpcyBhIGxpc3QsIGJ1dFxuICAvLyB0aGUgdmFsdWUgaXMgbm90IGFuIGFycmF5LCBjb252ZXJ0IHRoZSB2YWx1ZSB1c2luZyB0aGUgbGlzdCdzIGl0ZW0gdHlwZS5cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHR5cGUpKSB7XG4gICAgY29uc3QgaXRlbVR5cGUgPSB0eXBlLm9mVHlwZTtcblxuICAgIGlmICgoMCwgX2lzSXRlcmFibGVPYmplY3QuaXNJdGVyYWJsZU9iamVjdCkodmFsdWUpKSB7XG4gICAgICBjb25zdCB2YWx1ZXNOb2RlcyA9IFtdO1xuXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgaXRlbU5vZGUgPSBhc3RGcm9tVmFsdWUoaXRlbSwgaXRlbVR5cGUpO1xuXG4gICAgICAgIGlmIChpdGVtTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFsdWVzTm9kZXMucHVzaChpdGVtTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogX2tpbmRzLktpbmQuTElTVCxcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXNOb2RlcyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzdEZyb21WYWx1ZSh2YWx1ZSwgaXRlbVR5cGUpO1xuICB9IC8vIFBvcHVsYXRlIHRoZSBmaWVsZHMgb2YgdGhlIGlucHV0IG9iamVjdCBieSBjcmVhdGluZyBBU1RzIGZyb20gZWFjaCB2YWx1ZVxuICAvLyBpbiB0aGUgSmF2YVNjcmlwdCBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBmaWVsZHMgaW4gdGhlIGlucHV0IHR5cGUuXG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkodHlwZSkpIHtcbiAgICBpZiAoISgwLCBfaXNPYmplY3RMaWtlLmlzT2JqZWN0TGlrZSkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWVsZE5vZGVzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIE9iamVjdC52YWx1ZXModHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBhc3RGcm9tVmFsdWUodmFsdWVbZmllbGQubmFtZV0sIGZpZWxkLnR5cGUpO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSkge1xuICAgICAgICBmaWVsZE5vZGVzLnB1c2goe1xuICAgICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVF9GSUVMRCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBfa2luZHMuS2luZC5OQU1FLFxuICAgICAgICAgICAgdmFsdWU6IGZpZWxkLm5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogZmllbGRWYWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVCxcbiAgICAgIGZpZWxkczogZmllbGROb2RlcyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0xlYWZUeXBlKSh0eXBlKSkge1xuICAgIC8vIFNpbmNlIHZhbHVlIGlzIGFuIGludGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUsIGl0IG11c3QgYmUgc2VyaWFsaXplZFxuICAgIC8vIHRvIGFuIGV4dGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUgYmVmb3JlIGNvbnZlcnRpbmcgaW50byBhbiBBU1QuXG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHR5cGUuc2VyaWFsaXplKHZhbHVlKTtcblxuICAgIGlmIChzZXJpYWxpemVkID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gT3RoZXJzIHNlcmlhbGl6ZSBiYXNlZCBvbiB0aGVpciBjb3JyZXNwb25kaW5nIEphdmFTY3JpcHQgc2NhbGFyIHR5cGVzLlxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkJPT0xFQU4sXG4gICAgICAgIHZhbHVlOiBzZXJpYWxpemVkLFxuICAgICAgfTtcbiAgICB9IC8vIEphdmFTY3JpcHQgbnVtYmVycyBjYW4gYmUgSW50IG9yIEZsb2F0IHZhbHVlcy5cblxuICAgIGlmICh0eXBlb2Ygc2VyaWFsaXplZCA9PT0gJ251bWJlcicgJiYgTnVtYmVyLmlzRmluaXRlKHNlcmlhbGl6ZWQpKSB7XG4gICAgICBjb25zdCBzdHJpbmdOdW0gPSBTdHJpbmcoc2VyaWFsaXplZCk7XG4gICAgICByZXR1cm4gaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHN0cmluZ051bSlcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBraW5kOiBfa2luZHMuS2luZC5JTlQsXG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nTnVtLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBraW5kOiBfa2luZHMuS2luZC5GTE9BVCxcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdOdW0sXG4gICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlcmlhbGl6ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBFbnVtIHR5cGVzIHVzZSBFbnVtIGxpdGVyYWxzLlxuICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0VudW1UeXBlKSh0eXBlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkVOVU0sXG4gICAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWQsXG4gICAgICAgIH07XG4gICAgICB9IC8vIElEIHR5cGVzIGNhbiB1c2UgSW50IGxpdGVyYWxzLlxuXG4gICAgICBpZiAodHlwZSA9PT0gX3NjYWxhcnMuR3JhcGhRTElEICYmIGludGVnZXJTdHJpbmdSZWdFeHAudGVzdChzZXJpYWxpemVkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOVCxcbiAgICAgICAgICB2YWx1ZTogc2VyaWFsaXplZCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogX2tpbmRzLktpbmQuU1RSSU5HLFxuICAgICAgICB2YWx1ZTogc2VyaWFsaXplZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBDYW5ub3QgY29udmVydCB2YWx1ZSB0byBBU1Q6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKHNlcmlhbGl6ZWQpfS5gLFxuICAgICk7XG4gIH1cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgZmFsc2UgfHxcbiAgICAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKFxuICAgICAgZmFsc2UsXG4gICAgICAnVW5leHBlY3RlZCBpbnB1dCB0eXBlOiAnICsgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKHR5cGUpLFxuICAgICk7XG59XG4vKipcbiAqIEludFZhbHVlOlxuICogICAtIE5lZ2F0aXZlU2lnbj8gMFxuICogICAtIE5lZ2F0aXZlU2lnbj8gTm9uWmVyb0RpZ2l0ICggRGlnaXQrICk/XG4gKi9cblxuY29uc3QgaW50ZWdlclN0cmluZ1JlZ0V4cCA9IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmNvZXJjZUlucHV0VmFsdWUgPSBjb2VyY2VJbnB1dFZhbHVlO1xuXG52YXIgX2RpZFlvdU1lYW4gPSByZXF1aXJlKCcuLi9qc3V0aWxzL2RpZFlvdU1lYW4uanMnKTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9pc0l0ZXJhYmxlT2JqZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pc0l0ZXJhYmxlT2JqZWN0LmpzJyk7XG5cbnZhciBfaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi4vanN1dGlscy9pc09iamVjdExpa2UuanMnKTtcblxudmFyIF9QYXRoID0gcmVxdWlyZSgnLi4vanN1dGlscy9QYXRoLmpzJyk7XG5cbnZhciBfcHJpbnRQYXRoQXJyYXkgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3ByaW50UGF0aEFycmF5LmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIENvZXJjZXMgYSBKYXZhU2NyaXB0IHZhbHVlIGdpdmVuIGEgR3JhcGhRTCBJbnB1dCBUeXBlLlxuICovXG5mdW5jdGlvbiBjb2VyY2VJbnB1dFZhbHVlKGlucHV0VmFsdWUsIHR5cGUsIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcikge1xuICByZXR1cm4gY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgdHlwZSwgb25FcnJvciwgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IocGF0aCwgaW52YWxpZFZhbHVlLCBlcnJvcikge1xuICBsZXQgZXJyb3JQcmVmaXggPSAnSW52YWxpZCB2YWx1ZSAnICsgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGludmFsaWRWYWx1ZSk7XG5cbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGVycm9yUHJlZml4ICs9IGAgYXQgXCJ2YWx1ZSR7KDAsIF9wcmludFBhdGhBcnJheS5wcmludFBhdGhBcnJheSkocGF0aCl9XCJgO1xuICB9XG5cbiAgZXJyb3IubWVzc2FnZSA9IGVycm9yUHJlZml4ICsgJzogJyArIGVycm9yLm1lc3NhZ2U7XG4gIHRocm93IGVycm9yO1xufVxuXG5mdW5jdGlvbiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCB0eXBlLCBvbkVycm9yLCBwYXRoKSB7XG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodHlwZSkpIHtcbiAgICBpZiAoaW5wdXRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgdHlwZS5vZlR5cGUsIG9uRXJyb3IsIHBhdGgpO1xuICAgIH1cblxuICAgIG9uRXJyb3IoXG4gICAgICAoMCwgX1BhdGgucGF0aFRvQXJyYXkpKHBhdGgpLFxuICAgICAgaW5wdXRWYWx1ZSxcbiAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIG5vbi1udWxsYWJsZSB0eXBlIFwiJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgKX1cIiBub3QgdG8gYmUgbnVsbC5gLFxuICAgICAgKSxcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbnB1dFZhbHVlID09IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdGx5IHJldHVybiB0aGUgdmFsdWUgbnVsbC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNMaXN0VHlwZSkodHlwZSkpIHtcbiAgICBjb25zdCBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuXG4gICAgaWYgKCgwLCBfaXNJdGVyYWJsZU9iamVjdC5pc0l0ZXJhYmxlT2JqZWN0KShpbnB1dFZhbHVlKSkge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oaW5wdXRWYWx1ZSwgKGl0ZW1WYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbVBhdGggPSAoMCwgX1BhdGguYWRkUGF0aCkocGF0aCwgaW5kZXgsIHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpdGVtVmFsdWUsIGl0ZW1UeXBlLCBvbkVycm9yLCBpdGVtUGF0aCk7XG4gICAgICB9KTtcbiAgICB9IC8vIExpc3RzIGFjY2VwdCBhIG5vbi1saXN0IHZhbHVlIGFzIGEgbGlzdCBvZiBvbmUuXG5cbiAgICByZXR1cm4gW2NvZXJjZUlucHV0VmFsdWVJbXBsKGlucHV0VmFsdWUsIGl0ZW1UeXBlLCBvbkVycm9yLCBwYXRoKV07XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgIGlmICghKDAsIF9pc09iamVjdExpa2UuaXNPYmplY3RMaWtlKShpbnB1dFZhbHVlKSkge1xuICAgICAgb25FcnJvcihcbiAgICAgICAgKDAsIF9QYXRoLnBhdGhUb0FycmF5KShwYXRoKSxcbiAgICAgICAgaW5wdXRWYWx1ZSxcbiAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBFeHBlY3RlZCB0eXBlIFwiJHt0eXBlLm5hbWV9XCIgdG8gYmUgYW4gb2JqZWN0LmAsXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHt9O1xuICAgIGNvbnN0IGZpZWxkRGVmcyA9IHR5cGUuZ2V0RmllbGRzKCk7XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIE9iamVjdC52YWx1ZXMoZmllbGREZWZzKSkge1xuICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGlucHV0VmFsdWVbZmllbGQubmFtZV07XG5cbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZFZhbHVlW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShmaWVsZC50eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkoZmllbGQudHlwZSk7XG4gICAgICAgICAgb25FcnJvcihcbiAgICAgICAgICAgICgwLCBfUGF0aC5wYXRoVG9BcnJheSkocGF0aCksXG4gICAgICAgICAgICBpbnB1dFZhbHVlLFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkLm5hbWV9XCIgb2YgcmVxdWlyZWQgdHlwZSBcIiR7dHlwZVN0cn1cIiB3YXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29lcmNlZFZhbHVlW2ZpZWxkLm5hbWVdID0gY29lcmNlSW5wdXRWYWx1ZUltcGwoXG4gICAgICAgIGZpZWxkVmFsdWUsXG4gICAgICAgIGZpZWxkLnR5cGUsXG4gICAgICAgIG9uRXJyb3IsXG4gICAgICAgICgwLCBfUGF0aC5hZGRQYXRoKShwYXRoLCBmaWVsZC5uYW1lLCB0eXBlLm5hbWUpLFxuICAgICAgKTtcbiAgICB9IC8vIEVuc3VyZSBldmVyeSBwcm92aWRlZCBmaWVsZCBpcyBkZWZpbmVkLlxuXG4gICAgZm9yIChjb25zdCBmaWVsZE5hbWUgb2YgT2JqZWN0LmtleXMoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIGlmICghZmllbGREZWZzW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgT2JqZWN0LmtleXModHlwZS5nZXRGaWVsZHMoKSksXG4gICAgICAgICk7XG4gICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgKDAsIF9QYXRoLnBhdGhUb0FycmF5KShwYXRoKSxcbiAgICAgICAgICBpbnB1dFZhbHVlLFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGaWVsZCBcIiR7ZmllbGROYW1lfVwiIGlzIG5vdCBkZWZpbmVkIGJ5IHR5cGUgXCIke3R5cGUubmFtZX1cIi5gICtcbiAgICAgICAgICAgICAgKDAsIF9kaWRZb3VNZWFuLmRpZFlvdU1lYW4pKHN1Z2dlc3Rpb25zKSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGVhZlR5cGUpKHR5cGUpKSB7XG4gICAgbGV0IHBhcnNlUmVzdWx0OyAvLyBTY2FsYXJzIGFuZCBFbnVtcyBkZXRlcm1pbmUgaWYgYSBpbnB1dCB2YWx1ZSBpcyB2YWxpZCB2aWEgcGFyc2VWYWx1ZSgpLFxuICAgIC8vIHdoaWNoIGNhbiB0aHJvdyB0byBpbmRpY2F0ZSBmYWlsdXJlLiBJZiBpdCB0aHJvd3MsIG1haW50YWluIGEgcmVmZXJlbmNlXG4gICAgLy8gdG8gdGhlIG9yaWdpbmFsIGVycm9yLlxuXG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlUmVzdWx0ID0gdHlwZS5wYXJzZVZhbHVlKGlucHV0VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcikge1xuICAgICAgICBvbkVycm9yKCgwLCBfUGF0aC5wYXRoVG9BcnJheSkocGF0aCksIGlucHV0VmFsdWUsIGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgKDAsIF9QYXRoLnBhdGhUb0FycmF5KShwYXRoKSxcbiAgICAgICAgICBpbnB1dFZhbHVlLFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBFeHBlY3RlZCB0eXBlIFwiJHt0eXBlLm5hbWV9XCIuIGAgKyBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJzZVJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvbkVycm9yKFxuICAgICAgICAoMCwgX1BhdGgucGF0aFRvQXJyYXkpKHBhdGgpLFxuICAgICAgICBpbnB1dFZhbHVlLFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoYEV4cGVjdGVkIHR5cGUgXCIke3R5cGUubmFtZX1cIi5gKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlUmVzdWx0O1xuICB9XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkLlxuXG4gIGZhbHNlIHx8XG4gICAgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShcbiAgICAgIGZhbHNlLFxuICAgICAgJ1VuZXhwZWN0ZWQgaW5wdXQgdHlwZTogJyArICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKSxcbiAgICApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnNvcnRWYWx1ZU5vZGUgPSBzb3J0VmFsdWVOb2RlO1xuXG52YXIgX25hdHVyYWxDb21wYXJlID0gcmVxdWlyZSgnLi4vanN1dGlscy9uYXR1cmFsQ29tcGFyZS5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxuLyoqXG4gKiBTb3J0IFZhbHVlTm9kZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBzb3J0ZWQgY29weSBvZiB0aGUgZ2l2ZW4gVmFsdWVOb2RlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBzb3J0VmFsdWVOb2RlKHZhbHVlTm9kZSkge1xuICBzd2l0Y2ggKHZhbHVlTm9kZS5raW5kKSB7XG4gICAgY2FzZSBfa2luZHMuS2luZC5PQkpFQ1Q6XG4gICAgICByZXR1cm4geyAuLi52YWx1ZU5vZGUsIGZpZWxkczogc29ydEZpZWxkcyh2YWx1ZU5vZGUuZmllbGRzKSB9O1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5MSVNUOlxuICAgICAgcmV0dXJuIHsgLi4udmFsdWVOb2RlLCB2YWx1ZXM6IHZhbHVlTm9kZS52YWx1ZXMubWFwKHNvcnRWYWx1ZU5vZGUpIH07XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLklOVDpcbiAgICBjYXNlIF9raW5kcy5LaW5kLkZMT0FUOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuU1RSSU5HOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuQk9PTEVBTjpcbiAgICBjYXNlIF9raW5kcy5LaW5kLk5VTEw6XG4gICAgY2FzZSBfa2luZHMuS2luZC5FTlVNOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuVkFSSUFCTEU6XG4gICAgICByZXR1cm4gdmFsdWVOb2RlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNvcnRGaWVsZHMoZmllbGRzKSB7XG4gIHJldHVybiBmaWVsZHNcbiAgICAubWFwKChmaWVsZE5vZGUpID0+ICh7XG4gICAgICAuLi5maWVsZE5vZGUsXG4gICAgICB2YWx1ZTogc29ydFZhbHVlTm9kZShmaWVsZE5vZGUudmFsdWUpLFxuICAgIH0pKVxuICAgIC5zb3J0KChmaWVsZEEsIGZpZWxkQikgPT5cbiAgICAgICgwLCBfbmF0dXJhbENvbXBhcmUubmF0dXJhbENvbXBhcmUpKGZpZWxkQS5uYW1lLnZhbHVlLCBmaWVsZEIubmFtZS52YWx1ZSksXG4gICAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5kb1R5cGVzT3ZlcmxhcCA9IGRvVHlwZXNPdmVybGFwO1xuZXhwb3J0cy5pc0VxdWFsVHlwZSA9IGlzRXF1YWxUeXBlO1xuZXhwb3J0cy5pc1R5cGVTdWJUeXBlT2YgPSBpc1R5cGVTdWJUeXBlT2Y7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIFByb3ZpZGVkIHR3byB0eXBlcywgcmV0dXJuIHRydWUgaWYgdGhlIHR5cGVzIGFyZSBlcXVhbCAoaW52YXJpYW50KS5cbiAqL1xuZnVuY3Rpb24gaXNFcXVhbFR5cGUodHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgYXJlIGVxdWFsLlxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgbm9uLW51bGwsIHRoZSBvdGhlciBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cbiAgaWYgKFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh0eXBlQSkgJiZcbiAgICAoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodHlwZUIpXG4gICkge1xuICAgIHJldHVybiBpc0VxdWFsVHlwZSh0eXBlQS5vZlR5cGUsIHR5cGVCLm9mVHlwZSk7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgYSBsaXN0LCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoXG4gICAgKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHR5cGVBKSAmJlxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0xpc3RUeXBlKSh0eXBlQilcbiAgKSB7XG4gICAgcmV0dXJuIGlzRXF1YWxUeXBlKHR5cGVBLm9mVHlwZSwgdHlwZUIub2ZUeXBlKTtcbiAgfSAvLyBPdGhlcndpc2UgdGhlIHR5cGVzIGFyZSBub3QgZXF1YWwuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBQcm92aWRlZCBhIHR5cGUgYW5kIGEgc3VwZXIgdHlwZSwgcmV0dXJuIHRydWUgaWYgdGhlIGZpcnN0IHR5cGUgaXMgZWl0aGVyXG4gKiBlcXVhbCBvciBhIHN1YnNldCBvZiB0aGUgc2Vjb25kIHN1cGVyIHR5cGUgKGNvdmFyaWFudCkuXG4gKi9cblxuZnVuY3Rpb24gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLCBzdXBlclR5cGUpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlIGlzIGEgdmFsaWQgc3VidHlwZVxuICBpZiAobWF5YmVTdWJUeXBlID09PSBzdXBlclR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgaXMgbm9uLW51bGwsIG1heWJlU3ViVHlwZSBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShzdXBlclR5cGUpKSB7XG4gICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShtYXliZVN1YlR5cGUpKSB7XG4gICAgICByZXR1cm4gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgc3VwZXJUeXBlLm9mVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShtYXliZVN1YlR5cGUpKSB7XG4gICAgLy8gSWYgc3VwZXJUeXBlIGlzIG51bGxhYmxlLCBtYXliZVN1YlR5cGUgbWF5IGJlIG5vbi1udWxsIG9yIG51bGxhYmxlLlxuICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUpO1xuICB9IC8vIElmIHN1cGVyVHlwZSB0eXBlIGlzIGEgbGlzdCwgbWF5YmVTdWJUeXBlIHR5cGUgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHN1cGVyVHlwZSkpIHtcbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKG1heWJlU3ViVHlwZSkpIHtcbiAgICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUub2ZUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKG1heWJlU3ViVHlwZSkpIHtcbiAgICAvLyBJZiBzdXBlclR5cGUgaXMgbm90IGEgbGlzdCwgbWF5YmVTdWJUeXBlIG11c3QgYWxzbyBiZSBub3QgYSBsaXN0LlxuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgdHlwZSBpcyBhbiBhYnN0cmFjdCB0eXBlLCBjaGVjayBpZiBpdCBpcyBzdXBlciB0eXBlIG9mIG1heWJlU3ViVHlwZS5cbiAgLy8gT3RoZXJ3aXNlLCB0aGUgY2hpbGQgdHlwZSBpcyBub3QgYSB2YWxpZCBzdWJ0eXBlIG9mIHRoZSBwYXJlbnQgdHlwZS5cblxuICByZXR1cm4gKFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0Fic3RyYWN0VHlwZSkoc3VwZXJUeXBlKSAmJlxuICAgICgoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKShtYXliZVN1YlR5cGUpIHx8XG4gICAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShtYXliZVN1YlR5cGUpKSAmJlxuICAgIHNjaGVtYS5pc1N1YlR5cGUoc3VwZXJUeXBlLCBtYXliZVN1YlR5cGUpXG4gICk7XG59XG4vKipcbiAqIFByb3ZpZGVkIHR3byBjb21wb3NpdGUgdHlwZXMsIGRldGVybWluZSBpZiB0aGV5IFwib3ZlcmxhcFwiLiBUd28gY29tcG9zaXRlXG4gKiB0eXBlcyBvdmVybGFwIHdoZW4gdGhlIFNldHMgb2YgcG9zc2libGUgY29uY3JldGUgdHlwZXMgZm9yIGVhY2ggaW50ZXJzZWN0LlxuICpcbiAqIFRoaXMgaXMgb2Z0ZW4gdXNlZCB0byBkZXRlcm1pbmUgaWYgYSBmcmFnbWVudCBvZiBhIGdpdmVuIHR5cGUgY291bGQgcG9zc2libHlcbiAqIGJlIHZpc2l0ZWQgaW4gYSBjb250ZXh0IG9mIGFub3RoZXIgdHlwZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGNvbW11dGF0aXZlLlxuICovXG5cbmZ1bmN0aW9uIGRvVHlwZXNPdmVybGFwKHNjaGVtYSwgdHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgb3ZlcmxhcFxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQSkpIHtcbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQikpIHtcbiAgICAgIC8vIElmIGJvdGggdHlwZXMgYXJlIGFic3RyYWN0LCB0aGVuIGRldGVybWluZSBpZiB0aGVyZSBpcyBhbnkgaW50ZXJzZWN0aW9uXG4gICAgICAvLyBiZXR3ZWVuIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGVzIG9mIGVhY2guXG4gICAgICByZXR1cm4gc2NoZW1hXG4gICAgICAgIC5nZXRQb3NzaWJsZVR5cGVzKHR5cGVBKVxuICAgICAgICAuc29tZSgodHlwZSkgPT4gc2NoZW1hLmlzU3ViVHlwZSh0eXBlQiwgdHlwZSkpO1xuICAgIH0gLy8gRGV0ZXJtaW5lIGlmIHRoZSBsYXR0ZXIgdHlwZSBpcyBhIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIGZvcm1lci5cblxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQik7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQikpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGZvcm1lciB0eXBlIGlzIGEgcG9zc2libGUgY29uY3JldGUgdHlwZSBvZiB0aGUgbGF0dGVyLlxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlQSk7XG4gIH0gLy8gT3RoZXJ3aXNlIHRoZSB0eXBlcyBkbyBub3Qgb3ZlcmxhcC5cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMudHlwZUZyb21BU1QgPSB0eXBlRnJvbUFTVDtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG5mdW5jdGlvbiB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVOb2RlKSB7XG4gIHN3aXRjaCAodHlwZU5vZGUua2luZCkge1xuICAgIGNhc2UgX2tpbmRzLktpbmQuTElTVF9UWVBFOiB7XG4gICAgICBjb25zdCBpbm5lclR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVOb2RlLnR5cGUpO1xuICAgICAgcmV0dXJuIGlubmVyVHlwZSAmJiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTExpc3QoaW5uZXJUeXBlKTtcbiAgICB9XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLk5PTl9OVUxMX1RZUEU6IHtcbiAgICAgIGNvbnN0IGlubmVyVHlwZSA9IHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZU5vZGUudHlwZSk7XG4gICAgICByZXR1cm4gaW5uZXJUeXBlICYmIG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChpbm5lclR5cGUpO1xuICAgIH1cblxuICAgIGNhc2UgX2tpbmRzLktpbmQuTkFNRURfVFlQRTpcbiAgICAgIHJldHVybiBzY2hlbWEuZ2V0VHlwZSh0eXBlTm9kZS5uYW1lLnZhbHVlKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnZhbHVlRnJvbUFTVCA9IHZhbHVlRnJvbUFTVDtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9rZXlNYXAgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2tleU1hcC5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbi8qKlxuICogUHJvZHVjZXMgYSBKYXZhU2NyaXB0IHZhbHVlIGdpdmVuIGEgR3JhcGhRTCBWYWx1ZSBBU1QuXG4gKlxuICogQSBHcmFwaFFMIHR5cGUgbXVzdCBiZSBwcm92aWRlZCwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGludGVycHJldCBkaWZmZXJlbnRcbiAqIEdyYXBoUUwgVmFsdWUgbGl0ZXJhbHMuXG4gKlxuICogUmV0dXJucyBgdW5kZWZpbmVkYCB3aGVuIHRoZSB2YWx1ZSBjb3VsZCBub3QgYmUgdmFsaWRseSBjb2VyY2VkIGFjY29yZGluZyB0b1xuICogdGhlIHByb3ZpZGVkIHR5cGUuXG4gKlxuICogfCBHcmFwaFFMIFZhbHVlICAgICAgICB8IEpTT04gVmFsdWUgICAgfFxuICogfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfFxuICogfCBJbnB1dCBPYmplY3QgICAgICAgICB8IE9iamVjdCAgICAgICAgfFxuICogfCBMaXN0ICAgICAgICAgICAgICAgICB8IEFycmF5ICAgICAgICAgfFxuICogfCBCb29sZWFuICAgICAgICAgICAgICB8IEJvb2xlYW4gICAgICAgfFxuICogfCBTdHJpbmcgICAgICAgICAgICAgICB8IFN0cmluZyAgICAgICAgfFxuICogfCBJbnQgLyBGbG9hdCAgICAgICAgICB8IE51bWJlciAgICAgICAgfFxuICogfCBFbnVtIFZhbHVlICAgICAgICAgICB8IFVua25vd24gICAgICAgfFxuICogfCBOdWxsVmFsdWUgICAgICAgICAgICB8IG51bGwgICAgICAgICAgfFxuICpcbiAqL1xuZnVuY3Rpb24gdmFsdWVGcm9tQVNUKHZhbHVlTm9kZSwgdHlwZSwgdmFyaWFibGVzKSB7XG4gIGlmICghdmFsdWVOb2RlKSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBub2RlLCB0aGVuIHRoZXJlIGlzIGFsc28gbm8gdmFsdWUuXG4gICAgLy8gSW1wb3J0YW50bHksIHRoaXMgaXMgZGlmZmVyZW50IGZyb20gcmV0dXJuaW5nIHRoZSB2YWx1ZSBudWxsLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuVkFSSUFCTEUpIHtcbiAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSB2YWx1ZU5vZGUubmFtZS52YWx1ZTtcblxuICAgIGlmICh2YXJpYWJsZXMgPT0gbnVsbCB8fCB2YXJpYWJsZXNbdmFyaWFibGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBObyB2YWxpZCByZXR1cm4gdmFsdWUuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmFyaWFibGVWYWx1ZSA9IHZhcmlhYmxlc1t2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhcmlhYmxlVmFsdWUgPT09IG51bGwgJiYgKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKHR5cGUpKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH0gLy8gTm90ZTogVGhpcyBkb2VzIG5vIGZ1cnRoZXIgY2hlY2tpbmcgdGhhdCB0aGlzIHZhcmlhYmxlIGlzIGNvcnJlY3QuXG4gICAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgdGhpcyBxdWVyeSBoYXMgYmVlbiB2YWxpZGF0ZWQgYW5kIHRoZSB2YXJpYWJsZVxuICAgIC8vIHVzYWdlIGhlcmUgaXMgb2YgdGhlIGNvcnJlY3QgdHlwZS5cblxuICAgIHJldHVybiB2YXJpYWJsZVZhbHVlO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuTlVMTCkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVGcm9tQVNUKHZhbHVlTm9kZSwgdHlwZS5vZlR5cGUsIHZhcmlhYmxlcyk7XG4gIH1cblxuICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLk5VTEwpIHtcbiAgICAvLyBUaGlzIGlzIGV4cGxpY2l0bHkgcmV0dXJuaW5nIHRoZSB2YWx1ZSBudWxsLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0xpc3RUeXBlKSh0eXBlKSkge1xuICAgIGNvbnN0IGl0ZW1UeXBlID0gdHlwZS5vZlR5cGU7XG5cbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkxJU1QpIHtcbiAgICAgIGNvbnN0IGNvZXJjZWRWYWx1ZXMgPSBbXTtcblxuICAgICAgZm9yIChjb25zdCBpdGVtTm9kZSBvZiB2YWx1ZU5vZGUudmFsdWVzKSB7XG4gICAgICAgIGlmIChpc01pc3NpbmdWYXJpYWJsZShpdGVtTm9kZSwgdmFyaWFibGVzKSkge1xuICAgICAgICAgIC8vIElmIGFuIGFycmF5IGNvbnRhaW5zIGEgbWlzc2luZyB2YXJpYWJsZSwgaXQgaXMgZWl0aGVyIGNvZXJjZWQgdG9cbiAgICAgICAgICAvLyBudWxsIG9yIGlmIHRoZSBpdGVtIHR5cGUgaXMgbm9uLW51bGwsIGl0IGNvbnNpZGVyZWQgaW52YWxpZC5cbiAgICAgICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKGl0ZW1UeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2VyY2VkVmFsdWVzLnB1c2gobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaXRlbVZhbHVlID0gdmFsdWVGcm9tQVNUKGl0ZW1Ob2RlLCBpdGVtVHlwZSwgdmFyaWFibGVzKTtcblxuICAgICAgICAgIGlmIChpdGVtVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2VyY2VkVmFsdWVzLnB1c2goaXRlbVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlcztcbiAgICB9XG5cbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCBpdGVtVHlwZSwgdmFyaWFibGVzKTtcblxuICAgIGlmIChjb2VyY2VkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICByZXR1cm4gW2NvZXJjZWRWYWx1ZV07XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gX2tpbmRzLktpbmQuT0JKRUNUKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIGNvbnN0IGNvZXJjZWRPYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGZpZWxkTm9kZXMgPSAoMCwgX2tleU1hcC5rZXlNYXApKFxuICAgICAgdmFsdWVOb2RlLmZpZWxkcyxcbiAgICAgIChmaWVsZCkgPT4gZmllbGQubmFtZS52YWx1ZSxcbiAgICApO1xuXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3QudmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpKSB7XG4gICAgICBjb25zdCBmaWVsZE5vZGUgPSBmaWVsZE5vZGVzW2ZpZWxkLm5hbWVdO1xuXG4gICAgICBpZiAoIWZpZWxkTm9kZSB8fCBpc01pc3NpbmdWYXJpYWJsZShmaWVsZE5vZGUudmFsdWUsIHZhcmlhYmxlcykpIHtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZE9ialtmaWVsZC5uYW1lXSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICgoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkoZmllbGQudHlwZSkpIHtcbiAgICAgICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSB2YWx1ZUZyb21BU1QoZmllbGROb2RlLnZhbHVlLCBmaWVsZC50eXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgICB9XG5cbiAgICAgIGNvZXJjZWRPYmpbZmllbGQubmFtZV0gPSBmaWVsZFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBjb2VyY2VkT2JqO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0xlYWZUeXBlKSh0eXBlKSkge1xuICAgIC8vIFNjYWxhcnMgYW5kIEVudW1zIGZ1bGZpbGwgcGFyc2luZyBhIGxpdGVyYWwgdmFsdWUgdmlhIHBhcnNlTGl0ZXJhbCgpLlxuICAgIC8vIEludmFsaWQgdmFsdWVzIHJlcHJlc2VudCBhIGZhaWx1cmUgdG8gcGFyc2UgY29ycmVjdGx5LCBpbiB3aGljaCBjYXNlXG4gICAgLy8gbm8gdmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgbGV0IHJlc3VsdDtcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSB0eXBlLnBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUsIHZhcmlhYmxlcyk7XG4gICAgfSBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIGlucHV0IHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkLlxuXG4gIGZhbHNlIHx8XG4gICAgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShcbiAgICAgIGZhbHNlLFxuICAgICAgJ1VuZXhwZWN0ZWQgaW5wdXQgdHlwZTogJyArICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKSxcbiAgICApO1xufSAvLyBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIHZhbHVlTm9kZSBpcyBhIHZhcmlhYmxlIHdoaWNoIGlzIG5vdCBkZWZpbmVkXG4vLyBpbiB0aGUgc2V0IG9mIHZhcmlhYmxlcy5cblxuZnVuY3Rpb24gaXNNaXNzaW5nVmFyaWFibGUodmFsdWVOb2RlLCB2YXJpYWJsZXMpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZU5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuVkFSSUFCTEUgJiZcbiAgICAodmFyaWFibGVzID09IG51bGwgfHwgdmFyaWFibGVzW3ZhbHVlTm9kZS5uYW1lLnZhbHVlXSA9PT0gdW5kZWZpbmVkKVxuICApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnZhbHVlRnJvbUFTVFVudHlwZWQgPSB2YWx1ZUZyb21BU1RVbnR5cGVkO1xuXG52YXIgX2tleVZhbE1hcCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMva2V5VmFsTWFwLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG4vKipcbiAqIFByb2R1Y2VzIGEgSmF2YVNjcmlwdCB2YWx1ZSBnaXZlbiBhIEdyYXBoUUwgVmFsdWUgQVNULlxuICpcbiAqIFVubGlrZSBgdmFsdWVGcm9tQVNUKClgLCBubyB0eXBlIGlzIHByb3ZpZGVkLiBUaGUgcmVzdWx0aW5nIEphdmFTY3JpcHQgdmFsdWVcbiAqIHdpbGwgcmVmbGVjdCB0aGUgcHJvdmlkZWQgR3JhcGhRTCB2YWx1ZSBBU1QuXG4gKlxuICogfCBHcmFwaFFMIFZhbHVlICAgICAgICB8IEphdmFTY3JpcHQgVmFsdWUgfFxuICogfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0gfFxuICogfCBJbnB1dCBPYmplY3QgICAgICAgICB8IE9iamVjdCAgICAgICAgICAgfFxuICogfCBMaXN0ICAgICAgICAgICAgICAgICB8IEFycmF5ICAgICAgICAgICAgfFxuICogfCBCb29sZWFuICAgICAgICAgICAgICB8IEJvb2xlYW4gICAgICAgICAgfFxuICogfCBTdHJpbmcgLyBFbnVtICAgICAgICB8IFN0cmluZyAgICAgICAgICAgfFxuICogfCBJbnQgLyBGbG9hdCAgICAgICAgICB8IE51bWJlciAgICAgICAgICAgfFxuICogfCBOdWxsICAgICAgICAgICAgICAgICB8IG51bGwgICAgICAgICAgICAgfFxuICpcbiAqL1xuZnVuY3Rpb24gdmFsdWVGcm9tQVNUVW50eXBlZCh2YWx1ZU5vZGUsIHZhcmlhYmxlcykge1xuICBzd2l0Y2ggKHZhbHVlTm9kZS5raW5kKSB7XG4gICAgY2FzZSBfa2luZHMuS2luZC5OVUxMOlxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLklOVDpcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZU5vZGUudmFsdWUsIDEwKTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuRkxPQVQ6XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZU5vZGUudmFsdWUpO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5TVFJJTkc6XG4gICAgY2FzZSBfa2luZHMuS2luZC5FTlVNOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuQk9PTEVBTjpcbiAgICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWU7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLkxJU1Q6XG4gICAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlcy5tYXAoKG5vZGUpID0+XG4gICAgICAgIHZhbHVlRnJvbUFTVFVudHlwZWQobm9kZSwgdmFyaWFibGVzKSxcbiAgICAgICk7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLk9CSkVDVDpcbiAgICAgIHJldHVybiAoMCwgX2tleVZhbE1hcC5rZXlWYWxNYXApKFxuICAgICAgICB2YWx1ZU5vZGUuZmllbGRzLFxuICAgICAgICAoZmllbGQpID0+IGZpZWxkLm5hbWUudmFsdWUsXG4gICAgICAgIChmaWVsZCkgPT4gdmFsdWVGcm9tQVNUVW50eXBlZChmaWVsZC52YWx1ZSwgdmFyaWFibGVzKSxcbiAgICAgICk7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLlZBUklBQkxFOlxuICAgICAgcmV0dXJuIHZhcmlhYmxlcyA9PT0gbnVsbCB8fCB2YXJpYWJsZXMgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IHZhcmlhYmxlc1t2YWx1ZU5vZGUubmFtZS52YWx1ZV07XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5WYWxpZGF0aW9uQ29udGV4dCA9XG4gIGV4cG9ydHMuU0RMVmFsaWRhdGlvbkNvbnRleHQgPVxuICBleHBvcnRzLkFTVFZhbGlkYXRpb25Db250ZXh0ID1cbiAgICB2b2lkIDA7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3Zpc2l0b3IgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS92aXNpdG9yLmpzJyk7XG5cbnZhciBfVHlwZUluZm8gPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvVHlwZUluZm8uanMnKTtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIHBhc3NlZCBhcyB0aGUgXCJ0aGlzXCIgY29udGV4dCB0byBhbGwgdmFsaWRhdG9ycyxcbiAqIGFsbG93aW5nIGFjY2VzcyB0byBjb21tb25seSB1c2VmdWwgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBmcm9tIHdpdGhpbiBhXG4gKiB2YWxpZGF0aW9uIHJ1bGUuXG4gKi9cbmNsYXNzIEFTVFZhbGlkYXRpb25Db250ZXh0IHtcbiAgY29uc3RydWN0b3IoYXN0LCBvbkVycm9yKSB7XG4gICAgdGhpcy5fYXN0ID0gYXN0O1xuICAgIHRoaXMuX2ZyYWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mcmFnbWVudFNwcmVhZHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX29uRXJyb3IgPSBvbkVycm9yO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQVNUVmFsaWRhdGlvbkNvbnRleHQnO1xuICB9XG5cbiAgcmVwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgfVxuXG4gIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9hc3Q7XG4gIH1cblxuICBnZXRGcmFnbWVudChuYW1lKSB7XG4gICAgbGV0IGZyYWdtZW50cztcblxuICAgIGlmICh0aGlzLl9mcmFnbWVudHMpIHtcbiAgICAgIGZyYWdtZW50cyA9IHRoaXMuX2ZyYWdtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgZm9yIChjb25zdCBkZWZOb2RlIG9mIHRoaXMuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucykge1xuICAgICAgICBpZiAoZGVmTm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OKSB7XG4gICAgICAgICAgZnJhZ21lbnRzW2RlZk5vZGUubmFtZS52YWx1ZV0gPSBkZWZOb2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ZyYWdtZW50cyA9IGZyYWdtZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhZ21lbnRzW25hbWVdO1xuICB9XG5cbiAgZ2V0RnJhZ21lbnRTcHJlYWRzKG5vZGUpIHtcbiAgICBsZXQgc3ByZWFkcyA9IHRoaXMuX2ZyYWdtZW50U3ByZWFkcy5nZXQobm9kZSk7XG5cbiAgICBpZiAoIXNwcmVhZHMpIHtcbiAgICAgIHNwcmVhZHMgPSBbXTtcbiAgICAgIGNvbnN0IHNldHNUb1Zpc2l0ID0gW25vZGVdO1xuICAgICAgbGV0IHNldDtcblxuICAgICAgd2hpbGUgKChzZXQgPSBzZXRzVG9WaXNpdC5wb3AoKSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBzZWxlY3Rpb24gb2Ygc2V0LnNlbGVjdGlvbnMpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09IF9raW5kcy5LaW5kLkZSQUdNRU5UX1NQUkVBRCkge1xuICAgICAgICAgICAgc3ByZWFkcy5wdXNoKHNlbGVjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBzZXRzVG9WaXNpdC5wdXNoKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mcmFnbWVudFNwcmVhZHMuc2V0KG5vZGUsIHNwcmVhZHMpO1xuICAgIH1cblxuICAgIHJldHVybiBzcHJlYWRzO1xuICB9XG5cbiAgZ2V0UmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzKG9wZXJhdGlvbikge1xuICAgIGxldCBmcmFnbWVudHMgPSB0aGlzLl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMuZ2V0KG9wZXJhdGlvbik7XG5cbiAgICBpZiAoIWZyYWdtZW50cykge1xuICAgICAgZnJhZ21lbnRzID0gW107XG4gICAgICBjb25zdCBjb2xsZWN0ZWROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb25zdCBub2Rlc1RvVmlzaXQgPSBbb3BlcmF0aW9uLnNlbGVjdGlvblNldF07XG4gICAgICBsZXQgbm9kZTtcblxuICAgICAgd2hpbGUgKChub2RlID0gbm9kZXNUb1Zpc2l0LnBvcCgpKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNwcmVhZCBvZiB0aGlzLmdldEZyYWdtZW50U3ByZWFkcyhub2RlKSkge1xuICAgICAgICAgIGNvbnN0IGZyYWdOYW1lID0gc3ByZWFkLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoY29sbGVjdGVkTmFtZXNbZnJhZ05hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb2xsZWN0ZWROYW1lc1tmcmFnTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgbm9kZXNUb1Zpc2l0LnB1c2goZnJhZ21lbnQuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzLnNldChvcGVyYXRpb24sIGZyYWdtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50cztcbiAgfVxufVxuXG5leHBvcnRzLkFTVFZhbGlkYXRpb25Db250ZXh0ID0gQVNUVmFsaWRhdGlvbkNvbnRleHQ7XG5cbmNsYXNzIFNETFZhbGlkYXRpb25Db250ZXh0IGV4dGVuZHMgQVNUVmFsaWRhdGlvbkNvbnRleHQge1xuICBjb25zdHJ1Y3Rvcihhc3QsIHNjaGVtYSwgb25FcnJvcikge1xuICAgIHN1cGVyKGFzdCwgb25FcnJvcik7XG4gICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnU0RMVmFsaWRhdGlvbkNvbnRleHQnO1xuICB9XG5cbiAgZ2V0U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9zY2hlbWE7XG4gIH1cbn1cblxuZXhwb3J0cy5TRExWYWxpZGF0aW9uQ29udGV4dCA9IFNETFZhbGlkYXRpb25Db250ZXh0O1xuXG5jbGFzcyBWYWxpZGF0aW9uQ29udGV4dCBleHRlbmRzIEFTVFZhbGlkYXRpb25Db250ZXh0IHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hLCBhc3QsIHR5cGVJbmZvLCBvbkVycm9yKSB7XG4gICAgc3VwZXIoYXN0LCBvbkVycm9yKTtcbiAgICB0aGlzLl9zY2hlbWEgPSBzY2hlbWE7XG4gICAgdGhpcy5fdHlwZUluZm8gPSB0eXBlSW5mbztcbiAgICB0aGlzLl92YXJpYWJsZVVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1ZhbGlkYXRpb25Db250ZXh0JztcbiAgfVxuXG4gIGdldFNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NoZW1hO1xuICB9XG5cbiAgZ2V0VmFyaWFibGVVc2FnZXMobm9kZSkge1xuICAgIGxldCB1c2FnZXMgPSB0aGlzLl92YXJpYWJsZVVzYWdlcy5nZXQobm9kZSk7XG5cbiAgICBpZiAoIXVzYWdlcykge1xuICAgICAgY29uc3QgbmV3VXNhZ2VzID0gW107XG4gICAgICBjb25zdCB0eXBlSW5mbyA9IG5ldyBfVHlwZUluZm8uVHlwZUluZm8odGhpcy5fc2NoZW1hKTtcbiAgICAgICgwLCBfdmlzaXRvci52aXNpdCkoXG4gICAgICAgIG5vZGUsXG4gICAgICAgICgwLCBfVHlwZUluZm8udmlzaXRXaXRoVHlwZUluZm8pKHR5cGVJbmZvLCB7XG4gICAgICAgICAgVmFyaWFibGVEZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcblxuICAgICAgICAgIFZhcmlhYmxlKHZhcmlhYmxlKSB7XG4gICAgICAgICAgICBuZXdVc2FnZXMucHVzaCh7XG4gICAgICAgICAgICAgIG5vZGU6IHZhcmlhYmxlLFxuICAgICAgICAgICAgICB0eXBlOiB0eXBlSW5mby5nZXRJbnB1dFR5cGUoKSxcbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0eXBlSW5mby5nZXREZWZhdWx0VmFsdWUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIHVzYWdlcyA9IG5ld1VzYWdlcztcblxuICAgICAgdGhpcy5fdmFyaWFibGVVc2FnZXMuc2V0KG5vZGUsIHVzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzYWdlcztcbiAgfVxuXG4gIGdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbikge1xuICAgIGxldCB1c2FnZXMgPSB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcy5nZXQob3BlcmF0aW9uKTtcblxuICAgIGlmICghdXNhZ2VzKSB7XG4gICAgICB1c2FnZXMgPSB0aGlzLmdldFZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgIGZvciAoY29uc3QgZnJhZyBvZiB0aGlzLmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhvcGVyYXRpb24pKSB7XG4gICAgICAgIHVzYWdlcyA9IHVzYWdlcy5jb25jYXQodGhpcy5nZXRWYXJpYWJsZVVzYWdlcyhmcmFnKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzLnNldChvcGVyYXRpb24sIHVzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzYWdlcztcbiAgfVxuXG4gIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFR5cGUoKTtcbiAgfVxuXG4gIGdldFBhcmVudFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudFR5cGUoKTtcbiAgfVxuXG4gIGdldElucHV0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0SW5wdXRUeXBlKCk7XG4gIH1cblxuICBnZXRQYXJlbnRJbnB1dFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudElucHV0VHlwZSgpO1xuICB9XG5cbiAgZ2V0RmllbGREZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEZpZWxkRGVmKCk7XG4gIH1cblxuICBnZXREaXJlY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldERpcmVjdGl2ZSgpO1xuICB9XG5cbiAgZ2V0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEFyZ3VtZW50KCk7XG4gIH1cblxuICBnZXRFbnVtVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEVudW1WYWx1ZSgpO1xuICB9XG59XG5cbmV4cG9ydHMuVmFsaWRhdGlvbkNvbnRleHQgPSBWYWxpZGF0aW9uQ29udGV4dDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUuRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9GaWVsZHNPbkNvcnJlY3RUeXBlUnVsZS5GaWVsZHNPbkNvcnJlY3RUeXBlUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9GcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZS5GcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdLbm93bkFyZ3VtZW50TmFtZXNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0tub3duQXJndW1lbnROYW1lc1J1bGUuS25vd25Bcmd1bWVudE5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdLbm93bkRpcmVjdGl2ZXNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0tub3duRGlyZWN0aXZlc1J1bGUuS25vd25EaXJlY3RpdmVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdLbm93bkZyYWdtZW50TmFtZXNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0tub3duRnJhZ21lbnROYW1lc1J1bGUuS25vd25GcmFnbWVudE5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdLbm93blR5cGVOYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfS25vd25UeXBlTmFtZXNSdWxlLktub3duVHlwZU5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZS5Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLkxvbmVTY2hlbWFEZWZpbml0aW9uUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb0RlcHJlY2F0ZWRDdXN0b21SdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX05vRGVwcmVjYXRlZEN1c3RvbVJ1bGUuTm9EZXByZWNhdGVkQ3VzdG9tUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb0ZyYWdtZW50Q3ljbGVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Ob0ZyYWdtZW50Q3ljbGVzUnVsZS5Ob0ZyYWdtZW50Q3ljbGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX05vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUuTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLk5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb1VudXNlZEZyYWdtZW50c1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTm9VbnVzZWRGcmFnbWVudHNSdWxlLk5vVW51c2VkRnJhZ21lbnRzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdOb1VudXNlZFZhcmlhYmxlc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTm9VbnVzZWRWYXJpYWJsZXNSdWxlLk5vVW51c2VkVmFyaWFibGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdPdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZS5PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdQb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLlBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZS5Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZS5Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTY2FsYXJMZWFmc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfU2NhbGFyTGVhZnNSdWxlLlNjYWxhckxlYWZzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1NpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUuU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlLlVuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVBcmd1bWVudE5hbWVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9VbmlxdWVBcmd1bWVudE5hbWVzUnVsZS5VbmlxdWVBcmd1bWVudE5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlLlVuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUuVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLlVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLlVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVGcmFnbWVudE5hbWVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5VbmlxdWVGcmFnbWVudE5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUuVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLlVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlLlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVUeXBlTmFtZXNSdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1VuaXF1ZVR5cGVOYW1lc1J1bGUuVW5pcXVlVHlwZU5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdVbmlxdWVWYXJpYWJsZU5hbWVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZS5VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdWYWxpZGF0aW9uQ29udGV4dCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9WYWxpZGF0aW9uQ29udGV4dC5WYWxpZGF0aW9uQ29udGV4dDtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZS5WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9WYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZS5WYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLlZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdzcGVjaWZpZWRSdWxlcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9zcGVjaWZpZWRSdWxlcy5zcGVjaWZpZWRSdWxlcztcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd2YWxpZGF0ZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF92YWxpZGF0ZS52YWxpZGF0ZTtcbiAgfSxcbn0pO1xuXG52YXIgX3ZhbGlkYXRlID0gcmVxdWlyZSgnLi92YWxpZGF0ZS5qcycpO1xuXG52YXIgX1ZhbGlkYXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi9WYWxpZGF0aW9uQ29udGV4dC5qcycpO1xuXG52YXIgX3NwZWNpZmllZFJ1bGVzID0gcmVxdWlyZSgnLi9zcGVjaWZpZWRSdWxlcy5qcycpO1xuXG52YXIgX0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUuanMnKTtcblxudmFyIF9GaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUuanMnKTtcblxudmFyIF9GcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUuanMnKTtcblxudmFyIF9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfS25vd25EaXJlY3RpdmVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvS25vd25EaXJlY3RpdmVzUnVsZS5qcycpO1xuXG52YXIgX0tub3duRnJhZ21lbnROYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0tub3duRnJhZ21lbnROYW1lc1J1bGUuanMnKTtcblxudmFyIF9Lbm93blR5cGVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0tub3duVHlwZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZS5qcycpO1xuXG52YXIgX05vRnJhZ21lbnRDeWNsZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Ob0ZyYWdtZW50Q3ljbGVzUnVsZS5qcycpO1xuXG52YXIgX05vVW5kZWZpbmVkVmFyaWFibGVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLmpzJyk7XG5cbnZhciBfTm9VbnVzZWRGcmFnbWVudHNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Ob1VudXNlZEZyYWdtZW50c1J1bGUuanMnKTtcblxudmFyIF9Ob1VudXNlZFZhcmlhYmxlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL05vVW51c2VkVmFyaWFibGVzUnVsZS5qcycpO1xuXG52YXIgX092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZS5qcycpO1xuXG52YXIgX1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLmpzJyk7XG5cbnZhciBfUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLmpzJyk7XG5cbnZhciBfU2NhbGFyTGVhZnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TY2FsYXJMZWFmc1J1bGUuanMnKTtcblxudmFyIF9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlQXJndW1lbnROYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1ZhbHVlc09mQ29ycmVjdFR5cGVSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZS5qcycpO1xuXG52YXIgX1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9WYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZS5qcycpO1xuXG52YXIgX1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLmpzJyk7XG5cbnZhciBfTG9uZVNjaGVtYURlZmluaXRpb25SdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUuanMnKTtcblxudmFyIF9VbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZVR5cGVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZVR5cGVOYW1lc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZS5qcycpO1xuXG52YXIgX05vRGVwcmVjYXRlZEN1c3RvbVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL2N1c3RvbS9Ob0RlcHJlY2F0ZWRDdXN0b21SdWxlLmpzJyk7XG5cbnZhciBfTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvY3VzdG9tL05vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUuanMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlID0gRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfcHJlZGljYXRlcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByZWRpY2F0ZXMuanMnKTtcblxuLyoqXG4gKiBFeGVjdXRhYmxlIGRlZmluaXRpb25zXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgZm9yIGV4ZWN1dGlvbiBpZiBhbGwgZGVmaW5pdGlvbnMgYXJlIGVpdGhlclxuICogb3BlcmF0aW9uIG9yIGZyYWdtZW50IGRlZmluaXRpb25zLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1FeGVjdXRhYmxlLURlZmluaXRpb25zXG4gKi9cbmZ1bmN0aW9uIEV4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIERvY3VtZW50KG5vZGUpIHtcbiAgICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBub2RlLmRlZmluaXRpb25zKSB7XG4gICAgICAgIGlmICghKDAsIF9wcmVkaWNhdGVzLmlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKShkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGNvbnN0IGRlZk5hbWUgPVxuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kID09PSBfa2luZHMuS2luZC5TQ0hFTUFfREVGSU5JVElPTiB8fFxuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kID09PSBfa2luZHMuS2luZC5TQ0hFTUFfRVhURU5TSU9OXG4gICAgICAgICAgICAgID8gJ3NjaGVtYSdcbiAgICAgICAgICAgICAgOiAnXCInICsgZGVmaW5pdGlvbi5uYW1lLnZhbHVlICsgJ1wiJztcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgVGhlICR7ZGVmTmFtZX0gZGVmaW5pdGlvbiBpcyBub3QgZXhlY3V0YWJsZS5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IGRlZmluaXRpb24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUgPSBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZTtcblxudmFyIF9kaWRZb3VNZWFuID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLmpzJyk7XG5cbnZhciBfbmF0dXJhbENvbXBhcmUgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIEZpZWxkcyBvbiBjb3JyZWN0IHR5cGVcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBkZWZpbmVkIGJ5IHRoZVxuICogcGFyZW50IHR5cGUsIG9yIGFyZSBhbiBhbGxvd2VkIG1ldGEgZmllbGQgc3VjaCBhcyBfX3R5cGVuYW1lLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GaWVsZC1TZWxlY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIEZpZWxkc09uQ29ycmVjdFR5cGVSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgIGlmICghZmllbGREZWYpIHtcbiAgICAgICAgICAvLyBUaGlzIGZpZWxkIGRvZXNuJ3QgZXhpc3QsIGxldHMgbG9vayBmb3Igc3VnZ2VzdGlvbnMuXG4gICAgICAgICAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7IC8vIEZpcnN0IGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHN1Z2dlc3RlZCB0eXBlcyB0byBjb25kaXRpb24gb24uXG5cbiAgICAgICAgICBsZXQgc3VnZ2VzdGlvbiA9ICgwLCBfZGlkWW91TWVhbi5kaWRZb3VNZWFuKShcbiAgICAgICAgICAgICd0byB1c2UgYW4gaW5saW5lIGZyYWdtZW50IG9uJyxcbiAgICAgICAgICAgIGdldFN1Z2dlc3RlZFR5cGVOYW1lcyhzY2hlbWEsIHR5cGUsIGZpZWxkTmFtZSksXG4gICAgICAgICAgKTsgLy8gSWYgdGhlcmUgYXJlIG5vIHN1Z2dlc3RlZCB0eXBlcywgdGhlbiBwZXJoYXBzIHRoaXMgd2FzIGEgdHlwbz9cblxuICAgICAgICAgIGlmIChzdWdnZXN0aW9uID09PSAnJykge1xuICAgICAgICAgICAgc3VnZ2VzdGlvbiA9ICgwLCBfZGlkWW91TWVhbi5kaWRZb3VNZWFuKShcbiAgICAgICAgICAgICAgZ2V0U3VnZ2VzdGVkRmllbGROYW1lcyh0eXBlLCBmaWVsZE5hbWUpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IC8vIFJlcG9ydCBhbiBlcnJvciwgaW5jbHVkaW5nIGhlbHBmdWwgc3VnZ2VzdGlvbnMuXG5cbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgQ2Fubm90IHF1ZXJ5IGZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgb24gdHlwZSBcIiR7dHlwZS5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4vKipcbiAqIEdvIHRocm91Z2ggYWxsIG9mIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdHlwZSwgYXMgd2VsbCBhcyB0aGUgaW50ZXJmYWNlcyB0aGF0XG4gKiB0aGV5IGltcGxlbWVudC4gSWYgYW55IG9mIHRob3NlIHR5cGVzIGluY2x1ZGUgdGhlIHByb3ZpZGVkIGZpZWxkLCBzdWdnZXN0IHRoZW0sXG4gKiBzb3J0ZWQgYnkgaG93IG9mdGVuIHRoZSB0eXBlIGlzIHJlZmVyZW5jZWQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKSB7XG4gIGlmICghKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlKSkge1xuICAgIC8vIE11c3QgYmUgYW4gT2JqZWN0IHR5cGUsIHdoaWNoIGRvZXMgbm90IGhhdmUgcG9zc2libGUgZmllbGRzLlxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHN1Z2dlc3RlZFR5cGVzID0gbmV3IFNldCgpO1xuICBjb25zdCB1c2FnZUNvdW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IHBvc3NpYmxlVHlwZSBvZiBzY2hlbWEuZ2V0UG9zc2libGVUeXBlcyh0eXBlKSkge1xuICAgIGlmICghcG9zc2libGVUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gVGhpcyBvYmplY3QgdHlwZSBkZWZpbmVzIHRoaXMgZmllbGQuXG5cbiAgICBzdWdnZXN0ZWRUeXBlcy5hZGQocG9zc2libGVUeXBlKTtcbiAgICB1c2FnZUNvdW50W3Bvc3NpYmxlVHlwZS5uYW1lXSA9IDE7XG5cbiAgICBmb3IgKGNvbnN0IHBvc3NpYmxlSW50ZXJmYWNlIG9mIHBvc3NpYmxlVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgIHZhciBfdXNhZ2VDb3VudCRwb3NzaWJsZUk7XG5cbiAgICAgIGlmICghcG9zc2libGVJbnRlcmZhY2UuZ2V0RmllbGRzKClbZmllbGROYW1lXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gVGhpcyBpbnRlcmZhY2UgdHlwZSBkZWZpbmVzIHRoaXMgZmllbGQuXG5cbiAgICAgIHN1Z2dlc3RlZFR5cGVzLmFkZChwb3NzaWJsZUludGVyZmFjZSk7XG4gICAgICB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdID1cbiAgICAgICAgKChfdXNhZ2VDb3VudCRwb3NzaWJsZUkgPSB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdKSAhPT1cbiAgICAgICAgICBudWxsICYmIF91c2FnZUNvdW50JHBvc3NpYmxlSSAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfdXNhZ2VDb3VudCRwb3NzaWJsZUlcbiAgICAgICAgICA6IDApICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gWy4uLnN1Z2dlc3RlZFR5cGVzXVxuICAgIC5zb3J0KCh0eXBlQSwgdHlwZUIpID0+IHtcbiAgICAgIC8vIFN1Z2dlc3QgYm90aCBpbnRlcmZhY2UgYW5kIG9iamVjdCB0eXBlcyBiYXNlZCBvbiBob3cgY29tbW9uIHRoZXkgYXJlLlxuICAgICAgY29uc3QgdXNhZ2VDb3VudERpZmYgPSB1c2FnZUNvdW50W3R5cGVCLm5hbWVdIC0gdXNhZ2VDb3VudFt0eXBlQS5uYW1lXTtcblxuICAgICAgaWYgKHVzYWdlQ291bnREaWZmICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB1c2FnZUNvdW50RGlmZjtcbiAgICAgIH0gLy8gU3VnZ2VzdCBzdXBlciB0eXBlcyBmaXJzdCBmb2xsb3dlZCBieSBzdWJ0eXBlc1xuXG4gICAgICBpZiAoXG4gICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGVBKSAmJlxuICAgICAgICBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQilcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW50ZXJmYWNlVHlwZSkodHlwZUIpICYmXG4gICAgICAgIHNjaGVtYS5pc1N1YlR5cGUodHlwZUIsIHR5cGVBKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF9uYXR1cmFsQ29tcGFyZS5uYXR1cmFsQ29tcGFyZSkodHlwZUEubmFtZSwgdHlwZUIubmFtZSk7XG4gICAgfSlcbiAgICAubWFwKCh4KSA9PiB4Lm5hbWUpO1xufVxuLyoqXG4gKiBGb3IgdGhlIGZpZWxkIG5hbWUgcHJvdmlkZWQsIGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHNpbWlsYXIgZmllbGQgbmFtZXNcbiAqIHRoYXQgbWF5IGJlIHRoZSByZXN1bHQgb2YgYSB0eXBvLlxuICovXG5cbmZ1bmN0aW9uIGdldFN1Z2dlc3RlZEZpZWxkTmFtZXModHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChcbiAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKSh0eXBlKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpXG4gICkge1xuICAgIGNvbnN0IHBvc3NpYmxlRmllbGROYW1lcyA9IE9iamVjdC5rZXlzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgIHJldHVybiAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShmaWVsZE5hbWUsIHBvc3NpYmxlRmllbGROYW1lcyk7XG4gIH0gLy8gT3RoZXJ3aXNlLCBtdXN0IGJlIGEgVW5pb24gdHlwZSwgd2hpY2ggZG9lcyBub3QgZGVmaW5lIGZpZWxkcy5cblxuICByZXR1cm4gW107XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUgPSBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9wcmludGVyID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxudmFyIF90eXBlRnJvbUFTVCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIEZyYWdtZW50cyBvbiBjb21wb3NpdGUgdHlwZVxuICpcbiAqIEZyYWdtZW50cyB1c2UgYSB0eXBlIGNvbmRpdGlvbiB0byBkZXRlcm1pbmUgaWYgdGhleSBhcHBseSwgc2luY2UgZnJhZ21lbnRzXG4gKiBjYW4gb25seSBiZSBzcHJlYWQgaW50byBhIGNvbXBvc2l0ZSB0eXBlIChvYmplY3QsIGludGVyZmFjZSwgb3IgdW5pb24pLCB0aGVcbiAqIHR5cGUgY29uZGl0aW9uIG11c3QgYWxzbyBiZSBhIGNvbXBvc2l0ZSB0eXBlLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GcmFnbWVudHMtT24tQ29tcG9zaXRlLVR5cGVzXG4gKi9cbmZ1bmN0aW9uIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gbm9kZS50eXBlQ29uZGl0aW9uO1xuXG4gICAgICBpZiAodHlwZUNvbmRpdGlvbikge1xuICAgICAgICBjb25zdCB0eXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgICB0eXBlQ29uZGl0aW9uLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0eXBlICYmICEoMCwgX2RlZmluaXRpb24uaXNDb21wb3NpdGVUeXBlKSh0eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKHR5cGVDb25kaXRpb24pO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBGcmFnbWVudCBjYW5ub3QgY29uZGl0aW9uIG9uIG5vbiBjb21wb3NpdGUgdHlwZSBcIiR7dHlwZVN0cn1cIi5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IHR5cGVDb25kaXRpb24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSAoMCwgX3R5cGVGcm9tQVNULnR5cGVGcm9tQVNUKShcbiAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgbm9kZS50eXBlQ29uZGl0aW9uLFxuICAgICAgKTtcblxuICAgICAgaWYgKHR5cGUgJiYgISgwLCBfZGVmaW5pdGlvbi5pc0NvbXBvc2l0ZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKG5vZGUudHlwZUNvbmRpdGlvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IFwiJHtub2RlLm5hbWUudmFsdWV9XCIgY2Fubm90IGNvbmRpdGlvbiBvbiBub24gY29tcG9zaXRlIHR5cGUgXCIke3R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUudHlwZUNvbmRpdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUgPSBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlO1xuZXhwb3J0cy5Lbm93bkFyZ3VtZW50TmFtZXNSdWxlID0gS25vd25Bcmd1bWVudE5hbWVzUnVsZTtcblxudmFyIF9kaWRZb3VNZWFuID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi8uLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlL2RpcmVjdGl2ZXMuanMnKTtcblxuLyoqXG4gKiBLbm93biBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlIGRlZmluZWQgYnlcbiAqIHRoYXQgZmllbGQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFyZ3VtZW50LU5hbWVzXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRGlyZWN0aXZlcy1BcmUtSW4tVmFsaWQtTG9jYXRpb25zXG4gKi9cbmZ1bmN0aW9uIEtub3duQXJndW1lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgLi4uS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSxcblxuICAgIEFyZ3VtZW50KGFyZ05vZGUpIHtcbiAgICAgIGNvbnN0IGFyZ0RlZiA9IGNvbnRleHQuZ2V0QXJndW1lbnQoKTtcbiAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAoIWFyZ0RlZiAmJiBmaWVsZERlZiAmJiBwYXJlbnRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG4gICAgICAgIGNvbnN0IGtub3duQXJnc05hbWVzID0gZmllbGREZWYuYXJncy5tYXAoKGFyZykgPT4gYXJnLm5hbWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9ICgwLCBfc3VnZ2VzdGlvbkxpc3Quc3VnZ2VzdGlvbkxpc3QpKFxuICAgICAgICAgIGFyZ05hbWUsXG4gICAgICAgICAga25vd25BcmdzTmFtZXMsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFVua25vd24gYXJndW1lbnQgXCIke2FyZ05hbWV9XCIgb24gZmllbGQgXCIke3BhcmVudFR5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGlvbnMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogYXJnTm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgZGlyZWN0aXZlQXJncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hXG4gICAgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpXG4gICAgOiBfZGlyZWN0aXZlcy5zcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGRlZmluZWREaXJlY3RpdmVzKSB7XG4gICAgZGlyZWN0aXZlQXJnc1tkaXJlY3RpdmUubmFtZV0gPSBkaXJlY3RpdmUuYXJncy5tYXAoKGFyZykgPT4gYXJnLm5hbWUpO1xuICB9XG5cbiAgY29uc3QgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgYXN0RGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IF9raW5kcy5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB2YXIgX2RlZiRhcmd1bWVudHM7XG5cbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBhcmdzTm9kZXMgPVxuICAgICAgICAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfZGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICBkaXJlY3RpdmVBcmdzW2RlZi5uYW1lLnZhbHVlXSA9IGFyZ3NOb2Rlcy5tYXAoKGFyZykgPT4gYXJnLm5hbWUudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBrbm93bkFyZ3MgPSBkaXJlY3RpdmVBcmdzW2RpcmVjdGl2ZU5hbWVdO1xuXG4gICAgICBpZiAoZGlyZWN0aXZlTm9kZS5hcmd1bWVudHMgJiYga25vd25BcmdzKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXJnTm9kZSBvZiBkaXJlY3RpdmVOb2RlLmFyZ3VtZW50cykge1xuICAgICAgICAgIGNvbnN0IGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoIWtub3duQXJncy5pbmNsdWRlcyhhcmdOYW1lKSkge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICAgICAgYXJnTmFtZSxcbiAgICAgICAgICAgICAga25vd25BcmdzLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5rbm93biBhcmd1bWVudCBcIiR7YXJnTmFtZX1cIiBvbiBkaXJlY3RpdmUgXCJAJHtkaXJlY3RpdmVOYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAgICAgKDAsIF9kaWRZb3VNZWFuLmRpZFlvdU1lYW4pKHN1Z2dlc3Rpb25zKSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogYXJnTm9kZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuS25vd25EaXJlY3RpdmVzUnVsZSA9IEtub3duRGlyZWN0aXZlc1J1bGU7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvaW52YXJpYW50LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfYXN0ID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvYXN0LmpzJyk7XG5cbnZhciBfZGlyZWN0aXZlTG9jYXRpb24gPSByZXF1aXJlKCcuLi8uLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9kaXJlY3RpdmVzID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kaXJlY3RpdmVzLmpzJyk7XG5cbi8qKlxuICogS25vd24gZGlyZWN0aXZlc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBgQGRpcmVjdGl2ZXNgIGFyZSBrbm93biBieSB0aGVcbiAqIHNjaGVtYSBhbmQgbGVnYWxseSBwb3NpdGlvbmVkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1EaXJlY3RpdmVzLUFyZS1EZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIEtub3duRGlyZWN0aXZlc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBsb2NhdGlvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBkZWZpbmVkRGlyZWN0aXZlcyA9IHNjaGVtYVxuICAgID8gc2NoZW1hLmdldERpcmVjdGl2ZXMoKVxuICAgIDogX2RpcmVjdGl2ZXMuc3BlY2lmaWVkRGlyZWN0aXZlcztcblxuICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBkZWZpbmVkRGlyZWN0aXZlcykge1xuICAgIGxvY2F0aW9uc01hcFtkaXJlY3RpdmUubmFtZV0gPSBkaXJlY3RpdmUubG9jYXRpb25zO1xuICB9XG5cbiAgY29uc3QgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgYXN0RGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IF9raW5kcy5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICBsb2NhdGlvbnNNYXBbZGVmLm5hbWUudmFsdWVdID0gZGVmLmxvY2F0aW9ucy5tYXAoKG5hbWUpID0+IG5hbWUudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlKG5vZGUsIF9rZXksIF9wYXJlbnQsIF9wYXRoLCBhbmNlc3RvcnMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBsb2NhdGlvbnMgPSBsb2NhdGlvbnNNYXBbbmFtZV07XG5cbiAgICAgIGlmICghbG9jYXRpb25zKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKGBVbmtub3duIGRpcmVjdGl2ZSBcIkAke25hbWV9XCIuYCwge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FuZGlkYXRlTG9jYXRpb24gPSBnZXREaXJlY3RpdmVMb2NhdGlvbkZvckFTVFBhdGgoYW5jZXN0b3JzKTtcblxuICAgICAgaWYgKGNhbmRpZGF0ZUxvY2F0aW9uICYmICFsb2NhdGlvbnMuaW5jbHVkZXMoY2FuZGlkYXRlTG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYERpcmVjdGl2ZSBcIkAke25hbWV9XCIgbWF5IG5vdCBiZSB1c2VkIG9uICR7Y2FuZGlkYXRlTG9jYXRpb259LmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUxvY2F0aW9uRm9yQVNUUGF0aChhbmNlc3RvcnMpIHtcbiAgY29uc3QgYXBwbGllZFRvID0gYW5jZXN0b3JzW2FuY2VzdG9ycy5sZW5ndGggLSAxXTtcbiAgJ2tpbmQnIGluIGFwcGxpZWRUbyB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcblxuICBzd2l0Y2ggKGFwcGxpZWRUby5raW5kKSB7XG4gICAgY2FzZSBfa2luZHMuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBnZXREaXJlY3RpdmVMb2NhdGlvbkZvck9wZXJhdGlvbihhcHBsaWVkVG8ub3BlcmF0aW9uKTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuRklFTEQ6XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRDtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgcmV0dXJuIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQ7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX0RFRklOSVRJT047XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLlZBUklBQkxFX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLlZBUklBQkxFX0RFRklOSVRJT047XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLlNDSEVNQV9ERUZJTklUSU9OOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuU0NIRU1BX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVI7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBfa2luZHMuS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLk9CSkVDVDtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuRklFTERfREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTjtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIF9raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uSU5URVJGQUNFO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBfa2luZHMuS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uVU5JT047XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRU5VTTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTV9WQUxVRV9ERUZJTklUSU9OOlxuICAgICAgcmV0dXJuIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9PQkpFQ1Q7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLklOUFVUX1ZBTFVFX0RFRklOSVRJT046IHtcbiAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aCAtIDNdO1xuICAgICAgJ2tpbmQnIGluIHBhcmVudE5vZGUgfHwgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShmYWxzZSk7XG4gICAgICByZXR1cm4gcGFyZW50Tm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OXG4gICAgICAgID8gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT05cbiAgICAgICAgOiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uQVJHVU1FTlRfREVGSU5JVElPTjtcbiAgICB9XG4gICAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkLlxuXG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgIGRlZmF1bHQ6XG4gICAgICBmYWxzZSB8fFxuICAgICAgICAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdVbmV4cGVjdGVkIGtpbmQ6ICcgKyAoMCwgX2luc3BlY3QuaW5zcGVjdCkoYXBwbGllZFRvLmtpbmQpLFxuICAgICAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUxvY2F0aW9uRm9yT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICBzd2l0Y2ggKG9wZXJhdGlvbikge1xuICAgIGNhc2UgX2FzdC5PcGVyYXRpb25UeXBlTm9kZS5RVUVSWTpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uUVVFUlk7XG5cbiAgICBjYXNlIF9hc3QuT3BlcmF0aW9uVHlwZU5vZGUuTVVUQVRJT046XG4gICAgICByZXR1cm4gX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLk1VVEFUSU9OO1xuXG4gICAgY2FzZSBfYXN0Lk9wZXJhdGlvblR5cGVOb2RlLlNVQlNDUklQVElPTjpcbiAgICAgIHJldHVybiBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uU1VCU0NSSVBUSU9OO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuS25vd25GcmFnbWVudE5hbWVzUnVsZSA9IEtub3duRnJhZ21lbnROYW1lc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogS25vd24gZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgYC4uLkZyYWdtZW50YCBmcmFnbWVudCBzcHJlYWRzIHJlZmVyXG4gKiB0byBmcmFnbWVudHMgZGVmaW5lZCBpbiB0aGUgc2FtZSBkb2N1bWVudC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtc3ByZWFkLXRhcmdldC1kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIEtub3duRnJhZ21lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIGNvbnN0IGZyYWdtZW50TmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gY29udGV4dC5nZXRGcmFnbWVudChmcmFnbWVudE5hbWUpO1xuXG4gICAgICBpZiAoIWZyYWdtZW50KSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFVua25vd24gZnJhZ21lbnQgXCIke2ZyYWdtZW50TmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZS5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuS25vd25UeXBlTmFtZXNSdWxlID0gS25vd25UeXBlTmFtZXNSdWxlO1xuXG52YXIgX2RpZFlvdU1lYW4gPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4uanMnKTtcblxudmFyIF9zdWdnZXN0aW9uTGlzdCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9wcmVkaWNhdGVzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcycpO1xuXG52YXIgX2ludHJvc3BlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2ludHJvc3BlY3Rpb24uanMnKTtcblxudmFyIF9zY2FsYXJzID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9zY2FsYXJzLmpzJyk7XG5cbi8qKlxuICogS25vd24gdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHJlZmVyZW5jZWQgdHlwZXMgKHNwZWNpZmljYWxseVxuICogdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGZyYWdtZW50IGNvbmRpdGlvbnMpIGFyZSBkZWZpbmVkIGJ5IHRoZSB0eXBlIHNjaGVtYS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtU3ByZWFkLVR5cGUtRXhpc3RlbmNlXG4gKi9cbmZ1bmN0aW9uIEtub3duVHlwZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZXNNYXAgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0VHlwZU1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZGVmaW5lZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGRlZiBvZiBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoKDAsIF9wcmVkaWNhdGVzLmlzVHlwZURlZmluaXRpb25Ob2RlKShkZWYpKSB7XG4gICAgICBkZWZpbmVkVHlwZXNbZGVmLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB0eXBlTmFtZXMgPSBbXG4gICAgLi4uT2JqZWN0LmtleXMoZXhpc3RpbmdUeXBlc01hcCksXG4gICAgLi4uT2JqZWN0LmtleXMoZGVmaW5lZFR5cGVzKSxcbiAgXTtcbiAgcmV0dXJuIHtcbiAgICBOYW1lZFR5cGUobm9kZSwgXzEsIHBhcmVudCwgXzIsIGFuY2VzdG9ycykge1xuICAgICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmICghZXhpc3RpbmdUeXBlc01hcFt0eXBlTmFtZV0gJiYgIWRlZmluZWRUeXBlc1t0eXBlTmFtZV0pIHtcbiAgICAgICAgdmFyIF9hbmNlc3RvcnMkO1xuXG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25Ob2RlID1cbiAgICAgICAgICAoX2FuY2VzdG9ycyQgPSBhbmNlc3RvcnNbMl0pICE9PSBudWxsICYmIF9hbmNlc3RvcnMkICE9PSB2b2lkIDBcbiAgICAgICAgICAgID8gX2FuY2VzdG9ycyRcbiAgICAgICAgICAgIDogcGFyZW50O1xuICAgICAgICBjb25zdCBpc1NETCA9IGRlZmluaXRpb25Ob2RlICE9IG51bGwgJiYgaXNTRExOb2RlKGRlZmluaXRpb25Ob2RlKTtcblxuICAgICAgICBpZiAoaXNTREwgJiYgc3RhbmRhcmRUeXBlTmFtZXMuaW5jbHVkZXModHlwZU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VnZ2VzdGVkVHlwZXMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICB0eXBlTmFtZSxcbiAgICAgICAgICBpc1NETCA/IHN0YW5kYXJkVHlwZU5hbWVzLmNvbmNhdCh0eXBlTmFtZXMpIDogdHlwZU5hbWVzLFxuICAgICAgICApO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBVbmtub3duIHR5cGUgXCIke3R5cGVOYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGVkVHlwZXMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG5jb25zdCBzdGFuZGFyZFR5cGVOYW1lcyA9IFtcbiAgLi4uX3NjYWxhcnMuc3BlY2lmaWVkU2NhbGFyVHlwZXMsXG4gIC4uLl9pbnRyb3NwZWN0aW9uLmludHJvc3BlY3Rpb25UeXBlcyxcbl0ubWFwKCh0eXBlKSA9PiB0eXBlLm5hbWUpO1xuXG5mdW5jdGlvbiBpc1NETE5vZGUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICAna2luZCcgaW4gdmFsdWUgJiZcbiAgICAoKDAsIF9wcmVkaWNhdGVzLmlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlKSh2YWx1ZSkgfHxcbiAgICAgICgwLCBfcHJlZGljYXRlcy5pc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKSh2YWx1ZSkpXG4gICk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUgPSBMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbi8qKlxuICogTG9uZSBhbm9ueW1vdXMgb3BlcmF0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgd2hlbiBpdCBjb250YWlucyBhbiBhbm9ueW1vdXMgb3BlcmF0aW9uXG4gKiAodGhlIHF1ZXJ5IHNob3J0LWhhbmQpIHRoYXQgaXQgY29udGFpbnMgb25seSB0aGF0IG9uZSBvcGVyYXRpb24gZGVmaW5pdGlvbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtTG9uZS1Bbm9ueW1vdXMtT3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIExvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlKGNvbnRleHQpIHtcbiAgbGV0IG9wZXJhdGlvbkNvdW50ID0gMDtcbiAgcmV0dXJuIHtcbiAgICBEb2N1bWVudChub2RlKSB7XG4gICAgICBvcGVyYXRpb25Db3VudCA9IG5vZGUuZGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgICAgICAoZGVmaW5pdGlvbikgPT4gZGVmaW5pdGlvbi5raW5kID09PSBfa2luZHMuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTixcbiAgICAgICkubGVuZ3RoO1xuICAgIH0sXG5cbiAgICBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5uYW1lICYmIG9wZXJhdGlvbkNvdW50ID4gMSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICdUaGlzIGFub255bW91cyBvcGVyYXRpb24gbXVzdCBiZSB0aGUgb25seSBkZWZpbmVkIG9wZXJhdGlvbi4nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLkxvbmVTY2hlbWFEZWZpbml0aW9uUnVsZSA9IExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBMb25lIFNjaGVtYSBkZWZpbml0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgY29udGFpbnMgb25seSBvbmUgc2NoZW1hIGRlZmluaXRpb24uXG4gKi9cbmZ1bmN0aW9uIExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX29sZFNjaGVtYSRhc3ROb2RlO1xuXG4gIGNvbnN0IG9sZFNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGFscmVhZHlEZWZpbmVkID1cbiAgICAoX3JlZiA9XG4gICAgICAoX3JlZjIgPVxuICAgICAgICAoX29sZFNjaGVtYSRhc3ROb2RlID1cbiAgICAgICAgICBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IG9sZFNjaGVtYS5hc3ROb2RlKSAhPT0gbnVsbCAmJiBfb2xkU2NoZW1hJGFzdE5vZGUgIT09IHZvaWQgMFxuICAgICAgICAgID8gX29sZFNjaGVtYSRhc3ROb2RlXG4gICAgICAgICAgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogb2xkU2NoZW1hLmdldFF1ZXJ5VHlwZSgpKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwXG4gICAgICAgID8gX3JlZjJcbiAgICAgICAgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBvbGRTY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCkpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMFxuICAgICAgPyBfcmVmXG4gICAgICA6IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogb2xkU2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgbGV0IHNjaGVtYURlZmluaXRpb25zQ291bnQgPSAwO1xuICByZXR1cm4ge1xuICAgIFNjaGVtYURlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKGFscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ0Nhbm5vdCBkZWZpbmUgYSBuZXcgc2NoZW1hIHdpdGhpbiBhIHNjaGVtYSBleHRlbnNpb24uJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjaGVtYURlZmluaXRpb25zQ291bnQgPiAwKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ011c3QgcHJvdmlkZSBvbmx5IG9uZSBzY2hlbWEgZGVmaW5pdGlvbi4nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgKytzY2hlbWFEZWZpbml0aW9uc0NvdW50O1xuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9GcmFnbWVudEN5Y2xlc1J1bGUgPSBOb0ZyYWdtZW50Q3ljbGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBObyBmcmFnbWVudCBjeWNsZXNcbiAqXG4gKiBUaGUgZ3JhcGggb2YgZnJhZ21lbnQgc3ByZWFkcyBtdXN0IG5vdCBmb3JtIGFueSBjeWNsZXMgaW5jbHVkaW5nIHNwcmVhZGluZyBpdHNlbGYuXG4gKiBPdGhlcndpc2UgYW4gb3BlcmF0aW9uIGNvdWxkIGluZmluaXRlbHkgc3ByZWFkIG9yIGluZmluaXRlbHkgZXhlY3V0ZSBvbiBjeWNsZXMgaW4gdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtc3ByZWFkcy1tdXN0LW5vdC1mb3JtLWN5Y2xlc1xuICovXG5mdW5jdGlvbiBOb0ZyYWdtZW50Q3ljbGVzUnVsZShjb250ZXh0KSB7XG4gIC8vIFRyYWNrcyBhbHJlYWR5IHZpc2l0ZWQgZnJhZ21lbnRzIHRvIG1haW50YWluIE8oTikgYW5kIHRvIGVuc3VyZSB0aGF0IGN5Y2xlc1xuICAvLyBhcmUgbm90IHJlZHVuZGFudGx5IHJlcG9ydGVkLlxuICBjb25zdCB2aXNpdGVkRnJhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBBcnJheSBvZiBBU1Qgbm9kZXMgdXNlZCB0byBwcm9kdWNlIG1lYW5pbmdmdWwgZXJyb3JzXG5cbiAgY29uc3Qgc3ByZWFkUGF0aCA9IFtdOyAvLyBQb3NpdGlvbiBpbiB0aGUgc3ByZWFkIHBhdGhcblxuICBjb25zdCBzcHJlYWRQYXRoSW5kZXhCeU5hbWUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246ICgpID0+IGZhbHNlLFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGRldGVjdEN5Y2xlUmVjdXJzaXZlKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07IC8vIFRoaXMgZG9lcyBhIHN0cmFpZ2h0LWZvcndhcmQgREZTIHRvIGZpbmQgY3ljbGVzLlxuICAvLyBJdCBkb2VzIG5vdCB0ZXJtaW5hdGUgd2hlbiBhIGN5Y2xlIHdhcyBmb3VuZCBidXQgY29udGludWVzIHRvIGV4cGxvcmVcbiAgLy8gdGhlIGdyYXBoIHRvIGZpbmQgYWxsIHBvc3NpYmxlIGN5Y2xlcy5cblxuICBmdW5jdGlvbiBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShmcmFnbWVudCkge1xuICAgIGlmICh2aXNpdGVkRnJhZ3NbZnJhZ21lbnQubmFtZS52YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudE5hbWUgPSBmcmFnbWVudC5uYW1lLnZhbHVlO1xuICAgIHZpc2l0ZWRGcmFnc1tmcmFnbWVudE5hbWVdID0gdHJ1ZTtcbiAgICBjb25zdCBzcHJlYWROb2RlcyA9IGNvbnRleHQuZ2V0RnJhZ21lbnRTcHJlYWRzKGZyYWdtZW50LnNlbGVjdGlvblNldCk7XG5cbiAgICBpZiAoc3ByZWFkTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ByZWFkUGF0aEluZGV4QnlOYW1lW2ZyYWdtZW50TmFtZV0gPSBzcHJlYWRQYXRoLmxlbmd0aDtcblxuICAgIGZvciAoY29uc3Qgc3ByZWFkTm9kZSBvZiBzcHJlYWROb2Rlcykge1xuICAgICAgY29uc3Qgc3ByZWFkTmFtZSA9IHNwcmVhZE5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGN5Y2xlSW5kZXggPSBzcHJlYWRQYXRoSW5kZXhCeU5hbWVbc3ByZWFkTmFtZV07XG4gICAgICBzcHJlYWRQYXRoLnB1c2goc3ByZWFkTm9kZSk7XG5cbiAgICAgIGlmIChjeWNsZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qgc3ByZWFkRnJhZ21lbnQgPSBjb250ZXh0LmdldEZyYWdtZW50KHNwcmVhZE5hbWUpO1xuXG4gICAgICAgIGlmIChzcHJlYWRGcmFnbWVudCkge1xuICAgICAgICAgIGRldGVjdEN5Y2xlUmVjdXJzaXZlKHNwcmVhZEZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3ljbGVQYXRoID0gc3ByZWFkUGF0aC5zbGljZShjeWNsZUluZGV4KTtcbiAgICAgICAgY29uc3QgdmlhUGF0aCA9IGN5Y2xlUGF0aFxuICAgICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgICAubWFwKChzKSA9PiAnXCInICsgcy5uYW1lLnZhbHVlICsgJ1wiJylcbiAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgQ2Fubm90IHNwcmVhZCBmcmFnbWVudCBcIiR7c3ByZWFkTmFtZX1cIiB3aXRoaW4gaXRzZWxmYCArXG4gICAgICAgICAgICAgICh2aWFQYXRoICE9PSAnJyA/IGAgdmlhICR7dmlhUGF0aH0uYCA6ICcuJyksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBjeWNsZVBhdGgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHNwcmVhZFBhdGgucG9wKCk7XG4gICAgfVxuXG4gICAgc3ByZWFkUGF0aEluZGV4QnlOYW1lW2ZyYWdtZW50TmFtZV0gPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUgPSBOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogTm8gdW5kZWZpbmVkIHZhcmlhYmxlc1xuICpcbiAqIEEgR3JhcGhRTCBvcGVyYXRpb24gaXMgb25seSB2YWxpZCBpZiBhbGwgdmFyaWFibGVzIGVuY291bnRlcmVkLCBib3RoIGRpcmVjdGx5XG4gKiBhbmQgdmlhIGZyYWdtZW50IHNwcmVhZHMsIGFyZSBkZWZpbmVkIGJ5IHRoYXQgb3BlcmF0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGUtVXNlcy1EZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIE5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZShjb250ZXh0KSB7XG4gIGxldCB2YXJpYWJsZU5hbWVEZWZpbmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICBlbnRlcigpIHtcbiAgICAgICAgdmFyaWFibGVOYW1lRGVmaW5lZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9LFxuXG4gICAgICBsZWF2ZShvcGVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgdXNhZ2VzID0gY29udGV4dC5nZXRSZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyhvcGVyYXRpb24pO1xuXG4gICAgICAgIGZvciAoY29uc3QgeyBub2RlIH0gb2YgdXNhZ2VzKSB7XG4gICAgICAgICAgY29uc3QgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmICh2YXJpYWJsZU5hbWVEZWZpbmVkW3Zhck5hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgID8gYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBpcyBub3QgZGVmaW5lZCBieSBvcGVyYXRpb24gXCIke29wZXJhdGlvbi5uYW1lLnZhbHVlfVwiLmBcbiAgICAgICAgICAgICAgICAgIDogYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBpcyBub3QgZGVmaW5lZC5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiBbbm9kZSwgb3BlcmF0aW9uXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXJpYWJsZU5hbWVEZWZpbmVkW25vZGUudmFyaWFibGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9VbnVzZWRGcmFnbWVudHNSdWxlID0gTm9VbnVzZWRGcmFnbWVudHNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIE5vIHVudXNlZCBmcmFnbWVudHNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZnJhZ21lbnQgZGVmaW5pdGlvbnMgYXJlIHNwcmVhZFxuICogd2l0aGluIG9wZXJhdGlvbnMsIG9yIHNwcmVhZCB3aXRoaW4gb3RoZXIgZnJhZ21lbnRzIHNwcmVhZCB3aXRoaW4gb3BlcmF0aW9ucy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnRzLU11c3QtQmUtVXNlZFxuICovXG5mdW5jdGlvbiBOb1VudXNlZEZyYWdtZW50c1J1bGUoY29udGV4dCkge1xuICBjb25zdCBvcGVyYXRpb25EZWZzID0gW107XG4gIGNvbnN0IGZyYWdtZW50RGVmcyA9IFtdO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgb3BlcmF0aW9uRGVmcy5wdXNoKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgZnJhZ21lbnREZWZzLnB1c2gobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIERvY3VtZW50OiB7XG4gICAgICBsZWF2ZSgpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnROYW1lVXNlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBvcGVyYXRpb24gb2Ygb3BlcmF0aW9uRGVmcykge1xuICAgICAgICAgIGZvciAoY29uc3QgZnJhZ21lbnQgb2YgY29udGV4dC5nZXRSZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMoXG4gICAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgICAgKSkge1xuICAgICAgICAgICAgZnJhZ21lbnROYW1lVXNlZFtmcmFnbWVudC5uYW1lLnZhbHVlXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBmcmFnbWVudERlZiBvZiBmcmFnbWVudERlZnMpIHtcbiAgICAgICAgICBjb25zdCBmcmFnTmFtZSA9IGZyYWdtZW50RGVmLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoZnJhZ21lbnROYW1lVXNlZFtmcmFnTmFtZV0gIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBgRnJhZ21lbnQgXCIke2ZyYWdOYW1lfVwiIGlzIG5ldmVyIHVzZWQuYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogZnJhZ21lbnREZWYsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9VbnVzZWRWYXJpYWJsZXNSdWxlID0gTm9VbnVzZWRWYXJpYWJsZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIE5vIHVudXNlZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBkZWZpbmVkIGJ5IGFuIG9wZXJhdGlvblxuICogYXJlIHVzZWQsIGVpdGhlciBkaXJlY3RseSBvciB3aXRoaW4gYSBzcHJlYWQgZnJhZ21lbnQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFsbC1WYXJpYWJsZXMtVXNlZFxuICovXG5mdW5jdGlvbiBOb1VudXNlZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICBsZXQgdmFyaWFibGVEZWZzID0gW107XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlRGVmcyA9IFtdO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yIChjb25zdCB7IG5vZGUgfSBvZiB1c2FnZXMpIHtcbiAgICAgICAgICB2YXJpYWJsZU5hbWVVc2VkW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZURlZiBvZiB2YXJpYWJsZURlZnMpIHtcbiAgICAgICAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSB2YXJpYWJsZURlZi52YXJpYWJsZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhcmlhYmxlTmFtZVVzZWRbdmFyaWFibGVOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi5uYW1lXG4gICAgICAgICAgICAgICAgICA/IGBWYXJpYWJsZSBcIiQke3ZhcmlhYmxlTmFtZX1cIiBpcyBuZXZlciB1c2VkIGluIG9wZXJhdGlvbiBcIiR7b3BlcmF0aW9uLm5hbWUudmFsdWV9XCIuYFxuICAgICAgICAgICAgICAgICAgOiBgVmFyaWFibGUgXCIkJHt2YXJpYWJsZU5hbWV9XCIgaXMgbmV2ZXIgdXNlZC5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiB2YXJpYWJsZURlZixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihkZWYpIHtcbiAgICAgIHZhcmlhYmxlRGVmcy5wdXNoKGRlZik7XG4gICAgfSxcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZSA9IE92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfcHJpbnRlciA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByaW50ZXIuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfc29ydFZhbHVlTm9kZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9zb3J0VmFsdWVOb2RlLmpzJyk7XG5cbnZhciBfdHlwZUZyb21BU1QgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QuanMnKTtcblxuZnVuY3Rpb24gcmVhc29uTWVzc2FnZShyZWFzb24pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVhc29uKSkge1xuICAgIHJldHVybiByZWFzb25cbiAgICAgIC5tYXAoXG4gICAgICAgIChbcmVzcG9uc2VOYW1lLCBzdWJSZWFzb25dKSA9PlxuICAgICAgICAgIGBzdWJmaWVsZHMgXCIke3Jlc3BvbnNlTmFtZX1cIiBjb25mbGljdCBiZWNhdXNlIGAgK1xuICAgICAgICAgIHJlYXNvbk1lc3NhZ2Uoc3ViUmVhc29uKSxcbiAgICAgIClcbiAgICAgIC5qb2luKCcgYW5kICcpO1xuICB9XG5cbiAgcmV0dXJuIHJlYXNvbjtcbn1cbi8qKlxuICogT3ZlcmxhcHBpbmcgZmllbGRzIGNhbiBiZSBtZXJnZWRcbiAqXG4gKiBBIHNlbGVjdGlvbiBzZXQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIChpbmNsdWRpbmcgc3ByZWFkaW5nIGFueVxuICogZnJhZ21lbnRzKSBlaXRoZXIgY29ycmVzcG9uZCB0byBkaXN0aW5jdCByZXNwb25zZSBuYW1lcyBvciBjYW4gYmUgbWVyZ2VkXG4gKiB3aXRob3V0IGFtYmlndWl0eS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRmllbGQtU2VsZWN0aW9uLU1lcmdpbmdcbiAqL1xuXG5mdW5jdGlvbiBPdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZShjb250ZXh0KSB7XG4gIC8vIEEgbWVtb2l6YXRpb24gZm9yIHdoZW4gdHdvIGZyYWdtZW50cyBhcmUgY29tcGFyZWQgXCJiZXR3ZWVuXCIgZWFjaCBvdGhlciBmb3JcbiAgLy8gY29uZmxpY3RzLiBUd28gZnJhZ21lbnRzIG1heSBiZSBjb21wYXJlZCBtYW55IHRpbWVzLCBzbyBtZW1vaXppbmcgdGhpcyBjYW5cbiAgLy8gZHJhbWF0aWNhbGx5IGltcHJvdmUgdGhlIHBlcmZvcm1hbmNlIG9mIHRoaXMgdmFsaWRhdG9yLlxuICBjb25zdCBjb21wYXJlZEZyYWdtZW50UGFpcnMgPSBuZXcgUGFpclNldCgpOyAvLyBBIGNhY2hlIGZvciB0aGUgXCJmaWVsZCBtYXBcIiBhbmQgbGlzdCBvZiBmcmFnbWVudCBuYW1lcyBmb3VuZCBpbiBhbnkgZ2l2ZW5cbiAgLy8gc2VsZWN0aW9uIHNldC4gU2VsZWN0aW9uIHNldHMgbWF5IGJlIGFza2VkIGZvciB0aGlzIGluZm9ybWF0aW9uIG11bHRpcGxlXG4gIC8vIHRpbWVzLCBzbyB0aGlzIGltcHJvdmVzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIHZhbGlkYXRvci5cblxuICBjb25zdCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzID0gbmV3IE1hcCgpO1xuICByZXR1cm4ge1xuICAgIFNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQpIHtcbiAgICAgIGNvbnN0IGNvbmZsaWN0cyA9IGZpbmRDb25mbGljdHNXaXRoaW5TZWxlY3Rpb25TZXQoXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgICAgY29udGV4dC5nZXRQYXJlbnRUeXBlKCksXG4gICAgICAgIHNlbGVjdGlvblNldCxcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgW1tyZXNwb25zZU5hbWUsIHJlYXNvbl0sIGZpZWxkczEsIGZpZWxkczJdIG9mIGNvbmZsaWN0cykge1xuICAgICAgICBjb25zdCByZWFzb25Nc2cgPSByZWFzb25NZXNzYWdlKHJlYXNvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZpZWxkcyBcIiR7cmVzcG9uc2VOYW1lfVwiIGNvbmZsaWN0IGJlY2F1c2UgJHtyZWFzb25Nc2d9LiBVc2UgZGlmZmVyZW50IGFsaWFzZXMgb24gdGhlIGZpZWxkcyB0byBmZXRjaCBib3RoIGlmIHRoaXMgd2FzIGludGVudGlvbmFsLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBmaWVsZHMxLmNvbmNhdChmaWVsZHMyKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIEFsZ29yaXRobTpcbiAqXG4gKiBDb25mbGljdHMgb2NjdXIgd2hlbiB0d28gZmllbGRzIGV4aXN0IGluIGEgcXVlcnkgd2hpY2ggd2lsbCBwcm9kdWNlIHRoZSBzYW1lXG4gKiByZXNwb25zZSBuYW1lLCBidXQgcmVwcmVzZW50IGRpZmZlcmluZyB2YWx1ZXMsIHRodXMgY3JlYXRpbmcgYSBjb25mbGljdC5cbiAqIFRoZSBhbGdvcml0aG0gYmVsb3cgZmluZHMgYWxsIGNvbmZsaWN0cyB2aWEgbWFraW5nIGEgc2VyaWVzIG9mIGNvbXBhcmlzb25zXG4gKiBiZXR3ZWVuIGZpZWxkcy4gSW4gb3JkZXIgdG8gY29tcGFyZSBhcyBmZXcgZmllbGRzIGFzIHBvc3NpYmxlLCB0aGlzIG1ha2VzXG4gKiBhIHNlcmllcyBvZiBjb21wYXJpc29ucyBcIndpdGhpblwiIHNldHMgb2YgZmllbGRzIGFuZCBcImJldHdlZW5cIiBzZXRzIG9mIGZpZWxkcy5cbiAqXG4gKiBHaXZlbiBhbnkgc2VsZWN0aW9uIHNldCwgYSBjb2xsZWN0aW9uIHByb2R1Y2VzIGJvdGggYSBzZXQgb2YgZmllbGRzIGJ5XG4gKiBhbHNvIGluY2x1ZGluZyBhbGwgaW5saW5lIGZyYWdtZW50cywgYXMgd2VsbCBhcyBhIGxpc3Qgb2YgZnJhZ21lbnRzXG4gKiByZWZlcmVuY2VkIGJ5IGZyYWdtZW50IHNwcmVhZHMuXG4gKlxuICogQSkgRWFjaCBzZWxlY3Rpb24gc2V0IHJlcHJlc2VudGVkIGluIHRoZSBkb2N1bWVudCBmaXJzdCBjb21wYXJlcyBcIndpdGhpblwiIGl0c1xuICogY29sbGVjdGVkIHNldCBvZiBmaWVsZHMsIGZpbmRpbmcgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIGV2ZXJ5IHBhaXIgb2ZcbiAqIG92ZXJsYXBwaW5nIGZpZWxkcy5cbiAqIE5vdGU6IFRoaXMgaXMgdGhlICpvbmx5IHRpbWUqIHRoYXQgYSB0aGUgZmllbGRzIFwid2l0aGluXCIgYSBzZXQgYXJlIGNvbXBhcmVkXG4gKiB0byBlYWNoIG90aGVyLiBBZnRlciB0aGlzIG9ubHkgZmllbGRzIFwiYmV0d2VlblwiIHNldHMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIEIpIEFsc28sIGlmIGFueSBmcmFnbWVudCBpcyByZWZlcmVuY2VkIGluIGEgc2VsZWN0aW9uIHNldCwgdGhlbiBhXG4gKiBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIG9yaWdpbmFsIHNldCBvZiBmaWVsZHMgYW5kIHRoZVxuICogcmVmZXJlbmNlZCBmcmFnbWVudC5cbiAqXG4gKiBDKSBBbHNvLCBpZiBtdWx0aXBsZSBmcmFnbWVudHMgYXJlIHJlZmVyZW5jZWQsIHRoZW4gY29tcGFyaXNvbnNcbiAqIGFyZSBtYWRlIFwiYmV0d2VlblwiIGVhY2ggcmVmZXJlbmNlZCBmcmFnbWVudC5cbiAqXG4gKiBEKSBXaGVuIGNvbXBhcmluZyBcImJldHdlZW5cIiBhIHNldCBvZiBmaWVsZHMgYW5kIGEgcmVmZXJlbmNlZCBmcmFnbWVudCwgZmlyc3RcbiAqIGEgY29tcGFyaXNvbiBpcyBtYWRlIGJldHdlZW4gZWFjaCBmaWVsZCBpbiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmRcbiAqIGVhY2ggZmllbGQgaW4gdGhlIHRoZSByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMuXG4gKlxuICogRSkgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gdGhlIHJlZmVyZW5jZWQgc2VsZWN0aW9uIHNldCxcbiAqIHRoZW4gYSBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIG9yaWdpbmFsIHNldCBvZiBmaWVsZHMgYW5kIHRoZVxuICogcmVmZXJlbmNlZCBmcmFnbWVudCAocmVjdXJzaXZlbHkgcmVmZXJyaW5nIHRvIHN0ZXAgRCkuXG4gKlxuICogRikgV2hlbiBjb21wYXJpbmcgXCJiZXR3ZWVuXCIgdHdvIGZyYWdtZW50cywgZmlyc3QgYSBjb21wYXJpc29uIGlzIG1hZGUgYmV0d2VlblxuICogZWFjaCBmaWVsZCBpbiB0aGUgZmlyc3QgcmVmZXJlbmNlZCBzZXQgb2YgZmllbGRzIGFuZCBlYWNoIGZpZWxkIGluIHRoZSB0aGVcbiAqIHNlY29uZCByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMuXG4gKlxuICogRykgQWxzbywgYW55IGZyYWdtZW50cyByZWZlcmVuY2VkIGJ5IHRoZSBmaXJzdCBtdXN0IGJlIGNvbXBhcmVkIHRvIHRoZVxuICogc2Vjb25kLCBhbmQgYW55IGZyYWdtZW50cyByZWZlcmVuY2VkIGJ5IHRoZSBzZWNvbmQgbXVzdCBiZSBjb21wYXJlZCB0byB0aGVcbiAqIGZpcnN0IChyZWN1cnNpdmVseSByZWZlcnJpbmcgdG8gc3RlcCBGKS5cbiAqXG4gKiBIKSBXaGVuIGNvbXBhcmluZyB0d28gZmllbGRzLCBpZiBib3RoIGhhdmUgc2VsZWN0aW9uIHNldHMsIHRoZW4gYSBjb21wYXJpc29uXG4gKiBpcyBtYWRlIFwiYmV0d2VlblwiIGJvdGggc2VsZWN0aW9uIHNldHMsIGZpcnN0IGNvbXBhcmluZyB0aGUgc2V0IG9mIGZpZWxkcyBpblxuICogdGhlIGZpcnN0IHNlbGVjdGlvbiBzZXQgd2l0aCB0aGUgc2V0IG9mIGZpZWxkcyBpbiB0aGUgc2Vjb25kLlxuICpcbiAqIEkpIEFsc28sIGlmIGFueSBmcmFnbWVudCBpcyByZWZlcmVuY2VkIGluIGVpdGhlciBzZWxlY3Rpb24gc2V0LCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3RoZXIgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEopIEFsc28sIGlmIHR3byBmcmFnbWVudHMgYXJlIHJlZmVyZW5jZWQgaW4gYm90aCBzZWxlY3Rpb24gc2V0cywgdGhlbiBhXG4gKiBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIHR3byBmcmFnbWVudHMuXG4gKlxuICovXG4vLyBGaW5kIGFsbCBjb25mbGljdHMgZm91bmQgXCJ3aXRoaW5cIiBhIHNlbGVjdGlvbiBzZXQsIGluY2x1ZGluZyB0aG9zZSBmb3VuZFxuLy8gdmlhIHNwcmVhZGluZyBpbiBmcmFnbWVudHMuIENhbGxlZCB3aGVuIHZpc2l0aW5nIGVhY2ggU2VsZWN0aW9uU2V0IGluIHRoZVxuLy8gR3JhcGhRTCBEb2N1bWVudC5cbmZ1bmN0aW9uIGZpbmRDb25mbGljdHNXaXRoaW5TZWxlY3Rpb25TZXQoXG4gIGNvbnRleHQsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgcGFyZW50VHlwZSxcbiAgc2VsZWN0aW9uU2V0LFxuKSB7XG4gIGNvbnN0IGNvbmZsaWN0cyA9IFtdO1xuICBjb25zdCBbZmllbGRNYXAsIGZyYWdtZW50TmFtZXNdID0gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICBjb250ZXh0LFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgcGFyZW50VHlwZSxcbiAgICBzZWxlY3Rpb25TZXQsXG4gICk7IC8vIChBKSBGaW5kIGZpbmQgYWxsIGNvbmZsaWN0cyBcIndpdGhpblwiIHRoZSBmaWVsZHMgb2YgdGhpcyBzZWxlY3Rpb24gc2V0LlxuICAvLyBOb3RlOiB0aGlzIGlzIHRoZSAqb25seSBwbGFjZSogYGNvbGxlY3RDb25mbGljdHNXaXRoaW5gIGlzIGNhbGxlZC5cblxuICBjb2xsZWN0Q29uZmxpY3RzV2l0aGluKFxuICAgIGNvbnRleHQsXG4gICAgY29uZmxpY3RzLFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgIGZpZWxkTWFwLFxuICApO1xuXG4gIGlmIChmcmFnbWVudE5hbWVzLmxlbmd0aCAhPT0gMCkge1xuICAgIC8vIChCKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlc2UgZmllbGRzIGFuZCB0aG9zZSByZXByZXNlbnRlZCBieVxuICAgIC8vIGVhY2ggc3ByZWFkIGZyYWdtZW50IG5hbWUgZm91bmQuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFnbWVudE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjb25mbGljdHMsXG4gICAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZpZWxkTWFwLFxuICAgICAgICBmcmFnbWVudE5hbWVzW2ldLFxuICAgICAgKTsgLy8gKEMpIFRoZW4gY29tcGFyZSB0aGlzIGZyYWdtZW50IHdpdGggYWxsIG90aGVyIGZyYWdtZW50cyBmb3VuZCBpbiB0aGlzXG4gICAgICAvLyBzZWxlY3Rpb24gc2V0IHRvIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gZnJhZ21lbnRzIHNwcmVhZCB0b2dldGhlci5cbiAgICAgIC8vIFRoaXMgY29tcGFyZXMgZWFjaCBpdGVtIGluIHRoZSBsaXN0IG9mIGZyYWdtZW50IG5hbWVzIHRvIGV2ZXJ5IG90aGVyXG4gICAgICAvLyBpdGVtIGluIHRoYXQgc2FtZSBsaXN0IChleGNlcHQgZm9yIGl0c2VsZikuXG5cbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGZyYWdtZW50TmFtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBjb25mbGljdHMsXG4gICAgICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZnJhZ21lbnROYW1lc1tpXSxcbiAgICAgICAgICBmcmFnbWVudE5hbWVzW2pdLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25mbGljdHM7XG59IC8vIENvbGxlY3QgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIGEgc2V0IG9mIGZpZWxkcyBhbmQgYSBmcmFnbWVudCByZWZlcmVuY2Vcbi8vIGluY2x1ZGluZyB2aWEgc3ByZWFkaW5nIGluIGFueSBuZXN0ZWQgZnJhZ21lbnRzLlxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KFxuICBjb250ZXh0LFxuICBjb25mbGljdHMsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gIGZpZWxkTWFwLFxuICBmcmFnbWVudE5hbWUsXG4pIHtcbiAgY29uc3QgZnJhZ21lbnQgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZSk7XG5cbiAgaWYgKCFmcmFnbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IFtmaWVsZE1hcDIsIHJlZmVyZW5jZWRGcmFnbWVudE5hbWVzXSA9XG4gICAgZ2V0UmVmZXJlbmNlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoXG4gICAgICBjb250ZXh0LFxuICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgIGZyYWdtZW50LFxuICAgICk7IC8vIERvIG5vdCBjb21wYXJlIGEgZnJhZ21lbnQncyBmaWVsZE1hcCB0byBpdHNlbGYuXG5cbiAgaWYgKGZpZWxkTWFwID09PSBmaWVsZE1hcDIpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gKEQpIEZpcnN0IGNvbGxlY3QgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkc1xuICAvLyBhbmQgdGhlIGNvbGxlY3Rpb24gb2YgZmllbGRzIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBmcmFnbWVudC5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbihcbiAgICBjb250ZXh0LFxuICAgIGNvbmZsaWN0cyxcbiAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICBmaWVsZE1hcCxcbiAgICBmaWVsZE1hcDIsXG4gICk7IC8vIChFKSBUaGVuIGNvbGxlY3QgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkc1xuICAvLyBhbmQgYW55IGZyYWdtZW50IG5hbWVzIGZvdW5kIGluIHRoZSBnaXZlbiBmcmFnbWVudC5cblxuICBmb3IgKGNvbnN0IHJlZmVyZW5jZWRGcmFnbWVudE5hbWUgb2YgcmVmZXJlbmNlZEZyYWdtZW50TmFtZXMpIHtcbiAgICAvLyBNZW1vaXplIHNvIHR3byBmcmFnbWVudHMgYXJlIG5vdCBjb21wYXJlZCBmb3IgY29uZmxpY3RzIG1vcmUgdGhhbiBvbmNlLlxuICAgIGlmIChcbiAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycy5oYXMoXG4gICAgICAgIHJlZmVyZW5jZWRGcmFnbWVudE5hbWUsXG4gICAgICAgIGZyYWdtZW50TmFtZSxcbiAgICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICApXG4gICAgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMuYWRkKFxuICAgICAgcmVmZXJlbmNlZEZyYWdtZW50TmFtZSxcbiAgICAgIGZyYWdtZW50TmFtZSxcbiAgICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgICk7XG4gICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChcbiAgICAgIGNvbnRleHQsXG4gICAgICBjb25mbGljdHMsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICBmaWVsZE1hcCxcbiAgICAgIHJlZmVyZW5jZWRGcmFnbWVudE5hbWUsXG4gICAgKTtcbiAgfVxufSAvLyBDb2xsZWN0IGFsbCBjb25mbGljdHMgZm91bmQgYmV0d2VlbiB0d28gZnJhZ21lbnRzLCBpbmNsdWRpbmcgdmlhIHNwcmVhZGluZyBpblxuLy8gYW55IG5lc3RlZCBmcmFnbWVudHMuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKFxuICBjb250ZXh0LFxuICBjb25mbGljdHMsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gIGZyYWdtZW50TmFtZTEsXG4gIGZyYWdtZW50TmFtZTIsXG4pIHtcbiAgLy8gTm8gbmVlZCB0byBjb21wYXJlIGEgZnJhZ21lbnQgdG8gaXRzZWxmLlxuICBpZiAoZnJhZ21lbnROYW1lMSA9PT0gZnJhZ21lbnROYW1lMikge1xuICAgIHJldHVybjtcbiAgfSAvLyBNZW1vaXplIHNvIHR3byBmcmFnbWVudHMgYXJlIG5vdCBjb21wYXJlZCBmb3IgY29uZmxpY3RzIG1vcmUgdGhhbiBvbmNlLlxuXG4gIGlmIChcbiAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMuaGFzKFxuICAgICAgZnJhZ21lbnROYW1lMSxcbiAgICAgIGZyYWdtZW50TmFtZTIsXG4gICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICApXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycy5hZGQoZnJhZ21lbnROYW1lMSwgZnJhZ21lbnROYW1lMiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpO1xuICBjb25zdCBmcmFnbWVudDEgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZTEpO1xuICBjb25zdCBmcmFnbWVudDIgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZTIpO1xuXG4gIGlmICghZnJhZ21lbnQxIHx8ICFmcmFnbWVudDIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBbZmllbGRNYXAxLCByZWZlcmVuY2VkRnJhZ21lbnROYW1lczFdID1cbiAgICBnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgZnJhZ21lbnQxLFxuICAgICk7XG4gIGNvbnN0IFtmaWVsZE1hcDIsIHJlZmVyZW5jZWRGcmFnbWVudE5hbWVzMl0gPVxuICAgIGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBmcmFnbWVudDIsXG4gICAgKTsgLy8gKEYpIEZpcnN0LCBjb2xsZWN0IGFsbCBjb25mbGljdHMgYmV0d2VlbiB0aGVzZSB0d28gY29sbGVjdGlvbnMgb2YgZmllbGRzXG4gIC8vIChub3QgaW5jbHVkaW5nIGFueSBuZXN0ZWQgZnJhZ21lbnRzKS5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbihcbiAgICBjb250ZXh0LFxuICAgIGNvbmZsaWN0cyxcbiAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICBmaWVsZE1hcDEsXG4gICAgZmllbGRNYXAyLFxuICApOyAvLyAoRykgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBmaXJzdCBmcmFnbWVudCBhbmQgYW55IG5lc3RlZFxuICAvLyBmcmFnbWVudHMgc3ByZWFkIGluIHRoZSBzZWNvbmQgZnJhZ21lbnQuXG5cbiAgZm9yIChjb25zdCByZWZlcmVuY2VkRnJhZ21lbnROYW1lMiBvZiByZWZlcmVuY2VkRnJhZ21lbnROYW1lczIpIHtcbiAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjb25mbGljdHMsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICBmcmFnbWVudE5hbWUxLFxuICAgICAgcmVmZXJlbmNlZEZyYWdtZW50TmFtZTIsXG4gICAgKTtcbiAgfSAvLyAoRykgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBzZWNvbmQgZnJhZ21lbnQgYW5kIGFueSBuZXN0ZWRcbiAgLy8gZnJhZ21lbnRzIHNwcmVhZCBpbiB0aGUgZmlyc3QgZnJhZ21lbnQuXG5cbiAgZm9yIChjb25zdCByZWZlcmVuY2VkRnJhZ21lbnROYW1lMSBvZiByZWZlcmVuY2VkRnJhZ21lbnROYW1lczEpIHtcbiAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjb25mbGljdHMsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICByZWZlcmVuY2VkRnJhZ21lbnROYW1lMSxcbiAgICAgIGZyYWdtZW50TmFtZTIsXG4gICAgKTtcbiAgfVxufSAvLyBGaW5kIGFsbCBjb25mbGljdHMgZm91bmQgYmV0d2VlbiB0d28gc2VsZWN0aW9uIHNldHMsIGluY2x1ZGluZyB0aG9zZSBmb3VuZFxuLy8gdmlhIHNwcmVhZGluZyBpbiBmcmFnbWVudHMuIENhbGxlZCB3aGVuIGRldGVybWluaW5nIGlmIGNvbmZsaWN0cyBleGlzdFxuLy8gYmV0d2VlbiB0aGUgc3ViLWZpZWxkcyBvZiB0d28gb3ZlcmxhcHBpbmcgZmllbGRzLlxuXG5mdW5jdGlvbiBmaW5kQ29uZmxpY3RzQmV0d2VlblN1YlNlbGVjdGlvblNldHMoXG4gIGNvbnRleHQsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gIHBhcmVudFR5cGUxLFxuICBzZWxlY3Rpb25TZXQxLFxuICBwYXJlbnRUeXBlMixcbiAgc2VsZWN0aW9uU2V0Mixcbikge1xuICBjb25zdCBjb25mbGljdHMgPSBbXTtcbiAgY29uc3QgW2ZpZWxkTWFwMSwgZnJhZ21lbnROYW1lczFdID0gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICBjb250ZXh0LFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgcGFyZW50VHlwZTEsXG4gICAgc2VsZWN0aW9uU2V0MSxcbiAgKTtcbiAgY29uc3QgW2ZpZWxkTWFwMiwgZnJhZ21lbnROYW1lczJdID0gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICBjb250ZXh0LFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgcGFyZW50VHlwZTIsXG4gICAgc2VsZWN0aW9uU2V0MixcbiAgKTsgLy8gKEgpIEZpcnN0LCBjb2xsZWN0IGFsbCBjb25mbGljdHMgYmV0d2VlbiB0aGVzZSB0d28gY29sbGVjdGlvbnMgb2YgZmllbGQuXG5cbiAgY29sbGVjdENvbmZsaWN0c0JldHdlZW4oXG4gICAgY29udGV4dCxcbiAgICBjb25mbGljdHMsXG4gICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgZmllbGRNYXAxLFxuICAgIGZpZWxkTWFwMixcbiAgKTsgLy8gKEkpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGUgZmlyc3QgY29sbGVjdGlvbiBvZiBmaWVsZHMgYW5kXG4gIC8vIHRob3NlIHJlZmVyZW5jZWQgYnkgZWFjaCBmcmFnbWVudCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2Vjb25kLlxuXG4gIGZvciAoY29uc3QgZnJhZ21lbnROYW1lMiBvZiBmcmFnbWVudE5hbWVzMikge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoXG4gICAgICBjb250ZXh0LFxuICAgICAgY29uZmxpY3RzLFxuICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgICAgZmllbGRNYXAxLFxuICAgICAgZnJhZ21lbnROYW1lMixcbiAgICApO1xuICB9IC8vIChJKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIHNlY29uZCBjb2xsZWN0aW9uIG9mIGZpZWxkcyBhbmRcbiAgLy8gdGhvc2UgcmVmZXJlbmNlZCBieSBlYWNoIGZyYWdtZW50IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaXJzdC5cblxuICBmb3IgKGNvbnN0IGZyYWdtZW50TmFtZTEgb2YgZnJhZ21lbnROYW1lczEpIHtcbiAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbmZsaWN0cyxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgIGZpZWxkTWFwMixcbiAgICAgIGZyYWdtZW50TmFtZTEsXG4gICAgKTtcbiAgfSAvLyAoSikgQWxzbyBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIGFueSBmcmFnbWVudCBuYW1lcyBieSB0aGUgZmlyc3QgYW5kXG4gIC8vIGZyYWdtZW50IG5hbWVzIGJ5IHRoZSBzZWNvbmQuIFRoaXMgY29tcGFyZXMgZWFjaCBpdGVtIGluIHRoZSBmaXJzdCBzZXQgb2ZcbiAgLy8gbmFtZXMgdG8gZWFjaCBpdGVtIGluIHRoZSBzZWNvbmQgc2V0IG9mIG5hbWVzLlxuXG4gIGZvciAoY29uc3QgZnJhZ21lbnROYW1lMSBvZiBmcmFnbWVudE5hbWVzMSkge1xuICAgIGZvciAoY29uc3QgZnJhZ21lbnROYW1lMiBvZiBmcmFnbWVudE5hbWVzMikge1xuICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbmZsaWN0cyxcbiAgICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgICAgZnJhZ21lbnROYW1lMSxcbiAgICAgICAgZnJhZ21lbnROYW1lMixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZsaWN0cztcbn0gLy8gQ29sbGVjdCBhbGwgQ29uZmxpY3RzIFwid2l0aGluXCIgb25lIGNvbGxlY3Rpb24gb2YgZmllbGRzLlxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzV2l0aGluKFxuICBjb250ZXh0LFxuICBjb25mbGljdHMsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgZmllbGRNYXAsXG4pIHtcbiAgLy8gQSBmaWVsZCBtYXAgaXMgYSBrZXllZCBjb2xsZWN0aW9uLCB3aGVyZSBlYWNoIGtleSByZXByZXNlbnRzIGEgcmVzcG9uc2VcbiAgLy8gbmFtZSBhbmQgdGhlIHZhbHVlIGF0IHRoYXQga2V5IGlzIGEgbGlzdCBvZiBhbGwgZmllbGRzIHdoaWNoIHByb3ZpZGUgdGhhdFxuICAvLyByZXNwb25zZSBuYW1lLiBGb3IgZXZlcnkgcmVzcG9uc2UgbmFtZSwgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGZpZWxkcywgdGhleVxuICAvLyBtdXN0IGJlIGNvbXBhcmVkIHRvIGZpbmQgYSBwb3RlbnRpYWwgY29uZmxpY3QuXG4gIGZvciAoY29uc3QgW3Jlc3BvbnNlTmFtZSwgZmllbGRzXSBvZiBPYmplY3QuZW50cmllcyhmaWVsZE1hcCkpIHtcbiAgICAvLyBUaGlzIGNvbXBhcmVzIGV2ZXJ5IGZpZWxkIGluIHRoZSBsaXN0IHRvIGV2ZXJ5IG90aGVyIGZpZWxkIGluIHRoaXMgbGlzdFxuICAgIC8vIChleGNlcHQgdG8gaXRzZWxmKS4gSWYgdGhlIGxpc3Qgb25seSBoYXMgb25lIGl0ZW0sIG5vdGhpbmcgbmVlZHMgdG9cbiAgICAvLyBiZSBjb21wYXJlZC5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGNvbnN0IGNvbmZsaWN0ID0gZmluZENvbmZsaWN0KFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICAgICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICAgICAgICBmYWxzZSwgLy8gd2l0aGluIG9uZSBjb2xsZWN0aW9uIGlzIG5ldmVyIG11dHVhbGx5IGV4Y2x1c2l2ZVxuICAgICAgICAgICAgcmVzcG9uc2VOYW1lLFxuICAgICAgICAgICAgZmllbGRzW2ldLFxuICAgICAgICAgICAgZmllbGRzW2pdLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcbiAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKGNvbmZsaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gQ29sbGVjdCBhbGwgQ29uZmxpY3RzIGJldHdlZW4gdHdvIGNvbGxlY3Rpb25zIG9mIGZpZWxkcy4gVGhpcyBpcyBzaW1pbGFyIHRvLFxuLy8gYnV0IGRpZmZlcmVudCBmcm9tIHRoZSBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgZnVuY3Rpb24gYWJvdmUuIFRoaXMgY2hlY2tcbi8vIGFzc3VtZXMgdGhhdCBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQgb24gZWFjaFxuLy8gcHJvdmlkZWQgY29sbGVjdGlvbiBvZiBmaWVsZHMuIFRoaXMgaXMgdHJ1ZSBiZWNhdXNlIHRoaXMgdmFsaWRhdG9yIHRyYXZlcnNlc1xuLy8gZWFjaCBpbmRpdmlkdWFsIHNlbGVjdGlvbiBzZXQuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuKFxuICBjb250ZXh0LFxuICBjb25mbGljdHMsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gIGZpZWxkTWFwMSxcbiAgZmllbGRNYXAyLFxuKSB7XG4gIC8vIEEgZmllbGQgbWFwIGlzIGEga2V5ZWQgY29sbGVjdGlvbiwgd2hlcmUgZWFjaCBrZXkgcmVwcmVzZW50cyBhIHJlc3BvbnNlXG4gIC8vIG5hbWUgYW5kIHRoZSB2YWx1ZSBhdCB0aGF0IGtleSBpcyBhIGxpc3Qgb2YgYWxsIGZpZWxkcyB3aGljaCBwcm92aWRlIHRoYXRcbiAgLy8gcmVzcG9uc2UgbmFtZS4gRm9yIGFueSByZXNwb25zZSBuYW1lIHdoaWNoIGFwcGVhcnMgaW4gYm90aCBwcm92aWRlZCBmaWVsZFxuICAvLyBtYXBzLCBlYWNoIGZpZWxkIGZyb20gdGhlIGZpcnN0IGZpZWxkIG1hcCBtdXN0IGJlIGNvbXBhcmVkIHRvIGV2ZXJ5IGZpZWxkXG4gIC8vIGluIHRoZSBzZWNvbmQgZmllbGQgbWFwIHRvIGZpbmQgcG90ZW50aWFsIGNvbmZsaWN0cy5cbiAgZm9yIChjb25zdCBbcmVzcG9uc2VOYW1lLCBmaWVsZHMxXSBvZiBPYmplY3QuZW50cmllcyhmaWVsZE1hcDEpKSB7XG4gICAgY29uc3QgZmllbGRzMiA9IGZpZWxkTWFwMltyZXNwb25zZU5hbWVdO1xuXG4gICAgaWYgKGZpZWxkczIpIHtcbiAgICAgIGZvciAoY29uc3QgZmllbGQxIG9mIGZpZWxkczEpIHtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZDIgb2YgZmllbGRzMikge1xuICAgICAgICAgIGNvbnN0IGNvbmZsaWN0ID0gZmluZENvbmZsaWN0KFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICAgICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICAgICAgICBwYXJlbnRGaWVsZHNBcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlTmFtZSxcbiAgICAgICAgICAgIGZpZWxkMSxcbiAgICAgICAgICAgIGZpZWxkMixcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGNvbmZsaWN0KSB7XG4gICAgICAgICAgICBjb25mbGljdHMucHVzaChjb25mbGljdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59IC8vIERldGVybWluZXMgaWYgdGhlcmUgaXMgYSBjb25mbGljdCBiZXR3ZWVuIHR3byBwYXJ0aWN1bGFyIGZpZWxkcywgaW5jbHVkaW5nXG4vLyBjb21wYXJpbmcgdGhlaXIgc3ViLWZpZWxkcy5cblxuZnVuY3Rpb24gZmluZENvbmZsaWN0KFxuICBjb250ZXh0LFxuICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlLFxuICByZXNwb25zZU5hbWUsXG4gIGZpZWxkMSxcbiAgZmllbGQyLFxuKSB7XG4gIGNvbnN0IFtwYXJlbnRUeXBlMSwgbm9kZTEsIGRlZjFdID0gZmllbGQxO1xuICBjb25zdCBbcGFyZW50VHlwZTIsIG5vZGUyLCBkZWYyXSA9IGZpZWxkMjsgLy8gSWYgaXQgaXMga25vd24gdGhhdCB0d28gZmllbGRzIGNvdWxkIG5vdCBwb3NzaWJseSBhcHBseSBhdCB0aGUgc2FtZVxuICAvLyB0aW1lLCBkdWUgdG8gdGhlIHBhcmVudCB0eXBlcywgdGhlbiBpdCBpcyBzYWZlIHRvIHBlcm1pdCB0aGVtIHRvIGRpdmVyZ2VcbiAgLy8gaW4gYWxpYXNlZCBmaWVsZCBvciBhcmd1bWVudHMgdXNlZCBhcyB0aGV5IHdpbGwgbm90IHByZXNlbnQgYW55IGFtYmlndWl0eVxuICAvLyBieSBkaWZmZXJpbmcuXG4gIC8vIEl0IGlzIGtub3duIHRoYXQgdHdvIHBhcmVudCB0eXBlcyBjb3VsZCBuZXZlciBvdmVybGFwIGlmIHRoZXkgYXJlXG4gIC8vIGRpZmZlcmVudCBPYmplY3QgdHlwZXMuIEludGVyZmFjZSBvciBVbmlvbiB0eXBlcyBtaWdodCBvdmVybGFwIC0gaWYgbm90XG4gIC8vIGluIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2hlbWEsIHRoZW4gcGVyaGFwcyBpbiBzb21lIGZ1dHVyZSB2ZXJzaW9uLFxuICAvLyB0aHVzIG1heSBub3Qgc2FmZWx5IGRpdmVyZ2UuXG5cbiAgY29uc3QgYXJlTXV0dWFsbHlFeGNsdXNpdmUgPVxuICAgIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlIHx8XG4gICAgKHBhcmVudFR5cGUxICE9PSBwYXJlbnRUeXBlMiAmJlxuICAgICAgKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkocGFyZW50VHlwZTEpICYmXG4gICAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShwYXJlbnRUeXBlMikpO1xuXG4gIGlmICghYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICAvLyBUd28gYWxpYXNlcyBtdXN0IHJlZmVyIHRvIHRoZSBzYW1lIGZpZWxkLlxuICAgIGNvbnN0IG5hbWUxID0gbm9kZTEubmFtZS52YWx1ZTtcbiAgICBjb25zdCBuYW1lMiA9IG5vZGUyLm5hbWUudmFsdWU7XG5cbiAgICBpZiAobmFtZTEgIT09IG5hbWUyKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBbcmVzcG9uc2VOYW1lLCBgXCIke25hbWUxfVwiIGFuZCBcIiR7bmFtZTJ9XCIgYXJlIGRpZmZlcmVudCBmaWVsZHNgXSxcbiAgICAgICAgW25vZGUxXSxcbiAgICAgICAgW25vZGUyXSxcbiAgICAgIF07XG4gICAgfSAvLyBUd28gZmllbGQgY2FsbHMgbXVzdCBoYXZlIHRoZSBzYW1lIGFyZ3VtZW50cy5cblxuICAgIGlmIChzdHJpbmdpZnlBcmd1bWVudHMobm9kZTEpICE9PSBzdHJpbmdpZnlBcmd1bWVudHMobm9kZTIpKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBbcmVzcG9uc2VOYW1lLCAndGhleSBoYXZlIGRpZmZlcmluZyBhcmd1bWVudHMnXSxcbiAgICAgICAgW25vZGUxXSxcbiAgICAgICAgW25vZGUyXSxcbiAgICAgIF07XG4gICAgfVxuICB9IC8vIFRoZSByZXR1cm4gdHlwZSBmb3IgZWFjaCBmaWVsZC5cblxuICBjb25zdCB0eXBlMSA9IGRlZjEgPT09IG51bGwgfHwgZGVmMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmMS50eXBlO1xuICBjb25zdCB0eXBlMiA9IGRlZjIgPT09IG51bGwgfHwgZGVmMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmMi50eXBlO1xuXG4gIGlmICh0eXBlMSAmJiB0eXBlMiAmJiBkb1R5cGVzQ29uZmxpY3QodHlwZTEsIHR5cGUyKSkge1xuICAgIHJldHVybiBbXG4gICAgICBbXG4gICAgICAgIHJlc3BvbnNlTmFtZSxcbiAgICAgICAgYHRoZXkgcmV0dXJuIGNvbmZsaWN0aW5nIHR5cGVzIFwiJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkoXG4gICAgICAgICAgdHlwZTEsXG4gICAgICAgICl9XCIgYW5kIFwiJHsoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZTIpfVwiYCxcbiAgICAgIF0sXG4gICAgICBbbm9kZTFdLFxuICAgICAgW25vZGUyXSxcbiAgICBdO1xuICB9IC8vIENvbGxlY3QgYW5kIGNvbXBhcmUgc3ViLWZpZWxkcy4gVXNlIHRoZSBzYW1lIFwidmlzaXRlZCBmcmFnbWVudCBuYW1lc1wiIGxpc3RcbiAgLy8gZm9yIGJvdGggY29sbGVjdGlvbnMgc28gZmllbGRzIGluIGEgZnJhZ21lbnQgcmVmZXJlbmNlIGFyZSBuZXZlclxuICAvLyBjb21wYXJlZCB0byB0aGVtc2VsdmVzLlxuXG4gIGNvbnN0IHNlbGVjdGlvblNldDEgPSBub2RlMS5zZWxlY3Rpb25TZXQ7XG4gIGNvbnN0IHNlbGVjdGlvblNldDIgPSBub2RlMi5zZWxlY3Rpb25TZXQ7XG5cbiAgaWYgKHNlbGVjdGlvblNldDEgJiYgc2VsZWN0aW9uU2V0Mikge1xuICAgIGNvbnN0IGNvbmZsaWN0cyA9IGZpbmRDb25mbGljdHNCZXR3ZWVuU3ViU2VsZWN0aW9uU2V0cyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKSh0eXBlMSksXG4gICAgICBzZWxlY3Rpb25TZXQxLFxuICAgICAgKDAsIF9kZWZpbml0aW9uLmdldE5hbWVkVHlwZSkodHlwZTIpLFxuICAgICAgc2VsZWN0aW9uU2V0MixcbiAgICApO1xuICAgIHJldHVybiBzdWJmaWVsZENvbmZsaWN0cyhjb25mbGljdHMsIHJlc3BvbnNlTmFtZSwgbm9kZTEsIG5vZGUyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcmd1bWVudHMoZmllbGROb2RlKSB7XG4gIHZhciBfZmllbGROb2RlJGFyZ3VtZW50cztcblxuICAvLyBGSVhNRSBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG4gIGNvbnN0IGFyZ3MgPVxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgKF9maWVsZE5vZGUkYXJndW1lbnRzID0gZmllbGROb2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiZcbiAgICBfZmllbGROb2RlJGFyZ3VtZW50cyAhPT0gdm9pZCAwXG4gICAgICA/IF9maWVsZE5vZGUkYXJndW1lbnRzXG4gICAgICA6IFtdO1xuICBjb25zdCBpbnB1dE9iamVjdFdpdGhBcmdzID0ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVCxcbiAgICBmaWVsZHM6IGFyZ3MubWFwKChhcmdOb2RlKSA9PiAoe1xuICAgICAga2luZDogX2tpbmRzLktpbmQuT0JKRUNUX0ZJRUxELFxuICAgICAgbmFtZTogYXJnTm9kZS5uYW1lLFxuICAgICAgdmFsdWU6IGFyZ05vZGUudmFsdWUsXG4gICAgfSkpLFxuICB9O1xuICByZXR1cm4gKDAsIF9wcmludGVyLnByaW50KShcbiAgICAoMCwgX3NvcnRWYWx1ZU5vZGUuc29ydFZhbHVlTm9kZSkoaW5wdXRPYmplY3RXaXRoQXJncyksXG4gICk7XG59IC8vIFR3byB0eXBlcyBjb25mbGljdCBpZiBib3RoIHR5cGVzIGNvdWxkIG5vdCBhcHBseSB0byBhIHZhbHVlIHNpbXVsdGFuZW91c2x5LlxuLy8gQ29tcG9zaXRlIHR5cGVzIGFyZSBpZ25vcmVkIGFzIHRoZWlyIGluZGl2aWR1YWwgZmllbGQgdHlwZXMgd2lsbCBiZSBjb21wYXJlZFxuLy8gbGF0ZXIgcmVjdXJzaXZlbHkuIEhvd2V2ZXIgTGlzdCBhbmQgTm9uLU51bGwgdHlwZXMgbXVzdCBtYXRjaC5cblxuZnVuY3Rpb24gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLCB0eXBlMikge1xuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHR5cGUxKSkge1xuICAgIHJldHVybiAoMCwgX2RlZmluaXRpb24uaXNMaXN0VHlwZSkodHlwZTIpXG4gICAgICA/IGRvVHlwZXNDb25mbGljdCh0eXBlMS5vZlR5cGUsIHR5cGUyLm9mVHlwZSlcbiAgICAgIDogdHJ1ZTtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNMaXN0VHlwZSkodHlwZTIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKHR5cGUxKSkge1xuICAgIHJldHVybiAoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodHlwZTIpXG4gICAgICA/IGRvVHlwZXNDb25mbGljdCh0eXBlMS5vZlR5cGUsIHR5cGUyLm9mVHlwZSlcbiAgICAgIDogdHJ1ZTtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodHlwZTIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoXG4gICAgKDAsIF9kZWZpbml0aW9uLmlzTGVhZlR5cGUpKHR5cGUxKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0xlYWZUeXBlKSh0eXBlMilcbiAgKSB7XG4gICAgcmV0dXJuIHR5cGUxICE9PSB0eXBlMjtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0gLy8gR2l2ZW4gYSBzZWxlY3Rpb24gc2V0LCByZXR1cm4gdGhlIGNvbGxlY3Rpb24gb2YgZmllbGRzIChhIG1hcHBpbmcgb2YgcmVzcG9uc2Vcbi8vIG5hbWUgdG8gZmllbGQgbm9kZXMgYW5kIGRlZmluaXRpb25zKSBhcyB3ZWxsIGFzIGEgbGlzdCBvZiBmcmFnbWVudCBuYW1lc1xuLy8gcmVmZXJlbmNlZCB2aWEgZnJhZ21lbnQgc3ByZWFkcy5cblxuZnVuY3Rpb24gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgY29udGV4dCxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgcGFyZW50VHlwZSxcbiAgc2VsZWN0aW9uU2V0LFxuKSB7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMuZ2V0KHNlbGVjdGlvblNldCk7XG5cbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICBjb25zdCBub2RlQW5kRGVmcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IGZyYWdtZW50TmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICBjb250ZXh0LFxuICAgIHBhcmVudFR5cGUsXG4gICAgc2VsZWN0aW9uU2V0LFxuICAgIG5vZGVBbmREZWZzLFxuICAgIGZyYWdtZW50TmFtZXMsXG4gICk7XG5cbiAgY29uc3QgcmVzdWx0ID0gW25vZGVBbmREZWZzLCBPYmplY3Qua2V5cyhmcmFnbWVudE5hbWVzKV07XG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMuc2V0KHNlbGVjdGlvblNldCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0gLy8gR2l2ZW4gYSByZWZlcmVuY2UgdG8gYSBmcmFnbWVudCwgcmV0dXJuIHRoZSByZXByZXNlbnRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkc1xuLy8gYXMgd2VsbCBhcyBhIGxpc3Qgb2YgbmVzdGVkIGZyYWdtZW50IG5hbWVzIHJlZmVyZW5jZWQgdmlhIGZyYWdtZW50IHNwcmVhZHMuXG5cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICBjb250ZXh0LFxuICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICBmcmFnbWVudCxcbikge1xuICAvLyBTaG9ydC1jaXJjdWl0IGJ1aWxkaW5nIGEgdHlwZSBmcm9tIHRoZSBub2RlIGlmIHBvc3NpYmxlLlxuICBjb25zdCBjYWNoZWQgPSBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLmdldChmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xuXG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgY29uc3QgZnJhZ21lbnRUeXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICBmcmFnbWVudC50eXBlQ29uZGl0aW9uLFxuICApO1xuICByZXR1cm4gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICBjb250ZXh0LFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgZnJhZ21lbnRUeXBlLFxuICAgIGZyYWdtZW50LnNlbGVjdGlvblNldCxcbiAgKTtcbn1cblxuZnVuY3Rpb24gX2NvbGxlY3RGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICBjb250ZXh0LFxuICBwYXJlbnRUeXBlLFxuICBzZWxlY3Rpb25TZXQsXG4gIG5vZGVBbmREZWZzLFxuICBmcmFnbWVudE5hbWVzLFxuKSB7XG4gIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zKSB7XG4gICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgY2FzZSBfa2luZHMuS2luZC5GSUVMRDoge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgbGV0IGZpZWxkRGVmO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShwYXJlbnRUeXBlKSB8fFxuICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHBhcmVudFR5cGUpXG4gICAgICAgICkge1xuICAgICAgICAgIGZpZWxkRGVmID0gcGFyZW50VHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VOYW1lID0gc2VsZWN0aW9uLmFsaWFzXG4gICAgICAgICAgPyBzZWxlY3Rpb24uYWxpYXMudmFsdWVcbiAgICAgICAgICA6IGZpZWxkTmFtZTtcblxuICAgICAgICBpZiAoIW5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0pIHtcbiAgICAgICAgICBub2RlQW5kRGVmc1tyZXNwb25zZU5hbWVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBub2RlQW5kRGVmc1tyZXNwb25zZU5hbWVdLnB1c2goW3BhcmVudFR5cGUsIHNlbGVjdGlvbiwgZmllbGREZWZdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICBmcmFnbWVudE5hbWVzW3NlbGVjdGlvbi5uYW1lLnZhbHVlXSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLklOTElORV9GUkFHTUVOVDoge1xuICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gc2VsZWN0aW9uLnR5cGVDb25kaXRpb247XG4gICAgICAgIGNvbnN0IGlubGluZUZyYWdtZW50VHlwZSA9IHR5cGVDb25kaXRpb25cbiAgICAgICAgICA/ICgwLCBfdHlwZUZyb21BU1QudHlwZUZyb21BU1QpKGNvbnRleHQuZ2V0U2NoZW1hKCksIHR5cGVDb25kaXRpb24pXG4gICAgICAgICAgOiBwYXJlbnRUeXBlO1xuXG4gICAgICAgIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGlubGluZUZyYWdtZW50VHlwZSxcbiAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIG5vZGVBbmREZWZzLFxuICAgICAgICAgIGZyYWdtZW50TmFtZXMsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59IC8vIEdpdmVuIGEgc2VyaWVzIG9mIENvbmZsaWN0cyB3aGljaCBvY2N1cnJlZCBiZXR3ZWVuIHR3byBzdWItZmllbGRzLCBnZW5lcmF0ZVxuLy8gYSBzaW5nbGUgQ29uZmxpY3QuXG5cbmZ1bmN0aW9uIHN1YmZpZWxkQ29uZmxpY3RzKGNvbmZsaWN0cywgcmVzcG9uc2VOYW1lLCBub2RlMSwgbm9kZTIpIHtcbiAgaWYgKGNvbmZsaWN0cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFtyZXNwb25zZU5hbWUsIGNvbmZsaWN0cy5tYXAoKFtyZWFzb25dKSA9PiByZWFzb24pXSxcbiAgICAgIFtub2RlMSwgLi4uY29uZmxpY3RzLm1hcCgoWywgZmllbGRzMV0pID0+IGZpZWxkczEpLmZsYXQoKV0sXG4gICAgICBbbm9kZTIsIC4uLmNvbmZsaWN0cy5tYXAoKFssICwgZmllbGRzMl0pID0+IGZpZWxkczIpLmZsYXQoKV0sXG4gICAgXTtcbiAgfVxufVxuLyoqXG4gKiBBIHdheSB0byBrZWVwIHRyYWNrIG9mIHBhaXJzIG9mIHRoaW5ncyB3aGVuIHRoZSBvcmRlcmluZyBvZiB0aGUgcGFpciBkb2VzIG5vdCBtYXR0ZXIuXG4gKi9cblxuY2xhc3MgUGFpclNldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2RhdGEgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYXMoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB2YXIgX3RoaXMkX2RhdGEkZ2V0O1xuXG4gICAgY29uc3QgW2tleTEsIGtleTJdID0gYSA8IGIgPyBbYSwgYl0gOiBbYiwgYV07XG4gICAgY29uc3QgcmVzdWx0ID1cbiAgICAgIChfdGhpcyRfZGF0YSRnZXQgPSB0aGlzLl9kYXRhLmdldChrZXkxKSkgPT09IG51bGwgfHxcbiAgICAgIF90aGlzJF9kYXRhJGdldCA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX3RoaXMkX2RhdGEkZ2V0LmdldChrZXkyKTtcblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gYXJlTXV0dWFsbHlFeGNsdXNpdmUgYmVpbmcgZmFsc2UgaXMgYSBzdXBlcnNldCBvZiBiZWluZyB0cnVlLCBoZW5jZSBpZlxuICAgIC8vIHdlIHdhbnQgdG8ga25vdyBpZiB0aGlzIFBhaXJTZXQgXCJoYXNcIiB0aGVzZSB0d28gd2l0aCBubyBleGNsdXNpdml0eSxcbiAgICAvLyB3ZSBoYXZlIHRvIGVuc3VyZSBpdCB3YXMgYWRkZWQgYXMgc3VjaC5cblxuICAgIHJldHVybiBhcmVNdXR1YWxseUV4Y2x1c2l2ZSA/IHRydWUgOiBhcmVNdXR1YWxseUV4Y2x1c2l2ZSA9PT0gcmVzdWx0O1xuICB9XG5cbiAgYWRkKGEsIGIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgY29uc3QgW2tleTEsIGtleTJdID0gYSA8IGIgPyBbYSwgYl0gOiBbYiwgYV07XG5cbiAgICBjb25zdCBtYXAgPSB0aGlzLl9kYXRhLmdldChrZXkxKTtcblxuICAgIGlmIChtYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fZGF0YS5zZXQoa2V5MSwgbmV3IE1hcChbW2tleTIsIGFyZU11dHVhbGx5RXhjbHVzaXZlXV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwLnNldChrZXkyLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlID0gUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfdHlwZUNvbXBhcmF0b3JzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5qcycpO1xuXG52YXIgX3R5cGVGcm9tQVNUID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULmpzJyk7XG5cbi8qKlxuICogUG9zc2libGUgZnJhZ21lbnQgc3ByZWFkXG4gKlxuICogQSBmcmFnbWVudCBzcHJlYWQgaXMgb25seSB2YWxpZCBpZiB0aGUgdHlwZSBjb25kaXRpb24gY291bGQgZXZlciBwb3NzaWJseVxuICogYmUgdHJ1ZTogaWYgdGhlcmUgaXMgYSBub24tZW1wdHkgaW50ZXJzZWN0aW9uIG9mIHRoZSBwb3NzaWJsZSBwYXJlbnQgdHlwZXMsXG4gKiBhbmQgcG9zc2libGUgdHlwZXMgd2hpY2ggcGFzcyB0aGUgdHlwZSBjb25kaXRpb24uXG4gKi9cbmZ1bmN0aW9uIFBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgSW5saW5lRnJhZ21lbnQobm9kZSkge1xuICAgICAgY29uc3QgZnJhZ1R5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNDb21wb3NpdGVUeXBlKShmcmFnVHlwZSkgJiZcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzQ29tcG9zaXRlVHlwZSkocGFyZW50VHlwZSkgJiZcbiAgICAgICAgISgwLCBfdHlwZUNvbXBhcmF0b3JzLmRvVHlwZXNPdmVybGFwKShcbiAgICAgICAgICBjb250ZXh0LmdldFNjaGVtYSgpLFxuICAgICAgICAgIGZyYWdUeXBlLFxuICAgICAgICAgIHBhcmVudFR5cGUsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnRUeXBlU3RyID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKHBhcmVudFR5cGUpO1xuICAgICAgICBjb25zdCBmcmFnVHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShmcmFnVHlwZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IGNhbm5vdCBiZSBzcHJlYWQgaGVyZSBhcyBvYmplY3RzIG9mIHR5cGUgXCIke3BhcmVudFR5cGVTdHJ9XCIgY2FuIG5ldmVyIGJlIG9mIHR5cGUgXCIke2ZyYWdUeXBlU3RyfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICBjb25zdCBmcmFnTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGZyYWdUeXBlID0gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIGZyYWdOYW1lKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICBmcmFnVHlwZSAmJlxuICAgICAgICBwYXJlbnRUeXBlICYmXG4gICAgICAgICEoMCwgX3R5cGVDb21wYXJhdG9ycy5kb1R5cGVzT3ZlcmxhcCkoXG4gICAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgICBmcmFnVHlwZSxcbiAgICAgICAgICBwYXJlbnRUeXBlLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShwYXJlbnRUeXBlKTtcbiAgICAgICAgY29uc3QgZnJhZ1R5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkoZnJhZ1R5cGUpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGcmFnbWVudCBcIiR7ZnJhZ05hbWV9XCIgY2Fubm90IGJlIHNwcmVhZCBoZXJlIGFzIG9iamVjdHMgb2YgdHlwZSBcIiR7cGFyZW50VHlwZVN0cn1cIiBjYW4gbmV2ZXIgYmUgb2YgdHlwZSBcIiR7ZnJhZ1R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIG5hbWUpIHtcbiAgY29uc3QgZnJhZyA9IGNvbnRleHQuZ2V0RnJhZ21lbnQobmFtZSk7XG5cbiAgaWYgKGZyYWcpIHtcbiAgICBjb25zdCB0eXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgICBjb250ZXh0LmdldFNjaGVtYSgpLFxuICAgICAgZnJhZy50eXBlQ29uZGl0aW9uLFxuICAgICk7XG5cbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQ29tcG9zaXRlVHlwZSkodHlwZSkpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlBvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlID0gUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGU7XG5cbnZhciBfZGlkWW91TWVhbiA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvZGlkWW91TWVhbi5qcycpO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2ludmFyaWFudC5qcycpO1xuXG52YXIgX3N1Z2dlc3Rpb25MaXN0ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9wcmVkaWNhdGVzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxuLyoqXG4gKiBQb3NzaWJsZSB0eXBlIGV4dGVuc2lvblxuICpcbiAqIEEgdHlwZSBleHRlbnNpb24gaXMgb25seSB2YWxpZCBpZiB0aGUgdHlwZSBpcyBkZWZpbmVkIGFuZCBoYXMgdGhlIHNhbWUga2luZC5cbiAqL1xuZnVuY3Rpb24gUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBkZWZpbmVkVHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3QgZGVmIG9mIGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucykge1xuICAgIGlmICgoMCwgX3ByZWRpY2F0ZXMuaXNUeXBlRGVmaW5pdGlvbk5vZGUpKGRlZikpIHtcbiAgICAgIGRlZmluZWRUeXBlc1tkZWYubmFtZS52YWx1ZV0gPSBkZWY7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBVbmlvblR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIEVudW1UeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrRXh0ZW5zaW9uKG5vZGUpIHtcbiAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICBjb25zdCBkZWZOb2RlID0gZGVmaW5lZFR5cGVzW3R5cGVOYW1lXTtcbiAgICBjb25zdCBleGlzdGluZ1R5cGUgPVxuICAgICAgc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hLmdldFR5cGUodHlwZU5hbWUpO1xuICAgIGxldCBleHBlY3RlZEtpbmQ7XG5cbiAgICBpZiAoZGVmTm9kZSkge1xuICAgICAgZXhwZWN0ZWRLaW5kID0gZGVmS2luZFRvRXh0S2luZFtkZWZOb2RlLmtpbmRdO1xuICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdUeXBlKSB7XG4gICAgICBleHBlY3RlZEtpbmQgPSB0eXBlVG9FeHRLaW5kKGV4aXN0aW5nVHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGV4cGVjdGVkS2luZCkge1xuICAgICAgaWYgKGV4cGVjdGVkS2luZCAhPT0gbm9kZS5raW5kKSB7XG4gICAgICAgIGNvbnN0IGtpbmRTdHIgPSBleHRlbnNpb25LaW5kVG9UeXBlTmFtZShub2RlLmtpbmQpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBDYW5ub3QgZXh0ZW5kIG5vbi0ke2tpbmRTdHJ9IHR5cGUgXCIke3R5cGVOYW1lfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBkZWZOb2RlID8gW2RlZk5vZGUsIG5vZGVdIDogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYWxsVHlwZU5hbWVzID0gT2JqZWN0LmtleXMoe1xuICAgICAgICAuLi5kZWZpbmVkVHlwZXMsXG4gICAgICAgIC4uLihzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogc2NoZW1hLmdldFR5cGVNYXAoKSksXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN1Z2dlc3RlZFR5cGVzID0gKDAsIF9zdWdnZXN0aW9uTGlzdC5zdWdnZXN0aW9uTGlzdCkoXG4gICAgICAgIHR5cGVOYW1lLFxuICAgICAgICBhbGxUeXBlTmFtZXMsXG4gICAgICApO1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgZXh0ZW5kIHR5cGUgXCIke3R5cGVOYW1lfVwiIGJlY2F1c2UgaXQgaXMgbm90IGRlZmluZWQuYCArXG4gICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGVkVHlwZXMpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiBub2RlLm5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGRlZktpbmRUb0V4dEtpbmQgPSB7XG4gIFtfa2luZHMuS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OXTogX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OLFxuICBbX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTl06IF9raW5kcy5LaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTixcbiAgW19raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT05dOiBfa2luZHMuS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT04sXG4gIFtfa2luZHMuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT05dOiBfa2luZHMuS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTixcbiAgW19raW5kcy5LaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OXTogX2tpbmRzLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTixcbiAgW19raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT05dOlxuICAgIF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTixcbn07XG5cbmZ1bmN0aW9uIHR5cGVUb0V4dEtpbmQodHlwZSkge1xuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzU2NhbGFyVHlwZSkodHlwZSkpIHtcbiAgICByZXR1cm4gX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc09iamVjdFR5cGUpKHR5cGUpKSB7XG4gICAgcmV0dXJuIF9raW5kcy5LaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSkge1xuICAgIHJldHVybiBfa2luZHMuS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT047XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzVW5pb25UeXBlKSh0eXBlKSkge1xuICAgIHJldHVybiBfa2luZHMuS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNFbnVtVHlwZSkodHlwZSkpIHtcbiAgICByZXR1cm4gX2tpbmRzLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnB1dE9iamVjdFR5cGUpKHR5cGUpKSB7XG4gICAgcmV0dXJuIF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gIC8vIE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZFxuXG4gIGZhbHNlIHx8XG4gICAgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShcbiAgICAgIGZhbHNlLFxuICAgICAgJ1VuZXhwZWN0ZWQgdHlwZTogJyArICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBleHRlbnNpb25LaW5kVG9UeXBlTmFtZShraW5kKSB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICdzY2FsYXInO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ29iamVjdCc7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW50ZXJmYWNlJztcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuVU5JT05fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ3VuaW9uJztcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnZW51bSc7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW5wdXQgb2JqZWN0JztcbiAgICAvLyBOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWRcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgICBkZWZhdWx0OlxuICAgICAgZmFsc2UgfHxcbiAgICAgICAgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnVW5leHBlY3RlZCBraW5kOiAnICsgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGtpbmQpLFxuICAgICAgICApO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c09uRGlyZWN0aXZlc1J1bGUgPVxuICBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZTtcbmV4cG9ydHMuUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUgPSBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfa2V5TWFwID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9rZXlNYXAuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfcHJpbnRlciA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByaW50ZXIuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfZGlyZWN0aXZlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGlyZWN0aXZlcy5qcycpO1xuXG4vKipcbiAqIFByb3ZpZGVkIHJlcXVpcmVkIGFyZ3VtZW50c1xuICpcbiAqIEEgZmllbGQgb3IgZGlyZWN0aXZlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHJlcXVpcmVkIChub24tbnVsbCB3aXRob3V0IGFcbiAqIGRlZmF1bHQgdmFsdWUpIGZpZWxkIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgIC4uLlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpLFxuICAgIEZpZWxkOiB7XG4gICAgICAvLyBWYWxpZGF0ZSBvbiBsZWF2ZSB0byBhbGxvdyBmb3IgZGVlcGVyIGVycm9ycyB0byBhcHBlYXIgZmlyc3QuXG4gICAgICBsZWF2ZShmaWVsZE5vZGUpIHtcbiAgICAgICAgdmFyIF9maWVsZE5vZGUkYXJndW1lbnRzO1xuXG4gICAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgIGlmICghZmllbGREZWYpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm92aWRlZEFyZ3MgPSBuZXcgU2V0KCAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgKF9maWVsZE5vZGUkYXJndW1lbnRzID0gZmllbGROb2RlLmFyZ3VtZW50cykgPT09IG51bGwgfHxcbiAgICAgICAgICBfZmllbGROb2RlJGFyZ3VtZW50cyA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBfZmllbGROb2RlJGFyZ3VtZW50cy5tYXAoKGFyZykgPT4gYXJnLm5hbWUudmFsdWUpLFxuICAgICAgICApO1xuXG4gICAgICAgIGZvciAoY29uc3QgYXJnRGVmIG9mIGZpZWxkRGVmLmFyZ3MpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhcHJvdmlkZWRBcmdzLmhhcyhhcmdEZWYubmFtZSkgJiZcbiAgICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc1JlcXVpcmVkQXJndW1lbnQpKGFyZ0RlZilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ1R5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkoYXJnRGVmLnR5cGUpO1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIGBGaWVsZCBcIiR7ZmllbGREZWYubmFtZX1cIiBhcmd1bWVudCBcIiR7YXJnRGVmLm5hbWV9XCIgb2YgdHlwZSBcIiR7YXJnVHlwZVN0cn1cIiBpcyByZXF1aXJlZCwgYnV0IGl0IHdhcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogZmllbGROb2RlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBfc2NoZW1hJGdldERpcmVjdGl2ZXM7XG5cbiAgY29uc3QgcmVxdWlyZWRBcmdzTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZERpcmVjdGl2ZXMgPVxuICAgIChfc2NoZW1hJGdldERpcmVjdGl2ZXMgPVxuICAgICAgc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogc2NoZW1hLmdldERpcmVjdGl2ZXMoKSkgIT09IG51bGwgJiYgX3NjaGVtYSRnZXREaXJlY3RpdmVzICE9PSB2b2lkIDBcbiAgICAgID8gX3NjaGVtYSRnZXREaXJlY3RpdmVzXG4gICAgICA6IF9kaXJlY3RpdmVzLnNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZGVmaW5lZERpcmVjdGl2ZXMpIHtcbiAgICByZXF1aXJlZEFyZ3NNYXBbZGlyZWN0aXZlLm5hbWVdID0gKDAsIF9rZXlNYXAua2V5TWFwKShcbiAgICAgIGRpcmVjdGl2ZS5hcmdzLmZpbHRlcihfZGVmaW5pdGlvbi5pc1JlcXVpcmVkQXJndW1lbnQpLFxuICAgICAgKGFyZykgPT4gYXJnLm5hbWUsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGFzdERlZmluaXRpb25zID0gY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zO1xuXG4gIGZvciAoY29uc3QgZGVmIG9mIGFzdERlZmluaXRpb25zKSB7XG4gICAgaWYgKGRlZi5raW5kID09PSBfa2luZHMuS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTikge1xuICAgICAgdmFyIF9kZWYkYXJndW1lbnRzO1xuXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgY29uc3QgYXJnTm9kZXMgPVxuICAgICAgICAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfZGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICByZXF1aXJlZEFyZ3NNYXBbZGVmLm5hbWUudmFsdWVdID0gKDAsIF9rZXlNYXAua2V5TWFwKShcbiAgICAgICAgYXJnTm9kZXMuZmlsdGVyKGlzUmVxdWlyZWRBcmd1bWVudE5vZGUpLFxuICAgICAgICAoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmU6IHtcbiAgICAgIC8vIFZhbGlkYXRlIG9uIGxlYXZlIHRvIGFsbG93IGZvciBkZWVwZXIgZXJyb3JzIHRvIGFwcGVhciBmaXJzdC5cbiAgICAgIGxlYXZlKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgY29uc3QgcmVxdWlyZWRBcmdzID0gcmVxdWlyZWRBcmdzTWFwW2RpcmVjdGl2ZU5hbWVdO1xuXG4gICAgICAgIGlmIChyZXF1aXJlZEFyZ3MpIHtcbiAgICAgICAgICB2YXIgX2RpcmVjdGl2ZU5vZGUkYXJndW1lO1xuXG4gICAgICAgICAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgY29uc3QgYXJnTm9kZXMgPVxuICAgICAgICAgICAgKF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgX2RpcmVjdGl2ZU5vZGUkYXJndW1lICE9PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyBfZGlyZWN0aXZlTm9kZSRhcmd1bWVcbiAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICBjb25zdCBhcmdOb2RlTWFwID0gbmV3IFNldChhcmdOb2Rlcy5tYXAoKGFyZykgPT4gYXJnLm5hbWUudmFsdWUpKTtcblxuICAgICAgICAgIGZvciAoY29uc3QgW2FyZ05hbWUsIGFyZ0RlZl0gb2YgT2JqZWN0LmVudHJpZXMocmVxdWlyZWRBcmdzKSkge1xuICAgICAgICAgICAgaWYgKCFhcmdOb2RlTWFwLmhhcyhhcmdOYW1lKSkge1xuICAgICAgICAgICAgICBjb25zdCBhcmdUeXBlID0gKDAsIF9kZWZpbml0aW9uLmlzVHlwZSkoYXJnRGVmLnR5cGUpXG4gICAgICAgICAgICAgICAgPyAoMCwgX2luc3BlY3QuaW5zcGVjdCkoYXJnRGVmLnR5cGUpXG4gICAgICAgICAgICAgICAgOiAoMCwgX3ByaW50ZXIucHJpbnQpKGFyZ0RlZi50eXBlKTtcbiAgICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgICBgRGlyZWN0aXZlIFwiQCR7ZGlyZWN0aXZlTmFtZX1cIiBhcmd1bWVudCBcIiR7YXJnTmFtZX1cIiBvZiB0eXBlIFwiJHthcmdUeXBlfVwiIGlzIHJlcXVpcmVkLCBidXQgaXQgd2FzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub2RlczogZGlyZWN0aXZlTm9kZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNSZXF1aXJlZEFyZ3VtZW50Tm9kZShhcmcpIHtcbiAgcmV0dXJuIChcbiAgICBhcmcudHlwZS5raW5kID09PSBfa2luZHMuS2luZC5OT05fTlVMTF9UWVBFICYmIGFyZy5kZWZhdWx0VmFsdWUgPT0gbnVsbFxuICApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlNjYWxhckxlYWZzUnVsZSA9IFNjYWxhckxlYWZzUnVsZTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIFNjYWxhciBsZWFmc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyB2YWxpZCBvbmx5IGlmIGFsbCBsZWFmIGZpZWxkcyAoZmllbGRzIHdpdGhvdXRcbiAqIHN1YiBzZWxlY3Rpb25zKSBhcmUgb2Ygc2NhbGFyIG9yIGVudW0gdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIFNjYWxhckxlYWZzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQobm9kZSkge1xuICAgICAgY29uc3QgdHlwZSA9IGNvbnRleHQuZ2V0VHlwZSgpO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gbm9kZS5zZWxlY3Rpb25TZXQ7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNMZWFmVHlwZSkoKDAsIF9kZWZpbml0aW9uLmdldE5hbWVkVHlwZSkodHlwZSkpKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkTmFtZX1cIiBtdXN0IG5vdCBoYXZlIGEgc2VsZWN0aW9uIHNpbmNlIHR5cGUgXCIke3R5cGVTdHJ9XCIgaGFzIG5vIHN1YmZpZWxkcy5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiBzZWxlY3Rpb25TZXQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgICAgY29uc3QgdHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkTmFtZX1cIiBvZiB0eXBlIFwiJHt0eXBlU3RyfVwiIG11c3QgaGF2ZSBhIHNlbGVjdGlvbiBvZiBzdWJmaWVsZHMuIERpZCB5b3UgbWVhbiBcIiR7ZmllbGROYW1lfSB7IC4uLiB9XCI/YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlID0gU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfY29sbGVjdEZpZWxkcyA9IHJlcXVpcmUoJy4uLy4uL2V4ZWN1dGlvbi9jb2xsZWN0RmllbGRzLmpzJyk7XG5cbi8qKlxuICogU3Vic2NyaXB0aW9ucyBtdXN0IG9ubHkgaW5jbHVkZSBhIG5vbi1pbnRyb3NwZWN0aW9uIGZpZWxkLlxuICpcbiAqIEEgR3JhcGhRTCBzdWJzY3JpcHRpb24gaXMgdmFsaWQgb25seSBpZiBpdCBjb250YWlucyBhIHNpbmdsZSByb290IGZpZWxkIGFuZFxuICogdGhhdCByb290IGZpZWxkIGlzIG5vdCBhbiBpbnRyb3NwZWN0aW9uIGZpZWxkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1TaW5nbGUtcm9vdC1maWVsZFxuICovXG5mdW5jdGlvbiBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICAgICAgICBjb25zdCBvcGVyYXRpb25OYW1lID0gbm9kZS5uYW1lID8gbm9kZS5uYW1lLnZhbHVlIDogbnVsbDtcbiAgICAgICAgICBjb25zdCB2YXJpYWJsZVZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBjb250ZXh0LmdldERvY3VtZW50KCk7XG4gICAgICAgICAgY29uc3QgZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBkb2N1bWVudC5kZWZpbml0aW9ucykge1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gX2tpbmRzLktpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgICAgICAgICBmcmFnbWVudHNbZGVmaW5pdGlvbi5uYW1lLnZhbHVlXSA9IGRlZmluaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZmllbGRzID0gKDAsIF9jb2xsZWN0RmllbGRzLmNvbGxlY3RGaWVsZHMpKFxuICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgZnJhZ21lbnRzLFxuICAgICAgICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25UeXBlLFxuICAgICAgICAgICAgbm9kZS5zZWxlY3Rpb25TZXQsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChmaWVsZHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2VsZWN0aW9uTGlzdHMgPSBbLi4uZmllbGRzLnZhbHVlcygpXTtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhRmllbGRTZWxlY3Rpb25MaXN0cyA9IGZpZWxkU2VsZWN0aW9uTGlzdHMuc2xpY2UoMSk7XG4gICAgICAgICAgICBjb25zdCBleHRyYUZpZWxkU2VsZWN0aW9ucyA9IGV4dHJhRmllbGRTZWxlY3Rpb25MaXN0cy5mbGF0KCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSAhPSBudWxsXG4gICAgICAgICAgICAgICAgICA/IGBTdWJzY3JpcHRpb24gXCIke29wZXJhdGlvbk5hbWV9XCIgbXVzdCBzZWxlY3Qgb25seSBvbmUgdG9wIGxldmVsIGZpZWxkLmBcbiAgICAgICAgICAgICAgICAgIDogJ0Fub255bW91cyBTdWJzY3JpcHRpb24gbXVzdCBzZWxlY3Qgb25seSBvbmUgdG9wIGxldmVsIGZpZWxkLicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IGV4dHJhRmllbGRTZWxlY3Rpb25zLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoY29uc3QgZmllbGROb2RlcyBvZiBmaWVsZHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZmllbGROb2Rlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUuc3RhcnRzV2l0aCgnX18nKSkge1xuICAgICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbk5hbWUgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGBTdWJzY3JpcHRpb24gXCIke29wZXJhdGlvbk5hbWV9XCIgbXVzdCBub3Qgc2VsZWN0IGFuIGludHJvc3BlY3Rpb24gdG9wIGxldmVsIGZpZWxkLmBcbiAgICAgICAgICAgICAgICAgICAgOiAnQW5vbnltb3VzIFN1YnNjcmlwdGlvbiBtdXN0IG5vdCBzZWxlY3QgYW4gaW50cm9zcGVjdGlvbiB0b3AgbGV2ZWwgZmllbGQuJyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGZpZWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUgPSBVbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGU7XG5cbnZhciBfZ3JvdXBCeSA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvZ3JvdXBCeS5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBhcmd1bWVudCBkZWZpbml0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIE9iamVjdCBvciBJbnRlcmZhY2UgdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgZmllbGRzIGhhdmUgdW5pcXVlbHkgbmFtZWQgYXJndW1lbnRzLlxuICogQSBHcmFwaFFMIERpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgYXJndW1lbnRzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmVEZWZpbml0aW9uKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICAgIHZhciBfZGlyZWN0aXZlTm9kZSRhcmd1bWU7XG5cbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBhcmd1bWVudE5vZGVzID1cbiAgICAgICAgKF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgICAgICBfZGlyZWN0aXZlTm9kZSRhcmd1bWUgIT09IHZvaWQgMFxuICAgICAgICAgID8gX2RpcmVjdGl2ZU5vZGUkYXJndW1lXG4gICAgICAgICAgOiBbXTtcbiAgICAgIHJldHVybiBjaGVja0FyZ1VuaXF1ZW5lc3MoYEAke2RpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZX1gLCBhcmd1bWVudE5vZGVzKTtcbiAgICB9LFxuXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrQXJnVW5pcXVlbmVzc1BlckZpZWxkLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrQXJnVW5pcXVlbmVzc1BlckZpZWxkLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCh0eXBlTm9kZSkge1xuICAgIHZhciBfdHlwZU5vZGUkZmllbGRzO1xuXG4gICAgY29uc3QgdHlwZU5hbWUgPSB0eXBlTm9kZS5uYW1lLnZhbHVlOyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgIGNvbnN0IGZpZWxkTm9kZXMgPVxuICAgICAgKF90eXBlTm9kZSRmaWVsZHMgPSB0eXBlTm9kZS5maWVsZHMpICE9PSBudWxsICYmXG4gICAgICBfdHlwZU5vZGUkZmllbGRzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdHlwZU5vZGUkZmllbGRzXG4gICAgICAgIDogW107XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIGZpZWxkTm9kZXMpIHtcbiAgICAgIHZhciBfZmllbGREZWYkYXJndW1lbnRzO1xuXG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZERlZi5uYW1lLnZhbHVlOyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgICBjb25zdCBhcmd1bWVudE5vZGVzID1cbiAgICAgICAgKF9maWVsZERlZiRhcmd1bWVudHMgPSBmaWVsZERlZi5hcmd1bWVudHMpICE9PSBudWxsICYmXG4gICAgICAgIF9maWVsZERlZiRhcmd1bWVudHMgIT09IHZvaWQgMFxuICAgICAgICAgID8gX2ZpZWxkRGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICBjaGVja0FyZ1VuaXF1ZW5lc3MoYCR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfWAsIGFyZ3VtZW50Tm9kZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQXJnVW5pcXVlbmVzcyhwYXJlbnROYW1lLCBhcmd1bWVudE5vZGVzKSB7XG4gICAgY29uc3Qgc2VlbkFyZ3MgPSAoMCwgX2dyb3VwQnkuZ3JvdXBCeSkoXG4gICAgICBhcmd1bWVudE5vZGVzLFxuICAgICAgKGFyZykgPT4gYXJnLm5hbWUudmFsdWUsXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgW2FyZ05hbWUsIGFyZ05vZGVzXSBvZiBzZWVuQXJncykge1xuICAgICAgaWYgKGFyZ05vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgQXJndW1lbnQgXCIke3BhcmVudE5hbWV9KCR7YXJnTmFtZX06KVwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogYXJnTm9kZXMubWFwKChub2RlKSA9PiBub2RlLm5hbWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlID0gVW5pcXVlQXJndW1lbnROYW1lc1J1bGU7XG5cbnZhciBfZ3JvdXBCeSA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvZ3JvdXBCeS5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBvciBkaXJlY3RpdmUgaXMgb25seSB2YWxpZCBpZiBhbGwgc3VwcGxpZWQgYXJndW1lbnRzIGFyZVxuICogdW5pcXVlbHkgbmFtZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFyZ3VtZW50LU5hbWVzXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogY2hlY2tBcmdVbmlxdWVuZXNzLFxuICAgIERpcmVjdGl2ZTogY2hlY2tBcmdVbmlxdWVuZXNzLFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrQXJnVW5pcXVlbmVzcyhwYXJlbnROb2RlKSB7XG4gICAgdmFyIF9wYXJlbnROb2RlJGFyZ3VtZW50cztcblxuICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgIGNvbnN0IGFyZ3VtZW50Tm9kZXMgPVxuICAgICAgKF9wYXJlbnROb2RlJGFyZ3VtZW50cyA9IHBhcmVudE5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgICAgX3BhcmVudE5vZGUkYXJndW1lbnRzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfcGFyZW50Tm9kZSRhcmd1bWVudHNcbiAgICAgICAgOiBbXTtcbiAgICBjb25zdCBzZWVuQXJncyA9ICgwLCBfZ3JvdXBCeS5ncm91cEJ5KShcbiAgICAgIGFyZ3VtZW50Tm9kZXMsXG4gICAgICAoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSxcbiAgICApO1xuXG4gICAgZm9yIChjb25zdCBbYXJnTmFtZSwgYXJnTm9kZXNdIG9mIHNlZW5BcmdzKSB7XG4gICAgICBpZiAoYXJnTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgYXJndW1lbnQgbmFtZWQgXCIke2FyZ05hbWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IGFyZ05vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS5uYW1lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUgPSBVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIGRpcmVjdGl2ZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIGRpcmVjdGl2ZXMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IGtub3duRGlyZWN0aXZlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICByZXR1cm4ge1xuICAgIERpcmVjdGl2ZURlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKFxuICAgICAgICBzY2hlbWEgIT09IG51bGwgJiZcbiAgICAgICAgc2NoZW1hICE9PSB2b2lkIDAgJiZcbiAgICAgICAgc2NoZW1hLmdldERpcmVjdGl2ZShkaXJlY3RpdmVOYW1lKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYERpcmVjdGl2ZSBcIkAke2RpcmVjdGl2ZU5hbWV9XCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGJlIHJlZGVmaW5lZC5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZS5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrbm93bkRpcmVjdGl2ZU5hbWVzW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSBkaXJlY3RpdmUgbmFtZWQgXCJAJHtkaXJlY3RpdmVOYW1lfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBba25vd25EaXJlY3RpdmVOYW1lc1tkaXJlY3RpdmVOYW1lXSwgbm9kZS5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUgPSBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9wcmVkaWNhdGVzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlL2RpcmVjdGl2ZXMuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgZGlyZWN0aXZlIG5hbWVzIHBlciBsb2NhdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBub24tcmVwZWF0YWJsZSBkaXJlY3RpdmVzIGF0XG4gKiBhIGdpdmVuIGxvY2F0aW9uIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRGlyZWN0aXZlcy1BcmUtVW5pcXVlLVBlci1Mb2NhdGlvblxuICovXG5mdW5jdGlvbiBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgdW5pcXVlRGlyZWN0aXZlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZERpcmVjdGl2ZXMgPSBzY2hlbWFcbiAgICA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKClcbiAgICA6IF9kaXJlY3RpdmVzLnNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZGVmaW5lZERpcmVjdGl2ZXMpIHtcbiAgICB1bmlxdWVEaXJlY3RpdmVNYXBbZGlyZWN0aXZlLm5hbWVdID0gIWRpcmVjdGl2ZS5pc1JlcGVhdGFibGU7XG4gIH1cblxuICBjb25zdCBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKGNvbnN0IGRlZiBvZiBhc3REZWZpbml0aW9ucykge1xuICAgIGlmIChkZWYua2luZCA9PT0gX2tpbmRzLktpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIHVuaXF1ZURpcmVjdGl2ZU1hcFtkZWYubmFtZS52YWx1ZV0gPSAhZGVmLnJlcGVhdGFibGU7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2NoZW1hRGlyZWN0aXZlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHR5cGVEaXJlY3RpdmVzTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICAvLyBNYW55IGRpZmZlcmVudCBBU1Qgbm9kZXMgbWF5IGNvbnRhaW4gZGlyZWN0aXZlcy4gUmF0aGVyIHRoYW4gbGlzdGluZ1xuICAgIC8vIHRoZW0gYWxsLCBqdXN0IGxpc3RlbiBmb3IgZW50ZXJpbmcgYW55IG5vZGUsIGFuZCBjaGVjayB0byBzZWUgaWYgaXRcbiAgICAvLyBkZWZpbmVzIGFueSBkaXJlY3RpdmVzLlxuICAgIGVudGVyKG5vZGUpIHtcbiAgICAgIGlmICghKCdkaXJlY3RpdmVzJyBpbiBub2RlKSB8fCAhbm9kZS5kaXJlY3RpdmVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHNlZW5EaXJlY3RpdmVzO1xuXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NIRU1BX0RFRklOSVRJT04gfHxcbiAgICAgICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5TQ0hFTUFfRVhURU5TSU9OXG4gICAgICApIHtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSBzY2hlbWFEaXJlY3RpdmVzO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKDAsIF9wcmVkaWNhdGVzLmlzVHlwZURlZmluaXRpb25Ob2RlKShub2RlKSB8fFxuICAgICAgICAoMCwgX3ByZWRpY2F0ZXMuaXNUeXBlRXh0ZW5zaW9uTm9kZSkobm9kZSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSB0eXBlRGlyZWN0aXZlc01hcFt0eXBlTmFtZV07XG5cbiAgICAgICAgaWYgKHNlZW5EaXJlY3RpdmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0eXBlRGlyZWN0aXZlc01hcFt0eXBlTmFtZV0gPSBzZWVuRGlyZWN0aXZlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZW5EaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2Ygbm9kZS5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZTtcblxuICAgICAgICBpZiAodW5pcXVlRGlyZWN0aXZlTWFwW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgICAgaWYgKHNlZW5EaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmUgXCJAJHtkaXJlY3RpdmVOYW1lfVwiIGNhbiBvbmx5IGJlIHVzZWQgb25jZSBhdCB0aGlzIGxvY2F0aW9uLmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IFtzZWVuRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUgPSBVbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBlbnVtIHZhbHVlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGVudW0gdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFsdWVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZXhpc3RpbmdUeXBlTWFwID0gc2NoZW1hID8gc2NoZW1hLmdldFR5cGVNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IGtub3duVmFsdWVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgRW51bVR5cGVEZWZpbml0aW9uOiBjaGVja1ZhbHVlVW5pcXVlbmVzcyxcbiAgICBFbnVtVHlwZUV4dGVuc2lvbjogY2hlY2tWYWx1ZVVuaXF1ZW5lc3MsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tWYWx1ZVVuaXF1ZW5lc3Mobm9kZSkge1xuICAgIHZhciBfbm9kZSR2YWx1ZXM7XG5cbiAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgIGlmICgha25vd25WYWx1ZU5hbWVzW3R5cGVOYW1lXSkge1xuICAgICAga25vd25WYWx1ZU5hbWVzW3R5cGVOYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgIGNvbnN0IHZhbHVlTm9kZXMgPVxuICAgICAgKF9ub2RlJHZhbHVlcyA9IG5vZGUudmFsdWVzKSAhPT0gbnVsbCAmJiBfbm9kZSR2YWx1ZXMgIT09IHZvaWQgMFxuICAgICAgICA/IF9ub2RlJHZhbHVlc1xuICAgICAgICA6IFtdO1xuICAgIGNvbnN0IHZhbHVlTmFtZXMgPSBrbm93blZhbHVlTmFtZXNbdHlwZU5hbWVdO1xuXG4gICAgZm9yIChjb25zdCB2YWx1ZURlZiBvZiB2YWx1ZU5vZGVzKSB7XG4gICAgICBjb25zdCB2YWx1ZU5hbWUgPSB2YWx1ZURlZi5uYW1lLnZhbHVlO1xuICAgICAgY29uc3QgZXhpc3RpbmdUeXBlID0gZXhpc3RpbmdUeXBlTWFwW3R5cGVOYW1lXTtcblxuICAgICAgaWYgKFxuICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNFbnVtVHlwZSkoZXhpc3RpbmdUeXBlKSAmJlxuICAgICAgICBleGlzdGluZ1R5cGUuZ2V0VmFsdWUodmFsdWVOYW1lKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEVudW0gdmFsdWUgXCIke3R5cGVOYW1lfS4ke3ZhbHVlTmFtZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBleHRlbnNpb24uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IHZhbHVlRGVmLm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZXNbdmFsdWVOYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBFbnVtIHZhbHVlIFwiJHt0eXBlTmFtZX0uJHt2YWx1ZU5hbWV9XCIgY2FuIG9ubHkgYmUgZGVmaW5lZCBvbmNlLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBbdmFsdWVOYW1lc1t2YWx1ZU5hbWVdLCB2YWx1ZURlZi5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlTmFtZXNbdmFsdWVOYW1lXSA9IHZhbHVlRGVmLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlID0gVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgZmllbGQgZGVmaW5pdGlvbiBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBjb21wbGV4IHR5cGUgaXMgb25seSB2YWxpZCBpZiBhbGwgaXRzIGZpZWxkcyBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBrbm93bkZpZWxkTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0ZpZWxkVW5pcXVlbmVzcyhub2RlKSB7XG4gICAgdmFyIF9ub2RlJGZpZWxkcztcblxuICAgIGNvbnN0IHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKCFrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9IC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgY29uc3QgZmllbGROb2RlcyA9XG4gICAgICAoX25vZGUkZmllbGRzID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGUkZmllbGRzXG4gICAgICAgIDogW107XG4gICAgY29uc3QgZmllbGROYW1lcyA9IGtub3duRmllbGROYW1lc1t0eXBlTmFtZV07XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIGZpZWxkTm9kZXMpIHtcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkRGVmLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChoYXNGaWVsZChleGlzdGluZ1R5cGVNYXBbdHlwZU5hbWVdLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZpZWxkIFwiJHt0eXBlTmFtZX0uJHtmaWVsZE5hbWV9XCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGFsc28gYmUgZGVmaW5lZCBpbiB0aGlzIHR5cGUgZXh0ZW5zaW9uLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBmaWVsZERlZi5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZE5hbWVzW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRmllbGQgXCIke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX1cIiBjYW4gb25seSBiZSBkZWZpbmVkIG9uY2UuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IFtmaWVsZE5hbWVzW2ZpZWxkTmFtZV0sIGZpZWxkRGVmLm5hbWVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGROYW1lc1tmaWVsZE5hbWVdID0gZmllbGREZWYubmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzRmllbGQodHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChcbiAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKSh0eXBlKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpIHx8XG4gICAgKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKVxuICApIHtcbiAgICByZXR1cm4gdHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdICE9IG51bGw7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUgPSBVbmlxdWVGcmFnbWVudE5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBmcmFnbWVudHMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50LU5hbWUtVW5pcXVlbmVzc1xuICovXG5mdW5jdGlvbiBVbmlxdWVGcmFnbWVudE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IGtub3duRnJhZ21lbnROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogKCkgPT4gZmFsc2UsXG5cbiAgICBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3QgZnJhZ21lbnROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVGhlcmUgY2FuIGJlIG9ubHkgb25lIGZyYWdtZW50IG5hbWVkIFwiJHtmcmFnbWVudE5hbWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IFtrbm93bkZyYWdtZW50TmFtZXNbZnJhZ21lbnROYW1lXSwgbm9kZS5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duRnJhZ21lbnROYW1lc1tmcmFnbWVudE5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlID0gVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2ludmFyaWFudC5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBpbnB1dCBmaWVsZCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBpbnB1dCBvYmplY3QgdmFsdWUgaXMgb25seSB2YWxpZCBpZiBhbGwgc3VwcGxpZWQgZmllbGRzIGFyZVxuICogdW5pcXVlbHkgbmFtZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUlucHV0LU9iamVjdC1GaWVsZC1VbmlxdWVuZXNzXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBrbm93bk5hbWVTdGFjayA9IFtdO1xuICBsZXQga25vd25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT2JqZWN0VmFsdWU6IHtcbiAgICAgIGVudGVyKCkge1xuICAgICAgICBrbm93bk5hbWVTdGFjay5wdXNoKGtub3duTmFtZXMpO1xuICAgICAgICBrbm93bk5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIGxlYXZlKCkge1xuICAgICAgICBjb25zdCBwcmV2S25vd25OYW1lcyA9IGtub3duTmFtZVN0YWNrLnBvcCgpO1xuICAgICAgICBwcmV2S25vd25OYW1lcyB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcbiAgICAgICAga25vd25OYW1lcyA9IHByZXZLbm93bk5hbWVzO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25OYW1lc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSBpbnB1dCBmaWVsZCBuYW1lZCBcIiR7ZmllbGROYW1lfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBba25vd25OYW1lc1tmaWVsZE5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25OYW1lc1tmaWVsZE5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlID0gVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBvcGVyYXRpb24gbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBvcGVyYXRpb25zIGhhdmUgdW5pcXVlIG5hbWVzLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1PcGVyYXRpb24tTmFtZS1VbmlxdWVuZXNzXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IGtub3duT3BlcmF0aW9uTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IG5vZGUubmFtZTtcblxuICAgICAgaWYgKG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0pIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgVGhlcmUgY2FuIGJlIG9ubHkgb25lIG9wZXJhdGlvbiBuYW1lZCBcIiR7b3BlcmF0aW9uTmFtZS52YWx1ZX1cIi5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IFtcbiAgICAgICAgICAgICAgICAgIGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0sXG4gICAgICAgICAgICAgICAgICBvcGVyYXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga25vd25PcGVyYXRpb25OYW1lc1tvcGVyYXRpb25OYW1lLnZhbHVlXSA9IG9wZXJhdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBGcmFnbWVudERlZmluaXRpb246ICgpID0+IGZhbHNlLFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSA9IFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgb3BlcmF0aW9uIHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgaGFzIG9ubHkgb25lIHR5cGUgcGVyIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZE9wZXJhdGlvblR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZXhpc3RpbmdPcGVyYXRpb25UeXBlcyA9IHNjaGVtYVxuICAgID8ge1xuICAgICAgICBxdWVyeTogc2NoZW1hLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgICBtdXRhdGlvbjogc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgICAgICBzdWJzY3JpcHRpb246IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCksXG4gICAgICB9XG4gICAgOiB7fTtcbiAgcmV0dXJuIHtcbiAgICBTY2hlbWFEZWZpbml0aW9uOiBjaGVja09wZXJhdGlvblR5cGVzLFxuICAgIFNjaGVtYUV4dGVuc2lvbjogY2hlY2tPcGVyYXRpb25UeXBlcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja09wZXJhdGlvblR5cGVzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkb3BlcmF0aW9uVHlwZXM7XG5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgb3BlcmF0aW9uVHlwZXNOb2RlcyA9XG4gICAgICAoX25vZGUkb3BlcmF0aW9uVHlwZXMgPSBub2RlLm9wZXJhdGlvblR5cGVzKSAhPT0gbnVsbCAmJlxuICAgICAgX25vZGUkb3BlcmF0aW9uVHlwZXMgIT09IHZvaWQgMFxuICAgICAgICA/IF9ub2RlJG9wZXJhdGlvblR5cGVzXG4gICAgICAgIDogW107XG5cbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvblR5cGUgb2Ygb3BlcmF0aW9uVHlwZXNOb2Rlcykge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9uVHlwZS5vcGVyYXRpb247XG4gICAgICBjb25zdCBhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUgPSBkZWZpbmVkT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXTtcblxuICAgICAgaWYgKGV4aXN0aW5nT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUeXBlIGZvciAke29wZXJhdGlvbn0gYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBiZSByZWRlZmluZWQuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG9wZXJhdGlvblR5cGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGFscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgJHtvcGVyYXRpb259IHR5cGUgaW4gc2NoZW1hLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBbYWxyZWFkeURlZmluZWRPcGVyYXRpb25UeXBlLCBvcGVyYXRpb25UeXBlXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZWRPcGVyYXRpb25UeXBlc1tvcGVyYXRpb25dID0gb3BlcmF0aW9uVHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVUeXBlTmFtZXNSdWxlID0gVW5pcXVlVHlwZU5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIHR5cGVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5mdW5jdGlvbiBVbmlxdWVUeXBlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25UeXBlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICByZXR1cm4ge1xuICAgIFNjYWxhclR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIFVuaW9uVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgRW51bVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tUeXBlTmFtZShub2RlKSB7XG4gICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoc2NoZW1hICE9PSBudWxsICYmIHNjaGVtYSAhPT0gdm9pZCAwICYmIHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBUeXBlIFwiJHt0eXBlTmFtZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBkZWZpbml0aW9uLmAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUubmFtZSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa25vd25UeXBlTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSB0eXBlIG5hbWVkIFwiJHt0eXBlTmFtZX1cIi5gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiBba25vd25UeXBlTmFtZXNbdHlwZU5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBrbm93blR5cGVOYW1lc1t0eXBlTmFtZV0gPSBub2RlLm5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUgPSBVbmlxdWVWYXJpYWJsZU5hbWVzUnVsZTtcblxudmFyIF9ncm91cEJ5ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9ncm91cEJ5LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIHZhcmlhYmxlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFyaWFibGVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24ob3BlcmF0aW9uTm9kZSkge1xuICAgICAgdmFyIF9vcGVyYXRpb25Ob2RlJHZhcmlhYjtcblxuICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCB2YXJpYWJsZURlZmluaXRpb25zID1cbiAgICAgICAgKF9vcGVyYXRpb25Ob2RlJHZhcmlhYiA9IG9wZXJhdGlvbk5vZGUudmFyaWFibGVEZWZpbml0aW9ucykgIT09IG51bGwgJiZcbiAgICAgICAgX29wZXJhdGlvbk5vZGUkdmFyaWFiICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9vcGVyYXRpb25Ob2RlJHZhcmlhYlxuICAgICAgICAgIDogW107XG4gICAgICBjb25zdCBzZWVuVmFyaWFibGVEZWZpbml0aW9ucyA9ICgwLCBfZ3JvdXBCeS5ncm91cEJ5KShcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9ucyxcbiAgICAgICAgKG5vZGUpID0+IG5vZGUudmFyaWFibGUubmFtZS52YWx1ZSxcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgW3ZhcmlhYmxlTmFtZSwgdmFyaWFibGVOb2Rlc10gb2Ygc2VlblZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKHZhcmlhYmxlTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgdmFyaWFibGUgbmFtZWQgXCIkJHt2YXJpYWJsZU5hbWV9XCIuYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiB2YXJpYWJsZU5vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS52YXJpYWJsZS5uYW1lKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUgPSBWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZTtcblxudmFyIF9kaWRZb3VNZWFuID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLmpzJyk7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX2tleU1hcCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMva2V5TWFwLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfcHJpbnRlciA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByaW50ZXIuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbi8qKlxuICogVmFsdWUgbGl0ZXJhbHMgb2YgY29ycmVjdCB0eXBlXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhbHVlIGxpdGVyYWxzIGFyZSBvZiB0aGUgdHlwZVxuICogZXhwZWN0ZWQgYXQgdGhlaXIgcG9zaXRpb24uXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLVZhbHVlcy1vZi1Db3JyZWN0LVR5cGVcbiAqL1xuZnVuY3Rpb24gVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIExpc3RWYWx1ZShub2RlKSB7XG4gICAgICAvLyBOb3RlOiBUeXBlSW5mbyB3aWxsIHRyYXZlcnNlIGludG8gYSBsaXN0J3MgaXRlbSB0eXBlLCBzbyBsb29rIHRvIHRoZVxuICAgICAgLy8gcGFyZW50IGlucHV0IHR5cGUgdG8gY2hlY2sgaWYgaXQgaXMgYSBsaXN0LlxuICAgICAgY29uc3QgdHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROdWxsYWJsZVR5cGUpKFxuICAgICAgICBjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpLFxuICAgICAgKTtcblxuICAgICAgaWYgKCEoMCwgX2RlZmluaXRpb24uaXNMaXN0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBEb24ndCB0cmF2ZXJzZSBmdXJ0aGVyLlxuICAgICAgfVxuICAgIH0sXG5cbiAgICBPYmplY3RWYWx1ZShub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gKDAsIF9kZWZpbml0aW9uLmdldE5hbWVkVHlwZSkoY29udGV4dC5nZXRJbnB1dFR5cGUoKSk7XG5cbiAgICAgIGlmICghKDAsIF9kZWZpbml0aW9uLmlzSW5wdXRPYmplY3RUeXBlKSh0eXBlKSkge1xuICAgICAgICBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIERvbid0IHRyYXZlcnNlIGZ1cnRoZXIuXG4gICAgICB9IC8vIEVuc3VyZSBldmVyeSByZXF1aXJlZCBmaWVsZCBleGlzdHMuXG5cbiAgICAgIGNvbnN0IGZpZWxkTm9kZU1hcCA9ICgwLCBfa2V5TWFwLmtleU1hcCkoXG4gICAgICAgIG5vZGUuZmllbGRzLFxuICAgICAgICAoZmllbGQpID0+IGZpZWxkLm5hbWUudmFsdWUsXG4gICAgICApO1xuXG4gICAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIE9iamVjdC52YWx1ZXModHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgICAgY29uc3QgZmllbGROb2RlID0gZmllbGROb2RlTWFwW2ZpZWxkRGVmLm5hbWVdO1xuXG4gICAgICAgIGlmICghZmllbGROb2RlICYmICgwLCBfZGVmaW5pdGlvbi5pc1JlcXVpcmVkSW5wdXRGaWVsZCkoZmllbGREZWYpKSB7XG4gICAgICAgICAgY29uc3QgdHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShmaWVsZERlZi50eXBlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke3R5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiIG9mIHJlcXVpcmVkIHR5cGUgXCIke3R5cGVTdHJ9XCIgd2FzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgY29uc3QgcGFyZW50VHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKFxuICAgICAgICBjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IGNvbnRleHQuZ2V0SW5wdXRUeXBlKCk7XG5cbiAgICAgIGlmICghZmllbGRUeXBlICYmICgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkocGFyZW50VHlwZSkpIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICBub2RlLm5hbWUudmFsdWUsXG4gICAgICAgICAgT2JqZWN0LmtleXMocGFyZW50VHlwZS5nZXRGaWVsZHMoKSksXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZpZWxkIFwiJHtub2RlLm5hbWUudmFsdWV9XCIgaXMgbm90IGRlZmluZWQgYnkgdHlwZSBcIiR7cGFyZW50VHlwZS5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGlvbnMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgTnVsbFZhbHVlKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTm9uTnVsbFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIkeygwLCBfaW5zcGVjdC5pbnNwZWN0KShcbiAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICl9XCIsIGZvdW5kICR7KDAsIF9wcmludGVyLnByaW50KShub2RlKX0uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIEVudW1WYWx1ZTogKG5vZGUpID0+IGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSksXG4gICAgSW50VmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICAgIEZsb2F0VmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICAgIFN0cmluZ1ZhbHVlOiAobm9kZSkgPT4gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKSxcbiAgICBCb29sZWFuVmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICB9O1xufVxuLyoqXG4gKiBBbnkgdmFsdWUgbGl0ZXJhbCBtYXkgYmUgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhIFNjYWxhciwgZGVwZW5kaW5nIG9uXG4gKiB0aGF0IHNjYWxhciB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSkge1xuICAvLyBSZXBvcnQgYW55IGVycm9yIGF0IHRoZSBmdWxsIHR5cGUgZXhwZWN0ZWQgYnkgdGhlIGxvY2F0aW9uLlxuICBjb25zdCBsb2NhdGlvblR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gIGlmICghbG9jYXRpb25UeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdHlwZSA9ICgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKGxvY2F0aW9uVHlwZSk7XG5cbiAgaWYgKCEoMCwgX2RlZmluaXRpb24uaXNMZWFmVHlwZSkodHlwZSkpIHtcbiAgICBjb25zdCB0eXBlU3RyID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGxvY2F0aW9uVHlwZSk7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIke3R5cGVTdHJ9XCIsIGZvdW5kICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICBub2RlLFxuICAgICAgICApfS5gLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgIH0sXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFNjYWxhcnMgYW5kIEVudW1zIGRldGVybWluZSBpZiBhIGxpdGVyYWwgdmFsdWUgaXMgdmFsaWQgdmlhIHBhcnNlTGl0ZXJhbCgpLFxuICAvLyB3aGljaCBtYXkgdGhyb3cgb3IgcmV0dXJuIGFuIGludmFsaWQgdmFsdWUgdG8gaW5kaWNhdGUgZmFpbHVyZS5cblxuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gdHlwZS5wYXJzZUxpdGVyYWwoXG4gICAgICBub2RlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgLyogdmFyaWFibGVzICovXG4gICAgKTtcblxuICAgIGlmIChwYXJzZVJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0eXBlU3RyID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKGxvY2F0aW9uVHlwZSk7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIke3R5cGVTdHJ9XCIsIGZvdW5kICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgKX0uYCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgdHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShsb2NhdGlvblR5cGUpO1xuXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIke3R5cGVTdHJ9XCIsIGZvdW5kICR7KDAsIF9wcmludGVyLnByaW50KShcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgKX07IGAgKyBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUgPSBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9wcmludGVyID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxudmFyIF90eXBlRnJvbUFTVCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIFZhcmlhYmxlcyBhcmUgaW5wdXQgdHlwZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHRoZSB2YXJpYWJsZXMgaXQgZGVmaW5lcyBhcmUgb2ZcbiAqIGlucHV0IHR5cGVzIChzY2FsYXIsIGVudW0sIG9yIGlucHV0IG9iamVjdCkuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLVZhcmlhYmxlcy1BcmUtSW5wdXQtVHlwZXNcbiAqL1xuZnVuY3Rpb24gVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgICAgIGNvbnRleHQuZ2V0U2NoZW1hKCksXG4gICAgICAgIG5vZGUudHlwZSxcbiAgICAgICk7XG5cbiAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgISgwLCBfZGVmaW5pdGlvbi5pc0lucHV0VHlwZSkodHlwZSkpIHtcbiAgICAgICAgY29uc3QgdmFyaWFibGVOYW1lID0gbm9kZS52YXJpYWJsZS5uYW1lLnZhbHVlO1xuICAgICAgICBjb25zdCB0eXBlTmFtZSA9ICgwLCBfcHJpbnRlci5wcmludCkobm9kZS50eXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVmFyaWFibGUgXCIkJHt2YXJpYWJsZU5hbWV9XCIgY2Fubm90IGJlIG5vbi1pbnB1dCB0eXBlIFwiJHt0eXBlTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZS50eXBlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlID0gVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX3R5cGVDb21wYXJhdG9ycyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMuanMnKTtcblxudmFyIF90eXBlRnJvbUFTVCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIFZhcmlhYmxlcyBpbiBhbGxvd2VkIHBvc2l0aW9uXG4gKlxuICogVmFyaWFibGUgdXNhZ2VzIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBhcmd1bWVudHMgdGhleSBhcmUgcGFzc2VkIHRvLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGUtVXNhZ2VzLWFyZS1BbGxvd2VkXG4gKi9cbmZ1bmN0aW9uIFZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZShjb250ZXh0KSB7XG4gIGxldCB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyKCkge1xuICAgICAgICB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSwgdHlwZSwgZGVmYXVsdFZhbHVlIH0gb2YgdXNhZ2VzKSB7XG4gICAgICAgICAgY29uc3QgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICBjb25zdCB2YXJEZWYgPSB2YXJEZWZNYXBbdmFyTmFtZV07XG5cbiAgICAgICAgICBpZiAodmFyRGVmICYmIHR5cGUpIHtcbiAgICAgICAgICAgIC8vIEEgdmFyIHR5cGUgaXMgYWxsb3dlZCBpZiBpdCBpcyB0aGUgc2FtZSBvciBtb3JlIHN0cmljdCAoZS5nLiBpc1xuICAgICAgICAgICAgLy8gYSBzdWJ0eXBlIG9mKSB0aGFuIHRoZSBleHBlY3RlZCB0eXBlLiBJdCBjYW4gYmUgbW9yZSBzdHJpY3QgaWZcbiAgICAgICAgICAgIC8vIHRoZSB2YXJpYWJsZSB0eXBlIGlzIG5vbi1udWxsIHdoZW4gdGhlIGV4cGVjdGVkIHR5cGUgaXMgbnVsbGFibGUuXG4gICAgICAgICAgICAvLyBJZiBib3RoIGFyZSBsaXN0IHR5cGVzLCB0aGUgdmFyaWFibGUgaXRlbSB0eXBlIGNhbiBiZSBtb3JlIHN0cmljdFxuICAgICAgICAgICAgLy8gdGhhbiB0aGUgZXhwZWN0ZWQgaXRlbSB0eXBlIChjb250cmF2YXJpYW50KS5cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgICBjb25zdCB2YXJUeXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoc2NoZW1hLCB2YXJEZWYudHlwZSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdmFyVHlwZSAmJlxuICAgICAgICAgICAgICAhYWxsb3dlZFZhcmlhYmxlVXNhZ2UoXG4gICAgICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgICAgIHZhclR5cGUsXG4gICAgICAgICAgICAgICAgdmFyRGVmLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodmFyVHlwZSk7XG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBvZiB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHVzZWQgaW4gcG9zaXRpb24gZXhwZWN0aW5nIHR5cGUgXCIke3R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IFt2YXJEZWYsIG5vZGVdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuXG4gICAgVmFyaWFibGVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhckRlZk1hcFtub2RlLnZhcmlhYmxlLm5hbWUudmFsdWVdID0gbm9kZTtcbiAgICB9LFxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFsbG93ZWQgaW4gdGhlIGxvY2F0aW9uIGl0IHdhcyBmb3VuZCxcbiAqIHdoaWNoIGluY2x1ZGVzIGNvbnNpZGVyaW5nIGlmIGRlZmF1bHQgdmFsdWVzIGV4aXN0IGZvciBlaXRoZXIgdGhlIHZhcmlhYmxlXG4gKiBvciB0aGUgbG9jYXRpb24gYXQgd2hpY2ggaXQgaXMgbG9jYXRlZC5cbiAqL1xuXG5mdW5jdGlvbiBhbGxvd2VkVmFyaWFibGVVc2FnZShcbiAgc2NoZW1hLFxuICB2YXJUeXBlLFxuICB2YXJEZWZhdWx0VmFsdWUsXG4gIGxvY2F0aW9uVHlwZSxcbiAgbG9jYXRpb25EZWZhdWx0VmFsdWUsXG4pIHtcbiAgaWYgKFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShsb2NhdGlvblR5cGUpICYmXG4gICAgISgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh2YXJUeXBlKVxuICApIHtcbiAgICBjb25zdCBoYXNOb25OdWxsVmFyaWFibGVEZWZhdWx0VmFsdWUgPVxuICAgICAgdmFyRGVmYXVsdFZhbHVlICE9IG51bGwgJiYgdmFyRGVmYXVsdFZhbHVlLmtpbmQgIT09IF9raW5kcy5LaW5kLk5VTEw7XG4gICAgY29uc3QgaGFzTG9jYXRpb25EZWZhdWx0VmFsdWUgPSBsb2NhdGlvbkRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKCFoYXNOb25OdWxsVmFyaWFibGVEZWZhdWx0VmFsdWUgJiYgIWhhc0xvY2F0aW9uRGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgbnVsbGFibGVMb2NhdGlvblR5cGUgPSBsb2NhdGlvblR5cGUub2ZUeXBlO1xuICAgIHJldHVybiAoMCwgX3R5cGVDb21wYXJhdG9ycy5pc1R5cGVTdWJUeXBlT2YpKFxuICAgICAgc2NoZW1hLFxuICAgICAgdmFyVHlwZSxcbiAgICAgIG51bGxhYmxlTG9jYXRpb25UeXBlLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKDAsIF90eXBlQ29tcGFyYXRvcnMuaXNUeXBlU3ViVHlwZU9mKShzY2hlbWEsIHZhclR5cGUsIGxvY2F0aW9uVHlwZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9EZXByZWNhdGVkQ3VzdG9tUnVsZSA9IE5vRGVwcmVjYXRlZEN1c3RvbVJ1bGU7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbi8qKlxuICogTm8gZGVwcmVjYXRlZFxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzZWxlY3RlZCBmaWVsZHMgYW5kIGFsbCB1c2VkIGVudW0gdmFsdWVzIGhhdmUgbm90IGJlZW5cbiAqIGRlcHJlY2F0ZWQuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMXG4gKiBTcGVjaWZpY2F0aW9uLiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgcnVsZSBpcyBkZXRlY3Rpb24gb2YgZGVwcmVjYXRlZCB1c2FnZXMgYW5kIG5vdFxuICogbmVjZXNzYXJpbHkgdG8gZm9yYmlkIHRoZWlyIHVzZSB3aGVuIHF1ZXJ5aW5nIGEgc2VydmljZS5cbiAqL1xuZnVuY3Rpb24gTm9EZXByZWNhdGVkQ3VzdG9tUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQobm9kZSkge1xuICAgICAgY29uc3QgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICBjb25zdCBkZXByZWNhdGlvblJlYXNvbiA9XG4gICAgICAgIGZpZWxkRGVmID09PSBudWxsIHx8IGZpZWxkRGVmID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogZmllbGREZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChmaWVsZERlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgcGFyZW50VHlwZSAhPSBudWxsIHx8ICgwLCBfaW52YXJpYW50LmludmFyaWFudCkoZmFsc2UpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGUgZmllbGQgJHtwYXJlbnRUeXBlLm5hbWV9LiR7ZmllbGREZWYubmFtZX0gaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgQXJndW1lbnQobm9kZSkge1xuICAgICAgY29uc3QgYXJnRGVmID0gY29udGV4dC5nZXRBcmd1bWVudCgpO1xuICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICBhcmdEZWYgPT09IG51bGwgfHwgYXJnRGVmID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogYXJnRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICBpZiAoYXJnRGVmICYmIGRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlRGVmID0gY29udGV4dC5nZXREaXJlY3RpdmUoKTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlRGVmICE9IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRGlyZWN0aXZlIFwiQCR7ZGlyZWN0aXZlRGVmLm5hbWV9XCIgYXJndW1lbnQgXCIke2FyZ0RlZi5uYW1lfVwiIGlzIGRlcHJlY2F0ZWQuICR7ZGVwcmVjYXRpb25SZWFzb259YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgICBjb25zdCBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcbiAgICAgICAgICAocGFyZW50VHlwZSAhPSBudWxsICYmIGZpZWxkRGVmICE9IG51bGwpIHx8XG4gICAgICAgICAgICAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke3BhcmVudFR5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiIGFyZ3VtZW50IFwiJHthcmdEZWYubmFtZX1cIiBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBPYmplY3RGaWVsZChub2RlKSB7XG4gICAgICBjb25zdCBpbnB1dE9iamVjdERlZiA9ICgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKFxuICAgICAgICBjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpLFxuICAgICAgKTtcblxuICAgICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkoaW5wdXRPYmplY3REZWYpKSB7XG4gICAgICAgIGNvbnN0IGlucHV0RmllbGREZWYgPSBpbnB1dE9iamVjdERlZi5nZXRGaWVsZHMoKVtub2RlLm5hbWUudmFsdWVdO1xuICAgICAgICBjb25zdCBkZXByZWNhdGlvblJlYXNvbiA9XG4gICAgICAgICAgaW5wdXRGaWVsZERlZiA9PT0gbnVsbCB8fCBpbnB1dEZpZWxkRGVmID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IGlucHV0RmllbGREZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgICAgaWYgKGRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgVGhlIGlucHV0IGZpZWxkICR7aW5wdXRPYmplY3REZWYubmFtZX0uJHtpbnB1dEZpZWxkRGVmLm5hbWV9IGlzIGRlcHJlY2F0ZWQuICR7ZGVwcmVjYXRpb25SZWFzb259YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIEVudW1WYWx1ZShub2RlKSB7XG4gICAgICBjb25zdCBlbnVtVmFsdWVEZWYgPSBjb250ZXh0LmdldEVudW1WYWx1ZSgpO1xuICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICBlbnVtVmFsdWVEZWYgPT09IG51bGwgfHwgZW51bVZhbHVlRGVmID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogZW51bVZhbHVlRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICBpZiAoZW51bVZhbHVlRGVmICYmIGRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZW51bVR5cGVEZWYgPSAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKShcbiAgICAgICAgICBjb250ZXh0LmdldElucHV0VHlwZSgpLFxuICAgICAgICApO1xuICAgICAgICBlbnVtVHlwZURlZiAhPSBudWxsIHx8ICgwLCBfaW52YXJpYW50LmludmFyaWFudCkoZmFsc2UpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGUgZW51bSB2YWx1ZSBcIiR7ZW51bVR5cGVEZWYubmFtZX0uJHtlbnVtVmFsdWVEZWYubmFtZX1cIiBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZSA9IE5vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX2ludHJvc3BlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi8uLi90eXBlL2ludHJvc3BlY3Rpb24uanMnKTtcblxuLyoqXG4gKiBQcm9oaWJpdCBpbnRyb3NwZWN0aW9uIHF1ZXJpZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBub3QgZmllbGRzIHRoYXRcbiAqIHJldHVybiBhbiBpbnRyb3NwZWN0aW9uIHR5cGUuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZVxuICogR3JhcGhRTCBTcGVjaWZpY2F0aW9uLiBUaGlzIHJ1bGUgZWZmZWN0aXZlbHkgZGlzYWJsZXMgaW50cm9zcGVjdGlvbiwgd2hpY2hcbiAqIGRvZXMgbm90IHJlZmxlY3QgYmVzdCBwcmFjdGljZXMgYW5kIHNob3VsZCBvbmx5IGJlIGRvbmUgaWYgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIE5vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKShjb250ZXh0LmdldFR5cGUoKSk7XG5cbiAgICAgIGlmICh0eXBlICYmICgwLCBfaW50cm9zcGVjdGlvbi5pc0ludHJvc3BlY3Rpb25UeXBlKSh0eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBHcmFwaFFMIGludHJvc3BlY3Rpb24gaGFzIGJlZW4gZGlzYWJsZWQsIGJ1dCB0aGUgcmVxdWVzdGVkIHF1ZXJ5IGNvbnRhaW5lZCB0aGUgZmllbGQgXCIke25vZGUubmFtZS52YWx1ZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnNwZWNpZmllZFNETFJ1bGVzID0gZXhwb3J0cy5zcGVjaWZpZWRSdWxlcyA9IHZvaWQgMDtcblxudmFyIF9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLmpzJyk7XG5cbnZhciBfRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlLmpzJyk7XG5cbnZhciBfRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLmpzJyk7XG5cbnZhciBfS25vd25Bcmd1bWVudE5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvS25vd25Bcmd1bWVudE5hbWVzUnVsZS5qcycpO1xuXG52YXIgX0tub3duRGlyZWN0aXZlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0tub3duRGlyZWN0aXZlc1J1bGUuanMnKTtcblxudmFyIF9Lbm93bkZyYWdtZW50TmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Lbm93bkZyYWdtZW50TmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfS25vd25UeXBlTmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Lbm93blR5cGVOYW1lc1J1bGUuanMnKTtcblxudmFyIF9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUuanMnKTtcblxudmFyIF9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL0xvbmVTY2hlbWFEZWZpbml0aW9uUnVsZS5qcycpO1xuXG52YXIgX05vRnJhZ21lbnRDeWNsZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Ob0ZyYWdtZW50Q3ljbGVzUnVsZS5qcycpO1xuXG52YXIgX05vVW5kZWZpbmVkVmFyaWFibGVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLmpzJyk7XG5cbnZhciBfTm9VbnVzZWRGcmFnbWVudHNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9Ob1VudXNlZEZyYWdtZW50c1J1bGUuanMnKTtcblxudmFyIF9Ob1VudXNlZFZhcmlhYmxlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL05vVW51c2VkVmFyaWFibGVzUnVsZS5qcycpO1xuXG52YXIgX092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZS5qcycpO1xuXG52YXIgX1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLmpzJyk7XG5cbnZhciBfUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLmpzJyk7XG5cbnZhciBfUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLmpzJyk7XG5cbnZhciBfU2NhbGFyTGVhZnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TY2FsYXJMZWFmc1J1bGUuanMnKTtcblxudmFyIF9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVBcmd1bWVudE5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlQXJndW1lbnROYW1lc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUuanMnKTtcblxudmFyIF9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZS5qcycpO1xuXG52YXIgX1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUuanMnKTtcblxudmFyIF9VbmlxdWVUeXBlTmFtZXNSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9VbmlxdWVUeXBlTmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1VuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlLmpzJyk7XG5cbnZhciBfVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1ZhbHVlc09mQ29ycmVjdFR5cGVSdWxlLmpzJyk7XG5cbnZhciBfVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLmpzJyk7XG5cbnZhciBfVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9WYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUuanMnKTtcblxuLy8gU3BlYyBTZWN0aW9uOiBcIkV4ZWN1dGFibGUgRGVmaW5pdGlvbnNcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkZpZWxkIFNlbGVjdGlvbnMgb24gT2JqZWN0cywgSW50ZXJmYWNlcywgYW5kIFVuaW9ucyBUeXBlc1wiXG4vLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnRzIG9uIENvbXBvc2l0ZSBUeXBlc1wiXG4vLyBTcGVjIFNlY3Rpb246IFwiQXJndW1lbnQgTmFtZXNcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkRpcmVjdGl2ZXMgQXJlIERlZmluZWRcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IHNwcmVhZCB0YXJnZXQgZGVmaW5lZFwiXG4vLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnQgU3ByZWFkIFR5cGUgRXhpc3RlbmNlXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJMb25lIEFub255bW91cyBPcGVyYXRpb25cIlxuLy8gU0RMLXNwZWNpZmljIHZhbGlkYXRpb24gcnVsZXNcbi8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudHMgbXVzdCBub3QgZm9ybSBjeWNsZXNcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkFsbCBWYXJpYWJsZSBVc2VkIERlZmluZWRcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBtdXN0IGJlIHVzZWRcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkFsbCBWYXJpYWJsZXMgVXNlZFwiXG4vLyBTcGVjIFNlY3Rpb246IFwiRmllbGQgU2VsZWN0aW9uIE1lcmdpbmdcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IHNwcmVhZCBpcyBwb3NzaWJsZVwiXG4vLyBTcGVjIFNlY3Rpb246IFwiQXJndW1lbnQgT3B0aW9uYWxpdHlcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIkxlYWYgRmllbGQgU2VsZWN0aW9uc1wiXG4vLyBTcGVjIFNlY3Rpb246IFwiU3Vic2NyaXB0aW9ucyB3aXRoIFNpbmdsZSBSb290IEZpZWxkXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJBcmd1bWVudCBVbmlxdWVuZXNzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJEaXJlY3RpdmVzIEFyZSBVbmlxdWUgUGVyIExvY2F0aW9uXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudCBOYW1lIFVuaXF1ZW5lc3NcIlxuLy8gU3BlYyBTZWN0aW9uOiBcIklucHV0IE9iamVjdCBGaWVsZCBVbmlxdWVuZXNzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJPcGVyYXRpb24gTmFtZSBVbmlxdWVuZXNzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJWYXJpYWJsZSBVbmlxdWVuZXNzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJWYWx1ZSBUeXBlIENvcnJlY3RuZXNzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJWYXJpYWJsZXMgYXJlIElucHV0IFR5cGVzXCJcbi8vIFNwZWMgU2VjdGlvbjogXCJBbGwgVmFyaWFibGUgVXNhZ2VzIEFyZSBBbGxvd2VkXCJcblxuLyoqXG4gKiBUaGlzIHNldCBpbmNsdWRlcyBhbGwgdmFsaWRhdGlvbiBydWxlcyBkZWZpbmVkIGJ5IHRoZSBHcmFwaFFMIHNwZWMuXG4gKlxuICogVGhlIG9yZGVyIG9mIHRoZSBydWxlcyBpbiB0aGlzIGxpc3QgaGFzIGJlZW4gYWRqdXN0ZWQgdG8gbGVhZCB0byB0aGVcbiAqIG1vc3QgY2xlYXIgb3V0cHV0IHdoZW4gZW5jb3VudGVyaW5nIG11bHRpcGxlIHZhbGlkYXRpb24gZXJyb3JzLlxuICovXG5jb25zdCBzcGVjaWZpZWRSdWxlcyA9IE9iamVjdC5mcmVlemUoW1xuICBfRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZS5FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLFxuICBfVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLlVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZSxcbiAgX0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLkxvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLFxuICBfU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZS5TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLFxuICBfS25vd25UeXBlTmFtZXNSdWxlLktub3duVHlwZU5hbWVzUnVsZSxcbiAgX0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLkZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLFxuICBfVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUuVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUsXG4gIF9TY2FsYXJMZWFmc1J1bGUuU2NhbGFyTGVhZnNSdWxlLFxuICBfRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUuRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUsXG4gIF9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5VbmlxdWVGcmFnbWVudE5hbWVzUnVsZSxcbiAgX0tub3duRnJhZ21lbnROYW1lc1J1bGUuS25vd25GcmFnbWVudE5hbWVzUnVsZSxcbiAgX05vVW51c2VkRnJhZ21lbnRzUnVsZS5Ob1VudXNlZEZyYWdtZW50c1J1bGUsXG4gIF9Qb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUuUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLFxuICBfTm9GcmFnbWVudEN5Y2xlc1J1bGUuTm9GcmFnbWVudEN5Y2xlc1J1bGUsXG4gIF9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZS5VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZSxcbiAgX05vVW5kZWZpbmVkVmFyaWFibGVzUnVsZS5Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUsXG4gIF9Ob1VudXNlZFZhcmlhYmxlc1J1bGUuTm9VbnVzZWRWYXJpYWJsZXNSdWxlLFxuICBfS25vd25EaXJlY3RpdmVzUnVsZS5Lbm93bkRpcmVjdGl2ZXNSdWxlLFxuICBfVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5VbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLFxuICBfS25vd25Bcmd1bWVudE5hbWVzUnVsZS5Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLFxuICBfVW5pcXVlQXJndW1lbnROYW1lc1J1bGUuVW5pcXVlQXJndW1lbnROYW1lc1J1bGUsXG4gIF9WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZS5WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZSxcbiAgX1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLFxuICBfVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLlZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZSxcbiAgX092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLk92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLFxuICBfVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZS5VbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlLFxuXSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydHMuc3BlY2lmaWVkUnVsZXMgPSBzcGVjaWZpZWRSdWxlcztcbmNvbnN0IHNwZWNpZmllZFNETFJ1bGVzID0gT2JqZWN0LmZyZWV6ZShbXG4gIF9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUuTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLFxuICBfVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlLlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSxcbiAgX1VuaXF1ZVR5cGVOYW1lc1J1bGUuVW5pcXVlVHlwZU5hbWVzUnVsZSxcbiAgX1VuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZS5VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUsXG4gIF9VbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUuVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLFxuICBfVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlLlVuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZSxcbiAgX1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUsXG4gIF9Lbm93blR5cGVOYW1lc1J1bGUuS25vd25UeXBlTmFtZXNSdWxlLFxuICBfS25vd25EaXJlY3RpdmVzUnVsZS5Lbm93bkRpcmVjdGl2ZXNSdWxlLFxuICBfVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5VbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLFxuICBfUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUuUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUsXG4gIF9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUsXG4gIF9VbmlxdWVBcmd1bWVudE5hbWVzUnVsZS5VbmlxdWVBcmd1bWVudE5hbWVzUnVsZSxcbiAgX1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUuVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSxcbiAgX1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlLFxuXSk7XG5leHBvcnRzLnNwZWNpZmllZFNETFJ1bGVzID0gc3BlY2lmaWVkU0RMUnVsZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuYXNzZXJ0VmFsaWRTREwgPSBhc3NlcnRWYWxpZFNETDtcbmV4cG9ydHMuYXNzZXJ0VmFsaWRTRExFeHRlbnNpb24gPSBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbjtcbmV4cG9ydHMudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbmV4cG9ydHMudmFsaWRhdGVTREwgPSB2YWxpZGF0ZVNETDtcblxudmFyIF9kZXZBc3NlcnQgPSByZXF1aXJlKCcuLi9qc3V0aWxzL2RldkFzc2VydC5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX3Zpc2l0b3IgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS92aXNpdG9yLmpzJyk7XG5cbnZhciBfdmFsaWRhdGUgPSByZXF1aXJlKCcuLi90eXBlL3ZhbGlkYXRlLmpzJyk7XG5cbnZhciBfVHlwZUluZm8gPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvVHlwZUluZm8uanMnKTtcblxudmFyIF9zcGVjaWZpZWRSdWxlcyA9IHJlcXVpcmUoJy4vc3BlY2lmaWVkUnVsZXMuanMnKTtcblxudmFyIF9WYWxpZGF0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4vVmFsaWRhdGlvbkNvbnRleHQuanMnKTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIlZhbGlkYXRpb25cIiBzZWN0aW9uIG9mIHRoZSBzcGVjLlxuICpcbiAqIFZhbGlkYXRpb24gcnVucyBzeW5jaHJvbm91c2x5LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgZW5jb3VudGVyZWQgZXJyb3JzLCBvclxuICogYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQgYW5kIHRoZSBkb2N1bWVudCBpcyB2YWxpZC5cbiAqXG4gKiBBIGxpc3Qgb2Ygc3BlY2lmaWMgdmFsaWRhdGlvbiBydWxlcyBtYXkgYmUgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgdGhlXG4gKiBkZWZhdWx0IGxpc3Qgb2YgcnVsZXMgZGVmaW5lZCBieSB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBFYWNoIHZhbGlkYXRpb24gcnVsZXMgaXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmlzaXRvclxuICogKHNlZSB0aGUgbGFuZ3VhZ2UvdmlzaXRvciBBUEkpLiBWaXNpdG9yIG1ldGhvZHMgYXJlIGV4cGVjdGVkIHRvIHJldHVyblxuICogR3JhcGhRTEVycm9ycywgb3IgQXJyYXlzIG9mIEdyYXBoUUxFcnJvcnMgd2hlbiBpbnZhbGlkLlxuICpcbiAqIFZhbGlkYXRlIHdpbGwgc3RvcCB2YWxpZGF0aW9uIGFmdGVyIGEgYG1heEVycm9yc2AgbGltaXQgaGFzIGJlZW4gcmVhY2hlZC5cbiAqIEF0dGFja2VycyBjYW4gc2VuZCBwYXRob2xvZ2ljYWxseSBpbnZhbGlkIHF1ZXJpZXMgdG8gaW5kdWNlIGEgRG9TIGF0dGFjayxcbiAqIHNvIGJ5IGRlZmF1bHQgYG1heEVycm9yc2Agc2V0IHRvIDEwMCBlcnJvcnMuXG4gKlxuICogT3B0aW9uYWxseSBhIGN1c3RvbSBUeXBlSW5mbyBpbnN0YW5jZSBtYXkgYmUgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgb25lXG4gKiB3aWxsIGJlIGNyZWF0ZWQgZnJvbSB0aGUgcHJvdmlkZWQgc2NoZW1hLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZShcbiAgc2NoZW1hLFxuICBkb2N1bWVudEFTVCxcbiAgcnVsZXMgPSBfc3BlY2lmaWVkUnVsZXMuc3BlY2lmaWVkUnVsZXMsXG4gIG9wdGlvbnMsXG4gIC8qKiBAZGVwcmVjYXRlZCB3aWxsIGJlIHJlbW92ZWQgaW4gMTcuMC4wICovXG4gIHR5cGVJbmZvID0gbmV3IF9UeXBlSW5mby5UeXBlSW5mbyhzY2hlbWEpLFxuKSB7XG4gIHZhciBfb3B0aW9ucyRtYXhFcnJvcnM7XG5cbiAgY29uc3QgbWF4RXJyb3JzID1cbiAgICAoX29wdGlvbnMkbWF4RXJyb3JzID1cbiAgICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhFcnJvcnMpICE9PVxuICAgICAgbnVsbCAmJiBfb3B0aW9ucyRtYXhFcnJvcnMgIT09IHZvaWQgMFxuICAgICAgPyBfb3B0aW9ucyRtYXhFcnJvcnNcbiAgICAgIDogMTAwO1xuICBkb2N1bWVudEFTVCB8fCAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKGZhbHNlLCAnTXVzdCBwcm92aWRlIGRvY3VtZW50LicpOyAvLyBJZiB0aGUgc2NoZW1hIHVzZWQgZm9yIHZhbGlkYXRpb24gaXMgaW52YWxpZCwgdGhyb3cgYW4gZXJyb3IuXG5cbiAgKDAsIF92YWxpZGF0ZS5hc3NlcnRWYWxpZFNjaGVtYSkoc2NoZW1hKTtcbiAgY29uc3QgYWJvcnRPYmogPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgY29uc3QgZXJyb3JzID0gW107XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgX1ZhbGlkYXRpb25Db250ZXh0LlZhbGlkYXRpb25Db250ZXh0KFxuICAgIHNjaGVtYSxcbiAgICBkb2N1bWVudEFTVCxcbiAgICB0eXBlSW5mbyxcbiAgICAoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID49IG1heEVycm9ycykge1xuICAgICAgICBlcnJvcnMucHVzaChcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAnVG9vIG1hbnkgdmFsaWRhdGlvbiBlcnJvcnMsIGVycm9yIGxpbWl0IHJlYWNoZWQuIFZhbGlkYXRpb24gYWJvcnRlZC4nLFxuICAgICAgICAgICksXG4gICAgICAgICk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhyb3ctbGl0ZXJhbFxuXG4gICAgICAgIHRocm93IGFib3J0T2JqO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgfSxcbiAgKTsgLy8gVGhpcyB1c2VzIGEgc3BlY2lhbGl6ZWQgdmlzaXRvciB3aGljaCBydW5zIG11bHRpcGxlIHZpc2l0b3JzIGluIHBhcmFsbGVsLFxuICAvLyB3aGlsZSBtYWludGFpbmluZyB0aGUgdmlzaXRvciBza2lwIGFuZCBicmVhayBBUEkuXG5cbiAgY29uc3QgdmlzaXRvciA9ICgwLCBfdmlzaXRvci52aXNpdEluUGFyYWxsZWwpKFxuICAgIHJ1bGVzLm1hcCgocnVsZSkgPT4gcnVsZShjb250ZXh0KSksXG4gICk7IC8vIFZpc2l0IHRoZSB3aG9sZSBkb2N1bWVudCB3aXRoIGVhY2ggaW5zdGFuY2Ugb2YgYWxsIHByb3ZpZGVkIHJ1bGVzLlxuXG4gIHRyeSB7XG4gICAgKDAsIF92aXNpdG9yLnZpc2l0KShcbiAgICAgIGRvY3VtZW50QVNULFxuICAgICAgKDAsIF9UeXBlSW5mby52aXNpdFdpdGhUeXBlSW5mbykodHlwZUluZm8sIHZpc2l0b3IpLFxuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSAhPT0gYWJvcnRPYmopIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVycm9ycztcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVTREwoXG4gIGRvY3VtZW50QVNULFxuICBzY2hlbWFUb0V4dGVuZCxcbiAgcnVsZXMgPSBfc3BlY2lmaWVkUnVsZXMuc3BlY2lmaWVkU0RMUnVsZXMsXG4pIHtcbiAgY29uc3QgZXJyb3JzID0gW107XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgX1ZhbGlkYXRpb25Db250ZXh0LlNETFZhbGlkYXRpb25Db250ZXh0KFxuICAgIGRvY3VtZW50QVNULFxuICAgIHNjaGVtYVRvRXh0ZW5kLFxuICAgIChlcnJvcikgPT4ge1xuICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH0sXG4gICk7XG4gIGNvbnN0IHZpc2l0b3JzID0gcnVsZXMubWFwKChydWxlKSA9PiBydWxlKGNvbnRleHQpKTtcbiAgKDAsIF92aXNpdG9yLnZpc2l0KShkb2N1bWVudEFTVCwgKDAsIF92aXNpdG9yLnZpc2l0SW5QYXJhbGxlbCkodmlzaXRvcnMpKTtcbiAgcmV0dXJuIGVycm9ycztcbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB3aGljaCBhc3NlcnRzIGEgU0RMIGRvY3VtZW50IGlzIHZhbGlkIGJ5IHRocm93aW5nIGFuIGVycm9yXG4gKiBpZiBpdCBpcyBpbnZhbGlkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIGFzc2VydFZhbGlkU0RMKGRvY3VtZW50QVNUKSB7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlU0RMKGRvY3VtZW50QVNUKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gd2hpY2ggYXNzZXJ0cyBhIFNETCBkb2N1bWVudCBpcyB2YWxpZCBieSB0aHJvd2luZyBhbiBlcnJvclxuICogaWYgaXQgaXMgaW52YWxpZC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbihkb2N1bWVudEFTVCwgc2NoZW1hKSB7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlU0RMKGRvY3VtZW50QVNULCBzY2hlbWEpO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5tYXAoKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlKS5qb2luKCdcXG5cXG4nKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHRpZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dHJ5IHtcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuXHQvLyBub2RlIHYwLjYgaGFzIGEgYnVnIHdoZXJlIGFycmF5IGxlbmd0aHMgY2FuIGJlIFNldCBidXQgbm90IERlZmluZWRcblx0aWYgKCFoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHZhbHVlOiAxIH0pLmxlbmd0aCAhPT0gMTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIEluIEZpcmVmb3ggNC0yMiwgZGVmaW5pbmcgbGVuZ3RoIG9uIGFuIGFycmF5IHRocm93cyBhbiBleGNlcHRpb24uXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9yaWdTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmUoJy4vc2hhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHN5bSBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLXVucmVhY2hhYmxlLWxvb3Bcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzVG9TdHJpbmdUYWdTaGFtcygpIHtcblx0cmV0dXJuIGhhc1N5bWJvbHMoKSAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZmxlY3RBcHBseSA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyAmJiBSZWZsZWN0ICE9PSBudWxsICYmIFJlZmxlY3QuYXBwbHk7XG52YXIgYmFkQXJyYXlMaWtlO1xudmFyIGlzQ2FsbGFibGVNYXJrZXI7XG5pZiAodHlwZW9mIHJlZmxlY3RBcHBseSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG5cdHRyeSB7XG5cdFx0YmFkQXJyYXlMaWtlID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnbGVuZ3RoJywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRocm93IGlzQ2FsbGFibGVNYXJrZXI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aXNDYWxsYWJsZU1hcmtlciA9IHt9O1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG5cdFx0cmVmbGVjdEFwcGx5KGZ1bmN0aW9uICgpIHsgdGhyb3cgNDI7IH0sIG51bGwsIGJhZEFycmF5TGlrZSk7XG5cdH0gY2F0Y2ggKF8pIHtcblx0XHRpZiAoXyAhPT0gaXNDYWxsYWJsZU1hcmtlcikge1xuXHRcdFx0cmVmbGVjdEFwcGx5ID0gbnVsbDtcblx0XHR9XG5cdH1cbn0gZWxzZSB7XG5cdHJlZmxlY3RBcHBseSA9IG51bGw7XG59XG5cbnZhciBjb25zdHJ1Y3RvclJlZ2V4ID0gL15cXHMqY2xhc3NcXGIvO1xudmFyIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGdW5jdGlvbih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHZhciBmblN0ciA9IGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChmblN0cik7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7IC8vIG5vdCBhIGZ1bmN0aW9uXG5cdH1cbn07XG5cbnZhciB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uVG9TdHIodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBvYmplY3RDbGFzcyA9ICdbb2JqZWN0IE9iamVjdF0nO1xudmFyIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xudmFyIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcbnZhciBkZGFDbGFzcyA9ICdbb2JqZWN0IEhUTUxBbGxDb2xsZWN0aW9uXSc7IC8vIElFIDExXG52YXIgZGRhQ2xhc3MyID0gJ1tvYmplY3QgSFRNTCBkb2N1bWVudC5hbGwgY2xhc3NdJztcbnZhciBkZGFDbGFzczMgPSAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nOyAvLyBJRSA5LTEwXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnOyAvLyBiZXR0ZXI6IHVzZSBgaGFzLXRvc3RyaW5ndGFnYFxuXG52YXIgaXNJRTY4ID0gISgwIGluIFssXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc3BhcnNlLWFycmF5cywgY29tbWEtc3BhY2luZ1xuXG52YXIgaXNEREEgPSBmdW5jdGlvbiBpc0RvY3VtZW50RG90QWxsKCkgeyByZXR1cm4gZmFsc2U7IH07XG5pZiAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0Jykge1xuXHQvLyBGaXJlZm94IDMgY2Fub25pY2FsaXplcyBEREEgdG8gdW5kZWZpbmVkIHdoZW4gaXQncyBub3QgYWNjZXNzZWQgZGlyZWN0bHlcblx0dmFyIGFsbCA9IGRvY3VtZW50LmFsbDtcblx0aWYgKHRvU3RyLmNhbGwoYWxsKSA9PT0gdG9TdHIuY2FsbChkb2N1bWVudC5hbGwpKSB7XG5cdFx0aXNEREEgPSBmdW5jdGlvbiBpc0RvY3VtZW50RG90QWxsKHZhbHVlKSB7XG5cdFx0XHQvKiBnbG9iYWxzIGRvY3VtZW50OiBmYWxzZSAqL1xuXHRcdFx0Ly8gaW4gSUUgNi04LCB0eXBlb2YgZG9jdW1lbnQuYWxsIGlzIFwib2JqZWN0XCIgYW5kIGl0J3MgdHJ1dGh5XG5cdFx0XHRpZiAoKGlzSUU2OCB8fCAhdmFsdWUpICYmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHRzdHIgPT09IGRkYUNsYXNzXG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IGRkYUNsYXNzMlxuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBkZGFDbGFzczMgLy8gb3BlcmEgMTIuMTZcblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gb2JqZWN0Q2xhc3MgLy8gSUUgNi04XG5cdFx0XHRcdFx0KSAmJiB2YWx1ZSgnJykgPT0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVmbGVjdEFwcGx5XG5cdD8gZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRcdGlmIChpc0REQSh2YWx1ZSkpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR0cnkge1xuXHRcdFx0cmVmbGVjdEFwcGx5KHZhbHVlLCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGlmIChlICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdH1cblx0XHRyZXR1cm4gIWlzRVM2Q2xhc3NGbih2YWx1ZSkgJiYgdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpO1xuXHR9XG5cdDogZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRcdGlmIChpc0REQSh2YWx1ZSkpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfVxuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdGlmIChzdHJDbGFzcyAhPT0gZm5DbGFzcyAmJiBzdHJDbGFzcyAhPT0gZ2VuQ2xhc3MgJiYgISgvXlxcW29iamVjdCBIVE1MLykudGVzdChzdHJDbGFzcykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0cmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcblx0fTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRm5SZWdleCA9IC9eXFxzKig/OmZ1bmN0aW9uKT9cXCovO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiooKSB7fScpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0fVxufTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdGlmICghZ2V0UHJvdG8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBHZW5lcmF0b3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcblx0XHRHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IGZhbHNlO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBOdW1iZXIpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKE51bWJlci5pc05hTiAmJiBOdW1iZXIuaXNOYU4oTmFOKSAmJiAhTnVtYmVyLmlzTmFOKCdhJykpIHtcblx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOO1xuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU51bWJlcklzTmFOKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoTnVtYmVyLCB7IGlzTmFOOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXNOYU46IGZ1bmN0aW9uIHRlc3RJc05hTigpIHtcblx0XHRcdHJldHVybiBOdW1iZXIuaXNOYU4gIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJ2dvcGQnKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgYW55VHJ1ZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghYW55VHJ1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW55VHJ1ZSA9IGdldHRlci5jYWxsKHZhbHVlKSA9PT0gdHlwZWRBcnJheTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGFueVRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0cmV0dXJuICRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTE7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKClcbntcbiAgZnVuY3Rpb24gX21pbihkMCwgZDEsIGQyLCBieCwgYXkpXG4gIHtcbiAgICByZXR1cm4gZDAgPCBkMSB8fCBkMiA8IGQxXG4gICAgICAgID8gZDAgPiBkMlxuICAgICAgICAgICAgPyBkMiArIDFcbiAgICAgICAgICAgIDogZDAgKyAxXG4gICAgICAgIDogYnggPT09IGF5XG4gICAgICAgICAgICA/IGQxXG4gICAgICAgICAgICA6IGQxICsgMTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKVxuICB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKSB7XG4gICAgICB2YXIgdG1wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRtcDtcbiAgICB9XG5cbiAgICB2YXIgbGEgPSBhLmxlbmd0aDtcbiAgICB2YXIgbGIgPSBiLmxlbmd0aDtcblxuICAgIHdoaWxlIChsYSA+IDAgJiYgKGEuY2hhckNvZGVBdChsYSAtIDEpID09PSBiLmNoYXJDb2RlQXQobGIgLSAxKSkpIHtcbiAgICAgIGxhLS07XG4gICAgICBsYi0tO1xuICAgIH1cblxuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IGxhICYmIChhLmNoYXJDb2RlQXQob2Zmc2V0KSA9PT0gYi5jaGFyQ29kZUF0KG9mZnNldCkpKSB7XG4gICAgICBvZmZzZXQrKztcbiAgICB9XG5cbiAgICBsYSAtPSBvZmZzZXQ7XG4gICAgbGIgLT0gb2Zmc2V0O1xuXG4gICAgaWYgKGxhID09PSAwIHx8IGxiIDwgMykge1xuICAgICAgcmV0dXJuIGxiO1xuICAgIH1cblxuICAgIHZhciB4ID0gMDtcbiAgICB2YXIgeTtcbiAgICB2YXIgZDA7XG4gICAgdmFyIGQxO1xuICAgIHZhciBkMjtcbiAgICB2YXIgZDM7XG4gICAgdmFyIGRkO1xuICAgIHZhciBkeTtcbiAgICB2YXIgYXk7XG4gICAgdmFyIGJ4MDtcbiAgICB2YXIgYngxO1xuICAgIHZhciBieDI7XG4gICAgdmFyIGJ4MztcblxuICAgIHZhciB2ZWN0b3IgPSBbXTtcblxuICAgIGZvciAoeSA9IDA7IHkgPCBsYTsgeSsrKSB7XG4gICAgICB2ZWN0b3IucHVzaCh5ICsgMSk7XG4gICAgICB2ZWN0b3IucHVzaChhLmNoYXJDb2RlQXQob2Zmc2V0ICsgeSkpO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSB2ZWN0b3IubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyB4IDwgbGIgLSAzOykge1xuICAgICAgYngwID0gYi5jaGFyQ29kZUF0KG9mZnNldCArIChkMCA9IHgpKTtcbiAgICAgIGJ4MSA9IGIuY2hhckNvZGVBdChvZmZzZXQgKyAoZDEgPSB4ICsgMSkpO1xuICAgICAgYngyID0gYi5jaGFyQ29kZUF0KG9mZnNldCArIChkMiA9IHggKyAyKSk7XG4gICAgICBieDMgPSBiLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGQzID0geCArIDMpKTtcbiAgICAgIGRkID0gKHggKz0gNCk7XG4gICAgICBmb3IgKHkgPSAwOyB5IDwgbGVuOyB5ICs9IDIpIHtcbiAgICAgICAgZHkgPSB2ZWN0b3JbeV07XG4gICAgICAgIGF5ID0gdmVjdG9yW3kgKyAxXTtcbiAgICAgICAgZDAgPSBfbWluKGR5LCBkMCwgZDEsIGJ4MCwgYXkpO1xuICAgICAgICBkMSA9IF9taW4oZDAsIGQxLCBkMiwgYngxLCBheSk7XG4gICAgICAgIGQyID0gX21pbihkMSwgZDIsIGQzLCBieDIsIGF5KTtcbiAgICAgICAgZGQgPSBfbWluKGQyLCBkMywgZGQsIGJ4MywgYXkpO1xuICAgICAgICB2ZWN0b3JbeV0gPSBkZDtcbiAgICAgICAgZDMgPSBkMjtcbiAgICAgICAgZDIgPSBkMTtcbiAgICAgICAgZDEgPSBkMDtcbiAgICAgICAgZDAgPSBkeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgeCA8IGxiOykge1xuICAgICAgYngwID0gYi5jaGFyQ29kZUF0KG9mZnNldCArIChkMCA9IHgpKTtcbiAgICAgIGRkID0gKyt4O1xuICAgICAgZm9yICh5ID0gMDsgeSA8IGxlbjsgeSArPSAyKSB7XG4gICAgICAgIGR5ID0gdmVjdG9yW3ldO1xuICAgICAgICB2ZWN0b3JbeV0gPSBkZCA9IF9taW4oZHksIGQwLCBkZCwgYngwLCB2ZWN0b3JbeSArIDFdKTtcbiAgICAgICAgZDAgPSBkeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGQ7XG4gIH07XG59KSgpO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBudW1iZXJJc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpcyhhLCBiKSB7XG5cdGlmIChhID09PSAwICYmIGIgPT09IDApIHtcblx0XHRyZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuXHR9XG5cdGlmIChhID09PSBiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltT2JqZWN0SXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgaXM6IHBvbHlmaWxsIH0sIHtcblx0XHRpczogZnVuY3Rpb24gdGVzdE9iamVjdElzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5pcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIvLyAncGF0aCcgbW9kdWxlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSAob25seSB0aGUgcG9zaXggcGFydClcbi8vIHRyYW5zcGxpdGVkIHdpdGggQmFiZWxcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShwYXRoKSk7XG4gIH1cbn1cblxuLy8gUmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIHdpdGggZGlyZWN0b3J5IG5hbWVzXG5mdW5jdGlvbiBub3JtYWxpemVTdHJpbmdQb3NpeChwYXRoLCBhbGxvd0Fib3ZlUm9vdCkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gIHZhciBsYXN0U2xhc2ggPSAtMTtcbiAgdmFyIGRvdHMgPSAwO1xuICB2YXIgY29kZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gcGF0aC5sZW5ndGg7ICsraSkge1xuICAgIGlmIChpIDwgcGF0aC5sZW5ndGgpXG4gICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGVsc2UgaWYgKGNvZGUgPT09IDQ3IC8qLyovKVxuICAgICAgYnJlYWs7XG4gICAgZWxzZVxuICAgICAgY29kZSA9IDQ3IC8qLyovO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgaWYgKGxhc3RTbGFzaCA9PT0gaSAtIDEgfHwgZG90cyA9PT0gMSkge1xuICAgICAgICAvLyBOT09QXG4gICAgICB9IGVsc2UgaWYgKGxhc3RTbGFzaCAhPT0gaSAtIDEgJiYgZG90cyA9PT0gMikge1xuICAgICAgICBpZiAocmVzLmxlbmd0aCA8IDIgfHwgbGFzdFNlZ21lbnRMZW5ndGggIT09IDIgfHwgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDEpICE9PSA0NiAvKi4qLyB8fCByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMikgIT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFNsYXNoSW5kZXggPSByZXMubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCAhPT0gcmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RTbGFzaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlcyA9ICcnO1xuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMgPSByZXMuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gcmVzLmxlbmd0aCAtIDEgLSByZXMubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpO1xuICAgICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXMubGVuZ3RoID09PSAyIHx8IHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJlcyA9ICcnO1xuICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgIGRvdHMgPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJlcyArPSAnLy4uJztcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXMgPSAnLi4nO1xuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAwKVxuICAgICAgICAgIHJlcyArPSAnLycgKyBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzID0gcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpIC0gbGFzdFNsYXNoIC0gMTtcbiAgICAgIH1cbiAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICBkb3RzID0gMDtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ2IC8qLiovICYmIGRvdHMgIT09IC0xKSB7XG4gICAgICArK2RvdHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvdHMgPSAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gX2Zvcm1hdChzZXAsIHBhdGhPYmplY3QpIHtcbiAgdmFyIGRpciA9IHBhdGhPYmplY3QuZGlyIHx8IHBhdGhPYmplY3Qucm9vdDtcbiAgdmFyIGJhc2UgPSBwYXRoT2JqZWN0LmJhc2UgfHwgKHBhdGhPYmplY3QubmFtZSB8fCAnJykgKyAocGF0aE9iamVjdC5leHQgfHwgJycpO1xuICBpZiAoIWRpcikge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG4gIGlmIChkaXIgPT09IHBhdGhPYmplY3Qucm9vdCkge1xuICAgIHJldHVybiBkaXIgKyBiYXNlO1xuICB9XG4gIHJldHVybiBkaXIgKyBzZXAgKyBiYXNlO1xufVxuXG52YXIgcG9zaXggPSB7XG4gIC8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICB2YXIgcmVzb2x2ZWRQYXRoID0gJyc7XG4gICAgdmFyIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcbiAgICB2YXIgY3dkO1xuXG4gICAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICAgIHZhciBwYXRoO1xuICAgICAgaWYgKGkgPj0gMClcbiAgICAgICAgcGF0aCA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoY3dkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgY3dkID0gcHJvY2Vzcy5jd2QoKTtcbiAgICAgICAgcGF0aCA9IGN3ZDtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0UGF0aChwYXRoKTtcblxuICAgICAgLy8gU2tpcCBlbXB0eSBlbnRyaWVzXG4gICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKi8qLztcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChyZXNvbHZlZFBhdGgsICFyZXNvbHZlZEFic29sdXRlKTtcblxuICAgIGlmIChyZXNvbHZlZEFic29sdXRlKSB7XG4gICAgICBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApXG4gICAgICAgIHJldHVybiAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAnLyc7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlZFBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHJlc29sdmVkUGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcuJztcbiAgICB9XG4gIH0sXG5cbiAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xuICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG5cbiAgICB2YXIgaXNBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gICAgdmFyIHRyYWlsaW5nU2VwYXJhdG9yID0gcGF0aC5jaGFyQ29kZUF0KHBhdGgubGVuZ3RoIC0gMSkgPT09IDQ3IC8qLyovO1xuXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcGF0aCA9IG5vcm1hbGl6ZVN0cmluZ1Bvc2l4KHBhdGgsICFpc0Fic29sdXRlKTtcblxuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCAmJiAhaXNBYnNvbHV0ZSkgcGF0aCA9ICcuJztcbiAgICBpZiAocGF0aC5sZW5ndGggPiAwICYmIHRyYWlsaW5nU2VwYXJhdG9yKSBwYXRoICs9ICcvJztcblxuICAgIGlmIChpc0Fic29sdXRlKSByZXR1cm4gJy8nICsgcGF0aDtcbiAgICByZXR1cm4gcGF0aDtcbiAgfSxcblxuICBpc0Fic29sdXRlOiBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDAgJiYgcGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKi8qLztcbiAgfSxcblxuICBqb2luOiBmdW5jdGlvbiBqb2luKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuICcuJztcbiAgICB2YXIgam9pbmVkO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgYXNzZXJ0UGF0aChhcmcpO1xuICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICBqb2luZWQgPSBhcmc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBqb2luZWQgKz0gJy8nICsgYXJnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gJy4nO1xuICAgIHJldHVybiBwb3NpeC5ub3JtYWxpemUoam9pbmVkKTtcbiAgfSxcblxuICByZWxhdGl2ZTogZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgICBhc3NlcnRQYXRoKGZyb20pO1xuICAgIGFzc2VydFBhdGgodG8pO1xuXG4gICAgaWYgKGZyb20gPT09IHRvKSByZXR1cm4gJyc7XG5cbiAgICBmcm9tID0gcG9zaXgucmVzb2x2ZShmcm9tKTtcbiAgICB0byA9IHBvc2l4LnJlc29sdmUodG8pO1xuXG4gICAgaWYgKGZyb20gPT09IHRvKSByZXR1cm4gJyc7XG5cbiAgICAvLyBUcmltIGFueSBsZWFkaW5nIGJhY2tzbGFzaGVzXG4gICAgdmFyIGZyb21TdGFydCA9IDE7XG4gICAgZm9yICg7IGZyb21TdGFydCA8IGZyb20ubGVuZ3RoOyArK2Zyb21TdGFydCkge1xuICAgICAgaWYgKGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQpICE9PSA0NyAvKi8qLylcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmcm9tRW5kID0gZnJvbS5sZW5ndGg7XG4gICAgdmFyIGZyb21MZW4gPSBmcm9tRW5kIC0gZnJvbVN0YXJ0O1xuXG4gICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xuICAgIHZhciB0b1N0YXJ0ID0gMTtcbiAgICBmb3IgKDsgdG9TdGFydCA8IHRvLmxlbmd0aDsgKyt0b1N0YXJ0KSB7XG4gICAgICBpZiAodG8uY2hhckNvZGVBdCh0b1N0YXJ0KSAhPT0gNDcgLyovKi8pXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgdG9FbmQgPSB0by5sZW5ndGg7XG4gICAgdmFyIHRvTGVuID0gdG9FbmQgLSB0b1N0YXJ0O1xuXG4gICAgLy8gQ29tcGFyZSBwYXRocyB0byBmaW5kIHRoZSBsb25nZXN0IGNvbW1vbiBwYXRoIGZyb20gcm9vdFxuICAgIHZhciBsZW5ndGggPSBmcm9tTGVuIDwgdG9MZW4gPyBmcm9tTGVuIDogdG9MZW47XG4gICAgdmFyIGxhc3RDb21tb25TZXAgPSAtMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPD0gbGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHRvTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpID09PSA0NyAvKi8qLykge1xuICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGB0b2AuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXInOyB0bz0nL2Zvby9iYXIvYmF6J1xuICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpICsgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIHJvb3RcbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvJzsgdG89Jy9mb28nXG4gICAgICAgICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCArIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmcm9tTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYGZyb21gLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyL2Jheic7IHRvPScvZm9vL2JhcidcbiAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgcm9vdC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vJzsgdG89Jy8nXG4gICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB2YXIgZnJvbUNvZGUgPSBmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSk7XG4gICAgICB2YXIgdG9Db2RlID0gdG8uY2hhckNvZGVBdCh0b1N0YXJ0ICsgaSk7XG4gICAgICBpZiAoZnJvbUNvZGUgIT09IHRvQ29kZSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbHNlIGlmIChmcm9tQ29kZSA9PT0gNDcgLyovKi8pXG4gICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xuICAgIH1cblxuICAgIHZhciBvdXQgPSAnJztcbiAgICAvLyBHZW5lcmF0ZSB0aGUgcmVsYXRpdmUgcGF0aCBiYXNlZCBvbiB0aGUgcGF0aCBkaWZmZXJlbmNlIGJldHdlZW4gYHRvYFxuICAgIC8vIGFuZCBgZnJvbWBcbiAgICBmb3IgKGkgPSBmcm9tU3RhcnQgKyBsYXN0Q29tbW9uU2VwICsgMTsgaSA8PSBmcm9tRW5kOyArK2kpIHtcbiAgICAgIGlmIChpID09PSBmcm9tRW5kIHx8IGZyb20uY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgaWYgKG91dC5sZW5ndGggPT09IDApXG4gICAgICAgICAgb3V0ICs9ICcuLic7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBvdXQgKz0gJy8uLic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGFzdGx5LCBhcHBlbmQgdGhlIHJlc3Qgb2YgdGhlIGRlc3RpbmF0aW9uIChgdG9gKSBwYXRoIHRoYXQgY29tZXMgYWZ0ZXJcbiAgICAvLyB0aGUgY29tbW9uIHBhdGggcGFydHNcbiAgICBpZiAob3V0Lmxlbmd0aCA+IDApXG4gICAgICByZXR1cm4gb3V0ICsgdG8uc2xpY2UodG9TdGFydCArIGxhc3RDb21tb25TZXApO1xuICAgIGVsc2Uge1xuICAgICAgdG9TdGFydCArPSBsYXN0Q29tbW9uU2VwO1xuICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCkgPT09IDQ3IC8qLyovKVxuICAgICAgICArK3RvU3RhcnQ7XG4gICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCk7XG4gICAgfVxuICB9LFxuXG4gIF9tYWtlTG9uZzogZnVuY3Rpb24gX21ha2VMb25nKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfSxcblxuICBkaXJuYW1lOiBmdW5jdGlvbiBkaXJuYW1lKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcuJztcbiAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICAgIHZhciBlbmQgPSAtMTtcbiAgICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gICAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKSByZXR1cm4gJy8vJztcbiAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xuICB9LFxuXG4gIGJhc2VuYW1lOiBmdW5jdGlvbiBiYXNlbmFtZShwYXRoLCBleHQpIHtcbiAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGV4dCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZXh0XCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIHZhciBlbmQgPSAtMTtcbiAgICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7XG4gICAgICBpZiAoZXh0Lmxlbmd0aCA9PT0gcGF0aC5sZW5ndGggJiYgZXh0ID09PSBwYXRoKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZXh0SWR4ID0gZXh0Lmxlbmd0aCAtIDE7XG4gICAgICB2YXIgZmlyc3ROb25TbGFzaEVuZCA9IC0xO1xuICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kID09PSAtMSkge1xuICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIHJlbWVtYmVyIHRoaXMgaW5kZXggaW4gY2FzZVxuICAgICAgICAgICAgLy8gd2UgbmVlZCBpdCBpZiB0aGUgZXh0ZW5zaW9uIGVuZHMgdXAgbm90IG1hdGNoaW5nXG4gICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGZpcnN0Tm9uU2xhc2hFbmQgPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV4dElkeCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGV4cGxpY2l0IGV4dGVuc2lvblxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IGV4dC5jaGFyQ29kZUF0KGV4dElkeCkpIHtcbiAgICAgICAgICAgICAgaWYgKC0tZXh0SWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIGV4dGVuc2lvbiwgc28gbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBFeHRlbnNpb24gZG9lcyBub3QgbWF0Y2gsIHNvIG91ciByZXN1bHQgaXMgdGhlIGVudGlyZSBwYXRoXG4gICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgICAgICAgICBleHRJZHggPSAtMTtcbiAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7ZWxzZSBpZiAoZW5kID09PSAtMSkgZW5kID0gcGF0aC5sZW5ndGg7XG4gICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSA0NyAvKi8qLykge1xuICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgIC8vIHBhdGggY29tcG9uZW50XG4gICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiAnJztcbiAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgfSxcblxuICBleHRuYW1lOiBmdW5jdGlvbiBleHRuYW1lKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuICAgIHZhciBzdGFydERvdCA9IC0xO1xuICAgIHZhciBzdGFydFBhcnQgPSAwO1xuICAgIHZhciBlbmQgPSAtMTtcbiAgICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gNDYgLyouKi8pIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKVxuICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHxcbiAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgfSxcblxuICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdChwYXRoT2JqZWN0KSB7XG4gICAgaWYgKHBhdGhPYmplY3QgPT09IG51bGwgfHwgdHlwZW9mIHBhdGhPYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJwYXRoT2JqZWN0XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHBhdGhPYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gX2Zvcm1hdCgnLycsIHBhdGhPYmplY3QpO1xuICB9LFxuXG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcblxuICAgIHZhciByZXQgPSB7IHJvb3Q6ICcnLCBkaXI6ICcnLCBiYXNlOiAnJywgZXh0OiAnJywgbmFtZTogJycgfTtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiByZXQ7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGlzQWJzb2x1dGUgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgICB2YXIgc3RhcnQ7XG4gICAgaWYgKGlzQWJzb2x1dGUpIHtcbiAgICAgIHJldC5yb290ID0gJy8nO1xuICAgICAgc3RhcnQgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHZhciBzdGFydERvdCA9IC0xO1xuICAgIHZhciBzdGFydFBhcnQgPSAwO1xuICAgIHZhciBlbmQgPSAtMTtcbiAgICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICB2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTtcblxuICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICAgIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG5cbiAgICAvLyBHZXQgbm9uLWRpciBpbmZvXG4gICAgZm9yICg7IGkgPj0gc3RhcnQ7IC0taSkge1xuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gNDYgLyouKi8pIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSBzdGFydERvdCA9IGk7ZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHByZURvdFN0YXRlID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHxcbiAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgIHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSB7XG4gICAgICBpZiAoZW5kICE9PSAtMSkge1xuICAgICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUpIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIGVuZCk7ZWxzZSByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGFydFBhcnQgPT09IDAgJiYgaXNBYnNvbHV0ZSkge1xuICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2UoMSwgc3RhcnREb3QpO1xuICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2UoMSwgZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydFBhcnQsIHN0YXJ0RG90KTtcbiAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldC5leHQgPSBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xuICAgIH1cblxuICAgIGlmIChzdGFydFBhcnQgPiAwKSByZXQuZGlyID0gcGF0aC5zbGljZSgwLCBzdGFydFBhcnQgLSAxKTtlbHNlIGlmIChpc0Fic29sdXRlKSByZXQuZGlyID0gJy8nO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBzZXA6ICcvJyxcbiAgZGVsaW1pdGVyOiAnOicsXG4gIHdpbjMyOiBudWxsLFxuICBwb3NpeDogbnVsbFxufTtcblxucG9zaXgucG9zaXggPSBwb3NpeDtcblxubW9kdWxlLmV4cG9ydHMgPSBwb3NpeDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8jJl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICB3aGlsZSAocGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KSkge1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydFsxXSlcbiAgICAgICwgdmFsdWUgPSBkZWNvZGUocGFydFsyXSk7XG5cbiAgICAvL1xuICAgIC8vIFByZXZlbnQgb3ZlcnJpZGluZyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBidWlsZC1pblxuICAgIC8vIG1ldGhvZHMgbGlrZSBgdG9TdHJpbmdgIG9yIF9fcHJvdG9fXyBhcmUgbm90IG92ZXJyaWRlbiBieSBtYWxpY2lvdXNcbiAgICAvLyBxdWVyeXN0cmluZ3MuXG4gICAgLy9cbiAgICAvLyBJbiB0aGUgY2FzZSBpZiBmYWlsZWQgZGVjb2RpbmcsIHdlIHdhbnQgdG8gb21pdCB0aGUga2V5L3ZhbHVlIHBhaXJzXG4gICAgLy8gZnJvbSB0aGUgcmVzdWx0LlxuICAgIC8vXG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdXG4gICAgLCB2YWx1ZVxuICAgICwga2V5O1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIC8vXG4gICAgICAvLyBFZGdlIGNhc2VzIHdoZXJlIHdlIGFjdHVhbGx5IHdhbnQgdG8gZW5jb2RlIHRoZSB2YWx1ZSB0byBhbiBlbXB0eVxuICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgLy9cbiAgICAgIGlmICghdmFsdWUgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZiB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGVuY29kZShrZXkpO1xuICAgICAgdmFsdWUgPSBlbmNvZGUodmFsdWUpO1xuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcGFpcnMucHVzaChrZXkgKyc9JysgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UncmUgcmVxdWlyZWQgdG8gYWRkIGEgcG9ydCBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RlZmF1bHQtcG9ydFxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBwb3J0IFBvcnQgbnVtYmVyIHdlIG5lZWQgdG8gY2hlY2tcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCB3ZSBuZWVkIHRvIGNoZWNrIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSXMgaXQgYSBkZWZhdWx0IHBvcnQgZm9yIHRoZSBnaXZlbiBwcm90b2NvbFxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZWQocG9ydCwgcHJvdG9jb2wpIHtcbiAgcHJvdG9jb2wgPSBwcm90b2NvbC5zcGxpdCgnOicpWzBdO1xuICBwb3J0ID0gK3BvcnQ7XG5cbiAgaWYgKCFwb3J0KSByZXR1cm4gZmFsc2U7XG5cbiAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHAnOlxuICAgIGNhc2UgJ3dzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gODA7XG5cbiAgICBjYXNlICdodHRwcyc6XG4gICAgY2FzZSAnd3NzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNDQzO1xuXG4gICAgY2FzZSAnZnRwJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gMjE7XG5cbiAgICBjYXNlICdnb3BoZXInOlxuICAgIHJldHVybiBwb3J0ICE9PSA3MDtcblxuICAgIGNhc2UgJ2ZpbGUnOlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwb3J0ICE9PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdGRvdXQ6IGZhbHNlLFxuXHRzdGRlcnI6IGZhbHNlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0JylcbiAgLCBxcyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5naWZ5JylcbiAgLCBjb250cm9sT3JXaGl0ZXNwYWNlID0gL15bXFx4MDAtXFx4MjBcXHUwMGEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwYVxcdTIwMjhcXHUyMDI5XFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0rL1xuICAsIENSSFRMRiA9IC9bXFxuXFxyXFx0XS9nXG4gICwgc2xhc2hlcyA9IC9eW0EtWmEtel1bQS1aYS16MC05Ky0uXSo6XFwvXFwvL1xuICAsIHBvcnQgPSAvOlxcZCskL1xuICAsIHByb3RvY29scmUgPSAvXihbYS16XVthLXowLTkuKy1dKjopPyhcXC9cXC8pPyhbXFxcXC9dKyk/KFtcXFNcXHNdKikvaVxuICAsIHdpbmRvd3NEcml2ZUxldHRlciA9IC9eW2EtekEtWl06LztcblxuLyoqXG4gKiBSZW1vdmUgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB3aGl0ZXNwYWNlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IHN0ciBTdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgbmV3IHN0cmluZyByZXByZXNlbnRpbmcgYHN0cmAgc3RyaXBwZWQgb2YgY29udHJvbFxuICogICAgIGNoYXJhY3RlcnMgYW5kIHdoaXRlc3BhY2UgZnJvbSBpdHMgYmVnaW5uaW5nLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0cmltTGVmdChzdHIpIHtcbiAgcmV0dXJuIChzdHIgPyBzdHIgOiAnJykudG9TdHJpbmcoKS5yZXBsYWNlKGNvbnRyb2xPcldoaXRlc3BhY2UsICcnKTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgZnVuY3Rpb24gc2FuaXRpemUoYWRkcmVzcywgdXJsKSB7ICAgICAvLyBTYW5pdGl6ZSB3aGF0IGlzIGxlZnQgb2YgdGhlIGFkZHJlc3NcbiAgICByZXR1cm4gaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgPyBhZGRyZXNzLnJlcGxhY2UoL1xcXFwvZywgJy8nKSA6IGFkZHJlc3M7XG4gIH0sXG4gIFsnLycsICdwYXRobmFtZSddLCAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJ0AnLCAnYXV0aCcsIDFdLCAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgZnJvbnQuXG4gIFtOYU4sICdob3N0JywgdW5kZWZpbmVkLCAxLCAxXSwgICAgICAgLy8gU2V0IGxlZnQgb3ZlciB2YWx1ZS5cbiAgWy86KFxcZCopJC8sICdwb3J0JywgdW5kZWZpbmVkLCAxXSwgICAgLy8gUmVnRXhwIHRoZSBiYWNrLlxuICBbTmFOLCAnaG9zdG5hbWUnLCB1bmRlZmluZWQsIDEsIDFdICAgIC8vIFNldCBsZWZ0IG92ZXIuXG5dO1xuXG4vKipcbiAqIFRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBjb3BpZWQgb3IgaW5oZXJpdGVkIGZyb20uIFRoaXMgaXMgb25seSBuZWVkZWRcbiAqIGZvciBhbGwgbm9uIGJsb2IgVVJMJ3MgYXMgYSBibG9iIFVSTCBkb2VzIG5vdCBpbmNsdWRlIGEgaGFzaCwgb25seSB0aGVcbiAqIG9yaWdpbi5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGlnbm9yZSA9IHsgaGFzaDogMSwgcXVlcnk6IDEgfTtcblxuLyoqXG4gKiBUaGUgbG9jYXRpb24gb2JqZWN0IGRpZmZlcnMgd2hlbiB5b3VyIGNvZGUgaXMgbG9hZGVkIHRocm91Z2ggYSBub3JtYWwgcGFnZSxcbiAqIFdvcmtlciBvciB0aHJvdWdoIGEgd29ya2VyIHVzaW5nIGEgYmxvYi4gQW5kIHdpdGggdGhlIGJsb2JibGUgYmVnaW5zIHRoZVxuICogdHJvdWJsZSBhcyB0aGUgbG9jYXRpb24gb2JqZWN0IHdpbGwgY29udGFpbiB0aGUgVVJMIG9mIHRoZSBibG9iLCBub3QgdGhlXG4gKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSB3aGVyZSBvdXIgY29kZSBpcyBsb2FkZWQgaW4uIFRoZSBhY3R1YWwgb3JpZ2luIGlzXG4gKiBlbmNvZGVkIGluIHRoZSBgcGF0aG5hbWVgIHNvIHdlIGNhbiB0aGFua2Z1bGx5IGdlbmVyYXRlIGEgZ29vZCBcImRlZmF1bHRcIlxuICogbG9jYXRpb24gZnJvbSBpdCBzbyB3ZSBjYW4gZ2VuZXJhdGUgcHJvcGVyIHJlbGF0aXZlIFVSTCdzIGFnYWluLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jIE9wdGlvbmFsIGRlZmF1bHQgbG9jYXRpb24gb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gbG9sY2F0aW9uIG9iamVjdC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9sY2F0aW9uKGxvYykge1xuICB2YXIgZ2xvYmFsVmFyO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gd2luZG93O1xuICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gZ2xvYmFsO1xuICBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbFZhciA9IHNlbGY7XG4gIGVsc2UgZ2xvYmFsVmFyID0ge307XG5cbiAgdmFyIGxvY2F0aW9uID0gZ2xvYmFsVmFyLmxvY2F0aW9uIHx8IHt9O1xuICBsb2MgPSBsb2MgfHwgbG9jYXRpb247XG5cbiAgdmFyIGZpbmFsZGVzdGluYXRpb24gPSB7fVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NcbiAgICAsIGtleTtcblxuICBpZiAoJ2Jsb2I6JyA9PT0gbG9jLnByb3RvY29sKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwodW5lc2NhcGUobG9jLnBhdGhuYW1lKSwge30pO1xuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwobG9jLCB7fSk7XG4gICAgZm9yIChrZXkgaW4gaWdub3JlKSBkZWxldGUgZmluYWxkZXN0aW5hdGlvbltrZXldO1xuICB9IGVsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlKSB7XG4gICAgZm9yIChrZXkgaW4gbG9jKSB7XG4gICAgICBpZiAoa2V5IGluIGlnbm9yZSkgY29udGludWU7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uW2tleV0gPSBsb2Nba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9IHNsYXNoZXMudGVzdChsb2MuaHJlZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbmFsZGVzdGluYXRpb247XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3RvY29sIHNjaGVtZSBpcyBzcGVjaWFsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBUaGUgcHJvdG9jb2wgc2NoZW1lIG9mIHRoZSBVUkxcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgcHJvdG9jb2wgc2NoZW1lIGlzIHNwZWNpYWwsIGVsc2UgYGZhbHNlYFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNTcGVjaWFsKHNjaGVtZSkge1xuICByZXR1cm4gKFxuICAgIHNjaGVtZSA9PT0gJ2ZpbGU6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ2Z0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cHM6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ3dzOicgfHxcbiAgICBzY2hlbWUgPT09ICd3c3M6J1xuICApO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIFByb3RvY29sRXh0cmFjdFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgbWF0Y2hlZCBpbiB0aGUgVVJMLCBpbiBsb3dlcmNhc2UuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsYXNoZXMgYHRydWVgIGlmIHByb3RvY29sIGlzIGZvbGxvd2VkIGJ5IFwiLy9cIiwgZWxzZSBgZmFsc2VgLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHJlc3QgUmVzdCBvZiB0aGUgVVJMIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICovXG5cbi8qKlxuICogRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBmcm9tIGEgVVJMIHdpdGgvd2l0aG91dCBkb3VibGUgc2xhc2ggKFwiLy9cIikuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gZXh0cmFjdCBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IGxvY2F0aW9uXG4gKiBAcmV0dXJuIHtQcm90b2NvbEV4dHJhY3R9IEV4dHJhY3RlZCBpbmZvcm1hdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQcm90b2NvbChhZGRyZXNzLCBsb2NhdGlvbikge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG4gIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoQ1JIVExGLCAnJyk7XG4gIGxvY2F0aW9uID0gbG9jYXRpb24gfHwge307XG5cbiAgdmFyIG1hdGNoID0gcHJvdG9jb2xyZS5leGVjKGFkZHJlc3MpO1xuICB2YXIgcHJvdG9jb2wgPSBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgdmFyIGZvcndhcmRTbGFzaGVzID0gISFtYXRjaFsyXTtcbiAgdmFyIG90aGVyU2xhc2hlcyA9ICEhbWF0Y2hbM107XG4gIHZhciBzbGFzaGVzQ291bnQgPSAwO1xuICB2YXIgcmVzdDtcblxuICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICBpZiAob3RoZXJTbGFzaGVzKSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFszXSArIG1hdGNoWzRdO1xuICAgICAgc2xhc2hlc0NvdW50ID0gbWF0Y2hbMl0ubGVuZ3RoICsgbWF0Y2hbM10ubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFs0XTtcbiAgICAgIHNsYXNoZXNDb3VudCA9IG1hdGNoWzJdLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG90aGVyU2xhc2hlcykge1xuICAgICAgcmVzdCA9IG1hdGNoWzNdICsgbWF0Y2hbNF07XG4gICAgICBzbGFzaGVzQ291bnQgPSBtYXRjaFszXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3QgPSBtYXRjaFs0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgIGlmIChzbGFzaGVzQ291bnQgPj0gMikge1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU3BlY2lhbChwcm90b2NvbCkpIHtcbiAgICByZXN0ID0gbWF0Y2hbNF07XG4gIH0gZWxzZSBpZiAocHJvdG9jb2wpIHtcbiAgICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzbGFzaGVzQ291bnQgPj0gMiAmJiBpc1NwZWNpYWwobG9jYXRpb24ucHJvdG9jb2wpKSB7XG4gICAgcmVzdCA9IG1hdGNoWzRdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgc2xhc2hlczogZm9yd2FyZFNsYXNoZXMgfHwgaXNTcGVjaWFsKHByb3RvY29sKSxcbiAgICBzbGFzaGVzQ291bnQ6IHNsYXNoZXNDb3VudCxcbiAgICByZXN0OiByZXN0XG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIFVSTCBwYXRobmFtZSBhZ2FpbnN0IGEgYmFzZSBVUkwgcGF0aG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlbGF0aXZlIFBhdGhuYW1lIG9mIHRoZSByZWxhdGl2ZSBVUkwuXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZSBQYXRobmFtZSBvZiB0aGUgYmFzZSBVUkwuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlc29sdmVkIHBhdGhuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZShyZWxhdGl2ZSwgYmFzZSkge1xuICBpZiAocmVsYXRpdmUgPT09ICcnKSByZXR1cm4gYmFzZTtcblxuICB2YXIgcGF0aCA9IChiYXNlIHx8ICcvJykuc3BsaXQoJy8nKS5zbGljZSgwLCAtMSkuY29uY2F0KHJlbGF0aXZlLnNwbGl0KCcvJykpXG4gICAgLCBpID0gcGF0aC5sZW5ndGhcbiAgICAsIGxhc3QgPSBwYXRoW2kgLSAxXVxuICAgICwgdW5zaGlmdCA9IGZhbHNlXG4gICAgLCB1cCA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChwYXRoW2ldID09PSAnLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGF0aFtpXSA9PT0gJy4uJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIGlmIChpID09PSAwKSB1bnNoaWZ0ID0gdHJ1ZTtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5zaGlmdCkgcGF0aC51bnNoaWZ0KCcnKTtcbiAgaWYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSBwYXRoLnB1c2goJycpO1xuXG4gIHJldHVybiBwYXRoLmpvaW4oJy8nKTtcbn1cblxuLyoqXG4gKiBUaGUgYWN0dWFsIFVSTCBpbnN0YW5jZS4gSW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gb2JqZWN0IHdlJ3ZlIG9wdGVkLWluIHRvXG4gKiBjcmVhdGUgYW4gYWN0dWFsIGNvbnN0cnVjdG9yIGFzIGl0J3MgbXVjaCBtb3JlIG1lbW9yeSBlZmZpY2llbnQgYW5kXG4gKiBmYXN0ZXIgYW5kIGl0IHBsZWFzZXMgbXkgT0NELlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IHdlIHNob3VsZCBub3QgdXNlIGBVUkxgIGFzIGNsYXNzIG5hbWUgdG8gcHJldmVudFxuICogY2xhc2hlcyB3aXRoIHRoZSBnbG9iYWwgVVJMIGluc3RhbmNlIHRoYXQgZ290IGludHJvZHVjZWQgaW4gYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW2xvY2F0aW9uXSBMb2NhdGlvbiBkZWZhdWx0cyBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IFtwYXJzZXJdIFBhcnNlciBmb3IgdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcbiAgYWRkcmVzcyA9IGFkZHJlc3MucmVwbGFjZShDUkhUTEYsICcnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJsKSkge1xuICAgIHJldHVybiBuZXcgVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpO1xuICB9XG5cbiAgdmFyIHJlbGF0aXZlLCBleHRyYWN0ZWQsIHBhcnNlLCBpbnN0cnVjdGlvbiwgaW5kZXgsIGtleVxuICAgICwgaW5zdHJ1Y3Rpb25zID0gcnVsZXMuc2xpY2UoKVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NhdGlvblxuICAgICwgdXJsID0gdGhpc1xuICAgICwgaSA9IDA7XG5cbiAgLy9cbiAgLy8gVGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnRzIGFsbG93cyB0aGlzIG1vZHVsZSB0d28gaGF2ZSBjb21wYXRpYmlsaXR5IHdpdGhcbiAgLy8gMiBkaWZmZXJlbnQgQVBJOlxuICAvL1xuICAvLyAxLiBOb2RlLmpzJ3MgYHVybC5wYXJzZWAgYXBpIHdoaWNoIGFjY2VwdHMgYSBVUkwsIGJvb2xlYW4gYXMgYXJndW1lbnRzXG4gIC8vICAgIHdoZXJlIHRoZSBib29sZWFuIGluZGljYXRlcyB0aGF0IHRoZSBxdWVyeSBzdHJpbmcgc2hvdWxkIGFsc28gYmUgcGFyc2VkLlxuICAvL1xuICAvLyAyLiBUaGUgYFVSTGAgaW50ZXJmYWNlIG9mIHRoZSBicm93c2VyIHdoaWNoIGFjY2VwdHMgYSBVUkwsIG9iamVjdCBhc1xuICAvLyAgICBhcmd1bWVudHMuIFRoZSBzdXBwbGllZCBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIC8gZmFsbC1iYWNrXG4gIC8vICAgIGZvciByZWxhdGl2ZSBwYXRocy5cbiAgLy9cbiAgaWYgKCdvYmplY3QnICE9PSB0eXBlICYmICdzdHJpbmcnICE9PSB0eXBlKSB7XG4gICAgcGFyc2VyID0gbG9jYXRpb247XG4gICAgbG9jYXRpb24gPSBudWxsO1xuICB9XG5cbiAgaWYgKHBhcnNlciAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgcGFyc2VyKSBwYXJzZXIgPSBxcy5wYXJzZTtcblxuICBsb2NhdGlvbiA9IGxvbGNhdGlvbihsb2NhdGlvbik7XG5cbiAgLy9cbiAgLy8gRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBiZWZvcmUgcnVubmluZyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICAvL1xuICBleHRyYWN0ZWQgPSBleHRyYWN0UHJvdG9jb2woYWRkcmVzcyB8fCAnJywgbG9jYXRpb24pO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKFxuICAgIGV4dHJhY3RlZC5wcm90b2NvbCA9PT0gJ2ZpbGU6JyAmJiAoXG4gICAgICBleHRyYWN0ZWQuc2xhc2hlc0NvdW50ICE9PSAyIHx8IHdpbmRvd3NEcml2ZUxldHRlci50ZXN0KGFkZHJlc3MpKSB8fFxuICAgICghZXh0cmFjdGVkLnNsYXNoZXMgJiZcbiAgICAgIChleHRyYWN0ZWQucHJvdG9jb2wgfHxcbiAgICAgICAgZXh0cmFjdGVkLnNsYXNoZXNDb3VudCA8IDIgfHxcbiAgICAgICAgIWlzU3BlY2lhbCh1cmwucHJvdG9jb2wpKSlcbiAgKSB7XG4gICAgaW5zdHJ1Y3Rpb25zWzNdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG4gIH1cblxuICBmb3IgKDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkcmVzcyA9IGluc3RydWN0aW9uKGFkZHJlc3MsIHVybCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaW5kZXggPSBwYXJzZSA9PT0gJ0AnXG4gICAgICAgID8gYWRkcmVzcy5sYXN0SW5kZXhPZihwYXJzZSlcbiAgICAgICAgOiBhZGRyZXNzLmluZGV4T2YocGFyc2UpO1xuXG4gICAgICBpZiAofmluZGV4KSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGluc3RydWN0aW9uWzJdKSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZShpbmRleCArIGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGluZGV4ID0gcGFyc2UuZXhlYyhhZGRyZXNzKSkpIHtcbiAgICAgIHVybFtrZXldID0gaW5kZXhbMV07XG4gICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleC5pbmRleCk7XG4gICAgfVxuXG4gICAgdXJsW2tleV0gPSB1cmxba2V5XSB8fCAoXG4gICAgICByZWxhdGl2ZSAmJiBpbnN0cnVjdGlvblszXSA/IGxvY2F0aW9uW2tleV0gfHwgJycgOiAnJ1xuICAgICk7XG5cbiAgICAvL1xuICAgIC8vIEhvc3RuYW1lLCBob3N0IGFuZCBwcm90b2NvbCBzaG91bGQgYmUgbG93ZXJjYXNlZCBzbyB0aGV5IGNhbiBiZSB1c2VkIHRvXG4gICAgLy8gY3JlYXRlIGEgcHJvcGVyIGBvcmlnaW5gLlxuICAgIC8vXG4gICAgaWYgKGluc3RydWN0aW9uWzRdKSB1cmxba2V5XSA9IHVybFtrZXldLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvL1xuICAvLyBBbHNvIHBhcnNlIHRoZSBzdXBwbGllZCBxdWVyeSBzdHJpbmcgaW4gdG8gYW4gb2JqZWN0LiBJZiB3ZSdyZSBzdXBwbGllZFxuICAvLyB3aXRoIGEgY3VzdG9tIHBhcnNlciBhcyBmdW5jdGlvbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJ1aWxkLWluXG4gIC8vIHBhcnNlci5cbiAgLy9cbiAgaWYgKHBhcnNlcikgdXJsLnF1ZXJ5ID0gcGFyc2VyKHVybC5xdWVyeSk7XG5cbiAgLy9cbiAgLy8gSWYgdGhlIFVSTCBpcyByZWxhdGl2ZSwgcmVzb2x2ZSB0aGUgcGF0aG5hbWUgYWdhaW5zdCB0aGUgYmFzZSBVUkwuXG4gIC8vXG4gIGlmIChcbiAgICAgIHJlbGF0aXZlXG4gICAgJiYgbG9jYXRpb24uc2xhc2hlc1xuICAgICYmIHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJ1xuICAgICYmICh1cmwucGF0aG5hbWUgIT09ICcnIHx8IGxvY2F0aW9uLnBhdGhuYW1lICE9PSAnJylcbiAgKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gcmVzb2x2ZSh1cmwucGF0aG5hbWUsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIC8vXG4gIC8vIERlZmF1bHQgdG8gYSAvIGZvciBwYXRobmFtZSBpZiBub25lIGV4aXN0cy4gVGhpcyBub3JtYWxpemVzIHRoZSBVUkxcbiAgLy8gdG8gYWx3YXlzIGhhdmUgYSAvXG4gIC8vXG4gIGlmICh1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwucGF0aG5hbWUgPSAnLycgKyB1cmwucGF0aG5hbWU7XG4gIH1cblxuICAvL1xuICAvLyBXZSBzaG91bGQgbm90IGFkZCBwb3J0IG51bWJlcnMgaWYgdGhleSBhcmUgYWxyZWFkeSB0aGUgZGVmYXVsdCBwb3J0IG51bWJlclxuICAvLyBmb3IgYSBnaXZlbiBwcm90b2NvbC4gQXMgdGhlIGhvc3QgYWxzbyBjb250YWlucyB0aGUgcG9ydCBudW1iZXIgd2UncmUgZ29pbmdcbiAgLy8gb3ZlcnJpZGUgaXQgd2l0aCB0aGUgaG9zdG5hbWUgd2hpY2ggY29udGFpbnMgbm8gcG9ydCBudW1iZXIuXG4gIC8vXG4gIGlmICghcmVxdWlyZWQodXJsLnBvcnQsIHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICB1cmwucG9ydCA9ICcnO1xuICB9XG5cbiAgLy9cbiAgLy8gUGFyc2UgZG93biB0aGUgYGF1dGhgIGZvciB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxuICAvL1xuICB1cmwudXNlcm5hbWUgPSB1cmwucGFzc3dvcmQgPSAnJztcblxuICBpZiAodXJsLmF1dGgpIHtcbiAgICBpbmRleCA9IHVybC5hdXRoLmluZGV4T2YoJzonKTtcblxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgIHVybC51c2VybmFtZSA9IHVybC5hdXRoLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnVzZXJuYW1lKSk7XG5cbiAgICAgIHVybC5wYXNzd29yZCA9IHVybC5hdXRoLnNsaWNlKGluZGV4ICsgMSk7XG4gICAgICB1cmwucGFzc3dvcmQgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHVybC5wYXNzd29yZCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLmF1dGgpKTtcbiAgICB9XG5cbiAgICB1cmwuYXV0aCA9IHVybC5wYXNzd29yZCA/IHVybC51c2VybmFtZSArJzonKyB1cmwucGFzc3dvcmQgOiB1cmwudXNlcm5hbWU7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICE9PSAnZmlsZTonICYmIGlzU3BlY2lhbCh1cmwucHJvdG9jb2wpICYmIHVybC5ob3N0XG4gICAgPyB1cmwucHJvdG9jb2wgKycvLycrIHVybC5ob3N0XG4gICAgOiAnbnVsbCc7XG5cbiAgLy9cbiAgLy8gVGhlIGhyZWYgaXMganVzdCB0aGUgY29tcGlsZWQgcmVzdWx0LlxuICAvL1xuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY29udmVuaWVuY2UgbWV0aG9kIGZvciBjaGFuZ2luZyBwcm9wZXJ0aWVzIGluIHRoZSBVUkwgaW5zdGFuY2UgdG9cbiAqIGluc3VyZSB0aGF0IHRoZXkgYWxsIHByb3BhZ2F0ZSBjb3JyZWN0bHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhcnQgICAgICAgICAgUHJvcGVydHkgd2UgbmVlZCB0byBhZGp1c3QuXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZSAgICAgICAgICBUaGUgbmV3bHkgYXNzaWduZWQgdmFsdWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IGZuICBXaGVuIHNldHRpbmcgdGhlIHF1ZXJ5LCBpdCB3aWxsIGJlIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCB0byBwYXJzZSB0aGUgcXVlcnkuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHNldHRpbmcgdGhlIHByb3RvY29sLCBkb3VibGUgc2xhc2ggd2lsbCBiZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCBmcm9tIHRoZSBmaW5hbCB1cmwgaWYgaXQgaXMgdHJ1ZS5cbiAqIEByZXR1cm5zIHtVUkx9IFVSTCBpbnN0YW5jZSBmb3IgY2hhaW5pbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHNldChwYXJ0LCB2YWx1ZSwgZm4pIHtcbiAgdmFyIHVybCA9IHRoaXM7XG5cbiAgc3dpdGNoIChwYXJ0KSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gKGZuIHx8IHFzLnBhcnNlKSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwb3J0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIXJlcXVpcmVkKHZhbHVlLCB1cmwucHJvdG9jb2wpKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICB1cmxbcGFydF0gPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWUgKyc6JysgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICh1cmwucG9ydCkgdmFsdWUgKz0gJzonKyB1cmwucG9ydDtcbiAgICAgIHVybC5ob3N0ID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmIChwb3J0LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgdXJsLnBvcnQgPSB2YWx1ZS5wb3AoKTtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWUuam9pbignOicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWU7XG4gICAgICAgIHVybC5wb3J0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJvdG9jb2wnOlxuICAgICAgdXJsLnByb3RvY29sID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVybC5zbGFzaGVzID0gIWZuO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRobmFtZSc6XG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNoYXIgPSBwYXJ0ID09PSAncGF0aG5hbWUnID8gJy8nIDogJyMnO1xuICAgICAgICB1cmxbcGFydF0gPSB2YWx1ZS5jaGFyQXQoMCkgIT09IGNoYXIgPyBjaGFyICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1c2VybmFtZSc6XG4gICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgdXJsW3BhcnRdID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYXV0aCc6XG4gICAgICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCc6Jyk7XG5cbiAgICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lID0gdmFsdWUuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB1cmwudXNlcm5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHVybC51c2VybmFtZSkpO1xuXG4gICAgICAgIHVybC5wYXNzd29yZCA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSk7XG4gICAgICAgIHVybC5wYXNzd29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnBhc3N3b3JkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwudXNlcm5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLmF1dGggPSB1cmwucGFzc3dvcmQgPyB1cmwudXNlcm5hbWUgKyc6JysgdXJsLnBhc3N3b3JkIDogdXJsLnVzZXJuYW1lO1xuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgIT09ICdmaWxlOicgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiYgdXJsLmhvc3RcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xuXG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIGJhY2sgaW4gdG8gYSB2YWxpZCBhbmQgZnVsbCBVUkwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZ2lmeSBPcHRpb25hbCBxdWVyeSBzdHJpbmdpZnkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBDb21waWxlZCB2ZXJzaW9uIG9mIHRoZSBVUkwuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmeSkge1xuICBpZiAoIXN0cmluZ2lmeSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2Ygc3RyaW5naWZ5KSBzdHJpbmdpZnkgPSBxcy5zdHJpbmdpZnk7XG5cbiAgdmFyIHF1ZXJ5XG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBob3N0ID0gdXJsLmhvc3RcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPVxuICAgIHByb3RvY29sICtcbiAgICAoKHVybC5wcm90b2NvbCAmJiB1cmwuc2xhc2hlcykgfHwgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgPyAnLy8nIDogJycpO1xuXG4gIGlmICh1cmwudXNlcm5hbWUpIHtcbiAgICByZXN1bHQgKz0gdXJsLnVzZXJuYW1lO1xuICAgIGlmICh1cmwucGFzc3dvcmQpIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9IGVsc2UgaWYgKHVybC5wYXNzd29yZCkge1xuICAgIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9IGVsc2UgaWYgKFxuICAgIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgIGlzU3BlY2lhbCh1cmwucHJvdG9jb2wpICYmXG4gICAgIWhvc3QgJiZcbiAgICB1cmwucGF0aG5hbWUgIT09ICcvJ1xuICApIHtcbiAgICAvL1xuICAgIC8vIEFkZCBiYWNrIHRoZSBlbXB0eSB1c2VyaW5mbywgb3RoZXJ3aXNlIHRoZSBvcmlnaW5hbCBpbnZhbGlkIFVSTFxuICAgIC8vIG1pZ2h0IGJlIHRyYW5zZm9ybWVkIGludG8gYSB2YWxpZCBvbmUgd2l0aCBgdXJsLnBhdGhuYW1lYCBhcyBob3N0LlxuICAgIC8vXG4gICAgcmVzdWx0ICs9ICdAJztcbiAgfVxuXG4gIC8vXG4gIC8vIFRyYWlsaW5nIGNvbG9uIGlzIHJlbW92ZWQgZnJvbSBgdXJsLmhvc3RgIHdoZW4gaXQgaXMgcGFyc2VkLiBJZiBpdCBzdGlsbFxuICAvLyBlbmRzIHdpdGggYSBjb2xvbiwgdGhlbiBhZGQgYmFjayB0aGUgdHJhaWxpbmcgY29sb24gdGhhdCB3YXMgcmVtb3ZlZC4gVGhpc1xuICAvLyBwcmV2ZW50cyBhbiBpbnZhbGlkIFVSTCBmcm9tIGJlaW5nIHRyYW5zZm9ybWVkIGludG8gYSB2YWxpZCBvbmUuXG4gIC8vXG4gIGlmIChob3N0W2hvc3QubGVuZ3RoIC0gMV0gPT09ICc6JyB8fCAocG9ydC50ZXN0KHVybC5ob3N0bmFtZSkgJiYgIXVybC5wb3J0KSkge1xuICAgIGhvc3QgKz0gJzonO1xuICB9XG5cbiAgcmVzdWx0ICs9IGhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VcmwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVXJsLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVybC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVybC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuVXJsLnFzID0gcXM7XG5cbm1vZHVsZS5leHBvcnRzID0gVXJsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvdXRpbC90eXBlcy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8xMTJjYzdjMjc1NTEyNTRhYTJiMTcwOThmYjc3NDg2N2YwNWVkMGQ5XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJndW1lbnRzT2JqZWN0ID0gcmVxdWlyZSgnaXMtYXJndW1lbnRzJyk7XG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IHJlcXVpcmUoJ2lzLWdlbmVyYXRvci1mdW5jdGlvbicpO1xudmFyIHdoaWNoVHlwZWRBcnJheSA9IHJlcXVpcmUoJ3doaWNoLXR5cGVkLWFycmF5Jyk7XG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWQtYXJyYXknKTtcblxuZnVuY3Rpb24gdW5jdXJyeVRoaXMoZikge1xuICByZXR1cm4gZi5jYWxsLmJpbmQoZik7XG59XG5cbnZhciBCaWdJbnRTdXBwb3J0ZWQgPSB0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJztcbnZhciBTeW1ib2xTdXBwb3J0ZWQgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcblxudmFyIE9iamVjdFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG5cbnZhciBudW1iZXJWYWx1ZSA9IHVuY3VycnlUaGlzKE51bWJlci5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgc3RyaW5nVmFsdWUgPSB1bmN1cnJ5VGhpcyhTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YpO1xudmFyIGJvb2xlYW5WYWx1ZSA9IHVuY3VycnlUaGlzKEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YpO1xuXG5pZiAoQmlnSW50U3VwcG9ydGVkKSB7XG4gIHZhciBiaWdJbnRWYWx1ZSA9IHVuY3VycnlUaGlzKEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZik7XG59XG5cbmlmIChTeW1ib2xTdXBwb3J0ZWQpIHtcbiAgdmFyIHN5bWJvbFZhbHVlID0gdW5jdXJyeVRoaXMoU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgcHJvdG90eXBlVmFsdWVPZikge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIHByb3RvdHlwZVZhbHVlT2YodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cy5pc0FyZ3VtZW50c09iamVjdCA9IGlzQXJndW1lbnRzT2JqZWN0O1xuZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gaXNHZW5lcmF0b3JGdW5jdGlvbjtcbmV4cG9ydHMuaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuXG4vLyBUYWtlbiBmcm9tIGhlcmUgYW5kIG1vZGlmaWVkIGZvciBiZXR0ZXIgYnJvd3NlciBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3AtaXMtcHJvbWlzZS9ibG9iL2NkYTM1YTUxM2JkYTAzZjk3N2FkNWNkZTNhMDc5ZDIzN2U4MmQ3ZWYvaW5kZXguanNcbmZ1bmN0aW9uIGlzUHJvbWlzZShpbnB1dCkge1xuXHRyZXR1cm4gKFxuXHRcdChcblx0XHRcdHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdFx0aW5wdXQgaW5zdGFuY2VvZiBQcm9taXNlXG5cdFx0KSB8fFxuXHRcdChcblx0XHRcdGlucHV0ICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdFx0dHlwZW9mIGlucHV0LmNhdGNoID09PSAnZnVuY3Rpb24nXG5cdFx0KVxuXHQpO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBpc1R5cGVkQXJyYXkodmFsdWUpIHx8XG4gICAgaXNEYXRhVmlldyh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlclZpZXcgPSBpc0FycmF5QnVmZmVyVmlldztcblxuXG5mdW5jdGlvbiBpc1VpbnQ4QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50OEFycmF5ID0gaXNVaW50OEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQ4Q2xhbXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDhDbGFtcGVkQXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4Q2xhbXBlZEFycmF5ID0gaXNVaW50OENsYW1wZWRBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MTZBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQxNkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MTZBcnJheSA9IGlzVWludDE2QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDMyQXJyYXkgPSBpc1VpbnQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDhBcnJheSc7XG59XG5leHBvcnRzLmlzSW50OEFycmF5ID0gaXNJbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50MTZBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDE2QXJyYXkgPSBpc0ludDE2QXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0ludDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDMyQXJyYXkgPSBpc0ludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzRmxvYXQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnRmxvYXQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNGbG9hdDMyQXJyYXkgPSBpc0Zsb2F0MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0NjRBcnJheSA9IGlzRmxvYXQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc0JpZ0ludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdJbnQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNCaWdJbnQ2NEFycmF5ID0gaXNCaWdJbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc0JpZ1VpbnQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnQmlnVWludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ1VpbnQ2NEFycmF5ID0gaXNCaWdVaW50NjRBcnJheTtcblxuZnVuY3Rpb24gaXNNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBNYXBdJztcbn1cbmlzTWFwVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNNYXBUb1N0cmluZyhuZXcgTWFwKCkpXG4pO1xuXG5mdW5jdGlvbiBpc01hcCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc01hcFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBNYXA7XG59XG5leHBvcnRzLmlzTWFwID0gaXNNYXA7XG5cbmZ1bmN0aW9uIGlzU2V0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2V0XSc7XG59XG5pc1NldFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzU2V0VG9TdHJpbmcobmV3IFNldCgpKVxuKTtcbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1NldFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2V0VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFNldDtcbn1cbmV4cG9ydHMuaXNTZXQgPSBpc1NldDtcblxuZnVuY3Rpb24gaXNXZWFrTWFwVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufVxuaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzV2Vha01hcFRvU3RyaW5nKG5ldyBXZWFrTWFwKCkpXG4pO1xuZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNXZWFrTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFdlYWtNYXA7XG59XG5leHBvcnRzLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcblxuZnVuY3Rpb24gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2Vha1NldF0nO1xufVxuaXNXZWFrU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFdlYWtTZXQgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzV2Vha1NldFRvU3RyaW5nKG5ldyBXZWFrU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSk7XG59XG5leHBvcnRzLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5pc0FycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc0FycmF5QnVmZmVyVG9TdHJpbmcobmV3IEFycmF5QnVmZmVyKCkpXG4pO1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0FycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn1cbmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXdUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBEYXRhVmlld10nO1xufVxuaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc0RhdGFWaWV3VG9TdHJpbmcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSwgMCwgMSkpXG4pO1xuZnVuY3Rpb24gaXNEYXRhVmlldyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRhVmlldztcbn1cbmV4cG9ydHMuaXNEYXRhVmlldyA9IGlzRGF0YVZpZXc7XG5cbi8vIFN0b3JlIGEgY29weSBvZiBTaGFyZWRBcnJheUJ1ZmZlciBpbiBjYXNlIGl0J3MgZGVsZXRlZCBlbHNld2hlcmVcbnZhciBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPSB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnID8gU2hhcmVkQXJyYXlCdWZmZXIgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2hhcmVkQXJyYXlCdWZmZXJdJztcbn1cbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgU2hhcmVkQXJyYXlCdWZmZXJDb3B5KCkpO1xuICB9XG5cbiAgcmV0dXJuIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weTtcbn1cbmV4cG9ydHMuaXNTaGFyZWRBcnJheUJ1ZmZlciA9IGlzU2hhcmVkQXJyYXlCdWZmZXI7XG5cbmZ1bmN0aW9uIGlzQXN5bmNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXSc7XG59XG5leHBvcnRzLmlzQXN5bmNGdW5jdGlvbiA9IGlzQXN5bmNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNNYXBJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBNYXAgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNNYXBJdGVyYXRvciA9IGlzTWFwSXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzU2V0SXRlcmF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgU2V0IEl0ZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzU2V0SXRlcmF0b3IgPSBpc1NldEl0ZXJhdG9yO1xuXG5mdW5jdGlvbiBpc0dlbmVyYXRvck9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBHZW5lcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNHZW5lcmF0b3JPYmplY3QgPSBpc0dlbmVyYXRvck9iamVjdDtcblxuZnVuY3Rpb24gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYkFzc2VtYmx5Lk1vZHVsZV0nO1xufVxuZXhwb3J0cy5pc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUgPSBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGU7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBudW1iZXJWYWx1ZSk7XG59XG5leHBvcnRzLmlzTnVtYmVyT2JqZWN0ID0gaXNOdW1iZXJPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzdHJpbmdWYWx1ZSk7XG59XG5leHBvcnRzLmlzU3RyaW5nT2JqZWN0ID0gaXNTdHJpbmdPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYm9vbGVhblZhbHVlKTtcbn1cbmV4cG9ydHMuaXNCb29sZWFuT2JqZWN0ID0gaXNCb29sZWFuT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0JpZ0ludE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gQmlnSW50U3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIGJpZ0ludFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNCaWdJbnRPYmplY3QgPSBpc0JpZ0ludE9iamVjdDtcblxuZnVuY3Rpb24gaXNTeW1ib2xPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIFN5bWJvbFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzeW1ib2xWYWx1ZSk7XG59XG5leHBvcnRzLmlzU3ltYm9sT2JqZWN0ID0gaXNTeW1ib2xPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQm94ZWRQcmltaXRpdmUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICBpc051bWJlck9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N0cmluZ09iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHx8XG4gICAgaXNCaWdJbnRPYmplY3QodmFsdWUpIHx8XG4gICAgaXNTeW1ib2xPYmplY3QodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQm94ZWRQcmltaXRpdmUgPSBpc0JveGVkUHJpbWl0aXZlO1xuXG5mdW5jdGlvbiBpc0FueUFycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIGlzQXJyYXlCdWZmZXIodmFsdWUpIHx8XG4gICAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNBbnlBcnJheUJ1ZmZlciA9IGlzQW55QXJyYXlCdWZmZXI7XG5cblsnaXNQcm94eScsICdpc0V4dGVybmFsJywgJ2lzTW9kdWxlTmFtZXNwYWNlT2JqZWN0J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG1ldGhvZCwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdXNlcmxhbmQnKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc2NyaXB0b3JzW2tleXNbaV1dID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gIH07XG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52UmVnZXggPSAvXiQvO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRykge1xuICB2YXIgZGVidWdFbnYgPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHO1xuICBkZWJ1Z0VudiA9IGRlYnVnRW52LnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrPy5dL2csICdcXFxcJCYnKVxuICAgIC5yZXBsYWNlKC9cXCovZywgJy4qJylcbiAgICAucmVwbGFjZSgvLC9nLCAnJHxeJylcbiAgICAudG9VcHBlckNhc2UoKTtcbiAgZGVidWdFbnZSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgZGVidWdFbnYgKyAnJCcsICdpJyk7XG59XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKGRlYnVnRW52UmVnZXgudGVzdChzZXQpKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnNsaWNlKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmV4cG9ydHMudHlwZXMgPSByZXF1aXJlKCcuL3N1cHBvcnQvdHlwZXMnKTtcblxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbmV4cG9ydHMudHlwZXMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5leHBvcnRzLnR5cGVzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuZXhwb3J0cy50eXBlcy5pc05hdGl2ZUVycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLmJpbmQobnVsbCwgbnVsbCwgcmV0KSkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZC5iaW5kKG51bGwsIHJlaiwgY2IpKSB9KTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihjYWxsYmFja2lmaWVkLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbCkpO1xuICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbn1cbmV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKCdmb3ItZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG52YXIgdHlwZWRBcnJheXMgPSBhdmFpbGFibGVUeXBlZEFycmF5cygpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgdG9TdHJUYWdzID0ge307XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7IC8vIHJlcXVpcmUoJ2dldHByb3RvdHlwZW9mJyk7XG5pZiAoaGFzVG9TdHJpbmdUYWcgJiYgZ09QRCAmJiBnZXRQcm90b3R5cGVPZikge1xuXHRmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdGlmICh0eXBlb2YgZ1t0eXBlZEFycmF5XSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0XHRpZiAoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGFycikge1xuXHRcdFx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRcdGlmICghZGVzY3JpcHRvcikge1xuXHRcdFx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dG9TdHJUYWdzW3R5cGVkQXJyYXldID0gZGVzY3JpcHRvci5nZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxudmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcblx0dmFyIGZvdW5kTmFtZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghZm91bmROYW1lKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IGdldHRlci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0aWYgKG5hbWUgPT09IHR5cGVkQXJyYXkpIHtcblx0XHRcdFx0XHRmb3VuZE5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBmb3VuZE5hbWU7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWQtYXJyYXknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCFpc1R5cGVkQXJyYXkodmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnIHx8ICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSkgeyByZXR1cm4gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiIsIi8vIEFwb2xsbydzIGxpYnJhcnkgaW1wb3J0cyB0aGUgVVJMIGNsYXNzIGZyb20gTm9kZSdzIGB1cmxgIHBhY2thZ2UuXG4vLyBVbmZvcnR1bmF0ZWx5IHRoZXJlIGlzbid0IGEgcG9seWZpbGwgbGlicmFyeSB0aGF0IHdvcmtzIGV4YWN0bHkgbGlrZSB0aGlzLlxuLy8gVGhlIGB1cmwtcGFyc2VgIGNvbWVzIGNsb3NlLCBidXQgdGhlIGNsYXNzIGlzIGl0cyBkZWZhdWx0IGV4cG9ydCwgbm90IGEgbmFtZS5cbi8vIFNvIHRoaXMgbGl0dGxlIGFkYXB0ZXIganVzdCByZS1leHBvcnRzIGl0IHVuZGVyIHRoZSBuYW1lIGBVUkxgLlxuXG5pbXBvcnQgKiBhcyB1cmxwYXJzZSBmcm9tICd1cmwtcGFyc2UnO1xuXG5leHBvcnQgbGV0IFVSTCA9IHVybHBhcnNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcG9zc2libGVOYW1lcyA9IFtcblx0J0JpZ0ludDY0QXJyYXknLFxuXHQnQmlnVWludDY0QXJyYXknLFxuXHQnRmxvYXQzMkFycmF5Jyxcblx0J0Zsb2F0NjRBcnJheScsXG5cdCdJbnQxNkFycmF5Jyxcblx0J0ludDMyQXJyYXknLFxuXHQnSW50OEFycmF5Jyxcblx0J1VpbnQxNkFycmF5Jyxcblx0J1VpbnQzMkFycmF5Jyxcblx0J1VpbnQ4QXJyYXknLFxuXHQnVWludDhDbGFtcGVkQXJyYXknXG5dO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXZhaWxhYmxlVHlwZWRBcnJheXMoKSB7XG5cdHZhciBvdXQgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb3NzaWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHR5cGVvZiBnW3Bvc3NpYmxlTmFtZXNbaV1dID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSBwb3NzaWJsZU5hbWVzW2ldO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb3V0O1xufTtcbiIsImltcG9ydCB7IGlzT2JqZWN0TGlrZSB9IGZyb20gJy4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qcyc7XG5pbXBvcnQgeyBnZXRMb2NhdGlvbiB9IGZyb20gJy4uL2xhbmd1YWdlL2xvY2F0aW9uLm1qcyc7XG5pbXBvcnQge1xuICBwcmludExvY2F0aW9uLFxuICBwcmludFNvdXJjZUxvY2F0aW9uLFxufSBmcm9tICcuLi9sYW5ndWFnZS9wcmludExvY2F0aW9uLm1qcyc7XG5cbmZ1bmN0aW9uIHRvTm9ybWFsaXplZE9wdGlvbnMoYXJncykge1xuICBjb25zdCBmaXJzdEFyZyA9IGFyZ3NbMF07XG5cbiAgaWYgKGZpcnN0QXJnID09IG51bGwgfHwgJ2tpbmQnIGluIGZpcnN0QXJnIHx8ICdsZW5ndGgnIGluIGZpcnN0QXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGVzOiBmaXJzdEFyZyxcbiAgICAgIHNvdXJjZTogYXJnc1sxXSxcbiAgICAgIHBvc2l0aW9uczogYXJnc1syXSxcbiAgICAgIHBhdGg6IGFyZ3NbM10sXG4gICAgICBvcmlnaW5hbEVycm9yOiBhcmdzWzRdLFxuICAgICAgZXh0ZW5zaW9uczogYXJnc1s1XSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZpcnN0QXJnO1xufVxuLyoqXG4gKiBBIEdyYXBoUUxFcnJvciBkZXNjcmliZXMgYW4gRXJyb3IgZm91bmQgZHVyaW5nIHRoZSBwYXJzZSwgdmFsaWRhdGUsIG9yXG4gKiBleGVjdXRlIHBoYXNlcyBvZiBwZXJmb3JtaW5nIGEgR3JhcGhRTCBvcGVyYXRpb24uIEluIGFkZGl0aW9uIHRvIGEgbWVzc2FnZVxuICogYW5kIHN0YWNrIHRyYWNlLCBpdCBhbHNvIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2NhdGlvbnMgaW4gYVxuICogR3JhcGhRTCBkb2N1bWVudCBhbmQvb3IgZXhlY3V0aW9uIHJlc3VsdCB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIEVycm9yLlxuICovXG5cbmV4cG9ydCBjbGFzcyBHcmFwaFFMRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBgeyBsaW5lLCBjb2x1bW4gfWAgbG9jYXRpb25zIHdpdGhpbiB0aGUgc291cmNlIEdyYXBoUUwgZG9jdW1lbnRcbiAgICogd2hpY2ggY29ycmVzcG9uZCB0byB0aGlzIGVycm9yLlxuICAgKlxuICAgKiBFcnJvcnMgZHVyaW5nIHZhbGlkYXRpb24gb2Z0ZW4gY29udGFpbiBtdWx0aXBsZSBsb2NhdGlvbnMsIGZvciBleGFtcGxlIHRvXG4gICAqIHBvaW50IG91dCB0d28gdGhpbmdzIHdpdGggdGhlIHNhbWUgbmFtZS4gRXJyb3JzIGR1cmluZyBleGVjdXRpb24gaW5jbHVkZSBhXG4gICAqIHNpbmdsZSBsb2NhdGlvbiwgdGhlIGZpZWxkIHdoaWNoIHByb2R1Y2VkIHRoZSBlcnJvci5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgZGVzY3JpYmluZyB0aGUgSlNPTi1wYXRoIGludG8gdGhlIGV4ZWN1dGlvbiByZXNwb25zZSB3aGljaFxuICAgKiBjb3JyZXNwb25kcyB0byB0aGlzIGVycm9yLiBPbmx5IGluY2x1ZGVkIGZvciBlcnJvcnMgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgR3JhcGhRTCBBU1QgTm9kZXMgY29ycmVzcG9uZGluZyB0byB0aGlzIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50IGZvciB0aGUgZmlyc3QgbG9jYXRpb24gb2YgdGhpcyBlcnJvci5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHRoaXMgRXJyb3IgcmVwcmVzZW50cyBtb3JlIHRoYW4gb25lIG5vZGUsIHRoZSBzb3VyY2UgbWF5IG5vdFxuICAgKiByZXByZXNlbnQgbm9kZXMgYWZ0ZXIgdGhlIGZpcnN0IG5vZGUuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXIgb2Zmc2V0cyB3aXRoaW4gdGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50XG4gICAqIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhpcyBlcnJvci5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBvcmlnaW5hbCBlcnJvciB0aHJvd24gZnJvbSBhIGZpZWxkIHJlc29sdmVyIGR1cmluZyBleGVjdXRpb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFeHRlbnNpb24gZmllbGRzIHRvIGFkZCB0byB0aGUgZm9ybWF0dGVkIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB0aGUgYEdyYXBoUUxFcnJvck9wdGlvbnNgIGNvbnN0cnVjdG9yIG92ZXJsb2FkIGluc3RlYWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCAuLi5yYXdBcmdzKSB7XG4gICAgdmFyIF90aGlzJG5vZGVzLCBfbm9kZUxvY2F0aW9ucyQsIF9yZWY7XG5cbiAgICBjb25zdCB7IG5vZGVzLCBzb3VyY2UsIHBvc2l0aW9ucywgcGF0aCwgb3JpZ2luYWxFcnJvciwgZXh0ZW5zaW9ucyB9ID1cbiAgICAgIHRvTm9ybWFsaXplZE9wdGlvbnMocmF3QXJncyk7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0dyYXBoUUxFcnJvcic7XG4gICAgdGhpcy5wYXRoID0gcGF0aCAhPT0gbnVsbCAmJiBwYXRoICE9PSB2b2lkIDAgPyBwYXRoIDogdW5kZWZpbmVkO1xuICAgIHRoaXMub3JpZ2luYWxFcnJvciA9XG4gICAgICBvcmlnaW5hbEVycm9yICE9PSBudWxsICYmIG9yaWdpbmFsRXJyb3IgIT09IHZvaWQgMFxuICAgICAgICA/IG9yaWdpbmFsRXJyb3JcbiAgICAgICAgOiB1bmRlZmluZWQ7IC8vIENvbXB1dGUgbGlzdCBvZiBibGFtZSBub2Rlcy5cblxuICAgIHRoaXMubm9kZXMgPSB1bmRlZmluZWRJZkVtcHR5KFxuICAgICAgQXJyYXkuaXNBcnJheShub2RlcykgPyBub2RlcyA6IG5vZGVzID8gW25vZGVzXSA6IHVuZGVmaW5lZCxcbiAgICApO1xuICAgIGNvbnN0IG5vZGVMb2NhdGlvbnMgPSB1bmRlZmluZWRJZkVtcHR5KFxuICAgICAgKF90aGlzJG5vZGVzID0gdGhpcy5ub2RlcykgPT09IG51bGwgfHwgX3RoaXMkbm9kZXMgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IF90aGlzJG5vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS5sb2MpLmZpbHRlcigobG9jKSA9PiBsb2MgIT0gbnVsbCksXG4gICAgKTsgLy8gQ29tcHV0ZSBsb2NhdGlvbnMgaW4gdGhlIHNvdXJjZSBmb3IgdGhlIGdpdmVuIG5vZGVzL3Bvc2l0aW9ucy5cblxuICAgIHRoaXMuc291cmNlID1cbiAgICAgIHNvdXJjZSAhPT0gbnVsbCAmJiBzb3VyY2UgIT09IHZvaWQgMFxuICAgICAgICA/IHNvdXJjZVxuICAgICAgICA6IG5vZGVMb2NhdGlvbnMgPT09IG51bGwgfHwgbm9kZUxvY2F0aW9ucyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogKF9ub2RlTG9jYXRpb25zJCA9IG5vZGVMb2NhdGlvbnNbMF0pID09PSBudWxsIHx8XG4gICAgICAgICAgX25vZGVMb2NhdGlvbnMkID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBfbm9kZUxvY2F0aW9ucyQuc291cmNlO1xuICAgIHRoaXMucG9zaXRpb25zID1cbiAgICAgIHBvc2l0aW9ucyAhPT0gbnVsbCAmJiBwb3NpdGlvbnMgIT09IHZvaWQgMFxuICAgICAgICA/IHBvc2l0aW9uc1xuICAgICAgICA6IG5vZGVMb2NhdGlvbnMgPT09IG51bGwgfHwgbm9kZUxvY2F0aW9ucyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogbm9kZUxvY2F0aW9ucy5tYXAoKGxvYykgPT4gbG9jLnN0YXJ0KTtcbiAgICB0aGlzLmxvY2F0aW9ucyA9XG4gICAgICBwb3NpdGlvbnMgJiYgc291cmNlXG4gICAgICAgID8gcG9zaXRpb25zLm1hcCgocG9zKSA9PiBnZXRMb2NhdGlvbihzb3VyY2UsIHBvcykpXG4gICAgICAgIDogbm9kZUxvY2F0aW9ucyA9PT0gbnVsbCB8fCBub2RlTG9jYXRpb25zID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBub2RlTG9jYXRpb25zLm1hcCgobG9jKSA9PiBnZXRMb2NhdGlvbihsb2Muc291cmNlLCBsb2Muc3RhcnQpKTtcbiAgICBjb25zdCBvcmlnaW5hbEV4dGVuc2lvbnMgPSBpc09iamVjdExpa2UoXG4gICAgICBvcmlnaW5hbEVycm9yID09PSBudWxsIHx8IG9yaWdpbmFsRXJyb3IgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IG9yaWdpbmFsRXJyb3IuZXh0ZW5zaW9ucyxcbiAgICApXG4gICAgICA/IG9yaWdpbmFsRXJyb3IgPT09IG51bGwgfHwgb3JpZ2luYWxFcnJvciA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogb3JpZ2luYWxFcnJvci5leHRlbnNpb25zXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPVxuICAgICAgKF9yZWYgPVxuICAgICAgICBleHRlbnNpb25zICE9PSBudWxsICYmIGV4dGVuc2lvbnMgIT09IHZvaWQgMFxuICAgICAgICAgID8gZXh0ZW5zaW9uc1xuICAgICAgICAgIDogb3JpZ2luYWxFeHRlbnNpb25zKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDBcbiAgICAgICAgPyBfcmVmXG4gICAgICAgIDogT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gT25seSBwcm9wZXJ0aWVzIHByZXNjcmliZWQgYnkgdGhlIHNwZWMgc2hvdWxkIGJlIGVudW1lcmFibGUuXG4gICAgLy8gS2VlcCB0aGUgcmVzdCBhcyBub24tZW51bWVyYWJsZS5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBub2Rlczoge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB9LFxuICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pOyAvLyBJbmNsdWRlIChub24tZW51bWVyYWJsZSkgc3RhY2sgdHJhY2UuXG5cbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxN1xuXG4gICAgaWYgKFxuICAgICAgb3JpZ2luYWxFcnJvciAhPT0gbnVsbCAmJlxuICAgICAgb3JpZ2luYWxFcnJvciAhPT0gdm9pZCAwICYmXG4gICAgICBvcmlnaW5hbEVycm9yLnN0YWNrXG4gICAgKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxFcnJvci5zdGFjayxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEdyYXBoUUxFcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCB7XG4gICAgICAgIHZhbHVlOiBFcnJvcigpLnN0YWNrLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdHcmFwaFFMRXJyb3InO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG91dHB1dCA9IHRoaXMubWVzc2FnZTtcblxuICAgIGlmICh0aGlzLm5vZGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5ub2Rlcykge1xuICAgICAgICBpZiAobm9kZS5sb2MpIHtcbiAgICAgICAgICBvdXRwdXQgKz0gJ1xcblxcbicgKyBwcmludExvY2F0aW9uKG5vZGUubG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zb3VyY2UgJiYgdGhpcy5sb2NhdGlvbnMpIHtcbiAgICAgIGZvciAoY29uc3QgbG9jYXRpb24gb2YgdGhpcy5sb2NhdGlvbnMpIHtcbiAgICAgICAgb3V0cHV0ICs9ICdcXG5cXG4nICsgcHJpbnRTb3VyY2VMb2NhdGlvbih0aGlzLnNvdXJjZSwgbG9jYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QgZm9ybWF0dGVkRXJyb3IgPSB7XG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmxvY2F0aW9ucyAhPSBudWxsKSB7XG4gICAgICBmb3JtYXR0ZWRFcnJvci5sb2NhdGlvbnMgPSB0aGlzLmxvY2F0aW9ucztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXRoICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHRlZEVycm9yLnBhdGggPSB0aGlzLnBhdGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXh0ZW5zaW9ucyAhPSBudWxsICYmIE9iamVjdC5rZXlzKHRoaXMuZXh0ZW5zaW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgZm9ybWF0dGVkRXJyb3IuZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkRXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5kZWZpbmVkSWZFbXB0eShhcnJheSkge1xuICByZXR1cm4gYXJyYXkgPT09IHVuZGVmaW5lZCB8fCBhcnJheS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBhcnJheTtcbn1cbi8qKlxuICogU2VlOiBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1FcnJvcnNcbiAqL1xuXG4vKipcbiAqIFByaW50cyBhIEdyYXBoUUxFcnJvciB0byBhIHN0cmluZywgcmVwcmVzZW50aW5nIHVzZWZ1bCBsb2NhdGlvbiBpbmZvcm1hdGlvblxuICogYWJvdXQgdGhlIGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBlcnJvci50b1N0cmluZ2AgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHYxN1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRFcnJvcihlcnJvcikge1xuICByZXR1cm4gZXJyb3IudG9TdHJpbmcoKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBHcmFwaFFMRXJyb3IsIGZvcm1hdCBpdCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIGRlc2NyaWJlZCBieSB0aGVcbiAqIFJlc3BvbnNlIEZvcm1hdCwgRXJyb3JzIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgU3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBlcnJvci50b0pTT05gIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2MTdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yLnRvSlNPTigpO1xufVxuIiwiaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4vaW5zcGVjdC5tanMnO1xuLyoqXG4gKiBTb21ldGltZXMgYSBub24tZXJyb3IgaXMgdGhyb3duLCB3cmFwIGl0IGFzIGFuIEVycm9yIGluc3RhbmNlIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgRXJyb3IgaW50ZXJmYWNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Vycm9yKHRocm93blZhbHVlKSB7XG4gIHJldHVybiB0aHJvd25WYWx1ZSBpbnN0YW5jZW9mIEVycm9yXG4gICAgPyB0aHJvd25WYWx1ZVxuICAgIDogbmV3IE5vbkVycm9yVGhyb3duKHRocm93blZhbHVlKTtcbn1cblxuY2xhc3MgTm9uRXJyb3JUaHJvd24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHRocm93blZhbHVlKSB7XG4gICAgc3VwZXIoJ1VuZXhwZWN0ZWQgZXJyb3IgdmFsdWU6ICcgKyBpbnNwZWN0KHRocm93blZhbHVlKSk7XG4gICAgdGhpcy5uYW1lID0gJ05vbkVycm9yVGhyb3duJztcbiAgICB0aGlzLnRocm93blZhbHVlID0gdGhyb3duVmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IHRvRXJyb3IgfSBmcm9tICcuLi9qc3V0aWxzL3RvRXJyb3IubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4vR3JhcGhRTEVycm9yLm1qcyc7XG4vKipcbiAqIEdpdmVuIGFuIGFyYml0cmFyeSB2YWx1ZSwgcHJlc3VtYWJseSB0aHJvd24gd2hpbGUgYXR0ZW1wdGluZyB0byBleGVjdXRlIGFcbiAqIEdyYXBoUUwgb3BlcmF0aW9uLCBwcm9kdWNlIGEgbmV3IEdyYXBoUUxFcnJvciBhd2FyZSBvZiB0aGUgbG9jYXRpb24gaW4gdGhlXG4gKiBkb2N1bWVudCByZXNwb25zaWJsZSBmb3IgdGhlIG9yaWdpbmFsIEVycm9yLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGVkRXJyb3IocmF3T3JpZ2luYWxFcnJvciwgbm9kZXMsIHBhdGgpIHtcbiAgdmFyIF9ub2RlcztcblxuICBjb25zdCBvcmlnaW5hbEVycm9yID0gdG9FcnJvcihyYXdPcmlnaW5hbEVycm9yKTsgLy8gTm90ZTogdGhpcyB1c2VzIGEgYnJhbmQtY2hlY2sgdG8gc3VwcG9ydCBHcmFwaFFMIGVycm9ycyBvcmlnaW5hdGluZyBmcm9tIG90aGVyIGNvbnRleHRzLlxuXG4gIGlmIChpc0xvY2F0ZWRHcmFwaFFMRXJyb3Iob3JpZ2luYWxFcnJvcikpIHtcbiAgICByZXR1cm4gb3JpZ2luYWxFcnJvcjtcbiAgfVxuXG4gIHJldHVybiBuZXcgR3JhcGhRTEVycm9yKG9yaWdpbmFsRXJyb3IubWVzc2FnZSwge1xuICAgIG5vZGVzOlxuICAgICAgKF9ub2RlcyA9IG9yaWdpbmFsRXJyb3Iubm9kZXMpICE9PSBudWxsICYmIF9ub2RlcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGVzXG4gICAgICAgIDogbm9kZXMsXG4gICAgc291cmNlOiBvcmlnaW5hbEVycm9yLnNvdXJjZSxcbiAgICBwb3NpdGlvbnM6IG9yaWdpbmFsRXJyb3IucG9zaXRpb25zLFxuICAgIHBhdGgsXG4gICAgb3JpZ2luYWxFcnJvcixcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTG9jYXRlZEdyYXBoUUxFcnJvcihlcnJvcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShlcnJvci5wYXRoKTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4vR3JhcGhRTEVycm9yLm1qcyc7XG4vKipcbiAqIFByb2R1Y2VzIGEgR3JhcGhRTEVycm9yIHJlcHJlc2VudGluZyBhIHN5bnRheCBlcnJvciwgY29udGFpbmluZyB1c2VmdWxcbiAqIGRlc2NyaXB0aXZlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzeW50YXggZXJyb3IncyBwb3NpdGlvbiBpbiB0aGUgc291cmNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBkZXNjcmlwdGlvbikge1xuICByZXR1cm4gbmV3IEdyYXBoUUxFcnJvcihgU3ludGF4IEVycm9yOiAke2Rlc2NyaXB0aW9ufWAsIHtcbiAgICBzb3VyY2UsXG4gICAgcG9zaXRpb25zOiBbcG9zaXRpb25dLFxuICB9KTtcbn1cbiIsImltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgaXNBYnN0cmFjdFR5cGUgfSBmcm9tICcuLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7XG4gIEdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlLFxuICBHcmFwaFFMU2tpcERpcmVjdGl2ZSxcbn0gZnJvbSAnLi4vdHlwZS9kaXJlY3RpdmVzLm1qcyc7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gJy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanMnO1xuaW1wb3J0IHsgZ2V0RGlyZWN0aXZlVmFsdWVzIH0gZnJvbSAnLi92YWx1ZXMubWpzJztcbi8qKlxuICogR2l2ZW4gYSBzZWxlY3Rpb25TZXQsIGNvbGxlY3RzIGFsbCBvZiB0aGUgZmllbGRzIGFuZCByZXR1cm5zIHRoZW0uXG4gKlxuICogQ29sbGVjdEZpZWxkcyByZXF1aXJlcyB0aGUgXCJydW50aW1lIHR5cGVcIiBvZiBhbiBvYmplY3QuIEZvciBhIGZpZWxkIHRoYXRcbiAqIHJldHVybnMgYW4gSW50ZXJmYWNlIG9yIFVuaW9uIHR5cGUsIHRoZSBcInJ1bnRpbWUgdHlwZVwiIHdpbGwgYmUgdGhlIGFjdHVhbFxuICogb2JqZWN0IHR5cGUgcmV0dXJuZWQgYnkgdGhhdCBmaWVsZC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdEZpZWxkcyhcbiAgc2NoZW1hLFxuICBmcmFnbWVudHMsXG4gIHZhcmlhYmxlVmFsdWVzLFxuICBydW50aW1lVHlwZSxcbiAgc2VsZWN0aW9uU2V0LFxuKSB7XG4gIGNvbnN0IGZpZWxkcyA9IG5ldyBNYXAoKTtcbiAgY29sbGVjdEZpZWxkc0ltcGwoXG4gICAgc2NoZW1hLFxuICAgIGZyYWdtZW50cyxcbiAgICB2YXJpYWJsZVZhbHVlcyxcbiAgICBydW50aW1lVHlwZSxcbiAgICBzZWxlY3Rpb25TZXQsXG4gICAgZmllbGRzLFxuICAgIG5ldyBTZXQoKSxcbiAgKTtcbiAgcmV0dXJuIGZpZWxkcztcbn1cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgZmllbGQgbm9kZXMsIGNvbGxlY3RzIGFsbCBvZiB0aGUgc3ViZmllbGRzIG9mIHRoZSBwYXNzZWRcbiAqIGluIGZpZWxkcywgYW5kIHJldHVybnMgdGhlbSBhdCB0aGUgZW5kLlxuICpcbiAqIENvbGxlY3RTdWJGaWVsZHMgcmVxdWlyZXMgdGhlIFwicmV0dXJuIHR5cGVcIiBvZiBhbiBvYmplY3QuIEZvciBhIGZpZWxkIHRoYXRcbiAqIHJldHVybnMgYW4gSW50ZXJmYWNlIG9yIFVuaW9uIHR5cGUsIHRoZSBcInJldHVybiB0eXBlXCIgd2lsbCBiZSB0aGUgYWN0dWFsXG4gKiBvYmplY3QgdHlwZSByZXR1cm5lZCBieSB0aGF0IGZpZWxkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0U3ViZmllbGRzKFxuICBzY2hlbWEsXG4gIGZyYWdtZW50cyxcbiAgdmFyaWFibGVWYWx1ZXMsXG4gIHJldHVyblR5cGUsXG4gIGZpZWxkTm9kZXMsXG4pIHtcbiAgY29uc3Qgc3ViRmllbGROb2RlcyA9IG5ldyBNYXAoKTtcbiAgY29uc3QgdmlzaXRlZEZyYWdtZW50TmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCBub2RlIG9mIGZpZWxkTm9kZXMpIHtcbiAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQpIHtcbiAgICAgIGNvbGxlY3RGaWVsZHNJbXBsKFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIGZyYWdtZW50cyxcbiAgICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgIHJldHVyblR5cGUsXG4gICAgICAgIG5vZGUuc2VsZWN0aW9uU2V0LFxuICAgICAgICBzdWJGaWVsZE5vZGVzLFxuICAgICAgICB2aXNpdGVkRnJhZ21lbnROYW1lcyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YkZpZWxkTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RGaWVsZHNJbXBsKFxuICBzY2hlbWEsXG4gIGZyYWdtZW50cyxcbiAgdmFyaWFibGVWYWx1ZXMsXG4gIHJ1bnRpbWVUeXBlLFxuICBzZWxlY3Rpb25TZXQsXG4gIGZpZWxkcyxcbiAgdmlzaXRlZEZyYWdtZW50TmFtZXMsXG4pIHtcbiAgZm9yIChjb25zdCBzZWxlY3Rpb24gb2Ygc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMpIHtcbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuRklFTEQ6IHtcbiAgICAgICAgaWYgKCFzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgc2VsZWN0aW9uKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmFtZSA9IGdldEZpZWxkRW50cnlLZXkoc2VsZWN0aW9uKTtcbiAgICAgICAgY29uc3QgZmllbGRMaXN0ID0gZmllbGRzLmdldChuYW1lKTtcblxuICAgICAgICBpZiAoZmllbGRMaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmaWVsZExpc3QucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkcy5zZXQobmFtZSwgW3NlbGVjdGlvbl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5JTkxJTkVfRlJBR01FTlQ6IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgc2VsZWN0aW9uKSB8fFxuICAgICAgICAgICFkb2VzRnJhZ21lbnRDb25kaXRpb25NYXRjaChzY2hlbWEsIHNlbGVjdGlvbiwgcnVudGltZVR5cGUpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGVjdEZpZWxkc0ltcGwoXG4gICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgIGZyYWdtZW50cyxcbiAgICAgICAgICB2YXJpYWJsZVZhbHVlcyxcbiAgICAgICAgICBydW50aW1lVHlwZSxcbiAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICB2aXNpdGVkRnJhZ21lbnROYW1lcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9TUFJFQUQ6IHtcbiAgICAgICAgY29uc3QgZnJhZ05hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdmlzaXRlZEZyYWdtZW50TmFtZXMuaGFzKGZyYWdOYW1lKSB8fFxuICAgICAgICAgICFzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgc2VsZWN0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZpc2l0ZWRGcmFnbWVudE5hbWVzLmFkZChmcmFnTmFtZSk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzW2ZyYWdOYW1lXTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWZyYWdtZW50IHx8XG4gICAgICAgICAgIWRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoKHNjaGVtYSwgZnJhZ21lbnQsIHJ1bnRpbWVUeXBlKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3RGaWVsZHNJbXBsKFxuICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICBmcmFnbWVudHMsXG4gICAgICAgICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgICAgcnVudGltZVR5cGUsXG4gICAgICAgICAgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICB2aXNpdGVkRnJhZ21lbnROYW1lcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBmaWVsZCBzaG91bGQgYmUgaW5jbHVkZWQgYmFzZWQgb24gdGhlIGBAaW5jbHVkZWAgYW5kIGBAc2tpcGBcbiAqIGRpcmVjdGl2ZXMsIHdoZXJlIGBAc2tpcGAgaGFzIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gYEBpbmNsdWRlYC5cbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRJbmNsdWRlTm9kZSh2YXJpYWJsZVZhbHVlcywgbm9kZSkge1xuICBjb25zdCBza2lwID0gZ2V0RGlyZWN0aXZlVmFsdWVzKEdyYXBoUUxTa2lwRGlyZWN0aXZlLCBub2RlLCB2YXJpYWJsZVZhbHVlcyk7XG5cbiAgaWYgKChza2lwID09PSBudWxsIHx8IHNraXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNraXAuaWYpID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaW5jbHVkZSA9IGdldERpcmVjdGl2ZVZhbHVlcyhcbiAgICBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSxcbiAgICBub2RlLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICApO1xuXG4gIGlmIChcbiAgICAoaW5jbHVkZSA9PT0gbnVsbCB8fCBpbmNsdWRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbmNsdWRlLmlmKSA9PT0gZmFsc2VcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBmcmFnbWVudCBpcyBhcHBsaWNhYmxlIHRvIHRoZSBnaXZlbiB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoKHNjaGVtYSwgZnJhZ21lbnQsIHR5cGUpIHtcbiAgY29uc3QgdHlwZUNvbmRpdGlvbk5vZGUgPSBmcmFnbWVudC50eXBlQ29uZGl0aW9uO1xuXG4gIGlmICghdHlwZUNvbmRpdGlvbk5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGNvbmRpdGlvbmFsVHlwZSA9IHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZUNvbmRpdGlvbk5vZGUpO1xuXG4gIGlmIChjb25kaXRpb25hbFR5cGUgPT09IHR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZShjb25kaXRpb25hbFR5cGUpKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5pc1N1YlR5cGUoY29uZGl0aW9uYWxUeXBlLCB0eXBlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgbG9naWMgdG8gY29tcHV0ZSB0aGUga2V5IG9mIGEgZ2l2ZW4gZmllbGQncyBlbnRyeVxuICovXG5cbmZ1bmN0aW9uIGdldEZpZWxkRW50cnlLZXkobm9kZSkge1xuICByZXR1cm4gbm9kZS5hbGlhcyA/IG5vZGUuYWxpYXMudmFsdWUgOiBub2RlLm5hbWUudmFsdWU7XG59XG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vanN1dGlscy9pbnZhcmlhbnQubWpzJztcbmltcG9ydCB7IGlzSXRlcmFibGVPYmplY3QgfSBmcm9tICcuLi9qc3V0aWxzL2lzSXRlcmFibGVPYmplY3QubWpzJztcbmltcG9ydCB7IGlzT2JqZWN0TGlrZSB9IGZyb20gJy4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzUHJvbWlzZS5tanMnO1xuaW1wb3J0IHsgbWVtb2l6ZTMgfSBmcm9tICcuLi9qc3V0aWxzL21lbW9pemUzLm1qcyc7XG5pbXBvcnQgeyBhZGRQYXRoLCBwYXRoVG9BcnJheSB9IGZyb20gJy4uL2pzdXRpbHMvUGF0aC5tanMnO1xuaW1wb3J0IHsgcHJvbWlzZUZvck9iamVjdCB9IGZyb20gJy4uL2pzdXRpbHMvcHJvbWlzZUZvck9iamVjdC5tanMnO1xuaW1wb3J0IHsgcHJvbWlzZVJlZHVjZSB9IGZyb20gJy4uL2pzdXRpbHMvcHJvbWlzZVJlZHVjZS5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBsb2NhdGVkRXJyb3IgfSBmcm9tICcuLi9lcnJvci9sb2NhdGVkRXJyb3IubWpzJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGVOb2RlIH0gZnJvbSAnLi4vbGFuZ3VhZ2UvYXN0Lm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7XG4gIGlzQWJzdHJhY3RUeXBlLFxuICBpc0xlYWZUeXBlLFxuICBpc0xpc3RUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc09iamVjdFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHtcbiAgU2NoZW1hTWV0YUZpZWxkRGVmLFxuICBUeXBlTWV0YUZpZWxkRGVmLFxuICBUeXBlTmFtZU1ldGFGaWVsZERlZixcbn0gZnJvbSAnLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNjaGVtYSB9IGZyb20gJy4uL3R5cGUvdmFsaWRhdGUubWpzJztcbmltcG9ydCB7XG4gIGNvbGxlY3RGaWVsZHMsXG4gIGNvbGxlY3RTdWJmaWVsZHMgYXMgX2NvbGxlY3RTdWJmaWVsZHMsXG59IGZyb20gJy4vY29sbGVjdEZpZWxkcy5tanMnO1xuaW1wb3J0IHsgZ2V0QXJndW1lbnRWYWx1ZXMsIGdldFZhcmlhYmxlVmFsdWVzIH0gZnJvbSAnLi92YWx1ZXMubWpzJztcbi8qKlxuICogQSBtZW1vaXplZCBjb2xsZWN0aW9uIG9mIHJlbGV2YW50IHN1YmZpZWxkcyB3aXRoIHJlZ2FyZCB0byB0aGUgcmV0dXJuXG4gKiB0eXBlLiBNZW1vaXppbmcgZW5zdXJlcyB0aGUgc3ViZmllbGRzIGFyZSBub3QgcmVwZWF0ZWRseSBjYWxjdWxhdGVkLCB3aGljaFxuICogc2F2ZXMgb3ZlcmhlYWQgd2hlbiByZXNvbHZpbmcgbGlzdHMgb2YgdmFsdWVzLlxuICovXG5cbmNvbnN0IGNvbGxlY3RTdWJmaWVsZHMgPSBtZW1vaXplMygoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcykgPT5cbiAgX2NvbGxlY3RTdWJmaWVsZHMoXG4gICAgZXhlQ29udGV4dC5zY2hlbWEsXG4gICAgZXhlQ29udGV4dC5mcmFnbWVudHMsXG4gICAgZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlcyxcbiAgICByZXR1cm5UeXBlLFxuICAgIGZpZWxkTm9kZXMsXG4gICksXG4pO1xuLyoqXG4gKiBUZXJtaW5vbG9neVxuICpcbiAqIFwiRGVmaW5pdGlvbnNcIiBhcmUgdGhlIGdlbmVyaWMgbmFtZSBmb3IgdG9wLWxldmVsIHN0YXRlbWVudHMgaW4gdGhlIGRvY3VtZW50LlxuICogRXhhbXBsZXMgb2YgdGhpcyBpbmNsdWRlOlxuICogMSkgT3BlcmF0aW9ucyAoc3VjaCBhcyBhIHF1ZXJ5KVxuICogMikgRnJhZ21lbnRzXG4gKlxuICogXCJPcGVyYXRpb25zXCIgYXJlIGEgZ2VuZXJpYyBuYW1lIGZvciByZXF1ZXN0cyBpbiB0aGUgZG9jdW1lbnQuXG4gKiBFeGFtcGxlcyBvZiB0aGlzIGluY2x1ZGU6XG4gKiAxKSBxdWVyeSxcbiAqIDIpIG11dGF0aW9uXG4gKlxuICogXCJTZWxlY3Rpb25zXCIgYXJlIHRoZSBkZWZpbml0aW9ucyB0aGF0IGNhbiBhcHBlYXIgbGVnYWxseSBhbmQgYXRcbiAqIHNpbmdsZSBsZXZlbCBvZiB0aGUgcXVlcnkuIFRoZXNlIGluY2x1ZGU6XG4gKiAxKSBmaWVsZCByZWZlcmVuY2VzIGUuZyBgYWBcbiAqIDIpIGZyYWdtZW50IFwic3ByZWFkc1wiIGUuZy4gYC4uLmNgXG4gKiAzKSBpbmxpbmUgZnJhZ21lbnQgXCJzcHJlYWRzXCIgZS5nLiBgLi4ub24gVHlwZSB7IGEgfWBcbiAqL1xuXG4vKipcbiAqIERhdGEgdGhhdCBtdXN0IGJlIGF2YWlsYWJsZSBhdCBhbGwgcG9pbnRzIGR1cmluZyBxdWVyeSBleGVjdXRpb24uXG4gKlxuICogTmFtZWx5LCBzY2hlbWEgb2YgdGhlIHR5cGUgc3lzdGVtIHRoYXQgaXMgY3VycmVudGx5IGV4ZWN1dGluZyxcbiAqIGFuZCB0aGUgZnJhZ21lbnRzIGRlZmluZWQgaW4gdGhlIHF1ZXJ5IGRvY3VtZW50XG4gKi9cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIkV4ZWN1dGluZyByZXF1ZXN0c1wiIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBSZXR1cm5zIGVpdGhlciBhIHN5bmNocm9ub3VzIEV4ZWN1dGlvblJlc3VsdCAoaWYgYWxsIGVuY291bnRlcmVkIHJlc29sdmVyc1xuICogYXJlIHN5bmNocm9ub3VzKSwgb3IgYSBQcm9taXNlIG9mIGFuIEV4ZWN1dGlvblJlc3VsdCB0aGF0IHdpbGwgZXZlbnR1YWxseSBiZVxuICogcmVzb2x2ZWQgYW5kIG5ldmVyIHJlamVjdGVkLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbiBkbyBub3QgcmVzdWx0IGluIGEgbGVnYWwgZXhlY3V0aW9uIGNvbnRleHQsXG4gKiBhIEdyYXBoUUxFcnJvciB3aWxsIGJlIHRocm93biBpbW1lZGlhdGVseSBleHBsYWluaW5nIHRoZSBpbnZhbGlkIGlucHV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZShhcmdzKSB7XG4gIC8vIFRlbXBvcmFyeSBmb3IgdjE1IHRvIHYxNiBtaWdyYXRpb24uIFJlbW92ZSBpbiB2MTdcbiAgYXJndW1lbnRzLmxlbmd0aCA8IDIgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdncmFwaHFsQDE2IGRyb3BwZWQgbG9uZy1kZXByZWNhdGVkIHN1cHBvcnQgZm9yIHBvc2l0aW9uYWwgYXJndW1lbnRzLCBwbGVhc2UgcGFzcyBhbiBvYmplY3QgaW5zdGVhZC4nLFxuICAgICk7XG4gIGNvbnN0IHsgc2NoZW1hLCBkb2N1bWVudCwgdmFyaWFibGVWYWx1ZXMsIHJvb3RWYWx1ZSB9ID0gYXJnczsgLy8gSWYgYXJndW1lbnRzIGFyZSBtaXNzaW5nIG9yIGluY29ycmVjdCwgdGhyb3cgYW4gZXJyb3IuXG5cbiAgYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMoc2NoZW1hLCBkb2N1bWVudCwgdmFyaWFibGVWYWx1ZXMpOyAvLyBJZiBhIHZhbGlkIGV4ZWN1dGlvbiBjb250ZXh0IGNhbm5vdCBiZSBjcmVhdGVkIGR1ZSB0byBpbmNvcnJlY3QgYXJndW1lbnRzLFxuICAvLyBhIFwiUmVzcG9uc2VcIiB3aXRoIG9ubHkgZXJyb3JzIGlzIHJldHVybmVkLlxuXG4gIGNvbnN0IGV4ZUNvbnRleHQgPSBidWlsZEV4ZWN1dGlvbkNvbnRleHQoYXJncyk7IC8vIFJldHVybiBlYXJseSBlcnJvcnMgaWYgZXhlY3V0aW9uIGNvbnRleHQgZmFpbGVkLlxuXG4gIGlmICghKCdzY2hlbWEnIGluIGV4ZUNvbnRleHQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogZXhlQ29udGV4dCxcbiAgICB9O1xuICB9IC8vIFJldHVybiBhIFByb21pc2UgdGhhdCB3aWxsIGV2ZW50dWFsbHkgcmVzb2x2ZSB0byB0aGUgZGF0YSBkZXNjcmliZWQgYnlcbiAgLy8gVGhlIFwiUmVzcG9uc2VcIiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gIC8vXG4gIC8vIElmIGVycm9ycyBhcmUgZW5jb3VudGVyZWQgd2hpbGUgZXhlY3V0aW5nIGEgR3JhcGhRTCBmaWVsZCwgb25seSB0aGF0XG4gIC8vIGZpZWxkIGFuZCBpdHMgZGVzY2VuZGFudHMgd2lsbCBiZSBvbWl0dGVkLCBhbmQgc2libGluZyBmaWVsZHMgd2lsbCBzdGlsbFxuICAvLyBiZSBleGVjdXRlZC4gQW4gZXhlY3V0aW9uIHdoaWNoIGVuY291bnRlcnMgZXJyb3JzIHdpbGwgc3RpbGwgcmVzdWx0IGluIGFcbiAgLy8gcmVzb2x2ZWQgUHJvbWlzZS5cbiAgLy9cbiAgLy8gRXJyb3JzIGZyb20gc3ViLWZpZWxkcyBvZiBhIE5vbk51bGwgdHlwZSBtYXkgcHJvcGFnYXRlIHRvIHRoZSB0b3AgbGV2ZWwsXG4gIC8vIGF0IHdoaWNoIHBvaW50IHdlIHN0aWxsIGxvZyB0aGUgZXJyb3IgYW5kIG51bGwgdGhlIHBhcmVudCBmaWVsZCwgd2hpY2hcbiAgLy8gaW4gdGhpcyBjYXNlIGlzIHRoZSBlbnRpcmUgcmVzcG9uc2UuXG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG9wZXJhdGlvbiB9ID0gZXhlQ29udGV4dDtcbiAgICBjb25zdCByZXN1bHQgPSBleGVjdXRlT3BlcmF0aW9uKGV4ZUNvbnRleHQsIG9wZXJhdGlvbiwgcm9vdFZhbHVlKTtcblxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKFxuICAgICAgICAoZGF0YSkgPT4gYnVpbGRSZXNwb25zZShkYXRhLCBleGVDb250ZXh0LmVycm9ycyksXG4gICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgIGV4ZUNvbnRleHQuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBidWlsZFJlc3BvbnNlKG51bGwsIGV4ZUNvbnRleHQuZXJyb3JzKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkUmVzcG9uc2UocmVzdWx0LCBleGVDb250ZXh0LmVycm9ycyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZXhlQ29udGV4dC5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgcmV0dXJuIGJ1aWxkUmVzcG9uc2UobnVsbCwgZXhlQ29udGV4dC5lcnJvcnMpO1xuICB9XG59XG4vKipcbiAqIEFsc28gaW1wbGVtZW50cyB0aGUgXCJFeGVjdXRpbmcgcmVxdWVzdHNcIiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKiBIb3dldmVyLCBpdCBndWFyYW50ZWVzIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkgKG9yIHRocm93IGFuIGVycm9yKSBhc3N1bWluZ1xuICogdGhhdCBhbGwgZmllbGQgcmVzb2x2ZXJzIGFyZSBhbHNvIHN5bmNocm9ub3VzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU3luYyhhcmdzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGV4ZWN1dGUoYXJncyk7IC8vIEFzc2VydCB0aGF0IHRoZSBleGVjdXRpb24gd2FzIHN5bmNocm9ub3VzLlxuXG4gIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignR3JhcGhRTCBleGVjdXRpb24gZmFpbGVkIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkuJyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBHaXZlbiBhIGNvbXBsZXRlZCBleGVjdXRpb24gY29udGV4dCBhbmQgZGF0YSwgYnVpbGQgdGhlIGB7IGVycm9ycywgZGF0YSB9YFxuICogcmVzcG9uc2UgZGVmaW5lZCBieSB0aGUgXCJSZXNwb25zZVwiIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBidWlsZFJlc3BvbnNlKGRhdGEsIGVycm9ycykge1xuICByZXR1cm4gZXJyb3JzLmxlbmd0aCA9PT0gMFxuICAgID8ge1xuICAgICAgICBkYXRhLFxuICAgICAgfVxuICAgIDoge1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGRhdGEsXG4gICAgICB9O1xufVxuLyoqXG4gKiBFc3NlbnRpYWwgYXNzZXJ0aW9ucyBiZWZvcmUgZXhlY3V0aW5nIHRvIHByb3ZpZGUgZGV2ZWxvcGVyIGZlZWRiYWNrIGZvclxuICogaW1wcm9wZXIgdXNlIG9mIHRoZSBHcmFwaFFMIGxpYnJhcnkuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkRXhlY3V0aW9uQXJndW1lbnRzKFxuICBzY2hlbWEsXG4gIGRvY3VtZW50LFxuICByYXdWYXJpYWJsZVZhbHVlcyxcbikge1xuICBkb2N1bWVudCB8fCBkZXZBc3NlcnQoZmFsc2UsICdNdXN0IHByb3ZpZGUgZG9jdW1lbnQuJyk7IC8vIElmIHRoZSBzY2hlbWEgdXNlZCBmb3IgZXhlY3V0aW9uIGlzIGludmFsaWQsIHRocm93IGFuIGVycm9yLlxuXG4gIGFzc2VydFZhbGlkU2NoZW1hKHNjaGVtYSk7IC8vIFZhcmlhYmxlcywgaWYgcHJvdmlkZWQsIG11c3QgYmUgYW4gb2JqZWN0LlxuXG4gIHJhd1ZhcmlhYmxlVmFsdWVzID09IG51bGwgfHxcbiAgICBpc09iamVjdExpa2UocmF3VmFyaWFibGVWYWx1ZXMpIHx8XG4gICAgZGV2QXNzZXJ0KFxuICAgICAgZmFsc2UsXG4gICAgICAnVmFyaWFibGVzIG11c3QgYmUgcHJvdmlkZWQgYXMgYW4gT2JqZWN0IHdoZXJlIGVhY2ggcHJvcGVydHkgaXMgYSB2YXJpYWJsZSB2YWx1ZS4gUGVyaGFwcyBsb29rIHRvIHNlZSBpZiBhbiB1bnBhcnNlZCBKU09OIHN0cmluZyB3YXMgcHJvdmlkZWQuJyxcbiAgICApO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgRXhlY3V0aW9uQ29udGV4dCBvYmplY3QgZnJvbSB0aGUgYXJndW1lbnRzIHBhc3NlZCB0b1xuICogZXhlY3V0ZSwgd2hpY2ggd2Ugd2lsbCBwYXNzIHRocm91Z2hvdXQgdGhlIG90aGVyIGV4ZWN1dGlvbiBtZXRob2RzLlxuICpcbiAqIFRocm93cyBhIEdyYXBoUUxFcnJvciBpZiBhIHZhbGlkIGV4ZWN1dGlvbiBjb250ZXh0IGNhbm5vdCBiZSBjcmVhdGVkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEV4ZWN1dGlvbkNvbnRleHQoYXJncykge1xuICB2YXIgX2RlZmluaXRpb24kbmFtZSwgX29wZXJhdGlvbiR2YXJpYWJsZURlO1xuXG4gIGNvbnN0IHtcbiAgICBzY2hlbWEsXG4gICAgZG9jdW1lbnQsXG4gICAgcm9vdFZhbHVlLFxuICAgIGNvbnRleHRWYWx1ZSxcbiAgICB2YXJpYWJsZVZhbHVlczogcmF3VmFyaWFibGVWYWx1ZXMsXG4gICAgb3BlcmF0aW9uTmFtZSxcbiAgICBmaWVsZFJlc29sdmVyLFxuICAgIHR5cGVSZXNvbHZlcixcbiAgICBzdWJzY3JpYmVGaWVsZFJlc29sdmVyLFxuICB9ID0gYXJncztcbiAgbGV0IG9wZXJhdGlvbjtcbiAgY29uc3QgZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGRlZmluaXRpb24gb2YgZG9jdW1lbnQuZGVmaW5pdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGRlZmluaXRpb24ua2luZCkge1xuICAgICAgY2FzZSBLaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OOlxuICAgICAgICBpZiAob3BlcmF0aW9uTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKG9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgICdNdXN0IHByb3ZpZGUgb3BlcmF0aW9uIG5hbWUgaWYgcXVlcnkgY29udGFpbnMgbXVsdGlwbGUgb3BlcmF0aW9ucy4nLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcGVyYXRpb24gPSBkZWZpbml0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICgoX2RlZmluaXRpb24kbmFtZSA9IGRlZmluaXRpb24ubmFtZSkgPT09IG51bGwgfHxcbiAgICAgICAgICBfZGVmaW5pdGlvbiRuYW1lID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IF9kZWZpbml0aW9uJG5hbWUudmFsdWUpID09PSBvcGVyYXRpb25OYW1lXG4gICAgICAgICkge1xuICAgICAgICAgIG9wZXJhdGlvbiA9IGRlZmluaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICAgIGZyYWdtZW50c1tkZWZpbml0aW9uLm5hbWUudmFsdWVdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6IC8vIGlnbm9yZSBub24tZXhlY3V0YWJsZSBkZWZpbml0aW9uc1xuICAgIH1cbiAgfVxuXG4gIGlmICghb3BlcmF0aW9uKSB7XG4gICAgaWYgKG9wZXJhdGlvbk5hbWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtuZXcgR3JhcGhRTEVycm9yKGBVbmtub3duIG9wZXJhdGlvbiBuYW1lZCBcIiR7b3BlcmF0aW9uTmFtZX1cIi5gKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXcgR3JhcGhRTEVycm9yKCdNdXN0IHByb3ZpZGUgYW4gb3BlcmF0aW9uLicpXTtcbiAgfSAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgY29uc3QgdmFyaWFibGVEZWZpbml0aW9ucyA9XG4gICAgKF9vcGVyYXRpb24kdmFyaWFibGVEZSA9IG9wZXJhdGlvbi52YXJpYWJsZURlZmluaXRpb25zKSAhPT0gbnVsbCAmJlxuICAgIF9vcGVyYXRpb24kdmFyaWFibGVEZSAhPT0gdm9pZCAwXG4gICAgICA/IF9vcGVyYXRpb24kdmFyaWFibGVEZVxuICAgICAgOiBbXTtcbiAgY29uc3QgY29lcmNlZFZhcmlhYmxlVmFsdWVzID0gZ2V0VmFyaWFibGVWYWx1ZXMoXG4gICAgc2NoZW1hLFxuICAgIHZhcmlhYmxlRGVmaW5pdGlvbnMsXG4gICAgcmF3VmFyaWFibGVWYWx1ZXMgIT09IG51bGwgJiYgcmF3VmFyaWFibGVWYWx1ZXMgIT09IHZvaWQgMFxuICAgICAgPyByYXdWYXJpYWJsZVZhbHVlc1xuICAgICAgOiB7fSxcbiAgICB7XG4gICAgICBtYXhFcnJvcnM6IDUwLFxuICAgIH0sXG4gICk7XG5cbiAgaWYgKGNvZXJjZWRWYXJpYWJsZVZhbHVlcy5lcnJvcnMpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhcmlhYmxlVmFsdWVzLmVycm9ycztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2NoZW1hLFxuICAgIGZyYWdtZW50cyxcbiAgICByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIG9wZXJhdGlvbixcbiAgICB2YXJpYWJsZVZhbHVlczogY29lcmNlZFZhcmlhYmxlVmFsdWVzLmNvZXJjZWQsXG4gICAgZmllbGRSZXNvbHZlcjpcbiAgICAgIGZpZWxkUmVzb2x2ZXIgIT09IG51bGwgJiYgZmllbGRSZXNvbHZlciAhPT0gdm9pZCAwXG4gICAgICAgID8gZmllbGRSZXNvbHZlclxuICAgICAgICA6IGRlZmF1bHRGaWVsZFJlc29sdmVyLFxuICAgIHR5cGVSZXNvbHZlcjpcbiAgICAgIHR5cGVSZXNvbHZlciAhPT0gbnVsbCAmJiB0eXBlUmVzb2x2ZXIgIT09IHZvaWQgMFxuICAgICAgICA/IHR5cGVSZXNvbHZlclxuICAgICAgICA6IGRlZmF1bHRUeXBlUmVzb2x2ZXIsXG4gICAgc3Vic2NyaWJlRmllbGRSZXNvbHZlcjpcbiAgICAgIHN1YnNjcmliZUZpZWxkUmVzb2x2ZXIgIT09IG51bGwgJiYgc3Vic2NyaWJlRmllbGRSZXNvbHZlciAhPT0gdm9pZCAwXG4gICAgICAgID8gc3Vic2NyaWJlRmllbGRSZXNvbHZlclxuICAgICAgICA6IGRlZmF1bHRGaWVsZFJlc29sdmVyLFxuICAgIGVycm9yczogW10sXG4gIH07XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiRXhlY3V0aW5nIG9wZXJhdGlvbnNcIiBzZWN0aW9uIG9mIHRoZSBzcGVjLlxuICovXG5cbmZ1bmN0aW9uIGV4ZWN1dGVPcGVyYXRpb24oZXhlQ29udGV4dCwgb3BlcmF0aW9uLCByb290VmFsdWUpIHtcbiAgY29uc3Qgcm9vdFR5cGUgPSBleGVDb250ZXh0LnNjaGVtYS5nZXRSb290VHlwZShvcGVyYXRpb24ub3BlcmF0aW9uKTtcblxuICBpZiAocm9vdFR5cGUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgU2NoZW1hIGlzIG5vdCBjb25maWd1cmVkIHRvIGV4ZWN1dGUgJHtvcGVyYXRpb24ub3BlcmF0aW9ufSBvcGVyYXRpb24uYCxcbiAgICAgIHtcbiAgICAgICAgbm9kZXM6IG9wZXJhdGlvbixcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJvb3RGaWVsZHMgPSBjb2xsZWN0RmllbGRzKFxuICAgIGV4ZUNvbnRleHQuc2NoZW1hLFxuICAgIGV4ZUNvbnRleHQuZnJhZ21lbnRzLFxuICAgIGV4ZUNvbnRleHQudmFyaWFibGVWYWx1ZXMsXG4gICAgcm9vdFR5cGUsXG4gICAgb3BlcmF0aW9uLnNlbGVjdGlvblNldCxcbiAgKTtcbiAgY29uc3QgcGF0aCA9IHVuZGVmaW5lZDtcblxuICBzd2l0Y2ggKG9wZXJhdGlvbi5vcGVyYXRpb24pIHtcbiAgICBjYXNlIE9wZXJhdGlvblR5cGVOb2RlLlFVRVJZOlxuICAgICAgcmV0dXJuIGV4ZWN1dGVGaWVsZHMoZXhlQ29udGV4dCwgcm9vdFR5cGUsIHJvb3RWYWx1ZSwgcGF0aCwgcm9vdEZpZWxkcyk7XG5cbiAgICBjYXNlIE9wZXJhdGlvblR5cGVOb2RlLk1VVEFUSU9OOlxuICAgICAgcmV0dXJuIGV4ZWN1dGVGaWVsZHNTZXJpYWxseShcbiAgICAgICAgZXhlQ29udGV4dCxcbiAgICAgICAgcm9vdFR5cGUsXG4gICAgICAgIHJvb3RWYWx1ZSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgcm9vdEZpZWxkcyxcbiAgICAgICk7XG5cbiAgICBjYXNlIE9wZXJhdGlvblR5cGVOb2RlLlNVQlNDUklQVElPTjpcbiAgICAgIC8vIFRPRE86IGRlcHJlY2F0ZSBgc3Vic2NyaWJlYCBhbmQgbW92ZSBhbGwgbG9naWMgaGVyZVxuICAgICAgLy8gVGVtcG9yYXJ5IHNvbHV0aW9uIHVudGlsIHdlIGZpbmlzaCBtZXJnaW5nIGV4ZWN1dGUgYW5kIHN1YnNjcmliZSB0b2dldGhlclxuICAgICAgcmV0dXJuIGV4ZWN1dGVGaWVsZHMoZXhlQ29udGV4dCwgcm9vdFR5cGUsIHJvb3RWYWx1ZSwgcGF0aCwgcm9vdEZpZWxkcyk7XG4gIH1cbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJFeGVjdXRpbmcgc2VsZWN0aW9uIHNldHNcIiBzZWN0aW9uIG9mIHRoZSBzcGVjXG4gKiBmb3IgZmllbGRzIHRoYXQgbXVzdCBiZSBleGVjdXRlZCBzZXJpYWxseS5cbiAqL1xuXG5mdW5jdGlvbiBleGVjdXRlRmllbGRzU2VyaWFsbHkoXG4gIGV4ZUNvbnRleHQsXG4gIHBhcmVudFR5cGUsXG4gIHNvdXJjZVZhbHVlLFxuICBwYXRoLFxuICBmaWVsZHMsXG4pIHtcbiAgcmV0dXJuIHByb21pc2VSZWR1Y2UoXG4gICAgZmllbGRzLmVudHJpZXMoKSxcbiAgICAocmVzdWx0cywgW3Jlc3BvbnNlTmFtZSwgZmllbGROb2Rlc10pID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkUGF0aCA9IGFkZFBhdGgocGF0aCwgcmVzcG9uc2VOYW1lLCBwYXJlbnRUeXBlLm5hbWUpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZXhlY3V0ZUZpZWxkKFxuICAgICAgICBleGVDb250ZXh0LFxuICAgICAgICBwYXJlbnRUeXBlLFxuICAgICAgICBzb3VyY2VWYWx1ZSxcbiAgICAgICAgZmllbGROb2RlcyxcbiAgICAgICAgZmllbGRQYXRoLFxuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xuICAgICAgICAgIHJlc3VsdHNbcmVzcG9uc2VOYW1lXSA9IHJlc29sdmVkUmVzdWx0O1xuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1tyZXNwb25zZU5hbWVdID0gcmVzdWx0O1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSxcbiAgICBPYmplY3QuY3JlYXRlKG51bGwpLFxuICApO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIkV4ZWN1dGluZyBzZWxlY3Rpb24gc2V0c1wiIHNlY3Rpb24gb2YgdGhlIHNwZWNcbiAqIGZvciBmaWVsZHMgdGhhdCBtYXkgYmUgZXhlY3V0ZWQgaW4gcGFyYWxsZWwuXG4gKi9cblxuZnVuY3Rpb24gZXhlY3V0ZUZpZWxkcyhleGVDb250ZXh0LCBwYXJlbnRUeXBlLCBzb3VyY2VWYWx1ZSwgcGF0aCwgZmllbGRzKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBsZXQgY29udGFpbnNQcm9taXNlID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBbcmVzcG9uc2VOYW1lLCBmaWVsZE5vZGVzXSBvZiBmaWVsZHMuZW50cmllcygpKSB7XG4gICAgY29uc3QgZmllbGRQYXRoID0gYWRkUGF0aChwYXRoLCByZXNwb25zZU5hbWUsIHBhcmVudFR5cGUubmFtZSk7XG4gICAgY29uc3QgcmVzdWx0ID0gZXhlY3V0ZUZpZWxkKFxuICAgICAgZXhlQ29udGV4dCxcbiAgICAgIHBhcmVudFR5cGUsXG4gICAgICBzb3VyY2VWYWx1ZSxcbiAgICAgIGZpZWxkTm9kZXMsXG4gICAgICBmaWVsZFBhdGgsXG4gICAgKTtcblxuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0c1tyZXNwb25zZU5hbWVdID0gcmVzdWx0O1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgY29udGFpbnNQcm9taXNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gSWYgdGhlcmUgYXJlIG5vIHByb21pc2VzLCB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIG9iamVjdFxuXG4gIGlmICghY29udGFpbnNQcm9taXNlKSB7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0gLy8gT3RoZXJ3aXNlLCByZXN1bHRzIGlzIGEgbWFwIGZyb20gZmllbGQgbmFtZSB0byB0aGUgcmVzdWx0IG9mIHJlc29sdmluZyB0aGF0XG4gIC8vIGZpZWxkLCB3aGljaCBpcyBwb3NzaWJseSBhIHByb21pc2UuIFJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIHJldHVybiB0aGlzXG4gIC8vIHNhbWUgbWFwLCBidXQgd2l0aCBhbnkgcHJvbWlzZXMgcmVwbGFjZWQgd2l0aCB0aGUgdmFsdWVzIHRoZXkgcmVzb2x2ZWQgdG8uXG5cbiAgcmV0dXJuIHByb21pc2VGb3JPYmplY3QocmVzdWx0cyk7XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiRXhlY3V0aW5nIGZpZWxkc1wiIHNlY3Rpb24gb2YgdGhlIHNwZWNcbiAqIEluIHBhcnRpY3VsYXIsIHRoaXMgZnVuY3Rpb24gZmlndXJlcyBvdXQgdGhlIHZhbHVlIHRoYXQgdGhlIGZpZWxkIHJldHVybnMgYnlcbiAqIGNhbGxpbmcgaXRzIHJlc29sdmUgZnVuY3Rpb24sIHRoZW4gY2FsbHMgY29tcGxldGVWYWx1ZSB0byBjb21wbGV0ZSBwcm9taXNlcyxcbiAqIHNlcmlhbGl6ZSBzY2FsYXJzLCBvciBleGVjdXRlIHRoZSBzdWItc2VsZWN0aW9uLXNldCBmb3Igb2JqZWN0cy5cbiAqL1xuXG5mdW5jdGlvbiBleGVjdXRlRmllbGQoZXhlQ29udGV4dCwgcGFyZW50VHlwZSwgc291cmNlLCBmaWVsZE5vZGVzLCBwYXRoKSB7XG4gIHZhciBfZmllbGREZWYkcmVzb2x2ZTtcblxuICBjb25zdCBmaWVsZERlZiA9IGdldEZpZWxkRGVmKGV4ZUNvbnRleHQuc2NoZW1hLCBwYXJlbnRUeXBlLCBmaWVsZE5vZGVzWzBdKTtcblxuICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmV0dXJuVHlwZSA9IGZpZWxkRGVmLnR5cGU7XG4gIGNvbnN0IHJlc29sdmVGbiA9XG4gICAgKF9maWVsZERlZiRyZXNvbHZlID0gZmllbGREZWYucmVzb2x2ZSkgIT09IG51bGwgJiZcbiAgICBfZmllbGREZWYkcmVzb2x2ZSAhPT0gdm9pZCAwXG4gICAgICA/IF9maWVsZERlZiRyZXNvbHZlXG4gICAgICA6IGV4ZUNvbnRleHQuZmllbGRSZXNvbHZlcjtcbiAgY29uc3QgaW5mbyA9IGJ1aWxkUmVzb2x2ZUluZm8oXG4gICAgZXhlQ29udGV4dCxcbiAgICBmaWVsZERlZixcbiAgICBmaWVsZE5vZGVzLFxuICAgIHBhcmVudFR5cGUsXG4gICAgcGF0aCxcbiAgKTsgLy8gR2V0IHRoZSByZXNvbHZlIGZ1bmN0aW9uLCByZWdhcmRsZXNzIG9mIGlmIGl0cyByZXN1bHQgaXMgbm9ybWFsIG9yIGFicnVwdCAoZXJyb3IpLlxuXG4gIHRyeSB7XG4gICAgLy8gQnVpbGQgYSBKUyBvYmplY3Qgb2YgYXJndW1lbnRzIGZyb20gdGhlIGZpZWxkLmFyZ3VtZW50cyBBU1QsIHVzaW5nIHRoZVxuICAgIC8vIHZhcmlhYmxlcyBzY29wZSB0byBmdWxmaWxsIGFueSB2YXJpYWJsZSByZWZlcmVuY2VzLlxuICAgIC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gbWVtb2l6ZSwgaW4gY2FzZSB0aGlzIGZpZWxkIGlzIHdpdGhpbiBhIExpc3QgdHlwZS5cbiAgICBjb25zdCBhcmdzID0gZ2V0QXJndW1lbnRWYWx1ZXMoXG4gICAgICBmaWVsZERlZixcbiAgICAgIGZpZWxkTm9kZXNbMF0sXG4gICAgICBleGVDb250ZXh0LnZhcmlhYmxlVmFsdWVzLFxuICAgICk7IC8vIFRoZSByZXNvbHZlIGZ1bmN0aW9uJ3Mgb3B0aW9uYWwgdGhpcmQgYXJndW1lbnQgaXMgYSBjb250ZXh0IHZhbHVlIHRoYXRcbiAgICAvLyBpcyBwcm92aWRlZCB0byBldmVyeSByZXNvbHZlIGZ1bmN0aW9uIHdpdGhpbiBhbiBleGVjdXRpb24uIEl0IGlzIGNvbW1vbmx5XG4gICAgLy8gdXNlZCB0byByZXByZXNlbnQgYW4gYXV0aGVudGljYXRlZCB1c2VyLCBvciByZXF1ZXN0LXNwZWNpZmljIGNhY2hlcy5cblxuICAgIGNvbnN0IGNvbnRleHRWYWx1ZSA9IGV4ZUNvbnRleHQuY29udGV4dFZhbHVlO1xuICAgIGNvbnN0IHJlc3VsdCA9IHJlc29sdmVGbihzb3VyY2UsIGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbyk7XG4gICAgbGV0IGNvbXBsZXRlZDtcblxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgY29tcGxldGVkID0gcmVzdWx0LnRoZW4oKHJlc29sdmVkKSA9PlxuICAgICAgICBjb21wbGV0ZVZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc29sdmVkKSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlZCA9IGNvbXBsZXRlVmFsdWUoXG4gICAgICAgIGV4ZUNvbnRleHQsXG4gICAgICAgIHJldHVyblR5cGUsXG4gICAgICAgIGZpZWxkTm9kZXMsXG4gICAgICAgIGluZm8sXG4gICAgICAgIHBhdGgsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzUHJvbWlzZShjb21wbGV0ZWQpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkb24ndCByZWx5IG9uIGEgYGNhdGNoYCBtZXRob2QsIGJ1dCB3ZSBkbyBleHBlY3QgXCJ0aGVuYWJsZVwiXG4gICAgICAvLyB0byB0YWtlIGEgc2Vjb25kIGNhbGxiYWNrIGZvciB0aGUgZXJyb3IgY2FzZS5cbiAgICAgIHJldHVybiBjb21wbGV0ZWQudGhlbih1bmRlZmluZWQsIChyYXdFcnJvcikgPT4ge1xuICAgICAgICBjb25zdCBlcnJvciA9IGxvY2F0ZWRFcnJvcihyYXdFcnJvciwgZmllbGROb2RlcywgcGF0aFRvQXJyYXkocGF0aCkpO1xuICAgICAgICByZXR1cm4gaGFuZGxlRmllbGRFcnJvcihlcnJvciwgcmV0dXJuVHlwZSwgZXhlQ29udGV4dCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGxldGVkO1xuICB9IGNhdGNoIChyYXdFcnJvcikge1xuICAgIGNvbnN0IGVycm9yID0gbG9jYXRlZEVycm9yKHJhd0Vycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShwYXRoKSk7XG4gICAgcmV0dXJuIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIHJldHVyblR5cGUsIGV4ZUNvbnRleHQpO1xuICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlc29sdmVJbmZvKFxuICBleGVDb250ZXh0LFxuICBmaWVsZERlZixcbiAgZmllbGROb2RlcyxcbiAgcGFyZW50VHlwZSxcbiAgcGF0aCxcbikge1xuICAvLyBUaGUgcmVzb2x2ZSBmdW5jdGlvbidzIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCBpcyBhIGNvbGxlY3Rpb24gb2ZcbiAgLy8gaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZXhlY3V0aW9uIHN0YXRlLlxuICByZXR1cm4ge1xuICAgIGZpZWxkTmFtZTogZmllbGREZWYubmFtZSxcbiAgICBmaWVsZE5vZGVzLFxuICAgIHJldHVyblR5cGU6IGZpZWxkRGVmLnR5cGUsXG4gICAgcGFyZW50VHlwZSxcbiAgICBwYXRoLFxuICAgIHNjaGVtYTogZXhlQ29udGV4dC5zY2hlbWEsXG4gICAgZnJhZ21lbnRzOiBleGVDb250ZXh0LmZyYWdtZW50cyxcbiAgICByb290VmFsdWU6IGV4ZUNvbnRleHQucm9vdFZhbHVlLFxuICAgIG9wZXJhdGlvbjogZXhlQ29udGV4dC5vcGVyYXRpb24sXG4gICAgdmFyaWFibGVWYWx1ZXM6IGV4ZUNvbnRleHQudmFyaWFibGVWYWx1ZXMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIHJldHVyblR5cGUsIGV4ZUNvbnRleHQpIHtcbiAgLy8gSWYgdGhlIGZpZWxkIHR5cGUgaXMgbm9uLW51bGxhYmxlLCB0aGVuIGl0IGlzIHJlc29sdmVkIHdpdGhvdXQgYW55XG4gIC8vIHByb3RlY3Rpb24gZnJvbSBlcnJvcnMsIGhvd2V2ZXIgaXQgc3RpbGwgcHJvcGVybHkgbG9jYXRlcyB0aGUgZXJyb3IuXG4gIGlmIChpc05vbk51bGxUeXBlKHJldHVyblR5cGUpKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gLy8gT3RoZXJ3aXNlLCBlcnJvciBwcm90ZWN0aW9uIGlzIGFwcGxpZWQsIGxvZ2dpbmcgdGhlIGVycm9yIGFuZCByZXNvbHZpbmdcbiAgLy8gYSBudWxsIHZhbHVlIGZvciB0aGlzIGZpZWxkIGlmIG9uZSBpcyBlbmNvdW50ZXJlZC5cblxuICBleGVDb250ZXh0LmVycm9ycy5wdXNoKGVycm9yKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGluc3RydWN0aW9ucyBmb3IgY29tcGxldGVWYWx1ZSBhcyBkZWZpbmVkIGluIHRoZVxuICogXCJWYWx1ZSBDb21wbGV0aW9uXCIgc2VjdGlvbiBvZiB0aGUgc3BlYy5cbiAqXG4gKiBJZiB0aGUgZmllbGQgdHlwZSBpcyBOb24tTnVsbCwgdGhlbiB0aGlzIHJlY3Vyc2l2ZWx5IGNvbXBsZXRlcyB0aGUgdmFsdWVcbiAqIGZvciB0aGUgaW5uZXIgdHlwZS4gSXQgdGhyb3dzIGEgZmllbGQgZXJyb3IgaWYgdGhhdCBjb21wbGV0aW9uIHJldHVybnMgbnVsbCxcbiAqIGFzIHBlciB0aGUgXCJOdWxsYWJpbGl0eVwiIHNlY3Rpb24gb2YgdGhlIHNwZWMuXG4gKlxuICogSWYgdGhlIGZpZWxkIHR5cGUgaXMgYSBMaXN0LCB0aGVuIHRoaXMgcmVjdXJzaXZlbHkgY29tcGxldGVzIHRoZSB2YWx1ZVxuICogZm9yIHRoZSBpbm5lciB0eXBlIG9uIGVhY2ggaXRlbSBpbiB0aGUgbGlzdC5cbiAqXG4gKiBJZiB0aGUgZmllbGQgdHlwZSBpcyBhIFNjYWxhciBvciBFbnVtLCBlbnN1cmVzIHRoZSBjb21wbGV0ZWQgdmFsdWUgaXMgYSBsZWdhbFxuICogdmFsdWUgb2YgdGhlIHR5cGUgYnkgY2FsbGluZyB0aGUgYHNlcmlhbGl6ZWAgbWV0aG9kIG9mIEdyYXBoUUwgdHlwZVxuICogZGVmaW5pdGlvbi5cbiAqXG4gKiBJZiB0aGUgZmllbGQgaXMgYW4gYWJzdHJhY3QgdHlwZSwgZGV0ZXJtaW5lIHRoZSBydW50aW1lIHR5cGUgb2YgdGhlIHZhbHVlXG4gKiBhbmQgdGhlbiBjb21wbGV0ZSBiYXNlZCBvbiB0aGF0IHR5cGVcbiAqXG4gKiBPdGhlcndpc2UsIHRoZSBmaWVsZCB0eXBlIGV4cGVjdHMgYSBzdWItc2VsZWN0aW9uIHNldCwgYW5kIHdpbGwgY29tcGxldGUgdGhlXG4gKiB2YWx1ZSBieSBleGVjdXRpbmcgYWxsIHN1Yi1zZWxlY3Rpb25zLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KSB7XG4gIC8vIElmIHJlc3VsdCBpcyBhbiBFcnJvciwgdGhyb3cgYSBsb2NhdGVkIGVycm9yLlxuICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB0aHJvdyByZXN1bHQ7XG4gIH0gLy8gSWYgZmllbGQgdHlwZSBpcyBOb25OdWxsLCBjb21wbGV0ZSBmb3IgaW5uZXIgdHlwZSwgYW5kIHRocm93IGZpZWxkIGVycm9yXG4gIC8vIGlmIHJlc3VsdCBpcyBudWxsLlxuXG4gIGlmIChpc05vbk51bGxUeXBlKHJldHVyblR5cGUpKSB7XG4gICAgY29uc3QgY29tcGxldGVkID0gY29tcGxldGVWYWx1ZShcbiAgICAgIGV4ZUNvbnRleHQsXG4gICAgICByZXR1cm5UeXBlLm9mVHlwZSxcbiAgICAgIGZpZWxkTm9kZXMsXG4gICAgICBpbmZvLFxuICAgICAgcGF0aCxcbiAgICAgIHJlc3VsdCxcbiAgICApO1xuXG4gICAgaWYgKGNvbXBsZXRlZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2Fubm90IHJldHVybiBudWxsIGZvciBub24tbnVsbGFibGUgZmllbGQgJHtpbmZvLnBhcmVudFR5cGUubmFtZX0uJHtpbmZvLmZpZWxkTmFtZX0uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgfSAvLyBJZiByZXN1bHQgdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWQgdGhlbiByZXR1cm4gbnVsbC5cblxuICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIExpc3QsIGNvbXBsZXRlIGVhY2ggaXRlbSBpbiB0aGUgbGlzdCB3aXRoIHRoZSBpbm5lciB0eXBlXG5cbiAgaWYgKGlzTGlzdFR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVMaXN0VmFsdWUoXG4gICAgICBleGVDb250ZXh0LFxuICAgICAgcmV0dXJuVHlwZSxcbiAgICAgIGZpZWxkTm9kZXMsXG4gICAgICBpbmZvLFxuICAgICAgcGF0aCxcbiAgICAgIHJlc3VsdCxcbiAgICApO1xuICB9IC8vIElmIGZpZWxkIHR5cGUgaXMgYSBsZWFmIHR5cGUsIFNjYWxhciBvciBFbnVtLCBzZXJpYWxpemUgdG8gYSB2YWxpZCB2YWx1ZSxcbiAgLy8gcmV0dXJuaW5nIG51bGwgaWYgc2VyaWFsaXphdGlvbiBpcyBub3QgcG9zc2libGUuXG5cbiAgaWYgKGlzTGVhZlR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVMZWFmVmFsdWUocmV0dXJuVHlwZSwgcmVzdWx0KTtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIGFuIGFic3RyYWN0IHR5cGUsIEludGVyZmFjZSBvciBVbmlvbiwgZGV0ZXJtaW5lIHRoZVxuICAvLyBydW50aW1lIE9iamVjdCB0eXBlIGFuZCBjb21wbGV0ZSBmb3IgdGhhdCB0eXBlLlxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHJldHVybiBjb21wbGV0ZUFic3RyYWN0VmFsdWUoXG4gICAgICBleGVDb250ZXh0LFxuICAgICAgcmV0dXJuVHlwZSxcbiAgICAgIGZpZWxkTm9kZXMsXG4gICAgICBpbmZvLFxuICAgICAgcGF0aCxcbiAgICAgIHJlc3VsdCxcbiAgICApO1xuICB9IC8vIElmIGZpZWxkIHR5cGUgaXMgT2JqZWN0LCBleGVjdXRlIGFuZCBjb21wbGV0ZSBhbGwgc3ViLXNlbGVjdGlvbnMuXG5cbiAgaWYgKGlzT2JqZWN0VHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHJldHVybiBjb21wbGV0ZU9iamVjdFZhbHVlKFxuICAgICAgZXhlQ29udGV4dCxcbiAgICAgIHJldHVyblR5cGUsXG4gICAgICBmaWVsZE5vZGVzLFxuICAgICAgaW5mbyxcbiAgICAgIHBhdGgsXG4gICAgICByZXN1bHQsXG4gICAgKTtcbiAgfVxuICAvKiBjOCBpZ25vcmUgbmV4dCA2ICovXG4gIC8vIE5vdCByZWFjaGFibGUsIGFsbCBwb3NzaWJsZSBvdXRwdXQgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgZmFsc2UgfHxcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYW5ub3QgY29tcGxldGUgdmFsdWUgb2YgdW5leHBlY3RlZCBvdXRwdXQgdHlwZTogJyArIGluc3BlY3QocmV0dXJuVHlwZSksXG4gICAgKTtcbn1cbi8qKlxuICogQ29tcGxldGUgYSBsaXN0IHZhbHVlIGJ5IGNvbXBsZXRpbmcgZWFjaCBpdGVtIGluIHRoZSBsaXN0IHdpdGggdGhlXG4gKiBpbm5lciB0eXBlXG4gKi9cblxuZnVuY3Rpb24gY29tcGxldGVMaXN0VmFsdWUoXG4gIGV4ZUNvbnRleHQsXG4gIHJldHVyblR5cGUsXG4gIGZpZWxkTm9kZXMsXG4gIGluZm8sXG4gIHBhdGgsXG4gIHJlc3VsdCxcbikge1xuICBpZiAoIWlzSXRlcmFibGVPYmplY3QocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgSXRlcmFibGUsIGJ1dCBkaWQgbm90IGZpbmQgb25lIGZvciBmaWVsZCBcIiR7aW5mby5wYXJlbnRUeXBlLm5hbWV9LiR7aW5mby5maWVsZE5hbWV9XCIuYCxcbiAgICApO1xuICB9IC8vIFRoaXMgaXMgc3BlY2lmaWVkIGFzIGEgc2ltcGxlIG1hcCwgaG93ZXZlciB3ZSdyZSBvcHRpbWl6aW5nIHRoZSBwYXRoXG4gIC8vIHdoZXJlIHRoZSBsaXN0IGNvbnRhaW5zIG5vIFByb21pc2VzIGJ5IGF2b2lkaW5nIGNyZWF0aW5nIGFub3RoZXIgUHJvbWlzZS5cblxuICBjb25zdCBpdGVtVHlwZSA9IHJldHVyblR5cGUub2ZUeXBlO1xuICBsZXQgY29udGFpbnNQcm9taXNlID0gZmFsc2U7XG4gIGNvbnN0IGNvbXBsZXRlZFJlc3VsdHMgPSBBcnJheS5mcm9tKHJlc3VsdCwgKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgLy8gTm8gbmVlZCB0byBtb2RpZnkgdGhlIGluZm8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHBhdGgsXG4gICAgLy8gc2luY2UgZnJvbSBoZXJlIG9uIGl0IGlzIG5vdCBldmVyIGFjY2Vzc2VkIGJ5IHJlc29sdmVyIGZ1bmN0aW9ucy5cbiAgICBjb25zdCBpdGVtUGF0aCA9IGFkZFBhdGgocGF0aCwgaW5kZXgsIHVuZGVmaW5lZCk7XG5cbiAgICB0cnkge1xuICAgICAgbGV0IGNvbXBsZXRlZEl0ZW07XG5cbiAgICAgIGlmIChpc1Byb21pc2UoaXRlbSkpIHtcbiAgICAgICAgY29tcGxldGVkSXRlbSA9IGl0ZW0udGhlbigocmVzb2x2ZWQpID0+XG4gICAgICAgICAgY29tcGxldGVWYWx1ZShcbiAgICAgICAgICAgIGV4ZUNvbnRleHQsXG4gICAgICAgICAgICBpdGVtVHlwZSxcbiAgICAgICAgICAgIGZpZWxkTm9kZXMsXG4gICAgICAgICAgICBpbmZvLFxuICAgICAgICAgICAgaXRlbVBhdGgsXG4gICAgICAgICAgICByZXNvbHZlZCxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGVkSXRlbSA9IGNvbXBsZXRlVmFsdWUoXG4gICAgICAgICAgZXhlQ29udGV4dCxcbiAgICAgICAgICBpdGVtVHlwZSxcbiAgICAgICAgICBmaWVsZE5vZGVzLFxuICAgICAgICAgIGluZm8sXG4gICAgICAgICAgaXRlbVBhdGgsXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUHJvbWlzZShjb21wbGV0ZWRJdGVtKSkge1xuICAgICAgICBjb250YWluc1Byb21pc2UgPSB0cnVlOyAvLyBOb3RlOiB3ZSBkb24ndCByZWx5IG9uIGEgYGNhdGNoYCBtZXRob2QsIGJ1dCB3ZSBkbyBleHBlY3QgXCJ0aGVuYWJsZVwiXG4gICAgICAgIC8vIHRvIHRha2UgYSBzZWNvbmQgY2FsbGJhY2sgZm9yIHRoZSBlcnJvciBjYXNlLlxuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWRJdGVtLnRoZW4odW5kZWZpbmVkLCAocmF3RXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IGxvY2F0ZWRFcnJvcihcbiAgICAgICAgICAgIHJhd0Vycm9yLFxuICAgICAgICAgICAgZmllbGROb2RlcyxcbiAgICAgICAgICAgIHBhdGhUb0FycmF5KGl0ZW1QYXRoKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVGaWVsZEVycm9yKGVycm9yLCBpdGVtVHlwZSwgZXhlQ29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcGxldGVkSXRlbTtcbiAgICB9IGNhdGNoIChyYXdFcnJvcikge1xuICAgICAgY29uc3QgZXJyb3IgPSBsb2NhdGVkRXJyb3IocmF3RXJyb3IsIGZpZWxkTm9kZXMsIHBhdGhUb0FycmF5KGl0ZW1QYXRoKSk7XG4gICAgICByZXR1cm4gaGFuZGxlRmllbGRFcnJvcihlcnJvciwgaXRlbVR5cGUsIGV4ZUNvbnRleHQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb250YWluc1Byb21pc2UgPyBQcm9taXNlLmFsbChjb21wbGV0ZWRSZXN1bHRzKSA6IGNvbXBsZXRlZFJlc3VsdHM7XG59XG4vKipcbiAqIENvbXBsZXRlIGEgU2NhbGFyIG9yIEVudW0gYnkgc2VyaWFsaXppbmcgdG8gYSB2YWxpZCB2YWx1ZSwgcmV0dXJuaW5nXG4gKiBudWxsIGlmIHNlcmlhbGl6YXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBsZXRlTGVhZlZhbHVlKHJldHVyblR5cGUsIHJlc3VsdCkge1xuICBjb25zdCBzZXJpYWxpemVkUmVzdWx0ID0gcmV0dXJuVHlwZS5zZXJpYWxpemUocmVzdWx0KTtcblxuICBpZiAoc2VyaWFsaXplZFJlc3VsdCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkIFxcYCR7aW5zcGVjdChyZXR1cm5UeXBlKX0uc2VyaWFsaXplKCR7aW5zcGVjdChyZXN1bHQpfSlcXGAgdG8gYCArXG4gICAgICAgIGByZXR1cm4gbm9uLW51bGxhYmxlIHZhbHVlLCByZXR1cm5lZDogJHtpbnNwZWN0KHNlcmlhbGl6ZWRSZXN1bHQpfWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVkUmVzdWx0O1xufVxuLyoqXG4gKiBDb21wbGV0ZSBhIHZhbHVlIG9mIGFuIGFic3RyYWN0IHR5cGUgYnkgZGV0ZXJtaW5pbmcgdGhlIHJ1bnRpbWUgb2JqZWN0IHR5cGVcbiAqIG9mIHRoYXQgdmFsdWUsIHRoZW4gY29tcGxldGUgdGhlIHZhbHVlIGZvciB0aGF0IHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gY29tcGxldGVBYnN0cmFjdFZhbHVlKFxuICBleGVDb250ZXh0LFxuICByZXR1cm5UeXBlLFxuICBmaWVsZE5vZGVzLFxuICBpbmZvLFxuICBwYXRoLFxuICByZXN1bHQsXG4pIHtcbiAgdmFyIF9yZXR1cm5UeXBlJHJlc29sdmVUeTtcblxuICBjb25zdCByZXNvbHZlVHlwZUZuID1cbiAgICAoX3JldHVyblR5cGUkcmVzb2x2ZVR5ID0gcmV0dXJuVHlwZS5yZXNvbHZlVHlwZSkgIT09IG51bGwgJiZcbiAgICBfcmV0dXJuVHlwZSRyZXNvbHZlVHkgIT09IHZvaWQgMFxuICAgICAgPyBfcmV0dXJuVHlwZSRyZXNvbHZlVHlcbiAgICAgIDogZXhlQ29udGV4dC50eXBlUmVzb2x2ZXI7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IGV4ZUNvbnRleHQuY29udGV4dFZhbHVlO1xuICBjb25zdCBydW50aW1lVHlwZSA9IHJlc29sdmVUeXBlRm4ocmVzdWx0LCBjb250ZXh0VmFsdWUsIGluZm8sIHJldHVyblR5cGUpO1xuXG4gIGlmIChpc1Byb21pc2UocnVudGltZVR5cGUpKSB7XG4gICAgcmV0dXJuIHJ1bnRpbWVUeXBlLnRoZW4oKHJlc29sdmVkUnVudGltZVR5cGUpID0+XG4gICAgICBjb21wbGV0ZU9iamVjdFZhbHVlKFxuICAgICAgICBleGVDb250ZXh0LFxuICAgICAgICBlbnN1cmVWYWxpZFJ1bnRpbWVUeXBlKFxuICAgICAgICAgIHJlc29sdmVkUnVudGltZVR5cGUsXG4gICAgICAgICAgZXhlQ29udGV4dCxcbiAgICAgICAgICByZXR1cm5UeXBlLFxuICAgICAgICAgIGZpZWxkTm9kZXMsXG4gICAgICAgICAgaW5mbyxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICksXG4gICAgICAgIGZpZWxkTm9kZXMsXG4gICAgICAgIGluZm8sXG4gICAgICAgIHBhdGgsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjb21wbGV0ZU9iamVjdFZhbHVlKFxuICAgIGV4ZUNvbnRleHQsXG4gICAgZW5zdXJlVmFsaWRSdW50aW1lVHlwZShcbiAgICAgIHJ1bnRpbWVUeXBlLFxuICAgICAgZXhlQ29udGV4dCxcbiAgICAgIHJldHVyblR5cGUsXG4gICAgICBmaWVsZE5vZGVzLFxuICAgICAgaW5mbyxcbiAgICAgIHJlc3VsdCxcbiAgICApLFxuICAgIGZpZWxkTm9kZXMsXG4gICAgaW5mbyxcbiAgICBwYXRoLFxuICAgIHJlc3VsdCxcbiAgKTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlVmFsaWRSdW50aW1lVHlwZShcbiAgcnVudGltZVR5cGVOYW1lLFxuICBleGVDb250ZXh0LFxuICByZXR1cm5UeXBlLFxuICBmaWVsZE5vZGVzLFxuICBpbmZvLFxuICByZXN1bHQsXG4pIHtcbiAgaWYgKHJ1bnRpbWVUeXBlTmFtZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgIGBBYnN0cmFjdCB0eXBlIFwiJHtyZXR1cm5UeXBlLm5hbWV9XCIgbXVzdCByZXNvbHZlIHRvIGFuIE9iamVjdCB0eXBlIGF0IHJ1bnRpbWUgZm9yIGZpZWxkIFwiJHtpbmZvLnBhcmVudFR5cGUubmFtZX0uJHtpbmZvLmZpZWxkTmFtZX1cIi4gRWl0aGVyIHRoZSBcIiR7cmV0dXJuVHlwZS5uYW1lfVwiIHR5cGUgc2hvdWxkIHByb3ZpZGUgYSBcInJlc29sdmVUeXBlXCIgZnVuY3Rpb24gb3IgZWFjaCBwb3NzaWJsZSB0eXBlIHNob3VsZCBwcm92aWRlIGFuIFwiaXNUeXBlT2ZcIiBmdW5jdGlvbi5gLFxuICAgICAgZmllbGROb2RlcyxcbiAgICApO1xuICB9IC8vIHJlbGVhc2VzIGJlZm9yZSAxNi4wLjAgc3VwcG9ydGVkIHJldHVybmluZyBgR3JhcGhRTE9iamVjdFR5cGVgIGZyb20gYHJlc29sdmVUeXBlYFxuICAvLyBUT0RPOiByZW1vdmUgaW4gMTcuMC4wIHJlbGVhc2VcblxuICBpZiAoaXNPYmplY3RUeXBlKHJ1bnRpbWVUeXBlTmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgJ1N1cHBvcnQgZm9yIHJldHVybmluZyBHcmFwaFFMT2JqZWN0VHlwZSBmcm9tIHJlc29sdmVUeXBlIHdhcyByZW1vdmVkIGluIGdyYXBocWwtanNAMTYuMC4wIHBsZWFzZSByZXR1cm4gdHlwZSBuYW1lIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBydW50aW1lVHlwZU5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgIGBBYnN0cmFjdCB0eXBlIFwiJHtyZXR1cm5UeXBlLm5hbWV9XCIgbXVzdCByZXNvbHZlIHRvIGFuIE9iamVjdCB0eXBlIGF0IHJ1bnRpbWUgZm9yIGZpZWxkIFwiJHtpbmZvLnBhcmVudFR5cGUubmFtZX0uJHtpbmZvLmZpZWxkTmFtZX1cIiB3aXRoIGAgK1xuICAgICAgICBgdmFsdWUgJHtpbnNwZWN0KHJlc3VsdCl9LCByZWNlaXZlZCBcIiR7aW5zcGVjdChydW50aW1lVHlwZU5hbWUpfVwiLmAsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJ1bnRpbWVUeXBlID0gZXhlQ29udGV4dC5zY2hlbWEuZ2V0VHlwZShydW50aW1lVHlwZU5hbWUpO1xuXG4gIGlmIChydW50aW1lVHlwZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgIGBBYnN0cmFjdCB0eXBlIFwiJHtyZXR1cm5UeXBlLm5hbWV9XCIgd2FzIHJlc29sdmVkIHRvIGEgdHlwZSBcIiR7cnVudGltZVR5cGVOYW1lfVwiIHRoYXQgZG9lcyBub3QgZXhpc3QgaW5zaWRlIHRoZSBzY2hlbWEuYCxcbiAgICAgIHtcbiAgICAgICAgbm9kZXM6IGZpZWxkTm9kZXMsXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBpZiAoIWlzT2JqZWN0VHlwZShydW50aW1lVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgYEFic3RyYWN0IHR5cGUgXCIke3JldHVyblR5cGUubmFtZX1cIiB3YXMgcmVzb2x2ZWQgdG8gYSBub24tb2JqZWN0IHR5cGUgXCIke3J1bnRpbWVUeXBlTmFtZX1cIi5gLFxuICAgICAge1xuICAgICAgICBub2RlczogZmllbGROb2RlcyxcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGlmICghZXhlQ29udGV4dC5zY2hlbWEuaXNTdWJUeXBlKHJldHVyblR5cGUsIHJ1bnRpbWVUeXBlKSkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgUnVudGltZSBPYmplY3QgdHlwZSBcIiR7cnVudGltZVR5cGUubmFtZX1cIiBpcyBub3QgYSBwb3NzaWJsZSB0eXBlIGZvciBcIiR7cmV0dXJuVHlwZS5uYW1lfVwiLmAsXG4gICAgICB7XG4gICAgICAgIG5vZGVzOiBmaWVsZE5vZGVzLFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJ1bnRpbWVUeXBlO1xufVxuLyoqXG4gKiBDb21wbGV0ZSBhbiBPYmplY3QgdmFsdWUgYnkgZXhlY3V0aW5nIGFsbCBzdWItc2VsZWN0aW9ucy5cbiAqL1xuXG5mdW5jdGlvbiBjb21wbGV0ZU9iamVjdFZhbHVlKFxuICBleGVDb250ZXh0LFxuICByZXR1cm5UeXBlLFxuICBmaWVsZE5vZGVzLFxuICBpbmZvLFxuICBwYXRoLFxuICByZXN1bHQsXG4pIHtcbiAgLy8gQ29sbGVjdCBzdWItZmllbGRzIHRvIGV4ZWN1dGUgdG8gY29tcGxldGUgdGhpcyB2YWx1ZS5cbiAgY29uc3Qgc3ViRmllbGROb2RlcyA9IGNvbGxlY3RTdWJmaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2Rlcyk7IC8vIElmIHRoZXJlIGlzIGFuIGlzVHlwZU9mIHByZWRpY2F0ZSBmdW5jdGlvbiwgY2FsbCBpdCB3aXRoIHRoZVxuICAvLyBjdXJyZW50IHJlc3VsdC4gSWYgaXNUeXBlT2YgcmV0dXJucyBmYWxzZSwgdGhlbiByYWlzZSBhbiBlcnJvciByYXRoZXJcbiAgLy8gdGhhbiBjb250aW51aW5nIGV4ZWN1dGlvbi5cblxuICBpZiAocmV0dXJuVHlwZS5pc1R5cGVPZikge1xuICAgIGNvbnN0IGlzVHlwZU9mID0gcmV0dXJuVHlwZS5pc1R5cGVPZihyZXN1bHQsIGV4ZUNvbnRleHQuY29udGV4dFZhbHVlLCBpbmZvKTtcblxuICAgIGlmIChpc1Byb21pc2UoaXNUeXBlT2YpKSB7XG4gICAgICByZXR1cm4gaXNUeXBlT2YudGhlbigocmVzb2x2ZWRJc1R5cGVPZikgPT4ge1xuICAgICAgICBpZiAoIXJlc29sdmVkSXNUeXBlT2YpIHtcbiAgICAgICAgICB0aHJvdyBpbnZhbGlkUmV0dXJuVHlwZUVycm9yKHJldHVyblR5cGUsIHJlc3VsdCwgZmllbGROb2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhlY3V0ZUZpZWxkcyhcbiAgICAgICAgICBleGVDb250ZXh0LFxuICAgICAgICAgIHJldHVyblR5cGUsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgc3ViRmllbGROb2RlcyxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaXNUeXBlT2YpIHtcbiAgICAgIHRocm93IGludmFsaWRSZXR1cm5UeXBlRXJyb3IocmV0dXJuVHlwZSwgcmVzdWx0LCBmaWVsZE5vZGVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhlY3V0ZUZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCByZXN1bHQsIHBhdGgsIHN1YkZpZWxkTm9kZXMpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkUmV0dXJuVHlwZUVycm9yKHJldHVyblR5cGUsIHJlc3VsdCwgZmllbGROb2Rlcykge1xuICByZXR1cm4gbmV3IEdyYXBoUUxFcnJvcihcbiAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcIiR7cmV0dXJuVHlwZS5uYW1lfVwiIGJ1dCBnb3Q6ICR7aW5zcGVjdChyZXN1bHQpfS5gLFxuICAgIHtcbiAgICAgIG5vZGVzOiBmaWVsZE5vZGVzLFxuICAgIH0sXG4gICk7XG59XG4vKipcbiAqIElmIGEgcmVzb2x2ZVR5cGUgZnVuY3Rpb24gaXMgbm90IGdpdmVuLCB0aGVuIGEgZGVmYXVsdCByZXNvbHZlIGJlaGF2aW9yIGlzXG4gKiB1c2VkIHdoaWNoIGF0dGVtcHRzIHR3byBzdHJhdGVnaWVzOlxuICpcbiAqIEZpcnN0LCBTZWUgaWYgdGhlIHByb3ZpZGVkIHZhbHVlIGhhcyBhIGBfX3R5cGVuYW1lYCBmaWVsZCBkZWZpbmVkLCBpZiBzbywgdXNlXG4gKiB0aGF0IHZhbHVlIGFzIG5hbWUgb2YgdGhlIHJlc29sdmVkIHR5cGUuXG4gKlxuICogT3RoZXJ3aXNlLCB0ZXN0IGVhY2ggcG9zc2libGUgdHlwZSBmb3IgdGhlIGFic3RyYWN0IHR5cGUgYnkgY2FsbGluZ1xuICogaXNUeXBlT2YgZm9yIHRoZSBvYmplY3QgYmVpbmcgY29lcmNlZCwgcmV0dXJuaW5nIHRoZSBmaXJzdCB0eXBlIHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFR5cGVSZXNvbHZlciA9IGZ1bmN0aW9uIChcbiAgdmFsdWUsXG4gIGNvbnRleHRWYWx1ZSxcbiAgaW5mbyxcbiAgYWJzdHJhY3RUeXBlLFxuKSB7XG4gIC8vIEZpcnN0LCBsb29rIGZvciBgX190eXBlbmFtZWAuXG4gIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmIHR5cGVvZiB2YWx1ZS5fX3R5cGVuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZS5fX3R5cGVuYW1lO1xuICB9IC8vIE90aGVyd2lzZSwgdGVzdCBlYWNoIHBvc3NpYmxlIHR5cGUuXG5cbiAgY29uc3QgcG9zc2libGVUeXBlcyA9IGluZm8uc2NoZW1hLmdldFBvc3NpYmxlVHlwZXMoYWJzdHJhY3RUeXBlKTtcbiAgY29uc3QgcHJvbWlzZWRJc1R5cGVPZlJlc3VsdHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0eXBlID0gcG9zc2libGVUeXBlc1tpXTtcblxuICAgIGlmICh0eXBlLmlzVHlwZU9mKSB7XG4gICAgICBjb25zdCBpc1R5cGVPZlJlc3VsdCA9IHR5cGUuaXNUeXBlT2YodmFsdWUsIGNvbnRleHRWYWx1ZSwgaW5mbyk7XG5cbiAgICAgIGlmIChpc1Byb21pc2UoaXNUeXBlT2ZSZXN1bHQpKSB7XG4gICAgICAgIHByb21pc2VkSXNUeXBlT2ZSZXN1bHRzW2ldID0gaXNUeXBlT2ZSZXN1bHQ7XG4gICAgICB9IGVsc2UgaWYgKGlzVHlwZU9mUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0eXBlLm5hbWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb21pc2VkSXNUeXBlT2ZSZXN1bHRzLmxlbmd0aCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlZElzVHlwZU9mUmVzdWx0cykudGhlbigoaXNUeXBlT2ZSZXN1bHRzKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlzVHlwZU9mUmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXNUeXBlT2ZSZXN1bHRzW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIHBvc3NpYmxlVHlwZXNbaV0ubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuLyoqXG4gKiBJZiBhIHJlc29sdmUgZnVuY3Rpb24gaXMgbm90IGdpdmVuLCB0aGVuIGEgZGVmYXVsdCByZXNvbHZlIGJlaGF2aW9yIGlzIHVzZWRcbiAqIHdoaWNoIHRha2VzIHRoZSBwcm9wZXJ0eSBvZiB0aGUgc291cmNlIG9iamVjdCBvZiB0aGUgc2FtZSBuYW1lIGFzIHRoZSBmaWVsZFxuICogYW5kIHJldHVybnMgaXQgYXMgdGhlIHJlc3VsdCwgb3IgaWYgaXQncyBhIGZ1bmN0aW9uLCByZXR1cm5zIHRoZSByZXN1bHRcbiAqIG9mIGNhbGxpbmcgdGhhdCBmdW5jdGlvbiB3aGlsZSBwYXNzaW5nIGFsb25nIGFyZ3MgYW5kIGNvbnRleHQgdmFsdWUuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRGaWVsZFJlc29sdmVyID0gZnVuY3Rpb24gKFxuICBzb3VyY2UsXG4gIGFyZ3MsXG4gIGNvbnRleHRWYWx1ZSxcbiAgaW5mbyxcbikge1xuICAvLyBlbnN1cmUgc291cmNlIGlzIGEgdmFsdWUgZm9yIHdoaWNoIHByb3BlcnR5IGFjY2VzcyBpcyBhY2NlcHRhYmxlLlxuICBpZiAoaXNPYmplY3RMaWtlKHNvdXJjZSkgfHwgdHlwZW9mIHNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHByb3BlcnR5ID0gc291cmNlW2luZm8uZmllbGROYW1lXTtcblxuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzb3VyY2VbaW5mby5maWVsZE5hbWVdKGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG59O1xuLyoqXG4gKiBUaGlzIG1ldGhvZCBsb29rcyB1cCB0aGUgZmllbGQgb24gdGhlIGdpdmVuIHR5cGUgZGVmaW5pdGlvbi5cbiAqIEl0IGhhcyBzcGVjaWFsIGNhc2luZyBmb3IgdGhlIHRocmVlIGludHJvc3BlY3Rpb24gZmllbGRzLFxuICogX19zY2hlbWEsIF9fdHlwZSBhbmQgX190eXBlbmFtZS4gX190eXBlbmFtZSBpcyBzcGVjaWFsIGJlY2F1c2VcbiAqIGl0IGNhbiBhbHdheXMgYmUgcXVlcmllZCBhcyBhIGZpZWxkLCBldmVuIGluIHNpdHVhdGlvbnMgd2hlcmUgbm9cbiAqIG90aGVyIGZpZWxkcyBhcmUgYWxsb3dlZCwgbGlrZSBvbiBhIFVuaW9uLiBfX3NjaGVtYSBhbmQgX190eXBlXG4gKiBjb3VsZCBnZXQgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgcXVlcnkgdHlwZSwgYnV0IHRoYXQgd291bGRcbiAqIHJlcXVpcmUgbXV0YXRpbmcgdHlwZSBkZWZpbml0aW9ucywgd2hpY2ggd291bGQgY2F1c2UgaXNzdWVzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZERlZihzY2hlbWEsIHBhcmVudFR5cGUsIGZpZWxkTm9kZSkge1xuICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZE5vZGUubmFtZS52YWx1ZTtcblxuICBpZiAoXG4gICAgZmllbGROYW1lID09PSBTY2hlbWFNZXRhRmllbGREZWYubmFtZSAmJlxuICAgIHNjaGVtYS5nZXRRdWVyeVR5cGUoKSA9PT0gcGFyZW50VHlwZVxuICApIHtcbiAgICByZXR1cm4gU2NoZW1hTWV0YUZpZWxkRGVmO1xuICB9IGVsc2UgaWYgKFxuICAgIGZpZWxkTmFtZSA9PT0gVHlwZU1ldGFGaWVsZERlZi5uYW1lICYmXG4gICAgc2NoZW1hLmdldFF1ZXJ5VHlwZSgpID09PSBwYXJlbnRUeXBlXG4gICkge1xuICAgIHJldHVybiBUeXBlTWV0YUZpZWxkRGVmO1xuICB9IGVsc2UgaWYgKGZpZWxkTmFtZSA9PT0gVHlwZU5hbWVNZXRhRmllbGREZWYubmFtZSkge1xuICAgIHJldHVybiBUeXBlTmFtZU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV07XG59XG4iLCIvKipcbiAqIE1lbW9pemVzIHRoZSBwcm92aWRlZCB0aHJlZS1hcmd1bWVudCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemUzKGZuKSB7XG4gIGxldCBjYWNoZTA7XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vaXplZChhMSwgYTIsIGEzKSB7XG4gICAgaWYgKGNhY2hlMCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZTAgPSBuZXcgV2Vha01hcCgpO1xuICAgIH1cblxuICAgIGxldCBjYWNoZTEgPSBjYWNoZTAuZ2V0KGExKTtcblxuICAgIGlmIChjYWNoZTEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGUxID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgIGNhY2hlMC5zZXQoYTEsIGNhY2hlMSk7XG4gICAgfVxuXG4gICAgbGV0IGNhY2hlMiA9IGNhY2hlMS5nZXQoYTIpO1xuXG4gICAgaWYgKGNhY2hlMiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZTIgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgY2FjaGUxLnNldChhMiwgY2FjaGUyKTtcbiAgICB9XG5cbiAgICBsZXQgZm5SZXN1bHQgPSBjYWNoZTIuZ2V0KGEzKTtcblxuICAgIGlmIChmblJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmblJlc3VsdCA9IGZuKGExLCBhMiwgYTMpO1xuICAgICAgY2FjaGUyLnNldChhMywgZm5SZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBmblJlc3VsdDtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4vaXNQcm9taXNlLm1qcyc7XG5cbi8qKlxuICogU2ltaWxhciB0byBBcnJheS5wcm90b3R5cGUucmVkdWNlKCksIGhvd2V2ZXIgdGhlIHJlZHVjaW5nIGNhbGxiYWNrIG1heSByZXR1cm5cbiAqIGEgUHJvbWlzZSwgaW4gd2hpY2ggY2FzZSByZWR1Y3Rpb24gd2lsbCBjb250aW51ZSBhZnRlciBlYWNoIHByb21pc2UgcmVzb2x2ZXMuXG4gKlxuICogSWYgdGhlIGNhbGxiYWNrIGRvZXMgbm90IHJldHVybiBhIFByb21pc2UsIHRoZW4gdGhpcyBmdW5jdGlvbiB3aWxsIGFsc28gbm90XG4gKiByZXR1cm4gYSBQcm9taXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZVJlZHVjZSh2YWx1ZXMsIGNhbGxiYWNrRm4sIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgYWNjdW11bGF0b3IgPSBpbml0aWFsVmFsdWU7XG5cbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICBhY2N1bXVsYXRvciA9IGlzUHJvbWlzZShhY2N1bXVsYXRvcilcbiAgICAgID8gYWNjdW11bGF0b3IudGhlbigocmVzb2x2ZWQpID0+IGNhbGxiYWNrRm4ocmVzb2x2ZWQsIHZhbHVlKSlcbiAgICAgIDogY2FsbGJhY2tGbihhY2N1bXVsYXRvciwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyYW5zZm9ybXMgYSBKUyBvYmplY3QgYE9iak1hcDxQcm9taXNlPFQ+PmAgaW50b1xuICogYSBgUHJvbWlzZTxPYmpNYXA8VD4+YFxuICpcbiAqIFRoaXMgaXMgYWtpbiB0byBibHVlYmlyZCdzIGBQcm9taXNlLnByb3BzYCwgYnV0IGltcGxlbWVudGVkIG9ubHkgdXNpbmdcbiAqIGBQcm9taXNlLmFsbGAgc28gaXQgd2lsbCB3b3JrIHdpdGggYW55IGltcGxlbWVudGF0aW9uIG9mIEVTNiBwcm9taXNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb21pc2VGb3JPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChPYmplY3QudmFsdWVzKG9iamVjdCkpLnRoZW4oKHJlc29sdmVkVmFsdWVzKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRPYmplY3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBbaSwga2V5XSBvZiBPYmplY3Qua2V5cyhvYmplY3QpLmVudHJpZXMoKSkge1xuICAgICAgcmVzb2x2ZWRPYmplY3Rba2V5XSA9IHJlc29sdmVkVmFsdWVzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiByZXNvbHZlZE9iamVjdDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBrZXlNYXAgfSBmcm9tICcuLi9qc3V0aWxzL2tleU1hcC5tanMnO1xuaW1wb3J0IHsgcHJpbnRQYXRoQXJyYXkgfSBmcm9tICcuLi9qc3V0aWxzL3ByaW50UGF0aEFycmF5Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyBpc0lucHV0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgY29lcmNlSW5wdXRWYWx1ZSB9IGZyb20gJy4uL3V0aWxpdGllcy9jb2VyY2VJbnB1dFZhbHVlLm1qcyc7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gJy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanMnO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUIH0gZnJvbSAnLi4vdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVC5tanMnO1xuXG4vKipcbiAqIFByZXBhcmVzIGFuIG9iamVjdCBtYXAgb2YgdmFyaWFibGVWYWx1ZXMgb2YgdGhlIGNvcnJlY3QgdHlwZSBiYXNlZCBvbiB0aGVcbiAqIHByb3ZpZGVkIHZhcmlhYmxlIGRlZmluaXRpb25zIGFuZCBhcmJpdHJhcnkgaW5wdXQuIElmIHRoZSBpbnB1dCBjYW5ub3QgYmVcbiAqIHBhcnNlZCB0byBtYXRjaCB0aGUgdmFyaWFibGUgZGVmaW5pdGlvbnMsIGEgR3JhcGhRTEVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIE5vdGU6IFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCB3aXRoIGEgcHJvdG90eXBlLCBzaW5jZSBpdCBpc1xuICogZXhwb3NlZCB0byB1c2VyIGNvZGUuIENhcmUgc2hvdWxkIGJlIHRha2VuIHRvIG5vdCBwdWxsIHZhbHVlcyBmcm9tIHRoZVxuICogT2JqZWN0IHByb3RvdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyRGVmTm9kZXMsIGlucHV0cywgb3B0aW9ucykge1xuICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgY29uc3QgbWF4RXJyb3JzID1cbiAgICBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWF4RXJyb3JzO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgY29lcmNlZCA9IGNvZXJjZVZhcmlhYmxlVmFsdWVzKFxuICAgICAgc2NoZW1hLFxuICAgICAgdmFyRGVmTm9kZXMsXG4gICAgICBpbnB1dHMsXG4gICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKG1heEVycm9ycyAhPSBudWxsICYmIGVycm9ycy5sZW5ndGggPj0gbWF4RXJyb3JzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICdUb28gbWFueSBlcnJvcnMgcHJvY2Vzc2luZyB2YXJpYWJsZXMsIGVycm9yIGxpbWl0IHJlYWNoZWQuIEV4ZWN1dGlvbiBhYm9ydGVkLicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIGlmIChlcnJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2VyY2VkLFxuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlcnJvcnMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvZXJjZVZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyRGVmTm9kZXMsIGlucHV0cywgb25FcnJvcikge1xuICBjb25zdCBjb2VyY2VkVmFsdWVzID0ge307XG5cbiAgZm9yIChjb25zdCB2YXJEZWZOb2RlIG9mIHZhckRlZk5vZGVzKSB7XG4gICAgY29uc3QgdmFyTmFtZSA9IHZhckRlZk5vZGUudmFyaWFibGUubmFtZS52YWx1ZTtcbiAgICBjb25zdCB2YXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB2YXJEZWZOb2RlLnR5cGUpO1xuXG4gICAgaWYgKCFpc0lucHV0VHlwZSh2YXJUeXBlKSkge1xuICAgICAgLy8gTXVzdCB1c2UgaW5wdXQgdHlwZXMgZm9yIHZhcmlhYmxlcy4gVGhpcyBzaG91bGQgYmUgY2F1Z2h0IGR1cmluZ1xuICAgICAgLy8gdmFsaWRhdGlvbiwgaG93ZXZlciBpcyBjaGVja2VkIGFnYWluIGhlcmUgZm9yIHNhZmV0eS5cbiAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSBwcmludCh2YXJEZWZOb2RlLnR5cGUpO1xuICAgICAgb25FcnJvcihcbiAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICBgVmFyaWFibGUgXCIkJHt2YXJOYW1lfVwiIGV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIke3ZhclR5cGVTdHJ9XCIgd2hpY2ggY2Fubm90IGJlIHVzZWQgYXMgYW4gaW5wdXQgdHlwZS5gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiB2YXJEZWZOb2RlLnR5cGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KGlucHV0cywgdmFyTmFtZSkpIHtcbiAgICAgIGlmICh2YXJEZWZOb2RlLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBjb2VyY2VkVmFsdWVzW3Zhck5hbWVdID0gdmFsdWVGcm9tQVNUKHZhckRlZk5vZGUuZGVmYXVsdFZhbHVlLCB2YXJUeXBlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOb25OdWxsVHlwZSh2YXJUeXBlKSkge1xuICAgICAgICBjb25zdCB2YXJUeXBlU3RyID0gaW5zcGVjdCh2YXJUeXBlKTtcbiAgICAgICAgb25FcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBvZiByZXF1aXJlZCB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHdhcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IHZhckRlZk5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gaW5wdXRzW3Zhck5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsICYmIGlzTm9uTnVsbFR5cGUodmFyVHlwZSkpIHtcbiAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSBpbnNwZWN0KHZhclR5cGUpO1xuICAgICAgb25FcnJvcihcbiAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICBgVmFyaWFibGUgXCIkJHt2YXJOYW1lfVwiIG9mIG5vbi1udWxsIHR5cGUgXCIke3ZhclR5cGVTdHJ9XCIgbXVzdCBub3QgYmUgbnVsbC5gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiB2YXJEZWZOb2RlLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29lcmNlZFZhbHVlc1t2YXJOYW1lXSA9IGNvZXJjZUlucHV0VmFsdWUoXG4gICAgICB2YWx1ZSxcbiAgICAgIHZhclR5cGUsXG4gICAgICAocGF0aCwgaW52YWxpZFZhbHVlLCBlcnJvcikgPT4ge1xuICAgICAgICBsZXQgcHJlZml4ID1cbiAgICAgICAgICBgVmFyaWFibGUgXCIkJHt2YXJOYW1lfVwiIGdvdCBpbnZhbGlkIHZhbHVlIGAgKyBpbnNwZWN0KGludmFsaWRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHByZWZpeCArPSBgIGF0IFwiJHt2YXJOYW1lfSR7cHJpbnRQYXRoQXJyYXkocGF0aCl9XCJgO1xuICAgICAgICB9XG5cbiAgICAgICAgb25FcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKHByZWZpeCArICc7ICcgKyBlcnJvci5tZXNzYWdlLCB7XG4gICAgICAgICAgICBub2RlczogdmFyRGVmTm9kZSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLm9yaWdpbmFsRXJyb3IsXG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gY29lcmNlZFZhbHVlcztcbn1cbi8qKlxuICogUHJlcGFyZXMgYW4gb2JqZWN0IG1hcCBvZiBhcmd1bWVudCB2YWx1ZXMgZ2l2ZW4gYSBsaXN0IG9mIGFyZ3VtZW50XG4gKiBkZWZpbml0aW9ucyBhbmQgbGlzdCBvZiBhcmd1bWVudCBBU1Qgbm9kZXMuXG4gKlxuICogTm90ZTogVGhlIHJldHVybmVkIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0IHdpdGggYSBwcm90b3R5cGUsIHNpbmNlIGl0IGlzXG4gKiBleHBvc2VkIHRvIHVzZXIgY29kZS4gQ2FyZSBzaG91bGQgYmUgdGFrZW4gdG8gbm90IHB1bGwgdmFsdWVzIGZyb20gdGhlXG4gKiBPYmplY3QgcHJvdG90eXBlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmd1bWVudFZhbHVlcyhkZWYsIG5vZGUsIHZhcmlhYmxlVmFsdWVzKSB7XG4gIHZhciBfbm9kZSRhcmd1bWVudHM7XG5cbiAgY29uc3QgY29lcmNlZFZhbHVlcyA9IHt9OyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgY29uc3QgYXJndW1lbnROb2RlcyA9XG4gICAgKF9ub2RlJGFyZ3VtZW50cyA9IG5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfbm9kZSRhcmd1bWVudHMgIT09IHZvaWQgMFxuICAgICAgPyBfbm9kZSRhcmd1bWVudHNcbiAgICAgIDogW107XG4gIGNvbnN0IGFyZ05vZGVNYXAgPSBrZXlNYXAoYXJndW1lbnROb2RlcywgKGFyZykgPT4gYXJnLm5hbWUudmFsdWUpO1xuXG4gIGZvciAoY29uc3QgYXJnRGVmIG9mIGRlZi5hcmdzKSB7XG4gICAgY29uc3QgbmFtZSA9IGFyZ0RlZi5uYW1lO1xuICAgIGNvbnN0IGFyZ1R5cGUgPSBhcmdEZWYudHlwZTtcbiAgICBjb25zdCBhcmd1bWVudE5vZGUgPSBhcmdOb2RlTWFwW25hbWVdO1xuXG4gICAgaWYgKCFhcmd1bWVudE5vZGUpIHtcbiAgICAgIGlmIChhcmdEZWYuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29lcmNlZFZhbHVlc1tuYW1lXSA9IGFyZ0RlZi5kZWZhdWx0VmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUoYXJnVHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICBgQXJndW1lbnQgXCIke25hbWV9XCIgb2YgcmVxdWlyZWQgdHlwZSBcIiR7aW5zcGVjdChhcmdUeXBlKX1cIiBgICtcbiAgICAgICAgICAgICd3YXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWVOb2RlID0gYXJndW1lbnROb2RlLnZhbHVlO1xuICAgIGxldCBpc051bGwgPSB2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5OVUxMO1xuXG4gICAgaWYgKHZhbHVlTm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFKSB7XG4gICAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSB2YWx1ZU5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKFxuICAgICAgICB2YXJpYWJsZVZhbHVlcyA9PSBudWxsIHx8XG4gICAgICAgICFoYXNPd25Qcm9wZXJ0eSh2YXJpYWJsZVZhbHVlcywgdmFyaWFibGVOYW1lKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChhcmdEZWYuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2VyY2VkVmFsdWVzW25hbWVdID0gYXJnRGVmLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGFyZ1R5cGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBBcmd1bWVudCBcIiR7bmFtZX1cIiBvZiByZXF1aXJlZCB0eXBlIFwiJHtpbnNwZWN0KGFyZ1R5cGUpfVwiIGAgK1xuICAgICAgICAgICAgICBgd2FzIHByb3ZpZGVkIHRoZSB2YXJpYWJsZSBcIiQke3ZhcmlhYmxlTmFtZX1cIiB3aGljaCB3YXMgbm90IHByb3ZpZGVkIGEgcnVudGltZSB2YWx1ZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlzTnVsbCA9IHZhcmlhYmxlVmFsdWVzW3ZhcmlhYmxlTmFtZV0gPT0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaXNOdWxsICYmIGlzTm9uTnVsbFR5cGUoYXJnVHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBBcmd1bWVudCBcIiR7bmFtZX1cIiBvZiBub24tbnVsbCB0eXBlIFwiJHtpbnNwZWN0KGFyZ1R5cGUpfVwiIGAgK1xuICAgICAgICAgICdtdXN0IG5vdCBiZSBudWxsLicsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCBhcmdUeXBlLCB2YXJpYWJsZVZhbHVlcyk7XG5cbiAgICBpZiAoY29lcmNlZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIE5vdGU6IFZhbHVlc09mQ29ycmVjdFR5cGVSdWxlIHZhbGlkYXRpb24gc2hvdWxkIGNhdGNoIHRoaXMgYmVmb3JlXG4gICAgICAvLyBleGVjdXRpb24uIFRoaXMgaXMgYSBydW50aW1lIGNoZWNrIHRvIGVuc3VyZSBleGVjdXRpb24gZG9lcyBub3RcbiAgICAgIC8vIGNvbnRpbnVlIHdpdGggYW4gaW52YWxpZCBhcmd1bWVudCB2YWx1ZS5cbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBBcmd1bWVudCBcIiR7bmFtZX1cIiBoYXMgaW52YWxpZCB2YWx1ZSAke3ByaW50KHZhbHVlTm9kZSl9LmAsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb2VyY2VkVmFsdWVzW25hbWVdID0gY29lcmNlZFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGNvZXJjZWRWYWx1ZXM7XG59XG4vKipcbiAqIFByZXBhcmVzIGFuIG9iamVjdCBtYXAgb2YgYXJndW1lbnQgdmFsdWVzIGdpdmVuIGEgZGlyZWN0aXZlIGRlZmluaXRpb25cbiAqIGFuZCBhIEFTVCBub2RlIHdoaWNoIG1heSBjb250YWluIGRpcmVjdGl2ZXMuIE9wdGlvbmFsbHkgYWxzbyBhY2NlcHRzIGEgbWFwXG4gKiBvZiB2YXJpYWJsZSB2YWx1ZXMuXG4gKlxuICogSWYgdGhlIGRpcmVjdGl2ZSBkb2VzIG5vdCBleGlzdCBvbiB0aGUgbm9kZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gKlxuICogTm90ZTogVGhlIHJldHVybmVkIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0IHdpdGggYSBwcm90b3R5cGUsIHNpbmNlIGl0IGlzXG4gKiBleHBvc2VkIHRvIHVzZXIgY29kZS4gQ2FyZSBzaG91bGQgYmUgdGFrZW4gdG8gbm90IHB1bGwgdmFsdWVzIGZyb20gdGhlXG4gKiBPYmplY3QgcHJvdG90eXBlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVWYWx1ZXMoZGlyZWN0aXZlRGVmLCBub2RlLCB2YXJpYWJsZVZhbHVlcykge1xuICB2YXIgX25vZGUkZGlyZWN0aXZlcztcblxuICBjb25zdCBkaXJlY3RpdmVOb2RlID1cbiAgICAoX25vZGUkZGlyZWN0aXZlcyA9IG5vZGUuZGlyZWN0aXZlcykgPT09IG51bGwgfHwgX25vZGUkZGlyZWN0aXZlcyA9PT0gdm9pZCAwXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBfbm9kZSRkaXJlY3RpdmVzLmZpbmQoXG4gICAgICAgICAgKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IGRpcmVjdGl2ZURlZi5uYW1lLFxuICAgICAgICApO1xuXG4gIGlmIChkaXJlY3RpdmVOb2RlKSB7XG4gICAgcmV0dXJuIGdldEFyZ3VtZW50VmFsdWVzKGRpcmVjdGl2ZURlZiwgZGlyZWN0aXZlTm9kZSwgdmFyaWFibGVWYWx1ZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuL2pzdXRpbHMvaXNQcm9taXNlLm1qcyc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4vbGFuZ3VhZ2UvcGFyc2VyLm1qcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZVNjaGVtYSB9IGZyb20gJy4vdHlwZS92YWxpZGF0ZS5tanMnO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tICcuL3ZhbGlkYXRpb24vdmFsaWRhdGUubWpzJztcbmltcG9ydCB7IGV4ZWN1dGUgfSBmcm9tICcuL2V4ZWN1dGlvbi9leGVjdXRlLm1qcyc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIHByaW1hcnkgZW50cnkgcG9pbnQgZnVuY3Rpb24gZm9yIGZ1bGZpbGxpbmcgR3JhcGhRTCBvcGVyYXRpb25zXG4gKiBieSBwYXJzaW5nLCB2YWxpZGF0aW5nLCBhbmQgZXhlY3V0aW5nIGEgR3JhcGhRTCBkb2N1bWVudCBhbG9uZyBzaWRlIGFcbiAqIEdyYXBoUUwgc2NoZW1hLlxuICpcbiAqIE1vcmUgc29waGlzdGljYXRlZCBHcmFwaFFMIHNlcnZlcnMsIHN1Y2ggYXMgdGhvc2Ugd2hpY2ggcGVyc2lzdCBxdWVyaWVzLFxuICogbWF5IHdpc2ggdG8gc2VwYXJhdGUgdGhlIHZhbGlkYXRpb24gYW5kIGV4ZWN1dGlvbiBwaGFzZXMgdG8gYSBzdGF0aWMgdGltZVxuICogdG9vbGluZyBzdGVwLCBhbmQgYSBzZXJ2ZXIgcnVudGltZSBzdGVwLlxuICpcbiAqIEFjY2VwdHMgZWl0aGVyIGFuIG9iamVjdCB3aXRoIG5hbWVkIGFyZ3VtZW50cywgb3IgaW5kaXZpZHVhbCBhcmd1bWVudHM6XG4gKlxuICogc2NoZW1hOlxuICogICAgVGhlIEdyYXBoUUwgdHlwZSBzeXN0ZW0gdG8gdXNlIHdoZW4gdmFsaWRhdGluZyBhbmQgZXhlY3V0aW5nIGEgcXVlcnkuXG4gKiBzb3VyY2U6XG4gKiAgICBBIEdyYXBoUUwgbGFuZ3VhZ2UgZm9ybWF0dGVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlcXVlc3RlZCBvcGVyYXRpb24uXG4gKiByb290VmFsdWU6XG4gKiAgICBUaGUgdmFsdWUgcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHJlc29sdmVyIGZ1bmN0aW9ucyBvbiB0aGUgdG9wXG4gKiAgICBsZXZlbCB0eXBlIChlLmcuIHRoZSBxdWVyeSBvYmplY3QgdHlwZSkuXG4gKiBjb250ZXh0VmFsdWU6XG4gKiAgICBUaGUgY29udGV4dCB2YWx1ZSBpcyBwcm92aWRlZCBhcyBhbiBhcmd1bWVudCB0byByZXNvbHZlciBmdW5jdGlvbnMgYWZ0ZXJcbiAqICAgIGZpZWxkIGFyZ3VtZW50cy4gSXQgaXMgdXNlZCB0byBwYXNzIHNoYXJlZCBpbmZvcm1hdGlvbiB1c2VmdWwgYXQgYW55IHBvaW50XG4gKiAgICBkdXJpbmcgZXhlY3V0aW5nIHRoaXMgcXVlcnksIGZvciBleGFtcGxlIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIgYW5kXG4gKiAgICBjb25uZWN0aW9ucyB0byBkYXRhYmFzZXMgb3Igb3RoZXIgc2VydmljZXMuXG4gKiB2YXJpYWJsZVZhbHVlczpcbiAqICAgIEEgbWFwcGluZyBvZiB2YXJpYWJsZSBuYW1lIHRvIHJ1bnRpbWUgdmFsdWUgdG8gdXNlIGZvciBhbGwgdmFyaWFibGVzXG4gKiAgICBkZWZpbmVkIGluIHRoZSByZXF1ZXN0U3RyaW5nLlxuICogb3BlcmF0aW9uTmFtZTpcbiAqICAgIFRoZSBuYW1lIG9mIHRoZSBvcGVyYXRpb24gdG8gdXNlIGlmIHJlcXVlc3RTdHJpbmcgY29udGFpbnMgbXVsdGlwbGVcbiAqICAgIHBvc3NpYmxlIG9wZXJhdGlvbnMuIENhbiBiZSBvbWl0dGVkIGlmIHJlcXVlc3RTdHJpbmcgY29udGFpbnMgb25seVxuICogICAgb25lIG9wZXJhdGlvbi5cbiAqIGZpZWxkUmVzb2x2ZXI6XG4gKiAgICBBIHJlc29sdmVyIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIG9uZSBpcyBub3QgcHJvdmlkZWQgYnkgdGhlIHNjaGVtYS5cbiAqICAgIElmIG5vdCBwcm92aWRlZCwgdGhlIGRlZmF1bHQgZmllbGQgcmVzb2x2ZXIgaXMgdXNlZCAod2hpY2ggbG9va3MgZm9yIGFcbiAqICAgIHZhbHVlIG9yIG1ldGhvZCBvbiB0aGUgc291cmNlIHZhbHVlIHdpdGggdGhlIGZpZWxkJ3MgbmFtZSkuXG4gKiB0eXBlUmVzb2x2ZXI6XG4gKiAgICBBIHR5cGUgcmVzb2x2ZXIgZnVuY3Rpb24gdG8gdXNlIHdoZW4gbm9uZSBpcyBwcm92aWRlZCBieSB0aGUgc2NoZW1hLlxuICogICAgSWYgbm90IHByb3ZpZGVkLCB0aGUgZGVmYXVsdCB0eXBlIHJlc29sdmVyIGlzIHVzZWQgKHdoaWNoIGxvb2tzIGZvciBhXG4gKiAgICBgX190eXBlbmFtZWAgZmllbGQgb3IgYWx0ZXJuYXRpdmVseSBjYWxscyB0aGUgYGlzVHlwZU9mYCBtZXRob2QpLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBncmFwaHFsKGFyZ3MpIHtcbiAgLy8gQWx3YXlzIHJldHVybiBhIFByb21pc2UgZm9yIGEgY29uc2lzdGVudCBBUEkuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShncmFwaHFsSW1wbChhcmdzKSkpO1xufVxuLyoqXG4gKiBUaGUgZ3JhcGhxbFN5bmMgZnVuY3Rpb24gYWxzbyBmdWxmaWxscyBHcmFwaFFMIG9wZXJhdGlvbnMgYnkgcGFyc2luZyxcbiAqIHZhbGlkYXRpbmcsIGFuZCBleGVjdXRpbmcgYSBHcmFwaFFMIGRvY3VtZW50IGFsb25nIHNpZGUgYSBHcmFwaFFMIHNjaGVtYS5cbiAqIEhvd2V2ZXIsIGl0IGd1YXJhbnRlZXMgdG8gY29tcGxldGUgc3luY2hyb25vdXNseSAob3IgdGhyb3cgYW4gZXJyb3IpIGFzc3VtaW5nXG4gKiB0aGF0IGFsbCBmaWVsZCByZXNvbHZlcnMgYXJlIGFsc28gc3luY2hyb25vdXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXBocWxTeW5jKGFyZ3MpIHtcbiAgY29uc3QgcmVzdWx0ID0gZ3JhcGhxbEltcGwoYXJncyk7IC8vIEFzc2VydCB0aGF0IHRoZSBleGVjdXRpb24gd2FzIHN5bmNocm9ub3VzLlxuXG4gIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignR3JhcGhRTCBleGVjdXRpb24gZmFpbGVkIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkuJyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBncmFwaHFsSW1wbChhcmdzKSB7XG4gIC8vIFRlbXBvcmFyeSBmb3IgdjE1IHRvIHYxNiBtaWdyYXRpb24uIFJlbW92ZSBpbiB2MTdcbiAgYXJndW1lbnRzLmxlbmd0aCA8IDIgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdncmFwaHFsQDE2IGRyb3BwZWQgbG9uZy1kZXByZWNhdGVkIHN1cHBvcnQgZm9yIHBvc2l0aW9uYWwgYXJndW1lbnRzLCBwbGVhc2UgcGFzcyBhbiBvYmplY3QgaW5zdGVhZC4nLFxuICAgICk7XG4gIGNvbnN0IHtcbiAgICBzY2hlbWEsXG4gICAgc291cmNlLFxuICAgIHJvb3RWYWx1ZSxcbiAgICBjb250ZXh0VmFsdWUsXG4gICAgdmFyaWFibGVWYWx1ZXMsXG4gICAgb3BlcmF0aW9uTmFtZSxcbiAgICBmaWVsZFJlc29sdmVyLFxuICAgIHR5cGVSZXNvbHZlcixcbiAgfSA9IGFyZ3M7IC8vIFZhbGlkYXRlIFNjaGVtYVxuXG4gIGNvbnN0IHNjaGVtYVZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuXG4gIGlmIChzY2hlbWFWYWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiBzY2hlbWFWYWxpZGF0aW9uRXJyb3JzLFxuICAgIH07XG4gIH0gLy8gUGFyc2VcblxuICBsZXQgZG9jdW1lbnQ7XG5cbiAgdHJ5IHtcbiAgICBkb2N1bWVudCA9IHBhcnNlKHNvdXJjZSk7XG4gIH0gY2F0Y2ggKHN5bnRheEVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogW3N5bnRheEVycm9yXSxcbiAgICB9O1xuICB9IC8vIFZhbGlkYXRlXG5cbiAgY29uc3QgdmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlKHNjaGVtYSwgZG9jdW1lbnQpO1xuXG4gIGlmICh2YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiB2YWxpZGF0aW9uRXJyb3JzLFxuICAgIH07XG4gIH0gLy8gRXhlY3V0ZVxuXG4gIHJldHVybiBleGVjdXRlKHtcbiAgICBzY2hlbWEsXG4gICAgZG9jdW1lbnQsXG4gICAgcm9vdFZhbHVlLFxuICAgIGNvbnRleHRWYWx1ZSxcbiAgICB2YXJpYWJsZVZhbHVlcyxcbiAgICBvcGVyYXRpb25OYW1lLFxuICAgIGZpZWxkUmVzb2x2ZXIsXG4gICAgdHlwZVJlc29sdmVyLFxuICB9KTtcbn1cbiIsIi8vIE5vdGU6IFRoaXMgZmlsZSBpcyBhdXRvZ2VuZXJhdGVkIHVzaW5nIFwicmVzb3VyY2VzL2dlbi12ZXJzaW9uLmpzXCIgc2NyaXB0IGFuZFxuLy8gYXV0b21hdGljYWxseSB1cGRhdGVkIGJ5IFwibnBtIHZlcnNpb25cIiBjb21tYW5kLlxuXG4vKipcbiAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHZlcnNpb24gb2YgdGhlIEdyYXBoUUwuanMgbGlicmFyeVxuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcxNi42LjAnO1xuLyoqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY29tcG9uZW50cyBvZiB0aGUgR3JhcGhRTC5qcyB2ZXJzaW9uIHN0cmluZ1xuICovXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uSW5mbyA9IE9iamVjdC5mcmVlemUoe1xuICBtYWpvcjogMTYsXG4gIG1pbm9yOiA2LFxuICBwYXRjaDogMCxcbiAgcHJlUmVsZWFzZVRhZzogbnVsbCxcbn0pO1xuIiwiLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpbXBsZW1lbnRzIHRoZSBBc3luY0l0ZXJhdG9yIHByb3RvY29sIHZpYVxuICogaW1wbGVtZW50aW5nIGEgYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCBtZXRob2QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUobWF5YmVBc3luY0l0ZXJhYmxlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIChtYXliZUFzeW5jSXRlcmFibGUgPT09IG51bGwgfHwgbWF5YmVBc3luY0l0ZXJhYmxlID09PSB2b2lkIDBcbiAgICAgID8gdm9pZCAwXG4gICAgICA6IG1heWJlQXN5bmNJdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pID09PSAnZnVuY3Rpb24nXG4gICk7XG59XG4iLCIvKipcbiAqIEdpdmVuIGFuIEFzeW5jSXRlcmFibGUgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24sIHJldHVybiBhbiBBc3luY0l0ZXJhdG9yXG4gKiB3aGljaCBwcm9kdWNlcyB2YWx1ZXMgbWFwcGVkIHZpYSBjYWxsaW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEFzeW5jSXRlcmF0b3IoaXRlcmFibGUsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gbWFwUmVzdWx0KHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGF3YWl0IGNhbGxiYWNrKHJlc3VsdC52YWx1ZSksXG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAvLyBGSVhNRTogYWRkIHRlc3QgY2FzZVxuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgfSBjYXRjaCAoX2UpIHtcbiAgICAgICAgICAvKiBpZ25vcmUgZXJyb3IgKi9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhc3luYyBuZXh0KCkge1xuICAgICAgcmV0dXJuIG1hcFJlc3VsdChhd2FpdCBpdGVyYXRvci5uZXh0KCkpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICAvLyBJZiBpdGVyYXRvci5yZXR1cm4oKSBkb2VzIG5vdCBleGlzdCwgdGhlbiB0eXBlIFIgbXVzdCBiZSB1bmRlZmluZWQuXG4gICAgICByZXR1cm4gdHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG1hcFJlc3VsdChhd2FpdCBpdGVyYXRvci5yZXR1cm4oKSlcbiAgICAgICAgOiB7XG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyB0aHJvdyhlcnJvcikge1xuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci50aHJvdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbWFwUmVzdWx0KGF3YWl0IGl0ZXJhdG9yLnRocm93KGVycm9yKSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0sXG5cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi9qc3V0aWxzL2lzQXN5bmNJdGVyYWJsZS5tanMnO1xuaW1wb3J0IHsgYWRkUGF0aCwgcGF0aFRvQXJyYXkgfSBmcm9tICcuLi9qc3V0aWxzL1BhdGgubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHsgbG9jYXRlZEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvbG9jYXRlZEVycm9yLm1qcyc7XG5pbXBvcnQgeyBjb2xsZWN0RmllbGRzIH0gZnJvbSAnLi9jb2xsZWN0RmllbGRzLm1qcyc7XG5pbXBvcnQge1xuICBhc3NlcnRWYWxpZEV4ZWN1dGlvbkFyZ3VtZW50cyxcbiAgYnVpbGRFeGVjdXRpb25Db250ZXh0LFxuICBidWlsZFJlc29sdmVJbmZvLFxuICBleGVjdXRlLFxuICBnZXRGaWVsZERlZixcbn0gZnJvbSAnLi9leGVjdXRlLm1qcyc7XG5pbXBvcnQgeyBtYXBBc3luY0l0ZXJhdG9yIH0gZnJvbSAnLi9tYXBBc3luY0l0ZXJhdG9yLm1qcyc7XG5pbXBvcnQgeyBnZXRBcmd1bWVudFZhbHVlcyB9IGZyb20gJy4vdmFsdWVzLm1qcyc7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiU3Vic2NyaWJlXCIgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIFJldHVybnMgYSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGVpdGhlciBhbiBBc3luY0l0ZXJhdG9yIChpZiBzdWNjZXNzZnVsKVxuICogb3IgYW4gRXhlY3V0aW9uUmVzdWx0IChlcnJvcikuIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaWYgdGhlIHNjaGVtYSBvclxuICogb3RoZXIgYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gYXJlIGludmFsaWQsIG9yIGlmIHRoZSByZXNvbHZlZCBldmVudCBzdHJlYW1cbiAqIGlzIG5vdCBhbiBhc3luYyBpdGVyYWJsZS5cbiAqXG4gKiBJZiB0aGUgY2xpZW50LXByb3ZpZGVkIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGRvIG5vdCByZXN1bHQgaW4gYVxuICogY29tcGxpYW50IHN1YnNjcmlwdGlvbiwgYSBHcmFwaFFMIFJlc3BvbnNlIChFeGVjdXRpb25SZXN1bHQpIHdpdGhcbiAqIGRlc2NyaXB0aXZlIGVycm9ycyBhbmQgbm8gZGF0YSB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIElmIHRoZSBzb3VyY2Ugc3RyZWFtIGNvdWxkIG5vdCBiZSBjcmVhdGVkIGR1ZSB0byBmYXVsdHkgc3Vic2NyaXB0aW9uXG4gKiByZXNvbHZlciBsb2dpYyBvciB1bmRlcmx5aW5nIHN5c3RlbXMsIHRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSB0byBhIHNpbmdsZVxuICogRXhlY3V0aW9uUmVzdWx0IGNvbnRhaW5pbmcgYGVycm9yc2AgYW5kIG5vIGBkYXRhYC5cbiAqXG4gKiBJZiB0aGUgb3BlcmF0aW9uIHN1Y2NlZWRlZCwgdGhlIHByb21pc2UgcmVzb2x2ZXMgdG8gYW4gQXN5bmNJdGVyYXRvciwgd2hpY2hcbiAqIHlpZWxkcyBhIHN0cmVhbSBvZiBFeGVjdXRpb25SZXN1bHRzIHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2Ugc3RyZWFtLlxuICpcbiAqIEFjY2VwdHMgZWl0aGVyIGFuIG9iamVjdCB3aXRoIG5hbWVkIGFyZ3VtZW50cywgb3IgaW5kaXZpZHVhbCBhcmd1bWVudHMuXG4gKi9cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN1YnNjcmliZShhcmdzKSB7XG4gIC8vIFRlbXBvcmFyeSBmb3IgdjE1IHRvIHYxNiBtaWdyYXRpb24uIFJlbW92ZSBpbiB2MTdcbiAgYXJndW1lbnRzLmxlbmd0aCA8IDIgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdncmFwaHFsQDE2IGRyb3BwZWQgbG9uZy1kZXByZWNhdGVkIHN1cHBvcnQgZm9yIHBvc2l0aW9uYWwgYXJndW1lbnRzLCBwbGVhc2UgcGFzcyBhbiBvYmplY3QgaW5zdGVhZC4nLFxuICAgICk7XG4gIGNvbnN0IHJlc3VsdE9yU3RyZWFtID0gYXdhaXQgY3JlYXRlU291cmNlRXZlbnRTdHJlYW0oYXJncyk7XG5cbiAgaWYgKCFpc0FzeW5jSXRlcmFibGUocmVzdWx0T3JTdHJlYW0pKSB7XG4gICAgcmV0dXJuIHJlc3VsdE9yU3RyZWFtO1xuICB9IC8vIEZvciBlYWNoIHBheWxvYWQgeWllbGRlZCBmcm9tIGEgc3Vic2NyaXB0aW9uLCBtYXAgaXQgb3ZlciB0aGUgbm9ybWFsXG4gIC8vIEdyYXBoUUwgYGV4ZWN1dGVgIGZ1bmN0aW9uLCB3aXRoIGBwYXlsb2FkYCBhcyB0aGUgcm9vdFZhbHVlLlxuICAvLyBUaGlzIGltcGxlbWVudHMgdGhlIFwiTWFwU291cmNlVG9SZXNwb25zZUV2ZW50XCIgYWxnb3JpdGhtIGRlc2NyaWJlZCBpblxuICAvLyB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLiBUaGUgYGV4ZWN1dGVgIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZVxuICAvLyBcIkV4ZWN1dGVTdWJzY3JpcHRpb25FdmVudFwiIGFsZ29yaXRobSwgYXMgaXQgaXMgbmVhcmx5IGlkZW50aWNhbCB0byB0aGVcbiAgLy8gXCJFeGVjdXRlUXVlcnlcIiBhbGdvcml0aG0sIGZvciB3aGljaCBgZXhlY3V0ZWAgaXMgYWxzbyB1c2VkLlxuXG4gIGNvbnN0IG1hcFNvdXJjZVRvUmVzcG9uc2UgPSAocGF5bG9hZCkgPT5cbiAgICBleGVjdXRlKHsgLi4uYXJncywgcm9vdFZhbHVlOiBwYXlsb2FkIH0pOyAvLyBNYXAgZXZlcnkgc291cmNlIHZhbHVlIHRvIGEgRXhlY3V0aW9uUmVzdWx0IHZhbHVlIGFzIGRlc2NyaWJlZCBhYm92ZS5cblxuICByZXR1cm4gbWFwQXN5bmNJdGVyYXRvcihyZXN1bHRPclN0cmVhbSwgbWFwU291cmNlVG9SZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIHRvTm9ybWFsaXplZEFyZ3MoYXJncykge1xuICBjb25zdCBmaXJzdEFyZyA9IGFyZ3NbMF07XG5cbiAgaWYgKGZpcnN0QXJnICYmICdkb2N1bWVudCcgaW4gZmlyc3RBcmcpIHtcbiAgICByZXR1cm4gZmlyc3RBcmc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNjaGVtYTogZmlyc3RBcmcsXG4gICAgLy8gRklYTUU6IHdoZW4gdW5kZXJseWluZyBUUyBidWcgZml4ZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMxNjEzXG4gICAgZG9jdW1lbnQ6IGFyZ3NbMV0sXG4gICAgcm9vdFZhbHVlOiBhcmdzWzJdLFxuICAgIGNvbnRleHRWYWx1ZTogYXJnc1szXSxcbiAgICB2YXJpYWJsZVZhbHVlczogYXJnc1s0XSxcbiAgICBvcGVyYXRpb25OYW1lOiBhcmdzWzVdLFxuICAgIHN1YnNjcmliZUZpZWxkUmVzb2x2ZXI6IGFyZ3NbNl0sXG4gIH07XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiQ3JlYXRlU291cmNlRXZlbnRTdHJlYW1cIiBhbGdvcml0aG0gZGVzY3JpYmVkIGluIHRoZVxuICogR3JhcGhRTCBzcGVjaWZpY2F0aW9uLCByZXNvbHZpbmcgdGhlIHN1YnNjcmlwdGlvbiBzb3VyY2UgZXZlbnQgc3RyZWFtLlxuICpcbiAqIFJldHVybnMgYSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGVpdGhlciBhbiBBc3luY0l0ZXJhYmxlIChpZiBzdWNjZXNzZnVsKVxuICogb3IgYW4gRXhlY3V0aW9uUmVzdWx0IChlcnJvcikuIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaWYgdGhlIHNjaGVtYSBvclxuICogb3RoZXIgYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gYXJlIGludmFsaWQsIG9yIGlmIHRoZSByZXNvbHZlZCBldmVudCBzdHJlYW1cbiAqIGlzIG5vdCBhbiBhc3luYyBpdGVyYWJsZS5cbiAqXG4gKiBJZiB0aGUgY2xpZW50LXByb3ZpZGVkIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGRvIG5vdCByZXN1bHQgaW4gYVxuICogY29tcGxpYW50IHN1YnNjcmlwdGlvbiwgYSBHcmFwaFFMIFJlc3BvbnNlIChFeGVjdXRpb25SZXN1bHQpIHdpdGhcbiAqIGRlc2NyaXB0aXZlIGVycm9ycyBhbmQgbm8gZGF0YSB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIElmIHRoZSB0aGUgc291cmNlIHN0cmVhbSBjb3VsZCBub3QgYmUgY3JlYXRlZCBkdWUgdG8gZmF1bHR5IHN1YnNjcmlwdGlvblxuICogcmVzb2x2ZXIgbG9naWMgb3IgdW5kZXJseWluZyBzeXN0ZW1zLCB0aGUgcHJvbWlzZSB3aWxsIHJlc29sdmUgdG8gYSBzaW5nbGVcbiAqIEV4ZWN1dGlvblJlc3VsdCBjb250YWluaW5nIGBlcnJvcnNgIGFuZCBubyBgZGF0YWAuXG4gKlxuICogSWYgdGhlIG9wZXJhdGlvbiBzdWNjZWVkZWQsIHRoZSBwcm9taXNlIHJlc29sdmVzIHRvIHRoZSBBc3luY0l0ZXJhYmxlIGZvciB0aGVcbiAqIGV2ZW50IHN0cmVhbSByZXR1cm5lZCBieSB0aGUgcmVzb2x2ZXIuXG4gKlxuICogQSBTb3VyY2UgRXZlbnQgU3RyZWFtIHJlcHJlc2VudHMgYSBzZXF1ZW5jZSBvZiBldmVudHMsIGVhY2ggb2Ygd2hpY2ggdHJpZ2dlcnNcbiAqIGEgR3JhcGhRTCBleGVjdXRpb24gZm9yIHRoYXQgZXZlbnQuXG4gKlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4gaG9zdGluZyB0aGUgc3RhdGVmdWwgc3Vic2NyaXB0aW9uIHNlcnZpY2UgaW4gYVxuICogZGlmZmVyZW50IHByb2Nlc3Mgb3IgbWFjaGluZSB0aGFuIHRoZSBzdGF0ZWxlc3MgR3JhcGhRTCBleGVjdXRpb24gZW5naW5lLFxuICogb3Igb3RoZXJ3aXNlIHNlcGFyYXRpbmcgdGhlc2UgdHdvIHN0ZXBzLiBGb3IgbW9yZSBvbiB0aGlzLCBzZWUgdGhlXG4gKiBcIlN1cHBvcnRpbmcgU3Vic2NyaXB0aW9ucyBhdCBTY2FsZVwiIGluZm9ybWF0aW9uIGluIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKi9cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVNvdXJjZUV2ZW50U3RyZWFtKC4uLnJhd0FyZ3MpIHtcbiAgY29uc3QgYXJncyA9IHRvTm9ybWFsaXplZEFyZ3MocmF3QXJncyk7XG4gIGNvbnN0IHsgc2NoZW1hLCBkb2N1bWVudCwgdmFyaWFibGVWYWx1ZXMgfSA9IGFyZ3M7IC8vIElmIGFyZ3VtZW50cyBhcmUgbWlzc2luZyBvciBpbmNvcnJlY3RseSB0eXBlZCwgdGhpcyBpcyBhbiBpbnRlcm5hbFxuICAvLyBkZXZlbG9wZXIgbWlzdGFrZSB3aGljaCBzaG91bGQgdGhyb3cgYW4gZWFybHkgZXJyb3IuXG5cbiAgYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMoc2NoZW1hLCBkb2N1bWVudCwgdmFyaWFibGVWYWx1ZXMpOyAvLyBJZiBhIHZhbGlkIGV4ZWN1dGlvbiBjb250ZXh0IGNhbm5vdCBiZSBjcmVhdGVkIGR1ZSB0byBpbmNvcnJlY3QgYXJndW1lbnRzLFxuICAvLyBhIFwiUmVzcG9uc2VcIiB3aXRoIG9ubHkgZXJyb3JzIGlzIHJldHVybmVkLlxuXG4gIGNvbnN0IGV4ZUNvbnRleHQgPSBidWlsZEV4ZWN1dGlvbkNvbnRleHQoYXJncyk7IC8vIFJldHVybiBlYXJseSBlcnJvcnMgaWYgZXhlY3V0aW9uIGNvbnRleHQgZmFpbGVkLlxuXG4gIGlmICghKCdzY2hlbWEnIGluIGV4ZUNvbnRleHQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogZXhlQ29udGV4dCxcbiAgICB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudFN0cmVhbSA9IGF3YWl0IGV4ZWN1dGVTdWJzY3JpcHRpb24oZXhlQ29udGV4dCk7IC8vIEFzc2VydCBmaWVsZCByZXR1cm5lZCBhbiBldmVudCBzdHJlYW0sIG90aGVyd2lzZSB5aWVsZCBhbiBlcnJvci5cblxuICAgIGlmICghaXNBc3luY0l0ZXJhYmxlKGV2ZW50U3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU3Vic2NyaXB0aW9uIGZpZWxkIG11c3QgcmV0dXJuIEFzeW5jIEl0ZXJhYmxlLiAnICtcbiAgICAgICAgICBgUmVjZWl2ZWQ6ICR7aW5zcGVjdChldmVudFN0cmVhbSl9LmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudFN0cmVhbTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBJZiBpdCBHcmFwaFFMRXJyb3IsIHJlcG9ydCBpdCBhcyBhbiBFeGVjdXRpb25SZXN1bHQsIGNvbnRhaW5pbmcgb25seSBlcnJvcnMgYW5kIG5vIGRhdGEuXG4gICAgLy8gT3RoZXJ3aXNlIHRyZWF0IHRoZSBlcnJvciBhcyBhIHN5c3RlbS1jbGFzcyBlcnJvciBhbmQgcmUtdGhyb3cgaXQuXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgR3JhcGhRTEVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcnM6IFtlcnJvcl0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVTdWJzY3JpcHRpb24oZXhlQ29udGV4dCkge1xuICBjb25zdCB7IHNjaGVtYSwgZnJhZ21lbnRzLCBvcGVyYXRpb24sIHZhcmlhYmxlVmFsdWVzLCByb290VmFsdWUgfSA9XG4gICAgZXhlQ29udGV4dDtcbiAgY29uc3Qgcm9vdFR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChyb290VHlwZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICdTY2hlbWEgaXMgbm90IGNvbmZpZ3VyZWQgdG8gZXhlY3V0ZSBzdWJzY3JpcHRpb24gb3BlcmF0aW9uLicsXG4gICAgICB7XG4gICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBjb25zdCByb290RmllbGRzID0gY29sbGVjdEZpZWxkcyhcbiAgICBzY2hlbWEsXG4gICAgZnJhZ21lbnRzLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgIHJvb3RUeXBlLFxuICAgIG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQsXG4gICk7XG4gIGNvbnN0IFtyZXNwb25zZU5hbWUsIGZpZWxkTm9kZXNdID0gWy4uLnJvb3RGaWVsZHMuZW50cmllcygpXVswXTtcbiAgY29uc3QgZmllbGREZWYgPSBnZXRGaWVsZERlZihzY2hlbWEsIHJvb3RUeXBlLCBmaWVsZE5vZGVzWzBdKTtcblxuICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgY29uc3QgZmllbGROYW1lID0gZmllbGROb2Rlc1swXS5uYW1lLnZhbHVlO1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgVGhlIHN1YnNjcmlwdGlvbiBmaWVsZCBcIiR7ZmllbGROYW1lfVwiIGlzIG5vdCBkZWZpbmVkLmAsXG4gICAgICB7XG4gICAgICAgIG5vZGVzOiBmaWVsZE5vZGVzLFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgcGF0aCA9IGFkZFBhdGgodW5kZWZpbmVkLCByZXNwb25zZU5hbWUsIHJvb3RUeXBlLm5hbWUpO1xuICBjb25zdCBpbmZvID0gYnVpbGRSZXNvbHZlSW5mbyhcbiAgICBleGVDb250ZXh0LFxuICAgIGZpZWxkRGVmLFxuICAgIGZpZWxkTm9kZXMsXG4gICAgcm9vdFR5cGUsXG4gICAgcGF0aCxcbiAgKTtcblxuICB0cnkge1xuICAgIHZhciBfZmllbGREZWYkc3Vic2NyaWJlO1xuXG4gICAgLy8gSW1wbGVtZW50cyB0aGUgXCJSZXNvbHZlRmllbGRFdmVudFN0cmVhbVwiIGFsZ29yaXRobSBmcm9tIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAgICAvLyBJdCBkaWZmZXJzIGZyb20gXCJSZXNvbHZlRmllbGRWYWx1ZVwiIGR1ZSB0byBwcm92aWRpbmcgYSBkaWZmZXJlbnQgYHJlc29sdmVGbmAuXG4gICAgLy8gQnVpbGQgYSBKUyBvYmplY3Qgb2YgYXJndW1lbnRzIGZyb20gdGhlIGZpZWxkLmFyZ3VtZW50cyBBU1QsIHVzaW5nIHRoZVxuICAgIC8vIHZhcmlhYmxlcyBzY29wZSB0byBmdWxmaWxsIGFueSB2YXJpYWJsZSByZWZlcmVuY2VzLlxuICAgIGNvbnN0IGFyZ3MgPSBnZXRBcmd1bWVudFZhbHVlcyhmaWVsZERlZiwgZmllbGROb2Rlc1swXSwgdmFyaWFibGVWYWx1ZXMpOyAvLyBUaGUgcmVzb2x2ZSBmdW5jdGlvbidzIG9wdGlvbmFsIHRoaXJkIGFyZ3VtZW50IGlzIGEgY29udGV4dCB2YWx1ZSB0aGF0XG4gICAgLy8gaXMgcHJvdmlkZWQgdG8gZXZlcnkgcmVzb2x2ZSBmdW5jdGlvbiB3aXRoaW4gYW4gZXhlY3V0aW9uLiBJdCBpcyBjb21tb25seVxuICAgIC8vIHVzZWQgdG8gcmVwcmVzZW50IGFuIGF1dGhlbnRpY2F0ZWQgdXNlciwgb3IgcmVxdWVzdC1zcGVjaWZpYyBjYWNoZXMuXG5cbiAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBleGVDb250ZXh0LmNvbnRleHRWYWx1ZTsgLy8gQ2FsbCB0aGUgYHN1YnNjcmliZSgpYCByZXNvbHZlciBvciB0aGUgZGVmYXVsdCByZXNvbHZlciB0byBwcm9kdWNlIGFuXG4gICAgLy8gQXN5bmNJdGVyYWJsZSB5aWVsZGluZyByYXcgcGF5bG9hZHMuXG5cbiAgICBjb25zdCByZXNvbHZlRm4gPVxuICAgICAgKF9maWVsZERlZiRzdWJzY3JpYmUgPSBmaWVsZERlZi5zdWJzY3JpYmUpICE9PSBudWxsICYmXG4gICAgICBfZmllbGREZWYkc3Vic2NyaWJlICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZmllbGREZWYkc3Vic2NyaWJlXG4gICAgICAgIDogZXhlQ29udGV4dC5zdWJzY3JpYmVGaWVsZFJlc29sdmVyO1xuICAgIGNvbnN0IGV2ZW50U3RyZWFtID0gYXdhaXQgcmVzb2x2ZUZuKHJvb3RWYWx1ZSwgYXJncywgY29udGV4dFZhbHVlLCBpbmZvKTtcblxuICAgIGlmIChldmVudFN0cmVhbSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBldmVudFN0cmVhbTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnRTdHJlYW07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbG9jYXRlZEVycm9yKGVycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShwYXRoKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uLy4uLy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IGdldE5hbWVkVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi90eXBlL2RlZmluaXRpb24ubWpzJztcblxuLyoqXG4gKiBObyBkZXByZWNhdGVkXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIHNlbGVjdGVkIGZpZWxkcyBhbmQgYWxsIHVzZWQgZW51bSB2YWx1ZXMgaGF2ZSBub3QgYmVlblxuICogZGVwcmVjYXRlZC5cbiAqXG4gKiBOb3RlOiBUaGlzIHJ1bGUgaXMgb3B0aW9uYWwgYW5kIGlzIG5vdCBwYXJ0IG9mIHRoZSBWYWxpZGF0aW9uIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUxcbiAqIFNwZWNpZmljYXRpb24uIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBydWxlIGlzIGRldGVjdGlvbiBvZiBkZXByZWNhdGVkIHVzYWdlcyBhbmQgbm90XG4gKiBuZWNlc3NhcmlseSB0byBmb3JiaWQgdGhlaXIgdXNlIHdoZW4gcXVlcnlpbmcgYSBzZXJ2aWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9EZXByZWNhdGVkQ3VzdG9tUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQobm9kZSkge1xuICAgICAgY29uc3QgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICBjb25zdCBkZXByZWNhdGlvblJlYXNvbiA9XG4gICAgICAgIGZpZWxkRGVmID09PSBudWxsIHx8IGZpZWxkRGVmID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogZmllbGREZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChmaWVsZERlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgcGFyZW50VHlwZSAhPSBudWxsIHx8IGludmFyaWFudChmYWxzZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGUgZmllbGQgJHtwYXJlbnRUeXBlLm5hbWV9LiR7ZmllbGREZWYubmFtZX0gaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgQXJndW1lbnQobm9kZSkge1xuICAgICAgY29uc3QgYXJnRGVmID0gY29udGV4dC5nZXRBcmd1bWVudCgpO1xuICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICBhcmdEZWYgPT09IG51bGwgfHwgYXJnRGVmID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogYXJnRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICBpZiAoYXJnRGVmICYmIGRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlRGVmID0gY29udGV4dC5nZXREaXJlY3RpdmUoKTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlRGVmICE9IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYERpcmVjdGl2ZSBcIkAke2RpcmVjdGl2ZURlZi5uYW1lfVwiIGFyZ3VtZW50IFwiJHthcmdEZWYubmFtZX1cIiBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG4gICAgICAgICAgY29uc3QgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICAgICAgKHBhcmVudFR5cGUgIT0gbnVsbCAmJiBmaWVsZERlZiAhPSBudWxsKSB8fCBpbnZhcmlhbnQoZmFsc2UpO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke3BhcmVudFR5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiIGFyZ3VtZW50IFwiJHthcmdEZWYubmFtZX1cIiBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBPYmplY3RGaWVsZChub2RlKSB7XG4gICAgICBjb25zdCBpbnB1dE9iamVjdERlZiA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpKTtcblxuICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKGlucHV0T2JqZWN0RGVmKSkge1xuICAgICAgICBjb25zdCBpbnB1dEZpZWxkRGVmID0gaW5wdXRPYmplY3REZWYuZ2V0RmllbGRzKClbbm9kZS5uYW1lLnZhbHVlXTtcbiAgICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICAgIGlucHV0RmllbGREZWYgPT09IG51bGwgfHwgaW5wdXRGaWVsZERlZiA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBpbnB1dEZpZWxkRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICAgIGlmIChkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGUgaW5wdXQgZmllbGQgJHtpbnB1dE9iamVjdERlZi5uYW1lfS4ke2lucHV0RmllbGREZWYubmFtZX0gaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgRW51bVZhbHVlKG5vZGUpIHtcbiAgICAgIGNvbnN0IGVudW1WYWx1ZURlZiA9IGNvbnRleHQuZ2V0RW51bVZhbHVlKCk7XG4gICAgICBjb25zdCBkZXByZWNhdGlvblJlYXNvbiA9XG4gICAgICAgIGVudW1WYWx1ZURlZiA9PT0gbnVsbCB8fCBlbnVtVmFsdWVEZWYgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBlbnVtVmFsdWVEZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChlbnVtVmFsdWVEZWYgJiYgZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBlbnVtVHlwZURlZiA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgZW51bVR5cGVEZWYgIT0gbnVsbCB8fCBpbnZhcmlhbnQoZmFsc2UpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVGhlIGVudW0gdmFsdWUgXCIke2VudW1UeXBlRGVmLm5hbWV9LiR7ZW51bVZhbHVlRGVmLm5hbWV9XCIgaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBnZXROYW1lZFR5cGUgfSBmcm9tICcuLi8uLi8uLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7IGlzSW50cm9zcGVjdGlvblR5cGUgfSBmcm9tICcuLi8uLi8uLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzJztcblxuLyoqXG4gKiBQcm9oaWJpdCBpbnRyb3NwZWN0aW9uIHF1ZXJpZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBub3QgZmllbGRzIHRoYXRcbiAqIHJldHVybiBhbiBpbnRyb3NwZWN0aW9uIHR5cGUuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZVxuICogR3JhcGhRTCBTcGVjaWZpY2F0aW9uLiBUaGlzIHJ1bGUgZWZmZWN0aXZlbHkgZGlzYWJsZXMgaW50cm9zcGVjdGlvbiwgd2hpY2hcbiAqIGRvZXMgbm90IHJlZmxlY3QgYmVzdCBwcmFjdGljZXMgYW5kIHNob3VsZCBvbmx5IGJlIGRvbmUgaWYgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gZ2V0TmFtZWRUeXBlKGNvbnRleHQuZ2V0VHlwZSgpKTtcblxuICAgICAgaWYgKHR5cGUgJiYgaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgR3JhcGhRTCBpbnRyb3NwZWN0aW9uIGhhcyBiZWVuIGRpc2FibGVkLCBidXQgdGhlIHJlcXVlc3RlZCBxdWVyeSBjb250YWluZWQgdGhlIGZpZWxkIFwiJHtub2RlLm5hbWUudmFsdWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsIi8qKlxuICogUHJvZHVjZSB0aGUgR3JhcGhRTCBxdWVyeSByZWNvbW1lbmRlZCBmb3IgYSBmdWxsIHNjaGVtYSBpbnRyb3NwZWN0aW9uLlxuICogQWNjZXB0cyBvcHRpb25hbCBJbnRyb3NwZWN0aW9uT3B0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEludHJvc3BlY3Rpb25RdWVyeShvcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnNXaXRoRGVmYXVsdCA9IHtcbiAgICBkZXNjcmlwdGlvbnM6IHRydWUsXG4gICAgc3BlY2lmaWVkQnlVcmw6IGZhbHNlLFxuICAgIGRpcmVjdGl2ZUlzUmVwZWF0YWJsZTogZmFsc2UsXG4gICAgc2NoZW1hRGVzY3JpcHRpb246IGZhbHNlLFxuICAgIGlucHV0VmFsdWVEZXByZWNhdGlvbjogZmFsc2UsXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcbiAgY29uc3QgZGVzY3JpcHRpb25zID0gb3B0aW9uc1dpdGhEZWZhdWx0LmRlc2NyaXB0aW9ucyA/ICdkZXNjcmlwdGlvbicgOiAnJztcbiAgY29uc3Qgc3BlY2lmaWVkQnlVcmwgPSBvcHRpb25zV2l0aERlZmF1bHQuc3BlY2lmaWVkQnlVcmxcbiAgICA/ICdzcGVjaWZpZWRCeVVSTCdcbiAgICA6ICcnO1xuICBjb25zdCBkaXJlY3RpdmVJc1JlcGVhdGFibGUgPSBvcHRpb25zV2l0aERlZmF1bHQuZGlyZWN0aXZlSXNSZXBlYXRhYmxlXG4gICAgPyAnaXNSZXBlYXRhYmxlJ1xuICAgIDogJyc7XG4gIGNvbnN0IHNjaGVtYURlc2NyaXB0aW9uID0gb3B0aW9uc1dpdGhEZWZhdWx0LnNjaGVtYURlc2NyaXB0aW9uXG4gICAgPyBkZXNjcmlwdGlvbnNcbiAgICA6ICcnO1xuXG4gIGZ1bmN0aW9uIGlucHV0RGVwcmVjYXRpb24oc3RyKSB7XG4gICAgcmV0dXJuIG9wdGlvbnNXaXRoRGVmYXVsdC5pbnB1dFZhbHVlRGVwcmVjYXRpb24gPyBzdHIgOiAnJztcbiAgfVxuXG4gIHJldHVybiBgXG4gICAgcXVlcnkgSW50cm9zcGVjdGlvblF1ZXJ5IHtcbiAgICAgIF9fc2NoZW1hIHtcbiAgICAgICAgJHtzY2hlbWFEZXNjcmlwdGlvbn1cbiAgICAgICAgcXVlcnlUeXBlIHsgbmFtZSB9XG4gICAgICAgIG11dGF0aW9uVHlwZSB7IG5hbWUgfVxuICAgICAgICBzdWJzY3JpcHRpb25UeXBlIHsgbmFtZSB9XG4gICAgICAgIHR5cGVzIHtcbiAgICAgICAgICAuLi5GdWxsVHlwZVxuICAgICAgICB9XG4gICAgICAgIGRpcmVjdGl2ZXMge1xuICAgICAgICAgIG5hbWVcbiAgICAgICAgICAke2Rlc2NyaXB0aW9uc31cbiAgICAgICAgICAke2RpcmVjdGl2ZUlzUmVwZWF0YWJsZX1cbiAgICAgICAgICBsb2NhdGlvbnNcbiAgICAgICAgICBhcmdzJHtpbnB1dERlcHJlY2F0aW9uKCcoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpJyl9IHtcbiAgICAgICAgICAgIC4uLklucHV0VmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFnbWVudCBGdWxsVHlwZSBvbiBfX1R5cGUge1xuICAgICAga2luZFxuICAgICAgbmFtZVxuICAgICAgJHtkZXNjcmlwdGlvbnN9XG4gICAgICAke3NwZWNpZmllZEJ5VXJsfVxuICAgICAgZmllbGRzKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKSB7XG4gICAgICAgIG5hbWVcbiAgICAgICAgJHtkZXNjcmlwdGlvbnN9XG4gICAgICAgIGFyZ3Mke2lucHV0RGVwcmVjYXRpb24oJyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSknKX0ge1xuICAgICAgICAgIC4uLklucHV0VmFsdWVcbiAgICAgICAgfVxuICAgICAgICB0eXBlIHtcbiAgICAgICAgICAuLi5UeXBlUmVmXG4gICAgICAgIH1cbiAgICAgICAgaXNEZXByZWNhdGVkXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uXG4gICAgICB9XG4gICAgICBpbnB1dEZpZWxkcyR7aW5wdXREZXByZWNhdGlvbignKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKScpfSB7XG4gICAgICAgIC4uLklucHV0VmFsdWVcbiAgICAgIH1cbiAgICAgIGludGVyZmFjZXMge1xuICAgICAgICAuLi5UeXBlUmVmXG4gICAgICB9XG4gICAgICBlbnVtVmFsdWVzKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKSB7XG4gICAgICAgIG5hbWVcbiAgICAgICAgJHtkZXNjcmlwdGlvbnN9XG4gICAgICAgIGlzRGVwcmVjYXRlZFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvblxuICAgICAgfVxuICAgICAgcG9zc2libGVUeXBlcyB7XG4gICAgICAgIC4uLlR5cGVSZWZcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFnbWVudCBJbnB1dFZhbHVlIG9uIF9fSW5wdXRWYWx1ZSB7XG4gICAgICBuYW1lXG4gICAgICAke2Rlc2NyaXB0aW9uc31cbiAgICAgIHR5cGUgeyAuLi5UeXBlUmVmIH1cbiAgICAgIGRlZmF1bHRWYWx1ZVxuICAgICAgJHtpbnB1dERlcHJlY2F0aW9uKCdpc0RlcHJlY2F0ZWQnKX1cbiAgICAgICR7aW5wdXREZXByZWNhdGlvbignZGVwcmVjYXRpb25SZWFzb24nKX1cbiAgICB9XG5cbiAgICBmcmFnbWVudCBUeXBlUmVmIG9uIF9fVHlwZSB7XG4gICAgICBraW5kXG4gICAgICBuYW1lXG4gICAgICBvZlR5cGUge1xuICAgICAgICBraW5kXG4gICAgICAgIG5hbWVcbiAgICAgICAgb2ZUeXBlIHtcbiAgICAgICAgICBraW5kXG4gICAgICAgICAgbmFtZVxuICAgICAgICAgIG9mVHlwZSB7XG4gICAgICAgICAgICBraW5kXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICBvZlR5cGUge1xuICAgICAgICAgICAgICBraW5kXG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgb2ZUeXBlIHtcbiAgICAgICAgICAgICAgICBraW5kXG4gICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgIG9mVHlwZSB7XG4gICAgICAgICAgICAgICAgICBraW5kXG4gICAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgICBvZlR5cGUge1xuICAgICAgICAgICAgICAgICAgICBraW5kXG4gICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbi8qKlxuICogUmV0dXJucyBhbiBvcGVyYXRpb24gQVNUIGdpdmVuIGEgZG9jdW1lbnQgQVNUIGFuZCBvcHRpb25hbGx5IGFuIG9wZXJhdGlvblxuICogbmFtZS4gSWYgYSBuYW1lIGlzIG5vdCBwcm92aWRlZCwgYW4gb3BlcmF0aW9uIGlzIG9ubHkgcmV0dXJuZWQgaWYgb25seSBvbmUgaXNcbiAqIHByb3ZpZGVkIGluIHRoZSBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQVNUKGRvY3VtZW50QVNULCBvcGVyYXRpb25OYW1lKSB7XG4gIGxldCBvcGVyYXRpb24gPSBudWxsO1xuXG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBkb2N1bWVudEFTVC5kZWZpbml0aW9ucykge1xuICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgIHZhciBfZGVmaW5pdGlvbiRuYW1lO1xuXG4gICAgICBpZiAob3BlcmF0aW9uTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIG5vIG9wZXJhdGlvbiBuYW1lIHdhcyBwcm92aWRlZCwgb25seSByZXR1cm4gYW4gT3BlcmF0aW9uIGlmIHRoZXJlXG4gICAgICAgIC8vIGlzIG9uZSBkZWZpbmVkIGluIHRoZSBkb2N1bWVudC4gVXBvbiBlbmNvdW50ZXJpbmcgdGhlIHNlY29uZCwgcmV0dXJuXG4gICAgICAgIC8vIG51bGwuXG4gICAgICAgIGlmIChvcGVyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZXJhdGlvbiA9IGRlZmluaXRpb247XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoKF9kZWZpbml0aW9uJG5hbWUgPSBkZWZpbml0aW9uLm5hbWUpID09PSBudWxsIHx8XG4gICAgICAgIF9kZWZpbml0aW9uJG5hbWUgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBfZGVmaW5pdGlvbiRuYW1lLnZhbHVlKSA9PT0gb3BlcmF0aW9uTmFtZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcGVyYXRpb247XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgcm9vdCB0eXBlIG9mIHRoZSBvcGVyYXRpb24gZnJvbSB0aGUgc2NoZW1hLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYEdyYXBoUUxTY2hlbWEuZ2V0Um9vdFR5cGVgIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2MTdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvblJvb3RUeXBlKHNjaGVtYSwgb3BlcmF0aW9uKSB7XG4gIGlmIChvcGVyYXRpb24ub3BlcmF0aW9uID09PSAncXVlcnknKSB7XG4gICAgY29uc3QgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gICAgaWYgKCFxdWVyeVR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICdTY2hlbWEgZG9lcyBub3QgZGVmaW5lIHRoZSByZXF1aXJlZCBxdWVyeSByb290IHR5cGUuJyxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeVR5cGU7XG4gIH1cblxuICBpZiAob3BlcmF0aW9uLm9wZXJhdGlvbiA9PT0gJ211dGF0aW9uJykge1xuICAgIGNvbnN0IG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcblxuICAgIGlmICghbXV0YXRpb25UeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdTY2hlbWEgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIG11dGF0aW9ucy4nLCB7XG4gICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbXV0YXRpb25UeXBlO1xuICB9XG5cbiAgaWYgKG9wZXJhdGlvbi5vcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgICBpZiAoIXN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ1NjaGVtYSBpcyBub3QgY29uZmlndXJlZCBmb3Igc3Vic2NyaXB0aW9ucy4nLCB7XG4gICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uVHlwZTtcbiAgfVxuXG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgJ0NhbiBvbmx5IGhhdmUgcXVlcnksIG11dGF0aW9uIGFuZCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucy4nLFxuICAgIHtcbiAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgfSxcbiAgKTtcbn1cbiIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL2xhbmd1YWdlL3BhcnNlci5tanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVN5bmMgfSBmcm9tICcuLi9leGVjdXRpb24vZXhlY3V0ZS5tanMnO1xuaW1wb3J0IHsgZ2V0SW50cm9zcGVjdGlvblF1ZXJ5IH0gZnJvbSAnLi9nZXRJbnRyb3NwZWN0aW9uUXVlcnkubWpzJztcbi8qKlxuICogQnVpbGQgYW4gSW50cm9zcGVjdGlvblF1ZXJ5IGZyb20gYSBHcmFwaFFMU2NoZW1hXG4gKlxuICogSW50cm9zcGVjdGlvblF1ZXJ5IGlzIHVzZWZ1bCBmb3IgdXRpbGl0aWVzIHRoYXQgY2FyZSBhYm91dCB0eXBlIGFuZCBmaWVsZFxuICogcmVsYXRpb25zaGlwcywgYnV0IGRvIG5vdCBuZWVkIHRvIHRyYXZlcnNlIHRocm91Z2ggdGhvc2UgcmVsYXRpb25zaGlwcy5cbiAqXG4gKiBUaGlzIGlzIHRoZSBpbnZlcnNlIG9mIGJ1aWxkQ2xpZW50U2NoZW1hLiBUaGUgcHJpbWFyeSB1c2UgY2FzZSBpcyBvdXRzaWRlXG4gKiBvZiB0aGUgc2VydmVyIGNvbnRleHQsIGZvciBpbnN0YW5jZSB3aGVuIGRvaW5nIHNjaGVtYSBjb21wYXJpc29ucy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW50cm9zcGVjdGlvbkZyb21TY2hlbWEoc2NoZW1hLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnNXaXRoRGVmYXVsdHMgPSB7XG4gICAgc3BlY2lmaWVkQnlVcmw6IHRydWUsXG4gICAgZGlyZWN0aXZlSXNSZXBlYXRhYmxlOiB0cnVlLFxuICAgIHNjaGVtYURlc2NyaXB0aW9uOiB0cnVlLFxuICAgIGlucHV0VmFsdWVEZXByZWNhdGlvbjogdHJ1ZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xuICBjb25zdCBkb2N1bWVudCA9IHBhcnNlKGdldEludHJvc3BlY3Rpb25RdWVyeShvcHRpb25zV2l0aERlZmF1bHRzKSk7XG4gIGNvbnN0IHJlc3VsdCA9IGV4ZWN1dGVTeW5jKHtcbiAgICBzY2hlbWEsXG4gICAgZG9jdW1lbnQsXG4gIH0pO1xuICAoIXJlc3VsdC5lcnJvcnMgJiYgcmVzdWx0LmRhdGEpIHx8IGludmFyaWFudChmYWxzZSk7XG4gIHJldHVybiByZXN1bHQuZGF0YTtcbn1cbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdExpa2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMnO1xuaW1wb3J0IHsga2V5VmFsTWFwIH0gZnJvbSAnLi4vanN1dGlscy9rZXlWYWxNYXAubWpzJztcbmltcG9ydCB7IHBhcnNlVmFsdWUgfSBmcm9tICcuLi9sYW5ndWFnZS9wYXJzZXIubWpzJztcbmltcG9ydCB7XG4gIGFzc2VydEludGVyZmFjZVR5cGUsXG4gIGFzc2VydE51bGxhYmxlVHlwZSxcbiAgYXNzZXJ0T2JqZWN0VHlwZSxcbiAgR3JhcGhRTEVudW1UeXBlLFxuICBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLFxuICBHcmFwaFFMSW50ZXJmYWNlVHlwZSxcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBHcmFwaFFMT2JqZWN0VHlwZSxcbiAgR3JhcGhRTFNjYWxhclR5cGUsXG4gIEdyYXBoUUxVbmlvblR5cGUsXG4gIGlzSW5wdXRUeXBlLFxuICBpc091dHB1dFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTERpcmVjdGl2ZSB9IGZyb20gJy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuaW1wb3J0IHsgaW50cm9zcGVjdGlvblR5cGVzLCBUeXBlS2luZCB9IGZyb20gJy4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanMnO1xuaW1wb3J0IHsgc3BlY2lmaWVkU2NhbGFyVHlwZXMgfSBmcm9tICcuLi90eXBlL3NjYWxhcnMubWpzJztcbmltcG9ydCB7IEdyYXBoUUxTY2hlbWEgfSBmcm9tICcuLi90eXBlL3NjaGVtYS5tanMnO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUIH0gZnJvbSAnLi92YWx1ZUZyb21BU1QubWpzJztcbi8qKlxuICogQnVpbGQgYSBHcmFwaFFMU2NoZW1hIGZvciB1c2UgYnkgY2xpZW50IHRvb2xzLlxuICpcbiAqIEdpdmVuIHRoZSByZXN1bHQgb2YgYSBjbGllbnQgcnVubmluZyB0aGUgaW50cm9zcGVjdGlvbiBxdWVyeSwgY3JlYXRlcyBhbmRcbiAqIHJldHVybnMgYSBHcmFwaFFMU2NoZW1hIGluc3RhbmNlIHdoaWNoIGNhbiBiZSB0aGVuIHVzZWQgd2l0aCBhbGwgZ3JhcGhxbC1qc1xuICogdG9vbHMsIGJ1dCBjYW5ub3QgYmUgdXNlZCB0byBleGVjdXRlIGEgcXVlcnksIGFzIGludHJvc3BlY3Rpb24gZG9lcyBub3RcbiAqIHJlcHJlc2VudCB0aGUgXCJyZXNvbHZlclwiLCBcInBhcnNlXCIgb3IgXCJzZXJpYWxpemVcIiBmdW5jdGlvbnMgb3IgYW55IG90aGVyXG4gKiBzZXJ2ZXItaW50ZXJuYWwgbWVjaGFuaXNtcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgYSBjb21wbGV0ZSBpbnRyb3NwZWN0aW9uIHJlc3VsdC4gRG9uJ3QgZm9yZ2V0IHRvIGNoZWNrXG4gKiB0aGUgXCJlcnJvcnNcIiBmaWVsZCBvZiBhIHNlcnZlciByZXNwb25zZSBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZENsaWVudFNjaGVtYShpbnRyb3NwZWN0aW9uLCBvcHRpb25zKSB7XG4gIChpc09iamVjdExpa2UoaW50cm9zcGVjdGlvbikgJiYgaXNPYmplY3RMaWtlKGludHJvc3BlY3Rpb24uX19zY2hlbWEpKSB8fFxuICAgIGRldkFzc2VydChcbiAgICAgIGZhbHNlLFxuICAgICAgYEludmFsaWQgb3IgaW5jb21wbGV0ZSBpbnRyb3NwZWN0aW9uIHJlc3VsdC4gRW5zdXJlIHRoYXQgeW91IGFyZSBwYXNzaW5nIFwiZGF0YVwiIHByb3BlcnR5IG9mIGludHJvc3BlY3Rpb24gcmVzcG9uc2UgYW5kIG5vIFwiZXJyb3JzXCIgd2FzIHJldHVybmVkIGFsb25nc2lkZTogJHtpbnNwZWN0KFxuICAgICAgICBpbnRyb3NwZWN0aW9uLFxuICAgICAgKX0uYCxcbiAgICApOyAvLyBHZXQgdGhlIHNjaGVtYSBmcm9tIHRoZSBpbnRyb3NwZWN0aW9uIHJlc3VsdC5cblxuICBjb25zdCBzY2hlbWFJbnRyb3NwZWN0aW9uID0gaW50cm9zcGVjdGlvbi5fX3NjaGVtYTsgLy8gSXRlcmF0ZSB0aHJvdWdoIGFsbCB0eXBlcywgZ2V0dGluZyB0aGUgdHlwZSBkZWZpbml0aW9uIGZvciBlYWNoLlxuXG4gIGNvbnN0IHR5cGVNYXAgPSBrZXlWYWxNYXAoXG4gICAgc2NoZW1hSW50cm9zcGVjdGlvbi50eXBlcyxcbiAgICAodHlwZUludHJvc3BlY3Rpb24pID0+IHR5cGVJbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgKHR5cGVJbnRyb3NwZWN0aW9uKSA9PiBidWlsZFR5cGUodHlwZUludHJvc3BlY3Rpb24pLFxuICApOyAvLyBJbmNsdWRlIHN0YW5kYXJkIHR5cGVzIG9ubHkgaWYgdGhleSBhcmUgdXNlZC5cblxuICBmb3IgKGNvbnN0IHN0ZFR5cGUgb2YgWy4uLnNwZWNpZmllZFNjYWxhclR5cGVzLCAuLi5pbnRyb3NwZWN0aW9uVHlwZXNdKSB7XG4gICAgaWYgKHR5cGVNYXBbc3RkVHlwZS5uYW1lXSkge1xuICAgICAgdHlwZU1hcFtzdGRUeXBlLm5hbWVdID0gc3RkVHlwZTtcbiAgICB9XG4gIH0gLy8gR2V0IHRoZSByb290IFF1ZXJ5LCBNdXRhdGlvbiwgYW5kIFN1YnNjcmlwdGlvbiB0eXBlcy5cblxuICBjb25zdCBxdWVyeVR5cGUgPSBzY2hlbWFJbnRyb3NwZWN0aW9uLnF1ZXJ5VHlwZVxuICAgID8gZ2V0T2JqZWN0VHlwZShzY2hlbWFJbnRyb3NwZWN0aW9uLnF1ZXJ5VHlwZSlcbiAgICA6IG51bGw7XG4gIGNvbnN0IG11dGF0aW9uVHlwZSA9IHNjaGVtYUludHJvc3BlY3Rpb24ubXV0YXRpb25UeXBlXG4gICAgPyBnZXRPYmplY3RUeXBlKHNjaGVtYUludHJvc3BlY3Rpb24ubXV0YXRpb25UeXBlKVxuICAgIDogbnVsbDtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYUludHJvc3BlY3Rpb24uc3Vic2NyaXB0aW9uVHlwZVxuICAgID8gZ2V0T2JqZWN0VHlwZShzY2hlbWFJbnRyb3NwZWN0aW9uLnN1YnNjcmlwdGlvblR5cGUpXG4gICAgOiBudWxsOyAvLyBHZXQgdGhlIGRpcmVjdGl2ZXMgc3VwcG9ydGVkIGJ5IEludHJvc3BlY3Rpb24sIGFzc3VtaW5nIGVtcHR5LXNldCBpZlxuICAvLyBkaXJlY3RpdmVzIHdlcmUgbm90IHF1ZXJpZWQgZm9yLlxuXG4gIGNvbnN0IGRpcmVjdGl2ZXMgPSBzY2hlbWFJbnRyb3NwZWN0aW9uLmRpcmVjdGl2ZXNcbiAgICA/IHNjaGVtYUludHJvc3BlY3Rpb24uZGlyZWN0aXZlcy5tYXAoYnVpbGREaXJlY3RpdmUpXG4gICAgOiBbXTsgLy8gVGhlbiBwcm9kdWNlIGFuZCByZXR1cm4gYSBTY2hlbWEgd2l0aCB0aGVzZSB0eXBlcy5cblxuICByZXR1cm4gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICAgIGRlc2NyaXB0aW9uOiBzY2hlbWFJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgIHF1ZXJ5OiBxdWVyeVR5cGUsXG4gICAgbXV0YXRpb246IG11dGF0aW9uVHlwZSxcbiAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblR5cGUsXG4gICAgdHlwZXM6IE9iamVjdC52YWx1ZXModHlwZU1hcCksXG4gICAgZGlyZWN0aXZlcyxcbiAgICBhc3N1bWVWYWxpZDpcbiAgICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZCxcbiAgfSk7IC8vIEdpdmVuIGEgdHlwZSByZWZlcmVuY2UgaW4gaW50cm9zcGVjdGlvbiwgcmV0dXJuIHRoZSBHcmFwaFFMVHlwZSBpbnN0YW5jZS5cbiAgLy8gcHJlZmVycmluZyBjYWNoZWQgaW5zdGFuY2VzIGJlZm9yZSBidWlsZGluZyBuZXcgaW5zdGFuY2VzLlxuXG4gIGZ1bmN0aW9uIGdldFR5cGUodHlwZVJlZikge1xuICAgIGlmICh0eXBlUmVmLmtpbmQgPT09IFR5cGVLaW5kLkxJU1QpIHtcbiAgICAgIGNvbnN0IGl0ZW1SZWYgPSB0eXBlUmVmLm9mVHlwZTtcblxuICAgICAgaWYgKCFpdGVtUmVmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGVjb3JhdGVkIHR5cGUgZGVlcGVyIHRoYW4gaW50cm9zcGVjdGlvbiBxdWVyeS4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChnZXRUeXBlKGl0ZW1SZWYpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZVJlZi5raW5kID09PSBUeXBlS2luZC5OT05fTlVMTCkge1xuICAgICAgY29uc3QgbnVsbGFibGVSZWYgPSB0eXBlUmVmLm9mVHlwZTtcblxuICAgICAgaWYgKCFudWxsYWJsZVJlZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRlZCB0eXBlIGRlZXBlciB0aGFuIGludHJvc3BlY3Rpb24gcXVlcnkuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bGxhYmxlVHlwZSA9IGdldFR5cGUobnVsbGFibGVSZWYpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChhc3NlcnROdWxsYWJsZVR5cGUobnVsbGFibGVUeXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE5hbWVkVHlwZSh0eXBlUmVmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5hbWVkVHlwZSh0eXBlUmVmKSB7XG4gICAgY29uc3QgdHlwZU5hbWUgPSB0eXBlUmVmLm5hbWU7XG5cbiAgICBpZiAoIXR5cGVOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZSByZWZlcmVuY2U6ICR7aW5zcGVjdCh0eXBlUmVmKX0uYCk7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZSA9IHR5cGVNYXBbdHlwZU5hbWVdO1xuXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIG9yIGluY29tcGxldGUgc2NoZW1hLCB1bmtub3duIHR5cGU6ICR7dHlwZU5hbWV9LiBFbnN1cmUgdGhhdCBhIGZ1bGwgaW50cm9zcGVjdGlvbiBxdWVyeSBpcyB1c2VkIGluIG9yZGVyIHRvIGJ1aWxkIGEgY2xpZW50IHNjaGVtYS5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9iamVjdFR5cGUodHlwZVJlZikge1xuICAgIHJldHVybiBhc3NlcnRPYmplY3RUeXBlKGdldE5hbWVkVHlwZSh0eXBlUmVmKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnRlcmZhY2VUeXBlKHR5cGVSZWYpIHtcbiAgICByZXR1cm4gYXNzZXJ0SW50ZXJmYWNlVHlwZShnZXROYW1lZFR5cGUodHlwZVJlZikpO1xuICB9IC8vIEdpdmVuIGEgdHlwZSdzIGludHJvc3BlY3Rpb24gcmVzdWx0LCBjb25zdHJ1Y3QgdGhlIGNvcnJlY3RcbiAgLy8gR3JhcGhRTFR5cGUgaW5zdGFuY2UuXG5cbiAgZnVuY3Rpb24gYnVpbGRUeXBlKHR5cGUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1vcHRpb25hbC1jaGFpblxuICAgIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZS5uYW1lICE9IG51bGwgJiYgdHlwZS5raW5kICE9IG51bGwpIHtcbiAgICAgIC8vIEZJWE1FOiBQcm9wZXJseSB0eXBlIEludHJvc3BlY3Rpb25UeXBlLCBpdCdzIGEgYnJlYWtpbmcgY2hhbmdlIHNvIGZpeCBpbiB2MTdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3dpdGNoLWV4aGF1c3RpdmVuZXNzLWNoZWNrXG4gICAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICBjYXNlIFR5cGVLaW5kLlNDQUxBUjpcbiAgICAgICAgICByZXR1cm4gYnVpbGRTY2FsYXJEZWYodHlwZSk7XG5cbiAgICAgICAgY2FzZSBUeXBlS2luZC5PQkpFQ1Q6XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkT2JqZWN0RGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuSU5URVJGQUNFOlxuICAgICAgICAgIHJldHVybiBidWlsZEludGVyZmFjZURlZih0eXBlKTtcblxuICAgICAgICBjYXNlIFR5cGVLaW5kLlVOSU9OOlxuICAgICAgICAgIHJldHVybiBidWlsZFVuaW9uRGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuRU5VTTpcbiAgICAgICAgICByZXR1cm4gYnVpbGRFbnVtRGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuSU5QVVRfT0JKRUNUOlxuICAgICAgICAgIHJldHVybiBidWlsZElucHV0T2JqZWN0RGVmKHR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHR5cGVTdHIgPSBpbnNwZWN0KHR5cGUpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIG9yIGluY29tcGxldGUgaW50cm9zcGVjdGlvbiByZXN1bHQuIEVuc3VyZSB0aGF0IGEgZnVsbCBpbnRyb3NwZWN0aW9uIHF1ZXJ5IGlzIHVzZWQgaW4gb3JkZXIgdG8gYnVpbGQgYSBjbGllbnQgc2NoZW1hOiAke3R5cGVTdHJ9LmAsXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkU2NhbGFyRGVmKHNjYWxhckludHJvc3BlY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICAgIG5hbWU6IHNjYWxhckludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBzY2FsYXJJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgc3BlY2lmaWVkQnlVUkw6IHNjYWxhckludHJvc3BlY3Rpb24uc3BlY2lmaWVkQnlVUkwsXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEltcGxlbWVudGF0aW9uc0xpc3QoaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbikge1xuICAgIC8vIFRPRE86IFRlbXBvcmFyeSB3b3JrYXJvdW5kIHVudGlsIEdyYXBoUUwgZWNvc3lzdGVtIHdpbGwgZnVsbHkgc3VwcG9ydFxuICAgIC8vICdpbnRlcmZhY2VzJyBvbiBpbnRlcmZhY2UgdHlwZXMuXG4gICAgaWYgKFxuICAgICAgaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5pbnRlcmZhY2VzID09PSBudWxsICYmXG4gICAgICBpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uLmtpbmQgPT09IFR5cGVLaW5kLklOVEVSRkFDRVxuICAgICkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGlmICghaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5pbnRlcmZhY2VzKSB7XG4gICAgICBjb25zdCBpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgaW50ZXJmYWNlczogJHtpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uU3RyfS5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5pbnRlcmZhY2VzLm1hcChnZXRJbnRlcmZhY2VUeXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkT2JqZWN0RGVmKG9iamVjdEludHJvc3BlY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6IG9iamVjdEludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBvYmplY3RJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgaW50ZXJmYWNlczogKCkgPT4gYnVpbGRJbXBsZW1lbnRhdGlvbnNMaXN0KG9iamVjdEludHJvc3BlY3Rpb24pLFxuICAgICAgZmllbGRzOiAoKSA9PiBidWlsZEZpZWxkRGVmTWFwKG9iamVjdEludHJvc3BlY3Rpb24pLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbnRlcmZhY2VEZWYoaW50ZXJmYWNlSW50cm9zcGVjdGlvbikge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICAgICAgbmFtZTogaW50ZXJmYWNlSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGludGVyZmFjZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiAoKSA9PiBidWlsZEltcGxlbWVudGF0aW9uc0xpc3QoaW50ZXJmYWNlSW50cm9zcGVjdGlvbiksXG4gICAgICBmaWVsZHM6ICgpID0+IGJ1aWxkRmllbGREZWZNYXAoaW50ZXJmYWNlSW50cm9zcGVjdGlvbiksXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFVuaW9uRGVmKHVuaW9uSW50cm9zcGVjdGlvbikge1xuICAgIGlmICghdW5pb25JbnRyb3NwZWN0aW9uLnBvc3NpYmxlVHlwZXMpIHtcbiAgICAgIGNvbnN0IHVuaW9uSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QodW5pb25JbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgcG9zc2libGVUeXBlczogJHt1bmlvbkludHJvc3BlY3Rpb25TdHJ9LmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTFVuaW9uVHlwZSh7XG4gICAgICBuYW1lOiB1bmlvbkludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB1bmlvbkludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICB0eXBlczogKCkgPT4gdW5pb25JbnRyb3NwZWN0aW9uLnBvc3NpYmxlVHlwZXMubWFwKGdldE9iamVjdFR5cGUpLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRFbnVtRGVmKGVudW1JbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCFlbnVtSW50cm9zcGVjdGlvbi5lbnVtVmFsdWVzKSB7XG4gICAgICBjb25zdCBlbnVtSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QoZW51bUludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBlbnVtVmFsdWVzOiAke2VudW1JbnRyb3NwZWN0aW9uU3RyfS5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gICAgICBuYW1lOiBlbnVtSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGVudW1JbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgdmFsdWVzOiBrZXlWYWxNYXAoXG4gICAgICAgIGVudW1JbnRyb3NwZWN0aW9uLmVudW1WYWx1ZXMsXG4gICAgICAgICh2YWx1ZUludHJvc3BlY3Rpb24pID0+IHZhbHVlSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgICAodmFsdWVJbnRyb3NwZWN0aW9uKSA9PiAoe1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IHZhbHVlSW50cm9zcGVjdGlvbi5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbnB1dE9iamVjdERlZihpbnB1dE9iamVjdEludHJvc3BlY3Rpb24pIHtcbiAgICBpZiAoIWlucHV0T2JqZWN0SW50cm9zcGVjdGlvbi5pbnB1dEZpZWxkcykge1xuICAgICAgY29uc3QgaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChpbnB1dE9iamVjdEludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBpbnB1dEZpZWxkczogJHtpbnB1dE9iamVjdEludHJvc3BlY3Rpb25TdHJ9LmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiBpbnB1dE9iamVjdEludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBpbnB1dE9iamVjdEludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBmaWVsZHM6ICgpID0+IGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChpbnB1dE9iamVjdEludHJvc3BlY3Rpb24uaW5wdXRGaWVsZHMpLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRGaWVsZERlZk1hcCh0eXBlSW50cm9zcGVjdGlvbikge1xuICAgIGlmICghdHlwZUludHJvc3BlY3Rpb24uZmllbGRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnRyb3NwZWN0aW9uIHJlc3VsdCBtaXNzaW5nIGZpZWxkczogJHtpbnNwZWN0KHR5cGVJbnRyb3NwZWN0aW9uKX0uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleVZhbE1hcChcbiAgICAgIHR5cGVJbnRyb3NwZWN0aW9uLmZpZWxkcyxcbiAgICAgIChmaWVsZEludHJvc3BlY3Rpb24pID0+IGZpZWxkSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgYnVpbGRGaWVsZCxcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRGaWVsZChmaWVsZEludHJvc3BlY3Rpb24pIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0VHlwZShmaWVsZEludHJvc3BlY3Rpb24udHlwZSk7XG5cbiAgICBpZiAoIWlzT3V0cHV0VHlwZSh0eXBlKSkge1xuICAgICAgY29uc3QgdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnRyb3NwZWN0aW9uIG11c3QgcHJvdmlkZSBvdXRwdXQgdHlwZSBmb3IgZmllbGRzLCBidXQgcmVjZWl2ZWQ6ICR7dHlwZVN0cn0uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFmaWVsZEludHJvc3BlY3Rpb24uYXJncykge1xuICAgICAgY29uc3QgZmllbGRJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChmaWVsZEludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBmaWVsZCBhcmdzOiAke2ZpZWxkSW50cm9zcGVjdGlvblN0cn0uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZEludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogZmllbGRJbnRyb3NwZWN0aW9uLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgdHlwZSxcbiAgICAgIGFyZ3M6IGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChmaWVsZEludHJvc3BlY3Rpb24uYXJncyksXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChpbnB1dFZhbHVlSW50cm9zcGVjdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5VmFsTWFwKFxuICAgICAgaW5wdXRWYWx1ZUludHJvc3BlY3Rpb25zLFxuICAgICAgKGlucHV0VmFsdWUpID0+IGlucHV0VmFsdWUubmFtZSxcbiAgICAgIGJ1aWxkSW5wdXRWYWx1ZSxcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbnB1dFZhbHVlKGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uKSB7XG4gICAgY29uc3QgdHlwZSA9IGdldFR5cGUoaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24udHlwZSk7XG5cbiAgICBpZiAoIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludHJvc3BlY3Rpb24gbXVzdCBwcm92aWRlIGlucHV0IHR5cGUgZm9yIGFyZ3VtZW50cywgYnV0IHJlY2VpdmVkOiAke3R5cGVTdHJ9LmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9XG4gICAgICBpbnB1dFZhbHVlSW50cm9zcGVjdGlvbi5kZWZhdWx0VmFsdWUgIT0gbnVsbFxuICAgICAgICA/IHZhbHVlRnJvbUFTVChwYXJzZVZhbHVlKGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uLmRlZmF1bHRWYWx1ZSksIHR5cGUpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICB0eXBlLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZERpcmVjdGl2ZShkaXJlY3RpdmVJbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCFkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIgPSBpbnNwZWN0KGRpcmVjdGl2ZUludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBkaXJlY3RpdmUgYXJnczogJHtkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyfS5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWRpcmVjdGl2ZUludHJvc3BlY3Rpb24ubG9jYXRpb25zKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChkaXJlY3RpdmVJbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgZGlyZWN0aXZlIGxvY2F0aW9uczogJHtkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyfS5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICAgICAgbmFtZTogZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGRpcmVjdGl2ZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBpc1JlcGVhdGFibGU6IGRpcmVjdGl2ZUludHJvc3BlY3Rpb24uaXNSZXBlYXRhYmxlLFxuICAgICAgbG9jYXRpb25zOiBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmxvY2F0aW9ucy5zbGljZSgpLFxuICAgICAgYXJnczogYnVpbGRJbnB1dFZhbHVlRGVmTWFwKGRpcmVjdGl2ZUludHJvc3BlY3Rpb24uYXJncyksXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuLi9qc3V0aWxzL2luc3BlY3QubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5pbXBvcnQgeyBrZXlWYWxNYXAgfSBmcm9tICcuLi9qc3V0aWxzL2tleVZhbE1hcC5tanMnO1xuaW1wb3J0IHsgbmF0dXJhbENvbXBhcmUgfSBmcm9tICcuLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLm1qcyc7XG5pbXBvcnQge1xuICBHcmFwaFFMRW51bVR5cGUsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsXG4gIEdyYXBoUUxJbnRlcmZhY2VUeXBlLFxuICBHcmFwaFFMTGlzdCxcbiAgR3JhcGhRTE5vbk51bGwsXG4gIEdyYXBoUUxPYmplY3RUeXBlLFxuICBHcmFwaFFMVW5pb25UeXBlLFxuICBpc0VudW1UeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc0xpc3RUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzU2NhbGFyVHlwZSxcbiAgaXNVbmlvblR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTERpcmVjdGl2ZSB9IGZyb20gJy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuaW1wb3J0IHsgaXNJbnRyb3NwZWN0aW9uVHlwZSB9IGZyb20gJy4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTFNjaGVtYSB9IGZyb20gJy4uL3R5cGUvc2NoZW1hLm1qcyc7XG4vKipcbiAqIFNvcnQgR3JhcGhRTFNjaGVtYS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBzb3J0ZWQgY29weSBvZiB0aGUgZ2l2ZW4gR3JhcGhRTFNjaGVtYS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY1NvcnRTY2hlbWEoc2NoZW1hKSB7XG4gIGNvbnN0IHNjaGVtYUNvbmZpZyA9IHNjaGVtYS50b0NvbmZpZygpO1xuICBjb25zdCB0eXBlTWFwID0ga2V5VmFsTWFwKFxuICAgIHNvcnRCeU5hbWUoc2NoZW1hQ29uZmlnLnR5cGVzKSxcbiAgICAodHlwZSkgPT4gdHlwZS5uYW1lLFxuICAgIHNvcnROYW1lZFR5cGUsXG4gICk7XG4gIHJldHVybiBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gICAgLi4uc2NoZW1hQ29uZmlnLFxuICAgIHR5cGVzOiBPYmplY3QudmFsdWVzKHR5cGVNYXApLFxuICAgIGRpcmVjdGl2ZXM6IHNvcnRCeU5hbWUoc2NoZW1hQ29uZmlnLmRpcmVjdGl2ZXMpLm1hcChzb3J0RGlyZWN0aXZlKSxcbiAgICBxdWVyeTogcmVwbGFjZU1heWJlVHlwZShzY2hlbWFDb25maWcucXVlcnkpLFxuICAgIG11dGF0aW9uOiByZXBsYWNlTWF5YmVUeXBlKHNjaGVtYUNvbmZpZy5tdXRhdGlvbiksXG4gICAgc3Vic2NyaXB0aW9uOiByZXBsYWNlTWF5YmVUeXBlKHNjaGVtYUNvbmZpZy5zdWJzY3JpcHRpb24pLFxuICB9KTtcblxuICBmdW5jdGlvbiByZXBsYWNlVHlwZSh0eXBlKSB7XG4gICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3QocmVwbGFjZVR5cGUodHlwZS5vZlR5cGUpKTtcbiAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwocmVwbGFjZVR5cGUodHlwZS5vZlR5cGUpKTtcbiAgICB9IC8vIEB0cy1leHBlY3QtZXJyb3IgRklYTUU6IFRTIENvbnZlcnNpb25cblxuICAgIHJldHVybiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZU5hbWVkVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGVNYXBbdHlwZS5uYW1lXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VNYXliZVR5cGUobWF5YmVUeXBlKSB7XG4gICAgcmV0dXJuIG1heWJlVHlwZSAmJiByZXBsYWNlTmFtZWRUeXBlKG1heWJlVHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0RGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGRpcmVjdGl2ZS50b0NvbmZpZygpO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBsb2NhdGlvbnM6IHNvcnRCeShjb25maWcubG9jYXRpb25zLCAoeCkgPT4geCksXG4gICAgICBhcmdzOiBzb3J0QXJncyhjb25maWcuYXJncyksXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0QXJncyhhcmdzKSB7XG4gICAgcmV0dXJuIHNvcnRPYmpNYXAoYXJncywgKGFyZykgPT4gKHsgLi4uYXJnLCB0eXBlOiByZXBsYWNlVHlwZShhcmcudHlwZSkgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydEZpZWxkcyhmaWVsZHNNYXApIHtcbiAgICByZXR1cm4gc29ydE9iak1hcChmaWVsZHNNYXAsIChmaWVsZCkgPT4gKHtcbiAgICAgIC4uLmZpZWxkLFxuICAgICAgdHlwZTogcmVwbGFjZVR5cGUoZmllbGQudHlwZSksXG4gICAgICBhcmdzOiBmaWVsZC5hcmdzICYmIHNvcnRBcmdzKGZpZWxkLmFyZ3MpLFxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRJbnB1dEZpZWxkcyhmaWVsZHNNYXApIHtcbiAgICByZXR1cm4gc29ydE9iak1hcChmaWVsZHNNYXAsIChmaWVsZCkgPT4gKHtcbiAgICAgIC4uLmZpZWxkLFxuICAgICAgdHlwZTogcmVwbGFjZVR5cGUoZmllbGQudHlwZSksXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydFR5cGVzKGFycmF5KSB7XG4gICAgcmV0dXJuIHNvcnRCeU5hbWUoYXJyYXkpLm1hcChyZXBsYWNlTmFtZWRUeXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnROYW1lZFR5cGUodHlwZSkge1xuICAgIGlmIChpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gc29ydFR5cGVzKGNvbmZpZy5pbnRlcmZhY2VzKSxcbiAgICAgICAgZmllbGRzOiAoKSA9PiBzb3J0RmllbGRzKGNvbmZpZy5maWVsZHMpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gc29ydFR5cGVzKGNvbmZpZy5pbnRlcmZhY2VzKSxcbiAgICAgICAgZmllbGRzOiAoKSA9PiBzb3J0RmllbGRzKGNvbmZpZy5maWVsZHMpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUoe1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHR5cGVzOiAoKSA9PiBzb3J0VHlwZXMoY29uZmlnLnR5cGVzKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgdmFsdWVzOiBzb3J0T2JqTWFwKGNvbmZpZy52YWx1ZXMsICh2YWx1ZSkgPT4gdmFsdWUpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIGZpZWxkczogKCkgPT4gc29ydElucHV0RmllbGRzKGNvbmZpZy5maWVsZHMpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgICBmYWxzZSB8fCBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzb3J0T2JqTWFwKG1hcCwgc29ydFZhbHVlRm4pIHtcbiAgY29uc3Qgc29ydGVkTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtYXApLnNvcnQobmF0dXJhbENvbXBhcmUpKSB7XG4gICAgc29ydGVkTWFwW2tleV0gPSBzb3J0VmFsdWVGbihtYXBba2V5XSk7XG4gIH1cblxuICByZXR1cm4gc29ydGVkTWFwO1xufVxuXG5mdW5jdGlvbiBzb3J0QnlOYW1lKGFycmF5KSB7XG4gIHJldHVybiBzb3J0QnkoYXJyYXksIChvYmopID0+IG9iai5uYW1lKTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5KGFycmF5LCBtYXBUb0tleSkge1xuICByZXR1cm4gYXJyYXkuc2xpY2UoKS5zb3J0KChvYmoxLCBvYmoyKSA9PiB7XG4gICAgY29uc3Qga2V5MSA9IG1hcFRvS2V5KG9iajEpO1xuICAgIGNvbnN0IGtleTIgPSBtYXBUb0tleShvYmoyKTtcbiAgICByZXR1cm4gbmF0dXJhbENvbXBhcmUoa2V5MSwga2V5Mik7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vanN1dGlscy9pbnZhcmlhbnQubWpzJztcbmltcG9ydCB7IGlzUHJpbnRhYmxlQXNCbG9ja1N0cmluZyB9IGZyb20gJy4uL2xhbmd1YWdlL2Jsb2NrU3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IHByaW50IH0gZnJvbSAnLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanMnO1xuaW1wb3J0IHtcbiAgaXNFbnVtVHlwZSxcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzSW50ZXJmYWNlVHlwZSxcbiAgaXNPYmplY3RUeXBlLFxuICBpc1NjYWxhclR5cGUsXG4gIGlzVW5pb25UeXBlLFxufSBmcm9tICcuLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7XG4gIERFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OLFxuICBpc1NwZWNpZmllZERpcmVjdGl2ZSxcbn0gZnJvbSAnLi4vdHlwZS9kaXJlY3RpdmVzLm1qcyc7XG5pbXBvcnQgeyBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSAnLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBpc1NwZWNpZmllZFNjYWxhclR5cGUgfSBmcm9tICcuLi90eXBlL3NjYWxhcnMubWpzJztcbmltcG9ydCB7IGFzdEZyb21WYWx1ZSB9IGZyb20gJy4vYXN0RnJvbVZhbHVlLm1qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTY2hlbWEoc2NoZW1hKSB7XG4gIHJldHVybiBwcmludEZpbHRlcmVkU2NoZW1hKFxuICAgIHNjaGVtYSxcbiAgICAobikgPT4gIWlzU3BlY2lmaWVkRGlyZWN0aXZlKG4pLFxuICAgIGlzRGVmaW5lZFR5cGUsXG4gICk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpbnRJbnRyb3NwZWN0aW9uU2NoZW1hKHNjaGVtYSkge1xuICByZXR1cm4gcHJpbnRGaWx0ZXJlZFNjaGVtYShzY2hlbWEsIGlzU3BlY2lmaWVkRGlyZWN0aXZlLCBpc0ludHJvc3BlY3Rpb25UeXBlKTtcbn1cblxuZnVuY3Rpb24gaXNEZWZpbmVkVHlwZSh0eXBlKSB7XG4gIHJldHVybiAhaXNTcGVjaWZpZWRTY2FsYXJUeXBlKHR5cGUpICYmICFpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpO1xufVxuXG5mdW5jdGlvbiBwcmludEZpbHRlcmVkU2NoZW1hKHNjaGVtYSwgZGlyZWN0aXZlRmlsdGVyLCB0eXBlRmlsdGVyKSB7XG4gIGNvbnN0IGRpcmVjdGl2ZXMgPSBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpLmZpbHRlcihkaXJlY3RpdmVGaWx0ZXIpO1xuICBjb25zdCB0eXBlcyA9IE9iamVjdC52YWx1ZXMoc2NoZW1hLmdldFR5cGVNYXAoKSkuZmlsdGVyKHR5cGVGaWx0ZXIpO1xuICByZXR1cm4gW1xuICAgIHByaW50U2NoZW1hRGVmaW5pdGlvbihzY2hlbWEpLFxuICAgIC4uLmRpcmVjdGl2ZXMubWFwKChkaXJlY3RpdmUpID0+IHByaW50RGlyZWN0aXZlKGRpcmVjdGl2ZSkpLFxuICAgIC4uLnR5cGVzLm1hcCgodHlwZSkgPT4gcHJpbnRUeXBlKHR5cGUpKSxcbiAgXVxuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAuam9pbignXFxuXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHByaW50U2NoZW1hRGVmaW5pdGlvbihzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5kZXNjcmlwdGlvbiA9PSBudWxsICYmIGlzU2NoZW1hT2ZDb21tb25OYW1lcyhzY2hlbWEpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3BlcmF0aW9uVHlwZXMgPSBbXTtcbiAgY29uc3QgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gIGlmIChxdWVyeVR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKGAgIHF1ZXJ5OiAke3F1ZXJ5VHlwZS5uYW1lfWApO1xuICB9XG5cbiAgY29uc3QgbXV0YXRpb25UeXBlID0gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpO1xuXG4gIGlmIChtdXRhdGlvblR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKGAgIG11dGF0aW9uOiAke211dGF0aW9uVHlwZS5uYW1lfWApO1xuICB9XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgaWYgKHN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKGAgIHN1YnNjcmlwdGlvbjogJHtzdWJzY3JpcHRpb25UeXBlLm5hbWV9YCk7XG4gIH1cblxuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihzY2hlbWEpICsgYHNjaGVtYSB7XFxuJHtvcGVyYXRpb25UeXBlcy5qb2luKCdcXG4nKX1cXG59YDtcbn1cbi8qKlxuICogR3JhcGhRTCBzY2hlbWEgZGVmaW5lIHJvb3QgdHlwZXMgZm9yIGVhY2ggdHlwZSBvZiBvcGVyYXRpb24uIFRoZXNlIHR5cGVzIGFyZVxuICogdGhlIHNhbWUgYXMgYW55IG90aGVyIHR5cGUgYW5kIGNhbiBiZSBuYW1lZCBpbiBhbnkgbWFubmVyLCBob3dldmVyIHRoZXJlIGlzXG4gKiBhIGNvbW1vbiBuYW1pbmcgY29udmVudGlvbjpcbiAqXG4gKiBgYGBncmFwaHFsXG4gKiAgIHNjaGVtYSB7XG4gKiAgICAgcXVlcnk6IFF1ZXJ5XG4gKiAgICAgbXV0YXRpb246IE11dGF0aW9uXG4gKiAgICAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cbiAqICAgfVxuICogYGBgXG4gKlxuICogV2hlbiB1c2luZyB0aGlzIG5hbWluZyBjb252ZW50aW9uLCB0aGUgc2NoZW1hIGRlc2NyaXB0aW9uIGNhbiBiZSBvbWl0dGVkLlxuICovXG5cbmZ1bmN0aW9uIGlzU2NoZW1hT2ZDb21tb25OYW1lcyhzY2hlbWEpIHtcbiAgY29uc3QgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gIGlmIChxdWVyeVR5cGUgJiYgcXVlcnlUeXBlLm5hbWUgIT09ICdRdWVyeScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBtdXRhdGlvblR5cGUgPSBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG5cbiAgaWYgKG11dGF0aW9uVHlwZSAmJiBtdXRhdGlvblR5cGUubmFtZSAhPT0gJ011dGF0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChzdWJzY3JpcHRpb25UeXBlICYmIHN1YnNjcmlwdGlvblR5cGUubmFtZSAhPT0gJ1N1YnNjcmlwdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50VHlwZSh0eXBlKSB7XG4gIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRTY2FsYXIodHlwZSk7XG4gIH1cblxuICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHByaW50T2JqZWN0KHR5cGUpO1xuICB9XG5cbiAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludEludGVyZmFjZSh0eXBlKTtcbiAgfVxuXG4gIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludFVuaW9uKHR5cGUpO1xuICB9XG5cbiAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRFbnVtKHR5cGUpO1xuICB9XG5cbiAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHByaW50SW5wdXRPYmplY3QodHlwZSk7XG4gIH1cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59XG5cbmZ1bmN0aW9uIHByaW50U2NhbGFyKHR5cGUpIHtcbiAgcmV0dXJuIChcbiAgICBwcmludERlc2NyaXB0aW9uKHR5cGUpICsgYHNjYWxhciAke3R5cGUubmFtZX1gICsgcHJpbnRTcGVjaWZpZWRCeVVSTCh0eXBlKVxuICApO1xufVxuXG5mdW5jdGlvbiBwcmludEltcGxlbWVudGVkSW50ZXJmYWNlcyh0eXBlKSB7XG4gIGNvbnN0IGludGVyZmFjZXMgPSB0eXBlLmdldEludGVyZmFjZXMoKTtcbiAgcmV0dXJuIGludGVyZmFjZXMubGVuZ3RoXG4gICAgPyAnIGltcGxlbWVudHMgJyArIGludGVyZmFjZXMubWFwKChpKSA9PiBpLm5hbWUpLmpvaW4oJyAmICcpXG4gICAgOiAnJztcbn1cblxuZnVuY3Rpb24gcHJpbnRPYmplY3QodHlwZSkge1xuICByZXR1cm4gKFxuICAgIHByaW50RGVzY3JpcHRpb24odHlwZSkgK1xuICAgIGB0eXBlICR7dHlwZS5uYW1lfWAgK1xuICAgIHByaW50SW1wbGVtZW50ZWRJbnRlcmZhY2VzKHR5cGUpICtcbiAgICBwcmludEZpZWxkcyh0eXBlKVxuICApO1xufVxuXG5mdW5jdGlvbiBwcmludEludGVyZmFjZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgcHJpbnREZXNjcmlwdGlvbih0eXBlKSArXG4gICAgYGludGVyZmFjZSAke3R5cGUubmFtZX1gICtcbiAgICBwcmludEltcGxlbWVudGVkSW50ZXJmYWNlcyh0eXBlKSArXG4gICAgcHJpbnRGaWVsZHModHlwZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRVbmlvbih0eXBlKSB7XG4gIGNvbnN0IHR5cGVzID0gdHlwZS5nZXRUeXBlcygpO1xuICBjb25zdCBwb3NzaWJsZVR5cGVzID0gdHlwZXMubGVuZ3RoID8gJyA9ICcgKyB0eXBlcy5qb2luKCcgfCAnKSA6ICcnO1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlKSArICd1bmlvbiAnICsgdHlwZS5uYW1lICsgcG9zc2libGVUeXBlcztcbn1cblxuZnVuY3Rpb24gcHJpbnRFbnVtKHR5cGUpIHtcbiAgY29uc3QgdmFsdWVzID0gdHlwZVxuICAgIC5nZXRWYWx1ZXMoKVxuICAgIC5tYXAoXG4gICAgICAodmFsdWUsIGkpID0+XG4gICAgICAgIHByaW50RGVzY3JpcHRpb24odmFsdWUsICcgICcsICFpKSArXG4gICAgICAgICcgICcgK1xuICAgICAgICB2YWx1ZS5uYW1lICtcbiAgICAgICAgcHJpbnREZXByZWNhdGVkKHZhbHVlLmRlcHJlY2F0aW9uUmVhc29uKSxcbiAgICApO1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlKSArIGBlbnVtICR7dHlwZS5uYW1lfWAgKyBwcmludEJsb2NrKHZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIHByaW50SW5wdXRPYmplY3QodHlwZSkge1xuICBjb25zdCBmaWVsZHMgPSBPYmplY3QudmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpLm1hcChcbiAgICAoZiwgaSkgPT4gcHJpbnREZXNjcmlwdGlvbihmLCAnICAnLCAhaSkgKyAnICAnICsgcHJpbnRJbnB1dFZhbHVlKGYpLFxuICApO1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih0eXBlKSArIGBpbnB1dCAke3R5cGUubmFtZX1gICsgcHJpbnRCbG9jayhmaWVsZHMpO1xufVxuXG5mdW5jdGlvbiBwcmludEZpZWxkcyh0eXBlKSB7XG4gIGNvbnN0IGZpZWxkcyA9IE9iamVjdC52YWx1ZXModHlwZS5nZXRGaWVsZHMoKSkubWFwKFxuICAgIChmLCBpKSA9PlxuICAgICAgcHJpbnREZXNjcmlwdGlvbihmLCAnICAnLCAhaSkgK1xuICAgICAgJyAgJyArXG4gICAgICBmLm5hbWUgK1xuICAgICAgcHJpbnRBcmdzKGYuYXJncywgJyAgJykgK1xuICAgICAgJzogJyArXG4gICAgICBTdHJpbmcoZi50eXBlKSArXG4gICAgICBwcmludERlcHJlY2F0ZWQoZi5kZXByZWNhdGlvblJlYXNvbiksXG4gICk7XG4gIHJldHVybiBwcmludEJsb2NrKGZpZWxkcyk7XG59XG5cbmZ1bmN0aW9uIHByaW50QmxvY2soaXRlbXMpIHtcbiAgcmV0dXJuIGl0ZW1zLmxlbmd0aCAhPT0gMCA/ICcge1xcbicgKyBpdGVtcy5qb2luKCdcXG4nKSArICdcXG59JyA6ICcnO1xufVxuXG5mdW5jdGlvbiBwcmludEFyZ3MoYXJncywgaW5kZW50YXRpb24gPSAnJykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH0gLy8gSWYgZXZlcnkgYXJnIGRvZXMgbm90IGhhdmUgYSBkZXNjcmlwdGlvbiwgcHJpbnQgdGhlbSBvbiBvbmUgbGluZS5cblxuICBpZiAoYXJncy5ldmVyeSgoYXJnKSA9PiAhYXJnLmRlc2NyaXB0aW9uKSkge1xuICAgIHJldHVybiAnKCcgKyBhcmdzLm1hcChwcmludElucHV0VmFsdWUpLmpvaW4oJywgJykgKyAnKSc7XG4gIH1cblxuICByZXR1cm4gKFxuICAgICcoXFxuJyArXG4gICAgYXJnc1xuICAgICAgLm1hcChcbiAgICAgICAgKGFyZywgaSkgPT5cbiAgICAgICAgICBwcmludERlc2NyaXB0aW9uKGFyZywgJyAgJyArIGluZGVudGF0aW9uLCAhaSkgK1xuICAgICAgICAgICcgICcgK1xuICAgICAgICAgIGluZGVudGF0aW9uICtcbiAgICAgICAgICBwcmludElucHV0VmFsdWUoYXJnKSxcbiAgICAgIClcbiAgICAgIC5qb2luKCdcXG4nKSArXG4gICAgJ1xcbicgK1xuICAgIGluZGVudGF0aW9uICtcbiAgICAnKSdcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRJbnB1dFZhbHVlKGFyZykge1xuICBjb25zdCBkZWZhdWx0QVNUID0gYXN0RnJvbVZhbHVlKGFyZy5kZWZhdWx0VmFsdWUsIGFyZy50eXBlKTtcbiAgbGV0IGFyZ0RlY2wgPSBhcmcubmFtZSArICc6ICcgKyBTdHJpbmcoYXJnLnR5cGUpO1xuXG4gIGlmIChkZWZhdWx0QVNUKSB7XG4gICAgYXJnRGVjbCArPSBgID0gJHtwcmludChkZWZhdWx0QVNUKX1gO1xuICB9XG5cbiAgcmV0dXJuIGFyZ0RlY2wgKyBwcmludERlcHJlY2F0ZWQoYXJnLmRlcHJlY2F0aW9uUmVhc29uKTtcbn1cblxuZnVuY3Rpb24gcHJpbnREaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIHJldHVybiAoXG4gICAgcHJpbnREZXNjcmlwdGlvbihkaXJlY3RpdmUpICtcbiAgICAnZGlyZWN0aXZlIEAnICtcbiAgICBkaXJlY3RpdmUubmFtZSArXG4gICAgcHJpbnRBcmdzKGRpcmVjdGl2ZS5hcmdzKSArXG4gICAgKGRpcmVjdGl2ZS5pc1JlcGVhdGFibGUgPyAnIHJlcGVhdGFibGUnIDogJycpICtcbiAgICAnIG9uICcgK1xuICAgIGRpcmVjdGl2ZS5sb2NhdGlvbnMuam9pbignIHwgJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnREZXByZWNhdGVkKHJlYXNvbikge1xuICBpZiAocmVhc29uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAocmVhc29uICE9PSBERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTikge1xuICAgIGNvbnN0IGFzdFZhbHVlID0gcHJpbnQoe1xuICAgICAga2luZDogS2luZC5TVFJJTkcsXG4gICAgICB2YWx1ZTogcmVhc29uLFxuICAgIH0pO1xuICAgIHJldHVybiBgIEBkZXByZWNhdGVkKHJlYXNvbjogJHthc3RWYWx1ZX0pYDtcbiAgfVxuXG4gIHJldHVybiAnIEBkZXByZWNhdGVkJztcbn1cblxuZnVuY3Rpb24gcHJpbnRTcGVjaWZpZWRCeVVSTChzY2FsYXIpIHtcbiAgaWYgKHNjYWxhci5zcGVjaWZpZWRCeVVSTCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3QgYXN0VmFsdWUgPSBwcmludCh7XG4gICAga2luZDogS2luZC5TVFJJTkcsXG4gICAgdmFsdWU6IHNjYWxhci5zcGVjaWZpZWRCeVVSTCxcbiAgfSk7XG4gIHJldHVybiBgIEBzcGVjaWZpZWRCeSh1cmw6ICR7YXN0VmFsdWV9KWA7XG59XG5cbmZ1bmN0aW9uIHByaW50RGVzY3JpcHRpb24oZGVmLCBpbmRlbnRhdGlvbiA9ICcnLCBmaXJzdEluQmxvY2sgPSB0cnVlKSB7XG4gIGNvbnN0IHsgZGVzY3JpcHRpb24gfSA9IGRlZjtcblxuICBpZiAoZGVzY3JpcHRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbnN0IGJsb2NrU3RyaW5nID0gcHJpbnQoe1xuICAgIGtpbmQ6IEtpbmQuU1RSSU5HLFxuICAgIHZhbHVlOiBkZXNjcmlwdGlvbixcbiAgICBibG9jazogaXNQcmludGFibGVBc0Jsb2NrU3RyaW5nKGRlc2NyaXB0aW9uKSxcbiAgfSk7XG4gIGNvbnN0IHByZWZpeCA9XG4gICAgaW5kZW50YXRpb24gJiYgIWZpcnN0SW5CbG9jayA/ICdcXG4nICsgaW5kZW50YXRpb24gOiBpbmRlbnRhdGlvbjtcbiAgcmV0dXJuIHByZWZpeCArIGJsb2NrU3RyaW5nLnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIGluZGVudGF0aW9uKSArICdcXG4nO1xufVxuIiwiaW1wb3J0IHsgS2luZCB9IGZyb20gJy4uL2xhbmd1YWdlL2tpbmRzLm1qcyc7XG4vKipcbiAqIFByb3ZpZGVkIGEgY29sbGVjdGlvbiBvZiBBU1RzLCBwcmVzdW1hYmx5IGVhY2ggZnJvbSBkaWZmZXJlbnQgZmlsZXMsXG4gKiBjb25jYXRlbmF0ZSB0aGUgQVNUcyB0b2dldGhlciBpbnRvIGJhdGNoZWQgQVNULCB1c2VmdWwgZm9yIHZhbGlkYXRpbmcgbWFueVxuICogR3JhcGhRTCBzb3VyY2UgZmlsZXMgd2hpY2ggdG9nZXRoZXIgcmVwcmVzZW50IG9uZSBjb25jZXB0dWFsIGFwcGxpY2F0aW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBU1QoZG9jdW1lbnRzKSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gW107XG5cbiAgZm9yIChjb25zdCBkb2Mgb2YgZG9jdW1lbnRzKSB7XG4gICAgZGVmaW5pdGlvbnMucHVzaCguLi5kb2MuZGVmaW5pdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBraW5kOiBLaW5kLkRPQ1VNRU5ULFxuICAgIGRlZmluaXRpb25zLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgS2luZCB9IGZyb20gJy4uL2xhbmd1YWdlL2tpbmRzLm1qcyc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJy4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzJztcbi8qKlxuICogc2VwYXJhdGVPcGVyYXRpb25zIGFjY2VwdHMgYSBzaW5nbGUgQVNUIGRvY3VtZW50IHdoaWNoIG1heSBjb250YWluIG1hbnlcbiAqIG9wZXJhdGlvbnMgYW5kIGZyYWdtZW50cyBhbmQgcmV0dXJucyBhIGNvbGxlY3Rpb24gb2YgQVNUIGRvY3VtZW50cyBlYWNoIG9mXG4gKiB3aGljaCBjb250YWlucyBhIHNpbmdsZSBvcGVyYXRpb24gYXMgd2VsbCB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbnMgaXRcbiAqIHJlZmVycyB0by5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGVPcGVyYXRpb25zKGRvY3VtZW50QVNUKSB7XG4gIGNvbnN0IG9wZXJhdGlvbnMgPSBbXTtcbiAgY29uc3QgZGVwR3JhcGggPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBQb3B1bGF0ZSBtZXRhZGF0YSBhbmQgYnVpbGQgYSBkZXBlbmRlbmN5IGdyYXBoLlxuXG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbk5vZGUgb2YgZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGRlZmluaXRpb25Ob2RlLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgICAgb3BlcmF0aW9ucy5wdXNoKGRlZmluaXRpb25Ob2RlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOlxuICAgICAgICBkZXBHcmFwaFtkZWZpbml0aW9uTm9kZS5uYW1lLnZhbHVlXSA9IGNvbGxlY3REZXBlbmRlbmNpZXMoXG4gICAgICAgICAgZGVmaW5pdGlvbk5vZGUuc2VsZWN0aW9uU2V0LFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDogLy8gaWdub3JlIG5vbi1leGVjdXRhYmxlIGRlZmluaXRpb25zXG4gICAgfVxuICB9IC8vIEZvciBlYWNoIG9wZXJhdGlvbiwgcHJvZHVjZSBhIG5ldyBzeW50aGVzaXplZCBBU1Qgd2hpY2ggaW5jbHVkZXMgb25seSB3aGF0XG4gIC8vIGlzIG5lY2Vzc2FyeSBmb3IgY29tcGxldGluZyB0aGF0IG9wZXJhdGlvbi5cblxuICBjb25zdCBzZXBhcmF0ZWREb2N1bWVudEFTVHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbnMpIHtcbiAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBmb3IgKGNvbnN0IGZyYWdtZW50TmFtZSBvZiBjb2xsZWN0RGVwZW5kZW5jaWVzKG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQpKSB7XG4gICAgICBjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMsIGRlcEdyYXBoLCBmcmFnbWVudE5hbWUpO1xuICAgIH0gLy8gUHJvdmlkZXMgdGhlIGVtcHR5IHN0cmluZyBmb3IgYW5vbnltb3VzIG9wZXJhdGlvbnMuXG5cbiAgICBjb25zdCBvcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uLm5hbWUgPyBvcGVyYXRpb24ubmFtZS52YWx1ZSA6ICcnOyAvLyBUaGUgbGlzdCBvZiBkZWZpbml0aW9uIG5vZGVzIHRvIGJlIGluY2x1ZGVkIGZvciB0aGlzIG9wZXJhdGlvbiwgc29ydGVkXG4gICAgLy8gdG8gcmV0YWluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBvcmlnaW5hbCBkb2N1bWVudC5cblxuICAgIHNlcGFyYXRlZERvY3VtZW50QVNUc1tvcGVyYXRpb25OYW1lXSA9IHtcbiAgICAgIGtpbmQ6IEtpbmQuRE9DVU1FTlQsXG4gICAgICBkZWZpbml0aW9uczogZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgICAgICAobm9kZSkgPT5cbiAgICAgICAgICBub2RlID09PSBvcGVyYXRpb24gfHxcbiAgICAgICAgICAobm9kZS5raW5kID09PSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT04gJiZcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcy5oYXMobm9kZS5uYW1lLnZhbHVlKSksXG4gICAgICApLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gc2VwYXJhdGVkRG9jdW1lbnRBU1RzO1xufVxuXG4vLyBGcm9tIGEgZGVwZW5kZW5jeSBncmFwaCwgY29sbGVjdHMgYSBsaXN0IG9mIHRyYW5zaXRpdmUgZGVwZW5kZW5jaWVzIGJ5XG4vLyByZWN1cnNpbmcgdGhyb3VnaCBhIGRlcGVuZGVuY3kgZ3JhcGguXG5mdW5jdGlvbiBjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyhjb2xsZWN0ZWQsIGRlcEdyYXBoLCBmcm9tTmFtZSkge1xuICBpZiAoIWNvbGxlY3RlZC5oYXMoZnJvbU5hbWUpKSB7XG4gICAgY29sbGVjdGVkLmFkZChmcm9tTmFtZSk7XG4gICAgY29uc3QgaW1tZWRpYXRlRGVwcyA9IGRlcEdyYXBoW2Zyb21OYW1lXTtcblxuICAgIGlmIChpbW1lZGlhdGVEZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3QgdG9OYW1lIG9mIGltbWVkaWF0ZURlcHMpIHtcbiAgICAgICAgY29sbGVjdFRyYW5zaXRpdmVEZXBlbmRlbmNpZXMoY29sbGVjdGVkLCBkZXBHcmFwaCwgdG9OYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29sbGVjdERlcGVuZGVuY2llcyhzZWxlY3Rpb25TZXQpIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gW107XG4gIHZpc2l0KHNlbGVjdGlvblNldCwge1xuICAgIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG4iLCJpbXBvcnQgeyBwcmludEJsb2NrU3RyaW5nIH0gZnJvbSAnLi4vbGFuZ3VhZ2UvYmxvY2tTdHJpbmcubWpzJztcbmltcG9ydCB7IGlzUHVuY3R1YXRvclRva2VuS2luZCwgTGV4ZXIgfSBmcm9tICcuLi9sYW5ndWFnZS9sZXhlci5tanMnO1xuaW1wb3J0IHsgaXNTb3VyY2UsIFNvdXJjZSB9IGZyb20gJy4uL2xhbmd1YWdlL3NvdXJjZS5tanMnO1xuaW1wb3J0IHsgVG9rZW5LaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2UvdG9rZW5LaW5kLm1qcyc7XG4vKipcbiAqIFN0cmlwcyBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBzaWduaWZpY2FudCB0byB0aGUgdmFsaWRpdHkgb3IgZXhlY3V0aW9uXG4gKiBvZiBhIEdyYXBoUUwgZG9jdW1lbnQ6XG4gKiAgIC0gVW5pY29kZUJPTVxuICogICAtIFdoaXRlU3BhY2VcbiAqICAgLSBMaW5lVGVybWluYXRvclxuICogICAtIENvbW1lbnRcbiAqICAgLSBDb21tYVxuICogICAtIEJsb2NrU3RyaW5nIGluZGVudGF0aW9uXG4gKlxuICogTm90ZTogSXQgaXMgcmVxdWlyZWQgdG8gaGF2ZSBhIGRlbGltaXRlciBjaGFyYWN0ZXIgYmV0d2VlbiBuZWlnaGJvcmluZ1xuICogbm9uLXB1bmN0dWF0b3IgdG9rZW5zIGFuZCB0aGlzIGZ1bmN0aW9uIGFsd2F5cyB1c2VzIHNpbmdsZSBzcGFjZSBhcyBkZWxpbWl0ZXIuXG4gKlxuICogSXQgaXMgZ3VhcmFudGVlZCB0aGF0IGJvdGggaW5wdXQgYW5kIG91dHB1dCBkb2N1bWVudHMgaWYgcGFyc2VkIHdvdWxkIHJlc3VsdFxuICogaW4gdGhlIGV4YWN0IHNhbWUgQVNUIGV4Y2VwdCBmb3Igbm9kZXMgbG9jYXRpb24uXG4gKlxuICogV2FybmluZzogSXQgaXMgZ3VhcmFudGVlZCB0aGF0IHRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcHJvZHVjZSBzdGFibGUgcmVzdWx0cy5cbiAqIEhvd2V2ZXIsIGl0J3Mgbm90IGd1YXJhbnRlZWQgdGhhdCBpdCB3aWxsIHN0YXkgdGhlIHNhbWUgYmV0d2VlbiBkaWZmZXJlbnRcbiAqIHJlbGVhc2VzIGR1ZSB0byBidWdmaXhlcyBvciBjaGFuZ2VzIGluIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKlxuICogUXVlcnkgZXhhbXBsZTpcbiAqXG4gKiBgYGBncmFwaHFsXG4gKiBxdWVyeSBTb21lUXVlcnkoJGZvbzogU3RyaW5nISwgJGJhcjogU3RyaW5nKSB7XG4gKiAgIHNvbWVGaWVsZChmb286ICRmb28sIGJhcjogJGJhcikge1xuICogICAgIGFcbiAqICAgICBiIHtcbiAqICAgICAgIGNcbiAqICAgICAgIGRcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJlY29tZXM6XG4gKlxuICogYGBgZ3JhcGhxbFxuICogcXVlcnkgU29tZVF1ZXJ5KCRmb286U3RyaW5nISRiYXI6U3RyaW5nKXtzb21lRmllbGQoZm9vOiRmb28gYmFyOiRiYXIpe2EgYntjIGR9fX1cbiAqIGBgYFxuICpcbiAqIFNETCBleGFtcGxlOlxuICpcbiAqIGBgYGdyYXBocWxcbiAqIFwiXCJcIlxuICogVHlwZSBkZXNjcmlwdGlvblxuICogXCJcIlwiXG4gKiB0eXBlIEZvbyB7XG4gKiAgIFwiXCJcIlxuICogICBGaWVsZCBkZXNjcmlwdGlvblxuICogICBcIlwiXCJcbiAqICAgYmFyOiBTdHJpbmdcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJlY29tZXM6XG4gKlxuICogYGBgZ3JhcGhxbFxuICogXCJcIlwiVHlwZSBkZXNjcmlwdGlvblwiXCJcIiB0eXBlIEZvb3tcIlwiXCJGaWVsZCBkZXNjcmlwdGlvblwiXCJcIiBiYXI6U3RyaW5nfVxuICogYGBgXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwSWdub3JlZENoYXJhY3RlcnMoc291cmNlKSB7XG4gIGNvbnN0IHNvdXJjZU9iaiA9IGlzU291cmNlKHNvdXJjZSkgPyBzb3VyY2UgOiBuZXcgU291cmNlKHNvdXJjZSk7XG4gIGNvbnN0IGJvZHkgPSBzb3VyY2VPYmouYm9keTtcbiAgY29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIoc291cmNlT2JqKTtcbiAgbGV0IHN0cmlwcGVkQm9keSA9ICcnO1xuICBsZXQgd2FzTGFzdEFkZGVkVG9rZW5Ob25QdW5jdHVhdG9yID0gZmFsc2U7XG5cbiAgd2hpbGUgKGxleGVyLmFkdmFuY2UoKS5raW5kICE9PSBUb2tlbktpbmQuRU9GKSB7XG4gICAgY29uc3QgY3VycmVudFRva2VuID0gbGV4ZXIudG9rZW47XG4gICAgY29uc3QgdG9rZW5LaW5kID0gY3VycmVudFRva2VuLmtpbmQ7XG4gICAgLyoqXG4gICAgICogRXZlcnkgdHdvIG5vbi1wdW5jdHVhdG9yIHRva2VucyBzaG91bGQgaGF2ZSBzcGFjZSBiZXR3ZWVuIHRoZW0uXG4gICAgICogQWxzbyBwcmV2ZW50IGNhc2Ugb2Ygbm9uLXB1bmN0dWF0b3IgdG9rZW4gZm9sbG93aW5nIGJ5IHNwcmVhZCByZXN1bHRpbmdcbiAgICAgKiBpbiBpbnZhbGlkIHRva2VuIChlLmcuIGAxLi4uYCBpcyBpbnZhbGlkIEZsb2F0IHRva2VuKS5cbiAgICAgKi9cblxuICAgIGNvbnN0IGlzTm9uUHVuY3R1YXRvciA9ICFpc1B1bmN0dWF0b3JUb2tlbktpbmQoY3VycmVudFRva2VuLmtpbmQpO1xuXG4gICAgaWYgKHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvcikge1xuICAgICAgaWYgKGlzTm9uUHVuY3R1YXRvciB8fCBjdXJyZW50VG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLlNQUkVBRCkge1xuICAgICAgICBzdHJpcHBlZEJvZHkgKz0gJyAnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRva2VuQm9keSA9IGJvZHkuc2xpY2UoY3VycmVudFRva2VuLnN0YXJ0LCBjdXJyZW50VG9rZW4uZW5kKTtcblxuICAgIGlmICh0b2tlbktpbmQgPT09IFRva2VuS2luZC5CTE9DS19TVFJJTkcpIHtcbiAgICAgIHN0cmlwcGVkQm9keSArPSBwcmludEJsb2NrU3RyaW5nKGN1cnJlbnRUb2tlbi52YWx1ZSwge1xuICAgICAgICBtaW5pbWl6ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJpcHBlZEJvZHkgKz0gdG9rZW5Cb2R5O1xuICAgIH1cblxuICAgIHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciA9IGlzTm9uUHVuY3R1YXRvcjtcbiAgfVxuXG4gIHJldHVybiBzdHJpcHBlZEJvZHk7XG59XG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBhc3NlcnROYW1lIH0gZnJvbSAnLi4vdHlwZS9hc3NlcnROYW1lLm1qcyc7XG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cblxuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZy5cbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYGFzc2VydE5hbWVgIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2MTdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWROYW1lKG5hbWUpIHtcbiAgY29uc3QgZXJyb3IgPSBpc1ZhbGlkTmFtZUVycm9yKG5hbWUpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG4vKipcbiAqIFJldHVybnMgYW4gRXJyb3IgaWYgYSBuYW1lIGlzIGludmFsaWQuXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBhc3NlcnROYW1lYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjE3XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROYW1lRXJyb3IobmFtZSkge1xuICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KGZhbHNlLCAnRXhwZWN0ZWQgbmFtZSB0byBiZSBhIHN0cmluZy4nKTtcblxuICBpZiAobmFtZS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgTmFtZSBcIiR7bmFtZX1cIiBtdXN0IG5vdCBiZWdpbiB3aXRoIFwiX19cIiwgd2hpY2ggaXMgcmVzZXJ2ZWQgYnkgR3JhcGhRTCBpbnRyb3NwZWN0aW9uLmAsXG4gICAgKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXNzZXJ0TmFtZShuYW1lKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsga2V5TWFwIH0gZnJvbSAnLi4vanN1dGlscy9rZXlNYXAubWpzJztcbmltcG9ydCB7IHByaW50IH0gZnJvbSAnLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanMnO1xuaW1wb3J0IHtcbiAgaXNFbnVtVHlwZSxcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzSW50ZXJmYWNlVHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNOYW1lZFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG4gIGlzT2JqZWN0VHlwZSxcbiAgaXNSZXF1aXJlZEFyZ3VtZW50LFxuICBpc1JlcXVpcmVkSW5wdXRGaWVsZCxcbiAgaXNTY2FsYXJUeXBlLFxuICBpc1VuaW9uVHlwZSxcbn0gZnJvbSAnLi4vdHlwZS9kZWZpbml0aW9uLm1qcyc7XG5pbXBvcnQgeyBpc1NwZWNpZmllZFNjYWxhclR5cGUgfSBmcm9tICcuLi90eXBlL3NjYWxhcnMubWpzJztcbmltcG9ydCB7IGFzdEZyb21WYWx1ZSB9IGZyb20gJy4vYXN0RnJvbVZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzb3J0VmFsdWVOb2RlIH0gZnJvbSAnLi9zb3J0VmFsdWVOb2RlLm1qcyc7XG52YXIgQnJlYWtpbmdDaGFuZ2VUeXBlO1xuXG4oZnVuY3Rpb24gKEJyZWFraW5nQ2hhbmdlVHlwZSkge1xuICBCcmVha2luZ0NoYW5nZVR5cGVbJ1RZUEVfUkVNT1ZFRCddID0gJ1RZUEVfUkVNT1ZFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnVFlQRV9DSEFOR0VEX0tJTkQnXSA9ICdUWVBFX0NIQU5HRURfS0lORCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnVFlQRV9SRU1PVkVEX0ZST01fVU5JT04nXSA9ICdUWVBFX1JFTU9WRURfRlJPTV9VTklPTic7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnVkFMVUVfUkVNT1ZFRF9GUk9NX0VOVU0nXSA9ICdWQUxVRV9SRU1PVkVEX0ZST01fRU5VTSc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnUkVRVUlSRURfSU5QVVRfRklFTERfQURERUQnXSA9XG4gICAgJ1JFUVVJUkVEX0lOUFVUX0ZJRUxEX0FEREVEJztcbiAgQnJlYWtpbmdDaGFuZ2VUeXBlWydJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfUkVNT1ZFRCddID1cbiAgICAnSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQnO1xuICBCcmVha2luZ0NoYW5nZVR5cGVbJ0ZJRUxEX1JFTU9WRUQnXSA9ICdGSUVMRF9SRU1PVkVEJztcbiAgQnJlYWtpbmdDaGFuZ2VUeXBlWydGSUVMRF9DSEFOR0VEX0tJTkQnXSA9ICdGSUVMRF9DSEFOR0VEX0tJTkQnO1xuICBCcmVha2luZ0NoYW5nZVR5cGVbJ1JFUVVJUkVEX0FSR19BRERFRCddID0gJ1JFUVVJUkVEX0FSR19BRERFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnQVJHX1JFTU9WRUQnXSA9ICdBUkdfUkVNT1ZFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnQVJHX0NIQU5HRURfS0lORCddID0gJ0FSR19DSEFOR0VEX0tJTkQnO1xuICBCcmVha2luZ0NoYW5nZVR5cGVbJ0RJUkVDVElWRV9SRU1PVkVEJ10gPSAnRElSRUNUSVZFX1JFTU9WRUQnO1xuICBCcmVha2luZ0NoYW5nZVR5cGVbJ0RJUkVDVElWRV9BUkdfUkVNT1ZFRCddID0gJ0RJUkVDVElWRV9BUkdfUkVNT1ZFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnUkVRVUlSRURfRElSRUNUSVZFX0FSR19BRERFRCddID1cbiAgICAnUkVRVUlSRURfRElSRUNUSVZFX0FSR19BRERFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRCddID1cbiAgICAnRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRCc7XG4gIEJyZWFraW5nQ2hhbmdlVHlwZVsnRElSRUNUSVZFX0xPQ0FUSU9OX1JFTU9WRUQnXSA9XG4gICAgJ0RJUkVDVElWRV9MT0NBVElPTl9SRU1PVkVEJztcbn0pKEJyZWFraW5nQ2hhbmdlVHlwZSB8fCAoQnJlYWtpbmdDaGFuZ2VUeXBlID0ge30pKTtcblxuZXhwb3J0IHsgQnJlYWtpbmdDaGFuZ2VUeXBlIH07XG52YXIgRGFuZ2Vyb3VzQ2hhbmdlVHlwZTtcblxuKGZ1bmN0aW9uIChEYW5nZXJvdXNDaGFuZ2VUeXBlKSB7XG4gIERhbmdlcm91c0NoYW5nZVR5cGVbJ1ZBTFVFX0FEREVEX1RPX0VOVU0nXSA9ICdWQUxVRV9BRERFRF9UT19FTlVNJztcbiAgRGFuZ2Vyb3VzQ2hhbmdlVHlwZVsnVFlQRV9BRERFRF9UT19VTklPTiddID0gJ1RZUEVfQURERURfVE9fVU5JT04nO1xuICBEYW5nZXJvdXNDaGFuZ2VUeXBlWydPUFRJT05BTF9JTlBVVF9GSUVMRF9BRERFRCddID1cbiAgICAnT1BUSU9OQUxfSU5QVVRfRklFTERfQURERUQnO1xuICBEYW5nZXJvdXNDaGFuZ2VUeXBlWydPUFRJT05BTF9BUkdfQURERUQnXSA9ICdPUFRJT05BTF9BUkdfQURERUQnO1xuICBEYW5nZXJvdXNDaGFuZ2VUeXBlWydJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQnXSA9XG4gICAgJ0lNUExFTUVOVEVEX0lOVEVSRkFDRV9BRERFRCc7XG4gIERhbmdlcm91c0NoYW5nZVR5cGVbJ0FSR19ERUZBVUxUX1ZBTFVFX0NIQU5HRSddID0gJ0FSR19ERUZBVUxUX1ZBTFVFX0NIQU5HRSc7XG59KShEYW5nZXJvdXNDaGFuZ2VUeXBlIHx8IChEYW5nZXJvdXNDaGFuZ2VUeXBlID0ge30pKTtcblxuZXhwb3J0IHsgRGFuZ2Vyb3VzQ2hhbmdlVHlwZSB9O1xuXG4vKipcbiAqIEdpdmVuIHR3byBzY2hlbWFzLCByZXR1cm5zIGFuIEFycmF5IGNvbnRhaW5pbmcgZGVzY3JpcHRpb25zIG9mIGFsbCB0aGUgdHlwZXNcbiAqIG9mIGJyZWFraW5nIGNoYW5nZXMgY292ZXJlZCBieSB0aGUgb3RoZXIgZnVuY3Rpb25zIGRvd24gYmVsb3cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQnJlYWtpbmdDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgcmV0dXJuIGZpbmRTY2hlbWFDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKS5maWx0ZXIoXG4gICAgKGNoYW5nZSkgPT4gY2hhbmdlLnR5cGUgaW4gQnJlYWtpbmdDaGFuZ2VUeXBlLFxuICApO1xufVxuLyoqXG4gKiBHaXZlbiB0d28gc2NoZW1hcywgcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGRlc2NyaXB0aW9ucyBvZiBhbGwgdGhlIHR5cGVzXG4gKiBvZiBwb3RlbnRpYWxseSBkYW5nZXJvdXMgY2hhbmdlcyBjb3ZlcmVkIGJ5IHRoZSBvdGhlciBmdW5jdGlvbnMgZG93biBiZWxvdy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZERhbmdlcm91c0NoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICByZXR1cm4gZmluZFNjaGVtYUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpLmZpbHRlcihcbiAgICAoY2hhbmdlKSA9PiBjaGFuZ2UudHlwZSBpbiBEYW5nZXJvdXNDaGFuZ2VUeXBlLFxuICApO1xufVxuXG5mdW5jdGlvbiBmaW5kU2NoZW1hQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkge1xuICByZXR1cm4gW1xuICAgIC4uLmZpbmRUeXBlQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSksXG4gICAgLi4uZmluZERpcmVjdGl2ZUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpLFxuICBdO1xufVxuXG5mdW5jdGlvbiBmaW5kRGlyZWN0aXZlQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkge1xuICBjb25zdCBzY2hlbWFDaGFuZ2VzID0gW107XG4gIGNvbnN0IGRpcmVjdGl2ZXNEaWZmID0gZGlmZihcbiAgICBvbGRTY2hlbWEuZ2V0RGlyZWN0aXZlcygpLFxuICAgIG5ld1NjaGVtYS5nZXREaXJlY3RpdmVzKCksXG4gICk7XG5cbiAgZm9yIChjb25zdCBvbGREaXJlY3RpdmUgb2YgZGlyZWN0aXZlc0RpZmYucmVtb3ZlZCkge1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRElSRUNUSVZFX1JFTU9WRUQsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7b2xkRGlyZWN0aXZlLm5hbWV9IHdhcyByZW1vdmVkLmAsXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IFtvbGREaXJlY3RpdmUsIG5ld0RpcmVjdGl2ZV0gb2YgZGlyZWN0aXZlc0RpZmYucGVyc2lzdGVkKSB7XG4gICAgY29uc3QgYXJnc0RpZmYgPSBkaWZmKG9sZERpcmVjdGl2ZS5hcmdzLCBuZXdEaXJlY3RpdmUuYXJncyk7XG5cbiAgICBmb3IgKGNvbnN0IG5ld0FyZyBvZiBhcmdzRGlmZi5hZGRlZCkge1xuICAgICAgaWYgKGlzUmVxdWlyZWRBcmd1bWVudChuZXdBcmcpKSB7XG4gICAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLlJFUVVJUkVEX0RJUkVDVElWRV9BUkdfQURERUQsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBBIHJlcXVpcmVkIGFyZyAke25ld0FyZy5uYW1lfSBvbiBkaXJlY3RpdmUgJHtvbGREaXJlY3RpdmUubmFtZX0gd2FzIGFkZGVkLmAsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qgb2xkQXJnIG9mIGFyZ3NEaWZmLnJlbW92ZWQpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5ESVJFQ1RJVkVfQVJHX1JFTU9WRUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgJHtvbGRBcmcubmFtZX0gd2FzIHJlbW92ZWQgZnJvbSAke29sZERpcmVjdGl2ZS5uYW1lfS5gLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9sZERpcmVjdGl2ZS5pc1JlcGVhdGFibGUgJiYgIW5ld0RpcmVjdGl2ZS5pc1JlcGVhdGFibGUpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5ESVJFQ1RJVkVfUkVQRUFUQUJMRV9SRU1PVkVELFxuICAgICAgICBkZXNjcmlwdGlvbjogYFJlcGVhdGFibGUgZmxhZyB3YXMgcmVtb3ZlZCBmcm9tICR7b2xkRGlyZWN0aXZlLm5hbWV9LmAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIG9sZERpcmVjdGl2ZS5sb2NhdGlvbnMpIHtcbiAgICAgIGlmICghbmV3RGlyZWN0aXZlLmxvY2F0aW9ucy5pbmNsdWRlcyhsb2NhdGlvbikpIHtcbiAgICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRElSRUNUSVZFX0xPQ0FUSU9OX1JFTU9WRUQsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGAke2xvY2F0aW9ufSB3YXMgcmVtb3ZlZCBmcm9tICR7b2xkRGlyZWN0aXZlLm5hbWV9LmAsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kVHlwZUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgY29uc3Qgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICBjb25zdCB0eXBlc0RpZmYgPSBkaWZmKFxuICAgIE9iamVjdC52YWx1ZXMob2xkU2NoZW1hLmdldFR5cGVNYXAoKSksXG4gICAgT2JqZWN0LnZhbHVlcyhuZXdTY2hlbWEuZ2V0VHlwZU1hcCgpKSxcbiAgKTtcblxuICBmb3IgKGNvbnN0IG9sZFR5cGUgb2YgdHlwZXNEaWZmLnJlbW92ZWQpIHtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLlRZUEVfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBpc1NwZWNpZmllZFNjYWxhclR5cGUob2xkVHlwZSlcbiAgICAgICAgPyBgU3RhbmRhcmQgc2NhbGFyICR7b2xkVHlwZS5uYW1lfSB3YXMgcmVtb3ZlZCBiZWNhdXNlIGl0IGlzIG5vdCByZWZlcmVuY2VkIGFueW1vcmUuYFxuICAgICAgICA6IGAke29sZFR5cGUubmFtZX0gd2FzIHJlbW92ZWQuYCxcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW29sZFR5cGUsIG5ld1R5cGVdIG9mIHR5cGVzRGlmZi5wZXJzaXN0ZWQpIHtcbiAgICBpZiAoaXNFbnVtVHlwZShvbGRUeXBlKSAmJiBpc0VudW1UeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goLi4uZmluZEVudW1UeXBlQ2hhbmdlcyhvbGRUeXBlLCBuZXdUeXBlKSk7XG4gICAgfSBlbHNlIGlmIChpc1VuaW9uVHlwZShvbGRUeXBlKSAmJiBpc1VuaW9uVHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKC4uLmZpbmRVbmlvblR5cGVDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpKTtcbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKG9sZFR5cGUpICYmIGlzSW5wdXRPYmplY3RUeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goLi4uZmluZElucHV0T2JqZWN0VHlwZUNoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3RUeXBlKG9sZFR5cGUpICYmIGlzT2JqZWN0VHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKFxuICAgICAgICAuLi5maW5kRmllbGRDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpLFxuICAgICAgICAuLi5maW5kSW1wbGVtZW50ZWRJbnRlcmZhY2VzQ2hhbmdlcyhvbGRUeXBlLCBuZXdUeXBlKSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc0ludGVyZmFjZVR5cGUob2xkVHlwZSkgJiYgaXNJbnRlcmZhY2VUeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goXG4gICAgICAgIC4uLmZpbmRGaWVsZENoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSksXG4gICAgICAgIC4uLmZpbmRJbXBsZW1lbnRlZEludGVyZmFjZXNDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG9sZFR5cGUuY29uc3RydWN0b3IgIT09IG5ld1R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5UWVBFX0NIQU5HRURfS0lORCxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgYCR7b2xkVHlwZS5uYW1lfSBjaGFuZ2VkIGZyb20gYCArXG4gICAgICAgICAgYCR7dHlwZUtpbmROYW1lKG9sZFR5cGUpfSB0byAke3R5cGVLaW5kTmFtZShuZXdUeXBlKX0uYCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5wdXRPYmplY3RUeXBlQ2hhbmdlcyhvbGRUeXBlLCBuZXdUeXBlKSB7XG4gIGNvbnN0IHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgY29uc3QgZmllbGRzRGlmZiA9IGRpZmYoXG4gICAgT2JqZWN0LnZhbHVlcyhvbGRUeXBlLmdldEZpZWxkcygpKSxcbiAgICBPYmplY3QudmFsdWVzKG5ld1R5cGUuZ2V0RmllbGRzKCkpLFxuICApO1xuXG4gIGZvciAoY29uc3QgbmV3RmllbGQgb2YgZmllbGRzRGlmZi5hZGRlZCkge1xuICAgIGlmIChpc1JlcXVpcmVkSW5wdXRGaWVsZChuZXdGaWVsZCkpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5SRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBBIHJlcXVpcmVkIGZpZWxkICR7bmV3RmllbGQubmFtZX0gb24gaW5wdXQgdHlwZSAke29sZFR5cGUubmFtZX0gd2FzIGFkZGVkLmAsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5PUFRJT05BTF9JTlBVVF9GSUVMRF9BRERFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBBbiBvcHRpb25hbCBmaWVsZCAke25ld0ZpZWxkLm5hbWV9IG9uIGlucHV0IHR5cGUgJHtvbGRUeXBlLm5hbWV9IHdhcyBhZGRlZC5gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBvbGRGaWVsZCBvZiBmaWVsZHNEaWZmLnJlbW92ZWQpIHtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkZJRUxEX1JFTU9WRUQsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IHdhcyByZW1vdmVkLmAsXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IFtvbGRGaWVsZCwgbmV3RmllbGRdIG9mIGZpZWxkc0RpZmYucGVyc2lzdGVkKSB7XG4gICAgY29uc3QgaXNTYWZlID0gaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcoXG4gICAgICBvbGRGaWVsZC50eXBlLFxuICAgICAgbmV3RmllbGQudHlwZSxcbiAgICApO1xuXG4gICAgaWYgKCFpc1NhZmUpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5GSUVMRF9DSEFOR0VEX0tJTkQsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgIGAke29sZFR5cGUubmFtZX0uJHtvbGRGaWVsZC5uYW1lfSBjaGFuZ2VkIHR5cGUgZnJvbSBgICtcbiAgICAgICAgICBgJHtTdHJpbmcob2xkRmllbGQudHlwZSl9IHRvICR7U3RyaW5nKG5ld0ZpZWxkLnR5cGUpfS5gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRVbmlvblR5cGVDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgY29uc3Qgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICBjb25zdCBwb3NzaWJsZVR5cGVzRGlmZiA9IGRpZmYob2xkVHlwZS5nZXRUeXBlcygpLCBuZXdUeXBlLmdldFR5cGVzKCkpO1xuXG4gIGZvciAoY29uc3QgbmV3UG9zc2libGVUeXBlIG9mIHBvc3NpYmxlVHlwZXNEaWZmLmFkZGVkKSB7XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IERhbmdlcm91c0NoYW5nZVR5cGUuVFlQRV9BRERFRF9UT19VTklPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtuZXdQb3NzaWJsZVR5cGUubmFtZX0gd2FzIGFkZGVkIHRvIHVuaW9uIHR5cGUgJHtvbGRUeXBlLm5hbWV9LmAsXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IG9sZFBvc3NpYmxlVHlwZSBvZiBwb3NzaWJsZVR5cGVzRGlmZi5yZW1vdmVkKSB7XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5UWVBFX1JFTU9WRURfRlJPTV9VTklPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtvbGRQb3NzaWJsZVR5cGUubmFtZX0gd2FzIHJlbW92ZWQgZnJvbSB1bmlvbiB0eXBlICR7b2xkVHlwZS5uYW1lfS5gLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRFbnVtVHlwZUNoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICBjb25zdCBzY2hlbWFDaGFuZ2VzID0gW107XG4gIGNvbnN0IHZhbHVlc0RpZmYgPSBkaWZmKG9sZFR5cGUuZ2V0VmFsdWVzKCksIG5ld1R5cGUuZ2V0VmFsdWVzKCkpO1xuXG4gIGZvciAoY29uc3QgbmV3VmFsdWUgb2YgdmFsdWVzRGlmZi5hZGRlZCkge1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLlZBTFVFX0FEREVEX1RPX0VOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogYCR7bmV3VmFsdWUubmFtZX0gd2FzIGFkZGVkIHRvIGVudW0gdHlwZSAke29sZFR5cGUubmFtZX0uYCxcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAoY29uc3Qgb2xkVmFsdWUgb2YgdmFsdWVzRGlmZi5yZW1vdmVkKSB7XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5WQUxVRV9SRU1PVkVEX0ZST01fRU5VTSxcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtvbGRWYWx1ZS5uYW1lfSB3YXMgcmVtb3ZlZCBmcm9tIGVudW0gdHlwZSAke29sZFR5cGUubmFtZX0uYCxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kSW1wbGVtZW50ZWRJbnRlcmZhY2VzQ2hhbmdlcyhvbGRUeXBlLCBuZXdUeXBlKSB7XG4gIGNvbnN0IHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgY29uc3QgaW50ZXJmYWNlc0RpZmYgPSBkaWZmKG9sZFR5cGUuZ2V0SW50ZXJmYWNlcygpLCBuZXdUeXBlLmdldEludGVyZmFjZXMoKSk7XG5cbiAgZm9yIChjb25zdCBuZXdJbnRlcmZhY2Ugb2YgaW50ZXJmYWNlc0RpZmYuYWRkZWQpIHtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5JTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7bmV3SW50ZXJmYWNlLm5hbWV9IGFkZGVkIHRvIGludGVyZmFjZXMgaW1wbGVtZW50ZWQgYnkgJHtvbGRUeXBlLm5hbWV9LmAsXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IG9sZEludGVyZmFjZSBvZiBpbnRlcmZhY2VzRGlmZi5yZW1vdmVkKSB7XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5JTVBMRU1FTlRFRF9JTlRFUkZBQ0VfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtvbGRUeXBlLm5hbWV9IG5vIGxvbmdlciBpbXBsZW1lbnRzIGludGVyZmFjZSAke29sZEludGVyZmFjZS5uYW1lfS5gLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRGaWVsZENoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICBjb25zdCBzY2hlbWFDaGFuZ2VzID0gW107XG4gIGNvbnN0IGZpZWxkc0RpZmYgPSBkaWZmKFxuICAgIE9iamVjdC52YWx1ZXMob2xkVHlwZS5nZXRGaWVsZHMoKSksXG4gICAgT2JqZWN0LnZhbHVlcyhuZXdUeXBlLmdldEZpZWxkcygpKSxcbiAgKTtcblxuICBmb3IgKGNvbnN0IG9sZEZpZWxkIG9mIGZpZWxkc0RpZmYucmVtb3ZlZCkge1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRklFTERfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtvbGRUeXBlLm5hbWV9LiR7b2xkRmllbGQubmFtZX0gd2FzIHJlbW92ZWQuYCxcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW29sZEZpZWxkLCBuZXdGaWVsZF0gb2YgZmllbGRzRGlmZi5wZXJzaXN0ZWQpIHtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goLi4uZmluZEFyZ0NoYW5nZXMob2xkVHlwZSwgb2xkRmllbGQsIG5ld0ZpZWxkKSk7XG4gICAgY29uc3QgaXNTYWZlID0gaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChcbiAgICAgIG9sZEZpZWxkLnR5cGUsXG4gICAgICBuZXdGaWVsZC50eXBlLFxuICAgICk7XG5cbiAgICBpZiAoIWlzU2FmZSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkZJRUxEX0NIQU5HRURfS0lORCxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgYCR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IGNoYW5nZWQgdHlwZSBmcm9tIGAgK1xuICAgICAgICAgIGAke1N0cmluZyhvbGRGaWVsZC50eXBlKX0gdG8gJHtTdHJpbmcobmV3RmllbGQudHlwZSl9LmAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZEFyZ0NoYW5nZXMob2xkVHlwZSwgb2xkRmllbGQsIG5ld0ZpZWxkKSB7XG4gIGNvbnN0IHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgY29uc3QgYXJnc0RpZmYgPSBkaWZmKG9sZEZpZWxkLmFyZ3MsIG5ld0ZpZWxkLmFyZ3MpO1xuXG4gIGZvciAoY29uc3Qgb2xkQXJnIG9mIGFyZ3NEaWZmLnJlbW92ZWQpIHtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkFSR19SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IGAke29sZFR5cGUubmFtZX0uJHtvbGRGaWVsZC5uYW1lfSBhcmcgJHtvbGRBcmcubmFtZX0gd2FzIHJlbW92ZWQuYCxcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW29sZEFyZywgbmV3QXJnXSBvZiBhcmdzRGlmZi5wZXJzaXN0ZWQpIHtcbiAgICBjb25zdCBpc1NhZmUgPSBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhcbiAgICAgIG9sZEFyZy50eXBlLFxuICAgICAgbmV3QXJnLnR5cGUsXG4gICAgKTtcblxuICAgIGlmICghaXNTYWZlKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuQVJHX0NIQU5HRURfS0lORCxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgYCR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IGFyZyAke29sZEFyZy5uYW1lfSBoYXMgY2hhbmdlZCB0eXBlIGZyb20gYCArXG4gICAgICAgICAgYCR7U3RyaW5nKG9sZEFyZy50eXBlKX0gdG8gJHtTdHJpbmcobmV3QXJnLnR5cGUpfS5gLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChvbGRBcmcuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChuZXdBcmcuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLkFSR19ERUZBVUxUX1ZBTFVFX0NIQU5HRSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IGFyZyAke29sZEFyZy5uYW1lfSBkZWZhdWx0VmFsdWUgd2FzIHJlbW92ZWQuYCxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaW5jZSB3ZSBsb29raW5nIG9ubHkgZm9yIGNsaWVudCdzIG9ic2VydmFibGUgY2hhbmdlcyB3ZSBzaG91bGRcbiAgICAgICAgLy8gY29tcGFyZSBkZWZhdWx0IHZhbHVlcyBpbiB0aGUgc2FtZSByZXByZXNlbnRhdGlvbiBhcyB0aGV5IGFyZVxuICAgICAgICAvLyByZXByZXNlbnRlZCBpbnNpZGUgaW50cm9zcGVjdGlvbi5cbiAgICAgICAgY29uc3Qgb2xkVmFsdWVTdHIgPSBzdHJpbmdpZnlWYWx1ZShvbGRBcmcuZGVmYXVsdFZhbHVlLCBvbGRBcmcudHlwZSk7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlU3RyID0gc3RyaW5naWZ5VmFsdWUobmV3QXJnLmRlZmF1bHRWYWx1ZSwgbmV3QXJnLnR5cGUpO1xuXG4gICAgICAgIGlmIChvbGRWYWx1ZVN0ciAhPT0gbmV3VmFsdWVTdHIpIHtcbiAgICAgICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5BUkdfREVGQVVMVF9WQUxVRV9DSEFOR0UsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IGFyZyAke29sZEFyZy5uYW1lfSBoYXMgY2hhbmdlZCBkZWZhdWx0VmFsdWUgZnJvbSAke29sZFZhbHVlU3RyfSB0byAke25ld1ZhbHVlU3RyfS5gLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBuZXdBcmcgb2YgYXJnc0RpZmYuYWRkZWQpIHtcbiAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KG5ld0FyZykpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5SRVFVSVJFRF9BUkdfQURERUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQSByZXF1aXJlZCBhcmcgJHtuZXdBcmcubmFtZX0gb24gJHtvbGRUeXBlLm5hbWV9LiR7b2xkRmllbGQubmFtZX0gd2FzIGFkZGVkLmAsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5PUFRJT05BTF9BUkdfQURERUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQW4gb3B0aW9uYWwgYXJnICR7bmV3QXJnLm5hbWV9IG9uICR7b2xkVHlwZS5uYW1lfS4ke29sZEZpZWxkLm5hbWV9IHdhcyBhZGRlZC5gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQob2xkVHlwZSwgbmV3VHlwZSkge1xuICBpZiAoaXNMaXN0VHlwZShvbGRUeXBlKSkge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBpZiB0aGV5J3JlIGJvdGggbGlzdHMsIG1ha2Ugc3VyZSB0aGUgdW5kZXJseWluZyB0eXBlcyBhcmUgY29tcGF0aWJsZVxuICAgICAgKGlzTGlzdFR5cGUobmV3VHlwZSkgJiZcbiAgICAgICAgaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChcbiAgICAgICAgICBvbGRUeXBlLm9mVHlwZSxcbiAgICAgICAgICBuZXdUeXBlLm9mVHlwZSxcbiAgICAgICAgKSkgfHwgLy8gbW92aW5nIGZyb20gbnVsbGFibGUgdG8gbm9uLW51bGwgb2YgdGhlIHNhbWUgdW5kZXJseWluZyB0eXBlIGlzIHNhZmVcbiAgICAgIChpc05vbk51bGxUeXBlKG5ld1R5cGUpICYmXG4gICAgICAgIGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQob2xkVHlwZSwgbmV3VHlwZS5vZlR5cGUpKVxuICAgICk7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZShvbGRUeXBlKSkge1xuICAgIC8vIGlmIHRoZXkncmUgYm90aCBub24tbnVsbCwgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZSBjb21wYXRpYmxlXG4gICAgcmV0dXJuIChcbiAgICAgIGlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiZcbiAgICAgIGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUub2ZUeXBlKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8vIGlmIHRoZXkncmUgYm90aCBuYW1lZCB0eXBlcywgc2VlIGlmIHRoZWlyIG5hbWVzIGFyZSBlcXVpdmFsZW50XG4gICAgKGlzTmFtZWRUeXBlKG5ld1R5cGUpICYmIG9sZFR5cGUubmFtZSA9PT0gbmV3VHlwZS5uYW1lKSB8fCAvLyBtb3ZpbmcgZnJvbSBudWxsYWJsZSB0byBub24tbnVsbCBvZiB0aGUgc2FtZSB1bmRlcmx5aW5nIHR5cGUgaXMgc2FmZVxuICAgIChpc05vbk51bGxUeXBlKG5ld1R5cGUpICYmXG4gICAgICBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKG9sZFR5cGUsIG5ld1R5cGUub2ZUeXBlKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcob2xkVHlwZSwgbmV3VHlwZSkge1xuICBpZiAoaXNMaXN0VHlwZShvbGRUeXBlKSkge1xuICAgIC8vIGlmIHRoZXkncmUgYm90aCBsaXN0cywgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZSBjb21wYXRpYmxlXG4gICAgcmV0dXJuIChcbiAgICAgIGlzTGlzdFR5cGUobmV3VHlwZSkgJiZcbiAgICAgIGlzQ2hhbmdlU2FmZUZvcklucHV0T2JqZWN0RmllbGRPckZpZWxkQXJnKG9sZFR5cGUub2ZUeXBlLCBuZXdUeXBlLm9mVHlwZSlcbiAgICApO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUob2xkVHlwZSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gaWYgdGhleSdyZSBib3RoIG5vbi1udWxsLCBtYWtlIHN1cmUgdGhlIHVuZGVybHlpbmcgdHlwZXMgYXJlXG4gICAgICAvLyBjb21wYXRpYmxlXG4gICAgICAoaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJlxuICAgICAgICBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhcbiAgICAgICAgICBvbGRUeXBlLm9mVHlwZSxcbiAgICAgICAgICBuZXdUeXBlLm9mVHlwZSxcbiAgICAgICAgKSkgfHwgLy8gbW92aW5nIGZyb20gbm9uLW51bGwgdG8gbnVsbGFibGUgb2YgdGhlIHNhbWUgdW5kZXJseWluZyB0eXBlIGlzIHNhZmVcbiAgICAgICghaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJlxuICAgICAgICBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhvbGRUeXBlLm9mVHlwZSwgbmV3VHlwZSkpXG4gICAgKTtcbiAgfSAvLyBpZiB0aGV5J3JlIGJvdGggbmFtZWQgdHlwZXMsIHNlZSBpZiB0aGVpciBuYW1lcyBhcmUgZXF1aXZhbGVudFxuXG4gIHJldHVybiBpc05hbWVkVHlwZShuZXdUeXBlKSAmJiBvbGRUeXBlLm5hbWUgPT09IG5ld1R5cGUubmFtZTtcbn1cblxuZnVuY3Rpb24gdHlwZUtpbmROYW1lKHR5cGUpIHtcbiAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYSBTY2FsYXIgdHlwZSc7XG4gIH1cblxuICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhbiBPYmplY3QgdHlwZSc7XG4gIH1cblxuICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhbiBJbnRlcmZhY2UgdHlwZSc7XG4gIH1cblxuICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gJ2EgVW5pb24gdHlwZSc7XG4gIH1cblxuICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYW4gRW51bSB0eXBlJztcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYW4gSW5wdXQgdHlwZSc7XG4gIH1cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGNvbnN0IGFzdCA9IGFzdEZyb21WYWx1ZSh2YWx1ZSwgdHlwZSk7XG4gIGFzdCAhPSBudWxsIHx8IGludmFyaWFudChmYWxzZSk7XG4gIHJldHVybiBwcmludChzb3J0VmFsdWVOb2RlKGFzdCkpO1xufVxuXG5mdW5jdGlvbiBkaWZmKG9sZEFycmF5LCBuZXdBcnJheSkge1xuICBjb25zdCBhZGRlZCA9IFtdO1xuICBjb25zdCByZW1vdmVkID0gW107XG4gIGNvbnN0IHBlcnNpc3RlZCA9IFtdO1xuICBjb25zdCBvbGRNYXAgPSBrZXlNYXAob2xkQXJyYXksICh7IG5hbWUgfSkgPT4gbmFtZSk7XG4gIGNvbnN0IG5ld01hcCA9IGtleU1hcChuZXdBcnJheSwgKHsgbmFtZSB9KSA9PiBuYW1lKTtcblxuICBmb3IgKGNvbnN0IG9sZEl0ZW0gb2Ygb2xkQXJyYXkpIHtcbiAgICBjb25zdCBuZXdJdGVtID0gbmV3TWFwW29sZEl0ZW0ubmFtZV07XG5cbiAgICBpZiAobmV3SXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZW1vdmVkLnB1c2gob2xkSXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcnNpc3RlZC5wdXNoKFtvbGRJdGVtLCBuZXdJdGVtXSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBuZXdJdGVtIG9mIG5ld0FycmF5KSB7XG4gICAgaWYgKG9sZE1hcFtuZXdJdGVtLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFkZGVkLnB1c2gobmV3SXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRlZCxcbiAgICBwZXJzaXN0ZWQsXG4gICAgcmVtb3ZlZCxcbiAgfTtcbn1cbiIsIi8qKlxuICogR2l2ZW4gYSBQYXRoIGFuZCBhIGtleSwgcmV0dXJuIGEgbmV3IFBhdGggY29udGFpbmluZyB0aGUgbmV3IGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFBhdGgocHJldiwga2V5LCB0eXBlbmFtZSkge1xuICByZXR1cm4ge1xuICAgIHByZXYsXG4gICAga2V5LFxuICAgIHR5cGVuYW1lLFxuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBhIFBhdGgsIHJldHVybiBhbiBBcnJheSBvZiB0aGUgcGF0aCBrZXlzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRoVG9BcnJheShwYXRoKSB7XG4gIGNvbnN0IGZsYXR0ZW5lZCA9IFtdO1xuICBsZXQgY3VyciA9IHBhdGg7XG5cbiAgd2hpbGUgKGN1cnIpIHtcbiAgICBmbGF0dGVuZWQucHVzaChjdXJyLmtleSk7XG4gICAgY3VyciA9IGN1cnIucHJldjtcbiAgfVxuXG4gIHJldHVybiBmbGF0dGVuZWQucmV2ZXJzZSgpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRldkFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgY29uc3QgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTtcblxuICBpZiAoIWJvb2xlYW5Db25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbiIsImNvbnN0IE1BWF9TVUdHRVNUSU9OUyA9IDU7XG4vKipcbiAqIEdpdmVuIFsgQSwgQiwgQyBdIHJldHVybiAnIERpZCB5b3UgbWVhbiBBLCBCLCBvciBDPycuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZFlvdU1lYW4oZmlyc3RBcmcsIHNlY29uZEFyZykge1xuICBjb25zdCBbc3ViTWVzc2FnZSwgc3VnZ2VzdGlvbnNBcmddID0gc2Vjb25kQXJnXG4gICAgPyBbZmlyc3RBcmcsIHNlY29uZEFyZ11cbiAgICA6IFt1bmRlZmluZWQsIGZpcnN0QXJnXTtcbiAgbGV0IG1lc3NhZ2UgPSAnIERpZCB5b3UgbWVhbiAnO1xuXG4gIGlmIChzdWJNZXNzYWdlKSB7XG4gICAgbWVzc2FnZSArPSBzdWJNZXNzYWdlICsgJyAnO1xuICB9XG5cbiAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uc0FyZy5tYXAoKHgpID0+IGBcIiR7eH1cImApO1xuXG4gIHN3aXRjaCAoc3VnZ2VzdGlvbnMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICcnO1xuXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBzdWdnZXN0aW9uc1swXSArICc/JztcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBtZXNzYWdlICsgc3VnZ2VzdGlvbnNbMF0gKyAnIG9yICcgKyBzdWdnZXN0aW9uc1sxXSArICc/JztcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdGVkID0gc3VnZ2VzdGlvbnMuc2xpY2UoMCwgTUFYX1NVR0dFU1RJT05TKTtcbiAgY29uc3QgbGFzdEl0ZW0gPSBzZWxlY3RlZC5wb3AoKTtcbiAgcmV0dXJuIG1lc3NhZ2UgKyBzZWxlY3RlZC5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3RJdGVtICsgJz8nO1xufVxuIiwiLyoqXG4gKiBHcm91cHMgYXJyYXkgaXRlbXMgaW50byBhIE1hcCwgZ2l2ZW4gYSBmdW5jdGlvbiB0byBwcm9kdWNlIGdyb3VwaW5nIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnkobGlzdCwga2V5Rm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgY29uc3Qga2V5ID0ga2V5Rm4oaXRlbSk7XG4gICAgY29uc3QgZ3JvdXAgPSByZXN1bHQuZ2V0KGtleSk7XG5cbiAgICBpZiAoZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0LnNldChrZXksIFtpdGVtXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImNvbnN0IE1BWF9BUlJBWV9MRU5HVEggPSAxMDtcbmNvbnN0IE1BWF9SRUNVUlNJVkVfREVQVEggPSAyO1xuLyoqXG4gKiBVc2VkIHRvIHByaW50IHZhbHVlcyBpbiBlcnJvciBtZXNzYWdlcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSkge1xuICByZXR1cm4gZm9ybWF0VmFsdWUodmFsdWUsIFtdKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiB2YWx1ZS5uYW1lID8gYFtmdW5jdGlvbiAke3ZhbHVlLm5hbWV9XWAgOiAnW2Z1bmN0aW9uXSc7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRPYmplY3RWYWx1ZSh2YWx1ZSwgcHJldmlvdXNseVNlZW5WYWx1ZXMpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuXG4gIGlmIChwcmV2aW91c2x5U2VlblZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICB9XG5cbiAgY29uc3Qgc2VlblZhbHVlcyA9IFsuLi5wcmV2aW91c2x5U2VlblZhbHVlcywgdmFsdWVdO1xuXG4gIGlmIChpc0pTT05hYmxlKHZhbHVlKSkge1xuICAgIGNvbnN0IGpzb25WYWx1ZSA9IHZhbHVlLnRvSlNPTigpOyAvLyBjaGVjayBmb3IgaW5maW5pdGUgcmVjdXJzaW9uXG5cbiAgICBpZiAoanNvblZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBqc29uVmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgID8ganNvblZhbHVlXG4gICAgICAgIDogZm9ybWF0VmFsdWUoanNvblZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0QXJyYXkodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdE9iamVjdCh2YWx1ZSwgc2VlblZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIGlzSlNPTmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdChvYmplY3QsIHNlZW5WYWx1ZXMpIHtcbiAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG9iamVjdCk7XG5cbiAgaWYgKGVudHJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICd7fSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbJyArIGdldE9iamVjdFRhZyhvYmplY3QpICsgJ10nO1xuICB9XG5cbiAgY29uc3QgcHJvcGVydGllcyA9IGVudHJpZXMubWFwKFxuICAgIChba2V5LCB2YWx1ZV0pID0+IGtleSArICc6ICcgKyBmb3JtYXRWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcyksXG4gICk7XG4gIHJldHVybiAneyAnICsgcHJvcGVydGllcy5qb2luKCcsICcpICsgJyB9Jztcbn1cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoYXJyYXksIHNlZW5WYWx1ZXMpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnW10nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnW0FycmF5XSc7XG4gIH1cblxuICBjb25zdCBsZW4gPSBNYXRoLm1pbihNQVhfQVJSQVlfTEVOR1RILCBhcnJheS5sZW5ndGgpO1xuICBjb25zdCByZW1haW5pbmcgPSBhcnJheS5sZW5ndGggLSBsZW47XG4gIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGl0ZW1zLnB1c2goZm9ybWF0VmFsdWUoYXJyYXlbaV0sIHNlZW5WYWx1ZXMpKTtcbiAgfVxuXG4gIGlmIChyZW1haW5pbmcgPT09IDEpIHtcbiAgICBpdGVtcy5wdXNoKCcuLi4gMSBtb3JlIGl0ZW0nKTtcbiAgfSBlbHNlIGlmIChyZW1haW5pbmcgPiAxKSB7XG4gICAgaXRlbXMucHVzaChgLi4uICR7cmVtYWluaW5nfSBtb3JlIGl0ZW1zYCk7XG4gIH1cblxuICByZXR1cm4gJ1snICsgaXRlbXMuam9pbignLCAnKSArICddJztcbn1cblxuZnVuY3Rpb24gZ2V0T2JqZWN0VGFnKG9iamVjdCkge1xuICBjb25zdCB0YWcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgLmNhbGwob2JqZWN0KVxuICAgIC5yZXBsYWNlKC9eXFxbb2JqZWN0IC8sICcnKVxuICAgIC5yZXBsYWNlKC9dJC8sICcnKTtcblxuICBpZiAodGFnID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbmFtZSA9IG9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBuYW1lICE9PSAnJykge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhZztcbn1cbiIsImltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuL2luc3BlY3QubWpzJztcbi8qKlxuICogQSByZXBsYWNlbWVudCBmb3IgaW5zdGFuY2VvZiB3aGljaCBpbmNsdWRlcyBhbiBlcnJvciB3YXJuaW5nIHdoZW4gbXVsdGktcmVhbG1cbiAqIGNvbnN0cnVjdG9ycyBhcmUgZGV0ZWN0ZWQuXG4gKiBTZWU6IGh0dHBzOi8vZXhwcmVzc2pzLmNvbS9lbi9hZHZhbmNlZC9iZXN0LXByYWN0aWNlLXBlcmZvcm1hbmNlLmh0bWwjc2V0LW5vZGVfZW52LXRvLXByb2R1Y3Rpb25cbiAqIFNlZTogaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvcHJvZHVjdGlvbi9cbiAqL1xuXG5leHBvcnQgY29uc3QgaW5zdGFuY2VPZiA9XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDYgKi9cbiAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICA/IGZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xuICAgICAgfVxuICAgIDogZnVuY3Rpb24gaW5zdGFuY2VPZih2YWx1ZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIF92YWx1ZSRjb25zdHJ1Y3RvcjtcblxuICAgICAgICAgIC8vIFByZWZlciBTeW1ib2wudG9TdHJpbmdUYWcgc2luY2UgaXQgaXMgaW1tdW5lIHRvIG1pbmlmaWNhdGlvbi5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZUNsYXNzTmFtZSA9IC8vIFdlIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBjb25zdHJ1Y3RvcidzIG5hbWUgdG8gZGV0ZWN0IGNvbmZsaWN0cyB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIHRoaXMgbGlicmFyeS5cbiAgICAgICAgICAgIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGJ1ZyBzZWUsIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzgwMDlcbiAgICAgICAgICAgICAgPyB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddXG4gICAgICAgICAgICAgIDogKF92YWx1ZSRjb25zdHJ1Y3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIF92YWx1ZSRjb25zdHJ1Y3RvciA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX3ZhbHVlJGNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSB2YWx1ZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRWYWx1ZSA9IGluc3BlY3QodmFsdWUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlICR7Y2xhc3NOYW1lfSBcIiR7c3RyaW5naWZpZWRWYWx1ZX1cIiBmcm9tIGFub3RoZXIgbW9kdWxlIG9yIHJlYWxtLlxuXG5FbnN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBpbnN0YW5jZSBvZiBcImdyYXBocWxcIiBpbiB0aGUgbm9kZV9tb2R1bGVzXG5kaXJlY3RvcnkuIElmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBcImdyYXBocWxcIiBhcmUgdGhlIGRlcGVuZGVuY2llcyBvZiBvdGhlclxucmVsaWVkIG9uIG1vZHVsZXMsIHVzZSBcInJlc29sdXRpb25zXCIgdG8gZW5zdXJlIG9ubHkgb25lIHZlcnNpb24gaXMgaW5zdGFsbGVkLlxuXG5odHRwczovL3lhcm5wa2cuY29tL2VuL2RvY3Mvc2VsZWN0aXZlLXZlcnNpb24tcmVzb2x1dGlvbnNcblxuRHVwbGljYXRlIFwiZ3JhcGhxbFwiIG1vZHVsZXMgY2Fubm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZSBzaW5jZSBkaWZmZXJlbnRcbnZlcnNpb25zIG1heSBoYXZlIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMgYW5kIGJlaGF2aW9yLiBUaGUgZGF0YSBmcm9tIG9uZVxudmVyc2lvbiB1c2VkIGluIHRoZSBmdW5jdGlvbiBmcm9tIGFub3RoZXIgY291bGQgcHJvZHVjZSBjb25mdXNpbmcgYW5kXG5zcHVyaW91cyByZXN1bHRzLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4iLCJleHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBjb25zdCBib29sZWFuQ29uZGl0aW9uID0gQm9vbGVhbihjb25kaXRpb24pO1xuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiAnVW5leHBlY3RlZCBpbnZhcmlhbnQgdHJpZ2dlcmVkLicsXG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpcyBhbiBPYmplY3QgKGkuZS4gbm90IGEgc3RyaW5nIGxpdGVyYWwpXG4gKiBhbmQgaW1wbGVtZW50cyB0aGUgSXRlcmF0b3IgcHJvdG9jb2wuXG4gKlxuICogVGhpcyBtYXkgYmUgdXNlZCBpbiBwbGFjZSBvZiBbQXJyYXkuaXNBcnJheSgpXVtpc0FycmF5XSB0byBkZXRlcm1pbmUgaWZcbiAqIGFuIG9iamVjdCBzaG91bGQgYmUgaXRlcmF0ZWQtb3ZlciBlLmcuIEFycmF5LCBNYXAsIFNldCwgSW50OEFycmF5LFxuICogVHlwZWRBcnJheSwgZXRjLiBidXQgZXhjbHVkZXMgc3RyaW5nIGxpdGVyYWxzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaXNJdGVyYWJsZU9iamVjdChbIDEsIDIsIDMgXSkgLy8gdHJ1ZVxuICogaXNJdGVyYWJsZU9iamVjdChuZXcgTWFwKCkpIC8vIHRydWVcbiAqIGlzSXRlcmFibGVPYmplY3QoJ0FCQycpIC8vIGZhbHNlXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KHsga2V5OiAndmFsdWUnIH0pIC8vIGZhbHNlXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KHsgbGVuZ3RoOiAxLCAwOiAnQWxwaGEnIH0pIC8vIGZhbHNlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGVPYmplY3QobWF5YmVJdGVyYWJsZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBtYXliZUl0ZXJhYmxlID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCBtYXliZUl0ZXJhYmxlID09PSB2b2lkIDBcbiAgICAgID8gdm9pZCAwXG4gICAgICA6IG1heWJlSXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSkgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cbiIsIi8qKlxuICogUmV0dXJuIHRydWUgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdFxuICogYG51bGxgIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGFjdHMgbGlrZSBhIFByb21pc2UsIGkuZS4gaGFzIGEgXCJ0aGVuXCIgZnVuY3Rpb24sXG4gKiBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pID09PVxuICAgICdmdW5jdGlvbidcbiAgKTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlcyBhIGtleWVkIEpTIG9iamVjdCBmcm9tIGFuIGFycmF5LCBnaXZlbiBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIGtleXNcbiAqIGZvciBlYWNoIHZhbHVlIGluIHRoZSBhcnJheS5cbiAqXG4gKiBUaGlzIHByb3ZpZGVzIGEgY29udmVuaWVudCBsb29rdXAgZm9yIHRoZSBhcnJheSBpdGVtcyBpZiB0aGUga2V5IGZ1bmN0aW9uXG4gKiBwcm9kdWNlcyB1bmlxdWUgcmVzdWx0cy5cbiAqIGBgYHRzXG4gKiBjb25zdCBwaG9uZUJvb2sgPSBbXG4gKiAgIHsgbmFtZTogJ0pvbicsIG51bTogJzU1NS0xMjM0JyB9LFxuICogICB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg2Ny01MzA5JyB9XG4gKiBdXG4gKlxuICogY29uc3QgZW50cmllc0J5TmFtZSA9IGtleU1hcChcbiAqICAgcGhvbmVCb29rLFxuICogICBlbnRyeSA9PiBlbnRyeS5uYW1lXG4gKiApXG4gKlxuICogLy8ge1xuICogLy8gICBKb246IHsgbmFtZTogJ0pvbicsIG51bTogJzU1NS0xMjM0JyB9LFxuICogLy8gICBKZW5ueTogeyBuYW1lOiAnSmVubnknLCBudW06ICc4NjctNTMwOScgfVxuICogLy8gfVxuICpcbiAqIGNvbnN0IGplbm55RW50cnkgPSBlbnRyaWVzQnlOYW1lWydKZW5ueSddXG4gKlxuICogLy8geyBuYW1lOiAnSmVubnknLCBudW06ICc4NTctNjMwOScgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZXlNYXAobGlzdCwga2V5Rm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgIHJlc3VsdFtrZXlGbihpdGVtKV0gPSBpdGVtO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogQ3JlYXRlcyBhIGtleWVkIEpTIG9iamVjdCBmcm9tIGFuIGFycmF5LCBnaXZlbiBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIGtleXNcbiAqIGFuZCBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHZhbHVlcyBmcm9tIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuXG4gKiBgYGB0c1xuICogY29uc3QgcGhvbmVCb29rID0gW1xuICogICB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqICAgeyBuYW1lOiAnSmVubnknLCBudW06ICc4NjctNTMwOScgfVxuICogXVxuICpcbiAqIC8vIHsgSm9uOiAnNTU1LTEyMzQnLCBKZW5ueTogJzg2Ny01MzA5JyB9XG4gKiBjb25zdCBwaG9uZXNCeU5hbWUgPSBrZXlWYWxNYXAoXG4gKiAgIHBob25lQm9vayxcbiAqICAgZW50cnkgPT4gZW50cnkubmFtZSxcbiAqICAgZW50cnkgPT4gZW50cnkubnVtXG4gKiApXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtleVZhbE1hcChsaXN0LCBrZXlGbiwgdmFsRm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgIHJlc3VsdFtrZXlGbihpdGVtKV0gPSB2YWxGbihpdGVtKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IG1hcCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG1hcGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWQgYnlcbiAqIHJ1bm5pbmcgZWFjaCB2YWx1ZSBvZiBgbWFwYCB0aHJ1IGBmbmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBWYWx1ZShtYXAsIGZuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobWFwKSkge1xuICAgIHJlc3VsdFtrZXldID0gZm4obWFwW2tleV0sIGtleSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIGluZGljYXRpbmcgd2hldGhlciBhIHJlZmVyZW5jZSBzdHJpbmcgY29tZXMgYmVmb3JlLCBvciBhZnRlcixcbiAqIG9yIGlzIHRoZSBzYW1lIGFzIHRoZSBnaXZlbiBzdHJpbmcgaW4gbmF0dXJhbCBzb3J0IG9yZGVyLlxuICpcbiAqIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmF0dXJhbF9zb3J0X29yZGVyXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmF0dXJhbENvbXBhcmUoYVN0ciwgYlN0cikge1xuICBsZXQgYUluZGV4ID0gMDtcbiAgbGV0IGJJbmRleCA9IDA7XG5cbiAgd2hpbGUgKGFJbmRleCA8IGFTdHIubGVuZ3RoICYmIGJJbmRleCA8IGJTdHIubGVuZ3RoKSB7XG4gICAgbGV0IGFDaGFyID0gYVN0ci5jaGFyQ29kZUF0KGFJbmRleCk7XG4gICAgbGV0IGJDaGFyID0gYlN0ci5jaGFyQ29kZUF0KGJJbmRleCk7XG5cbiAgICBpZiAoaXNEaWdpdChhQ2hhcikgJiYgaXNEaWdpdChiQ2hhcikpIHtcbiAgICAgIGxldCBhTnVtID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICArK2FJbmRleDtcbiAgICAgICAgYU51bSA9IGFOdW0gKiAxMCArIGFDaGFyIC0gRElHSVRfMDtcbiAgICAgICAgYUNoYXIgPSBhU3RyLmNoYXJDb2RlQXQoYUluZGV4KTtcbiAgICAgIH0gd2hpbGUgKGlzRGlnaXQoYUNoYXIpICYmIGFOdW0gPiAwKTtcblxuICAgICAgbGV0IGJOdW0gPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgICsrYkluZGV4O1xuICAgICAgICBiTnVtID0gYk51bSAqIDEwICsgYkNoYXIgLSBESUdJVF8wO1xuICAgICAgICBiQ2hhciA9IGJTdHIuY2hhckNvZGVBdChiSW5kZXgpO1xuICAgICAgfSB3aGlsZSAoaXNEaWdpdChiQ2hhcikgJiYgYk51bSA+IDApO1xuXG4gICAgICBpZiAoYU51bSA8IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoYU51bSA+IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhQ2hhciA8IGJDaGFyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFDaGFyID4gYkNoYXIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgICsrYUluZGV4O1xuICAgICAgKytiSW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFTdHIubGVuZ3RoIC0gYlN0ci5sZW5ndGg7XG59XG5jb25zdCBESUdJVF8wID0gNDg7XG5jb25zdCBESUdJVF85ID0gNTc7XG5cbmZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gIWlzTmFOKGNvZGUpICYmIERJR0lUXzAgPD0gY29kZSAmJiBjb2RlIDw9IERJR0lUXzk7XG59XG4iLCIvKipcbiAqIEJ1aWxkIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHBhdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmludFBhdGhBcnJheShwYXRoKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLm1hcCgoa2V5KSA9PlxuICAgICAgdHlwZW9mIGtleSA9PT0gJ251bWJlcicgPyAnWycgKyBrZXkudG9TdHJpbmcoKSArICddJyA6ICcuJyArIGtleSxcbiAgICApXG4gICAgLmpvaW4oJycpO1xufVxuIiwiaW1wb3J0IHsgbmF0dXJhbENvbXBhcmUgfSBmcm9tICcuL25hdHVyYWxDb21wYXJlLm1qcyc7XG4vKipcbiAqIEdpdmVuIGFuIGludmFsaWQgaW5wdXQgc3RyaW5nIGFuZCBhIGxpc3Qgb2YgdmFsaWQgb3B0aW9ucywgcmV0dXJucyBhIGZpbHRlcmVkXG4gKiBsaXN0IG9mIHZhbGlkIG9wdGlvbnMgc29ydGVkIGJhc2VkIG9uIHRoZWlyIHNpbWlsYXJpdHkgd2l0aCB0aGUgaW5wdXQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1Z2dlc3Rpb25MaXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnNCeURpc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgbGV4aWNhbERpc3RhbmNlID0gbmV3IExleGljYWxEaXN0YW5jZShpbnB1dCk7XG4gIGNvbnN0IHRocmVzaG9sZCA9IE1hdGguZmxvb3IoaW5wdXQubGVuZ3RoICogMC40KSArIDE7XG5cbiAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgIGNvbnN0IGRpc3RhbmNlID0gbGV4aWNhbERpc3RhbmNlLm1lYXN1cmUob3B0aW9uLCB0aHJlc2hvbGQpO1xuXG4gICAgaWYgKGRpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnNCeURpc3RhbmNlW29wdGlvbl0gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMob3B0aW9uc0J5RGlzdGFuY2UpLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBkaXN0YW5jZURpZmYgPSBvcHRpb25zQnlEaXN0YW5jZVthXSAtIG9wdGlvbnNCeURpc3RhbmNlW2JdO1xuICAgIHJldHVybiBkaXN0YW5jZURpZmYgIT09IDAgPyBkaXN0YW5jZURpZmYgOiBuYXR1cmFsQ29tcGFyZShhLCBiKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbXB1dGVzIHRoZSBsZXhpY2FsIGRpc3RhbmNlIGJldHdlZW4gc3RyaW5ncyBBIGFuZCBCLlxuICpcbiAqIFRoZSBcImRpc3RhbmNlXCIgYmV0d2VlbiB0d28gc3RyaW5ncyBpcyBnaXZlbiBieSBjb3VudGluZyB0aGUgbWluaW11bSBudW1iZXJcbiAqIG9mIGVkaXRzIG5lZWRlZCB0byB0cmFuc2Zvcm0gc3RyaW5nIEEgaW50byBzdHJpbmcgQi4gQW4gZWRpdCBjYW4gYmUgYW5cbiAqIGluc2VydGlvbiwgZGVsZXRpb24sIG9yIHN1YnN0aXR1dGlvbiBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIsIG9yIGEgc3dhcCBvZiB0d29cbiAqIGFkamFjZW50IGNoYXJhY3RlcnMuXG4gKlxuICogSW5jbHVkZXMgYSBjdXN0b20gYWx0ZXJhdGlvbiBmcm9tIERhbWVyYXUtTGV2ZW5zaHRlaW4gdG8gdHJlYXQgY2FzZSBjaGFuZ2VzXG4gKiBhcyBhIHNpbmdsZSBlZGl0IHdoaWNoIGhlbHBzIGlkZW50aWZ5IG1pcy1jYXNlZCB2YWx1ZXMgd2l0aCBhbiBlZGl0IGRpc3RhbmNlXG4gKiBvZiAxLlxuICpcbiAqIFRoaXMgZGlzdGFuY2UgY2FuIGJlIHVzZWZ1bCBmb3IgZGV0ZWN0aW5nIHR5cG9zIGluIGlucHV0IG9yIHNvcnRpbmdcbiAqL1xuXG5jbGFzcyBMZXhpY2FsRGlzdGFuY2Uge1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5faW5wdXRMb3dlckNhc2UgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuX2lucHV0QXJyYXkgPSBzdHJpbmdUb0FycmF5KHRoaXMuX2lucHV0TG93ZXJDYXNlKTtcbiAgICB0aGlzLl9yb3dzID0gW1xuICAgICAgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCArIDEpLmZpbGwoMCksXG4gICAgICBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoICsgMSkuZmlsbCgwKSxcbiAgICAgIG5ldyBBcnJheShpbnB1dC5sZW5ndGggKyAxKS5maWxsKDApLFxuICAgIF07XG4gIH1cblxuICBtZWFzdXJlKG9wdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0ID09PSBvcHRpb24pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbkxvd2VyQ2FzZSA9IG9wdGlvbi50b0xvd2VyQ2FzZSgpOyAvLyBBbnkgY2FzZSBjaGFuZ2UgY291bnRzIGFzIGEgc2luZ2xlIGVkaXRcblxuICAgIGlmICh0aGlzLl9pbnB1dExvd2VyQ2FzZSA9PT0gb3B0aW9uTG93ZXJDYXNlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBsZXQgYSA9IHN0cmluZ1RvQXJyYXkob3B0aW9uTG93ZXJDYXNlKTtcbiAgICBsZXQgYiA9IHRoaXMuX2lucHV0QXJyYXk7XG5cbiAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkge1xuICAgICAgY29uc3QgdG1wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRtcDtcbiAgICB9XG5cbiAgICBjb25zdCBhTGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgY29uc3QgYkxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgaWYgKGFMZW5ndGggLSBiTGVuZ3RoID4gdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLl9yb3dzO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gYkxlbmd0aDsgaisrKSB7XG4gICAgICByb3dzWzBdW2pdID0gajtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHVwUm93ID0gcm93c1soaSAtIDEpICUgM107XG4gICAgICBjb25zdCBjdXJyZW50Um93ID0gcm93c1tpICUgM107XG4gICAgICBsZXQgc21hbGxlc3RDZWxsID0gKGN1cnJlbnRSb3dbMF0gPSBpKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gYkxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNvc3QgPSBhW2kgLSAxXSA9PT0gYltqIC0gMV0gPyAwIDogMTtcbiAgICAgICAgbGV0IGN1cnJlbnRDZWxsID0gTWF0aC5taW4oXG4gICAgICAgICAgdXBSb3dbal0gKyAxLCAvLyBkZWxldGVcbiAgICAgICAgICBjdXJyZW50Um93W2ogLSAxXSArIDEsIC8vIGluc2VydFxuICAgICAgICAgIHVwUm93W2ogLSAxXSArIGNvc3QsIC8vIHN1YnN0aXR1dGVcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaSA+IDEgJiYgaiA+IDEgJiYgYVtpIC0gMV0gPT09IGJbaiAtIDJdICYmIGFbaSAtIDJdID09PSBiW2ogLSAxXSkge1xuICAgICAgICAgIC8vIHRyYW5zcG9zaXRpb25cbiAgICAgICAgICBjb25zdCBkb3VibGVEaWFnb25hbENlbGwgPSByb3dzWyhpIC0gMikgJSAzXVtqIC0gMl07XG4gICAgICAgICAgY3VycmVudENlbGwgPSBNYXRoLm1pbihjdXJyZW50Q2VsbCwgZG91YmxlRGlhZ29uYWxDZWxsICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudENlbGwgPCBzbWFsbGVzdENlbGwpIHtcbiAgICAgICAgICBzbWFsbGVzdENlbGwgPSBjdXJyZW50Q2VsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRSb3dbal0gPSBjdXJyZW50Q2VsbDtcbiAgICAgIH0gLy8gRWFybHkgZXhpdCwgc2luY2UgZGlzdGFuY2UgY2FuJ3QgZ28gc21hbGxlciB0aGFuIHNtYWxsZXN0IGVsZW1lbnQgb2YgdGhlIHByZXZpb3VzIHJvdy5cblxuICAgICAgaWYgKHNtYWxsZXN0Q2VsbCA+IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3RhbmNlID0gcm93c1thTGVuZ3RoICUgM11bYkxlbmd0aF07XG4gICAgcmV0dXJuIGRpc3RhbmNlIDw9IHRocmVzaG9sZCA/IGRpc3RhbmNlIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyKSB7XG4gIGNvbnN0IHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KHN0ckxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkge1xuICAgIGFycmF5W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdG9PYmpNYXAob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgIG1hcFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuIiwiLyoqXG4gKiBDb250YWlucyBhIHJhbmdlIG9mIFVURi04IGNoYXJhY3RlciBvZmZzZXRzIGFuZCB0b2tlbiByZWZlcmVuY2VzIHRoYXRcbiAqIGlkZW50aWZ5IHRoZSByZWdpb24gb2YgdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHRoZSBBU1QgZGVyaXZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIExvY2F0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBUb2tlbiBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFRva2VuIGF0IHdoaWNoIHRoaXMgTm9kZSBlbmRzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFNvdXJjZSBkb2N1bWVudCB0aGUgQVNUIHJlcHJlc2VudHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGFydFRva2VuLCBlbmRUb2tlbiwgc291cmNlKSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0VG9rZW4uc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmRUb2tlbi5lbmQ7XG4gICAgdGhpcy5zdGFydFRva2VuID0gc3RhcnRUb2tlbjtcbiAgICB0aGlzLmVuZFRva2VuID0gZW5kVG9rZW47XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdMb2NhdGlvbic7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgZW5kOiB0aGlzLmVuZCxcbiAgICB9O1xuICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSByYW5nZSBvZiBjaGFyYWN0ZXJzIHJlcHJlc2VudGVkIGJ5IGEgbGV4aWNhbCB0b2tlblxuICogd2l0aGluIGEgU291cmNlLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUb2tlbiB7XG4gIC8qKlxuICAgKiBUaGUga2luZCBvZiBUb2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSAxLWluZGV4ZWQgbGluZSBudW1iZXIgb24gd2hpY2ggdGhpcyBUb2tlbiBhcHBlYXJzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIDEtaW5kZXhlZCBjb2x1bW4gbnVtYmVyIGF0IHdoaWNoIHRoaXMgVG9rZW4gYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogRm9yIG5vbi1wdW5jdHVhdGlvbiB0b2tlbnMsIHJlcHJlc2VudHMgdGhlIGludGVycHJldGVkIHZhbHVlIG9mIHRoZSB0b2tlbi5cbiAgICpcbiAgICogTm90ZTogaXMgdW5kZWZpbmVkIGZvciBwdW5jdHVhdGlvbiB0b2tlbnMsIGJ1dCB0eXBlZCBhcyBzdHJpbmcgZm9yXG4gICAqIGNvbnZlbmllbmNlIGluIHRoZSBwYXJzZXIuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUb2tlbnMgZXhpc3QgYXMgbm9kZXMgaW4gYSBkb3VibGUtbGlua2VkLWxpc3QgYW1vbmdzdCBhbGwgdG9rZW5zXG4gICAqIGluY2x1ZGluZyBpZ25vcmVkIHRva2Vucy4gPFNPRj4gaXMgYWx3YXlzIHRoZSBmaXJzdCBub2RlIGFuZCA8RU9GPlxuICAgKiB0aGUgbGFzdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGtpbmQsIHN0YXJ0LCBlbmQsIGxpbmUsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1Rva2VuJztcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgIH07XG4gIH1cbn1cbi8qKlxuICogVGhlIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIEFTVCBub2RlIHR5cGVzLlxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBRdWVyeURvY3VtZW50S2V5cyA9IHtcbiAgTmFtZTogW10sXG4gIERvY3VtZW50OiBbJ2RlZmluaXRpb25zJ10sXG4gIE9wZXJhdGlvbkRlZmluaXRpb246IFtcbiAgICAnbmFtZScsXG4gICAgJ3ZhcmlhYmxlRGVmaW5pdGlvbnMnLFxuICAgICdkaXJlY3RpdmVzJyxcbiAgICAnc2VsZWN0aW9uU2V0JyxcbiAgXSxcbiAgVmFyaWFibGVEZWZpbml0aW9uOiBbJ3ZhcmlhYmxlJywgJ3R5cGUnLCAnZGVmYXVsdFZhbHVlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgVmFyaWFibGU6IFsnbmFtZSddLFxuICBTZWxlY3Rpb25TZXQ6IFsnc2VsZWN0aW9ucyddLFxuICBGaWVsZDogWydhbGlhcycsICduYW1lJywgJ2FyZ3VtZW50cycsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBBcmd1bWVudDogWyduYW1lJywgJ3ZhbHVlJ10sXG4gIEZyYWdtZW50U3ByZWFkOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBJbmxpbmVGcmFnbWVudDogWyd0eXBlQ29uZGl0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjogW1xuICAgICduYW1lJywgLy8gTm90ZTogZnJhZ21lbnQgdmFyaWFibGUgZGVmaW5pdGlvbnMgYXJlIGRlcHJlY2F0ZWQgYW5kIHdpbGwgcmVtb3ZlZCBpbiB2MTcuMC4wXG4gICAgJ3ZhcmlhYmxlRGVmaW5pdGlvbnMnLFxuICAgICd0eXBlQ29uZGl0aW9uJyxcbiAgICAnZGlyZWN0aXZlcycsXG4gICAgJ3NlbGVjdGlvblNldCcsXG4gIF0sXG4gIEludFZhbHVlOiBbXSxcbiAgRmxvYXRWYWx1ZTogW10sXG4gIFN0cmluZ1ZhbHVlOiBbXSxcbiAgQm9vbGVhblZhbHVlOiBbXSxcbiAgTnVsbFZhbHVlOiBbXSxcbiAgRW51bVZhbHVlOiBbXSxcbiAgTGlzdFZhbHVlOiBbJ3ZhbHVlcyddLFxuICBPYmplY3RWYWx1ZTogWydmaWVsZHMnXSxcbiAgT2JqZWN0RmllbGQ6IFsnbmFtZScsICd2YWx1ZSddLFxuICBEaXJlY3RpdmU6IFsnbmFtZScsICdhcmd1bWVudHMnXSxcbiAgTmFtZWRUeXBlOiBbJ25hbWUnXSxcbiAgTGlzdFR5cGU6IFsndHlwZSddLFxuICBOb25OdWxsVHlwZTogWyd0eXBlJ10sXG4gIFNjaGVtYURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbjogWyd0eXBlJ10sXG4gIFNjYWxhclR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRGVmaW5pdGlvbjogW1xuICAgICdkZXNjcmlwdGlvbicsXG4gICAgJ25hbWUnLFxuICAgICdpbnRlcmZhY2VzJyxcbiAgICAnZGlyZWN0aXZlcycsXG4gICAgJ2ZpZWxkcycsXG4gIF0sXG4gIEZpZWxkRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2FyZ3VtZW50cycsICd0eXBlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb246IFtcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICduYW1lJyxcbiAgICAndHlwZScsXG4gICAgJ2RlZmF1bHRWYWx1ZScsXG4gICAgJ2RpcmVjdGl2ZXMnLFxuICBdLFxuICBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbjogW1xuICAgICdkZXNjcmlwdGlvbicsXG4gICAgJ25hbWUnLFxuICAgICdpbnRlcmZhY2VzJyxcbiAgICAnZGlyZWN0aXZlcycsXG4gICAgJ2ZpZWxkcycsXG4gIF0sXG4gIFVuaW9uVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndmFsdWVzJ10sXG4gIEVudW1WYWx1ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ2xvY2F0aW9ucyddLFxuICBTY2hlbWFFeHRlbnNpb246IFsnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBVbmlvblR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbn07XG5jb25zdCBraW5kVmFsdWVzID0gbmV3IFNldChPYmplY3Qua2V5cyhRdWVyeURvY3VtZW50S2V5cykpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKG1heWJlTm9kZSkge1xuICBjb25zdCBtYXliZUtpbmQgPVxuICAgIG1heWJlTm9kZSA9PT0gbnVsbCB8fCBtYXliZU5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heWJlTm9kZS5raW5kO1xuICByZXR1cm4gdHlwZW9mIG1heWJlS2luZCA9PT0gJ3N0cmluZycgJiYga2luZFZhbHVlcy5oYXMobWF5YmVLaW5kKTtcbn1cbi8qKiBOYW1lICovXG5cbnZhciBPcGVyYXRpb25UeXBlTm9kZTtcblxuKGZ1bmN0aW9uIChPcGVyYXRpb25UeXBlTm9kZSkge1xuICBPcGVyYXRpb25UeXBlTm9kZVsnUVVFUlknXSA9ICdxdWVyeSc7XG4gIE9wZXJhdGlvblR5cGVOb2RlWydNVVRBVElPTiddID0gJ211dGF0aW9uJztcbiAgT3BlcmF0aW9uVHlwZU5vZGVbJ1NVQlNDUklQVElPTiddID0gJ3N1YnNjcmlwdGlvbic7XG59KShPcGVyYXRpb25UeXBlTm9kZSB8fCAoT3BlcmF0aW9uVHlwZU5vZGUgPSB7fSkpO1xuXG5leHBvcnQgeyBPcGVyYXRpb25UeXBlTm9kZSB9O1xuIiwiaW1wb3J0IHsgaXNXaGl0ZVNwYWNlIH0gZnJvbSAnLi9jaGFyYWN0ZXJDbGFzc2VzLm1qcyc7XG4vKipcbiAqIFByb2R1Y2VzIHRoZSB2YWx1ZSBvZiBhIGJsb2NrIHN0cmluZyBmcm9tIGl0cyBwYXJzZWQgcmF3IHZhbHVlLCBzaW1pbGFyIHRvXG4gKiBDb2ZmZWVTY3JpcHQncyBibG9jayBzdHJpbmcsIFB5dGhvbidzIGRvY3N0cmluZyB0cmltIG9yIFJ1YnkncyBzdHJpcF9oZXJlZG9jLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyB0aGUgR3JhcGhRTCBzcGVjJ3MgQmxvY2tTdHJpbmdWYWx1ZSgpIHN0YXRpYyBhbGdvcml0aG0uXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZGVudEJsb2NrU3RyaW5nTGluZXMobGluZXMpIHtcbiAgdmFyIF9maXJzdE5vbkVtcHR5TGluZTI7XG5cbiAgbGV0IGNvbW1vbkluZGVudCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICBsZXQgZmlyc3ROb25FbXB0eUxpbmUgPSBudWxsO1xuICBsZXQgbGFzdE5vbkVtcHR5TGluZSA9IC0xO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgX2ZpcnN0Tm9uRW1wdHlMaW5lO1xuXG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgIGNvbnN0IGluZGVudCA9IGxlYWRpbmdXaGl0ZXNwYWNlKGxpbmUpO1xuXG4gICAgaWYgKGluZGVudCA9PT0gbGluZS5sZW5ndGgpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBza2lwIGVtcHR5IGxpbmVzXG4gICAgfVxuXG4gICAgZmlyc3ROb25FbXB0eUxpbmUgPVxuICAgICAgKF9maXJzdE5vbkVtcHR5TGluZSA9IGZpcnN0Tm9uRW1wdHlMaW5lKSAhPT0gbnVsbCAmJlxuICAgICAgX2ZpcnN0Tm9uRW1wdHlMaW5lICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZmlyc3ROb25FbXB0eUxpbmVcbiAgICAgICAgOiBpO1xuICAgIGxhc3ROb25FbXB0eUxpbmUgPSBpO1xuXG4gICAgaWYgKGkgIT09IDAgJiYgaW5kZW50IDwgY29tbW9uSW5kZW50KSB7XG4gICAgICBjb21tb25JbmRlbnQgPSBpbmRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxpbmVzIC8vIFJlbW92ZSBjb21tb24gaW5kZW50YXRpb24gZnJvbSBhbGwgbGluZXMgYnV0IGZpcnN0LlxuICAgIC5tYXAoKGxpbmUsIGkpID0+IChpID09PSAwID8gbGluZSA6IGxpbmUuc2xpY2UoY29tbW9uSW5kZW50KSkpIC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBibGFuayBsaW5lcy5cbiAgICAuc2xpY2UoXG4gICAgICAoX2ZpcnN0Tm9uRW1wdHlMaW5lMiA9IGZpcnN0Tm9uRW1wdHlMaW5lKSAhPT0gbnVsbCAmJlxuICAgICAgICBfZmlyc3ROb25FbXB0eUxpbmUyICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZmlyc3ROb25FbXB0eUxpbmUyXG4gICAgICAgIDogMCxcbiAgICAgIGxhc3ROb25FbXB0eUxpbmUgKyAxLFxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGxlYWRpbmdXaGl0ZXNwYWNlKHN0cikge1xuICBsZXQgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBzdHIubGVuZ3RoICYmIGlzV2hpdGVTcGFjZShzdHIuY2hhckNvZGVBdChpKSkpIHtcbiAgICArK2k7XG4gIH1cblxuICByZXR1cm4gaTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbnRhYmxlQXNCbG9ja1N0cmluZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIGVtcHR5IHN0cmluZyBpcyBwcmludGFibGVcbiAgfVxuXG4gIGxldCBpc0VtcHR5TGluZSA9IHRydWU7XG4gIGxldCBoYXNJbmRlbnQgPSBmYWxzZTtcbiAgbGV0IGhhc0NvbW1vbkluZGVudCA9IHRydWU7XG4gIGxldCBzZWVuTm9uRW1wdHlMaW5lID0gZmFsc2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgIHN3aXRjaCAodmFsdWUuY29kZVBvaW50QXQoaSkpIHtcbiAgICAgIGNhc2UgMHgwMDAwOlxuICAgICAgY2FzZSAweDAwMDE6XG4gICAgICBjYXNlIDB4MDAwMjpcbiAgICAgIGNhc2UgMHgwMDAzOlxuICAgICAgY2FzZSAweDAwMDQ6XG4gICAgICBjYXNlIDB4MDAwNTpcbiAgICAgIGNhc2UgMHgwMDA2OlxuICAgICAgY2FzZSAweDAwMDc6XG4gICAgICBjYXNlIDB4MDAwODpcbiAgICAgIGNhc2UgMHgwMDBiOlxuICAgICAgY2FzZSAweDAwMGM6XG4gICAgICBjYXNlIDB4MDAwZTpcbiAgICAgIGNhc2UgMHgwMDBmOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvLyBIYXMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzXG5cbiAgICAgIGNhc2UgMHgwMDBkOlxuICAgICAgICAvLyAgXFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIEhhcyBcXHIgb3IgXFxyXFxuIHdoaWNoIHdpbGwgYmUgcmVwbGFjZWQgYXMgXFxuXG5cbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIC8vICBcXG5cbiAgICAgICAgaWYgKGlzRW1wdHlMaW5lICYmICFzZWVuTm9uRW1wdHlMaW5lKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBIYXMgbGVhZGluZyBuZXcgbGluZVxuICAgICAgICB9XG5cbiAgICAgICAgc2Vlbk5vbkVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgIGlzRW1wdHlMaW5lID0gdHJ1ZTtcbiAgICAgICAgaGFzSW5kZW50ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk6IC8vICAgXFx0XG5cbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIC8vICA8c3BhY2U+XG4gICAgICAgIGhhc0luZGVudCB8fCAoaGFzSW5kZW50ID0gaXNFbXB0eUxpbmUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaGFzQ29tbW9uSW5kZW50ICYmIChoYXNDb21tb25JbmRlbnQgPSBoYXNJbmRlbnQpO1xuICAgICAgICBpc0VtcHR5TGluZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0VtcHR5TGluZSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gSGFzIHRyYWlsaW5nIGVtcHR5IGxpbmVzXG4gIH1cblxuICBpZiAoaGFzQ29tbW9uSW5kZW50ICYmIHNlZW5Ob25FbXB0eUxpbmUpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIEhhcyBpbnRlcm5hbCBpbmRlbnRcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBQcmludCBhIGJsb2NrIHN0cmluZyBpbiB0aGUgaW5kZW50ZWQgYmxvY2sgZm9ybSBieSBhZGRpbmcgYSBsZWFkaW5nIGFuZFxuICogdHJhaWxpbmcgYmxhbmsgbGluZS4gSG93ZXZlciwgaWYgYSBibG9jayBzdHJpbmcgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSBhbmQgaXNcbiAqIGEgc2luZ2xlLWxpbmUsIGFkZGluZyBhIGxlYWRpbmcgYmxhbmsgbGluZSB3b3VsZCBzdHJpcCB0aGF0IHdoaXRlc3BhY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZXNjYXBlZFZhbHVlID0gdmFsdWUucmVwbGFjZSgvXCJcIlwiL2csICdcXFxcXCJcIlwiJyk7IC8vIEV4cGFuZCBhIGJsb2NrIHN0cmluZydzIHJhdyB2YWx1ZSBpbnRvIGluZGVwZW5kZW50IGxpbmVzLlxuXG4gIGNvbnN0IGxpbmVzID0gZXNjYXBlZFZhbHVlLnNwbGl0KC9cXHJcXG58W1xcblxccl0vZyk7XG4gIGNvbnN0IGlzU2luZ2xlTGluZSA9IGxpbmVzLmxlbmd0aCA9PT0gMTsgLy8gSWYgY29tbW9uIGluZGVudGF0aW9uIGlzIGZvdW5kIHdlIGNhbiBmaXggc29tZSBvZiB0aG9zZSBjYXNlcyBieSBhZGRpbmcgbGVhZGluZyBuZXcgbGluZVxuXG4gIGNvbnN0IGZvcmNlTGVhZGluZ05ld0xpbmUgPVxuICAgIGxpbmVzLmxlbmd0aCA+IDEgJiZcbiAgICBsaW5lc1xuICAgICAgLnNsaWNlKDEpXG4gICAgICAuZXZlcnkoKGxpbmUpID0+IGxpbmUubGVuZ3RoID09PSAwIHx8IGlzV2hpdGVTcGFjZShsaW5lLmNoYXJDb2RlQXQoMCkpKTsgLy8gVHJhaWxpbmcgdHJpcGxlIHF1b3RlcyBqdXN0IGxvb2tzIGNvbmZ1c2luZyBidXQgZG9lc24ndCBmb3JjZSB0cmFpbGluZyBuZXcgbGluZVxuXG4gIGNvbnN0IGhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzID0gZXNjYXBlZFZhbHVlLmVuZHNXaXRoKCdcXFxcXCJcIlwiJyk7IC8vIFRyYWlsaW5nIHF1b3RlIChzaW5nbGUgb3IgZG91YmxlKSBvciBzbGFzaCBmb3JjZXMgdHJhaWxpbmcgbmV3IGxpbmVcblxuICBjb25zdCBoYXNUcmFpbGluZ1F1b3RlID0gdmFsdWUuZW5kc1dpdGgoJ1wiJykgJiYgIWhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzO1xuICBjb25zdCBoYXNUcmFpbGluZ1NsYXNoID0gdmFsdWUuZW5kc1dpdGgoJ1xcXFwnKTtcbiAgY29uc3QgZm9yY2VUcmFpbGluZ05ld2xpbmUgPSBoYXNUcmFpbGluZ1F1b3RlIHx8IGhhc1RyYWlsaW5nU2xhc2g7XG4gIGNvbnN0IHByaW50QXNNdWx0aXBsZUxpbmVzID1cbiAgICAhKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMubWluaW1pemUpICYmIC8vIGFkZCBsZWFkaW5nIGFuZCB0cmFpbGluZyBuZXcgbGluZXMgb25seSBpZiBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eVxuICAgICghaXNTaW5nbGVMaW5lIHx8XG4gICAgICB2YWx1ZS5sZW5ndGggPiA3MCB8fFxuICAgICAgZm9yY2VUcmFpbGluZ05ld2xpbmUgfHxcbiAgICAgIGZvcmNlTGVhZGluZ05ld0xpbmUgfHxcbiAgICAgIGhhc1RyYWlsaW5nVHJpcGxlUXVvdGVzKTtcbiAgbGV0IHJlc3VsdCA9ICcnOyAvLyBGb3JtYXQgYSBtdWx0aS1saW5lIGJsb2NrIHF1b3RlIHRvIGFjY291bnQgZm9yIGxlYWRpbmcgc3BhY2UuXG5cbiAgY29uc3Qgc2tpcExlYWRpbmdOZXdMaW5lID0gaXNTaW5nbGVMaW5lICYmIGlzV2hpdGVTcGFjZSh2YWx1ZS5jaGFyQ29kZUF0KDApKTtcblxuICBpZiAoKHByaW50QXNNdWx0aXBsZUxpbmVzICYmICFza2lwTGVhZGluZ05ld0xpbmUpIHx8IGZvcmNlTGVhZGluZ05ld0xpbmUpIHtcbiAgICByZXN1bHQgKz0gJ1xcbic7XG4gIH1cblxuICByZXN1bHQgKz0gZXNjYXBlZFZhbHVlO1xuXG4gIGlmIChwcmludEFzTXVsdGlwbGVMaW5lcyB8fCBmb3JjZVRyYWlsaW5nTmV3bGluZSkge1xuICAgIHJlc3VsdCArPSAnXFxuJztcbiAgfVxuXG4gIHJldHVybiAnXCJcIlwiJyArIHJlc3VsdCArICdcIlwiXCInO1xufVxuIiwiLyoqXG4gKiBgYGBcbiAqIFdoaXRlU3BhY2UgOjpcbiAqICAgLSBcIkhvcml6b250YWwgVGFiIChVKzAwMDkpXCJcbiAqICAgLSBcIlNwYWNlIChVKzAwMjApXCJcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1doaXRlU3BhY2UoY29kZSkge1xuICByZXR1cm4gY29kZSA9PT0gMHgwMDA5IHx8IGNvZGUgPT09IDB4MDAyMDtcbn1cbi8qKlxuICogYGBgXG4gKiBEaWdpdCA6OiBvbmUgb2ZcbiAqICAgLSBgMGAgYDFgIGAyYCBgM2AgYDRgIGA1YCBgNmAgYDdgIGA4YCBgOWBcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSAweDAwMzAgJiYgY29kZSA8PSAweDAwMzk7XG59XG4vKipcbiAqIGBgYFxuICogTGV0dGVyIDo6IG9uZSBvZlxuICogICAtIGBBYCBgQmAgYENgIGBEYCBgRWAgYEZgIGBHYCBgSGAgYElgIGBKYCBgS2AgYExgIGBNYFxuICogICAtIGBOYCBgT2AgYFBgIGBRYCBgUmAgYFNgIGBUYCBgVWAgYFZgIGBXYCBgWGAgYFlgIGBaYFxuICogICAtIGBhYCBgYmAgYGNgIGBkYCBgZWAgYGZgIGBnYCBgaGAgYGlgIGBqYCBga2AgYGxgIGBtYFxuICogICAtIGBuYCBgb2AgYHBgIGBxYCBgcmAgYHNgIGB0YCBgdWAgYHZgIGB3YCBgeGAgYHlgIGB6YFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNMZXR0ZXIoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDB4MDA2MSAmJiBjb2RlIDw9IDB4MDA3YSkgfHwgLy8gQS1aXG4gICAgKGNvZGUgPj0gMHgwMDQxICYmIGNvZGUgPD0gMHgwMDVhKSAvLyBhLXpcbiAgKTtcbn1cbi8qKlxuICogYGBgXG4gKiBOYW1lU3RhcnQgOjpcbiAqICAgLSBMZXR0ZXJcbiAqICAgLSBgX2BcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmFtZVN0YXJ0KGNvZGUpIHtcbiAgcmV0dXJuIGlzTGV0dGVyKGNvZGUpIHx8IGNvZGUgPT09IDB4MDA1Zjtcbn1cbi8qKlxuICogYGBgXG4gKiBOYW1lQ29udGludWUgOjpcbiAqICAgLSBMZXR0ZXJcbiAqICAgLSBEaWdpdFxuICogICAtIGBfYFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lQ29udGludWUoY29kZSkge1xuICByZXR1cm4gaXNMZXR0ZXIoY29kZSkgfHwgaXNEaWdpdChjb2RlKSB8fCBjb2RlID09PSAweDAwNWY7XG59XG4iLCIvKipcbiAqIFRoZSBzZXQgb2YgYWxsb3dlZCBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICovXG52YXIgRGlyZWN0aXZlTG9jYXRpb247XG5cbihmdW5jdGlvbiAoRGlyZWN0aXZlTG9jYXRpb24pIHtcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1FVRVJZJ10gPSAnUVVFUlknO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnTVVUQVRJT04nXSA9ICdNVVRBVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydTVUJTQ1JJUFRJT04nXSA9ICdTVUJTQ1JJUFRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRklFTEQnXSA9ICdGSUVMRCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGUkFHTUVOVF9ERUZJTklUSU9OJ10gPSAnRlJBR01FTlRfREVGSU5JVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGUkFHTUVOVF9TUFJFQUQnXSA9ICdGUkFHTUVOVF9TUFJFQUQnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5MSU5FX0ZSQUdNRU5UJ10gPSAnSU5MSU5FX0ZSQUdNRU5UJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1ZBUklBQkxFX0RFRklOSVRJT04nXSA9ICdWQVJJQUJMRV9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NDSEVNQSddID0gJ1NDSEVNQSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydTQ0FMQVInXSA9ICdTQ0FMQVInO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnT0JKRUNUJ10gPSAnT0JKRUNUJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZJRUxEX0RFRklOSVRJT04nXSA9ICdGSUVMRF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0FSR1VNRU5UX0RFRklOSVRJT04nXSA9ICdBUkdVTUVOVF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOVEVSRkFDRSddID0gJ0lOVEVSRkFDRSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydVTklPTiddID0gJ1VOSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0VOVU0nXSA9ICdFTlVNJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0VOVU1fVkFMVUUnXSA9ICdFTlVNX1ZBTFVFJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOUFVUX09CSkVDVCddID0gJ0lOUFVUX09CSkVDVCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTlBVVF9GSUVMRF9ERUZJTklUSU9OJ10gPSAnSU5QVVRfRklFTERfREVGSU5JVElPTic7XG59KShEaXJlY3RpdmVMb2NhdGlvbiB8fCAoRGlyZWN0aXZlTG9jYXRpb24gPSB7fSkpO1xuXG5leHBvcnQgeyBEaXJlY3RpdmVMb2NhdGlvbiB9O1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBEaXJlY3RpdmVMb2NhdGlvbmAuIFdpbGwgYmUgcmVtb3ZlIGluIHYxNy5cbiAqL1xuIiwiLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQga2luZCB2YWx1ZXMgZm9yIEFTVCBub2Rlcy5cbiAqL1xudmFyIEtpbmQ7XG5cbihmdW5jdGlvbiAoS2luZCkge1xuICBLaW5kWydOQU1FJ10gPSAnTmFtZSc7XG4gIEtpbmRbJ0RPQ1VNRU5UJ10gPSAnRG9jdW1lbnQnO1xuICBLaW5kWydPUEVSQVRJT05fREVGSU5JVElPTiddID0gJ09wZXJhdGlvbkRlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRV9ERUZJTklUSU9OJ10gPSAnVmFyaWFibGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0VMRUNUSU9OX1NFVCddID0gJ1NlbGVjdGlvblNldCc7XG4gIEtpbmRbJ0ZJRUxEJ10gPSAnRmllbGQnO1xuICBLaW5kWydBUkdVTUVOVCddID0gJ0FyZ3VtZW50JztcbiAgS2luZFsnRlJBR01FTlRfU1BSRUFEJ10gPSAnRnJhZ21lbnRTcHJlYWQnO1xuICBLaW5kWydJTkxJTkVfRlJBR01FTlQnXSA9ICdJbmxpbmVGcmFnbWVudCc7XG4gIEtpbmRbJ0ZSQUdNRU5UX0RFRklOSVRJT04nXSA9ICdGcmFnbWVudERlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRSddID0gJ1ZhcmlhYmxlJztcbiAgS2luZFsnSU5UJ10gPSAnSW50VmFsdWUnO1xuICBLaW5kWydGTE9BVCddID0gJ0Zsb2F0VmFsdWUnO1xuICBLaW5kWydTVFJJTkcnXSA9ICdTdHJpbmdWYWx1ZSc7XG4gIEtpbmRbJ0JPT0xFQU4nXSA9ICdCb29sZWFuVmFsdWUnO1xuICBLaW5kWydOVUxMJ10gPSAnTnVsbFZhbHVlJztcbiAgS2luZFsnRU5VTSddID0gJ0VudW1WYWx1ZSc7XG4gIEtpbmRbJ0xJU1QnXSA9ICdMaXN0VmFsdWUnO1xuICBLaW5kWydPQkpFQ1QnXSA9ICdPYmplY3RWYWx1ZSc7XG4gIEtpbmRbJ09CSkVDVF9GSUVMRCddID0gJ09iamVjdEZpZWxkJztcbiAgS2luZFsnRElSRUNUSVZFJ10gPSAnRGlyZWN0aXZlJztcbiAgS2luZFsnTkFNRURfVFlQRSddID0gJ05hbWVkVHlwZSc7XG4gIEtpbmRbJ0xJU1RfVFlQRSddID0gJ0xpc3RUeXBlJztcbiAgS2luZFsnTk9OX05VTExfVFlQRSddID0gJ05vbk51bGxUeXBlJztcbiAgS2luZFsnU0NIRU1BX0RFRklOSVRJT04nXSA9ICdTY2hlbWFEZWZpbml0aW9uJztcbiAgS2luZFsnT1BFUkFUSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ09wZXJhdGlvblR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0NBTEFSX1RZUEVfREVGSU5JVElPTiddID0gJ1NjYWxhclR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfREVGSU5JVElPTiddID0gJ09iamVjdFR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRklFTERfREVGSU5JVElPTiddID0gJ0ZpZWxkRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOUFVUX1ZBTFVFX0RFRklOSVRJT04nXSA9ICdJbnB1dFZhbHVlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04nXSA9ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1VOSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ1VuaW9uVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydFTlVNX1RZUEVfREVGSU5JVElPTiddID0gJ0VudW1UeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0VOVU1fVkFMVUVfREVGSU5JVElPTiddID0gJ0VudW1WYWx1ZURlZmluaXRpb24nO1xuICBLaW5kWydJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OJ10gPSAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0RJUkVDVElWRV9ERUZJTklUSU9OJ10gPSAnRGlyZWN0aXZlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1NDSEVNQV9FWFRFTlNJT04nXSA9ICdTY2hlbWFFeHRlbnNpb24nO1xuICBLaW5kWydTQ0FMQVJfVFlQRV9FWFRFTlNJT04nXSA9ICdTY2FsYXJUeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfRVhURU5TSU9OJ10gPSAnT2JqZWN0VHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiddID0gJ0ludGVyZmFjZVR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydVTklPTl9UWVBFX0VYVEVOU0lPTiddID0gJ1VuaW9uVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0VOVU1fVFlQRV9FWFRFTlNJT04nXSA9ICdFbnVtVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiddID0gJ0lucHV0T2JqZWN0VHlwZUV4dGVuc2lvbic7XG59KShLaW5kIHx8IChLaW5kID0ge30pKTtcblxuZXhwb3J0IHsgS2luZCB9O1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgcG9zc2libGUga2luZCB2YWx1ZXMgb2YgQVNUIG5vZGVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYEtpbmRgLiBXaWxsIGJlIHJlbW92ZSBpbiB2MTcuXG4gKi9cbiIsImltcG9ydCB7IHN5bnRheEVycm9yIH0gZnJvbSAnLi4vZXJyb3Ivc3ludGF4RXJyb3IubWpzJztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi9hc3QubWpzJztcbmltcG9ydCB7IGRlZGVudEJsb2NrU3RyaW5nTGluZXMgfSBmcm9tICcuL2Jsb2NrU3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBpc0RpZ2l0LCBpc05hbWVDb250aW51ZSwgaXNOYW1lU3RhcnQgfSBmcm9tICcuL2NoYXJhY3RlckNsYXNzZXMubWpzJztcbmltcG9ydCB7IFRva2VuS2luZCB9IGZyb20gJy4vdG9rZW5LaW5kLm1qcyc7XG4vKipcbiAqIEdpdmVuIGEgU291cmNlIG9iamVjdCwgY3JlYXRlcyBhIExleGVyIGZvciB0aGF0IHNvdXJjZS5cbiAqIEEgTGV4ZXIgaXMgYSBzdGF0ZWZ1bCBzdHJlYW0gZ2VuZXJhdG9yIGluIHRoYXQgZXZlcnkgdGltZVxuICogaXQgaXMgYWR2YW5jZWQsIGl0IHJldHVybnMgdGhlIG5leHQgdG9rZW4gaW4gdGhlIFNvdXJjZS4gQXNzdW1pbmcgdGhlXG4gKiBzb3VyY2UgbGV4ZXMsIHRoZSBmaW5hbCBUb2tlbiBlbWl0dGVkIGJ5IHRoZSBsZXhlciB3aWxsIGJlIG9mIGtpbmRcbiAqIEVPRiwgYWZ0ZXIgd2hpY2ggdGhlIGxleGVyIHdpbGwgcmVwZWF0ZWRseSByZXR1cm4gdGhlIHNhbWUgRU9GIHRva2VuXG4gKiB3aGVuZXZlciBjYWxsZWQuXG4gKi9cblxuZXhwb3J0IGNsYXNzIExleGVyIHtcbiAgLyoqXG4gICAqIFRoZSBwcmV2aW91c2x5IGZvY3VzZWQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5IGZvY3VzZWQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgKDEtaW5kZXhlZCkgbGluZSBjb250YWluaW5nIHRoZSBjdXJyZW50IHRva2VuLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhlIGN1cnJlbnQgbGluZSBiZWdpbnMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICBjb25zdCBzdGFydE9mRmlsZVRva2VuID0gbmV3IFRva2VuKFRva2VuS2luZC5TT0YsIDAsIDAsIDAsIDApO1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMubGFzdFRva2VuID0gc3RhcnRPZkZpbGVUb2tlbjtcbiAgICB0aGlzLnRva2VuID0gc3RhcnRPZkZpbGVUb2tlbjtcbiAgICB0aGlzLmxpbmUgPSAxO1xuICAgIHRoaXMubGluZVN0YXJ0ID0gMDtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0xleGVyJztcbiAgfVxuICAvKipcbiAgICogQWR2YW5jZXMgdGhlIHRva2VuIHN0cmVhbSB0byB0aGUgbmV4dCBub24taWdub3JlZCB0b2tlbi5cbiAgICovXG5cbiAgYWR2YW5jZSgpIHtcbiAgICB0aGlzLmxhc3RUb2tlbiA9IHRoaXMudG9rZW47XG4gICAgY29uc3QgdG9rZW4gPSAodGhpcy50b2tlbiA9IHRoaXMubG9va2FoZWFkKCkpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuICAvKipcbiAgICogTG9va3MgYWhlYWQgYW5kIHJldHVybnMgdGhlIG5leHQgbm9uLWlnbm9yZWQgdG9rZW4sIGJ1dCBkb2VzIG5vdCBjaGFuZ2VcbiAgICogdGhlIHN0YXRlIG9mIExleGVyLlxuICAgKi9cblxuICBsb29rYWhlYWQoKSB7XG4gICAgbGV0IHRva2VuID0gdGhpcy50b2tlbjtcblxuICAgIGlmICh0b2tlbi5raW5kICE9PSBUb2tlbktpbmQuRU9GKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0b2tlbi5uZXh0KSB7XG4gICAgICAgICAgdG9rZW4gPSB0b2tlbi5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlYWQgdGhlIG5leHQgdG9rZW4gYW5kIGZvcm0gYSBsaW5rIGluIHRoZSB0b2tlbiBsaW5rZWQtbGlzdC5cbiAgICAgICAgICBjb25zdCBuZXh0VG9rZW4gPSByZWFkTmV4dFRva2VuKHRoaXMsIHRva2VuLmVuZCk7IC8vIEB0cy1leHBlY3QtZXJyb3IgbmV4dCBpcyBvbmx5IG11dGFibGUgZHVyaW5nIHBhcnNpbmcuXG5cbiAgICAgICAgICB0b2tlbi5uZXh0ID0gbmV4dFRva2VuOyAvLyBAdHMtZXhwZWN0LWVycm9yIHByZXYgaXMgb25seSBtdXRhYmxlIGR1cmluZyBwYXJzaW5nLlxuXG4gICAgICAgICAgbmV4dFRva2VuLnByZXYgPSB0b2tlbjtcbiAgICAgICAgICB0b2tlbiA9IG5leHRUb2tlbjtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAodG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLkNPTU1FTlQpO1xuICAgIH1cblxuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQdW5jdHVhdG9yVG9rZW5LaW5kKGtpbmQpIHtcbiAgcmV0dXJuIChcbiAgICBraW5kID09PSBUb2tlbktpbmQuQkFORyB8fFxuICAgIGtpbmQgPT09IFRva2VuS2luZC5ET0xMQVIgfHxcbiAgICBraW5kID09PSBUb2tlbktpbmQuQU1QIHx8XG4gICAga2luZCA9PT0gVG9rZW5LaW5kLlBBUkVOX0wgfHxcbiAgICBraW5kID09PSBUb2tlbktpbmQuUEFSRU5fUiB8fFxuICAgIGtpbmQgPT09IFRva2VuS2luZC5TUFJFQUQgfHxcbiAgICBraW5kID09PSBUb2tlbktpbmQuQ09MT04gfHxcbiAgICBraW5kID09PSBUb2tlbktpbmQuRVFVQUxTIHx8XG4gICAga2luZCA9PT0gVG9rZW5LaW5kLkFUIHx8XG4gICAga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNLRVRfTCB8fFxuICAgIGtpbmQgPT09IFRva2VuS2luZC5CUkFDS0VUX1IgfHxcbiAgICBraW5kID09PSBUb2tlbktpbmQuQlJBQ0VfTCB8fFxuICAgIGtpbmQgPT09IFRva2VuS2luZC5QSVBFIHx8XG4gICAga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNFX1JcbiAgKTtcbn1cbi8qKlxuICogQSBVbmljb2RlIHNjYWxhciB2YWx1ZSBpcyBhbnkgVW5pY29kZSBjb2RlIHBvaW50IGV4Y2VwdCBzdXJyb2dhdGUgY29kZVxuICogcG9pbnRzLiBJbiBvdGhlciB3b3JkcywgdGhlIGluY2x1c2l2ZSByYW5nZXMgb2YgdmFsdWVzIDB4MDAwMCB0byAweEQ3RkYgYW5kXG4gKiAweEUwMDAgdG8gMHgxMEZGRkYuXG4gKlxuICogU291cmNlQ2hhcmFjdGVyIDo6XG4gKiAgIC0gXCJBbnkgVW5pY29kZSBzY2FsYXIgdmFsdWVcIlxuICovXG5cbmZ1bmN0aW9uIGlzVW5pY29kZVNjYWxhclZhbHVlKGNvZGUpIHtcbiAgcmV0dXJuIChcbiAgICAoY29kZSA+PSAweDAwMDAgJiYgY29kZSA8PSAweGQ3ZmYpIHx8IChjb2RlID49IDB4ZTAwMCAmJiBjb2RlIDw9IDB4MTBmZmZmKVxuICApO1xufVxuLyoqXG4gKiBUaGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uIGRlZmluZXMgc291cmNlIHRleHQgYXMgYSBzZXF1ZW5jZSBvZiB1bmljb2RlIHNjYWxhclxuICogdmFsdWVzICh3aGljaCBVbmljb2RlIGRlZmluZXMgdG8gZXhjbHVkZSBzdXJyb2dhdGUgY29kZSBwb2ludHMpLiBIb3dldmVyXG4gKiBKYXZhU2NyaXB0IGRlZmluZXMgc3RyaW5ncyBhcyBhIHNlcXVlbmNlIG9mIFVURi0xNiBjb2RlIHVuaXRzIHdoaWNoIG1heVxuICogaW5jbHVkZSBzdXJyb2dhdGVzLiBBIHN1cnJvZ2F0ZSBwYWlyIGlzIGEgdmFsaWQgc291cmNlIGNoYXJhY3RlciBhcyBpdFxuICogZW5jb2RlcyBhIHN1cHBsZW1lbnRhcnkgY29kZSBwb2ludCAoYWJvdmUgVStGRkZGKSwgYnV0IHVucGFpcmVkIHN1cnJvZ2F0ZVxuICogY29kZSBwb2ludHMgYXJlIG5vdCB2YWxpZCBzb3VyY2UgY2hhcmFjdGVycy5cbiAqL1xuXG5mdW5jdGlvbiBpc1N1cHBsZW1lbnRhcnlDb2RlUG9pbnQoYm9keSwgbG9jYXRpb24pIHtcbiAgcmV0dXJuIChcbiAgICBpc0xlYWRpbmdTdXJyb2dhdGUoYm9keS5jaGFyQ29kZUF0KGxvY2F0aW9uKSkgJiZcbiAgICBpc1RyYWlsaW5nU3Vycm9nYXRlKGJvZHkuY2hhckNvZGVBdChsb2NhdGlvbiArIDEpKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc0xlYWRpbmdTdXJyb2dhdGUoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRiZmY7XG59XG5cbmZ1bmN0aW9uIGlzVHJhaWxpbmdTdXJyb2dhdGUoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSAweGRjMDAgJiYgY29kZSA8PSAweGRmZmY7XG59XG4vKipcbiAqIFByaW50cyB0aGUgY29kZSBwb2ludCAob3IgZW5kIG9mIGZpbGUgcmVmZXJlbmNlKSBhdCBhIGdpdmVuIGxvY2F0aW9uIGluIGFcbiAqIHNvdXJjZSBmb3IgdXNlIGluIGVycm9yIG1lc3NhZ2VzLlxuICpcbiAqIFByaW50YWJsZSBBU0NJSSBpcyBwcmludGVkIHF1b3RlZCwgd2hpbGUgb3RoZXIgcG9pbnRzIGFyZSBwcmludGVkIGluIFVuaWNvZGVcbiAqIGNvZGUgcG9pbnQgZm9ybSAoaWUuIFUrMTIzNCkuXG4gKi9cblxuZnVuY3Rpb24gcHJpbnRDb2RlUG9pbnRBdChsZXhlciwgbG9jYXRpb24pIHtcbiAgY29uc3QgY29kZSA9IGxleGVyLnNvdXJjZS5ib2R5LmNvZGVQb2ludEF0KGxvY2F0aW9uKTtcblxuICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFRva2VuS2luZC5FT0Y7XG4gIH0gZWxzZSBpZiAoY29kZSA+PSAweDAwMjAgJiYgY29kZSA8PSAweDAwN2UpIHtcbiAgICAvLyBQcmludGFibGUgQVNDSUlcbiAgICBjb25zdCBjaGFyID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgcmV0dXJuIGNoYXIgPT09ICdcIicgPyBcIidcXFwiJ1wiIDogYFwiJHtjaGFyfVwiYDtcbiAgfSAvLyBVbmljb2RlIGNvZGUgcG9pbnRcblxuICByZXR1cm4gJ1UrJyArIGNvZGUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkucGFkU3RhcnQoNCwgJzAnKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgdG9rZW4gd2l0aCBsaW5lIGFuZCBjb2x1bW4gbG9jYXRpb24gaW5mb3JtYXRpb24uXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlVG9rZW4obGV4ZXIsIGtpbmQsIHN0YXJ0LCBlbmQsIHZhbHVlKSB7XG4gIGNvbnN0IGxpbmUgPSBsZXhlci5saW5lO1xuICBjb25zdCBjb2wgPSAxICsgc3RhcnQgLSBsZXhlci5saW5lU3RhcnQ7XG4gIHJldHVybiBuZXcgVG9rZW4oa2luZCwgc3RhcnQsIGVuZCwgbGluZSwgY29sLCB2YWx1ZSk7XG59XG4vKipcbiAqIEdldHMgdGhlIG5leHQgdG9rZW4gZnJvbSB0aGUgc291cmNlIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAqXG4gKiBUaGlzIHNraXBzIG92ZXIgd2hpdGVzcGFjZSB1bnRpbCBpdCBmaW5kcyB0aGUgbmV4dCBsZXhhYmxlIHRva2VuLCB0aGVuIGxleGVzXG4gKiBwdW5jdHVhdG9ycyBpbW1lZGlhdGVseSBvciBjYWxscyB0aGUgYXBwcm9wcmlhdGUgaGVscGVyIGZ1bmN0aW9uIGZvciBtb3JlXG4gKiBjb21wbGljYXRlZCB0b2tlbnMuXG4gKi9cblxuZnVuY3Rpb24gcmVhZE5leHRUb2tlbihsZXhlciwgc3RhcnQpIHtcbiAgY29uc3QgYm9keSA9IGxleGVyLnNvdXJjZS5ib2R5O1xuICBjb25zdCBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gIGxldCBwb3NpdGlvbiA9IHN0YXJ0O1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHlMZW5ndGgpIHtcbiAgICBjb25zdCBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTsgLy8gU291cmNlQ2hhcmFjdGVyXG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIC8vIElnbm9yZWQgOjpcbiAgICAgIC8vICAgLSBVbmljb2RlQk9NXG4gICAgICAvLyAgIC0gV2hpdGVTcGFjZVxuICAgICAgLy8gICAtIExpbmVUZXJtaW5hdG9yXG4gICAgICAvLyAgIC0gQ29tbWVudFxuICAgICAgLy8gICAtIENvbW1hXG4gICAgICAvL1xuICAgICAgLy8gVW5pY29kZUJPTSA6OiBcIkJ5dGUgT3JkZXIgTWFyayAoVStGRUZGKVwiXG4gICAgICAvL1xuICAgICAgLy8gV2hpdGVTcGFjZSA6OlxuICAgICAgLy8gICAtIFwiSG9yaXpvbnRhbCBUYWIgKFUrMDAwOSlcIlxuICAgICAgLy8gICAtIFwiU3BhY2UgKFUrMDAyMClcIlxuICAgICAgLy9cbiAgICAgIC8vIENvbW1hIDo6ICxcbiAgICAgIGNhc2UgMHhmZWZmOiAvLyA8Qk9NPlxuXG4gICAgICBjYXNlIDB4MDAwOTogLy8gXFx0XG5cbiAgICAgIGNhc2UgMHgwMDIwOiAvLyA8c3BhY2U+XG5cbiAgICAgIGNhc2UgMHgwMDJjOlxuICAgICAgICAvLyAsXG4gICAgICAgICsrcG9zaXRpb247XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgLy8gTGluZVRlcm1pbmF0b3IgOjpcbiAgICAgIC8vICAgLSBcIk5ldyBMaW5lIChVKzAwMEEpXCJcbiAgICAgIC8vICAgLSBcIkNhcnJpYWdlIFJldHVybiAoVSswMDBEKVwiIFtsb29rYWhlYWQgIT0gXCJOZXcgTGluZSAoVSswMDBBKVwiXVxuICAgICAgLy8gICAtIFwiQ2FycmlhZ2UgUmV0dXJuIChVKzAwMEQpXCIgXCJOZXcgTGluZSAoVSswMDBBKVwiXG5cbiAgICAgIGNhc2UgMHgwMDBhOlxuICAgICAgICAvLyBcXG5cbiAgICAgICAgKytwb3NpdGlvbjtcbiAgICAgICAgKytsZXhlci5saW5lO1xuICAgICAgICBsZXhlci5saW5lU3RhcnQgPSBwb3NpdGlvbjtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgMHgwMDBkOlxuICAgICAgICAvLyBcXHJcbiAgICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAweDAwMGEpIHtcbiAgICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrcG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICArK2xleGVyLmxpbmU7XG4gICAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIC8vIENvbW1lbnRcblxuICAgICAgY2FzZSAweDAwMjM6XG4gICAgICAgIC8vICNcbiAgICAgICAgcmV0dXJuIHJlYWRDb21tZW50KGxleGVyLCBwb3NpdGlvbik7XG4gICAgICAvLyBUb2tlbiA6OlxuICAgICAgLy8gICAtIFB1bmN0dWF0b3JcbiAgICAgIC8vICAgLSBOYW1lXG4gICAgICAvLyAgIC0gSW50VmFsdWVcbiAgICAgIC8vICAgLSBGbG9hdFZhbHVlXG4gICAgICAvLyAgIC0gU3RyaW5nVmFsdWVcbiAgICAgIC8vXG4gICAgICAvLyBQdW5jdHVhdG9yIDo6IG9uZSBvZiAhICQgJiAoICkgLi4uIDogPSBAIFsgXSB7IHwgfVxuXG4gICAgICBjYXNlIDB4MDAyMTpcbiAgICAgICAgLy8gIVxuICAgICAgICByZXR1cm4gY3JlYXRlVG9rZW4obGV4ZXIsIFRva2VuS2luZC5CQU5HLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwMjQ6XG4gICAgICAgIC8vICRcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuRE9MTEFSLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwMjY6XG4gICAgICAgIC8vICZcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuQU1QLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwMjg6XG4gICAgICAgIC8vIChcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuUEFSRU5fTCwgcG9zaXRpb24sIHBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGNhc2UgMHgwMDI5OlxuICAgICAgICAvLyApXG4gICAgICAgIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLlBBUkVOX1IsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDEpO1xuXG4gICAgICBjYXNlIDB4MDAyZTpcbiAgICAgICAgLy8gLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDB4MDAyZSAmJlxuICAgICAgICAgIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpID09PSAweDAwMmVcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuU1BSRUFELCBwb3NpdGlvbiwgcG9zaXRpb24gKyAzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDB4MDAzYTpcbiAgICAgICAgLy8gOlxuICAgICAgICByZXR1cm4gY3JlYXRlVG9rZW4obGV4ZXIsIFRva2VuS2luZC5DT0xPTiwgcG9zaXRpb24sIHBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGNhc2UgMHgwMDNkOlxuICAgICAgICAvLyA9XG4gICAgICAgIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLkVRVUFMUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGNhc2UgMHgwMDQwOlxuICAgICAgICAvLyBAXG4gICAgICAgIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLkFULCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwNWI6XG4gICAgICAgIC8vIFtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuQlJBQ0tFVF9MLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwNWQ6XG4gICAgICAgIC8vIF1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuQlJBQ0tFVF9SLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcblxuICAgICAgY2FzZSAweDAwN2I6XG4gICAgICAgIC8vIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuKGxleGVyLCBUb2tlbktpbmQuQlJBQ0VfTCwgcG9zaXRpb24sIHBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGNhc2UgMHgwMDdjOlxuICAgICAgICAvLyB8XG4gICAgICAgIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLlBJUEUsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDEpO1xuXG4gICAgICBjYXNlIDB4MDA3ZDpcbiAgICAgICAgLy8gfVxuICAgICAgICByZXR1cm4gY3JlYXRlVG9rZW4obGV4ZXIsIFRva2VuS2luZC5CUkFDRV9SLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAxKTtcbiAgICAgIC8vIFN0cmluZ1ZhbHVlXG5cbiAgICAgIGNhc2UgMHgwMDIyOlxuICAgICAgICAvLyBcIlxuICAgICAgICBpZiAoXG4gICAgICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDB4MDAyMiAmJlxuICAgICAgICAgIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpID09PSAweDAwMjJcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWRCbG9ja1N0cmluZyhsZXhlciwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlYWRTdHJpbmcobGV4ZXIsIHBvc2l0aW9uKTtcbiAgICB9IC8vIEludFZhbHVlIHwgRmxvYXRWYWx1ZSAoRGlnaXQgfCAtKVxuXG4gICAgaWYgKGlzRGlnaXQoY29kZSkgfHwgY29kZSA9PT0gMHgwMDJkKSB7XG4gICAgICByZXR1cm4gcmVhZE51bWJlcihsZXhlciwgcG9zaXRpb24sIGNvZGUpO1xuICAgIH0gLy8gTmFtZVxuXG4gICAgaWYgKGlzTmFtZVN0YXJ0KGNvZGUpKSB7XG4gICAgICByZXR1cm4gcmVhZE5hbWUobGV4ZXIsIHBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgIGxleGVyLnNvdXJjZSxcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgY29kZSA9PT0gMHgwMDI3XG4gICAgICAgID8gJ1VuZXhwZWN0ZWQgc2luZ2xlIHF1b3RlIGNoYXJhY3RlciAoXFwnKSwgZGlkIHlvdSBtZWFuIHRvIHVzZSBhIGRvdWJsZSBxdW90ZSAoXCIpPydcbiAgICAgICAgOiBpc1VuaWNvZGVTY2FsYXJWYWx1ZShjb2RlKSB8fCBpc1N1cHBsZW1lbnRhcnlDb2RlUG9pbnQoYm9keSwgcG9zaXRpb24pXG4gICAgICAgID8gYFVuZXhwZWN0ZWQgY2hhcmFjdGVyOiAke3ByaW50Q29kZVBvaW50QXQobGV4ZXIsIHBvc2l0aW9uKX0uYFxuICAgICAgICA6IGBJbnZhbGlkIGNoYXJhY3RlcjogJHtwcmludENvZGVQb2ludEF0KGxleGVyLCBwb3NpdGlvbil9LmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLkVPRiwgYm9keUxlbmd0aCwgYm9keUxlbmd0aCk7XG59XG4vKipcbiAqIFJlYWRzIGEgY29tbWVudCB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZS5cbiAqXG4gKiBgYGBcbiAqIENvbW1lbnQgOjogIyBDb21tZW50Q2hhciogW2xvb2thaGVhZCAhPSBDb21tZW50Q2hhcl1cbiAqXG4gKiBDb21tZW50Q2hhciA6OiBTb3VyY2VDaGFyYWN0ZXIgYnV0IG5vdCBMaW5lVGVybWluYXRvclxuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gcmVhZENvbW1lbnQobGV4ZXIsIHN0YXJ0KSB7XG4gIGNvbnN0IGJvZHkgPSBsZXhlci5zb3VyY2UuYm9keTtcbiAgY29uc3QgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICBsZXQgcG9zaXRpb24gPSBzdGFydCArIDE7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keUxlbmd0aCkge1xuICAgIGNvbnN0IGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pOyAvLyBMaW5lVGVybWluYXRvciAoXFxuIHwgXFxyKVxuXG4gICAgaWYgKGNvZGUgPT09IDB4MDAwYSB8fCBjb2RlID09PSAweDAwMGQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gLy8gU291cmNlQ2hhcmFjdGVyXG5cbiAgICBpZiAoaXNVbmljb2RlU2NhbGFyVmFsdWUoY29kZSkpIHtcbiAgICAgICsrcG9zaXRpb247XG4gICAgfSBlbHNlIGlmIChpc1N1cHBsZW1lbnRhcnlDb2RlUG9pbnQoYm9keSwgcG9zaXRpb24pKSB7XG4gICAgICBwb3NpdGlvbiArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlVG9rZW4oXG4gICAgbGV4ZXIsXG4gICAgVG9rZW5LaW5kLkNPTU1FTlQsXG4gICAgc3RhcnQsXG4gICAgcG9zaXRpb24sXG4gICAgYm9keS5zbGljZShzdGFydCArIDEsIHBvc2l0aW9uKSxcbiAgKTtcbn1cbi8qKlxuICogUmVhZHMgYSBudW1iZXIgdG9rZW4gZnJvbSB0aGUgc291cmNlIGZpbGUsIGVpdGhlciBhIEZsb2F0VmFsdWUgb3IgYW4gSW50VmFsdWVcbiAqIGRlcGVuZGluZyBvbiB3aGV0aGVyIGEgRnJhY3Rpb25hbFBhcnQgb3IgRXhwb25lbnRQYXJ0IGlzIGVuY291bnRlcmVkLlxuICpcbiAqIGBgYFxuICogSW50VmFsdWUgOjogSW50ZWdlclBhcnQgW2xvb2thaGVhZCAhPSB7RGlnaXQsIGAuYCwgTmFtZVN0YXJ0fV1cbiAqXG4gKiBJbnRlZ2VyUGFydCA6OlxuICogICAtIE5lZ2F0aXZlU2lnbj8gMFxuICogICAtIE5lZ2F0aXZlU2lnbj8gTm9uWmVyb0RpZ2l0IERpZ2l0KlxuICpcbiAqIE5lZ2F0aXZlU2lnbiA6OiAtXG4gKlxuICogTm9uWmVyb0RpZ2l0IDo6IERpZ2l0IGJ1dCBub3QgYDBgXG4gKlxuICogRmxvYXRWYWx1ZSA6OlxuICogICAtIEludGVnZXJQYXJ0IEZyYWN0aW9uYWxQYXJ0IEV4cG9uZW50UGFydCBbbG9va2FoZWFkICE9IHtEaWdpdCwgYC5gLCBOYW1lU3RhcnR9XVxuICogICAtIEludGVnZXJQYXJ0IEZyYWN0aW9uYWxQYXJ0IFtsb29rYWhlYWQgIT0ge0RpZ2l0LCBgLmAsIE5hbWVTdGFydH1dXG4gKiAgIC0gSW50ZWdlclBhcnQgRXhwb25lbnRQYXJ0IFtsb29rYWhlYWQgIT0ge0RpZ2l0LCBgLmAsIE5hbWVTdGFydH1dXG4gKlxuICogRnJhY3Rpb25hbFBhcnQgOjogLiBEaWdpdCtcbiAqXG4gKiBFeHBvbmVudFBhcnQgOjogRXhwb25lbnRJbmRpY2F0b3IgU2lnbj8gRGlnaXQrXG4gKlxuICogRXhwb25lbnRJbmRpY2F0b3IgOjogb25lIG9mIGBlYCBgRWBcbiAqXG4gKiBTaWduIDo6IG9uZSBvZiArIC1cbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uIHJlYWROdW1iZXIobGV4ZXIsIHN0YXJ0LCBmaXJzdENvZGUpIHtcbiAgY29uc3QgYm9keSA9IGxleGVyLnNvdXJjZS5ib2R5O1xuICBsZXQgcG9zaXRpb24gPSBzdGFydDtcbiAgbGV0IGNvZGUgPSBmaXJzdENvZGU7XG4gIGxldCBpc0Zsb2F0ID0gZmFsc2U7IC8vIE5lZ2F0aXZlU2lnbiAoLSlcblxuICBpZiAoY29kZSA9PT0gMHgwMDJkKSB7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgfSAvLyBaZXJvICgwKVxuXG4gIGlmIChjb2RlID09PSAweDAwMzApIHtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuXG4gICAgaWYgKGlzRGlnaXQoY29kZSkpIHtcbiAgICAgIHRocm93IHN5bnRheEVycm9yKFxuICAgICAgICBsZXhlci5zb3VyY2UsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBgSW52YWxpZCBudW1iZXIsIHVuZXhwZWN0ZWQgZGlnaXQgYWZ0ZXIgMDogJHtwcmludENvZGVQb2ludEF0KFxuICAgICAgICAgIGxleGVyLFxuICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICApfS5gLFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKGxleGVyLCBwb3NpdGlvbiwgY29kZSk7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gIH0gLy8gRnVsbCBzdG9wICguKVxuXG4gIGlmIChjb2RlID09PSAweDAwMmUpIHtcbiAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICAgIHBvc2l0aW9uID0gcmVhZERpZ2l0cyhsZXhlciwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9IC8vIEUgZVxuXG4gIGlmIChjb2RlID09PSAweDAwNDUgfHwgY29kZSA9PT0gMHgwMDY1KSB7XG4gICAgaXNGbG9hdCA9IHRydWU7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTsgLy8gKyAtXG5cbiAgICBpZiAoY29kZSA9PT0gMHgwMDJiIHx8IGNvZGUgPT09IDB4MDAyZCkge1xuICAgICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IHJlYWREaWdpdHMobGV4ZXIsIHBvc2l0aW9uLCBjb2RlKTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgfSAvLyBOdW1iZXJzIGNhbm5vdCBiZSBmb2xsb3dlZCBieSAuIG9yIE5hbWVTdGFydFxuXG4gIGlmIChjb2RlID09PSAweDAwMmUgfHwgaXNOYW1lU3RhcnQoY29kZSkpIHtcbiAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgIGxleGVyLnNvdXJjZSxcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgYEludmFsaWQgbnVtYmVyLCBleHBlY3RlZCBkaWdpdCBidXQgZ290OiAke3ByaW50Q29kZVBvaW50QXQoXG4gICAgICAgIGxleGVyLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICl9LmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUb2tlbihcbiAgICBsZXhlcixcbiAgICBpc0Zsb2F0ID8gVG9rZW5LaW5kLkZMT0FUIDogVG9rZW5LaW5kLklOVCxcbiAgICBzdGFydCxcbiAgICBwb3NpdGlvbixcbiAgICBib2R5LnNsaWNlKHN0YXJ0LCBwb3NpdGlvbiksXG4gICk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgc291cmNlIGFmdGVyIHJlYWRpbmcgb25lIG9yIG1vcmUgZGlnaXRzLlxuICovXG5cbmZ1bmN0aW9uIHJlYWREaWdpdHMobGV4ZXIsIHN0YXJ0LCBmaXJzdENvZGUpIHtcbiAgaWYgKCFpc0RpZ2l0KGZpcnN0Q29kZSkpIHtcbiAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgIGxleGVyLnNvdXJjZSxcbiAgICAgIHN0YXJ0LFxuICAgICAgYEludmFsaWQgbnVtYmVyLCBleHBlY3RlZCBkaWdpdCBidXQgZ290OiAke3ByaW50Q29kZVBvaW50QXQoXG4gICAgICAgIGxleGVyLFxuICAgICAgICBzdGFydCxcbiAgICAgICl9LmAsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGJvZHkgPSBsZXhlci5zb3VyY2UuYm9keTtcbiAgbGV0IHBvc2l0aW9uID0gc3RhcnQgKyAxOyAvLyArMSB0byBza2lwIGZpcnN0IGZpcnN0Q29kZVxuXG4gIHdoaWxlIChpc0RpZ2l0KGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbikpKSB7XG4gICAgKytwb3NpdGlvbjtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbjtcbn1cbi8qKlxuICogUmVhZHMgYSBzaW5nbGUtcXVvdGUgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIGBgYFxuICogU3RyaW5nVmFsdWUgOjpcbiAqICAgLSBgXCJcImAgW2xvb2thaGVhZCAhPSBgXCJgXVxuICogICAtIGBcImAgU3RyaW5nQ2hhcmFjdGVyKyBgXCJgXG4gKlxuICogU3RyaW5nQ2hhcmFjdGVyIDo6XG4gKiAgIC0gU291cmNlQ2hhcmFjdGVyIGJ1dCBub3QgYFwiYCBvciBgXFxgIG9yIExpbmVUZXJtaW5hdG9yXG4gKiAgIC0gYFxcdWAgRXNjYXBlZFVuaWNvZGVcbiAqICAgLSBgXFxgIEVzY2FwZWRDaGFyYWN0ZXJcbiAqXG4gKiBFc2NhcGVkVW5pY29kZSA6OlxuICogICAtIGB7YCBIZXhEaWdpdCsgYH1gXG4gKiAgIC0gSGV4RGlnaXQgSGV4RGlnaXQgSGV4RGlnaXQgSGV4RGlnaXRcbiAqXG4gKiBFc2NhcGVkQ2hhcmFjdGVyIDo6IG9uZSBvZiBgXCJgIGBcXGAgYC9gIGBiYCBgZmAgYG5gIGByYCBgdGBcbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uIHJlYWRTdHJpbmcobGV4ZXIsIHN0YXJ0KSB7XG4gIGNvbnN0IGJvZHkgPSBsZXhlci5zb3VyY2UuYm9keTtcbiAgY29uc3QgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICBsZXQgcG9zaXRpb24gPSBzdGFydCArIDE7XG4gIGxldCBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gIGxldCB2YWx1ZSA9ICcnO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHlMZW5ndGgpIHtcbiAgICBjb25zdCBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTsgLy8gQ2xvc2luZyBRdW90ZSAoXCIpXG5cbiAgICBpZiAoY29kZSA9PT0gMHgwMDIyKSB7XG4gICAgICB2YWx1ZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBjcmVhdGVUb2tlbihsZXhlciwgVG9rZW5LaW5kLlNUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMSwgdmFsdWUpO1xuICAgIH0gLy8gRXNjYXBlIFNlcXVlbmNlIChcXClcblxuICAgIGlmIChjb2RlID09PSAweDAwNWMpIHtcbiAgICAgIHZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgY29uc3QgZXNjYXBlID1cbiAgICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDB4MDA3NSAvLyB1XG4gICAgICAgICAgPyBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSA9PT0gMHgwMDdiIC8vIHtcbiAgICAgICAgICAgID8gcmVhZEVzY2FwZWRVbmljb2RlVmFyaWFibGVXaWR0aChsZXhlciwgcG9zaXRpb24pXG4gICAgICAgICAgICA6IHJlYWRFc2NhcGVkVW5pY29kZUZpeGVkV2lkdGgobGV4ZXIsIHBvc2l0aW9uKVxuICAgICAgICAgIDogcmVhZEVzY2FwZWRDaGFyYWN0ZXIobGV4ZXIsIHBvc2l0aW9uKTtcbiAgICAgIHZhbHVlICs9IGVzY2FwZS52YWx1ZTtcbiAgICAgIHBvc2l0aW9uICs9IGVzY2FwZS5zaXplO1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBMaW5lVGVybWluYXRvciAoXFxuIHwgXFxyKVxuXG4gICAgaWYgKGNvZGUgPT09IDB4MDAwYSB8fCBjb2RlID09PSAweDAwMGQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gLy8gU291cmNlQ2hhcmFjdGVyXG5cbiAgICBpZiAoaXNVbmljb2RlU2NhbGFyVmFsdWUoY29kZSkpIHtcbiAgICAgICsrcG9zaXRpb247XG4gICAgfSBlbHNlIGlmIChpc1N1cHBsZW1lbnRhcnlDb2RlUG9pbnQoYm9keSwgcG9zaXRpb24pKSB7XG4gICAgICBwb3NpdGlvbiArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgICAgbGV4ZXIuc291cmNlLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgYEludmFsaWQgY2hhcmFjdGVyIHdpdGhpbiBTdHJpbmc6ICR7cHJpbnRDb2RlUG9pbnRBdChcbiAgICAgICAgICBsZXhlcixcbiAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgKX0uYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3IobGV4ZXIuc291cmNlLCBwb3NpdGlvbiwgJ1VudGVybWluYXRlZCBzdHJpbmcuJyk7XG59IC8vIFRoZSBzdHJpbmcgdmFsdWUgYW5kIGxleGVkIHNpemUgb2YgYW4gZXNjYXBlIHNlcXVlbmNlLlxuXG5mdW5jdGlvbiByZWFkRXNjYXBlZFVuaWNvZGVWYXJpYWJsZVdpZHRoKGxleGVyLCBwb3NpdGlvbikge1xuICBjb25zdCBib2R5ID0gbGV4ZXIuc291cmNlLmJvZHk7XG4gIGxldCBwb2ludCA9IDA7XG4gIGxldCBzaXplID0gMzsgLy8gQ2Fubm90IGJlIGxhcmdlciB0aGFuIDEyIGNoYXJzIChcXHV7MDAwMDAwMDB9KS5cblxuICB3aGlsZSAoc2l6ZSA8IDEyKSB7XG4gICAgY29uc3QgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIHNpemUrKyk7IC8vIENsb3NpbmcgQnJhY2UgKH0pXG5cbiAgICBpZiAoY29kZSA9PT0gMHgwMDdkKSB7XG4gICAgICAvLyBNdXN0IGJlIGF0IGxlYXN0IDUgY2hhcnMgKFxcdXswfSkgYW5kIGVuY29kZSBhIFVuaWNvZGUgc2NhbGFyIHZhbHVlLlxuICAgICAgaWYgKHNpemUgPCA1IHx8ICFpc1VuaWNvZGVTY2FsYXJWYWx1ZShwb2ludCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBTdHJpbmcuZnJvbUNvZGVQb2ludChwb2ludCksXG4gICAgICAgIHNpemUsXG4gICAgICB9O1xuICAgIH0gLy8gQXBwZW5kIHRoaXMgaGV4IGRpZ2l0IHRvIHRoZSBjb2RlIHBvaW50LlxuXG4gICAgcG9pbnQgPSAocG9pbnQgPDwgNCkgfCByZWFkSGV4RGlnaXQoY29kZSk7XG5cbiAgICBpZiAocG9pbnQgPCAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICBsZXhlci5zb3VyY2UsXG4gICAgcG9zaXRpb24sXG4gICAgYEludmFsaWQgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2U6IFwiJHtib2R5LnNsaWNlKFxuICAgICAgcG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiArIHNpemUsXG4gICAgKX1cIi5gLFxuICApO1xufVxuXG5mdW5jdGlvbiByZWFkRXNjYXBlZFVuaWNvZGVGaXhlZFdpZHRoKGxleGVyLCBwb3NpdGlvbikge1xuICBjb25zdCBib2R5ID0gbGV4ZXIuc291cmNlLmJvZHk7XG4gIGNvbnN0IGNvZGUgPSByZWFkMTZCaXRIZXhDb2RlKGJvZHksIHBvc2l0aW9uICsgMik7XG5cbiAgaWYgKGlzVW5pY29kZVNjYWxhclZhbHVlKGNvZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKSxcbiAgICAgIHNpemU6IDYsXG4gICAgfTtcbiAgfSAvLyBHcmFwaFFMIGFsbG93cyBKU09OLXN0eWxlIHN1cnJvZ2F0ZSBwYWlyIGVzY2FwZSBzZXF1ZW5jZXMsIGJ1dCBvbmx5IHdoZW5cbiAgLy8gYSB2YWxpZCBwYWlyIGlzIGZvcm1lZC5cblxuICBpZiAoaXNMZWFkaW5nU3Vycm9nYXRlKGNvZGUpKSB7XG4gICAgLy8gXFx1XG4gICAgaWYgKFxuICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgNikgPT09IDB4MDA1YyAmJlxuICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgNykgPT09IDB4MDA3NVxuICAgICkge1xuICAgICAgY29uc3QgdHJhaWxpbmdDb2RlID0gcmVhZDE2Qml0SGV4Q29kZShib2R5LCBwb3NpdGlvbiArIDgpO1xuXG4gICAgICBpZiAoaXNUcmFpbGluZ1N1cnJvZ2F0ZSh0cmFpbGluZ0NvZGUpKSB7XG4gICAgICAgIC8vIEphdmFTY3JpcHQgZGVmaW5lcyBzdHJpbmdzIGFzIGEgc2VxdWVuY2Ugb2YgVVRGLTE2IGNvZGUgdW5pdHMgYW5kXG4gICAgICAgIC8vIGVuY29kZXMgVW5pY29kZSBjb2RlIHBvaW50cyBhYm92ZSBVK0ZGRkYgdXNpbmcgYSBzdXJyb2dhdGUgcGFpciBvZlxuICAgICAgICAvLyBjb2RlIHVuaXRzLiBTaW5jZSB0aGlzIGlzIGEgc3Vycm9nYXRlIHBhaXIgZXNjYXBlIHNlcXVlbmNlLCBqdXN0XG4gICAgICAgIC8vIGluY2x1ZGUgYm90aCBjb2RlcyBpbnRvIHRoZSBKYXZhU2NyaXB0IHN0cmluZyB2YWx1ZS4gSGFkIEphdmFTY3JpcHRcbiAgICAgICAgLy8gbm90IGJlZW4gaW50ZXJuYWxseSBiYXNlZCBvbiBVVEYtMTYsIHRoZW4gdGhpcyBzdXJyb2dhdGUgcGFpciB3b3VsZFxuICAgICAgICAvLyBiZSBkZWNvZGVkIHRvIHJldHJpZXZlIHRoZSBzdXBwbGVtZW50YXJ5IGNvZGUgcG9pbnQuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUsIHRyYWlsaW5nQ29kZSksXG4gICAgICAgICAgc2l6ZTogMTIsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3IoXG4gICAgbGV4ZXIuc291cmNlLFxuICAgIHBvc2l0aW9uLFxuICAgIGBJbnZhbGlkIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlOiBcIiR7Ym9keS5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyA2KX1cIi5gLFxuICApO1xufVxuLyoqXG4gKiBSZWFkcyBmb3VyIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgdGhlIHBvc2l0aXZlIGludGVnZXIgdGhhdCAxNmJpdFxuICogaGV4YWRlY2ltYWwgc3RyaW5nIHJlcHJlc2VudHMuIEZvciBleGFtcGxlLCBcIjAwMGZcIiB3aWxsIHJldHVybiAxNSwgYW5kIFwiZGVhZFwiXG4gKiB3aWxsIHJldHVybiA1NzAwNS5cbiAqXG4gKiBSZXR1cm5zIGEgbmVnYXRpdmUgbnVtYmVyIGlmIGFueSBjaGFyIHdhcyBub3QgYSB2YWxpZCBoZXhhZGVjaW1hbCBkaWdpdC5cbiAqL1xuXG5mdW5jdGlvbiByZWFkMTZCaXRIZXhDb2RlKGJvZHksIHBvc2l0aW9uKSB7XG4gIC8vIHJlYWRIZXhEaWdpdCgpIHJldHVybnMgLTEgb24gZXJyb3IuIE9SaW5nIGEgbmVnYXRpdmUgdmFsdWUgd2l0aCBhbnkgb3RoZXJcbiAgLy8gdmFsdWUgYWx3YXlzIHByb2R1Y2VzIGEgbmVnYXRpdmUgdmFsdWUuXG4gIHJldHVybiAoXG4gICAgKHJlYWRIZXhEaWdpdChib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSA8PCAxMikgfFxuICAgIChyZWFkSGV4RGlnaXQoYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDw8IDgpIHxcbiAgICAocmVhZEhleERpZ2l0KGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpKSA8PCA0KSB8XG4gICAgcmVhZEhleERpZ2l0KGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDMpKVxuICApO1xufVxuLyoqXG4gKiBSZWFkcyBhIGhleGFkZWNpbWFsIGNoYXJhY3RlciBhbmQgcmV0dXJucyBpdHMgcG9zaXRpdmUgaW50ZWdlciB2YWx1ZSAoMC0xNSkuXG4gKlxuICogJzAnIGJlY29tZXMgMCwgJzknIGJlY29tZXMgOVxuICogJ0EnIGJlY29tZXMgMTAsICdGJyBiZWNvbWVzIDE1XG4gKiAnYScgYmVjb21lcyAxMCwgJ2YnIGJlY29tZXMgMTVcbiAqXG4gKiBSZXR1cm5zIC0xIGlmIHRoZSBwcm92aWRlZCBjaGFyYWN0ZXIgY29kZSB3YXMgbm90IGEgdmFsaWQgaGV4YWRlY2ltYWwgZGlnaXQuXG4gKlxuICogSGV4RGlnaXQgOjogb25lIG9mXG4gKiAgIC0gYDBgIGAxYCBgMmAgYDNgIGA0YCBgNWAgYDZgIGA3YCBgOGAgYDlgXG4gKiAgIC0gYEFgIGBCYCBgQ2AgYERgIGBFYCBgRmBcbiAqICAgLSBgYWAgYGJgIGBjYCBgZGAgYGVgIGBmYFxuICovXG5cbmZ1bmN0aW9uIHJlYWRIZXhEaWdpdChjb2RlKSB7XG4gIHJldHVybiBjb2RlID49IDB4MDAzMCAmJiBjb2RlIDw9IDB4MDAzOSAvLyAwLTlcbiAgICA/IGNvZGUgLSAweDAwMzBcbiAgICA6IGNvZGUgPj0gMHgwMDQxICYmIGNvZGUgPD0gMHgwMDQ2IC8vIEEtRlxuICAgID8gY29kZSAtIDB4MDAzN1xuICAgIDogY29kZSA+PSAweDAwNjEgJiYgY29kZSA8PSAweDAwNjYgLy8gYS1mXG4gICAgPyBjb2RlIC0gMHgwMDU3XG4gICAgOiAtMTtcbn1cbi8qKlxuICogfCBFc2NhcGVkIENoYXJhY3RlciB8IENvZGUgUG9pbnQgfCBDaGFyYWN0ZXIgTmFtZSAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IGBcImAgICAgICAgICAgICAgICB8IFUrMDAyMiAgICAgfCBkb3VibGUgcXVvdGUgICAgICAgICAgICAgICAgIHxcbiAqIHwgYFxcYCAgICAgICAgICAgICAgIHwgVSswMDVDICAgICB8IHJldmVyc2Ugc29saWR1cyAoYmFjayBzbGFzaCkgfFxuICogfCBgL2AgICAgICAgICAgICAgICB8IFUrMDAyRiAgICAgfCBzb2xpZHVzIChmb3J3YXJkIHNsYXNoKSAgICAgIHxcbiAqIHwgYGJgICAgICAgICAgICAgICAgfCBVKzAwMDggICAgIHwgYmFja3NwYWNlICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGBmYCAgICAgICAgICAgICAgIHwgVSswMDBDICAgICB8IGZvcm0gZmVlZCAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgbmAgICAgICAgICAgICAgICB8IFUrMDAwQSAgICAgfCBsaW5lIGZlZWQgKG5ldyBsaW5lKSAgICAgICAgIHxcbiAqIHwgYHJgICAgICAgICAgICAgICAgfCBVKzAwMEQgICAgIHwgY2FycmlhZ2UgcmV0dXJuICAgICAgICAgICAgICB8XG4gKiB8IGB0YCAgICAgICAgICAgICAgIHwgVSswMDA5ICAgICB8IGhvcml6b250YWwgdGFiICAgICAgICAgICAgICAgfFxuICovXG5cbmZ1bmN0aW9uIHJlYWRFc2NhcGVkQ2hhcmFjdGVyKGxleGVyLCBwb3NpdGlvbikge1xuICBjb25zdCBib2R5ID0gbGV4ZXIuc291cmNlLmJvZHk7XG4gIGNvbnN0IGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKTtcblxuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDB4MDAyMjpcbiAgICAgIC8vIFwiXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogJ1xcdTAwMjInLFxuICAgICAgICBzaXplOiAyLFxuICAgICAgfTtcblxuICAgIGNhc2UgMHgwMDVjOlxuICAgICAgLy8gXFxcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiAnXFx1MDA1YycsXG4gICAgICAgIHNpemU6IDIsXG4gICAgICB9O1xuXG4gICAgY2FzZSAweDAwMmY6XG4gICAgICAvLyAvXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogJ1xcdTAwMmYnLFxuICAgICAgICBzaXplOiAyLFxuICAgICAgfTtcblxuICAgIGNhc2UgMHgwMDYyOlxuICAgICAgLy8gYlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6ICdcXHUwMDA4JyxcbiAgICAgICAgc2l6ZTogMixcbiAgICAgIH07XG5cbiAgICBjYXNlIDB4MDA2NjpcbiAgICAgIC8vIGZcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiAnXFx1MDAwYycsXG4gICAgICAgIHNpemU6IDIsXG4gICAgICB9O1xuXG4gICAgY2FzZSAweDAwNmU6XG4gICAgICAvLyBuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogJ1xcdTAwMGEnLFxuICAgICAgICBzaXplOiAyLFxuICAgICAgfTtcblxuICAgIGNhc2UgMHgwMDcyOlxuICAgICAgLy8gclxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6ICdcXHUwMDBkJyxcbiAgICAgICAgc2l6ZTogMixcbiAgICAgIH07XG5cbiAgICBjYXNlIDB4MDA3NDpcbiAgICAgIC8vIHRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiAnXFx1MDAwOScsXG4gICAgICAgIHNpemU6IDIsXG4gICAgICB9O1xuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3IoXG4gICAgbGV4ZXIuc291cmNlLFxuICAgIHBvc2l0aW9uLFxuICAgIGBJbnZhbGlkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2U6IFwiJHtib2R5LnNsaWNlKFxuICAgICAgcG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiArIDIsXG4gICAgKX1cIi5gLFxuICApO1xufVxuLyoqXG4gKiBSZWFkcyBhIGJsb2NrIHN0cmluZyB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZS5cbiAqXG4gKiBgYGBcbiAqIFN0cmluZ1ZhbHVlIDo6XG4gKiAgIC0gYFwiXCJcImAgQmxvY2tTdHJpbmdDaGFyYWN0ZXIqIGBcIlwiXCJgXG4gKlxuICogQmxvY2tTdHJpbmdDaGFyYWN0ZXIgOjpcbiAqICAgLSBTb3VyY2VDaGFyYWN0ZXIgYnV0IG5vdCBgXCJcIlwiYCBvciBgXFxcIlwiXCJgXG4gKiAgIC0gYFxcXCJcIlwiYFxuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gcmVhZEJsb2NrU3RyaW5nKGxleGVyLCBzdGFydCkge1xuICBjb25zdCBib2R5ID0gbGV4ZXIuc291cmNlLmJvZHk7XG4gIGNvbnN0IGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgbGV0IGxpbmVTdGFydCA9IGxleGVyLmxpbmVTdGFydDtcbiAgbGV0IHBvc2l0aW9uID0gc3RhcnQgKyAzO1xuICBsZXQgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICBsZXQgY3VycmVudExpbmUgPSAnJztcbiAgY29uc3QgYmxvY2tMaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHlMZW5ndGgpIHtcbiAgICBjb25zdCBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTsgLy8gQ2xvc2luZyBUcmlwbGUtUXVvdGUgKFwiXCJcIilcblxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IDB4MDAyMiAmJlxuICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDB4MDAyMiAmJlxuICAgICAgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMikgPT09IDB4MDAyMlxuICAgICkge1xuICAgICAgY3VycmVudExpbmUgKz0gYm9keS5zbGljZShjaHVua1N0YXJ0LCBwb3NpdGlvbik7XG4gICAgICBibG9ja0xpbmVzLnB1c2goY3VycmVudExpbmUpO1xuICAgICAgY29uc3QgdG9rZW4gPSBjcmVhdGVUb2tlbihcbiAgICAgICAgbGV4ZXIsXG4gICAgICAgIFRva2VuS2luZC5CTE9DS19TVFJJTkcsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBwb3NpdGlvbiArIDMsIC8vIFJldHVybiBhIHN0cmluZyBvZiB0aGUgbGluZXMgam9pbmVkIHdpdGggVSswMDBBLlxuICAgICAgICBkZWRlbnRCbG9ja1N0cmluZ0xpbmVzKGJsb2NrTGluZXMpLmpvaW4oJ1xcbicpLFxuICAgICAgKTtcbiAgICAgIGxleGVyLmxpbmUgKz0gYmxvY2tMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH0gLy8gRXNjYXBlZCBUcmlwbGUtUXVvdGUgKFxcXCJcIlwiKVxuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gMHgwMDVjICYmXG4gICAgICBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA9PT0gMHgwMDIyICYmXG4gICAgICBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSA9PT0gMHgwMDIyICYmXG4gICAgICBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAzKSA9PT0gMHgwMDIyXG4gICAgKSB7XG4gICAgICBjdXJyZW50TGluZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uKTtcbiAgICAgIGNodW5rU3RhcnQgPSBwb3NpdGlvbiArIDE7IC8vIHNraXAgb25seSBzbGFzaFxuXG4gICAgICBwb3NpdGlvbiArPSA0O1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBMaW5lVGVybWluYXRvclxuXG4gICAgaWYgKGNvZGUgPT09IDB4MDAwYSB8fCBjb2RlID09PSAweDAwMGQpIHtcbiAgICAgIGN1cnJlbnRMaW5lICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgYmxvY2tMaW5lcy5wdXNoKGN1cnJlbnRMaW5lKTtcblxuICAgICAgaWYgKGNvZGUgPT09IDB4MDAwZCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA9PT0gMHgwMDBhKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICArK3Bvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50TGluZSA9ICcnO1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgICAgbGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIFNvdXJjZUNoYXJhY3RlclxuXG4gICAgaWYgKGlzVW5pY29kZVNjYWxhclZhbHVlKGNvZGUpKSB7XG4gICAgICArK3Bvc2l0aW9uO1xuICAgIH0gZWxzZSBpZiAoaXNTdXBwbGVtZW50YXJ5Q29kZVBvaW50KGJvZHksIHBvc2l0aW9uKSkge1xuICAgICAgcG9zaXRpb24gKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3IoXG4gICAgICAgIGxleGVyLnNvdXJjZSxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGBJbnZhbGlkIGNoYXJhY3RlciB3aXRoaW4gU3RyaW5nOiAke3ByaW50Q29kZVBvaW50QXQoXG4gICAgICAgICAgbGV4ZXIsXG4gICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICl9LmAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IHN5bnRheEVycm9yKGxleGVyLnNvdXJjZSwgcG9zaXRpb24sICdVbnRlcm1pbmF0ZWQgc3RyaW5nLicpO1xufVxuLyoqXG4gKiBSZWFkcyBhbiBhbHBoYW51bWVyaWMgKyB1bmRlcnNjb3JlIG5hbWUgZnJvbSB0aGUgc291cmNlLlxuICpcbiAqIGBgYFxuICogTmFtZSA6OlxuICogICAtIE5hbWVTdGFydCBOYW1lQ29udGludWUqIFtsb29rYWhlYWQgIT0gTmFtZUNvbnRpbnVlXVxuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gcmVhZE5hbWUobGV4ZXIsIHN0YXJ0KSB7XG4gIGNvbnN0IGJvZHkgPSBsZXhlci5zb3VyY2UuYm9keTtcbiAgY29uc3QgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICBsZXQgcG9zaXRpb24gPSBzdGFydCArIDE7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keUxlbmd0aCkge1xuICAgIGNvbnN0IGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuXG4gICAgaWYgKGlzTmFtZUNvbnRpbnVlKGNvZGUpKSB7XG4gICAgICArK3Bvc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlVG9rZW4oXG4gICAgbGV4ZXIsXG4gICAgVG9rZW5LaW5kLk5BTUUsXG4gICAgc3RhcnQsXG4gICAgcG9zaXRpb24sXG4gICAgYm9keS5zbGljZShzdGFydCwgcG9zaXRpb24pLFxuICApO1xufVxuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vanN1dGlscy9pbnZhcmlhbnQubWpzJztcbmNvbnN0IExpbmVSZWdFeHAgPSAvXFxyXFxufFtcXG5cXHJdL2c7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIFNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIFRha2VzIGEgU291cmNlIGFuZCBhIFVURi04IGNoYXJhY3RlciBvZmZzZXQsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBsaW5lIGFuZCBjb2x1bW4gYXMgYSBTb3VyY2VMb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uKHNvdXJjZSwgcG9zaXRpb24pIHtcbiAgbGV0IGxhc3RMaW5lU3RhcnQgPSAwO1xuICBsZXQgbGluZSA9IDE7XG5cbiAgZm9yIChjb25zdCBtYXRjaCBvZiBzb3VyY2UuYm9keS5tYXRjaEFsbChMaW5lUmVnRXhwKSkge1xuICAgIHR5cGVvZiBtYXRjaC5pbmRleCA9PT0gJ251bWJlcicgfHwgaW52YXJpYW50KGZhbHNlKTtcblxuICAgIGlmIChtYXRjaC5pbmRleCA+PSBwb3NpdGlvbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGFzdExpbmVTdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGxpbmUgKz0gMTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZSxcbiAgICBjb2x1bW46IHBvc2l0aW9uICsgMSAtIGxhc3RMaW5lU3RhcnQsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBzeW50YXhFcnJvciB9IGZyb20gJy4uL2Vycm9yL3N5bnRheEVycm9yLm1qcyc7XG5pbXBvcnQgeyBMb2NhdGlvbiwgT3BlcmF0aW9uVHlwZU5vZGUgfSBmcm9tICcuL2FzdC5tanMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tICcuL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi9raW5kcy5tanMnO1xuaW1wb3J0IHsgaXNQdW5jdHVhdG9yVG9rZW5LaW5kLCBMZXhlciB9IGZyb20gJy4vbGV4ZXIubWpzJztcbmltcG9ydCB7IGlzU291cmNlLCBTb3VyY2UgfSBmcm9tICcuL3NvdXJjZS5tanMnO1xuaW1wb3J0IHsgVG9rZW5LaW5kIH0gZnJvbSAnLi90b2tlbktpbmQubWpzJztcbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIHRvIGNvbnRyb2wgcGFyc2VyIGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBHaXZlbiBhIEdyYXBoUUwgc291cmNlLCBwYXJzZXMgaXQgaW50byBhIERvY3VtZW50LlxuICogVGhyb3dzIEdyYXBoUUxFcnJvciBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0aW9ucyk7XG4gIHJldHVybiBwYXJzZXIucGFyc2VEb2N1bWVudCgpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBjb250YWluaW5nIGEgR3JhcGhRTCB2YWx1ZSAoZXguIGBbNDJdYCksIHBhcnNlIHRoZSBBU1QgZm9yXG4gKiB0aGF0IHZhbHVlLlxuICogVGhyb3dzIEdyYXBoUUxFcnJvciBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB3aXRoaW4gdG9vbHMgdGhhdCBvcGVyYXRlIHVwb24gR3JhcGhRTCBWYWx1ZXMgZGlyZWN0bHkgYW5kXG4gKiBpbiBpc29sYXRpb24gb2YgY29tcGxldGUgR3JhcGhRTCBkb2N1bWVudHMuXG4gKlxuICogQ29uc2lkZXIgcHJvdmlkaW5nIHRoZSByZXN1bHRzIHRvIHRoZSB1dGlsaXR5IGZ1bmN0aW9uOiB2YWx1ZUZyb21BU1QoKS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VWYWx1ZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihzb3VyY2UsIG9wdGlvbnMpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLlNPRik7XG4gIGNvbnN0IHZhbHVlID0gcGFyc2VyLnBhcnNlVmFsdWVMaXRlcmFsKGZhbHNlKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKFRva2VuS2luZC5FT0YpO1xuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFNpbWlsYXIgdG8gcGFyc2VWYWx1ZSgpLCBidXQgcmFpc2VzIGEgcGFyc2UgZXJyb3IgaWYgaXQgZW5jb3VudGVycyBhXG4gKiB2YXJpYWJsZS4gVGhlIHJldHVybiB0eXBlIHdpbGwgYmUgYSBjb25zdGFudCB2YWx1ZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb25zdFZhbHVlKHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0aW9ucyk7XG4gIHBhcnNlci5leHBlY3RUb2tlbihUb2tlbktpbmQuU09GKTtcbiAgY29uc3QgdmFsdWUgPSBwYXJzZXIucGFyc2VDb25zdFZhbHVlTGl0ZXJhbCgpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkVPRik7XG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgY29udGFpbmluZyBhIEdyYXBoUUwgVHlwZSAoZXguIGBbSW50IV1gKSwgcGFyc2UgdGhlIEFTVCBmb3JcbiAqIHRoYXQgdHlwZS5cbiAqIFRocm93cyBHcmFwaFFMRXJyb3IgaWYgYSBzeW50YXggZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2l0aGluIHRvb2xzIHRoYXQgb3BlcmF0ZSB1cG9uIEdyYXBoUUwgVHlwZXMgZGlyZWN0bHkgYW5kXG4gKiBpbiBpc29sYXRpb24gb2YgY29tcGxldGUgR3JhcGhRTCBkb2N1bWVudHMuXG4gKlxuICogQ29uc2lkZXIgcHJvdmlkaW5nIHRoZSByZXN1bHRzIHRvIHRoZSB1dGlsaXR5IGZ1bmN0aW9uOiB0eXBlRnJvbUFTVCgpLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVR5cGUoc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIoc291cmNlLCBvcHRpb25zKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKFRva2VuS2luZC5TT0YpO1xuICBjb25zdCB0eXBlID0gcGFyc2VyLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkVPRik7XG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGV4cG9ydGVkIG9ubHkgdG8gYXNzaXN0IHBlb3BsZSBpbiBpbXBsZW1lbnRpbmcgdGhlaXIgb3duIHBhcnNlcnNcbiAqIHdpdGhvdXQgZHVwbGljYXRpbmcgdG9vIG11Y2ggY29kZSBhbmQgc2hvdWxkIGJlIHVzZWQgb25seSBhcyBsYXN0IHJlc29ydCBmb3IgY2FzZXNcbiAqIHN1Y2ggYXMgZXhwZXJpbWVudGFsIHN5bnRheCBvciBpZiBjZXJ0YWluIGZlYXR1cmVzIGNvdWxkIG5vdCBiZSBjb250cmlidXRlZCB1cHN0cmVhbS5cbiAqXG4gKiBJdCBpcyBzdGlsbCBwYXJ0IG9mIHRoZSBpbnRlcm5hbCBBUEkgYW5kIGlzIHZlcnNpb25lZCwgc28gYW55IGNoYW5nZXMgdG8gaXQgYXJlIG5ldmVyXG4gKiBjb25zaWRlcmVkIGJyZWFraW5nIGNoYW5nZXMuIElmIHlvdSBzdGlsbCBuZWVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlXG4gKiBsaWJyYXJ5LCBwbGVhc2UgdXNlIHRoZSBgdmVyc2lvbkluZm9gIHZhcmlhYmxlIGZvciB2ZXJzaW9uIGRldGVjdGlvbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgY2xhc3MgUGFyc2VyIHtcbiAgY29uc3RydWN0b3Ioc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzb3VyY2VPYmogPSBpc1NvdXJjZShzb3VyY2UpID8gc291cmNlIDogbmV3IFNvdXJjZShzb3VyY2UpO1xuICAgIHRoaXMuX2xleGVyID0gbmV3IExleGVyKHNvdXJjZU9iaik7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5fdG9rZW5Db3VudGVyID0gMDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgYSBuYW1lIGxleCB0b2tlbiBpbnRvIGEgbmFtZSBwYXJzZSBub2RlLlxuICAgKi9cblxuICBwYXJzZU5hbWUoKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5OQU1FKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHRva2VuLCB7XG4gICAgICBraW5kOiBLaW5kLk5BTUUsXG4gICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgfSk7XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRG9jdW1lbnQgc2VjdGlvbi5cblxuICAvKipcbiAgICogRG9jdW1lbnQgOiBEZWZpbml0aW9uK1xuICAgKi9cblxuICBwYXJzZURvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGUodGhpcy5fbGV4ZXIudG9rZW4sIHtcbiAgICAgIGtpbmQ6IEtpbmQuRE9DVU1FTlQsXG4gICAgICBkZWZpbml0aW9uczogdGhpcy5tYW55KFxuICAgICAgICBUb2tlbktpbmQuU09GLFxuICAgICAgICB0aGlzLnBhcnNlRGVmaW5pdGlvbixcbiAgICAgICAgVG9rZW5LaW5kLkVPRixcbiAgICAgICksXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIERlZmluaXRpb24gOlxuICAgKiAgIC0gRXhlY3V0YWJsZURlZmluaXRpb25cbiAgICogICAtIFR5cGVTeXN0ZW1EZWZpbml0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRXh0ZW5zaW9uXG4gICAqXG4gICAqIEV4ZWN1dGFibGVEZWZpbml0aW9uIDpcbiAgICogICAtIE9wZXJhdGlvbkRlZmluaXRpb25cbiAgICogICAtIEZyYWdtZW50RGVmaW5pdGlvblxuICAgKlxuICAgKiBUeXBlU3lzdGVtRGVmaW5pdGlvbiA6XG4gICAqICAgLSBTY2hlbWFEZWZpbml0aW9uXG4gICAqICAgLSBUeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gRGlyZWN0aXZlRGVmaW5pdGlvblxuICAgKlxuICAgKiBUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBTY2FsYXJUeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gT2JqZWN0VHlwZURlZmluaXRpb25cbiAgICogICAtIEludGVyZmFjZVR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBVbmlvblR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBFbnVtVHlwZURlZmluaXRpb25cbiAgICogICAtIElucHV0T2JqZWN0VHlwZURlZmluaXRpb25cbiAgICovXG5cbiAgcGFyc2VEZWZpbml0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhdGlvbkRlZmluaXRpb24oKTtcbiAgICB9IC8vIE1hbnkgZGVmaW5pdGlvbnMgYmVnaW4gd2l0aCBhIGRlc2NyaXB0aW9uIGFuZCByZXF1aXJlIGEgbG9va2FoZWFkLlxuXG4gICAgY29uc3QgaGFzRGVzY3JpcHRpb24gPSB0aGlzLnBlZWtEZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IGtleXdvcmRUb2tlbiA9IGhhc0Rlc2NyaXB0aW9uXG4gICAgICA/IHRoaXMuX2xleGVyLmxvb2thaGVhZCgpXG4gICAgICA6IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKGtleXdvcmRUb2tlbi5raW5kID09PSBUb2tlbktpbmQuTkFNRSkge1xuICAgICAgc3dpdGNoIChrZXl3b3JkVG9rZW4udmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc2NoZW1hJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjaGVtYURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdFR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW50ZXJmYWNlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAndW5pb24nOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVW5pb25UeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2VudW0nOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRW51bVR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2RpcmVjdGl2ZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VEaXJlY3RpdmVEZWZpbml0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNEZXNjcmlwdGlvbikge1xuICAgICAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgICAgICB0aGlzLl9sZXhlci5zb3VyY2UsXG4gICAgICAgICAgdGhpcy5fbGV4ZXIudG9rZW4uc3RhcnQsXG4gICAgICAgICAgJ1VuZXhwZWN0ZWQgZGVzY3JpcHRpb24sIGRlc2NyaXB0aW9ucyBhcmUgc3VwcG9ydGVkIG9ubHkgb24gdHlwZSBkZWZpbml0aW9ucy4nLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGtleXdvcmRUb2tlbi52YWx1ZSkge1xuICAgICAgICBjYXNlICdxdWVyeSc6XG4gICAgICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhdGlvbkRlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdmcmFnbWVudCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGcmFnbWVudERlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdleHRlbmQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHlwZVN5c3RlbUV4dGVuc2lvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChrZXl3b3JkVG9rZW4pO1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIE9wZXJhdGlvbnMgc2VjdGlvbi5cblxuICAvKipcbiAgICogT3BlcmF0aW9uRGVmaW5pdGlvbiA6XG4gICAqICAtIFNlbGVjdGlvblNldFxuICAgKiAgLSBPcGVyYXRpb25UeXBlIE5hbWU/IFZhcmlhYmxlRGVmaW5pdGlvbnM/IERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICAgKi9cblxuICBwYXJzZU9wZXJhdGlvbkRlZmluaXRpb24oKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICAgIG9wZXJhdGlvbjogT3BlcmF0aW9uVHlwZU5vZGUuUVVFUlksXG4gICAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogW10sXG4gICAgICAgIGRpcmVjdGl2ZXM6IFtdLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMucGFyc2VPcGVyYXRpb25UeXBlKCk7XG4gICAgbGV0IG5hbWU7XG5cbiAgICBpZiAodGhpcy5wZWVrKFRva2VuS2luZC5OQU1FKSkge1xuICAgICAgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5PUEVSQVRJT05fREVGSU5JVElPTixcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIG5hbWUsXG4gICAgICB2YXJpYWJsZURlZmluaXRpb25zOiB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9ucygpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZXJhdGlvblR5cGUgOiBvbmUgb2YgcXVlcnkgbXV0YXRpb24gc3Vic2NyaXB0aW9uXG4gICAqL1xuXG4gIHBhcnNlT3BlcmF0aW9uVHlwZSgpIHtcbiAgICBjb25zdCBvcGVyYXRpb25Ub2tlbiA9IHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLk5BTUUpO1xuXG4gICAgc3dpdGNoIChvcGVyYXRpb25Ub2tlbi52YWx1ZSkge1xuICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgICByZXR1cm4gT3BlcmF0aW9uVHlwZU5vZGUuUVVFUlk7XG5cbiAgICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgICAgcmV0dXJuIE9wZXJhdGlvblR5cGVOb2RlLk1VVEFUSU9OO1xuXG4gICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgICByZXR1cm4gT3BlcmF0aW9uVHlwZU5vZGUuU1VCU0NSSVBUSU9OO1xuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChvcGVyYXRpb25Ub2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlhYmxlRGVmaW5pdGlvbnMgOiAoIFZhcmlhYmxlRGVmaW5pdGlvbisgKVxuICAgKi9cblxuICBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KFxuICAgICAgVG9rZW5LaW5kLlBBUkVOX0wsXG4gICAgICB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9uLFxuICAgICAgVG9rZW5LaW5kLlBBUkVOX1IsXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogVmFyaWFibGVEZWZpbml0aW9uIDogVmFyaWFibGUgOiBUeXBlIERlZmF1bHRWYWx1ZT8gRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuXG4gIHBhcnNlVmFyaWFibGVEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGUodGhpcy5fbGV4ZXIudG9rZW4sIHtcbiAgICAgIGtpbmQ6IEtpbmQuVkFSSUFCTEVfREVGSU5JVElPTixcbiAgICAgIHZhcmlhYmxlOiB0aGlzLnBhcnNlVmFyaWFibGUoKSxcbiAgICAgIHR5cGU6ICh0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTiksIHRoaXMucGFyc2VUeXBlUmVmZXJlbmNlKCkpLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkVRVUFMUylcbiAgICAgICAgPyB0aGlzLnBhcnNlQ29uc3RWYWx1ZUxpdGVyYWwoKVxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKSxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVmFyaWFibGUgOiAkIE5hbWVcbiAgICovXG5cbiAgcGFyc2VWYXJpYWJsZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkRPTExBUik7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5WQVJJQUJMRSxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBTZWxlY3Rpb25TZXQgOiB7IFNlbGVjdGlvbisgfVxuICAgKiBgYGBcbiAgICovXG5cbiAgcGFyc2VTZWxlY3Rpb25TZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZSh0aGlzLl9sZXhlci50b2tlbiwge1xuICAgICAga2luZDogS2luZC5TRUxFQ1RJT05fU0VULFxuICAgICAgc2VsZWN0aW9uczogdGhpcy5tYW55KFxuICAgICAgICBUb2tlbktpbmQuQlJBQ0VfTCxcbiAgICAgICAgdGhpcy5wYXJzZVNlbGVjdGlvbixcbiAgICAgICAgVG9rZW5LaW5kLkJSQUNFX1IsXG4gICAgICApLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3Rpb24gOlxuICAgKiAgIC0gRmllbGRcbiAgICogICAtIEZyYWdtZW50U3ByZWFkXG4gICAqICAgLSBJbmxpbmVGcmFnbWVudFxuICAgKi9cblxuICBwYXJzZVNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wZWVrKFRva2VuS2luZC5TUFJFQUQpXG4gICAgICA/IHRoaXMucGFyc2VGcmFnbWVudCgpXG4gICAgICA6IHRoaXMucGFyc2VGaWVsZCgpO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZCA6IEFsaWFzPyBOYW1lIEFyZ3VtZW50cz8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0P1xuICAgKlxuICAgKiBBbGlhcyA6IE5hbWUgOlxuICAgKi9cblxuICBwYXJzZUZpZWxkKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgY29uc3QgbmFtZU9yQWxpYXMgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGxldCBhbGlhcztcbiAgICBsZXQgbmFtZTtcblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkNPTE9OKSkge1xuICAgICAgYWxpYXMgPSBuYW1lT3JBbGlhcztcbiAgICAgIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZU9yQWxpYXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5GSUVMRCxcbiAgICAgIGFsaWFzLFxuICAgICAgbmFtZSxcbiAgICAgIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cyhmYWxzZSksXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGVlayhUb2tlbktpbmQuQlJBQ0VfTClcbiAgICAgICAgPyB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KClcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFyZ3VtZW50c1tDb25zdF0gOiAoIEFyZ3VtZW50Wz9Db25zdF0rIClcbiAgICovXG5cbiAgcGFyc2VBcmd1bWVudHMoaXNDb25zdCkge1xuICAgIGNvbnN0IGl0ZW0gPSBpc0NvbnN0ID8gdGhpcy5wYXJzZUNvbnN0QXJndW1lbnQgOiB0aGlzLnBhcnNlQXJndW1lbnQ7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KFRva2VuS2luZC5QQVJFTl9MLCBpdGVtLCBUb2tlbktpbmQuUEFSRU5fUik7XG4gIH1cbiAgLyoqXG4gICAqIEFyZ3VtZW50W0NvbnN0XSA6IE5hbWUgOiBWYWx1ZVs/Q29uc3RdXG4gICAqL1xuXG4gIHBhcnNlQXJndW1lbnQoaXNDb25zdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTik7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5BUkdVTUVOVCxcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSxcbiAgICB9KTtcbiAgfVxuXG4gIHBhcnNlQ29uc3RBcmd1bWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUFyZ3VtZW50KHRydWUpO1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIEZyYWdtZW50cyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBDb3JyZXNwb25kcyB0byBib3RoIEZyYWdtZW50U3ByZWFkIGFuZCBJbmxpbmVGcmFnbWVudCBpbiB0aGUgc3BlYy5cbiAgICpcbiAgICogRnJhZ21lbnRTcHJlYWQgOiAuLi4gRnJhZ21lbnROYW1lIERpcmVjdGl2ZXM/XG4gICAqXG4gICAqIElubGluZUZyYWdtZW50IDogLi4uIFR5cGVDb25kaXRpb24/IERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICAgKi9cblxuICBwYXJzZUZyYWdtZW50KCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuU1BSRUFEKTtcbiAgICBjb25zdCBoYXNUeXBlQ29uZGl0aW9uID0gdGhpcy5leHBlY3RPcHRpb25hbEtleXdvcmQoJ29uJyk7XG5cbiAgICBpZiAoIWhhc1R5cGVDb25kaXRpb24gJiYgdGhpcy5wZWVrKFRva2VuS2luZC5OQU1FKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAgICBraW5kOiBLaW5kLkZSQUdNRU5UX1NQUkVBRCxcbiAgICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLklOTElORV9GUkFHTUVOVCxcbiAgICAgIHR5cGVDb25kaXRpb246IGhhc1R5cGVDb25kaXRpb24gPyB0aGlzLnBhcnNlTmFtZWRUeXBlKCkgOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRnJhZ21lbnREZWZpbml0aW9uIDpcbiAgICogICAtIGZyYWdtZW50IEZyYWdtZW50TmFtZSBvbiBUeXBlQ29uZGl0aW9uIERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICAgKlxuICAgKiBUeXBlQ29uZGl0aW9uIDogTmFtZWRUeXBlXG4gICAqL1xuXG4gIHBhcnNlRnJhZ21lbnREZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmcmFnbWVudCcpOyAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgZGVmaW5pbmcgdmFyaWFibGVzIHdpdGhpbiBmcmFnbWVudHMgY2hhbmdlc1xuICAgIC8vIHRoZSBncmFtbWFyIG9mIEZyYWdtZW50RGVmaW5pdGlvbjpcbiAgICAvLyAgIC0gZnJhZ21lbnQgRnJhZ21lbnROYW1lIFZhcmlhYmxlRGVmaW5pdGlvbnM/IG9uIFR5cGVDb25kaXRpb24gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5hbGxvd0xlZ2FjeUZyYWdtZW50VmFyaWFibGVzID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTixcbiAgICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgICB2YXJpYWJsZURlZmluaXRpb25zOiB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9ucygpLFxuICAgICAgICB0eXBlQ29uZGl0aW9uOiAodGhpcy5leHBlY3RLZXl3b3JkKCdvbicpLCB0aGlzLnBhcnNlTmFtZWRUeXBlKCkpLFxuICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgdHlwZUNvbmRpdGlvbjogKHRoaXMuZXhwZWN0S2V5d29yZCgnb24nKSwgdGhpcy5wYXJzZU5hbWVkVHlwZSgpKSxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBGcmFnbWVudE5hbWUgOiBOYW1lIGJ1dCBub3QgYG9uYFxuICAgKi9cblxuICBwYXJzZUZyYWdtZW50TmFtZSgpIHtcbiAgICBpZiAodGhpcy5fbGV4ZXIudG9rZW4udmFsdWUgPT09ICdvbicpIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlTmFtZSgpO1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIFZhbHVlcyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBWYWx1ZVtDb25zdF0gOlxuICAgKiAgIC0gW35Db25zdF0gVmFyaWFibGVcbiAgICogICAtIEludFZhbHVlXG4gICAqICAgLSBGbG9hdFZhbHVlXG4gICAqICAgLSBTdHJpbmdWYWx1ZVxuICAgKiAgIC0gQm9vbGVhblZhbHVlXG4gICAqICAgLSBOdWxsVmFsdWVcbiAgICogICAtIEVudW1WYWx1ZVxuICAgKiAgIC0gTGlzdFZhbHVlWz9Db25zdF1cbiAgICogICAtIE9iamVjdFZhbHVlWz9Db25zdF1cbiAgICpcbiAgICogQm9vbGVhblZhbHVlIDogb25lIG9mIGB0cnVlYCBgZmFsc2VgXG4gICAqXG4gICAqIE51bGxWYWx1ZSA6IGBudWxsYFxuICAgKlxuICAgKiBFbnVtVmFsdWUgOiBOYW1lIGJ1dCBub3QgYHRydWVgLCBgZmFsc2VgIG9yIGBudWxsYFxuICAgKi9cblxuICBwYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSB7XG4gICAgY29uc3QgdG9rZW4gPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIHN3aXRjaCAodG9rZW4ua2luZCkge1xuICAgICAgY2FzZSBUb2tlbktpbmQuQlJBQ0tFVF9MOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpc3QoaXNDb25zdCk7XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLkJSQUNFX0w6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqZWN0KGlzQ29uc3QpO1xuXG4gICAgICBjYXNlIFRva2VuS2luZC5JTlQ6XG4gICAgICAgIHRoaXMuYWR2YW5jZUxleGVyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUodG9rZW4sIHtcbiAgICAgICAgICBraW5kOiBLaW5kLklOVCxcbiAgICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlIFRva2VuS2luZC5GTE9BVDpcbiAgICAgICAgdGhpcy5hZHZhbmNlTGV4ZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZSh0b2tlbiwge1xuICAgICAgICAgIGtpbmQ6IEtpbmQuRkxPQVQsXG4gICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBUb2tlbktpbmQuU1RSSU5HOlxuICAgICAgY2FzZSBUb2tlbktpbmQuQkxPQ0tfU1RSSU5HOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZ0xpdGVyYWwoKTtcblxuICAgICAgY2FzZSBUb2tlbktpbmQuTkFNRTpcbiAgICAgICAgdGhpcy5hZHZhbmNlTGV4ZXIoKTtcblxuICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAndHJ1ZSc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlKHRva2VuLCB7XG4gICAgICAgICAgICAgIGtpbmQ6IEtpbmQuQk9PTEVBTixcbiAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgJ2ZhbHNlJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUodG9rZW4sIHtcbiAgICAgICAgICAgICAga2luZDogS2luZC5CT09MRUFOLFxuICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZSh0b2tlbiwge1xuICAgICAgICAgICAgICBraW5kOiBLaW5kLk5VTEwsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlKHRva2VuLCB7XG4gICAgICAgICAgICAgIGtpbmQ6IEtpbmQuRU5VTSxcbiAgICAgICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBUb2tlbktpbmQuRE9MTEFSOlxuICAgICAgICBpZiAoaXNDb25zdCkge1xuICAgICAgICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkRPTExBUik7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbGV4ZXIudG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLk5BTUUpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhck5hbWUgPSB0aGlzLl9sZXhlci50b2tlbi52YWx1ZTtcbiAgICAgICAgICAgIHRocm93IHN5bnRheEVycm9yKFxuICAgICAgICAgICAgICB0aGlzLl9sZXhlci5zb3VyY2UsXG4gICAgICAgICAgICAgIHRva2VuLnN0YXJ0LFxuICAgICAgICAgICAgICBgVW5leHBlY3RlZCB2YXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgaW4gY29uc3RhbnQgdmFsdWUuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCh0b2tlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VWYXJpYWJsZSgpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUNvbnN0VmFsdWVMaXRlcmFsKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlVmFsdWVMaXRlcmFsKHRydWUpO1xuICB9XG5cbiAgcGFyc2VTdHJpbmdMaXRlcmFsKCkge1xuICAgIGNvbnN0IHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5hZHZhbmNlTGV4ZXIoKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHRva2VuLCB7XG4gICAgICBraW5kOiBLaW5kLlNUUklORyxcbiAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgIGJsb2NrOiB0b2tlbi5raW5kID09PSBUb2tlbktpbmQuQkxPQ0tfU1RSSU5HLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0VmFsdWVbQ29uc3RdIDpcbiAgICogICAtIFsgXVxuICAgKiAgIC0gWyBWYWx1ZVs/Q29uc3RdKyBdXG4gICAqL1xuXG4gIHBhcnNlTGlzdChpc0NvbnN0KSB7XG4gICAgY29uc3QgaXRlbSA9ICgpID0+IHRoaXMucGFyc2VWYWx1ZUxpdGVyYWwoaXNDb25zdCk7XG5cbiAgICByZXR1cm4gdGhpcy5ub2RlKHRoaXMuX2xleGVyLnRva2VuLCB7XG4gICAgICBraW5kOiBLaW5kLkxJU1QsXG4gICAgICB2YWx1ZXM6IHRoaXMuYW55KFRva2VuS2luZC5CUkFDS0VUX0wsIGl0ZW0sIFRva2VuS2luZC5CUkFDS0VUX1IpLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBgYGBcbiAgICogT2JqZWN0VmFsdWVbQ29uc3RdIDpcbiAgICogICAtIHsgfVxuICAgKiAgIC0geyBPYmplY3RGaWVsZFs/Q29uc3RdKyB9XG4gICAqIGBgYFxuICAgKi9cblxuICBwYXJzZU9iamVjdChpc0NvbnN0KSB7XG4gICAgY29uc3QgaXRlbSA9ICgpID0+IHRoaXMucGFyc2VPYmplY3RGaWVsZChpc0NvbnN0KTtcblxuICAgIHJldHVybiB0aGlzLm5vZGUodGhpcy5fbGV4ZXIudG9rZW4sIHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNULFxuICAgICAgZmllbGRzOiB0aGlzLmFueShUb2tlbktpbmQuQlJBQ0VfTCwgaXRlbSwgVG9rZW5LaW5kLkJSQUNFX1IpLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RGaWVsZFtDb25zdF0gOiBOYW1lIDogVmFsdWVbP0NvbnN0XVxuICAgKi9cblxuICBwYXJzZU9iamVjdEZpZWxkKGlzQ29uc3QpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLk9CSkVDVF9GSUVMRCxcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSxcbiAgICB9KTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBEaXJlY3RpdmVzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZXNbQ29uc3RdIDogRGlyZWN0aXZlWz9Db25zdF0rXG4gICAqL1xuXG4gIHBhcnNlRGlyZWN0aXZlcyhpc0NvbnN0KSB7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IFtdO1xuXG4gICAgd2hpbGUgKHRoaXMucGVlayhUb2tlbktpbmQuQVQpKSB7XG4gICAgICBkaXJlY3RpdmVzLnB1c2godGhpcy5wYXJzZURpcmVjdGl2ZShpc0NvbnN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gIH1cblxuICBwYXJzZUNvbnN0RGlyZWN0aXZlcygpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBEaXJlY3RpdmVbQ29uc3RdIDogQCBOYW1lIEFyZ3VtZW50c1s/Q29uc3RdP1xuICAgKiBgYGBcbiAgICovXG5cbiAgcGFyc2VEaXJlY3RpdmUoaXNDb25zdCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQVQpO1xuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuRElSRUNUSVZFLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZU5hbWUoKSxcbiAgICAgIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cyhpc0NvbnN0KSxcbiAgICB9KTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBUeXBlcyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBUeXBlIDpcbiAgICogICAtIE5hbWVkVHlwZVxuICAgKiAgIC0gTGlzdFR5cGVcbiAgICogICAtIE5vbk51bGxUeXBlXG4gICAqL1xuXG4gIHBhcnNlVHlwZVJlZmVyZW5jZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGxldCB0eXBlO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQlJBQ0tFVF9MKSkge1xuICAgICAgY29uc3QgaW5uZXJUeXBlID0gdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkJSQUNLRVRfUik7XG4gICAgICB0eXBlID0gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmQuTElTVF9UWVBFLFxuICAgICAgICB0eXBlOiBpbm5lclR5cGUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IHRoaXMucGFyc2VOYW1lZFR5cGUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5leHBlY3RPcHRpb25hbFRva2VuKFRva2VuS2luZC5CQU5HKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAgICBraW5kOiBLaW5kLk5PTl9OVUxMX1RZUEUsXG4gICAgICAgIHR5cGUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICAvKipcbiAgICogTmFtZWRUeXBlIDogTmFtZVxuICAgKi9cblxuICBwYXJzZU5hbWVkVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHRoaXMuX2xleGVyLnRva2VuLCB7XG4gICAgICBraW5kOiBLaW5kLk5BTUVEX1RZUEUsXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlTmFtZSgpLFxuICAgIH0pO1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIFR5cGUgRGVmaW5pdGlvbiBzZWN0aW9uLlxuXG4gIHBlZWtEZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wZWVrKFRva2VuS2luZC5TVFJJTkcpIHx8IHRoaXMucGVlayhUb2tlbktpbmQuQkxPQ0tfU1RSSU5HKTtcbiAgfVxuICAvKipcbiAgICogRGVzY3JpcHRpb24gOiBTdHJpbmdWYWx1ZVxuICAgKi9cblxuICBwYXJzZURlc2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWtEZXNjcmlwdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZ0xpdGVyYWwoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBTY2hlbWFEZWZpbml0aW9uIDogRGVzY3JpcHRpb24/IHNjaGVtYSBEaXJlY3RpdmVzW0NvbnN0XT8geyBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbisgfVxuICAgKiBgYGBcbiAgICovXG5cbiAgcGFyc2VTY2hlbWFEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjaGVtYScpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3Qgb3BlcmF0aW9uVHlwZXMgPSB0aGlzLm1hbnkoXG4gICAgICBUb2tlbktpbmQuQlJBQ0VfTCxcbiAgICAgIHRoaXMucGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbixcbiAgICAgIFRva2VuS2luZC5CUkFDRV9SLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5TQ0hFTUFfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIG9wZXJhdGlvblR5cGVzLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiA6IE9wZXJhdGlvblR5cGUgOiBOYW1lZFR5cGVcbiAgICovXG5cbiAgcGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMucGFyc2VPcGVyYXRpb25UeXBlKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQ09MT04pO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLnBhcnNlTmFtZWRUeXBlKCk7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5PUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgb3BlcmF0aW9uLFxuICAgICAgdHlwZSxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2NhbGFyVHlwZURlZmluaXRpb24gOiBEZXNjcmlwdGlvbj8gc2NhbGFyIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuXG4gIHBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24oKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc2NhbGFyJyk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWUsXG4gICAgICBkaXJlY3RpdmVzLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgRGVzY3JpcHRpb24/XG4gICAqICAgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvbj9cbiAgICovXG5cbiAgcGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgaW50ZXJmYWNlcyA9IHRoaXMucGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWUsXG4gICAgICBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW1wbGVtZW50c0ludGVyZmFjZXMgOlxuICAgKiAgIC0gaW1wbGVtZW50cyBgJmA/IE5hbWVkVHlwZVxuICAgKiAgIC0gSW1wbGVtZW50c0ludGVyZmFjZXMgJiBOYW1lZFR5cGVcbiAgICovXG5cbiAgcGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5leHBlY3RPcHRpb25hbEtleXdvcmQoJ2ltcGxlbWVudHMnKVxuICAgICAgPyB0aGlzLmRlbGltaXRlZE1hbnkoVG9rZW5LaW5kLkFNUCwgdGhpcy5wYXJzZU5hbWVkVHlwZSlcbiAgICAgIDogW107XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBGaWVsZHNEZWZpbml0aW9uIDogeyBGaWVsZERlZmluaXRpb24rIH1cbiAgICogYGBgXG4gICAqL1xuXG4gIHBhcnNlRmllbGRzRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoXG4gICAgICBUb2tlbktpbmQuQlJBQ0VfTCxcbiAgICAgIHRoaXMucGFyc2VGaWVsZERlZmluaXRpb24sXG4gICAgICBUb2tlbktpbmQuQlJBQ0VfUixcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZERlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IE5hbWUgQXJndW1lbnRzRGVmaW5pdGlvbj8gOiBUeXBlIERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKi9cblxuICBwYXJzZUZpZWxkRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMucGFyc2VBcmd1bWVudERlZnMoKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTik7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMucGFyc2VUeXBlUmVmZXJlbmNlKCk7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLkZJRUxEX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWUsXG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICB0eXBlLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXJndW1lbnRzRGVmaW5pdGlvbiA6ICggSW5wdXRWYWx1ZURlZmluaXRpb24rIClcbiAgICovXG5cbiAgcGFyc2VBcmd1bWVudERlZnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KFxuICAgICAgVG9rZW5LaW5kLlBBUkVOX0wsXG4gICAgICB0aGlzLnBhcnNlSW5wdXRWYWx1ZURlZixcbiAgICAgIFRva2VuS2luZC5QQVJFTl9SLFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIElucHV0VmFsdWVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBOYW1lIDogVHlwZSBEZWZhdWx0VmFsdWU/IERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKi9cblxuICBwYXJzZUlucHV0VmFsdWVEZWYoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICBjb25zdCB0eXBlID0gdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICBsZXQgZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuRVFVQUxTKSkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gdGhpcy5wYXJzZUNvbnN0VmFsdWVMaXRlcmFsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLklOUFVUX1ZBTFVFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWUsXG4gICAgICB0eXBlLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJmYWNlVHlwZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IGludGVyZmFjZSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uP1xuICAgKi9cblxuICBwYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ludGVyZmFjZScpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGludGVyZmFjZXMgPSB0aGlzLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKTtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZUNvbnN0RGlyZWN0aXZlcygpO1xuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMucGFyc2VGaWVsZHNEZWZpbml0aW9uKCk7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgaW50ZXJmYWNlcyxcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFVuaW9uVHlwZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IHVuaW9uIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IFVuaW9uTWVtYmVyVHlwZXM/XG4gICAqL1xuXG4gIHBhcnNlVW5pb25UeXBlRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd1bmlvbicpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgdHlwZXMgPSB0aGlzLnBhcnNlVW5pb25NZW1iZXJUeXBlcygpO1xuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIHR5cGVzLFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVbmlvbk1lbWJlclR5cGVzIDpcbiAgICogICAtID0gYHxgPyBOYW1lZFR5cGVcbiAgICogICAtIFVuaW9uTWVtYmVyVHlwZXMgfCBOYW1lZFR5cGVcbiAgICovXG5cbiAgcGFyc2VVbmlvbk1lbWJlclR5cGVzKCkge1xuICAgIHJldHVybiB0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkVRVUFMUylcbiAgICAgID8gdGhpcy5kZWxpbWl0ZWRNYW55KFRva2VuS2luZC5QSVBFLCB0aGlzLnBhcnNlTmFtZWRUeXBlKVxuICAgICAgOiBbXTtcbiAgfVxuICAvKipcbiAgICogRW51bVR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uP1xuICAgKi9cblxuICBwYXJzZUVudW1UeXBlRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdlbnVtJyk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnBhcnNlRW51bVZhbHVlc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIHZhbHVlcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogYGBgXG4gICAqIEVudW1WYWx1ZXNEZWZpbml0aW9uIDogeyBFbnVtVmFsdWVEZWZpbml0aW9uKyB9XG4gICAqIGBgYFxuICAgKi9cblxuICBwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShcbiAgICAgIFRva2VuS2luZC5CUkFDRV9MLFxuICAgICAgdGhpcy5wYXJzZUVudW1WYWx1ZURlZmluaXRpb24sXG4gICAgICBUb2tlbktpbmQuQlJBQ0VfUixcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBFbnVtVmFsdWVEZWZpbml0aW9uIDogRGVzY3JpcHRpb24/IEVudW1WYWx1ZSBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG5cbiAgcGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZUVudW1WYWx1ZU5hbWUoKTtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZUNvbnN0RGlyZWN0aXZlcygpO1xuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuRU5VTV9WQUxVRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW51bVZhbHVlIDogTmFtZSBidXQgbm90IGB0cnVlYCwgYGZhbHNlYCBvciBgbnVsbGBcbiAgICovXG5cbiAgcGFyc2VFbnVtVmFsdWVOYW1lKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2xleGVyLnRva2VuLnZhbHVlID09PSAndHJ1ZScgfHxcbiAgICAgIHRoaXMuX2xleGVyLnRva2VuLnZhbHVlID09PSAnZmFsc2UnIHx8XG4gICAgICB0aGlzLl9sZXhlci50b2tlbi52YWx1ZSA9PT0gJ251bGwnXG4gICAgKSB7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgICAgdGhpcy5fbGV4ZXIuc291cmNlLFxuICAgICAgICB0aGlzLl9sZXhlci50b2tlbi5zdGFydCxcbiAgICAgICAgYCR7Z2V0VG9rZW5EZXNjKFxuICAgICAgICAgIHRoaXMuX2xleGVyLnRva2VuLFxuICAgICAgICApfSBpcyByZXNlcnZlZCBhbmQgY2Fubm90IGJlIHVzZWQgZm9yIGFuIGVudW0gdmFsdWUuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VOYW1lKCk7XG4gIH1cbiAgLyoqXG4gICAqIElucHV0T2JqZWN0VHlwZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IGlucHV0IE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IElucHV0RmllbGRzRGVmaW5pdGlvbj9cbiAgICovXG5cbiAgcGFyc2VJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2lucHV0Jyk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKCk7XG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogYGBgXG4gICAqIElucHV0RmllbGRzRGVmaW5pdGlvbiA6IHsgSW5wdXRWYWx1ZURlZmluaXRpb24rIH1cbiAgICogYGBgXG4gICAqL1xuXG4gIHBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShcbiAgICAgIFRva2VuS2luZC5CUkFDRV9MLFxuICAgICAgdGhpcy5wYXJzZUlucHV0VmFsdWVEZWYsXG4gICAgICBUb2tlbktpbmQuQlJBQ0VfUixcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBUeXBlU3lzdGVtRXh0ZW5zaW9uIDpcbiAgICogICAtIFNjaGVtYUV4dGVuc2lvblxuICAgKiAgIC0gVHlwZUV4dGVuc2lvblxuICAgKlxuICAgKiBUeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIFNjYWxhclR5cGVFeHRlbnNpb25cbiAgICogICAtIE9iamVjdFR5cGVFeHRlbnNpb25cbiAgICogICAtIEludGVyZmFjZVR5cGVFeHRlbnNpb25cbiAgICogICAtIFVuaW9uVHlwZUV4dGVuc2lvblxuICAgKiAgIC0gRW51bVR5cGVFeHRlbnNpb25cbiAgICogICAtIElucHV0T2JqZWN0VHlwZURlZmluaXRpb25cbiAgICovXG5cbiAgcGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uKCkge1xuICAgIGNvbnN0IGtleXdvcmRUb2tlbiA9IHRoaXMuX2xleGVyLmxvb2thaGVhZCgpO1xuXG4gICAgaWYgKGtleXdvcmRUb2tlbi5raW5kID09PSBUb2tlbktpbmQuTkFNRSkge1xuICAgICAgc3dpdGNoIChrZXl3b3JkVG9rZW4udmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc2NoZW1hJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjaGVtYUV4dGVuc2lvbigpO1xuXG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW50ZXJmYWNlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICd1bmlvbic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VVbmlvblR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVudW1UeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKGtleXdvcmRUb2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBTY2hlbWFFeHRlbnNpb24gOlxuICAgKiAgLSBleHRlbmQgc2NoZW1hIERpcmVjdGl2ZXNbQ29uc3RdPyB7IE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKyB9XG4gICAqICAtIGV4dGVuZCBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF1cbiAgICogYGBgXG4gICAqL1xuXG4gIHBhcnNlU2NoZW1hRXh0ZW5zaW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjaGVtYScpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3Qgb3BlcmF0aW9uVHlwZXMgPSB0aGlzLm9wdGlvbmFsTWFueShcbiAgICAgIFRva2VuS2luZC5CUkFDRV9MLFxuICAgICAgdGhpcy5wYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uLFxuICAgICAgVG9rZW5LaW5kLkJSQUNFX1IsXG4gICAgKTtcblxuICAgIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBvcGVyYXRpb25UeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuU0NIRU1BX0VYVEVOU0lPTixcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICBvcGVyYXRpb25UeXBlcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2NhbGFyVHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBleHRlbmQgc2NhbGFyIE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAgICovXG5cbiAgcGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjYWxhcicpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE9iamVjdFR5cGVFeHRlbnNpb24gOlxuICAgKiAgLSBleHRlbmQgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvblxuICAgKiAgLSBleHRlbmQgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKiAgLSBleHRlbmQgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzXG4gICAqL1xuXG4gIHBhcnNlT2JqZWN0VHlwZUV4dGVuc2lvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgY29uc3QgaW50ZXJmYWNlcyA9IHRoaXMucGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcblxuICAgIGlmIChcbiAgICAgIGludGVyZmFjZXMubGVuZ3RoID09PSAwICYmXG4gICAgICBkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgZmllbGRzLmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lLFxuICAgICAgaW50ZXJmYWNlcyxcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyZmFjZVR5cGVFeHRlbnNpb24gOlxuICAgKiAgLSBleHRlbmQgaW50ZXJmYWNlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uXG4gICAqICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF1cbiAgICogIC0gZXh0ZW5kIGludGVyZmFjZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzXG4gICAqL1xuXG4gIHBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnRlcmZhY2UnKTtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICBjb25zdCBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VDb25zdERpcmVjdGl2ZXMoKTtcbiAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKFxuICAgICAgaW50ZXJmYWNlcy5sZW5ndGggPT09IDAgJiZcbiAgICAgIGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmXG4gICAgICBmaWVsZHMubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWUsXG4gICAgICBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkcyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVW5pb25UeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBVbmlvbk1lbWJlclR5cGVzXG4gICAqICAgLSBleHRlbmQgdW5pb24gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cblxuICBwYXJzZVVuaW9uVHlwZUV4dGVuc2lvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd1bmlvbicpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgdHlwZXMgPSB0aGlzLnBhcnNlVW5pb25NZW1iZXJUeXBlcygpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWUsXG4gICAgICBkaXJlY3RpdmVzLFxuICAgICAgdHlwZXMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVudW1UeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uXG4gICAqICAgLSBleHRlbmQgZW51bSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuXG4gIHBhcnNlRW51bVR5cGVFeHRlbnNpb24oKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZW51bScpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5wYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKCk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgdmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZShzdGFydCwge1xuICAgICAga2luZDogS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICB2YWx1ZXMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBleHRlbmQgaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gSW5wdXRGaWVsZHNEZWZpbml0aW9uXG4gICAqICAgLSBleHRlbmQgaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cblxuICBwYXJzZUlucHV0T2JqZWN0VHlwZUV4dGVuc2lvbigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnB1dCcpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlQ29uc3REaXJlY3RpdmVzKCk7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5wYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5vZGUoc3RhcnQsIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHMsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIGBgYFxuICAgKiBEaXJlY3RpdmVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBkaXJlY3RpdmUgQCBOYW1lIEFyZ3VtZW50c0RlZmluaXRpb24/IGByZXBlYXRhYmxlYD8gb24gRGlyZWN0aXZlTG9jYXRpb25zXG4gICAqIGBgYFxuICAgKi9cblxuICBwYXJzZURpcmVjdGl2ZURlZmluaXRpb24oKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZGlyZWN0aXZlJyk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQVQpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnBhcnNlQXJndW1lbnREZWZzKCk7XG4gICAgY29uc3QgcmVwZWF0YWJsZSA9IHRoaXMuZXhwZWN0T3B0aW9uYWxLZXl3b3JkKCdyZXBlYXRhYmxlJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdvbicpO1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IHRoaXMucGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMoKTtcbiAgICByZXR1cm4gdGhpcy5ub2RlKHN0YXJ0LCB7XG4gICAgICBraW5kOiBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBuYW1lLFxuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgcmVwZWF0YWJsZSxcbiAgICAgIGxvY2F0aW9ucyxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlyZWN0aXZlTG9jYXRpb25zIDpcbiAgICogICAtIGB8YD8gRGlyZWN0aXZlTG9jYXRpb25cbiAgICogICAtIERpcmVjdGl2ZUxvY2F0aW9ucyB8IERpcmVjdGl2ZUxvY2F0aW9uXG4gICAqL1xuXG4gIHBhcnNlRGlyZWN0aXZlTG9jYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGltaXRlZE1hbnkoVG9rZW5LaW5kLlBJUEUsIHRoaXMucGFyc2VEaXJlY3RpdmVMb2NhdGlvbik7XG4gIH1cbiAgLypcbiAgICogRGlyZWN0aXZlTG9jYXRpb24gOlxuICAgKiAgIC0gRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25cbiAgICpcbiAgICogRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uIDogb25lIG9mXG4gICAqICAgYFFVRVJZYFxuICAgKiAgIGBNVVRBVElPTmBcbiAgICogICBgU1VCU0NSSVBUSU9OYFxuICAgKiAgIGBGSUVMRGBcbiAgICogICBgRlJBR01FTlRfREVGSU5JVElPTmBcbiAgICogICBgRlJBR01FTlRfU1BSRUFEYFxuICAgKiAgIGBJTkxJTkVfRlJBR01FTlRgXG4gICAqXG4gICAqIFR5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbiA6IG9uZSBvZlxuICAgKiAgIGBTQ0hFTUFgXG4gICAqICAgYFNDQUxBUmBcbiAgICogICBgT0JKRUNUYFxuICAgKiAgIGBGSUVMRF9ERUZJTklUSU9OYFxuICAgKiAgIGBBUkdVTUVOVF9ERUZJTklUSU9OYFxuICAgKiAgIGBJTlRFUkZBQ0VgXG4gICAqICAgYFVOSU9OYFxuICAgKiAgIGBFTlVNYFxuICAgKiAgIGBFTlVNX1ZBTFVFYFxuICAgKiAgIGBJTlBVVF9PQkpFQ1RgXG4gICAqICAgYElOUFVUX0ZJRUxEX0RFRklOSVRJT05gXG4gICAqL1xuXG4gIHBhcnNlRGlyZWN0aXZlTG9jYXRpb24oKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoRGlyZWN0aXZlTG9jYXRpb24sIG5hbWUudmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoc3RhcnQpO1xuICB9IC8vIENvcmUgcGFyc2luZyB1dGlsaXR5IGZ1bmN0aW9uc1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbm9kZSB0aGF0LCBpZiBjb25maWd1cmVkIHRvIGRvIHNvLCBzZXRzIGEgXCJsb2NcIiBmaWVsZCBhcyBhXG4gICAqIGxvY2F0aW9uIG9iamVjdCwgdXNlZCB0byBpZGVudGlmeSB0aGUgcGxhY2UgaW4gdGhlIHNvdXJjZSB0aGF0IGNyZWF0ZWQgYVxuICAgKiBnaXZlbiBwYXJzZWQgb2JqZWN0LlxuICAgKi9cblxuICBub2RlKHN0YXJ0VG9rZW4sIG5vZGUpIHtcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5ub0xvY2F0aW9uICE9PSB0cnVlKSB7XG4gICAgICBub2RlLmxvYyA9IG5ldyBMb2NhdGlvbihcbiAgICAgICAgc3RhcnRUb2tlbixcbiAgICAgICAgdGhpcy5fbGV4ZXIubGFzdFRva2VuLFxuICAgICAgICB0aGlzLl9sZXhlci5zb3VyY2UsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBuZXh0IHRva2VuIGlzIG9mIGEgZ2l2ZW4ga2luZFxuICAgKi9cblxuICBwZWVrKGtpbmQpIHtcbiAgICByZXR1cm4gdGhpcy5fbGV4ZXIudG9rZW4ua2luZCA9PT0ga2luZDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAgICovXG5cbiAgZXhwZWN0VG9rZW4oa2luZCkge1xuICAgIGNvbnN0IHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgICAgdGhpcy5hZHZhbmNlTGV4ZXIoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG5cbiAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgIHRoaXMuX2xleGVyLnNvdXJjZSxcbiAgICAgIHRva2VuLnN0YXJ0LFxuICAgICAgYEV4cGVjdGVkICR7Z2V0VG9rZW5LaW5kRGVzYyhraW5kKX0sIGZvdW5kICR7Z2V0VG9rZW5EZXNjKHRva2VuKX0uYCxcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBJZiB0aGUgbmV4dCB0b2tlbiBpcyBvZiB0aGUgZ2l2ZW4ga2luZCwgcmV0dXJuIFwidHJ1ZVwiIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCByZXR1cm4gXCJmYWxzZVwiLlxuICAgKi9cblxuICBleHBlY3RPcHRpb25hbFRva2VuKGtpbmQpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IGtpbmQpIHtcbiAgICAgIHRoaXMuYWR2YW5jZUxleGVyKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIGEgZ2l2ZW4ga2V5d29yZCwgYWR2YW5jZSB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAgICovXG5cbiAgZXhwZWN0S2V5d29yZCh2YWx1ZSkge1xuICAgIGNvbnN0IHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLk5BTUUgJiYgdG9rZW4udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmFkdmFuY2VMZXhlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgICAgdGhpcy5fbGV4ZXIuc291cmNlLFxuICAgICAgICB0b2tlbi5zdGFydCxcbiAgICAgICAgYEV4cGVjdGVkIFwiJHt2YWx1ZX1cIiwgZm91bmQgJHtnZXRUb2tlbkRlc2ModG9rZW4pfS5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIGEgZ2l2ZW4ga2V5d29yZCwgcmV0dXJuIFwidHJ1ZVwiIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCByZXR1cm4gXCJmYWxzZVwiLlxuICAgKi9cblxuICBleHBlY3RPcHRpb25hbEtleXdvcmQodmFsdWUpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5OQU1FICYmIHRva2VuLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgdGhpcy5hZHZhbmNlTGV4ZXIoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBlcnJvciB3aGVuIGFuIHVuZXhwZWN0ZWQgbGV4ZWQgdG9rZW4gaXMgZW5jb3VudGVyZWQuXG4gICAqL1xuXG4gIHVuZXhwZWN0ZWQoYXRUb2tlbikge1xuICAgIGNvbnN0IHRva2VuID1cbiAgICAgIGF0VG9rZW4gIT09IG51bGwgJiYgYXRUb2tlbiAhPT0gdm9pZCAwID8gYXRUb2tlbiA6IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHJldHVybiBzeW50YXhFcnJvcihcbiAgICAgIHRoaXMuX2xleGVyLnNvdXJjZSxcbiAgICAgIHRva2VuLnN0YXJ0LFxuICAgICAgYFVuZXhwZWN0ZWQgJHtnZXRUb2tlbkRlc2ModG9rZW4pfS5gLFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwb3NzaWJseSBlbXB0eSBsaXN0IG9mIHBhcnNlIG5vZGVzLCBkZXRlcm1pbmVkIGJ5IHRoZSBwYXJzZUZuLlxuICAgKiBUaGlzIGxpc3QgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmQgYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuXG4gICAqIEFkdmFuY2VzIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cblxuICBhbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIHRoaXMuZXhwZWN0VG9rZW4ob3BlbktpbmQpO1xuICAgIGNvbnN0IG5vZGVzID0gW107XG5cbiAgICB3aGlsZSAoIXRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihjbG9zZUtpbmQpKSB7XG4gICAgICBub2Rlcy5wdXNoKHBhcnNlRm4uY2FsbCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieSB0aGUgcGFyc2VGbi5cbiAgICogSXQgY2FuIGJlIGVtcHR5IG9ubHkgaWYgb3BlbiB0b2tlbiBpcyBtaXNzaW5nIG90aGVyd2lzZSBpdCB3aWxsIGFsd2F5cyByZXR1cm4gbm9uLWVtcHR5IGxpc3RcbiAgICogdGhhdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZCBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC5cbiAgICogQWR2YW5jZXMgdGhlIHBhcnNlciB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgdGhlIGNsb3NpbmcgdG9rZW4uXG4gICAqL1xuXG4gIG9wdGlvbmFsTWFueShvcGVuS2luZCwgcGFyc2VGbiwgY2xvc2VLaW5kKSB7XG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihvcGVuS2luZCkpIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gW107XG5cbiAgICAgIGRvIHtcbiAgICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgICAgfSB3aGlsZSAoIXRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihjbG9zZUtpbmQpKTtcblxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5vbi1lbXB0eSBsaXN0IG9mIHBhcnNlIG5vZGVzLCBkZXRlcm1pbmVkIGJ5IHRoZSBwYXJzZUZuLlxuICAgKiBUaGlzIGxpc3QgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmQgYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuXG4gICAqIEFkdmFuY2VzIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cblxuICBtYW55KG9wZW5LaW5kLCBwYXJzZUZuLCBjbG9zZUtpbmQpIHtcbiAgICB0aGlzLmV4cGVjdFRva2VuKG9wZW5LaW5kKTtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuXG4gICAgZG8ge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH0gd2hpbGUgKCF0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oY2xvc2VLaW5kKSk7XG5cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBub24tZW1wdHkgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieSB0aGUgcGFyc2VGbi5cbiAgICogVGhpcyBsaXN0IG1heSBiZWdpbiB3aXRoIGEgbGV4IHRva2VuIG9mIGRlbGltaXRlcktpbmQgZm9sbG93ZWQgYnkgaXRlbXMgc2VwYXJhdGVkIGJ5IGxleCB0b2tlbnMgb2YgdG9rZW5LaW5kLlxuICAgKiBBZHZhbmNlcyB0aGUgcGFyc2VyIHRvIHRoZSBuZXh0IGxleCB0b2tlbiBhZnRlciBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAqL1xuXG4gIGRlbGltaXRlZE1hbnkoZGVsaW1pdGVyS2luZCwgcGFyc2VGbikge1xuICAgIHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihkZWxpbWl0ZXJLaW5kKTtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuXG4gICAgZG8ge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihkZWxpbWl0ZXJLaW5kKSk7XG5cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICBhZHZhbmNlTGV4ZXIoKSB7XG4gICAgY29uc3QgeyBtYXhUb2tlbnMgfSA9IHRoaXMuX29wdGlvbnM7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgIGlmIChtYXhUb2tlbnMgIT09IHVuZGVmaW5lZCAmJiB0b2tlbi5raW5kICE9PSBUb2tlbktpbmQuRU9GKSB7XG4gICAgICArK3RoaXMuX3Rva2VuQ291bnRlcjtcblxuICAgICAgaWYgKHRoaXMuX3Rva2VuQ291bnRlciA+IG1heFRva2Vucykge1xuICAgICAgICB0aHJvdyBzeW50YXhFcnJvcihcbiAgICAgICAgICB0aGlzLl9sZXhlci5zb3VyY2UsXG4gICAgICAgICAgdG9rZW4uc3RhcnQsXG4gICAgICAgICAgYERvY3VtZW50IGNvbnRhaW5zIG1vcmUgdGhhdCAke21heFRva2Vuc30gdG9rZW5zLiBQYXJzaW5nIGFib3J0ZWQuYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZGVzY3JpYmUgYSB0b2tlbiBhcyBhIHN0cmluZyBmb3IgZGVidWdnaW5nLlxuICovXG5cbmZ1bmN0aW9uIGdldFRva2VuRGVzYyh0b2tlbikge1xuICBjb25zdCB2YWx1ZSA9IHRva2VuLnZhbHVlO1xuICByZXR1cm4gZ2V0VG9rZW5LaW5kRGVzYyh0b2tlbi5raW5kKSArICh2YWx1ZSAhPSBudWxsID8gYCBcIiR7dmFsdWV9XCJgIDogJycpO1xufVxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0byBkZXNjcmliZSBhIHRva2VuIGtpbmQgYXMgYSBzdHJpbmcgZm9yIGRlYnVnZ2luZy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRUb2tlbktpbmREZXNjKGtpbmQpIHtcbiAgcmV0dXJuIGlzUHVuY3R1YXRvclRva2VuS2luZChraW5kKSA/IGBcIiR7a2luZH1cImAgOiBraW5kO1xufVxuIiwiaW1wb3J0IHsgS2luZCB9IGZyb20gJy4va2luZHMubWpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZShub2RlKSB8fFxuICAgIGlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlKG5vZGUpIHx8XG4gICAgaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZShub2RlKVxuICApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTlxuICApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBLaW5kLkZJRUxEIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLkZSQUdNRU5UX1NQUkVBRCB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5JTkxJTkVfRlJBR01FTlRcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbHVlTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLklOVCB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5GTE9BVCB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5TVFJJTkcgfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuQk9PTEVBTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5OVUxMIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLkVOVU0gfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuTElTVCB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5PQkpFQ1RcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnN0VmFsdWVOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBpc1ZhbHVlTm9kZShub2RlKSAmJlxuICAgIChub2RlLmtpbmQgPT09IEtpbmQuTElTVFxuICAgICAgPyBub2RlLnZhbHVlcy5zb21lKGlzQ29uc3RWYWx1ZU5vZGUpXG4gICAgICA6IG5vZGUua2luZCA9PT0gS2luZC5PQkpFQ1RcbiAgICAgID8gbm9kZS5maWVsZHMuc29tZSgoZmllbGQpID0+IGlzQ29uc3RWYWx1ZU5vZGUoZmllbGQudmFsdWUpKVxuICAgICAgOiBub2RlLmtpbmQgIT09IEtpbmQuVkFSSUFCTEUpXG4gICk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBLaW5kLk5BTUVEX1RZUEUgfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuTElTVF9UWVBFIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLk5PTl9OVUxMX1RZUEVcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBLaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8XG4gICAgaXNUeXBlRGVmaW5pdGlvbk5vZGUobm9kZSkgfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT05cbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OXG4gICk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0VYVEVOU0lPTiB8fCBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZUV4dGVuc2lvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IEtpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTlxuICApO1xufVxuIiwiaW1wb3J0IHsgZ2V0TG9jYXRpb24gfSBmcm9tICcuL2xvY2F0aW9uLm1qcyc7XG5cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihcbiAgICBsb2NhdGlvbi5zb3VyY2UsXG4gICAgZ2V0TG9jYXRpb24obG9jYXRpb24uc291cmNlLCBsb2NhdGlvbi5zdGFydCksXG4gICk7XG59XG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTb3VyY2VMb2NhdGlvbihzb3VyY2UsIHNvdXJjZUxvY2F0aW9uKSB7XG4gIGNvbnN0IGZpcnN0TGluZUNvbHVtbk9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5jb2x1bW4gLSAxO1xuICBjb25zdCBib2R5ID0gJycucGFkU3RhcnQoZmlyc3RMaW5lQ29sdW1uT2Zmc2V0KSArIHNvdXJjZS5ib2R5O1xuICBjb25zdCBsaW5lSW5kZXggPSBzb3VyY2VMb2NhdGlvbi5saW5lIC0gMTtcbiAgY29uc3QgbGluZU9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5saW5lIC0gMTtcbiAgY29uc3QgbGluZU51bSA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgKyBsaW5lT2Zmc2V0O1xuICBjb25zdCBjb2x1bW5PZmZzZXQgPSBzb3VyY2VMb2NhdGlvbi5saW5lID09PSAxID8gZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IDogMDtcbiAgY29uc3QgY29sdW1uTnVtID0gc291cmNlTG9jYXRpb24uY29sdW1uICsgY29sdW1uT2Zmc2V0O1xuICBjb25zdCBsb2NhdGlvblN0ciA9IGAke3NvdXJjZS5uYW1lfToke2xpbmVOdW19OiR7Y29sdW1uTnVtfVxcbmA7XG4gIGNvbnN0IGxpbmVzID0gYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICBjb25zdCBsb2NhdGlvbkxpbmUgPSBsaW5lc1tsaW5lSW5kZXhdOyAvLyBTcGVjaWFsIGNhc2UgZm9yIG1pbmlmaWVkIGRvY3VtZW50c1xuXG4gIGlmIChsb2NhdGlvbkxpbmUubGVuZ3RoID4gMTIwKSB7XG4gICAgY29uc3Qgc3ViTGluZUluZGV4ID0gTWF0aC5mbG9vcihjb2x1bW5OdW0gLyA4MCk7XG4gICAgY29uc3Qgc3ViTGluZUNvbHVtbk51bSA9IGNvbHVtbk51bSAlIDgwO1xuICAgIGNvbnN0IHN1YkxpbmVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9uTGluZS5sZW5ndGg7IGkgKz0gODApIHtcbiAgICAgIHN1YkxpbmVzLnB1c2gobG9jYXRpb25MaW5lLnNsaWNlKGksIGkgKyA4MCkpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBsb2NhdGlvblN0ciArXG4gICAgICBwcmludFByZWZpeGVkTGluZXMoW1xuICAgICAgICBbYCR7bGluZU51bX0gfGAsIHN1YkxpbmVzWzBdXSxcbiAgICAgICAgLi4uc3ViTGluZXMuc2xpY2UoMSwgc3ViTGluZUluZGV4ICsgMSkubWFwKChzdWJMaW5lKSA9PiBbJ3wnLCBzdWJMaW5lXSksXG4gICAgICAgIFsnfCcsICdeJy5wYWRTdGFydChzdWJMaW5lQ29sdW1uTnVtKV0sXG4gICAgICAgIFsnfCcsIHN1YkxpbmVzW3N1YkxpbmVJbmRleCArIDFdXSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgbG9jYXRpb25TdHIgK1xuICAgIHByaW50UHJlZml4ZWRMaW5lcyhbXG4gICAgICAvLyBMaW5lcyBzcGVjaWZpZWQgbGlrZSB0aGlzOiBbXCJwcmVmaXhcIiwgXCJzdHJpbmdcIl0sXG4gICAgICBbYCR7bGluZU51bSAtIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggLSAxXV0sXG4gICAgICBbYCR7bGluZU51bX0gfGAsIGxvY2F0aW9uTGluZV0sXG4gICAgICBbJ3wnLCAnXicucGFkU3RhcnQoY29sdW1uTnVtKV0sXG4gICAgICBbYCR7bGluZU51bSArIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggKyAxXV0sXG4gICAgXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRQcmVmaXhlZExpbmVzKGxpbmVzKSB7XG4gIGNvbnN0IGV4aXN0aW5nTGluZXMgPSBsaW5lcy5maWx0ZXIoKFtfLCBsaW5lXSkgPT4gbGluZSAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgcGFkTGVuID0gTWF0aC5tYXgoLi4uZXhpc3RpbmdMaW5lcy5tYXAoKFtwcmVmaXhdKSA9PiBwcmVmaXgubGVuZ3RoKSk7XG4gIHJldHVybiBleGlzdGluZ0xpbmVzXG4gICAgLm1hcCgoW3ByZWZpeCwgbGluZV0pID0+IHByZWZpeC5wYWRTdGFydChwYWRMZW4pICsgKGxpbmUgPyAnICcgKyBsaW5lIDogJycpKVxuICAgIC5qb2luKCdcXG4nKTtcbn1cbiIsIi8qKlxuICogUHJpbnRzIGEgc3RyaW5nIGFzIGEgR3JhcGhRTCBTdHJpbmdWYWx1ZSBsaXRlcmFsLiBSZXBsYWNlcyBjb250cm9sIGNoYXJhY3RlcnNcbiAqIGFuZCBleGNsdWRlZCBjaGFyYWN0ZXJzIChcIiBVKzAwMjIgYW5kIFxcXFwgVSswMDVDKSB3aXRoIGVzY2FwZSBzZXF1ZW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmludFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGBcIiR7c3RyLnJlcGxhY2UoZXNjYXBlZFJlZ0V4cCwgZXNjYXBlZFJlcGxhY2VyKX1cImA7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbmNvbnN0IGVzY2FwZWRSZWdFeHAgPSAvW1xceDAwLVxceDFmXFx4MjJcXHg1Y1xceDdmLVxceDlmXS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVkUmVwbGFjZXIoc3RyKSB7XG4gIHJldHVybiBlc2NhcGVTZXF1ZW5jZXNbc3RyLmNoYXJDb2RlQXQoMCldO1xufSAvLyBwcmV0dGllci1pZ25vcmVcblxuY29uc3QgZXNjYXBlU2VxdWVuY2VzID0gW1xuICAnXFxcXHUwMDAwJyxcbiAgJ1xcXFx1MDAwMScsXG4gICdcXFxcdTAwMDInLFxuICAnXFxcXHUwMDAzJyxcbiAgJ1xcXFx1MDAwNCcsXG4gICdcXFxcdTAwMDUnLFxuICAnXFxcXHUwMDA2JyxcbiAgJ1xcXFx1MDAwNycsXG4gICdcXFxcYicsXG4gICdcXFxcdCcsXG4gICdcXFxcbicsXG4gICdcXFxcdTAwMEInLFxuICAnXFxcXGYnLFxuICAnXFxcXHInLFxuICAnXFxcXHUwMDBFJyxcbiAgJ1xcXFx1MDAwRicsXG4gICdcXFxcdTAwMTAnLFxuICAnXFxcXHUwMDExJyxcbiAgJ1xcXFx1MDAxMicsXG4gICdcXFxcdTAwMTMnLFxuICAnXFxcXHUwMDE0JyxcbiAgJ1xcXFx1MDAxNScsXG4gICdcXFxcdTAwMTYnLFxuICAnXFxcXHUwMDE3JyxcbiAgJ1xcXFx1MDAxOCcsXG4gICdcXFxcdTAwMTknLFxuICAnXFxcXHUwMDFBJyxcbiAgJ1xcXFx1MDAxQicsXG4gICdcXFxcdTAwMUMnLFxuICAnXFxcXHUwMDFEJyxcbiAgJ1xcXFx1MDAxRScsXG4gICdcXFxcdTAwMUYnLFxuICAnJyxcbiAgJycsXG4gICdcXFxcXCInLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gMkZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDNGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLCAvLyA0RlxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnXFxcXFxcXFwnLFxuICAnJyxcbiAgJycsXG4gICcnLCAvLyA1RlxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNkZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJ1xcXFx1MDA3RicsXG4gICdcXFxcdTAwODAnLFxuICAnXFxcXHUwMDgxJyxcbiAgJ1xcXFx1MDA4MicsXG4gICdcXFxcdTAwODMnLFxuICAnXFxcXHUwMDg0JyxcbiAgJ1xcXFx1MDA4NScsXG4gICdcXFxcdTAwODYnLFxuICAnXFxcXHUwMDg3JyxcbiAgJ1xcXFx1MDA4OCcsXG4gICdcXFxcdTAwODknLFxuICAnXFxcXHUwMDhBJyxcbiAgJ1xcXFx1MDA4QicsXG4gICdcXFxcdTAwOEMnLFxuICAnXFxcXHUwMDhEJyxcbiAgJ1xcXFx1MDA4RScsXG4gICdcXFxcdTAwOEYnLFxuICAnXFxcXHUwMDkwJyxcbiAgJ1xcXFx1MDA5MScsXG4gICdcXFxcdTAwOTInLFxuICAnXFxcXHUwMDkzJyxcbiAgJ1xcXFx1MDA5NCcsXG4gICdcXFxcdTAwOTUnLFxuICAnXFxcXHUwMDk2JyxcbiAgJ1xcXFx1MDA5NycsXG4gICdcXFxcdTAwOTgnLFxuICAnXFxcXHUwMDk5JyxcbiAgJ1xcXFx1MDA5QScsXG4gICdcXFxcdTAwOUInLFxuICAnXFxcXHUwMDlDJyxcbiAgJ1xcXFx1MDA5RCcsXG4gICdcXFxcdTAwOUUnLFxuICAnXFxcXHUwMDlGJyxcbl07XG4iLCJpbXBvcnQgeyBwcmludEJsb2NrU3RyaW5nIH0gZnJvbSAnLi9ibG9ja1N0cmluZy5tanMnO1xuaW1wb3J0IHsgcHJpbnRTdHJpbmcgfSBmcm9tICcuL3ByaW50U3RyaW5nLm1qcyc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJy4vdmlzaXRvci5tanMnO1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBBU1QgaW50byBhIHN0cmluZywgdXNpbmcgb25lIHNldCBvZiByZWFzb25hYmxlXG4gKiBmb3JtYXR0aW5nIHJ1bGVzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludChhc3QpIHtcbiAgcmV0dXJuIHZpc2l0KGFzdCwgcHJpbnREb2NBU1RSZWR1Y2VyKTtcbn1cbmNvbnN0IE1BWF9MSU5FX0xFTkdUSCA9IDgwO1xuY29uc3QgcHJpbnREb2NBU1RSZWR1Y2VyID0ge1xuICBOYW1lOiB7XG4gICAgbGVhdmU6IChub2RlKSA9PiBub2RlLnZhbHVlLFxuICB9LFxuICBWYXJpYWJsZToge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gJyQnICsgbm9kZS5uYW1lLFxuICB9LFxuICAvLyBEb2N1bWVudFxuICBEb2N1bWVudDoge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gam9pbihub2RlLmRlZmluaXRpb25zLCAnXFxuXFxuJyksXG4gIH0sXG4gIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICBsZWF2ZShub2RlKSB7XG4gICAgICBjb25zdCB2YXJEZWZzID0gd3JhcCgnKCcsIGpvaW4obm9kZS52YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKTtcbiAgICAgIGNvbnN0IHByZWZpeCA9IGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICBub2RlLm9wZXJhdGlvbixcbiAgICAgICAgICBqb2luKFtub2RlLm5hbWUsIHZhckRlZnNdKSxcbiAgICAgICAgICBqb2luKG5vZGUuZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKTsgLy8gQW5vbnltb3VzIHF1ZXJpZXMgd2l0aCBubyBkaXJlY3RpdmVzIG9yIHZhcmlhYmxlIGRlZmluaXRpb25zIGNhbiB1c2VcbiAgICAgIC8vIHRoZSBxdWVyeSBzaG9ydCBmb3JtLlxuXG4gICAgICByZXR1cm4gKHByZWZpeCA9PT0gJ3F1ZXJ5JyA/ICcnIDogcHJlZml4ICsgJyAnKSArIG5vZGUuc2VsZWN0aW9uU2V0O1xuICAgIH0sXG4gIH0sXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyB2YXJpYWJsZSwgdHlwZSwgZGVmYXVsdFZhbHVlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB2YXJpYWJsZSArXG4gICAgICAnOiAnICtcbiAgICAgIHR5cGUgK1xuICAgICAgd3JhcCgnID0gJywgZGVmYXVsdFZhbHVlKSArXG4gICAgICB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgU2VsZWN0aW9uU2V0OiB7XG4gICAgbGVhdmU6ICh7IHNlbGVjdGlvbnMgfSkgPT4gYmxvY2soc2VsZWN0aW9ucyksXG4gIH0sXG4gIEZpZWxkOiB7XG4gICAgbGVhdmUoeyBhbGlhcywgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCBkaXJlY3RpdmVzLCBzZWxlY3Rpb25TZXQgfSkge1xuICAgICAgY29uc3QgcHJlZml4ID0gd3JhcCgnJywgYWxpYXMsICc6ICcpICsgbmFtZTtcbiAgICAgIGxldCBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpO1xuXG4gICAgICBpZiAoYXJnc0xpbmUubGVuZ3RoID4gTUFYX0xJTkVfTEVOR1RIKSB7XG4gICAgICAgIGFyZ3NMaW5lID0gcHJlZml4ICsgd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqb2luKFthcmdzTGluZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBzZWxlY3Rpb25TZXRdLCAnICcpO1xuICAgIH0sXG4gIH0sXG4gIEFyZ3VtZW50OiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIHZhbHVlIH0pID0+IG5hbWUgKyAnOiAnICsgdmFsdWUsXG4gIH0sXG4gIC8vIEZyYWdtZW50c1xuICBGcmFnbWVudFNwcmVhZDoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICAnLi4uJyArIG5hbWUgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgSW5saW5lRnJhZ21lbnQ6IHtcbiAgICBsZWF2ZTogKHsgdHlwZUNvbmRpdGlvbiwgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJy4uLicsXG4gICAgICAgICAgd3JhcCgnb24gJywgdHlwZUNvbmRpdGlvbiksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIHNlbGVjdGlvblNldCxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRnJhZ21lbnREZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6IChcbiAgICAgIHsgbmFtZSwgdHlwZUNvbmRpdGlvbiwgdmFyaWFibGVEZWZpbml0aW9ucywgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0sIC8vIE5vdGU6IGZyYWdtZW50IHZhcmlhYmxlIGRlZmluaXRpb25zIGFyZSBleHBlcmltZW50YWwgYW5kIG1heSBiZSBjaGFuZ2VkXG4gICAgKSA9PlxuICAgICAgLy8gb3IgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAgICAgYGZyYWdtZW50ICR7bmFtZX0ke3dyYXAoJygnLCBqb2luKHZhcmlhYmxlRGVmaW5pdGlvbnMsICcsICcpLCAnKScpfSBgICtcbiAgICAgIGBvbiAke3R5cGVDb25kaXRpb259ICR7d3JhcCgnJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCAnICcpfWAgK1xuICAgICAgc2VsZWN0aW9uU2V0LFxuICB9LFxuICAvLyBWYWx1ZVxuICBJbnRWYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgRmxvYXRWYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgU3RyaW5nVmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUsIGJsb2NrOiBpc0Jsb2NrU3RyaW5nIH0pID0+XG4gICAgICBpc0Jsb2NrU3RyaW5nID8gcHJpbnRCbG9ja1N0cmluZyh2YWx1ZSkgOiBwcmludFN0cmluZyh2YWx1ZSksXG4gIH0sXG4gIEJvb2xlYW5WYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiAodmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKSxcbiAgfSxcbiAgTnVsbFZhbHVlOiB7XG4gICAgbGVhdmU6ICgpID0+ICdudWxsJyxcbiAgfSxcbiAgRW51bVZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlIH0pID0+IHZhbHVlLFxuICB9LFxuICBMaXN0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWVzIH0pID0+ICdbJyArIGpvaW4odmFsdWVzLCAnLCAnKSArICddJyxcbiAgfSxcbiAgT2JqZWN0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgZmllbGRzIH0pID0+ICd7JyArIGpvaW4oZmllbGRzLCAnLCAnKSArICd9JyxcbiAgfSxcbiAgT2JqZWN0RmllbGQ6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgdmFsdWUgfSkgPT4gbmFtZSArICc6ICcgKyB2YWx1ZSxcbiAgfSxcbiAgLy8gRGlyZWN0aXZlXG4gIERpcmVjdGl2ZToge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBhcmd1bWVudHM6IGFyZ3MgfSkgPT5cbiAgICAgICdAJyArIG5hbWUgKyB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSxcbiAgfSxcbiAgLy8gVHlwZVxuICBOYW1lZFR5cGU6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSB9KSA9PiBuYW1lLFxuICB9LFxuICBMaXN0VHlwZToge1xuICAgIGxlYXZlOiAoeyB0eXBlIH0pID0+ICdbJyArIHR5cGUgKyAnXScsXG4gIH0sXG4gIE5vbk51bGxUeXBlOiB7XG4gICAgbGVhdmU6ICh7IHR5cGUgfSkgPT4gdHlwZSArICchJyxcbiAgfSxcbiAgLy8gVHlwZSBTeXN0ZW0gRGVmaW5pdGlvbnNcbiAgU2NoZW1hRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgZGlyZWN0aXZlcywgb3BlcmF0aW9uVHlwZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ3NjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSwgJyAnKSxcbiAgfSxcbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgb3BlcmF0aW9uLCB0eXBlIH0pID0+IG9wZXJhdGlvbiArICc6ICcgKyB0eXBlLFxuICB9LFxuICBTY2FsYXJUeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFsnc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgT2JqZWN0VHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ3R5cGUnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEZpZWxkRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCB0eXBlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIG5hbWUgK1xuICAgICAgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpXG4gICAgICAgID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJylcbiAgICAgICAgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgK1xuICAgICAgJzogJyArXG4gICAgICB0eXBlICtcbiAgICAgIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpLFxuICB9LFxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgdHlwZSwgZGVmYXVsdFZhbHVlLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oXG4gICAgICAgIFtuYW1lICsgJzogJyArIHR5cGUsIHdyYXAoJz0gJywgZGVmYXVsdFZhbHVlKSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2ludGVyZmFjZScsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSxcbiAgICAgICAgICBqb2luKGRpcmVjdGl2ZXMsICcgJyksXG4gICAgICAgICAgYmxvY2soZmllbGRzKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgVW5pb25UeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgdHlwZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgWyd1bmlvbicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgd3JhcCgnPSAnLCBqb2luKHR5cGVzLCAnIHwgJykpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRW51bVR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBkaXJlY3RpdmVzLCB2YWx1ZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ2VudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpLFxuICB9LFxuICBFbnVtVmFsdWVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICsgam9pbihbbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyksXG4gIH0sXG4gIERpcmVjdGl2ZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGFyZ3VtZW50czogYXJncywgcmVwZWF0YWJsZSwgbG9jYXRpb25zIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgICdkaXJlY3RpdmUgQCcgK1xuICAgICAgbmFtZSArXG4gICAgICAoaGFzTXVsdGlsaW5lSXRlbXMoYXJncylcbiAgICAgICAgPyB3cmFwKCcoXFxuJywgaW5kZW50KGpvaW4oYXJncywgJ1xcbicpKSwgJ1xcbiknKVxuICAgICAgICA6IHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpKSArXG4gICAgICAocmVwZWF0YWJsZSA/ICcgcmVwZWF0YWJsZScgOiAnJykgK1xuICAgICAgJyBvbiAnICtcbiAgICAgIGpvaW4obG9jYXRpb25zLCAnIHwgJyksXG4gIH0sXG4gIFNjaGVtYUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBkaXJlY3RpdmVzLCBvcGVyYXRpb25UeXBlcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgWydleHRlbmQgc2NoZW1hJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhvcGVyYXRpb25UeXBlcyldLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMgfSkgPT5cbiAgICAgIGpvaW4oWydleHRlbmQgc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKSxcbiAgfSxcbiAgT2JqZWN0VHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICAnZXh0ZW5kIHR5cGUnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEludGVyZmFjZVR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgaW50ZXJmYWNlcywgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2V4dGVuZCBpbnRlcmZhY2UnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIFVuaW9uVHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzLCB0eXBlcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdleHRlbmQgdW5pb24nLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIHdyYXAoJz0gJywgam9pbih0eXBlcywgJyB8ICcpKSxcbiAgICAgICAgXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgRW51bVR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgdmFsdWVzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIGVudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpLFxuICB9LFxuICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIGlucHV0JywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKSxcbiAgfSxcbn07XG4vKipcbiAqIEdpdmVuIG1heWJlQXJyYXksIHByaW50IGFuIGVtcHR5IHN0cmluZyBpZiBpdCBpcyBudWxsIG9yIGVtcHR5LCBvdGhlcndpc2VcbiAqIHByaW50IGFsbCBpdGVtcyB0b2dldGhlciBzZXBhcmF0ZWQgYnkgc2VwYXJhdG9yIGlmIHByb3ZpZGVkXG4gKi9cblxuZnVuY3Rpb24gam9pbihtYXliZUFycmF5LCBzZXBhcmF0b3IgPSAnJykge1xuICB2YXIgX21heWJlQXJyYXkkZmlsdGVyJGpvO1xuXG4gIHJldHVybiAoX21heWJlQXJyYXkkZmlsdGVyJGpvID1cbiAgICBtYXliZUFycmF5ID09PSBudWxsIHx8IG1heWJlQXJyYXkgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVBcnJheS5maWx0ZXIoKHgpID0+IHgpLmpvaW4oc2VwYXJhdG9yKSkgIT09IG51bGwgJiZcbiAgICBfbWF5YmVBcnJheSRmaWx0ZXIkam8gIT09IHZvaWQgMFxuICAgID8gX21heWJlQXJyYXkkZmlsdGVyJGpvXG4gICAgOiAnJztcbn1cbi8qKlxuICogR2l2ZW4gYXJyYXksIHByaW50IGVhY2ggaXRlbSBvbiBpdHMgb3duIGxpbmUsIHdyYXBwZWQgaW4gYW4gaW5kZW50ZWQgYHsgfWAgYmxvY2suXG4gKi9cblxuZnVuY3Rpb24gYmxvY2soYXJyYXkpIHtcbiAgcmV0dXJuIHdyYXAoJ3tcXG4nLCBpbmRlbnQoam9pbihhcnJheSwgJ1xcbicpKSwgJ1xcbn0nKTtcbn1cbi8qKlxuICogSWYgbWF5YmVTdHJpbmcgaXMgbm90IG51bGwgb3IgZW1wdHksIHRoZW4gd3JhcCB3aXRoIHN0YXJ0IGFuZCBlbmQsIG90aGVyd2lzZSBwcmludCBhbiBlbXB0eSBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gd3JhcChzdGFydCwgbWF5YmVTdHJpbmcsIGVuZCA9ICcnKSB7XG4gIHJldHVybiBtYXliZVN0cmluZyAhPSBudWxsICYmIG1heWJlU3RyaW5nICE9PSAnJ1xuICAgID8gc3RhcnQgKyBtYXliZVN0cmluZyArIGVuZFxuICAgIDogJyc7XG59XG5cbmZ1bmN0aW9uIGluZGVudChzdHIpIHtcbiAgcmV0dXJuIHdyYXAoJyAgJywgc3RyLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKSk7XG59XG5cbmZ1bmN0aW9uIGhhc011bHRpbGluZUl0ZW1zKG1heWJlQXJyYXkpIHtcbiAgdmFyIF9tYXliZUFycmF5JHNvbWU7XG5cbiAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gKF9tYXliZUFycmF5JHNvbWUgPVxuICAgIG1heWJlQXJyYXkgPT09IG51bGwgfHwgbWF5YmVBcnJheSA9PT0gdm9pZCAwXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBtYXliZUFycmF5LnNvbWUoKHN0cikgPT4gc3RyLmluY2x1ZGVzKCdcXG4nKSkpICE9PSBudWxsICYmXG4gICAgX21heWJlQXJyYXkkc29tZSAhPT0gdm9pZCAwXG4gICAgPyBfbWF5YmVBcnJheSRzb21lXG4gICAgOiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnN0YW5jZU9mIH0gZnJvbSAnLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qcyc7XG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBzb3VyY2UgaW5wdXQgdG8gR3JhcGhRTC4gVGhlIGBuYW1lYCBhbmQgYGxvY2F0aW9uT2Zmc2V0YCBwYXJhbWV0ZXJzIGFyZVxuICogb3B0aW9uYWwsIGJ1dCB0aGV5IGFyZSB1c2VmdWwgZm9yIGNsaWVudHMgd2hvIHN0b3JlIEdyYXBoUUwgZG9jdW1lbnRzIGluIHNvdXJjZSBmaWxlcy5cbiAqIEZvciBleGFtcGxlLCBpZiB0aGUgR3JhcGhRTCBpbnB1dCBzdGFydHMgYXQgbGluZSA0MCBpbiBhIGZpbGUgbmFtZWQgYEZvby5ncmFwaHFsYCwgaXQgbWlnaHRcbiAqIGJlIHVzZWZ1bCBmb3IgYG5hbWVgIHRvIGJlIGBcIkZvby5ncmFwaHFsXCJgIGFuZCBsb2NhdGlvbiB0byBiZSBgeyBsaW5lOiA0MCwgY29sdW1uOiAxIH1gLlxuICogVGhlIGBsaW5lYCBhbmQgYGNvbHVtbmAgcHJvcGVydGllcyBpbiBgbG9jYXRpb25PZmZzZXRgIGFyZSAxLWluZGV4ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBib2R5LFxuICAgIG5hbWUgPSAnR3JhcGhRTCByZXF1ZXN0JyxcbiAgICBsb2NhdGlvbk9mZnNldCA9IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDEsXG4gICAgfSxcbiAgKSB7XG4gICAgdHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnIHx8XG4gICAgICBkZXZBc3NlcnQoZmFsc2UsIGBCb2R5IG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkOiAke2luc3BlY3QoYm9keSl9LmApO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0ID0gbG9jYXRpb25PZmZzZXQ7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5saW5lID4gMCB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ2xpbmUgaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlLicsXG4gICAgICApO1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQuY29sdW1uID4gMCB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ2NvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyxcbiAgICAgICk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdTb3VyY2UnO1xuICB9XG59XG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgU291cmNlIG9iamVjdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTb3VyY2Uoc291cmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHNvdXJjZSwgU291cmNlKTtcbn1cbiIsIi8qKlxuICogQW4gZXhwb3J0ZWQgZW51bSBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQga2luZHMgb2YgdG9rZW5zIHRoYXQgdGhlXG4gKiBsZXhlciBlbWl0cy5cbiAqL1xudmFyIFRva2VuS2luZDtcblxuKGZ1bmN0aW9uIChUb2tlbktpbmQpIHtcbiAgVG9rZW5LaW5kWydTT0YnXSA9ICc8U09GPic7XG4gIFRva2VuS2luZFsnRU9GJ10gPSAnPEVPRj4nO1xuICBUb2tlbktpbmRbJ0JBTkcnXSA9ICchJztcbiAgVG9rZW5LaW5kWydET0xMQVInXSA9ICckJztcbiAgVG9rZW5LaW5kWydBTVAnXSA9ICcmJztcbiAgVG9rZW5LaW5kWydQQVJFTl9MJ10gPSAnKCc7XG4gIFRva2VuS2luZFsnUEFSRU5fUiddID0gJyknO1xuICBUb2tlbktpbmRbJ1NQUkVBRCddID0gJy4uLic7XG4gIFRva2VuS2luZFsnQ09MT04nXSA9ICc6JztcbiAgVG9rZW5LaW5kWydFUVVBTFMnXSA9ICc9JztcbiAgVG9rZW5LaW5kWydBVCddID0gJ0AnO1xuICBUb2tlbktpbmRbJ0JSQUNLRVRfTCddID0gJ1snO1xuICBUb2tlbktpbmRbJ0JSQUNLRVRfUiddID0gJ10nO1xuICBUb2tlbktpbmRbJ0JSQUNFX0wnXSA9ICd7JztcbiAgVG9rZW5LaW5kWydQSVBFJ10gPSAnfCc7XG4gIFRva2VuS2luZFsnQlJBQ0VfUiddID0gJ30nO1xuICBUb2tlbktpbmRbJ05BTUUnXSA9ICdOYW1lJztcbiAgVG9rZW5LaW5kWydJTlQnXSA9ICdJbnQnO1xuICBUb2tlbktpbmRbJ0ZMT0FUJ10gPSAnRmxvYXQnO1xuICBUb2tlbktpbmRbJ1NUUklORyddID0gJ1N0cmluZyc7XG4gIFRva2VuS2luZFsnQkxPQ0tfU1RSSU5HJ10gPSAnQmxvY2tTdHJpbmcnO1xuICBUb2tlbktpbmRbJ0NPTU1FTlQnXSA9ICdDb21tZW50Jztcbn0pKFRva2VuS2luZCB8fCAoVG9rZW5LaW5kID0ge30pKTtcblxuZXhwb3J0IHsgVG9rZW5LaW5kIH07XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSB0b2tlbiBraW5kcyB2YWx1ZXMuXG4gKlxuICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgVG9rZW5LaW5kYC4gV2lsbCBiZSByZW1vdmUgaW4gdjE3LlxuICovXG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBRdWVyeURvY3VtZW50S2V5cyB9IGZyb20gJy4vYXN0Lm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi9raW5kcy5tanMnO1xuLyoqXG4gKiBBIHZpc2l0b3IgaXMgcHJvdmlkZWQgdG8gdmlzaXQsIGl0IGNvbnRhaW5zIHRoZSBjb2xsZWN0aW9uIG9mXG4gKiByZWxldmFudCBmdW5jdGlvbnMgdG8gYmUgY2FsbGVkIGR1cmluZyB0aGUgdmlzaXRvcidzIHRyYXZlcnNhbC5cbiAqL1xuXG5leHBvcnQgY29uc3QgQlJFQUsgPSBPYmplY3QuZnJlZXplKHt9KTtcbi8qKlxuICogdmlzaXQoKSB3aWxsIHdhbGsgdGhyb3VnaCBhbiBBU1QgdXNpbmcgYSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwsIGNhbGxpbmdcbiAqIHRoZSB2aXNpdG9yJ3MgZW50ZXIgZnVuY3Rpb24gYXQgZWFjaCBub2RlIGluIHRoZSB0cmF2ZXJzYWwsIGFuZCBjYWxsaW5nIHRoZVxuICogbGVhdmUgZnVuY3Rpb24gYWZ0ZXIgdmlzaXRpbmcgdGhhdCBub2RlIGFuZCBhbGwgb2YgaXRzIGNoaWxkIG5vZGVzLlxuICpcbiAqIEJ5IHJldHVybmluZyBkaWZmZXJlbnQgdmFsdWVzIGZyb20gdGhlIGVudGVyIGFuZCBsZWF2ZSBmdW5jdGlvbnMsIHRoZVxuICogYmVoYXZpb3Igb2YgdGhlIHZpc2l0b3IgY2FuIGJlIGFsdGVyZWQsIGluY2x1ZGluZyBza2lwcGluZyBvdmVyIGEgc3ViLXRyZWUgb2ZcbiAqIHRoZSBBU1QgKGJ5IHJldHVybmluZyBmYWxzZSksIGVkaXRpbmcgdGhlIEFTVCBieSByZXR1cm5pbmcgYSB2YWx1ZSBvciBudWxsXG4gKiB0byByZW1vdmUgdGhlIHZhbHVlLCBvciB0byBzdG9wIHRoZSB3aG9sZSB0cmF2ZXJzYWwgYnkgcmV0dXJuaW5nIEJSRUFLLlxuICpcbiAqIFdoZW4gdXNpbmcgdmlzaXQoKSB0byBlZGl0IGFuIEFTVCwgdGhlIG9yaWdpbmFsIEFTVCB3aWxsIG5vdCBiZSBtb2RpZmllZCwgYW5kXG4gKiBhIG5ldyB2ZXJzaW9uIG9mIHRoZSBBU1Qgd2l0aCB0aGUgY2hhbmdlcyBhcHBsaWVkIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGVcbiAqIHZpc2l0IGZ1bmN0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBlZGl0ZWRBU1QgPSB2aXNpdChhc3QsIHtcbiAqICAgZW50ZXIobm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycykge1xuICogICAgIC8vIEByZXR1cm5cbiAqICAgICAvLyAgIHVuZGVmaW5lZDogbm8gYWN0aW9uXG4gKiAgICAgLy8gICBmYWxzZTogc2tpcCB2aXNpdGluZyB0aGlzIG5vZGVcbiAqICAgICAvLyAgIHZpc2l0b3IuQlJFQUs6IHN0b3AgdmlzaXRpbmcgYWx0b2dldGhlclxuICogICAgIC8vICAgbnVsbDogZGVsZXRlIHRoaXMgbm9kZVxuICogICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICB9LFxuICogICBsZWF2ZShub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKSB7XG4gKiAgICAgLy8gQHJldHVyblxuICogICAgIC8vICAgdW5kZWZpbmVkOiBubyBhY3Rpb25cbiAqICAgICAvLyAgIGZhbHNlOiBubyBhY3Rpb25cbiAqICAgICAvLyAgIHZpc2l0b3IuQlJFQUs6IHN0b3AgdmlzaXRpbmcgYWx0b2dldGhlclxuICogICAgIC8vICAgbnVsbDogZGVsZXRlIHRoaXMgbm9kZVxuICogICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEFsdGVybmF0aXZlbHkgdG8gcHJvdmlkaW5nIGVudGVyKCkgYW5kIGxlYXZlKCkgZnVuY3Rpb25zLCBhIHZpc2l0b3IgY2FuXG4gKiBpbnN0ZWFkIHByb3ZpZGUgZnVuY3Rpb25zIG5hbWVkIHRoZSBzYW1lIGFzIHRoZSBraW5kcyBvZiBBU1Qgbm9kZXMsIG9yXG4gKiBlbnRlci9sZWF2ZSB2aXNpdG9ycyBhdCBhIG5hbWVkIGtleSwgbGVhZGluZyB0byB0aHJlZSBwZXJtdXRhdGlvbnMgb2YgdGhlXG4gKiB2aXNpdG9yIEFQSTpcbiAqXG4gKiAxKSBOYW1lZCB2aXNpdG9ycyB0cmlnZ2VyZWQgd2hlbiBlbnRlcmluZyBhIG5vZGUgb2YgYSBzcGVjaWZpYyBraW5kLlxuICpcbiAqIGBgYHRzXG4gKiB2aXNpdChhc3QsIHtcbiAqICAgS2luZChub2RlKSB7XG4gKiAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICpcbiAqIDIpIE5hbWVkIHZpc2l0b3JzIHRoYXQgdHJpZ2dlciB1cG9uIGVudGVyaW5nIGFuZCBsZWF2aW5nIGEgbm9kZSBvZiBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogYGBgdHNcbiAqIHZpc2l0KGFzdCwge1xuICogICBLaW5kOiB7XG4gKiAgICAgZW50ZXIobm9kZSkge1xuICogICAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICB9XG4gKiAgICAgbGVhdmUobm9kZSkge1xuICogICAgICAgLy8gbGVhdmUgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiAzKSBHZW5lcmljIHZpc2l0b3JzIHRoYXQgdHJpZ2dlciB1cG9uIGVudGVyaW5nIGFuZCBsZWF2aW5nIGFueSBub2RlLlxuICpcbiAqIGBgYHRzXG4gKiB2aXNpdChhc3QsIHtcbiAqICAgZW50ZXIobm9kZSkge1xuICogICAgIC8vIGVudGVyIGFueSBub2RlXG4gKiAgIH0sXG4gKiAgIGxlYXZlKG5vZGUpIHtcbiAqICAgICAvLyBsZWF2ZSBhbnkgbm9kZVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0KHJvb3QsIHZpc2l0b3IsIHZpc2l0b3JLZXlzID0gUXVlcnlEb2N1bWVudEtleXMpIHtcbiAgY29uc3QgZW50ZXJMZWF2ZU1hcCA9IG5ldyBNYXAoKTtcblxuICBmb3IgKGNvbnN0IGtpbmQgb2YgT2JqZWN0LnZhbHVlcyhLaW5kKSkge1xuICAgIGVudGVyTGVhdmVNYXAuc2V0KGtpbmQsIGdldEVudGVyTGVhdmVGb3JLaW5kKHZpc2l0b3IsIGtpbmQpKTtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZi1pbml0ICovXG5cbiAgbGV0IHN0YWNrID0gdW5kZWZpbmVkO1xuICBsZXQgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkocm9vdCk7XG4gIGxldCBrZXlzID0gW3Jvb3RdO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgbGV0IGVkaXRzID0gW107XG4gIGxldCBub2RlID0gcm9vdDtcbiAgbGV0IGtleSA9IHVuZGVmaW5lZDtcbiAgbGV0IHBhcmVudCA9IHVuZGVmaW5lZDtcbiAgY29uc3QgcGF0aCA9IFtdO1xuICBjb25zdCBhbmNlc3RvcnMgPSBbXTtcbiAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZi1pbml0ICovXG5cbiAgZG8ge1xuICAgIGluZGV4Kys7XG4gICAgY29uc3QgaXNMZWF2aW5nID0gaW5kZXggPT09IGtleXMubGVuZ3RoO1xuICAgIGNvbnN0IGlzRWRpdGVkID0gaXNMZWF2aW5nICYmIGVkaXRzLmxlbmd0aCAhPT0gMDtcblxuICAgIGlmIChpc0xlYXZpbmcpIHtcbiAgICAgIGtleSA9IGFuY2VzdG9ycy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgcGFyZW50ID0gYW5jZXN0b3JzLnBvcCgpO1xuXG4gICAgICBpZiAoaXNFZGl0ZWQpIHtcbiAgICAgICAgaWYgKGluQXJyYXkpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5zbGljZSgpO1xuICAgICAgICAgIGxldCBlZGl0T2Zmc2V0ID0gMDtcblxuICAgICAgICAgIGZvciAoY29uc3QgW2VkaXRLZXksIGVkaXRWYWx1ZV0gb2YgZWRpdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5S2V5ID0gZWRpdEtleSAtIGVkaXRPZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmIChlZGl0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgbm9kZS5zcGxpY2UoYXJyYXlLZXksIDEpO1xuICAgICAgICAgICAgICBlZGl0T2Zmc2V0Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlW2FycmF5S2V5XSA9IGVkaXRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhub2RlKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBbZWRpdEtleSwgZWRpdFZhbHVlXSBvZiBlZGl0cykge1xuICAgICAgICAgICAgbm9kZVtlZGl0S2V5XSA9IGVkaXRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBzdGFjay5pbmRleDtcbiAgICAgIGtleXMgPSBzdGFjay5rZXlzO1xuICAgICAgZWRpdHMgPSBzdGFjay5lZGl0cztcbiAgICAgIGluQXJyYXkgPSBzdGFjay5pbkFycmF5O1xuICAgICAgc3RhY2sgPSBzdGFjay5wcmV2O1xuICAgIH0gZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICBrZXkgPSBpbkFycmF5ID8gaW5kZXggOiBrZXlzW2luZGV4XTtcbiAgICAgIG5vZGUgPSBwYXJlbnRba2V5XTtcblxuICAgICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwYXRoLnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICB2YXIgX2VudGVyTGVhdmVNYXAkZ2V0LCBfZW50ZXJMZWF2ZU1hcCRnZXQyO1xuXG4gICAgICBpc05vZGUobm9kZSkgfHwgZGV2QXNzZXJ0KGZhbHNlLCBgSW52YWxpZCBBU1QgTm9kZTogJHtpbnNwZWN0KG5vZGUpfS5gKTtcbiAgICAgIGNvbnN0IHZpc2l0Rm4gPSBpc0xlYXZpbmdcbiAgICAgICAgPyAoX2VudGVyTGVhdmVNYXAkZ2V0ID0gZW50ZXJMZWF2ZU1hcC5nZXQobm9kZS5raW5kKSkgPT09IG51bGwgfHxcbiAgICAgICAgICBfZW50ZXJMZWF2ZU1hcCRnZXQgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBfZW50ZXJMZWF2ZU1hcCRnZXQubGVhdmVcbiAgICAgICAgOiAoX2VudGVyTGVhdmVNYXAkZ2V0MiA9IGVudGVyTGVhdmVNYXAuZ2V0KG5vZGUua2luZCkpID09PSBudWxsIHx8XG4gICAgICAgICAgX2VudGVyTGVhdmVNYXAkZ2V0MiA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX2VudGVyTGVhdmVNYXAkZ2V0Mi5lbnRlcjtcbiAgICAgIHJlc3VsdCA9XG4gICAgICAgIHZpc2l0Rm4gPT09IG51bGwgfHwgdmlzaXRGbiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IHZpc2l0Rm4uY2FsbCh2aXNpdG9yLCBub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gQlJFQUspIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmICghaXNMZWF2aW5nKSB7XG4gICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlZGl0cy5wdXNoKFtrZXksIHJlc3VsdF0pO1xuXG4gICAgICAgIGlmICghaXNMZWF2aW5nKSB7XG4gICAgICAgICAgaWYgKGlzTm9kZShyZXN1bHQpKSB7XG4gICAgICAgICAgICBub2RlID0gcmVzdWx0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGlzRWRpdGVkKSB7XG4gICAgICBlZGl0cy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX25vZGUka2luZDtcblxuICAgICAgc3RhY2sgPSB7XG4gICAgICAgIGluQXJyYXksXG4gICAgICAgIGluZGV4LFxuICAgICAgICBrZXlzLFxuICAgICAgICBlZGl0cyxcbiAgICAgICAgcHJldjogc3RhY2ssXG4gICAgICB9O1xuICAgICAgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZSk7XG4gICAgICBrZXlzID0gaW5BcnJheVxuICAgICAgICA/IG5vZGVcbiAgICAgICAgOiAoX25vZGUka2luZCA9IHZpc2l0b3JLZXlzW25vZGUua2luZF0pICE9PSBudWxsICYmXG4gICAgICAgICAgX25vZGUka2luZCAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGUka2luZFxuICAgICAgICA6IFtdO1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGVkaXRzID0gW107XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gbm9kZTtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YWNrICE9PSB1bmRlZmluZWQpO1xuXG4gIGlmIChlZGl0cy5sZW5ndGggIT09IDApIHtcbiAgICAvLyBOZXcgcm9vdFxuICAgIHJldHVybiBlZGl0c1tlZGl0cy5sZW5ndGggLSAxXVsxXTtcbiAgfVxuXG4gIHJldHVybiByb290O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZpc2l0b3IgaW5zdGFuY2Ugd2hpY2ggZGVsZWdhdGVzIHRvIG1hbnkgdmlzaXRvcnMgdG8gcnVuIGluXG4gKiBwYXJhbGxlbC4gRWFjaCB2aXNpdG9yIHdpbGwgYmUgdmlzaXRlZCBmb3IgZWFjaCBub2RlIGJlZm9yZSBtb3Zpbmcgb24uXG4gKlxuICogSWYgYSBwcmlvciB2aXNpdG9yIGVkaXRzIGEgbm9kZSwgbm8gZm9sbG93aW5nIHZpc2l0b3JzIHdpbGwgc2VlIHRoYXQgbm9kZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRJblBhcmFsbGVsKHZpc2l0b3JzKSB7XG4gIGNvbnN0IHNraXBwaW5nID0gbmV3IEFycmF5KHZpc2l0b3JzLmxlbmd0aCkuZmlsbChudWxsKTtcbiAgY29uc3QgbWVyZ2VkVmlzaXRvciA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBraW5kIG9mIE9iamVjdC52YWx1ZXMoS2luZCkpIHtcbiAgICBsZXQgaGFzVmlzaXRvciA9IGZhbHNlO1xuICAgIGNvbnN0IGVudGVyTGlzdCA9IG5ldyBBcnJheSh2aXNpdG9ycy5sZW5ndGgpLmZpbGwodW5kZWZpbmVkKTtcbiAgICBjb25zdCBsZWF2ZUxpc3QgPSBuZXcgQXJyYXkodmlzaXRvcnMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpc2l0b3JzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCB7IGVudGVyLCBsZWF2ZSB9ID0gZ2V0RW50ZXJMZWF2ZUZvcktpbmQodmlzaXRvcnNbaV0sIGtpbmQpO1xuICAgICAgaGFzVmlzaXRvciB8fCAoaGFzVmlzaXRvciA9IGVudGVyICE9IG51bGwgfHwgbGVhdmUgIT0gbnVsbCk7XG4gICAgICBlbnRlckxpc3RbaV0gPSBlbnRlcjtcbiAgICAgIGxlYXZlTGlzdFtpXSA9IGxlYXZlO1xuICAgIH1cblxuICAgIGlmICghaGFzVmlzaXRvcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWVyZ2VkRW50ZXJMZWF2ZSA9IHtcbiAgICAgIGVudGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aXNpdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChza2lwcGluZ1tpXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9lbnRlckxpc3QkaTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID1cbiAgICAgICAgICAgICAgKF9lbnRlckxpc3QkaSA9IGVudGVyTGlzdFtpXSkgPT09IG51bGwgfHwgX2VudGVyTGlzdCRpID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICAgIDogX2VudGVyTGlzdCRpLmFwcGx5KHZpc2l0b3JzW2ldLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgc2tpcHBpbmdbaV0gPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBsZWF2ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlzaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc2tpcHBpbmdbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBfbGVhdmVMaXN0JGk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICAgICAgICAgIChfbGVhdmVMaXN0JGkgPSBsZWF2ZUxpc3RbaV0pID09PSBudWxsIHx8IF9sZWF2ZUxpc3QkaSA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgICA6IF9sZWF2ZUxpc3QkaS5hcHBseSh2aXNpdG9yc1tpXSwgYXJncyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHNraXBwaW5nW2ldID09PSBub2RlKSB7XG4gICAgICAgICAgICBza2lwcGluZ1tpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gICAgbWVyZ2VkVmlzaXRvcltraW5kXSA9IG1lcmdlZEVudGVyTGVhdmU7XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkVmlzaXRvcjtcbn1cbi8qKlxuICogR2l2ZW4gYSB2aXNpdG9yIGluc3RhbmNlIGFuZCBhIG5vZGUga2luZCwgcmV0dXJuIEVudGVyTGVhdmVWaXNpdG9yIGZvciB0aGF0IGtpbmQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGVyTGVhdmVGb3JLaW5kKHZpc2l0b3IsIGtpbmQpIHtcbiAgY29uc3Qga2luZFZpc2l0b3IgPSB2aXNpdG9yW2tpbmRdO1xuXG4gIGlmICh0eXBlb2Yga2luZFZpc2l0b3IgPT09ICdvYmplY3QnKSB7XG4gICAgLy8geyBLaW5kOiB7IGVudGVyKCkge30sIGxlYXZlKCkge30gfSB9XG4gICAgcmV0dXJuIGtpbmRWaXNpdG9yO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBraW5kVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHsgS2luZCgpIHt9IH1cbiAgICByZXR1cm4ge1xuICAgICAgZW50ZXI6IGtpbmRWaXNpdG9yLFxuICAgICAgbGVhdmU6IHVuZGVmaW5lZCxcbiAgICB9O1xuICB9IC8vIHsgZW50ZXIoKSB7fSwgbGVhdmUoKSB7fSB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbnRlcjogdmlzaXRvci5lbnRlcixcbiAgICBsZWF2ZTogdmlzaXRvci5sZWF2ZSxcbiAgfTtcbn1cbi8qKlxuICogR2l2ZW4gYSB2aXNpdG9yIGluc3RhbmNlLCBpZiBpdCBpcyBsZWF2aW5nIG9yIG5vdCwgYW5kIGEgbm9kZSBraW5kLCByZXR1cm5cbiAqIHRoZSBmdW5jdGlvbiB0aGUgdmlzaXRvciBydW50aW1lIHNob3VsZCBjYWxsLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYGdldEVudGVyTGVhdmVGb3JLaW5kYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjE3XG4gKi9cblxuLyogYzggaWdub3JlIG5leHQgOCAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmlzaXRGbih2aXNpdG9yLCBraW5kLCBpc0xlYXZpbmcpIHtcbiAgY29uc3QgeyBlbnRlciwgbGVhdmUgfSA9IGdldEVudGVyTGVhdmVGb3JLaW5kKHZpc2l0b3IsIGtpbmQpO1xuICByZXR1cm4gaXNMZWF2aW5nID8gbGVhdmUgOiBlbnRlcjtcbn1cbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IGlzTmFtZUNvbnRpbnVlLCBpc05hbWVTdGFydCB9IGZyb20gJy4uL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMubWpzJztcbi8qKlxuICogVXBob2xkcyB0aGUgc3BlYyBydWxlcyBhYm91dCBuYW1pbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5hbWUobmFtZSkge1xuICBuYW1lICE9IG51bGwgfHwgZGV2QXNzZXJ0KGZhbHNlLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoZmFsc2UsICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgc3RyaW5nLicpO1xuXG4gIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ0V4cGVjdGVkIG5hbWUgdG8gYmUgYSBub24tZW1wdHkgc3RyaW5nLicpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBuYW1lLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCFpc05hbWVDb250aW51ZShuYW1lLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgTmFtZXMgbXVzdCBvbmx5IGNvbnRhaW4gW19hLXpBLVowLTldIGJ1dCBcIiR7bmFtZX1cIiBkb2VzIG5vdC5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWlzTmFtZVN0YXJ0KG5hbWUuY2hhckNvZGVBdCgwKSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgYE5hbWVzIG11c3Qgc3RhcnQgd2l0aCBbX2EtekEtWl0gYnV0IFwiJHtuYW1lfVwiIGRvZXMgbm90LmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZyBlbnVtIHZhbHVlcy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RW51bVZhbHVlTmFtZShuYW1lKSB7XG4gIGlmIChuYW1lID09PSAndHJ1ZScgfHwgbmFtZSA9PT0gJ2ZhbHNlJyB8fCBuYW1lID09PSAnbnVsbCcpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKGBFbnVtIHZhbHVlcyBjYW5ub3QgYmUgbmFtZWQ6ICR7bmFtZX1gKTtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnROYW1lKG5hbWUpO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5RnVuYyh4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHsgZGV2QXNzZXJ0IH0gZnJvbSAnLi4vanN1dGlscy9kZXZBc3NlcnQubWpzJztcbmltcG9ydCB7IGRpZFlvdU1lYW4gfSBmcm9tICcuLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzJztcbmltcG9ydCB7IGlkZW50aXR5RnVuYyB9IGZyb20gJy4uL2pzdXRpbHMvaWRlbnRpdHlGdW5jLm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnN0YW5jZU9mIH0gZnJvbSAnLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdExpa2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMnO1xuaW1wb3J0IHsga2V5TWFwIH0gZnJvbSAnLi4vanN1dGlscy9rZXlNYXAubWpzJztcbmltcG9ydCB7IGtleVZhbE1hcCB9IGZyb20gJy4uL2pzdXRpbHMva2V5VmFsTWFwLm1qcyc7XG5pbXBvcnQgeyBtYXBWYWx1ZSB9IGZyb20gJy4uL2pzdXRpbHMvbWFwVmFsdWUubWpzJztcbmltcG9ydCB7IHN1Z2dlc3Rpb25MaXN0IH0gZnJvbSAnLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanMnO1xuaW1wb3J0IHsgdG9PYmpNYXAgfSBmcm9tICcuLi9qc3V0aWxzL3RvT2JqTWFwLm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyB2YWx1ZUZyb21BU1RVbnR5cGVkIH0gZnJvbSAnLi4vdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVFVudHlwZWQubWpzJztcbmltcG9ydCB7IGFzc2VydEVudW1WYWx1ZU5hbWUsIGFzc2VydE5hbWUgfSBmcm9tICcuL2Fzc2VydE5hbWUubWpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodHlwZSkge1xuICByZXR1cm4gKFxuICAgIGlzU2NhbGFyVHlwZSh0eXBlKSB8fFxuICAgIGlzT2JqZWN0VHlwZSh0eXBlKSB8fFxuICAgIGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fFxuICAgIGlzVW5pb25UeXBlKHR5cGUpIHx8XG4gICAgaXNFbnVtVHlwZSh0eXBlKSB8fFxuICAgIGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHx8XG4gICAgaXNMaXN0VHlwZSh0eXBlKSB8fFxuICAgIGlzTm9uTnVsbFR5cGUodHlwZSlcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1R5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIHR5cGUuYCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlcmUgYXJlIHByZWRpY2F0ZXMgZm9yIGVhY2gga2luZCBvZiBHcmFwaFFMIHR5cGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2NhbGFyVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxTY2FsYXJUeXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTY2FsYXJUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIFNjYWxhciB0eXBlLmApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTE9iamVjdFR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUodHlwZSkge1xuICBpZiAoIWlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgT2JqZWN0IHR5cGUuYCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyZmFjZVR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMSW50ZXJmYWNlVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SW50ZXJmYWNlVHlwZSh0eXBlKSB7XG4gIGlmICghaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIEludGVyZmFjZSB0eXBlLmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5pb25UeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTFVuaW9uVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VW5pb25UeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgVW5pb24gdHlwZS5gKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRW51bVR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMRW51bVR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVudW1UeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke2luc3BlY3QodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBFbnVtIHR5cGUuYCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElucHV0T2JqZWN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgSW5wdXQgT2JqZWN0IHR5cGUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxMaXN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRMaXN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgTGlzdCB0eXBlLmApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxOb25OdWxsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROb25OdWxsVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgTm9uLU51bGwgdHlwZS5gKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgYmUgdXNlZCBhcyBpbnB1dCB0eXBlcyBmb3IgYXJndW1lbnRzIGFuZCBkaXJlY3RpdmVzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0VHlwZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNTY2FsYXJUeXBlKHR5cGUpIHx8XG4gICAgaXNFbnVtVHlwZSh0eXBlKSB8fFxuICAgIGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHx8XG4gICAgKGlzV3JhcHBpbmdUeXBlKHR5cGUpICYmIGlzSW5wdXRUeXBlKHR5cGUub2ZUeXBlKSlcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbnB1dFR5cGUodHlwZSkge1xuICBpZiAoIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke2luc3BlY3QodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBpbnB1dCB0eXBlLmApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBiZSB1c2VkIGFzIG91dHB1dCB0eXBlcyBhcyB0aGUgcmVzdWx0IG9mIGZpZWxkcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPdXRwdXRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIChcbiAgICBpc1NjYWxhclR5cGUodHlwZSkgfHxcbiAgICBpc09iamVjdFR5cGUodHlwZSkgfHxcbiAgICBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHxcbiAgICBpc1VuaW9uVHlwZSh0eXBlKSB8fFxuICAgIGlzRW51bVR5cGUodHlwZSkgfHxcbiAgICAoaXNXcmFwcGluZ1R5cGUodHlwZSkgJiYgaXNPdXRwdXRUeXBlKHR5cGUub2ZUeXBlKSlcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRPdXRwdXRUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc091dHB1dFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIG91dHB1dCB0eXBlLmApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0eXBlcyB3aGljaCBtYXkgYmUgbGVhZiB2YWx1ZXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVhZlR5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzRW51bVR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TGVhZlR5cGUodHlwZSkge1xuICBpZiAoIWlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIGxlYWYgdHlwZS5gKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgZGVzY3JpYmUgdGhlIHBhcmVudCBjb250ZXh0IG9mIGEgc2VsZWN0aW9uIHNldC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb3NpdGVUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Q29tcG9zaXRlVHlwZSh0eXBlKSB7XG4gIGlmICghaXNDb21wb3NpdGVUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIGNvbXBvc2l0ZSB0eXBlLmAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgZGVzY3JpYmUgdGhlIHBhcmVudCBjb250ZXh0IG9mIGEgc2VsZWN0aW9uIHNldC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBYnN0cmFjdFR5cGUodHlwZSkge1xuICByZXR1cm4gaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzVW5pb25UeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEFic3RyYWN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNBYnN0cmFjdFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIGFic3RyYWN0IHR5cGUuYCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogTGlzdCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIGxpc3QgaXMgYSB3cmFwcGluZyB0eXBlIHdoaWNoIHBvaW50cyB0byBhbm90aGVyIHR5cGUuXG4gKiBMaXN0cyBhcmUgb2Z0ZW4gY3JlYXRlZCB3aXRoaW4gdGhlIGNvbnRleHQgb2YgZGVmaW5pbmcgdGhlIGZpZWxkcyBvZlxuICogYW4gb2JqZWN0IHR5cGUuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgUGVyc29uVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgIG5hbWU6ICdQZXJzb24nLFxuICogICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgcGFyZW50czogeyB0eXBlOiBuZXcgR3JhcGhRTExpc3QoUGVyc29uVHlwZSkgfSxcbiAqICAgICBjaGlsZHJlbjogeyB0eXBlOiBuZXcgR3JhcGhRTExpc3QoUGVyc29uVHlwZSkgfSxcbiAqICAgfSlcbiAqIH0pXG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgY2xhc3MgR3JhcGhRTExpc3Qge1xuICBjb25zdHJ1Y3RvcihvZlR5cGUpIHtcbiAgICBpc1R5cGUob2ZUeXBlKSB8fFxuICAgICAgZGV2QXNzZXJ0KGZhbHNlLCBgRXhwZWN0ZWQgJHtpbnNwZWN0KG9mVHlwZSl9IHRvIGJlIGEgR3JhcGhRTCB0eXBlLmApO1xuICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTExpc3QnO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbJyArIFN0cmluZyh0aGlzLm9mVHlwZSkgKyAnXSc7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuLyoqXG4gKiBOb24tTnVsbCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIG5vbi1udWxsIGlzIGEgd3JhcHBpbmcgdHlwZSB3aGljaCBwb2ludHMgdG8gYW5vdGhlciB0eXBlLlxuICogTm9uLW51bGwgdHlwZXMgZW5mb3JjZSB0aGF0IHRoZWlyIHZhbHVlcyBhcmUgbmV2ZXIgbnVsbCBhbmQgY2FuIGVuc3VyZVxuICogYW4gZXJyb3IgaXMgcmFpc2VkIGlmIHRoaXMgZXZlciBvY2N1cnMgZHVyaW5nIGEgcmVxdWVzdC4gSXQgaXMgdXNlZnVsIGZvclxuICogZmllbGRzIHdoaWNoIHlvdSBjYW4gbWFrZSBhIHN0cm9uZyBndWFyYW50ZWUgb24gbm9uLW51bGxhYmlsaXR5LCBmb3IgZXhhbXBsZVxuICogdXN1YWxseSB0aGUgaWQgZmllbGQgb2YgYSBkYXRhYmFzZSByb3cgd2lsbCBuZXZlciBiZSBudWxsLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IFJvd1R5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnUm93JyxcbiAqICAgZmllbGRzOiAoKSA9PiAoe1xuICogICAgIGlkOiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSB9LFxuICogICB9KVxuICogfSlcbiAqIGBgYFxuICogTm90ZTogdGhlIGVuZm9yY2VtZW50IG9mIG5vbi1udWxsYWJpbGl0eSBvY2N1cnMgd2l0aGluIHRoZSBleGVjdXRvci5cbiAqL1xuXG5leHBvcnQgY2xhc3MgR3JhcGhRTE5vbk51bGwge1xuICBjb25zdHJ1Y3RvcihvZlR5cGUpIHtcbiAgICBpc051bGxhYmxlVHlwZShvZlR5cGUpIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgRXhwZWN0ZWQgJHtpbnNwZWN0KG9mVHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBudWxsYWJsZSB0eXBlLmAsXG4gICAgICApO1xuICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTE5vbk51bGwnO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLm9mVHlwZSkgKyAnISc7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyB3cmFwIGFuZCBtb2RpZnkgb3RoZXIgdHlwZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNXcmFwcGluZ1R5cGUodHlwZSkge1xuICByZXR1cm4gaXNMaXN0VHlwZSh0eXBlKSB8fCBpc05vbk51bGxUeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFdyYXBwaW5nVHlwZSh0eXBlKSB7XG4gIGlmICghaXNXcmFwcGluZ1R5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7aW5zcGVjdCh0eXBlKX0gdG8gYmUgYSBHcmFwaFFMIHdyYXBwaW5nIHR5cGUuYCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgY2FuIGFsbCBhY2NlcHQgbnVsbCBhcyBhIHZhbHVlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxhYmxlVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1R5cGUodHlwZSkgJiYgIWlzTm9uTnVsbFR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TnVsbGFibGVUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc051bGxhYmxlVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHR5cGUpfSB0byBiZSBhIEdyYXBoUUwgbnVsbGFibGUgdHlwZS5gKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bGxhYmxlVHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbFR5cGUodHlwZSkgPyB0eXBlLm9mVHlwZSA6IHR5cGU7XG4gIH1cbn1cbi8qKlxuICogVGhlc2UgbmFtZWQgdHlwZXMgZG8gbm90IGluY2x1ZGUgbW9kaWZpZXJzIGxpa2UgTGlzdCBvciBOb25OdWxsLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkVHlwZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNTY2FsYXJUeXBlKHR5cGUpIHx8XG4gICAgaXNPYmplY3RUeXBlKHR5cGUpIHx8XG4gICAgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8XG4gICAgaXNVbmlvblR5cGUodHlwZSkgfHxcbiAgICBpc0VudW1UeXBlKHR5cGUpIHx8XG4gICAgaXNJbnB1dE9iamVjdFR5cGUodHlwZSlcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROYW1lZFR5cGUodHlwZSkge1xuICBpZiAoIWlzTmFtZWRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke2luc3BlY3QodHlwZSl9IHRvIGJlIGEgR3JhcGhRTCBuYW1lZCB0eXBlLmApO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZWRUeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUpIHtcbiAgICBsZXQgdW53cmFwcGVkVHlwZSA9IHR5cGU7XG5cbiAgICB3aGlsZSAoaXNXcmFwcGluZ1R5cGUodW53cmFwcGVkVHlwZSkpIHtcbiAgICAgIHVud3JhcHBlZFR5cGUgPSB1bndyYXBwZWRUeXBlLm9mVHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW53cmFwcGVkVHlwZTtcbiAgfVxufVxuLyoqXG4gKiBVc2VkIHdoaWxlIGRlZmluaW5nIEdyYXBoUUwgdHlwZXMgdG8gYWxsb3cgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW5cbiAqIG90aGVyd2lzZSBpbW11dGFibGUgdHlwZSBkZWZpbml0aW9ucy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuayh0aHVuaykge1xuICByZXR1cm4gdHlwZW9mIHRodW5rID09PSAnZnVuY3Rpb24nID8gdGh1bmsoKSA6IHRodW5rO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVPYmpNYXBUaHVuayh0aHVuaykge1xuICByZXR1cm4gdHlwZW9mIHRodW5rID09PSAnZnVuY3Rpb24nID8gdGh1bmsoKSA6IHRodW5rO1xufVxuLyoqXG4gKiBDdXN0b20gZXh0ZW5zaW9uc1xuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgYSB1bmlxdWUgaWRlbnRpZmllciBuYW1lIGZvciB5b3VyIGV4dGVuc2lvbiwgZm9yIGV4YW1wbGUgdGhlIG5hbWUgb2ZcbiAqIHlvdXIgbGlicmFyeSBvciBwcm9qZWN0LiBEbyBub3QgdXNlIGEgc2hvcnRlbmVkIGlkZW50aWZpZXIgYXMgdGhpcyBpbmNyZWFzZXNcbiAqIHRoZSByaXNrIG9mIGNvbmZsaWN0cy4gV2UgcmVjb21tZW5kIHlvdSBhZGQgYXQgbW9zdCBvbmUgZXh0ZW5zaW9uIGZpZWxkLFxuICogYW4gb2JqZWN0IHdoaWNoIGNhbiBjb250YWluIGFsbCB0aGUgdmFsdWVzIHlvdSBuZWVkLlxuICovXG5cbi8qKlxuICogU2NhbGFyIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFRoZSBsZWFmIHZhbHVlcyBvZiBhbnkgcmVxdWVzdCBhbmQgaW5wdXQgdmFsdWVzIHRvIGFyZ3VtZW50cyBhcmVcbiAqIFNjYWxhcnMgKG9yIEVudW1zKSBhbmQgYXJlIGRlZmluZWQgd2l0aCBhIG5hbWUgYW5kIGEgc2VyaWVzIG9mIGZ1bmN0aW9uc1xuICogdXNlZCB0byBwYXJzZSBpbnB1dCBmcm9tIGFzdCBvciB2YXJpYWJsZXMgYW5kIHRvIGVuc3VyZSB2YWxpZGl0eS5cbiAqXG4gKiBJZiBhIHR5cGUncyBzZXJpYWxpemUgZnVuY3Rpb24gcmV0dXJucyBgbnVsbGAgb3IgZG9lcyBub3QgcmV0dXJuIGEgdmFsdWVcbiAqIChpLmUuIGl0IHJldHVybnMgYHVuZGVmaW5lZGApIHRoZW4gYW4gZXJyb3Igd2lsbCBiZSByYWlzZWQgYW5kIGEgYG51bGxgXG4gKiB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGluIHRoZSByZXNwb25zZS4gSXQgaXMgYWx3YXlzIGJldHRlciB0byB2YWxpZGF0ZVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IE9kZFR5cGUgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICogICBuYW1lOiAnT2RkJyxcbiAqICAgc2VyaWFsaXplKHZhbHVlKSB7XG4gKiAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XG4gKiAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gKiAgICAgICAgIGBTY2FsYXIgXCJPZGRcIiBjYW5ub3QgcmVwcmVzZW50IFwiJHt2YWx1ZX1cIiBzaW5jZSBpdCBpcyBub3QgYSBmaW5pdGUgbnVtYmVyLmAsXG4gKiAgICAgICApO1xuICogICAgIH1cbiAqXG4gKiAgICAgaWYgKHZhbHVlICUgMiA9PT0gMCkge1xuICogICAgICAgdGhyb3cgbmV3IEVycm9yKGBTY2FsYXIgXCJPZGRcIiBjYW5ub3QgcmVwcmVzZW50IFwiJHt2YWx1ZX1cIiBzaW5jZSBpdCBpcyBldmVuLmApO1xuICogICAgIH1cbiAqICAgICByZXR1cm4gdmFsdWU7XG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaFFMU2NhbGFyVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJHBhcnNlVmFsdWUsXG4gICAgICBfY29uZmlnJHNlcmlhbGl6ZSxcbiAgICAgIF9jb25maWckcGFyc2VMaXRlcmFsLFxuICAgICAgX2NvbmZpZyRleHRlbnNpb25BU1ROO1xuXG4gICAgY29uc3QgcGFyc2VWYWx1ZSA9XG4gICAgICAoX2NvbmZpZyRwYXJzZVZhbHVlID0gY29uZmlnLnBhcnNlVmFsdWUpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJHBhcnNlVmFsdWUgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckcGFyc2VWYWx1ZVxuICAgICAgICA6IGlkZW50aXR5RnVuYztcbiAgICB0aGlzLm5hbWUgPSBhc3NlcnROYW1lKGNvbmZpZy5uYW1lKTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuc3BlY2lmaWVkQnlVUkwgPSBjb25maWcuc3BlY2lmaWVkQnlVUkw7XG4gICAgdGhpcy5zZXJpYWxpemUgPVxuICAgICAgKF9jb25maWckc2VyaWFsaXplID0gY29uZmlnLnNlcmlhbGl6ZSkgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckc2VyaWFsaXplICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJHNlcmlhbGl6ZVxuICAgICAgICA6IGlkZW50aXR5RnVuYztcbiAgICB0aGlzLnBhcnNlVmFsdWUgPSBwYXJzZVZhbHVlO1xuICAgIHRoaXMucGFyc2VMaXRlcmFsID1cbiAgICAgIChfY29uZmlnJHBhcnNlTGl0ZXJhbCA9IGNvbmZpZy5wYXJzZUxpdGVyYWwpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJHBhcnNlTGl0ZXJhbCAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRwYXJzZUxpdGVyYWxcbiAgICAgICAgOiAobm9kZSwgdmFyaWFibGVzKSA9PiBwYXJzZVZhbHVlKHZhbHVlRnJvbUFTVFVudHlwZWQobm9kZSwgdmFyaWFibGVzKSk7XG4gICAgdGhpcy5leHRlbnNpb25zID0gdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTiA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTiAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRleHRlbnNpb25BU1ROXG4gICAgICAgIDogW107XG4gICAgY29uZmlnLnNwZWNpZmllZEJ5VVJMID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjb25maWcuc3BlY2lmaWVkQnlVUkwgPT09ICdzdHJpbmcnIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBcInNwZWNpZmllZEJ5VVJMXCIgYXMgYSBzdHJpbmcsIGAgK1xuICAgICAgICAgIGBidXQgZ290OiAke2luc3BlY3QoY29uZmlnLnNwZWNpZmllZEJ5VVJMKX0uYCxcbiAgICAgICk7XG4gICAgY29uZmlnLnNlcmlhbGl6ZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgY29uZmlnLnNlcmlhbGl6ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7dGhpcy5uYW1lfSBtdXN0IHByb3ZpZGUgXCJzZXJpYWxpemVcIiBmdW5jdGlvbi4gSWYgdGhpcyBjdXN0b20gU2NhbGFyIGlzIGFsc28gdXNlZCBhcyBhbiBpbnB1dCB0eXBlLCBlbnN1cmUgXCJwYXJzZVZhbHVlXCIgYW5kIFwicGFyc2VMaXRlcmFsXCIgZnVuY3Rpb25zIGFyZSBhbHNvIHByb3ZpZGVkLmAsXG4gICAgICApO1xuXG4gICAgaWYgKGNvbmZpZy5wYXJzZUxpdGVyYWwpIHtcbiAgICAgICh0eXBlb2YgY29uZmlnLnBhcnNlVmFsdWUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIGNvbmZpZy5wYXJzZUxpdGVyYWwgPT09ICdmdW5jdGlvbicpIHx8XG4gICAgICAgIGRldkFzc2VydChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBib3RoIFwicGFyc2VWYWx1ZVwiIGFuZCBcInBhcnNlTGl0ZXJhbFwiIGZ1bmN0aW9ucy5gLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxTY2FsYXJUeXBlJztcbiAgfVxuXG4gIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHNwZWNpZmllZEJ5VVJMOiB0aGlzLnNwZWNpZmllZEJ5VVJMLFxuICAgICAgc2VyaWFsaXplOiB0aGlzLnNlcmlhbGl6ZSxcbiAgICAgIHBhcnNlVmFsdWU6IHRoaXMucGFyc2VWYWx1ZSxcbiAgICAgIHBhcnNlTGl0ZXJhbDogdGhpcy5wYXJzZUxpdGVyYWwsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogdGhpcy5leHRlbnNpb25BU1ROb2RlcyxcbiAgICB9O1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbi8qKlxuICogT2JqZWN0IFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIEFsbW9zdCBhbGwgb2YgdGhlIEdyYXBoUUwgdHlwZXMgeW91IGRlZmluZSB3aWxsIGJlIG9iamVjdCB0eXBlcy4gT2JqZWN0IHR5cGVzXG4gKiBoYXZlIGEgbmFtZSwgYnV0IG1vc3QgaW1wb3J0YW50bHkgZGVzY3JpYmUgdGhlaXIgZmllbGRzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IEFkZHJlc3NUeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgbmFtZTogJ0FkZHJlc3MnLFxuICogICBmaWVsZHM6IHtcbiAqICAgICBzdHJlZXQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICogICAgIG51bWJlcjogeyB0eXBlOiBHcmFwaFFMSW50IH0sXG4gKiAgICAgZm9ybWF0dGVkOiB7XG4gKiAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICogICAgICAgcmVzb2x2ZShvYmopIHtcbiAqICAgICAgICAgcmV0dXJuIG9iai5udW1iZXIgKyAnICcgKyBvYmouc3RyZWV0XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFdoZW4gdHdvIHR5cGVzIG5lZWQgdG8gcmVmZXIgdG8gZWFjaCBvdGhlciwgb3IgYSB0eXBlIG5lZWRzIHRvIHJlZmVyIHRvXG4gKiBpdHNlbGYgaW4gYSBmaWVsZCwgeW91IGNhbiB1c2UgYSBmdW5jdGlvbiBleHByZXNzaW9uIChha2EgYSBjbG9zdXJlIG9yIGFcbiAqIHRodW5rKSB0byBzdXBwbHkgdGhlIGZpZWxkcyBsYXppbHkuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgUGVyc29uVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgIG5hbWU6ICdQZXJzb24nLFxuICogICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgbmFtZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gKiAgICAgYmVzdEZyaWVuZDogeyB0eXBlOiBQZXJzb25UeXBlIH0sXG4gKiAgIH0pXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhRTE9iamVjdFR5cGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRleHRlbnNpb25BU1ROMjtcblxuICAgIHRoaXMubmFtZSA9IGFzc2VydE5hbWUoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5pc1R5cGVPZiA9IGNvbmZpZy5pc1R5cGVPZjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1ROMiA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTjIgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTjJcbiAgICAgICAgOiBbXTtcblxuICAgIHRoaXMuX2ZpZWxkcyA9ICgpID0+IGRlZmluZUZpZWxkTWFwKGNvbmZpZyk7XG5cbiAgICB0aGlzLl9pbnRlcmZhY2VzID0gKCkgPT4gZGVmaW5lSW50ZXJmYWNlcyhjb25maWcpO1xuXG4gICAgY29uZmlnLmlzVHlwZU9mID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjb25maWcuaXNUeXBlT2YgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgIGRldkFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke3RoaXMubmFtZX0gbXVzdCBwcm92aWRlIFwiaXNUeXBlT2ZcIiBhcyBhIGZ1bmN0aW9uLCBgICtcbiAgICAgICAgICBgYnV0IGdvdDogJHtpbnNwZWN0KGNvbmZpZy5pc1R5cGVPZil9LmAsXG4gICAgICApO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTE9iamVjdFR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgZ2V0SW50ZXJmYWNlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ludGVyZmFjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSB0aGlzLl9pbnRlcmZhY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludGVyZmFjZXM7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICBpc1R5cGVPZjogdGhpcy5pc1R5cGVPZixcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lSW50ZXJmYWNlcyhjb25maWcpIHtcbiAgdmFyIF9jb25maWckaW50ZXJmYWNlcztcblxuICBjb25zdCBpbnRlcmZhY2VzID0gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuayhcbiAgICAoX2NvbmZpZyRpbnRlcmZhY2VzID0gY29uZmlnLmludGVyZmFjZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGludGVyZmFjZXMgIT09IHZvaWQgMFxuICAgICAgPyBfY29uZmlnJGludGVyZmFjZXNcbiAgICAgIDogW10sXG4gICk7XG4gIEFycmF5LmlzQXJyYXkoaW50ZXJmYWNlcykgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgIGAke2NvbmZpZy5uYW1lfSBpbnRlcmZhY2VzIG11c3QgYmUgYW4gQXJyYXkgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIEFycmF5LmAsXG4gICAgKTtcbiAgcmV0dXJuIGludGVyZmFjZXM7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUZpZWxkTWFwKGNvbmZpZykge1xuICBjb25zdCBmaWVsZE1hcCA9IHJlc29sdmVPYmpNYXBUaHVuayhjb25maWcuZmllbGRzKTtcbiAgaXNQbGFpbk9iaihmaWVsZE1hcCkgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgIGAke2NvbmZpZy5uYW1lfSBmaWVsZHMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBmaWVsZCBuYW1lcyBhcyBrZXlzIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBzdWNoIGFuIG9iamVjdC5gLFxuICAgICk7XG4gIHJldHVybiBtYXBWYWx1ZShmaWVsZE1hcCwgKGZpZWxkQ29uZmlnLCBmaWVsZE5hbWUpID0+IHtcbiAgICB2YXIgX2ZpZWxkQ29uZmlnJGFyZ3M7XG5cbiAgICBpc1BsYWluT2JqKGZpZWxkQ29uZmlnKSB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7Y29uZmlnLm5hbWV9LiR7ZmllbGROYW1lfSBmaWVsZCBjb25maWcgbXVzdCBiZSBhbiBvYmplY3QuYCxcbiAgICAgICk7XG4gICAgZmllbGRDb25maWcucmVzb2x2ZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgZmllbGRDb25maWcucmVzb2x2ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYCR7Y29uZmlnLm5hbWV9LiR7ZmllbGROYW1lfSBmaWVsZCByZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24gaWYgYCArXG4gICAgICAgICAgYHByb3ZpZGVkLCBidXQgZ290OiAke2luc3BlY3QoZmllbGRDb25maWcucmVzb2x2ZSl9LmAsXG4gICAgICApO1xuICAgIGNvbnN0IGFyZ3NDb25maWcgPVxuICAgICAgKF9maWVsZENvbmZpZyRhcmdzID0gZmllbGRDb25maWcuYXJncykgIT09IG51bGwgJiZcbiAgICAgIF9maWVsZENvbmZpZyRhcmdzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZmllbGRDb25maWckYXJnc1xuICAgICAgICA6IHt9O1xuICAgIGlzUGxhaW5PYmooYXJnc0NvbmZpZykgfHxcbiAgICAgIGRldkFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke2NvbmZpZy5uYW1lfS4ke2ZpZWxkTmFtZX0gYXJncyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGFyZ3VtZW50IG5hbWVzIGFzIGtleXMuYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGFzc2VydE5hbWUoZmllbGROYW1lKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZENvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGZpZWxkQ29uZmlnLnR5cGUsXG4gICAgICBhcmdzOiBkZWZpbmVBcmd1bWVudHMoYXJnc0NvbmZpZyksXG4gICAgICByZXNvbHZlOiBmaWVsZENvbmZpZy5yZXNvbHZlLFxuICAgICAgc3Vic2NyaWJlOiBmaWVsZENvbmZpZy5zdWJzY3JpYmUsXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogZmllbGRDb25maWcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiB0b09iak1hcChmaWVsZENvbmZpZy5leHRlbnNpb25zKSxcbiAgICAgIGFzdE5vZGU6IGZpZWxkQ29uZmlnLmFzdE5vZGUsXG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVBcmd1bWVudHMoY29uZmlnKSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhjb25maWcpLm1hcCgoW2FyZ05hbWUsIGFyZ0NvbmZpZ10pID0+ICh7XG4gICAgbmFtZTogYXNzZXJ0TmFtZShhcmdOYW1lKSxcbiAgICBkZXNjcmlwdGlvbjogYXJnQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgIHR5cGU6IGFyZ0NvbmZpZy50eXBlLFxuICAgIGRlZmF1bHRWYWx1ZTogYXJnQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICBkZXByZWNhdGlvblJlYXNvbjogYXJnQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIGV4dGVuc2lvbnM6IHRvT2JqTWFwKGFyZ0NvbmZpZy5leHRlbnNpb25zKSxcbiAgICBhc3ROb2RlOiBhcmdDb25maWcuYXN0Tm9kZSxcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBpc1BsYWluT2JqKG9iaikge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKG9iaikgJiYgIUFycmF5LmlzQXJyYXkob2JqKTtcbn1cblxuZnVuY3Rpb24gZmllbGRzVG9GaWVsZHNDb25maWcoZmllbGRzKSB7XG4gIHJldHVybiBtYXBWYWx1ZShmaWVsZHMsIChmaWVsZCkgPT4gKHtcbiAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgdHlwZTogZmllbGQudHlwZSxcbiAgICBhcmdzOiBhcmdzVG9BcmdzQ29uZmlnKGZpZWxkLmFyZ3MpLFxuICAgIHJlc29sdmU6IGZpZWxkLnJlc29sdmUsXG4gICAgc3Vic2NyaWJlOiBmaWVsZC5zdWJzY3JpYmUsXG4gICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIGV4dGVuc2lvbnM6IGZpZWxkLmV4dGVuc2lvbnMsXG4gICAgYXN0Tm9kZTogZmllbGQuYXN0Tm9kZSxcbiAgfSkpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXJnc1RvQXJnc0NvbmZpZyhhcmdzKSB7XG4gIHJldHVybiBrZXlWYWxNYXAoXG4gICAgYXJncyxcbiAgICAoYXJnKSA9PiBhcmcubmFtZSxcbiAgICAoYXJnKSA9PiAoe1xuICAgICAgZGVzY3JpcHRpb246IGFyZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGFyZy50eXBlLFxuICAgICAgZGVmYXVsdFZhbHVlOiBhcmcuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGFyZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6IGFyZy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogYXJnLmFzdE5vZGUsXG4gICAgfSksXG4gICk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1aXJlZEFyZ3VtZW50KGFyZykge1xuICByZXR1cm4gaXNOb25OdWxsVHlwZShhcmcudHlwZSkgJiYgYXJnLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBXaGVuIGEgZmllbGQgY2FuIHJldHVybiBvbmUgb2YgYSBoZXRlcm9nZW5lb3VzIHNldCBvZiB0eXBlcywgYSBJbnRlcmZhY2UgdHlwZVxuICogaXMgdXNlZCB0byBkZXNjcmliZSB3aGF0IHR5cGVzIGFyZSBwb3NzaWJsZSwgd2hhdCBmaWVsZHMgYXJlIGluIGNvbW1vbiBhY3Jvc3NcbiAqIGFsbCB0eXBlcywgYXMgd2VsbCBhcyBhIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGljaCB0eXBlIGlzIGFjdHVhbGx5IHVzZWRcbiAqIHdoZW4gdGhlIGZpZWxkIGlzIHJlc29sdmVkLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IEVudGl0eVR5cGUgPSBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICogICBuYW1lOiAnRW50aXR5JyxcbiAqICAgZmllbGRzOiB7XG4gKiAgICAgbmFtZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH1cbiAqICAgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxJbnRlcmZhY2VUeXBlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdmFyIF9jb25maWckZXh0ZW5zaW9uQVNUTjM7XG5cbiAgICB0aGlzLm5hbWUgPSBhc3NlcnROYW1lKGNvbmZpZy5uYW1lKTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMucmVzb2x2ZVR5cGUgPSBjb25maWcucmVzb2x2ZVR5cGU7XG4gICAgdGhpcy5leHRlbnNpb25zID0gdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTjMgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE4zICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE4zXG4gICAgICAgIDogW107XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lRmllbGRNYXAuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdGhpcy5faW50ZXJmYWNlcyA9IGRlZmluZUludGVyZmFjZXMuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgY29uZmlnLnJlc29sdmVUeXBlID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjb25maWcucmVzb2x2ZVR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgIGRldkFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGAke3RoaXMubmFtZX0gbXVzdCBwcm92aWRlIFwicmVzb2x2ZVR5cGVcIiBhcyBhIGZ1bmN0aW9uLCBgICtcbiAgICAgICAgICBgYnV0IGdvdDogJHtpbnNwZWN0KGNvbmZpZy5yZXNvbHZlVHlwZSl9LmAsXG4gICAgICApO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTEludGVyZmFjZVR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgZ2V0SW50ZXJmYWNlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ludGVyZmFjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSB0aGlzLl9pbnRlcmZhY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludGVyZmFjZXM7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBVbmlvbiBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBXaGVuIGEgZmllbGQgY2FuIHJldHVybiBvbmUgb2YgYSBoZXRlcm9nZW5lb3VzIHNldCBvZiB0eXBlcywgYSBVbmlvbiB0eXBlXG4gKiBpcyB1c2VkIHRvIGRlc2NyaWJlIHdoYXQgdHlwZXMgYXJlIHBvc3NpYmxlIGFzIHdlbGwgYXMgcHJvdmlkaW5nIGEgZnVuY3Rpb25cbiAqIHRvIGRldGVybWluZSB3aGljaCB0eXBlIGlzIGFjdHVhbGx5IHVzZWQgd2hlbiB0aGUgZmllbGQgaXMgcmVzb2x2ZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgUGV0VHlwZSA9IG5ldyBHcmFwaFFMVW5pb25UeXBlKHtcbiAqICAgbmFtZTogJ1BldCcsXG4gKiAgIHR5cGVzOiBbIERvZ1R5cGUsIENhdFR5cGUgXSxcbiAqICAgcmVzb2x2ZVR5cGUodmFsdWUpIHtcbiAqICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEb2cpIHtcbiAqICAgICAgIHJldHVybiBEb2dUeXBlO1xuICogICAgIH1cbiAqICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBDYXQpIHtcbiAqICAgICAgIHJldHVybiBDYXRUeXBlO1xuICogICAgIH1cbiAqICAgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxVbmlvblR5cGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRleHRlbnNpb25BU1RONDtcblxuICAgIHRoaXMubmFtZSA9IGFzc2VydE5hbWUoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5yZXNvbHZlVHlwZSA9IGNvbmZpZy5yZXNvbHZlVHlwZTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1RONCA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckZXh0ZW5zaW9uQVNUTjQgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckZXh0ZW5zaW9uQVNUTjRcbiAgICAgICAgOiBbXTtcbiAgICB0aGlzLl90eXBlcyA9IGRlZmluZVR5cGVzLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIGNvbmZpZy5yZXNvbHZlVHlwZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgY29uZmlnLnJlc29sdmVUeXBlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0aGlzLm5hbWV9IG11c3QgcHJvdmlkZSBcInJlc29sdmVUeXBlXCIgYXMgYSBmdW5jdGlvbiwgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7aW5zcGVjdChjb25maWcucmVzb2x2ZVR5cGUpfS5gLFxuICAgICAgKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxVbmlvblR5cGUnO1xuICB9XG5cbiAgZ2V0VHlwZXMoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl90eXBlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fdHlwZXMgPSB0aGlzLl90eXBlcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl90eXBlcztcbiAgfVxuXG4gIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGVzOiB0aGlzLmdldFR5cGVzKCksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lVHlwZXMoY29uZmlnKSB7XG4gIGNvbnN0IHR5cGVzID0gcmVzb2x2ZVJlYWRvbmx5QXJyYXlUaHVuayhjb25maWcudHlwZXMpO1xuICBBcnJheS5pc0FycmF5KHR5cGVzKSB8fFxuICAgIGRldkFzc2VydChcbiAgICAgIGZhbHNlLFxuICAgICAgYE11c3QgcHJvdmlkZSBBcnJheSBvZiB0eXBlcyBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgc3VjaCBhbiBhcnJheSBmb3IgVW5pb24gJHtjb25maWcubmFtZX0uYCxcbiAgICApO1xuICByZXR1cm4gdHlwZXM7XG59XG5cbi8qKlxuICogRW51bSBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBTb21lIGxlYWYgdmFsdWVzIG9mIHJlcXVlc3RzIGFuZCBpbnB1dCB2YWx1ZXMgYXJlIEVudW1zLiBHcmFwaFFMIHNlcmlhbGl6ZXNcbiAqIEVudW0gdmFsdWVzIGFzIHN0cmluZ3MsIGhvd2V2ZXIgaW50ZXJuYWxseSBFbnVtcyBjYW4gYmUgcmVwcmVzZW50ZWQgYnkgYW55XG4gKiBraW5kIG9mIHR5cGUsIG9mdGVuIGludGVnZXJzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IFJHQlR5cGUgPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAqICAgbmFtZTogJ1JHQicsXG4gKiAgIHZhbHVlczoge1xuICogICAgIFJFRDogeyB2YWx1ZTogMCB9LFxuICogICAgIEdSRUVOOiB7IHZhbHVlOiAxIH0sXG4gKiAgICAgQkxVRTogeyB2YWx1ZTogMiB9XG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogSWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQgaW4gYSBkZWZpbml0aW9uLCB0aGUgbmFtZSBvZiB0aGUgZW51bSB2YWx1ZVxuICogd2lsbCBiZSB1c2VkIGFzIGl0cyBpbnRlcm5hbCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxFbnVtVHlwZSB7XG4gIC8qIDxUPiAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRleHRlbnNpb25BU1RONTtcblxuICAgIHRoaXMubmFtZSA9IGFzc2VydE5hbWUoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTjUgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE41ICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE41XG4gICAgICAgIDogW107XG4gICAgdGhpcy5fdmFsdWVzID0gZGVmaW5lRW51bVZhbHVlcyh0aGlzLm5hbWUsIGNvbmZpZy52YWx1ZXMpO1xuICAgIHRoaXMuX3ZhbHVlTG9va3VwID0gbmV3IE1hcChcbiAgICAgIHRoaXMuX3ZhbHVlcy5tYXAoKGVudW1WYWx1ZSkgPT4gW2VudW1WYWx1ZS52YWx1ZSwgZW51bVZhbHVlXSksXG4gICAgKTtcbiAgICB0aGlzLl9uYW1lTG9va3VwID0ga2V5TWFwKHRoaXMuX3ZhbHVlcywgKHZhbHVlKSA9PiB2YWx1ZS5uYW1lKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxFbnVtVHlwZSc7XG4gIH1cblxuICBnZXRWYWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfVxuXG4gIGdldFZhbHVlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZUxvb2t1cFtuYW1lXTtcbiAgfVxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGVudW1WYWx1ZSA9IHRoaXMuX3ZhbHVlTG9va3VwLmdldChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBFbnVtIFwiJHt0aGlzLm5hbWV9XCIgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHtpbnNwZWN0KG91dHB1dFZhbHVlKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLm5hbWU7XG4gIH1cblxuICBwYXJzZVZhbHVlKGlucHV0VmFsdWUpIC8qIFQgKi9cbiAge1xuICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHZhbHVlU3RyID0gaW5zcGVjdChpbnB1dFZhbHVlKTtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBFbnVtIFwiJHt0aGlzLm5hbWV9XCIgY2Fubm90IHJlcHJlc2VudCBub24tc3RyaW5nIHZhbHVlOiAke3ZhbHVlU3RyfS5gICtcbiAgICAgICAgICBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIHZhbHVlU3RyKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZW51bVZhbHVlID0gdGhpcy5nZXRWYWx1ZShpbnB1dFZhbHVlKTtcblxuICAgIGlmIChlbnVtVmFsdWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYFZhbHVlIFwiJHtpbnB1dFZhbHVlfVwiIGRvZXMgbm90IGV4aXN0IGluIFwiJHt0aGlzLm5hbWV9XCIgZW51bS5gICtcbiAgICAgICAgICBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIGlucHV0VmFsdWUpLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLnZhbHVlO1xuICB9XG5cbiAgcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSwgX3ZhcmlhYmxlcykgLyogVCAqL1xuICB7XG4gICAgLy8gTm90ZTogdmFyaWFibGVzIHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSB2YWx1ZSBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5FTlVNKSB7XG4gICAgICBjb25zdCB2YWx1ZVN0ciA9IHByaW50KHZhbHVlTm9kZSk7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgRW51bSBcIiR7dGhpcy5uYW1lfVwiIGNhbm5vdCByZXByZXNlbnQgbm9uLWVudW0gdmFsdWU6ICR7dmFsdWVTdHJ9LmAgK1xuICAgICAgICAgIGRpZFlvdU1lYW5FbnVtVmFsdWUodGhpcywgdmFsdWVTdHIpLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IHZhbHVlTm9kZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZW51bVZhbHVlID0gdGhpcy5nZXRWYWx1ZSh2YWx1ZU5vZGUudmFsdWUpO1xuXG4gICAgaWYgKGVudW1WYWx1ZSA9PSBudWxsKSB7XG4gICAgICBjb25zdCB2YWx1ZVN0ciA9IHByaW50KHZhbHVlTm9kZSk7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgVmFsdWUgXCIke3ZhbHVlU3RyfVwiIGRvZXMgbm90IGV4aXN0IGluIFwiJHt0aGlzLm5hbWV9XCIgZW51bS5gICtcbiAgICAgICAgICBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIHZhbHVlU3RyKSxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBlbnVtVmFsdWUudmFsdWU7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBrZXlWYWxNYXAoXG4gICAgICB0aGlzLmdldFZhbHVlcygpLFxuICAgICAgKHZhbHVlKSA9PiB2YWx1ZS5uYW1lLFxuICAgICAgKHZhbHVlKSA9PiAoe1xuICAgICAgICBkZXNjcmlwdGlvbjogdmFsdWUuZGVzY3JpcHRpb24sXG4gICAgICAgIHZhbHVlOiB2YWx1ZS52YWx1ZSxcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IHZhbHVlLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgICBleHRlbnNpb25zOiB2YWx1ZS5leHRlbnNpb25zLFxuICAgICAgICBhc3ROb2RlOiB2YWx1ZS5hc3ROb2RlLFxuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICB2YWx1ZXMsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogdGhpcy5leHRlbnNpb25BU1ROb2RlcyxcbiAgICB9O1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZFlvdU1lYW5FbnVtVmFsdWUoZW51bVR5cGUsIHVua25vd25WYWx1ZVN0cikge1xuICBjb25zdCBhbGxOYW1lcyA9IGVudW1UeXBlLmdldFZhbHVlcygpLm1hcCgodmFsdWUpID0+IHZhbHVlLm5hbWUpO1xuICBjb25zdCBzdWdnZXN0ZWRWYWx1ZXMgPSBzdWdnZXN0aW9uTGlzdCh1bmtub3duVmFsdWVTdHIsIGFsbE5hbWVzKTtcbiAgcmV0dXJuIGRpZFlvdU1lYW4oJ3RoZSBlbnVtIHZhbHVlJywgc3VnZ2VzdGVkVmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lRW51bVZhbHVlcyh0eXBlTmFtZSwgdmFsdWVNYXApIHtcbiAgaXNQbGFpbk9iaih2YWx1ZU1hcCkgfHxcbiAgICBkZXZBc3NlcnQoXG4gICAgICBmYWxzZSxcbiAgICAgIGAke3R5cGVOYW1lfSB2YWx1ZXMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB2YWx1ZSBuYW1lcyBhcyBrZXlzLmAsXG4gICAgKTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHZhbHVlTWFwKS5tYXAoKFt2YWx1ZU5hbWUsIHZhbHVlQ29uZmlnXSkgPT4ge1xuICAgIGlzUGxhaW5PYmoodmFsdWVDb25maWcpIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHt0eXBlTmFtZX0uJHt2YWx1ZU5hbWV9IG11c3QgcmVmZXIgdG8gYW4gb2JqZWN0IHdpdGggYSBcInZhbHVlXCIga2V5IGAgK1xuICAgICAgICAgIGByZXByZXNlbnRpbmcgYW4gaW50ZXJuYWwgdmFsdWUgYnV0IGdvdDogJHtpbnNwZWN0KHZhbHVlQ29uZmlnKX0uYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGFzc2VydEVudW1WYWx1ZU5hbWUodmFsdWVOYW1lKSxcbiAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZUNvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHZhbHVlOiB2YWx1ZUNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWVDb25maWcudmFsdWUgOiB2YWx1ZU5hbWUsXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogdmFsdWVDb25maWcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiB0b09iak1hcCh2YWx1ZUNvbmZpZy5leHRlbnNpb25zKSxcbiAgICAgIGFzdE5vZGU6IHZhbHVlQ29uZmlnLmFzdE5vZGUsXG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5wdXQgT2JqZWN0IFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIEFuIGlucHV0IG9iamVjdCBkZWZpbmVzIGEgc3RydWN0dXJlZCBjb2xsZWN0aW9uIG9mIGZpZWxkcyB3aGljaCBtYXkgYmVcbiAqIHN1cHBsaWVkIHRvIGEgZmllbGQgYXJndW1lbnQuXG4gKlxuICogVXNpbmcgYE5vbk51bGxgIHdpbGwgZW5zdXJlIHRoYXQgYSB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkIGJ5IHRoZSBxdWVyeVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IEdlb1BvaW50ID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnR2VvUG9pbnQnLFxuICogICBmaWVsZHM6IHtcbiAqICAgICBsYXQ6IHsgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxGbG9hdCkgfSxcbiAqICAgICBsb246IHsgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxGbG9hdCkgfSxcbiAqICAgICBhbHQ6IHsgdHlwZTogR3JhcGhRTEZsb2F0LCBkZWZhdWx0VmFsdWU6IDAgfSxcbiAqICAgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRleHRlbnNpb25BU1RONjtcblxuICAgIHRoaXMubmFtZSA9IGFzc2VydE5hbWUoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPVxuICAgICAgKF9jb25maWckZXh0ZW5zaW9uQVNUTjYgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGV4dGVuc2lvbkFTVE42ICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE42XG4gICAgICAgIDogW107XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lSW5wdXRGaWVsZE1hcC5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxJbnB1dE9iamVjdFR5cGUnO1xuICB9XG5cbiAgZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgdG9Db25maWcoKSB7XG4gICAgY29uc3QgZmllbGRzID0gbWFwVmFsdWUodGhpcy5nZXRGaWVsZHMoKSwgKGZpZWxkKSA9PiAoe1xuICAgICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGQudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGQuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgZXh0ZW5zaW9uczogZmllbGQuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IGZpZWxkLmFzdE5vZGUsXG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGZpZWxkcyxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lSW5wdXRGaWVsZE1hcChjb25maWcpIHtcbiAgY29uc3QgZmllbGRNYXAgPSByZXNvbHZlT2JqTWFwVGh1bmsoY29uZmlnLmZpZWxkcyk7XG4gIGlzUGxhaW5PYmooZmllbGRNYXApIHx8XG4gICAgZGV2QXNzZXJ0KFxuICAgICAgZmFsc2UsXG4gICAgICBgJHtjb25maWcubmFtZX0gZmllbGRzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggZmllbGQgbmFtZXMgYXMga2V5cyBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgc3VjaCBhbiBvYmplY3QuYCxcbiAgICApO1xuICByZXR1cm4gbWFwVmFsdWUoZmllbGRNYXAsIChmaWVsZENvbmZpZywgZmllbGROYW1lKSA9PiB7XG4gICAgISgncmVzb2x2ZScgaW4gZmllbGRDb25maWcpIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgJHtjb25maWcubmFtZX0uJHtmaWVsZE5hbWV9IGZpZWxkIGhhcyBhIHJlc29sdmUgcHJvcGVydHksIGJ1dCBJbnB1dCBUeXBlcyBjYW5ub3QgZGVmaW5lIHJlc29sdmVycy5gLFxuICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogYXNzZXJ0TmFtZShmaWVsZE5hbWUpLFxuICAgICAgZGVzY3JpcHRpb246IGZpZWxkQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGRDb25maWcudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGRDb25maWcuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgZXh0ZW5zaW9uczogdG9PYmpNYXAoZmllbGRDb25maWcuZXh0ZW5zaW9ucyksXG4gICAgICBhc3ROb2RlOiBmaWVsZENvbmZpZy5hc3ROb2RlLFxuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1aXJlZElucHV0RmllbGQoZmllbGQpIHtcbiAgcmV0dXJuIGlzTm9uTnVsbFR5cGUoZmllbGQudHlwZSkgJiYgZmllbGQuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQ7XG59XG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgaW5zdGFuY2VPZiB9IGZyb20gJy4uL2pzdXRpbHMvaW5zdGFuY2VPZi5tanMnO1xuaW1wb3J0IHsgaXNPYmplY3RMaWtlIH0gZnJvbSAnLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzJztcbmltcG9ydCB7IHRvT2JqTWFwIH0gZnJvbSAnLi4vanN1dGlscy90b09iak1hcC5tanMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tICcuLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanMnO1xuaW1wb3J0IHsgYXNzZXJ0TmFtZSB9IGZyb20gJy4vYXNzZXJ0TmFtZS5tanMnO1xuaW1wb3J0IHtcbiAgYXJnc1RvQXJnc0NvbmZpZyxcbiAgZGVmaW5lQXJndW1lbnRzLFxuICBHcmFwaFFMTm9uTnVsbCxcbn0gZnJvbSAnLi9kZWZpbml0aW9uLm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMQm9vbGVhbiwgR3JhcGhRTFN0cmluZyB9IGZyb20gJy4vc2NhbGFycy5tanMnO1xuLyoqXG4gKiBUZXN0IGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIEdyYXBoUUwgZGlyZWN0aXZlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YoZGlyZWN0aXZlLCBHcmFwaFFMRGlyZWN0aXZlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIGlmICghaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFeHBlY3RlZCAke2luc3BlY3QoZGlyZWN0aXZlKX0gdG8gYmUgYSBHcmFwaFFMIGRpcmVjdGl2ZS5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0aXZlO1xufVxuLyoqXG4gKiBDdXN0b20gZXh0ZW5zaW9uc1xuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgYSB1bmlxdWUgaWRlbnRpZmllciBuYW1lIGZvciB5b3VyIGV4dGVuc2lvbiwgZm9yIGV4YW1wbGUgdGhlIG5hbWUgb2ZcbiAqIHlvdXIgbGlicmFyeSBvciBwcm9qZWN0LiBEbyBub3QgdXNlIGEgc2hvcnRlbmVkIGlkZW50aWZpZXIgYXMgdGhpcyBpbmNyZWFzZXNcbiAqIHRoZSByaXNrIG9mIGNvbmZsaWN0cy4gV2UgcmVjb21tZW5kIHlvdSBhZGQgYXQgbW9zdCBvbmUgZXh0ZW5zaW9uIGZpZWxkLFxuICogYW4gb2JqZWN0IHdoaWNoIGNhbiBjb250YWluIGFsbCB0aGUgdmFsdWVzIHlvdSBuZWVkLlxuICovXG5cbi8qKlxuICogRGlyZWN0aXZlcyBhcmUgdXNlZCBieSB0aGUgR3JhcGhRTCBydW50aW1lIGFzIGEgd2F5IG9mIG1vZGlmeWluZyBleGVjdXRpb25cbiAqIGJlaGF2aW9yLiBUeXBlIHN5c3RlbSBjcmVhdG9ycyB3aWxsIHVzdWFsbHkgbm90IGNyZWF0ZSB0aGVzZSBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRpc1JlcGVhdGFibGUsIF9jb25maWckYXJncztcblxuICAgIHRoaXMubmFtZSA9IGFzc2VydE5hbWUoY29uZmlnLm5hbWUpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5sb2NhdGlvbnMgPSBjb25maWcubG9jYXRpb25zO1xuICAgIHRoaXMuaXNSZXBlYXRhYmxlID1cbiAgICAgIChfY29uZmlnJGlzUmVwZWF0YWJsZSA9IGNvbmZpZy5pc1JlcGVhdGFibGUpICE9PSBudWxsICYmXG4gICAgICBfY29uZmlnJGlzUmVwZWF0YWJsZSAhPT0gdm9pZCAwXG4gICAgICAgID8gX2NvbmZpZyRpc1JlcGVhdGFibGVcbiAgICAgICAgOiBmYWxzZTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgQXJyYXkuaXNBcnJheShjb25maWcubG9jYXRpb25zKSB8fFxuICAgICAgZGV2QXNzZXJ0KGZhbHNlLCBgQCR7Y29uZmlnLm5hbWV9IGxvY2F0aW9ucyBtdXN0IGJlIGFuIEFycmF5LmApO1xuICAgIGNvbnN0IGFyZ3MgPVxuICAgICAgKF9jb25maWckYXJncyA9IGNvbmZpZy5hcmdzKSAhPT0gbnVsbCAmJiBfY29uZmlnJGFyZ3MgIT09IHZvaWQgMFxuICAgICAgICA/IF9jb25maWckYXJnc1xuICAgICAgICA6IHt9O1xuICAgIChpc09iamVjdExpa2UoYXJncykgJiYgIUFycmF5LmlzQXJyYXkoYXJncykpIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgQCR7Y29uZmlnLm5hbWV9IGFyZ3MgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhcmd1bWVudCBuYW1lcyBhcyBrZXlzLmAsXG4gICAgICApO1xuICAgIHRoaXMuYXJncyA9IGRlZmluZUFyZ3VtZW50cyhhcmdzKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxEaXJlY3RpdmUnO1xuICB9XG5cbiAgdG9Db25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbG9jYXRpb25zOiB0aGlzLmxvY2F0aW9ucyxcbiAgICAgIGFyZ3M6IGFyZ3NUb0FyZ3NDb25maWcodGhpcy5hcmdzKSxcbiAgICAgIGlzUmVwZWF0YWJsZTogdGhpcy5pc1JlcGVhdGFibGUsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgfTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnQCcgKyB0aGlzLm5hbWU7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfVxufVxuXG4vKipcbiAqIFVzZWQgdG8gY29uZGl0aW9uYWxseSBpbmNsdWRlIGZpZWxkcyBvciBmcmFnbWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2luY2x1ZGUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IG9ubHkgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlLicsXG4gIGxvY2F0aW9uczogW1xuICAgIERpcmVjdGl2ZUxvY2F0aW9uLkZJRUxELFxuICAgIERpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBEaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gIF0sXG4gIGFyZ3M6IHtcbiAgICBpZjoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5jbHVkZWQgd2hlbiB0cnVlLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgc2tpcCAoZXhjbHVkZSkgZmllbGRzIG9yIGZyYWdtZW50cy5cbiAqL1xuXG5leHBvcnQgY29uc3QgR3JhcGhRTFNraXBEaXJlY3RpdmUgPSBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gIG5hbWU6ICdza2lwJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ0RpcmVjdHMgdGhlIGV4ZWN1dG9yIHRvIHNraXAgdGhpcyBmaWVsZCBvciBmcmFnbWVudCB3aGVuIHRoZSBgaWZgIGFyZ3VtZW50IGlzIHRydWUuJyxcbiAgbG9jYXRpb25zOiBbXG4gICAgRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsXG4gICAgRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgIERpcmVjdGl2ZUxvY2F0aW9uLklOTElORV9GUkFHTUVOVCxcbiAgXSxcbiAgYXJnczoge1xuICAgIGlmOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgZGVzY3JpcHRpb246ICdTa2lwcGVkIHdoZW4gdHJ1ZS4nLFxuICAgIH0sXG4gIH0sXG59KTtcbi8qKlxuICogQ29uc3RhbnQgc3RyaW5nIHVzZWQgZm9yIGRlZmF1bHQgcmVhc29uIGZvciBhIGRlcHJlY2F0aW9uLlxuICovXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTiA9ICdObyBsb25nZXIgc3VwcG9ydGVkJztcbi8qKlxuICogVXNlZCB0byBkZWNsYXJlIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBkZXByZWNhdGVkLlxuICovXG5cbmV4cG9ydCBjb25zdCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2RlcHJlY2F0ZWQnLFxuICBkZXNjcmlwdGlvbjogJ01hcmtzIGFuIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBubyBsb25nZXIgc3VwcG9ydGVkLicsXG4gIGxvY2F0aW9uczogW1xuICAgIERpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT04sXG4gICAgRGlyZWN0aXZlTG9jYXRpb24uQVJHVU1FTlRfREVGSU5JVElPTixcbiAgICBEaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OLFxuICAgIERpcmVjdGl2ZUxvY2F0aW9uLkVOVU1fVkFMVUUsXG4gIF0sXG4gIGFyZ3M6IHtcbiAgICByZWFzb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0V4cGxhaW5zIHdoeSB0aGlzIGVsZW1lbnQgd2FzIGRlcHJlY2F0ZWQsIHVzdWFsbHkgYWxzbyBpbmNsdWRpbmcgYSBzdWdnZXN0aW9uIGZvciBob3cgdG8gYWNjZXNzIHN1cHBvcnRlZCBzaW1pbGFyIGRhdGEuIEZvcm1hdHRlZCB1c2luZyB0aGUgTWFya2Rvd24gc3ludGF4LCBhcyBzcGVjaWZpZWQgYnkgW0NvbW1vbk1hcmtdKGh0dHBzOi8vY29tbW9ubWFyay5vcmcvKS4nLFxuICAgICAgZGVmYXVsdFZhbHVlOiBERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTixcbiAgICB9LFxuICB9LFxufSk7XG4vKipcbiAqIFVzZWQgdG8gcHJvdmlkZSBhIFVSTCBmb3Igc3BlY2lmeWluZyB0aGUgYmVoYXZpb3Igb2YgY3VzdG9tIHNjYWxhciBkZWZpbml0aW9ucy5cbiAqL1xuXG5leHBvcnQgY29uc3QgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnc3BlY2lmaWVkQnknLFxuICBkZXNjcmlwdGlvbjogJ0V4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgc2NhbGFyLicsXG4gIGxvY2F0aW9uczogW0RpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUl0sXG4gIGFyZ3M6IHtcbiAgICB1cmw6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIFVSTCB0aGF0IHNwZWNpZmllcyB0aGUgYmVoYXZpb3Igb2YgdGhpcyBzY2FsYXIuJyxcbiAgICB9LFxuICB9LFxufSk7XG4vKipcbiAqIFRoZSBmdWxsIGxpc3Qgb2Ygc3BlY2lmaWVkIGRpcmVjdGl2ZXMuXG4gKi9cblxuZXhwb3J0IGNvbnN0IHNwZWNpZmllZERpcmVjdGl2ZXMgPSBPYmplY3QuZnJlZXplKFtcbiAgR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUsXG4gIEdyYXBoUUxTa2lwRGlyZWN0aXZlLFxuICBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSxcbiAgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlLFxuXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWZpZWREaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIHJldHVybiBzcGVjaWZpZWREaXJlY3RpdmVzLnNvbWUoKHsgbmFtZSB9KSA9PiBuYW1lID09PSBkaXJlY3RpdmUubmFtZSk7XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tICcuLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyBhc3RGcm9tVmFsdWUgfSBmcm9tICcuLi91dGlsaXRpZXMvYXN0RnJvbVZhbHVlLm1qcyc7XG5pbXBvcnQge1xuICBHcmFwaFFMRW51bVR5cGUsXG4gIEdyYXBoUUxMaXN0LFxuICBHcmFwaFFMTm9uTnVsbCxcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIGlzQWJzdHJhY3RUeXBlLFxuICBpc0VudW1UeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc0xpc3RUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzU2NhbGFyVHlwZSxcbiAgaXNVbmlvblR5cGUsXG59IGZyb20gJy4vZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEJvb2xlYW4sIEdyYXBoUUxTdHJpbmcgfSBmcm9tICcuL3NjYWxhcnMubWpzJztcbmV4cG9ydCBjb25zdCBfX1NjaGVtYSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1NjaGVtYScsXG4gIGRlc2NyaXB0aW9uOlxuICAgICdBIEdyYXBoUUwgU2NoZW1hIGRlZmluZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIEdyYXBoUUwgc2VydmVyLiBJdCBleHBvc2VzIGFsbCBhdmFpbGFibGUgdHlwZXMgYW5kIGRpcmVjdGl2ZXMgb24gdGhlIHNlcnZlciwgYXMgd2VsbCBhcyB0aGUgZW50cnkgcG9pbnRzIGZvciBxdWVyeSwgbXV0YXRpb24sIGFuZCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucy4nLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZGVzY3JpcHRpb24sXG4gICAgfSxcbiAgICB0eXBlczoge1xuICAgICAgZGVzY3JpcHRpb246ICdBIGxpc3Qgb2YgYWxsIHR5cGVzIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZlci4nLFxuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSkpLFxuXG4gICAgICByZXNvbHZlKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzY2hlbWEuZ2V0VHlwZU1hcCgpKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVR5cGU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHR5cGUgdGhhdCBxdWVyeSBvcGVyYXRpb25zIHdpbGwgYmUgcm9vdGVkIGF0LicsXG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSxcbiAgICAgIHJlc29sdmU6IChzY2hlbWEpID0+IHNjaGVtYS5nZXRRdWVyeVR5cGUoKSxcbiAgICB9LFxuICAgIG11dGF0aW9uVHlwZToge1xuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJZiB0aGlzIHNlcnZlciBzdXBwb3J0cyBtdXRhdGlvbiwgdGhlIHR5cGUgdGhhdCBtdXRhdGlvbiBvcGVyYXRpb25zIHdpbGwgYmUgcm9vdGVkIGF0LicsXG4gICAgICB0eXBlOiBfX1R5cGUsXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCksXG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb25UeXBlOiB7XG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0lmIHRoaXMgc2VydmVyIHN1cHBvcnQgc3Vic2NyaXB0aW9uLCB0aGUgdHlwZSB0aGF0IHN1YnNjcmlwdGlvbiBvcGVyYXRpb25zIHdpbGwgYmUgcm9vdGVkIGF0LicsXG4gICAgICB0eXBlOiBfX1R5cGUsXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpLFxuICAgIH0sXG4gICAgZGlyZWN0aXZlczoge1xuICAgICAgZGVzY3JpcHRpb246ICdBIGxpc3Qgb2YgYWxsIGRpcmVjdGl2ZXMgc3VwcG9ydGVkIGJ5IHRoaXMgc2VydmVyLicsXG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoXG4gICAgICAgIG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19EaXJlY3RpdmUpKSxcbiAgICAgICksXG4gICAgICByZXNvbHZlOiAoc2NoZW1hKSA9PiBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpLFxuICAgIH0sXG4gIH0pLFxufSk7XG5leHBvcnQgY29uc3QgX19EaXJlY3RpdmUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19EaXJlY3RpdmUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICBcIkEgRGlyZWN0aXZlIHByb3ZpZGVzIGEgd2F5IHRvIGRlc2NyaWJlIGFsdGVybmF0ZSBydW50aW1lIGV4ZWN1dGlvbiBhbmQgdHlwZSB2YWxpZGF0aW9uIGJlaGF2aW9yIGluIGEgR3JhcGhRTCBkb2N1bWVudC5cXG5cXG5JbiBzb21lIGNhc2VzLCB5b3UgbmVlZCB0byBwcm92aWRlIG9wdGlvbnMgdG8gYWx0ZXIgR3JhcGhRTCdzIGV4ZWN1dGlvbiBiZWhhdmlvciBpbiB3YXlzIGZpZWxkIGFyZ3VtZW50cyB3aWxsIG5vdCBzdWZmaWNlLCBzdWNoIGFzIGNvbmRpdGlvbmFsbHkgaW5jbHVkaW5nIG9yIHNraXBwaW5nIGEgZmllbGQuIERpcmVjdGl2ZXMgcHJvdmlkZSB0aGlzIGJ5IGRlc2NyaWJpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZXhlY3V0b3IuXCIsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICByZXNvbHZlOiAoZGlyZWN0aXZlKSA9PiBkaXJlY3RpdmUubmFtZSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLmRlc2NyaXB0aW9uLFxuICAgIH0sXG4gICAgaXNSZXBlYXRhYmxlOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgcmVzb2x2ZTogKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLmlzUmVwZWF0YWJsZSxcbiAgICB9LFxuICAgIGxvY2F0aW9uczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fRGlyZWN0aXZlTG9jYXRpb24pKSxcbiAgICAgICksXG4gICAgICByZXNvbHZlOiAoZGlyZWN0aXZlKSA9PiBkaXJlY3RpdmUubG9jYXRpb25zLFxuICAgIH0sXG4gICAgYXJnczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fSW5wdXRWYWx1ZSkpLFxuICAgICAgKSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICB0eXBlOiBHcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcmVzb2x2ZShmaWVsZCwgeyBpbmNsdWRlRGVwcmVjYXRlZCB9KSB7XG4gICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZFxuICAgICAgICAgID8gZmllbGQuYXJnc1xuICAgICAgICAgIDogZmllbGQuYXJncy5maWx0ZXIoKGFyZykgPT4gYXJnLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGwpO1xuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IF9fRGlyZWN0aXZlTG9jYXRpb24gPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgbmFtZTogJ19fRGlyZWN0aXZlTG9jYXRpb24nLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnQSBEaXJlY3RpdmUgY2FuIGJlIGFkamFjZW50IHRvIG1hbnkgcGFydHMgb2YgdGhlIEdyYXBoUUwgbGFuZ3VhZ2UsIGEgX19EaXJlY3RpdmVMb2NhdGlvbiBkZXNjcmliZXMgb25lIHN1Y2ggcG9zc2libGUgYWRqYWNlbmNpZXMuJyxcbiAgdmFsdWVzOiB7XG4gICAgUVVFUlk6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5RVUVSWSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBxdWVyeSBvcGVyYXRpb24uJyxcbiAgICB9LFxuICAgIE1VVEFUSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uTVVUQVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgbXV0YXRpb24gb3BlcmF0aW9uLicsXG4gICAgfSxcbiAgICBTVUJTQ1JJUFRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5TVUJTQ1JJUFRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbi4nLFxuICAgIH0sXG4gICAgRklFTEQ6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBmaWVsZC4nLFxuICAgIH0sXG4gICAgRlJBR01FTlRfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZnJhZ21lbnQgZGVmaW5pdGlvbi4nLFxuICAgIH0sXG4gICAgRlJBR01FTlRfU1BSRUFEOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZyYWdtZW50IHNwcmVhZC4nLFxuICAgIH0sXG4gICAgSU5MSU5FX0ZSQUdNRU5UOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uSU5MSU5FX0ZSQUdNRU5ULFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBpbmxpbmUgZnJhZ21lbnQuJyxcbiAgICB9LFxuICAgIFZBUklBQkxFX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5WQVJJQUJMRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHZhcmlhYmxlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIFNDSEVNQToge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlNDSEVNQSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4nLFxuICAgIH0sXG4gICAgU0NBTEFSOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uU0NBTEFSLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHNjYWxhciBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBPQkpFQ1Q6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIG9iamVjdCB0eXBlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIEZJRUxEX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZpZWxkIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIEFSR1VNRU5UX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBhcmd1bWVudCBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBJTlRFUkZBQ0U6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGludGVyZmFjZSBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgICBVTklPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlVOSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHVuaW9uIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIEVOVU06IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5FTlVNLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBlbnVtIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIEVOVU1fVkFMVUU6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBlbnVtIHZhbHVlIGRlZmluaXRpb24uJyxcbiAgICB9LFxuICAgIElOUFVUX09CSkVDVDoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX09CSkVDVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gaW5wdXQgb2JqZWN0IHR5cGUgZGVmaW5pdGlvbi4nLFxuICAgIH0sXG4gICAgSU5QVVRfRklFTERfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGlucHV0IG9iamVjdCBmaWVsZCBkZWZpbml0aW9uLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuZXhwb3J0IGNvbnN0IF9fVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1R5cGUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnVGhlIGZ1bmRhbWVudGFsIHVuaXQgb2YgYW55IEdyYXBoUUwgU2NoZW1hIGlzIHRoZSB0eXBlLiBUaGVyZSBhcmUgbWFueSBraW5kcyBvZiB0eXBlcyBpbiBHcmFwaFFMIGFzIHJlcHJlc2VudGVkIGJ5IHRoZSBgX19UeXBlS2luZGAgZW51bS5cXG5cXG5EZXBlbmRpbmcgb24gdGhlIGtpbmQgb2YgYSB0eXBlLCBjZXJ0YWluIGZpZWxkcyBkZXNjcmliZSBpbmZvcm1hdGlvbiBhYm91dCB0aGF0IHR5cGUuIFNjYWxhciB0eXBlcyBwcm92aWRlIG5vIGluZm9ybWF0aW9uIGJleW9uZCBhIG5hbWUsIGRlc2NyaXB0aW9uIGFuZCBvcHRpb25hbCBgc3BlY2lmaWVkQnlVUkxgLCB3aGlsZSBFbnVtIHR5cGVzIHByb3ZpZGUgdGhlaXIgdmFsdWVzLiBPYmplY3QgYW5kIEludGVyZmFjZSB0eXBlcyBwcm92aWRlIHRoZSBmaWVsZHMgdGhleSBkZXNjcmliZS4gQWJzdHJhY3QgdHlwZXMsIFVuaW9uIGFuZCBJbnRlcmZhY2UsIHByb3ZpZGUgdGhlIE9iamVjdCB0eXBlcyBwb3NzaWJsZSBhdCBydW50aW1lLiBMaXN0IGFuZCBOb25OdWxsIHR5cGVzIGNvbXBvc2Ugb3RoZXIgdHlwZXMuJyxcbiAgZmllbGRzOiAoKSA9PiAoe1xuICAgIGtpbmQ6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGVLaW5kKSxcblxuICAgICAgcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuU0NBTEFSO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5PQkpFQ1Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLklOVEVSRkFDRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgICAgICAgIHJldHVybiBUeXBlS2luZC5VTklPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLkVOVU07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuSU5QVVRfT0JKRUNUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuTElTVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLk5PTl9OVUxMO1xuICAgICAgICB9XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICAgICAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG4gICAgICAgIGZhbHNlIHx8IGludmFyaWFudChmYWxzZSwgYFVuZXhwZWN0ZWQgdHlwZTogXCIke2luc3BlY3QodHlwZSl9XCIuYCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgbmFtZToge1xuICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6ICh0eXBlKSA9PiAoJ25hbWUnIGluIHR5cGUgPyB0eXBlLm5hbWUgOiB1bmRlZmluZWQpLFxuICAgIH0sXG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoXG4gICAgICAgIHR5cGUsIC8vIEZJWE1FOiBhZGQgdGVzdCBjYXNlXG4gICAgICApID0+XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICdkZXNjcmlwdGlvbicgaW4gdHlwZSA/IHR5cGUuZGVzY3JpcHRpb24gOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgICBzcGVjaWZpZWRCeVVSTDoge1xuICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6IChvYmopID0+XG4gICAgICAgICdzcGVjaWZpZWRCeVVSTCcgaW4gb2JqID8gb2JqLnNwZWNpZmllZEJ5VVJMIDogdW5kZWZpbmVkLFxuICAgIH0sXG4gICAgZmllbGRzOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fRmllbGQpKSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICB0eXBlOiBHcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcmVzb2x2ZSh0eXBlLCB7IGluY2x1ZGVEZXByZWNhdGVkIH0pIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSBPYmplY3QudmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZFxuICAgICAgICAgICAgPyBmaWVsZHNcbiAgICAgICAgICAgIDogZmllbGRzLmZpbHRlcigoZmllbGQpID0+IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgaW50ZXJmYWNlczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpKSxcblxuICAgICAgcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGUuZ2V0SW50ZXJmYWNlcygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgcG9zc2libGVUeXBlczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpKSxcblxuICAgICAgcmVzb2x2ZSh0eXBlLCBfYXJncywgX2NvbnRleHQsIHsgc2NoZW1hIH0pIHtcbiAgICAgICAgaWYgKGlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgZW51bVZhbHVlczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0VudW1WYWx1ZSkpLFxuICAgICAgYXJnczoge1xuICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgIHR5cGU6IEdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICByZXNvbHZlKHR5cGUsIHsgaW5jbHVkZURlcHJlY2F0ZWQgfSkge1xuICAgICAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHR5cGUuZ2V0VmFsdWVzKCk7XG4gICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkXG4gICAgICAgICAgICA/IHZhbHVlc1xuICAgICAgICAgICAgOiB2YWx1ZXMuZmlsdGVyKChmaWVsZCkgPT4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gPT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICBpbnB1dEZpZWxkczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0lucHV0VmFsdWUpKSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICB0eXBlOiBHcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcmVzb2x2ZSh0eXBlLCB7IGluY2x1ZGVEZXByZWNhdGVkIH0pIHtcbiAgICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTtcbiAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWRcbiAgICAgICAgICAgID8gdmFsdWVzXG4gICAgICAgICAgICA6IHZhbHVlcy5maWx0ZXIoKGZpZWxkKSA9PiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIG9mVHlwZToge1xuICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgcmVzb2x2ZTogKHR5cGUpID0+ICgnb2ZUeXBlJyBpbiB0eXBlID8gdHlwZS5vZlR5cGUgOiB1bmRlZmluZWQpLFxuICAgIH0sXG4gIH0pLFxufSk7XG5leHBvcnQgY29uc3QgX19GaWVsZCA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX0ZpZWxkJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ09iamVjdCBhbmQgSW50ZXJmYWNlIHR5cGVzIGFyZSBkZXNjcmliZWQgYnkgYSBsaXN0IG9mIEZpZWxkcywgZWFjaCBvZiB3aGljaCBoYXMgYSBuYW1lLCBwb3RlbnRpYWxseSBhIGxpc3Qgb2YgYXJndW1lbnRzLCBhbmQgYSByZXR1cm4gdHlwZS4nLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICAgICAgcmVzb2x2ZTogKGZpZWxkKSA9PiBmaWVsZC5uYW1lLFxuICAgIH0sXG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoZmllbGQpID0+IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgIH0sXG4gICAgYXJnczoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKFxuICAgICAgICBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fSW5wdXRWYWx1ZSkpLFxuICAgICAgKSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICB0eXBlOiBHcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcmVzb2x2ZShmaWVsZCwgeyBpbmNsdWRlRGVwcmVjYXRlZCB9KSB7XG4gICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZFxuICAgICAgICAgID8gZmllbGQuYXJnc1xuICAgICAgICAgIDogZmllbGQuYXJncy5maWx0ZXIoKGFyZykgPT4gYXJnLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGwpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpLFxuICAgICAgcmVzb2x2ZTogKGZpZWxkKSA9PiBmaWVsZC50eXBlLFxuICAgIH0sXG4gICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgcmVzb2x2ZTogKGZpZWxkKSA9PiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsLFxuICAgIH0sXG4gICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAoZmllbGQpID0+IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIH0sXG4gIH0pLFxufSk7XG5leHBvcnQgY29uc3QgX19JbnB1dFZhbHVlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fSW5wdXRWYWx1ZScsXG4gIGRlc2NyaXB0aW9uOlxuICAgICdBcmd1bWVudHMgcHJvdmlkZWQgdG8gRmllbGRzIG9yIERpcmVjdGl2ZXMgYW5kIHRoZSBpbnB1dCBmaWVsZHMgb2YgYW4gSW5wdXRPYmplY3QgYXJlIHJlcHJlc2VudGVkIGFzIElucHV0IFZhbHVlcyB3aGljaCBkZXNjcmliZSB0aGVpciB0eXBlIGFuZCBvcHRpb25hbGx5IGEgZGVmYXVsdCB2YWx1ZS4nLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICAgICAgcmVzb2x2ZTogKGlucHV0VmFsdWUpID0+IGlucHV0VmFsdWUubmFtZSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKGlucHV0VmFsdWUpID0+IGlucHV0VmFsdWUuZGVzY3JpcHRpb24sXG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSxcbiAgICAgIHJlc29sdmU6IChpbnB1dFZhbHVlKSA9PiBpbnB1dFZhbHVlLnR5cGUsXG4gICAgfSxcbiAgICBkZWZhdWx0VmFsdWU6IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0EgR3JhcGhRTC1mb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBpbnB1dCB2YWx1ZS4nLFxuXG4gICAgICByZXNvbHZlKGlucHV0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBkZWZhdWx0VmFsdWUgfSA9IGlucHV0VmFsdWU7XG4gICAgICAgIGNvbnN0IHZhbHVlQVNUID0gYXN0RnJvbVZhbHVlKGRlZmF1bHRWYWx1ZSwgdHlwZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZUFTVCA/IHByaW50KHZhbHVlQVNUKSA6IG51bGw7XG4gICAgICB9LFxuICAgIH0sXG4gICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgcmVzb2x2ZTogKGZpZWxkKSA9PiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsLFxuICAgIH0sXG4gICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICByZXNvbHZlOiAob2JqKSA9PiBvYmouZGVwcmVjYXRpb25SZWFzb24sXG4gICAgfSxcbiAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBfX0VudW1WYWx1ZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX0VudW1WYWx1ZScsXG4gIGRlc2NyaXB0aW9uOlxuICAgICdPbmUgcG9zc2libGUgdmFsdWUgZm9yIGEgZ2l2ZW4gRW51bS4gRW51bSB2YWx1ZXMgYXJlIHVuaXF1ZSB2YWx1ZXMsIG5vdCBhIHBsYWNlaG9sZGVyIGZvciBhIHN0cmluZyBvciBudW1lcmljIHZhbHVlLiBIb3dldmVyIGFuIEVudW0gdmFsdWUgaXMgcmV0dXJuZWQgaW4gYSBKU09OIHJlc3BvbnNlIGFzIGEgc3RyaW5nLicsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICByZXNvbHZlOiAoZW51bVZhbHVlKSA9PiBlbnVtVmFsdWUubmFtZSxcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgcmVzb2x2ZTogKGVudW1WYWx1ZSkgPT4gZW51bVZhbHVlLmRlc2NyaXB0aW9uLFxuICAgIH0sXG4gICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgcmVzb2x2ZTogKGVudW1WYWx1ZSkgPT4gZW51bVZhbHVlLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwsXG4gICAgfSxcbiAgICBkZXByZWNhdGlvblJlYXNvbjoge1xuICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgIHJlc29sdmU6IChlbnVtVmFsdWUpID0+IGVudW1WYWx1ZS5kZXByZWNhdGlvblJlYXNvbixcbiAgICB9LFxuICB9KSxcbn0pO1xudmFyIFR5cGVLaW5kO1xuXG4oZnVuY3Rpb24gKFR5cGVLaW5kKSB7XG4gIFR5cGVLaW5kWydTQ0FMQVInXSA9ICdTQ0FMQVInO1xuICBUeXBlS2luZFsnT0JKRUNUJ10gPSAnT0JKRUNUJztcbiAgVHlwZUtpbmRbJ0lOVEVSRkFDRSddID0gJ0lOVEVSRkFDRSc7XG4gIFR5cGVLaW5kWydVTklPTiddID0gJ1VOSU9OJztcbiAgVHlwZUtpbmRbJ0VOVU0nXSA9ICdFTlVNJztcbiAgVHlwZUtpbmRbJ0lOUFVUX09CSkVDVCddID0gJ0lOUFVUX09CSkVDVCc7XG4gIFR5cGVLaW5kWydMSVNUJ10gPSAnTElTVCc7XG4gIFR5cGVLaW5kWydOT05fTlVMTCddID0gJ05PTl9OVUxMJztcbn0pKFR5cGVLaW5kIHx8IChUeXBlS2luZCA9IHt9KSk7XG5cbmV4cG9ydCB7IFR5cGVLaW5kIH07XG5leHBvcnQgY29uc3QgX19UeXBlS2luZCA9IG5ldyBHcmFwaFFMRW51bVR5cGUoe1xuICBuYW1lOiAnX19UeXBlS2luZCcsXG4gIGRlc2NyaXB0aW9uOiAnQW4gZW51bSBkZXNjcmliaW5nIHdoYXQga2luZCBvZiB0eXBlIGEgZ2l2ZW4gYF9fVHlwZWAgaXMuJyxcbiAgdmFsdWVzOiB7XG4gICAgU0NBTEFSOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuU0NBTEFSLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgc2NhbGFyLicsXG4gICAgfSxcbiAgICBPQkpFQ1Q6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYW4gb2JqZWN0LiBgZmllbGRzYCBhbmQgYGludGVyZmFjZXNgIGFyZSB2YWxpZCBmaWVsZHMuJyxcbiAgICB9LFxuICAgIElOVEVSRkFDRToge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLklOVEVSRkFDRSxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBpbnRlcmZhY2UuIGBmaWVsZHNgLCBgaW50ZXJmYWNlc2AsIGFuZCBgcG9zc2libGVUeXBlc2AgYXJlIHZhbGlkIGZpZWxkcy4nLFxuICAgIH0sXG4gICAgVU5JT046IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5VTklPTixcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhIHVuaW9uLiBgcG9zc2libGVUeXBlc2AgaXMgYSB2YWxpZCBmaWVsZC4nLFxuICAgIH0sXG4gICAgRU5VTToge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLkVOVU0sXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYW4gZW51bS4gYGVudW1WYWx1ZXNgIGlzIGEgdmFsaWQgZmllbGQuJyxcbiAgICB9LFxuICAgIElOUFVUX09CSkVDVDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLklOUFVUX09CSkVDVCxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBpbnB1dCBvYmplY3QuIGBpbnB1dEZpZWxkc2AgaXMgYSB2YWxpZCBmaWVsZC4nLFxuICAgIH0sXG4gICAgTElTVDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLkxJU1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYSBsaXN0LiBgb2ZUeXBlYCBpcyBhIHZhbGlkIGZpZWxkLicsXG4gICAgfSxcbiAgICBOT05fTlVMTDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLk5PTl9OVUxMLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgbm9uLW51bGwuIGBvZlR5cGVgIGlzIGEgdmFsaWQgZmllbGQuJyxcbiAgICB9LFxuICB9LFxufSk7XG4vKipcbiAqIE5vdGUgdGhhdCB0aGVzZSBhcmUgR3JhcGhRTEZpZWxkIGFuZCBub3QgR3JhcGhRTEZpZWxkQ29uZmlnLFxuICogc28gdGhlIGZvcm1hdCBmb3IgYXJncyBpcyBkaWZmZXJlbnQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IFNjaGVtYU1ldGFGaWVsZERlZiA9IHtcbiAgbmFtZTogJ19fc2NoZW1hJyxcbiAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKF9fU2NoZW1hKSxcbiAgZGVzY3JpcHRpb246ICdBY2Nlc3MgdGhlIGN1cnJlbnQgdHlwZSBzY2hlbWEgb2YgdGhpcyBzZXJ2ZXIuJyxcbiAgYXJnczogW10sXG4gIHJlc29sdmU6IChfc291cmNlLCBfYXJncywgX2NvbnRleHQsIHsgc2NoZW1hIH0pID0+IHNjaGVtYSxcbiAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgZXh0ZW5zaW9uczogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgYXN0Tm9kZTogdW5kZWZpbmVkLFxufTtcbmV4cG9ydCBjb25zdCBUeXBlTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX190eXBlJyxcbiAgdHlwZTogX19UeXBlLFxuICBkZXNjcmlwdGlvbjogJ1JlcXVlc3QgdGhlIHR5cGUgaW5mb3JtYXRpb24gb2YgYSBzaW5nbGUgdHlwZS4nLFxuICBhcmdzOiBbXG4gICAge1xuICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgICAgIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBhc3ROb2RlOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgXSxcbiAgcmVzb2x2ZTogKF9zb3VyY2UsIHsgbmFtZSB9LCBfY29udGV4dCwgeyBzY2hlbWEgfSkgPT4gc2NoZW1hLmdldFR5cGUobmFtZSksXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gIGFzdE5vZGU6IHVuZGVmaW5lZCxcbn07XG5leHBvcnQgY29uc3QgVHlwZU5hbWVNZXRhRmllbGREZWYgPSB7XG4gIG5hbWU6ICdfX3R5cGVuYW1lJyxcbiAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBuYW1lIG9mIHRoZSBjdXJyZW50IE9iamVjdCB0eXBlIGF0IHJ1bnRpbWUuJyxcbiAgYXJnczogW10sXG4gIHJlc29sdmU6IChfc291cmNlLCBfYXJncywgX2NvbnRleHQsIHsgcGFyZW50VHlwZSB9KSA9PiBwYXJlbnRUeXBlLm5hbWUsXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gIGFzdE5vZGU6IHVuZGVmaW5lZCxcbn07XG5leHBvcnQgY29uc3QgaW50cm9zcGVjdGlvblR5cGVzID0gT2JqZWN0LmZyZWV6ZShbXG4gIF9fU2NoZW1hLFxuICBfX0RpcmVjdGl2ZSxcbiAgX19EaXJlY3RpdmVMb2NhdGlvbixcbiAgX19UeXBlLFxuICBfX0ZpZWxkLFxuICBfX0lucHV0VmFsdWUsXG4gIF9fRW51bVZhbHVlLFxuICBfX1R5cGVLaW5kLFxuXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnRyb3NwZWN0aW9uVHlwZXMuc29tZSgoeyBuYW1lIH0pID0+IHR5cGUubmFtZSA9PT0gbmFtZSk7XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdExpa2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IHByaW50IH0gZnJvbSAnLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTFNjYWxhclR5cGUgfSBmcm9tICcuL2RlZmluaXRpb24ubWpzJztcbi8qKlxuICogTWF4aW11bSBwb3NzaWJsZSBJbnQgdmFsdWUgYXMgcGVyIEdyYXBoUUwgU3BlYyAoMzItYml0IHNpZ25lZCBpbnRlZ2VyKS5cbiAqIG4uYi4gVGhpcyBkaWZmZXJzIGZyb20gSmF2YVNjcmlwdCdzIG51bWJlcnMgdGhhdCBhcmUgSUVFRSA3NTQgZG91YmxlcyBzYWZlIHVwLXRvIDJeNTMgLSAxXG4gKiAqL1xuXG5leHBvcnQgY29uc3QgR1JBUEhRTF9NQVhfSU5UID0gMjE0NzQ4MzY0Nztcbi8qKlxuICogTWluaW11bSBwb3NzaWJsZSBJbnQgdmFsdWUgYXMgcGVyIEdyYXBoUUwgU3BlYyAoMzItYml0IHNpZ25lZCBpbnRlZ2VyKS5cbiAqIG4uYi4gVGhpcyBkaWZmZXJzIGZyb20gSmF2YVNjcmlwdCdzIG51bWJlcnMgdGhhdCBhcmUgSUVFRSA3NTQgZG91YmxlcyBzYWZlIHN0YXJ0aW5nIGF0IC0oMl41MyAtIDEpXG4gKiAqL1xuXG5leHBvcnQgY29uc3QgR1JBUEhRTF9NSU5fSU5UID0gLTIxNDc0ODM2NDg7XG5leHBvcnQgY29uc3QgR3JhcGhRTEludCA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdJbnQnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnVGhlIGBJbnRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgbm9uLWZyYWN0aW9uYWwgc2lnbmVkIHdob2xlIG51bWVyaWMgdmFsdWVzLiBJbnQgY2FuIHJlcHJlc2VudCB2YWx1ZXMgYmV0d2VlbiAtKDJeMzEpIGFuZCAyXjMxIC0gMS4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlID8gMSA6IDA7XG4gICAgfVxuXG4gICAgbGV0IG51bSA9IGNvZXJjZWRWYWx1ZTtcblxuICAgIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnc3RyaW5nJyAmJiBjb2VyY2VkVmFsdWUgIT09ICcnKSB7XG4gICAgICBudW0gPSBOdW1iZXIoY29lcmNlZFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIobnVtKSkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYEludCBjYW5ub3QgcmVwcmVzZW50IG5vbi1pbnRlZ2VyIHZhbHVlOiAke2luc3BlY3QoY29lcmNlZFZhbHVlKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAobnVtID4gR1JBUEhRTF9NQVhfSU5UIHx8IG51bSA8IEdSQVBIUUxfTUlOX0lOVCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgJ0ludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWU6ICcgK1xuICAgICAgICAgIGluc3BlY3QoY29lcmNlZFZhbHVlKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bTtcbiAgfSxcblxuICBwYXJzZVZhbHVlKGlucHV0VmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGlucHV0VmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6ICR7aW5zcGVjdChpbnB1dFZhbHVlKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRWYWx1ZSA+IEdSQVBIUUxfTUFYX0lOVCB8fCBpbnB1dFZhbHVlIDwgR1JBUEhRTF9NSU5fSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uIDMyLWJpdCBzaWduZWQgaW50ZWdlciB2YWx1ZTogJHtpbnB1dFZhbHVlfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9LFxuXG4gIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6ICR7cHJpbnQodmFsdWVOb2RlKX1gLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IHZhbHVlTm9kZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbnVtID0gcGFyc2VJbnQodmFsdWVOb2RlLnZhbHVlLCAxMCk7XG5cbiAgICBpZiAobnVtID4gR1JBUEhRTF9NQVhfSU5UIHx8IG51bSA8IEdSQVBIUUxfTUlOX0lOVCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYEludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWU6ICR7dmFsdWVOb2RlLnZhbHVlfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtO1xuICB9LFxufSk7XG5leHBvcnQgY29uc3QgR3JhcGhRTEZsb2F0ID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0Zsb2F0JyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ1RoZSBgRmxvYXRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgc2lnbmVkIGRvdWJsZS1wcmVjaXNpb24gZnJhY3Rpb25hbCB2YWx1ZXMgYXMgc3BlY2lmaWVkIGJ5IFtJRUVFIDc1NF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV9mbG9hdGluZ19wb2ludCkuJyxcblxuICBzZXJpYWxpemUob3V0cHV0VmFsdWUpIHtcbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSA/IDEgOiAwO1xuICAgIH1cblxuICAgIGxldCBudW0gPSBjb2VyY2VkVmFsdWU7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycgJiYgY29lcmNlZFZhbHVlICE9PSAnJykge1xuICAgICAgbnVtID0gTnVtYmVyKGNvZXJjZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNGaW5pdGUobnVtKSkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYEZsb2F0IGNhbm5vdCByZXByZXNlbnQgbm9uIG51bWVyaWMgdmFsdWU6ICR7aW5zcGVjdChjb2VyY2VkVmFsdWUpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZShpbnB1dFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzRmluaXRlKGlucHV0VmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgRmxvYXQgY2Fubm90IHJlcHJlc2VudCBub24gbnVtZXJpYyB2YWx1ZTogJHtpbnNwZWN0KGlucHV0VmFsdWUpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9LFxuXG4gIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuRkxPQVQgJiYgdmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgRmxvYXQgY2Fubm90IHJlcHJlc2VudCBub24gbnVtZXJpYyB2YWx1ZTogJHtwcmludCh2YWx1ZU5vZGUpfWAsXG4gICAgICAgIHZhbHVlTm9kZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWVOb2RlLnZhbHVlKTtcbiAgfSxcbn0pO1xuZXhwb3J0IGNvbnN0IEdyYXBoUUxTdHJpbmcgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnU3RyaW5nJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ1RoZSBgU3RyaW5nYCBzY2FsYXIgdHlwZSByZXByZXNlbnRzIHRleHR1YWwgZGF0YSwgcmVwcmVzZW50ZWQgYXMgVVRGLTggY2hhcmFjdGVyIHNlcXVlbmNlcy4gVGhlIFN0cmluZyB0eXBlIGlzIG1vc3Qgb2Z0ZW4gdXNlZCBieSBHcmFwaFFMIHRvIHJlcHJlc2VudCBmcmVlLWZvcm0gaHVtYW4tcmVhZGFibGUgdGV4dC4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7IC8vIFNlcmlhbGl6ZSBzdHJpbmcsIGJvb2xlYW4gYW5kIG51bWJlciB2YWx1ZXMgdG8gYSBzdHJpbmcsIGJ1dCBkbyBub3RcbiAgICAvLyBhdHRlbXB0IHRvIGNvZXJjZSBvYmplY3QsIGZ1bmN0aW9uLCBzeW1ib2wsIG9yIG90aGVyIHR5cGVzIGFzIHN0cmluZ3MuXG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdudW1iZXInICYmIE51bWJlci5pc0Zpbml0ZShjb2VyY2VkVmFsdWUpKSB7XG4gICAgICByZXR1cm4gY29lcmNlZFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgIGBTdHJpbmcgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHtpbnNwZWN0KG91dHB1dFZhbHVlKX1gLFxuICAgICk7XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZShpbnB1dFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYFN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyB2YWx1ZTogJHtpbnNwZWN0KGlucHV0VmFsdWUpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9LFxuXG4gIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuU1RSSU5HKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgU3RyaW5nIGNhbm5vdCByZXByZXNlbnQgYSBub24gc3RyaW5nIHZhbHVlOiAke3ByaW50KHZhbHVlTm9kZSl9YCxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiB2YWx1ZU5vZGUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWU7XG4gIH0sXG59KTtcbmV4cG9ydCBjb25zdCBHcmFwaFFMQm9vbGVhbiA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdCb29sZWFuJyxcbiAgZGVzY3JpcHRpb246ICdUaGUgYEJvb2xlYW5gIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgYHRydWVgIG9yIGBmYWxzZWAuJyxcblxuICBzZXJpYWxpemUob3V0cHV0VmFsdWUpIHtcbiAgICBjb25zdCBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoTnVtYmVyLmlzRmluaXRlKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWUgIT09IDA7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgIGBCb29sZWFuIGNhbm5vdCByZXByZXNlbnQgYSBub24gYm9vbGVhbiB2YWx1ZTogJHtpbnNwZWN0KGNvZXJjZWRWYWx1ZSl9YCxcbiAgICApO1xuICB9LFxuXG4gIHBhcnNlVmFsdWUoaW5wdXRWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICBgQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6ICR7aW5zcGVjdChpbnB1dFZhbHVlKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgfSxcblxuICBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLkJPT0xFQU4pIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBCb29sZWFuIGNhbm5vdCByZXByZXNlbnQgYSBub24gYm9vbGVhbiB2YWx1ZTogJHtwcmludCh2YWx1ZU5vZGUpfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9LFxufSk7XG5leHBvcnQgY29uc3QgR3JhcGhRTElEID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0lEJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ1RoZSBgSURgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgYSB1bmlxdWUgaWRlbnRpZmllciwgb2Z0ZW4gdXNlZCB0byByZWZldGNoIGFuIG9iamVjdCBvciBhcyBrZXkgZm9yIGEgY2FjaGUuIFRoZSBJRCB0eXBlIGFwcGVhcnMgaW4gYSBKU09OIHJlc3BvbnNlIGFzIGEgU3RyaW5nOyBob3dldmVyLCBpdCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgaHVtYW4tcmVhZGFibGUuIFdoZW4gZXhwZWN0ZWQgYXMgYW4gaW5wdXQgdHlwZSwgYW55IHN0cmluZyAoc3VjaCBhcyBgXCI0XCJgKSBvciBpbnRlZ2VyIChzdWNoIGFzIGA0YCkgaW5wdXQgdmFsdWUgd2lsbCBiZSBhY2NlcHRlZCBhcyBhbiBJRC4nLFxuXG4gIHNlcmlhbGl6ZShvdXRwdXRWYWx1ZSkge1xuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoY29lcmNlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhjb2VyY2VkVmFsdWUpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICBgSUQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHtpbnNwZWN0KG91dHB1dFZhbHVlKX1gLFxuICAgICk7XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZShpbnB1dFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGlucHV0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoYElEIGNhbm5vdCByZXByZXNlbnQgdmFsdWU6ICR7aW5zcGVjdChpbnB1dFZhbHVlKX1gKTtcbiAgfSxcblxuICBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLlNUUklORyAmJiB2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5JTlQpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICdJRCBjYW5ub3QgcmVwcmVzZW50IGEgbm9uLXN0cmluZyBhbmQgbm9uLWludGVnZXIgdmFsdWU6ICcgK1xuICAgICAgICAgIHByaW50KHZhbHVlTm9kZSksXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlczogdmFsdWVOb2RlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9LFxufSk7XG5leHBvcnQgY29uc3Qgc3BlY2lmaWVkU2NhbGFyVHlwZXMgPSBPYmplY3QuZnJlZXplKFtcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTEludCxcbiAgR3JhcGhRTEZsb2F0LFxuICBHcmFwaFFMQm9vbGVhbixcbiAgR3JhcGhRTElELFxuXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWZpZWRTY2FsYXJUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHNwZWNpZmllZFNjYWxhclR5cGVzLnNvbWUoKHsgbmFtZSB9KSA9PiB0eXBlLm5hbWUgPT09IG5hbWUpO1xufSAvLyBTdXBwb3J0IHNlcmlhbGl6aW5nIG9iamVjdHMgd2l0aCBjdXN0b20gdmFsdWVPZigpIG9yIHRvSlNPTigpIGZ1bmN0aW9ucyAtXG4vLyBhIGNvbW1vbiB3YXkgdG8gcmVwcmVzZW50IGEgY29tcGxleCB2YWx1ZSB3aGljaCBjYW4gYmUgcmVwcmVzZW50ZWQgYXNcbi8vIGEgc3RyaW5nIChleDogTW9uZ29EQiBpZCBvYmplY3RzKS5cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KG91dHB1dFZhbHVlKSB7XG4gIGlmIChpc09iamVjdExpa2Uob3V0cHV0VmFsdWUpKSB7XG4gICAgaWYgKHR5cGVvZiBvdXRwdXRWYWx1ZS52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCB2YWx1ZU9mUmVzdWx0ID0gb3V0cHV0VmFsdWUudmFsdWVPZigpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZU9mUmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gdmFsdWVPZlJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG91dHB1dFZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG91dHB1dFZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnN0YW5jZU9mIH0gZnJvbSAnLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdExpa2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMnO1xuaW1wb3J0IHsgdG9PYmpNYXAgfSBmcm9tICcuLi9qc3V0aWxzL3RvT2JqTWFwLm1qcyc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlTm9kZSB9IGZyb20gJy4uL2xhbmd1YWdlL2FzdC5tanMnO1xuaW1wb3J0IHtcbiAgZ2V0TmFtZWRUeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzVW5pb25UeXBlLFxufSBmcm9tICcuL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7IGlzRGlyZWN0aXZlLCBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLm1qcyc7XG5pbXBvcnQgeyBfX1NjaGVtYSB9IGZyb20gJy4vaW50cm9zcGVjdGlvbi5tanMnO1xuLyoqXG4gKiBUZXN0IGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIEdyYXBoUUwgc2NoZW1hLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVtYShzY2hlbWEpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2Yoc2NoZW1hLCBHcmFwaFFMU2NoZW1hKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTY2hlbWEoc2NoZW1hKSB7XG4gIGlmICghaXNTY2hlbWEoc2NoZW1hKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHtpbnNwZWN0KHNjaGVtYSl9IHRvIGJlIGEgR3JhcGhRTCBzY2hlbWEuYCk7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hO1xufVxuLyoqXG4gKiBDdXN0b20gZXh0ZW5zaW9uc1xuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgYSB1bmlxdWUgaWRlbnRpZmllciBuYW1lIGZvciB5b3VyIGV4dGVuc2lvbiwgZm9yIGV4YW1wbGUgdGhlIG5hbWUgb2ZcbiAqIHlvdXIgbGlicmFyeSBvciBwcm9qZWN0LiBEbyBub3QgdXNlIGEgc2hvcnRlbmVkIGlkZW50aWZpZXIgYXMgdGhpcyBpbmNyZWFzZXNcbiAqIHRoZSByaXNrIG9mIGNvbmZsaWN0cy4gV2UgcmVjb21tZW5kIHlvdSBhZGQgYXQgbW9zdCBvbmUgZXh0ZW5zaW9uIGZpZWxkLFxuICogYW4gb2JqZWN0IHdoaWNoIGNhbiBjb250YWluIGFsbCB0aGUgdmFsdWVzIHlvdSBuZWVkLlxuICovXG5cbi8qKlxuICogU2NoZW1hIERlZmluaXRpb25cbiAqXG4gKiBBIFNjaGVtYSBpcyBjcmVhdGVkIGJ5IHN1cHBseWluZyB0aGUgcm9vdCB0eXBlcyBvZiBlYWNoIHR5cGUgb2Ygb3BlcmF0aW9uLFxuICogcXVlcnkgYW5kIG11dGF0aW9uIChvcHRpb25hbCkuIEEgc2NoZW1hIGRlZmluaXRpb24gaXMgdGhlbiBzdXBwbGllZCB0byB0aGVcbiAqIHZhbGlkYXRvciBhbmQgZXhlY3V0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgTXlBcHBTY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gKiAgIHF1ZXJ5OiBNeUFwcFF1ZXJ5Um9vdFR5cGUsXG4gKiAgIG11dGF0aW9uOiBNeUFwcE11dGF0aW9uUm9vdFR5cGUsXG4gKiB9KVxuICogYGBgXG4gKlxuICogTm90ZTogV2hlbiB0aGUgc2NoZW1hIGlzIGNvbnN0cnVjdGVkLCBieSBkZWZhdWx0IG9ubHkgdGhlIHR5cGVzIHRoYXQgYXJlXG4gKiByZWFjaGFibGUgYnkgdHJhdmVyc2luZyB0aGUgcm9vdCB0eXBlcyBhcmUgaW5jbHVkZWQsIG90aGVyIHR5cGVzIG11c3QgYmVcbiAqIGV4cGxpY2l0bHkgcmVmZXJlbmNlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBjaGFyYWN0ZXJJbnRlcmZhY2UgPSBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICogICBuYW1lOiAnQ2hhcmFjdGVyJyxcbiAqICAgLi4uXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBodW1hblR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnSHVtYW4nLFxuICogICBpbnRlcmZhY2VzOiBbY2hhcmFjdGVySW50ZXJmYWNlXSxcbiAqICAgLi4uXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBkcm9pZFR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICBuYW1lOiAnRHJvaWQnLFxuICogICBpbnRlcmZhY2VzOiBbY2hhcmFjdGVySW50ZXJmYWNlXSxcbiAqICAgLi4uXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBzY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gKiAgIHF1ZXJ5OiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgIG5hbWU6ICdRdWVyeScsXG4gKiAgICAgZmllbGRzOiB7XG4gKiAgICAgICBoZXJvOiB7IHR5cGU6IGNoYXJhY3RlckludGVyZmFjZSwgLi4uIH0sXG4gKiAgICAgfVxuICogICB9KSxcbiAqICAgLi4uXG4gKiAgIC8vIFNpbmNlIHRoaXMgc2NoZW1hIHJlZmVyZW5jZXMgb25seSB0aGUgYENoYXJhY3RlcmAgaW50ZXJmYWNlIGl0J3NcbiAqICAgLy8gbmVjZXNzYXJ5IHRvIGV4cGxpY2l0bHkgbGlzdCB0aGUgdHlwZXMgdGhhdCBpbXBsZW1lbnQgaXQgaWZcbiAqICAgLy8geW91IHdhbnQgdGhlbSB0byBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgc2NoZW1hLlxuICogICB0eXBlczogW2h1bWFuVHlwZSwgZHJvaWRUeXBlXSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBOb3RlOiBJZiBhbiBhcnJheSBvZiBgZGlyZWN0aXZlc2AgYXJlIHByb3ZpZGVkIHRvIEdyYXBoUUxTY2hlbWEsIHRoYXQgd2lsbCBiZVxuICogdGhlIGV4YWN0IGxpc3Qgb2YgZGlyZWN0aXZlcyByZXByZXNlbnRlZCBhbmQgYWxsb3dlZC4gSWYgYGRpcmVjdGl2ZXNgIGlzIG5vdFxuICogcHJvdmlkZWQgdGhlbiBhIGRlZmF1bHQgc2V0IG9mIHRoZSBzcGVjaWZpZWQgZGlyZWN0aXZlcyAoZS5nLiBgQGluY2x1ZGVgIGFuZFxuICogYEBza2lwYCkgd2lsbCBiZSB1c2VkLiBJZiB5b3Ugd2lzaCB0byBwcm92aWRlICphZGRpdGlvbmFsKiBkaXJlY3RpdmVzIHRvIHRoZXNlXG4gKiBzcGVjaWZpZWQgZGlyZWN0aXZlcywgeW91IG11c3QgZXhwbGljaXRseSBkZWNsYXJlIHRoZW0uIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IE15QXBwU2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICogICAuLi5cbiAqICAgZGlyZWN0aXZlczogc3BlY2lmaWVkRGlyZWN0aXZlcy5jb25jYXQoWyBteUN1c3RvbURpcmVjdGl2ZSBdKSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdyYXBoUUxTY2hlbWEge1xuICAvLyBVc2VkIGFzIGEgY2FjaGUgZm9yIHZhbGlkYXRlU2NoZW1hKCkuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJGV4dGVuc2lvbkFTVE4sIF9jb25maWckZGlyZWN0aXZlcztcblxuICAgIC8vIElmIHRoaXMgc2NoZW1hIHdhcyBidWlsdCBmcm9tIGEgc291cmNlIGtub3duIHRvIGJlIHZhbGlkLCB0aGVuIGl0IG1heSBiZVxuICAgIC8vIG1hcmtlZCB3aXRoIGFzc3VtZVZhbGlkIHRvIGF2b2lkIGFuIGFkZGl0aW9uYWwgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvbi5cbiAgICB0aGlzLl9fdmFsaWRhdGlvbkVycm9ycyA9IGNvbmZpZy5hc3N1bWVWYWxpZCA9PT0gdHJ1ZSA/IFtdIDogdW5kZWZpbmVkOyAvLyBDaGVjayBmb3IgY29tbW9uIG1pc3Rha2VzIGR1cmluZyBjb25zdHJ1Y3Rpb24gdG8gcHJvZHVjZSBlYXJseSBlcnJvcnMuXG5cbiAgICBpc09iamVjdExpa2UoY29uZmlnKSB8fFxuICAgICAgZGV2QXNzZXJ0KGZhbHNlLCAnTXVzdCBwcm92aWRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LicpO1xuICAgICFjb25maWcudHlwZXMgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkoY29uZmlnLnR5cGVzKSB8fFxuICAgICAgZGV2QXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYFwidHlwZXNcIiBtdXN0IGJlIEFycmF5IGlmIHByb3ZpZGVkIGJ1dCBnb3Q6ICR7aW5zcGVjdChjb25maWcudHlwZXMpfS5gLFxuICAgICAgKTtcbiAgICAhY29uZmlnLmRpcmVjdGl2ZXMgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkoY29uZmlnLmRpcmVjdGl2ZXMpIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnXCJkaXJlY3RpdmVzXCIgbXVzdCBiZSBBcnJheSBpZiBwcm92aWRlZCBidXQgZ290OiAnICtcbiAgICAgICAgICBgJHtpbnNwZWN0KGNvbmZpZy5kaXJlY3RpdmVzKX0uYCxcbiAgICAgICk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9XG4gICAgICAoX2NvbmZpZyRleHRlbnNpb25BU1ROID0gY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzKSAhPT0gbnVsbCAmJlxuICAgICAgX2NvbmZpZyRleHRlbnNpb25BU1ROICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGV4dGVuc2lvbkFTVE5cbiAgICAgICAgOiBbXTtcbiAgICB0aGlzLl9xdWVyeVR5cGUgPSBjb25maWcucXVlcnk7XG4gICAgdGhpcy5fbXV0YXRpb25UeXBlID0gY29uZmlnLm11dGF0aW9uO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvblR5cGUgPSBjb25maWcuc3Vic2NyaXB0aW9uOyAvLyBQcm92aWRlIHNwZWNpZmllZCBkaXJlY3RpdmVzIChlLmcuIEBpbmNsdWRlIGFuZCBAc2tpcCkgYnkgZGVmYXVsdC5cblxuICAgIHRoaXMuX2RpcmVjdGl2ZXMgPVxuICAgICAgKF9jb25maWckZGlyZWN0aXZlcyA9IGNvbmZpZy5kaXJlY3RpdmVzKSAhPT0gbnVsbCAmJlxuICAgICAgX2NvbmZpZyRkaXJlY3RpdmVzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGRpcmVjdGl2ZXNcbiAgICAgICAgOiBzcGVjaWZpZWREaXJlY3RpdmVzOyAvLyBUbyBwcmVzZXJ2ZSBvcmRlciBvZiB1c2VyLXByb3ZpZGVkIHR5cGVzLCB3ZSBhZGQgZmlyc3QgdG8gYWRkIHRoZW0gdG9cbiAgICAvLyB0aGUgc2V0IG9mIFwiY29sbGVjdGVkXCIgdHlwZXMsIHNvIGBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzYCBpZ25vcmUgdGhlbS5cblxuICAgIGNvbnN0IGFsbFJlZmVyZW5jZWRUeXBlcyA9IG5ldyBTZXQoY29uZmlnLnR5cGVzKTtcblxuICAgIGlmIChjb25maWcudHlwZXMgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCB0eXBlIG9mIGNvbmZpZy50eXBlcykge1xuICAgICAgICAvLyBXaGVuIHdlIHJlYWR5IHRvIHByb2Nlc3MgdGhpcyB0eXBlLCB3ZSByZW1vdmUgaXQgZnJvbSBcImNvbGxlY3RlZFwiIHR5cGVzXG4gICAgICAgIC8vIGFuZCB0aGVuIGFkZCBpdCB0b2dldGhlciB3aXRoIGFsbCBkZXBlbmRlbnQgdHlwZXMgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24uXG4gICAgICAgIGFsbFJlZmVyZW5jZWRUeXBlcy5kZWxldGUodHlwZSk7XG4gICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcXVlcnlUeXBlICE9IG51bGwpIHtcbiAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModGhpcy5fcXVlcnlUeXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tdXRhdGlvblR5cGUgIT0gbnVsbCkge1xuICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0aGlzLl9tdXRhdGlvblR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvblR5cGUgIT0gbnVsbCkge1xuICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0aGlzLl9zdWJzY3JpcHRpb25UeXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIHRoaXMuX2RpcmVjdGl2ZXMpIHtcbiAgICAgIC8vIERpcmVjdGl2ZXMgYXJlIG5vdCB2YWxpZGF0ZWQgdW50aWwgdmFsaWRhdGVTY2hlbWEoKSBpcyBjYWxsZWQuXG4gICAgICBpZiAoaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBkaXJlY3RpdmUuYXJncykge1xuICAgICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMoYXJnLnR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKF9fU2NoZW1hLCBhbGxSZWZlcmVuY2VkVHlwZXMpOyAvLyBTdG9yaW5nIHRoZSByZXN1bHRpbmcgbWFwIGZvciByZWZlcmVuY2UgYnkgdGhlIHNjaGVtYS5cblxuICAgIHRoaXMuX3R5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3N1YlR5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBLZWVwIHRyYWNrIG9mIGFsbCBpbXBsZW1lbnRhdGlvbnMgYnkgaW50ZXJmYWNlIG5hbWUuXG5cbiAgICB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBuYW1lZFR5cGUgb2YgYWxsUmVmZXJlbmNlZFR5cGVzKSB7XG4gICAgICBpZiAobmFtZWRUeXBlID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHR5cGVOYW1lID0gbmFtZWRUeXBlLm5hbWU7XG4gICAgICB0eXBlTmFtZSB8fFxuICAgICAgICBkZXZBc3NlcnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ09uZSBvZiB0aGUgcHJvdmlkZWQgdHlwZXMgZm9yIGJ1aWxkaW5nIHRoZSBTY2hlbWEgaXMgbWlzc2luZyBhIG5hbWUuJyxcbiAgICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuX3R5cGVNYXBbdHlwZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBTY2hlbWEgbXVzdCBjb250YWluIHVuaXF1ZWx5IG5hbWVkIHR5cGVzIGJ1dCBjb250YWlucyBtdWx0aXBsZSB0eXBlcyBuYW1lZCBcIiR7dHlwZU5hbWV9XCIuYCxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHlwZU1hcFt0eXBlTmFtZV0gPSBuYW1lZFR5cGU7XG5cbiAgICAgIGlmIChpc0ludGVyZmFjZVR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgICAvLyBTdG9yZSBpbXBsZW1lbnRhdGlvbnMgYnkgaW50ZXJmYWNlLlxuICAgICAgICBmb3IgKGNvbnN0IGlmYWNlIG9mIG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgICAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKGlmYWNlKSkge1xuICAgICAgICAgICAgbGV0IGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpZmFjZS5uYW1lXTtcblxuICAgICAgICAgICAgaWYgKGltcGxlbWVudGF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpZmFjZS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBvYmplY3RzOiBbXSxcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2VzOiBbXSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb25zLmludGVyZmFjZXMucHVzaChuYW1lZFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdFR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgICAvLyBTdG9yZSBpbXBsZW1lbnRhdGlvbnMgYnkgb2JqZWN0cy5cbiAgICAgICAgZm9yIChjb25zdCBpZmFjZSBvZiBuYW1lZFR5cGUuZ2V0SW50ZXJmYWNlcygpKSB7XG4gICAgICAgICAgaWYgKGlzSW50ZXJmYWNlVHlwZShpZmFjZSkpIHtcbiAgICAgICAgICAgIGxldCBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbaWZhY2UubmFtZV07XG5cbiAgICAgICAgICAgIGlmIChpbXBsZW1lbnRhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbaWZhY2UubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0czogW10sXG4gICAgICAgICAgICAgICAgaW50ZXJmYWNlczogW10sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGltcGxlbWVudGF0aW9ucy5vYmplY3RzLnB1c2gobmFtZWRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdHcmFwaFFMU2NoZW1hJztcbiAgfVxuXG4gIGdldFF1ZXJ5VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVlcnlUeXBlO1xuICB9XG5cbiAgZ2V0TXV0YXRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9tdXRhdGlvblR5cGU7XG4gIH1cblxuICBnZXRTdWJzY3JpcHRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25UeXBlO1xuICB9XG5cbiAgZ2V0Um9vdFR5cGUob3BlcmF0aW9uKSB7XG4gICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZU5vZGUuUVVFUlk6XG4gICAgICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5VHlwZSgpO1xuXG4gICAgICBjYXNlIE9wZXJhdGlvblR5cGVOb2RlLk1VVEFUSU9OOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNdXRhdGlvblR5cGUoKTtcblxuICAgICAgY2FzZSBPcGVyYXRpb25UeXBlTm9kZS5TVUJTQ1JJUFRJT046XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXRUeXBlTWFwKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlTWFwO1xuICB9XG5cbiAgZ2V0VHlwZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHlwZU1hcCgpW25hbWVdO1xuICB9XG5cbiAgZ2V0UG9zc2libGVUeXBlcyhhYnN0cmFjdFR5cGUpIHtcbiAgICByZXR1cm4gaXNVbmlvblR5cGUoYWJzdHJhY3RUeXBlKVxuICAgICAgPyBhYnN0cmFjdFR5cGUuZ2V0VHlwZXMoKVxuICAgICAgOiB0aGlzLmdldEltcGxlbWVudGF0aW9ucyhhYnN0cmFjdFR5cGUpLm9iamVjdHM7XG4gIH1cblxuICBnZXRJbXBsZW1lbnRhdGlvbnMoaW50ZXJmYWNlVHlwZSkge1xuICAgIGNvbnN0IGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpbnRlcmZhY2VUeXBlLm5hbWVdO1xuICAgIHJldHVybiBpbXBsZW1lbnRhdGlvbnMgIT09IG51bGwgJiYgaW1wbGVtZW50YXRpb25zICE9PSB2b2lkIDBcbiAgICAgID8gaW1wbGVtZW50YXRpb25zXG4gICAgICA6IHtcbiAgICAgICAgICBvYmplY3RzOiBbXSxcbiAgICAgICAgICBpbnRlcmZhY2VzOiBbXSxcbiAgICAgICAgfTtcbiAgfVxuXG4gIGlzU3ViVHlwZShhYnN0cmFjdFR5cGUsIG1heWJlU3ViVHlwZSkge1xuICAgIGxldCBtYXAgPSB0aGlzLl9zdWJUeXBlTWFwW2Fic3RyYWN0VHlwZS5uYW1lXTtcblxuICAgIGlmIChtYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgaWYgKGlzVW5pb25UeXBlKGFic3RyYWN0VHlwZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIGFic3RyYWN0VHlwZS5nZXRUeXBlcygpKSB7XG4gICAgICAgICAgbWFwW3R5cGUubmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLmdldEltcGxlbWVudGF0aW9ucyhhYnN0cmFjdFR5cGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbnMub2JqZWN0cykge1xuICAgICAgICAgIG1hcFt0eXBlLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBpbXBsZW1lbnRhdGlvbnMuaW50ZXJmYWNlcykge1xuICAgICAgICAgIG1hcFt0eXBlLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdWJUeXBlTWFwW2Fic3RyYWN0VHlwZS5uYW1lXSA9IG1hcDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwW21heWJlU3ViVHlwZS5uYW1lXSAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0RGlyZWN0aXZlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aXZlcztcbiAgfVxuXG4gIGdldERpcmVjdGl2ZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RGlyZWN0aXZlcygpLmZpbmQoKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLm5hbWUgPT09IG5hbWUpO1xuICB9XG5cbiAgdG9Db25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgcXVlcnk6IHRoaXMuZ2V0UXVlcnlUeXBlKCksXG4gICAgICBtdXRhdGlvbjogdGhpcy5nZXRNdXRhdGlvblR5cGUoKSxcbiAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy5nZXRTdWJzY3JpcHRpb25UeXBlKCksXG4gICAgICB0eXBlczogT2JqZWN0LnZhbHVlcyh0aGlzLmdldFR5cGVNYXAoKSksXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLmdldERpcmVjdGl2ZXMoKSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgICAgYXNzdW1lVmFsaWQ6IHRoaXMuX192YWxpZGF0aW9uRXJyb3JzICE9PSB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHR5cGUsIHR5cGVTZXQpIHtcbiAgY29uc3QgbmFtZWRUeXBlID0gZ2V0TmFtZWRUeXBlKHR5cGUpO1xuXG4gIGlmICghdHlwZVNldC5oYXMobmFtZWRUeXBlKSkge1xuICAgIHR5cGVTZXQuYWRkKG5hbWVkVHlwZSk7XG5cbiAgICBpZiAoaXNVbmlvblR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgZm9yIChjb25zdCBtZW1iZXJUeXBlIG9mIG5hbWVkVHlwZS5nZXRUeXBlcygpKSB7XG4gICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMobWVtYmVyVHlwZSwgdHlwZVNldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFR5cGUobmFtZWRUeXBlKSB8fCBpc0ludGVyZmFjZVR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgZm9yIChjb25zdCBpbnRlcmZhY2VUeXBlIG9mIG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhpbnRlcmZhY2VUeXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3QudmFsdWVzKG5hbWVkVHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhmaWVsZC50eXBlLCB0eXBlU2V0KTtcblxuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBmaWVsZC5hcmdzKSB7XG4gICAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhhcmcudHlwZSwgdHlwZVNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgT2JqZWN0LnZhbHVlcyhuYW1lZFR5cGUuZ2V0RmllbGRzKCkpKSB7XG4gICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMoZmllbGQudHlwZSwgdHlwZVNldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVTZXQ7XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGVOb2RlIH0gZnJvbSAnLi4vbGFuZ3VhZ2UvYXN0Lm1qcyc7XG5pbXBvcnQgeyBpc0VxdWFsVHlwZSwgaXNUeXBlU3ViVHlwZU9mIH0gZnJvbSAnLi4vdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5tanMnO1xuaW1wb3J0IHtcbiAgaXNFbnVtVHlwZSxcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzSW5wdXRUeXBlLFxuICBpc0ludGVyZmFjZVR5cGUsXG4gIGlzTmFtZWRUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzT3V0cHV0VHlwZSxcbiAgaXNSZXF1aXJlZEFyZ3VtZW50LFxuICBpc1JlcXVpcmVkSW5wdXRGaWVsZCxcbiAgaXNVbmlvblR5cGUsXG59IGZyb20gJy4vZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTERlcHJlY2F0ZWREaXJlY3RpdmUsIGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzLm1qcyc7XG5pbXBvcnQgeyBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSAnLi9pbnRyb3NwZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBhc3NlcnRTY2hlbWEgfSBmcm9tICcuL3NjaGVtYS5tanMnO1xuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIlR5cGUgVmFsaWRhdGlvblwiIHN1Yi1zZWN0aW9ucyBvZiB0aGUgc3BlY2lmaWNhdGlvbidzXG4gKiBcIlR5cGUgU3lzdGVtXCIgc2VjdGlvbi5cbiAqXG4gKiBWYWxpZGF0aW9uIHJ1bnMgc3luY2hyb25vdXNseSwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGVuY291bnRlcmVkIGVycm9ycywgb3JcbiAqIGFuIGVtcHR5IGFycmF5IGlmIG5vIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkIGFuZCB0aGUgU2NoZW1hIGlzIHZhbGlkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpIHtcbiAgLy8gRmlyc3QgY2hlY2sgdG8gZW5zdXJlIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBpbiBmYWN0IGEgR3JhcGhRTFNjaGVtYS5cbiAgYXNzZXJ0U2NoZW1hKHNjaGVtYSk7IC8vIElmIHRoaXMgU2NoZW1hIGhhcyBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkLCByZXR1cm4gdGhlIHByZXZpb3VzIHJlc3VsdHMuXG5cbiAgaWYgKHNjaGVtYS5fX3ZhbGlkYXRpb25FcnJvcnMpIHtcbiAgICByZXR1cm4gc2NoZW1hLl9fdmFsaWRhdGlvbkVycm9ycztcbiAgfSAvLyBWYWxpZGF0ZSB0aGUgc2NoZW1hLCBwcm9kdWNpbmcgYSBsaXN0IG9mIGVycm9ycy5cblxuICBjb25zdCBjb250ZXh0ID0gbmV3IFNjaGVtYVZhbGlkYXRpb25Db250ZXh0KHNjaGVtYSk7XG4gIHZhbGlkYXRlUm9vdFR5cGVzKGNvbnRleHQpO1xuICB2YWxpZGF0ZURpcmVjdGl2ZXMoY29udGV4dCk7XG4gIHZhbGlkYXRlVHlwZXMoY29udGV4dCk7IC8vIFBlcnNpc3QgdGhlIHJlc3VsdHMgb2YgdmFsaWRhdGlvbiBiZWZvcmUgcmV0dXJuaW5nIHRvIGVuc3VyZSB2YWxpZGF0aW9uXG4gIC8vIGRvZXMgbm90IHJ1biBtdWx0aXBsZSB0aW1lcyBmb3IgdGhpcyBzY2hlbWEuXG5cbiAgY29uc3QgZXJyb3JzID0gY29udGV4dC5nZXRFcnJvcnMoKTtcbiAgc2NoZW1hLl9fdmFsaWRhdGlvbkVycm9ycyA9IGVycm9ycztcbiAgcmV0dXJuIGVycm9ycztcbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB3aGljaCBhc3NlcnRzIGEgc2NoZW1hIGlzIHZhbGlkIGJ5IHRocm93aW5nIGFuIGVycm9yIGlmXG4gKiBpdCBpcyBpbnZhbGlkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZFNjaGVtYShzY2hlbWEpIHtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG5cbmNsYXNzIFNjaGVtYVZhbGlkYXRpb25Db250ZXh0IHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgdGhpcy5fZXJyb3JzID0gW107XG4gICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gIH1cblxuICByZXBvcnRFcnJvcihtZXNzYWdlLCBub2Rlcykge1xuICAgIGNvbnN0IF9ub2RlcyA9IEFycmF5LmlzQXJyYXkobm9kZXMpID8gbm9kZXMuZmlsdGVyKEJvb2xlYW4pIDogbm9kZXM7XG5cbiAgICB0aGlzLl9lcnJvcnMucHVzaChcbiAgICAgIG5ldyBHcmFwaFFMRXJyb3IobWVzc2FnZSwge1xuICAgICAgICBub2RlczogX25vZGVzLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGdldEVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3JzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUm9vdFR5cGVzKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5zY2hlbWE7XG4gIGNvbnN0IHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICBpZiAoIXF1ZXJ5VHlwZSkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoJ1F1ZXJ5IHJvb3QgdHlwZSBtdXN0IGJlIHByb3ZpZGVkLicsIHNjaGVtYS5hc3ROb2RlKTtcbiAgfSBlbHNlIGlmICghaXNPYmplY3RUeXBlKHF1ZXJ5VHlwZSkpIHtcbiAgICB2YXIgX2dldE9wZXJhdGlvblR5cGVOb2RlO1xuXG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgIGBRdWVyeSByb290IHR5cGUgbXVzdCBiZSBPYmplY3QgdHlwZSwgaXQgY2Fubm90IGJlICR7aW5zcGVjdChcbiAgICAgICAgcXVlcnlUeXBlLFxuICAgICAgKX0uYCxcbiAgICAgIChfZ2V0T3BlcmF0aW9uVHlwZU5vZGUgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBPcGVyYXRpb25UeXBlTm9kZS5RVUVSWSxcbiAgICAgICkpICE9PSBudWxsICYmIF9nZXRPcGVyYXRpb25UeXBlTm9kZSAhPT0gdm9pZCAwXG4gICAgICAgID8gX2dldE9wZXJhdGlvblR5cGVOb2RlXG4gICAgICAgIDogcXVlcnlUeXBlLmFzdE5vZGUsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcblxuICBpZiAobXV0YXRpb25UeXBlICYmICFpc09iamVjdFR5cGUobXV0YXRpb25UeXBlKSkge1xuICAgIHZhciBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyO1xuXG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICdNdXRhdGlvbiByb290IHR5cGUgbXVzdCBiZSBPYmplY3QgdHlwZSBpZiBwcm92aWRlZCwgaXQgY2Fubm90IGJlICcgK1xuICAgICAgICBgJHtpbnNwZWN0KG11dGF0aW9uVHlwZSl9LmAsXG4gICAgICAoX2dldE9wZXJhdGlvblR5cGVOb2RlMiA9IGdldE9wZXJhdGlvblR5cGVOb2RlKFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIE9wZXJhdGlvblR5cGVOb2RlLk1VVEFUSU9OLFxuICAgICAgKSkgIT09IG51bGwgJiYgX2dldE9wZXJhdGlvblR5cGVOb2RlMiAhPT0gdm9pZCAwXG4gICAgICAgID8gX2dldE9wZXJhdGlvblR5cGVOb2RlMlxuICAgICAgICA6IG11dGF0aW9uVHlwZS5hc3ROb2RlLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBzdWJzY3JpcHRpb25UeXBlID0gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcblxuICBpZiAoc3Vic2NyaXB0aW9uVHlwZSAmJiAhaXNPYmplY3RUeXBlKHN1YnNjcmlwdGlvblR5cGUpKSB7XG4gICAgdmFyIF9nZXRPcGVyYXRpb25UeXBlTm9kZTM7XG5cbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgJ1N1YnNjcmlwdGlvbiByb290IHR5cGUgbXVzdCBiZSBPYmplY3QgdHlwZSBpZiBwcm92aWRlZCwgaXQgY2Fubm90IGJlICcgK1xuICAgICAgICBgJHtpbnNwZWN0KHN1YnNjcmlwdGlvblR5cGUpfS5gLFxuICAgICAgKF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBPcGVyYXRpb25UeXBlTm9kZS5TVUJTQ1JJUFRJT04sXG4gICAgICApKSAhPT0gbnVsbCAmJiBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzXG4gICAgICAgIDogc3Vic2NyaXB0aW9uVHlwZS5hc3ROb2RlLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3BlcmF0aW9uVHlwZU5vZGUoc2NoZW1hLCBvcGVyYXRpb24pIHtcbiAgdmFyIF9mbGF0TWFwJGZpbmQ7XG5cbiAgcmV0dXJuIChfZmxhdE1hcCRmaW5kID0gW3NjaGVtYS5hc3ROb2RlLCAuLi5zY2hlbWEuZXh0ZW5zaW9uQVNUTm9kZXNdXG4gICAgLmZsYXRNYXAoXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgICAgKHNjaGVtYU5vZGUpID0+IHtcbiAgICAgICAgdmFyIF9zY2hlbWFOb2RlJG9wZXJhdGlvbjtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgKF9zY2hlbWFOb2RlJG9wZXJhdGlvbiA9XG4gICAgICAgICAgICBzY2hlbWFOb2RlID09PSBudWxsIHx8IHNjaGVtYU5vZGUgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IHNjaGVtYU5vZGUub3BlcmF0aW9uVHlwZXMpICE9PSBudWxsICYmXG4gICAgICAgICAgICBfc2NoZW1hTm9kZSRvcGVyYXRpb24gIT09IHZvaWQgMFxuICAgICAgICAgICAgPyBfc2NoZW1hTm9kZSRvcGVyYXRpb25cbiAgICAgICAgICAgIDogW11cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgKVxuICAgIC5maW5kKChvcGVyYXRpb25Ob2RlKSA9PiBvcGVyYXRpb25Ob2RlLm9wZXJhdGlvbiA9PT0gb3BlcmF0aW9uKSkgPT09IG51bGwgfHxcbiAgICBfZmxhdE1hcCRmaW5kID09PSB2b2lkIDBcbiAgICA/IHZvaWQgMFxuICAgIDogX2ZsYXRNYXAkZmluZC50eXBlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZXMoY29udGV4dCkge1xuICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBjb250ZXh0LnNjaGVtYS5nZXREaXJlY3RpdmVzKCkpIHtcbiAgICAvLyBFbnN1cmUgYWxsIGRpcmVjdGl2ZXMgYXJlIGluIGZhY3QgR3JhcGhRTCBkaXJlY3RpdmVzLlxuICAgIGlmICghaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIGRpcmVjdGl2ZSBidXQgZ290OiAke2luc3BlY3QoZGlyZWN0aXZlKX0uYCxcbiAgICAgICAgZGlyZWN0aXZlID09PSBudWxsIHx8IGRpcmVjdGl2ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlyZWN0aXZlLmFzdE5vZGUsXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGRpcmVjdGl2ZSk7IC8vIFRPRE86IEVuc3VyZSBwcm9wZXIgbG9jYXRpb25zLlxuICAgIC8vIEVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSB2YWxpZC5cblxuICAgIGZvciAoY29uc3QgYXJnIG9mIGRpcmVjdGl2ZS5hcmdzKSB7XG4gICAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGFyZyk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBpbnB1dCB0eXBlLlxuXG4gICAgICBpZiAoIWlzSW5wdXRUeXBlKGFyZy50eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIGBUaGUgdHlwZSBvZiBAJHtkaXJlY3RpdmUubmFtZX0oJHthcmcubmFtZX06KSBtdXN0IGJlIElucHV0IFR5cGUgYCArXG4gICAgICAgICAgICBgYnV0IGdvdDogJHtpbnNwZWN0KGFyZy50eXBlKX0uYCxcbiAgICAgICAgICBhcmcuYXN0Tm9kZSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUmVxdWlyZWRBcmd1bWVudChhcmcpICYmIGFyZy5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBfYXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgUmVxdWlyZWQgYXJndW1lbnQgQCR7ZGlyZWN0aXZlLm5hbWV9KCR7YXJnLm5hbWV9OikgY2Fubm90IGJlIGRlcHJlY2F0ZWQuYCxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShhcmcuYXN0Tm9kZSksXG4gICAgICAgICAgICAoX2FyZyRhc3ROb2RlID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX2FyZyRhc3ROb2RlLnR5cGUsXG4gICAgICAgICAgXSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKGNvbnRleHQsIG5vZGUpIHtcbiAgLy8gRW5zdXJlIG5hbWVzIGFyZSB2YWxpZCwgaG93ZXZlciBpbnRyb3NwZWN0aW9uIHR5cGVzIG9wdCBvdXQuXG4gIGlmIChub2RlLm5hbWUuc3RhcnRzV2l0aCgnX18nKSkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICBgTmFtZSBcIiR7bm9kZS5uYW1lfVwiIG11c3Qgbm90IGJlZ2luIHdpdGggXCJfX1wiLCB3aGljaCBpcyByZXNlcnZlZCBieSBHcmFwaFFMIGludHJvc3BlY3Rpb24uYCxcbiAgICAgIG5vZGUuYXN0Tm9kZSxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZXMoY29udGV4dCkge1xuICBjb25zdCB2YWxpZGF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzID1cbiAgICBjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcihjb250ZXh0KTtcbiAgY29uc3QgdHlwZU1hcCA9IGNvbnRleHQuc2NoZW1hLmdldFR5cGVNYXAoKTtcblxuICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LnZhbHVlcyh0eXBlTWFwKSkge1xuICAgIC8vIEVuc3VyZSBhbGwgcHJvdmlkZWQgdHlwZXMgYXJlIGluIGZhY3QgR3JhcGhRTCB0eXBlLlxuICAgIGlmICghaXNOYW1lZFR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCBHcmFwaFFMIG5hbWVkIHR5cGUgYnV0IGdvdDogJHtpbnNwZWN0KHR5cGUpfS5gLFxuICAgICAgICB0eXBlLmFzdE5vZGUsXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBFbnN1cmUgaXQgaXMgbmFtZWQgY29ycmVjdGx5IChleGNsdWRpbmcgaW50cm9zcGVjdGlvbiB0eXBlcykuXG5cbiAgICBpZiAoIWlzSW50cm9zcGVjdGlvblR5cGUodHlwZSkpIHtcbiAgICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCB0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgZmllbGRzIGFyZSB2YWxpZFxuICAgICAgdmFsaWRhdGVGaWVsZHMoY29udGV4dCwgdHlwZSk7IC8vIEVuc3VyZSBvYmplY3RzIGltcGxlbWVudCB0aGUgaW50ZXJmYWNlcyB0aGV5IGNsYWltIHRvLlxuXG4gICAgICB2YWxpZGF0ZUludGVyZmFjZXMoY29udGV4dCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBmaWVsZHMgYXJlIHZhbGlkLlxuICAgICAgdmFsaWRhdGVGaWVsZHMoY29udGV4dCwgdHlwZSk7IC8vIEVuc3VyZSBpbnRlcmZhY2VzIGltcGxlbWVudCB0aGUgaW50ZXJmYWNlcyB0aGV5IGNsYWltIHRvLlxuXG4gICAgICB2YWxpZGF0ZUludGVyZmFjZXMoY29udGV4dCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIFVuaW9ucyBpbmNsdWRlIHZhbGlkIG1lbWJlciB0eXBlcy5cbiAgICAgIHZhbGlkYXRlVW5pb25NZW1iZXJzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIEVudW1zIGhhdmUgdmFsaWQgdmFsdWVzLlxuICAgICAgdmFsaWRhdGVFbnVtVmFsdWVzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBJbnB1dCBPYmplY3QgZmllbGRzIGFyZSB2YWxpZC5cbiAgICAgIHZhbGlkYXRlSW5wdXRGaWVsZHMoY29udGV4dCwgdHlwZSk7IC8vIEVuc3VyZSBJbnB1dCBPYmplY3RzIGRvIG5vdCBjb250YWluIG5vbi1udWxsYWJsZSBjaXJjdWxhciByZWZlcmVuY2VzXG5cbiAgICAgIHZhbGlkYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnModHlwZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRmllbGRzKGNvbnRleHQsIHR5cGUpIHtcbiAgY29uc3QgZmllbGRzID0gT2JqZWN0LnZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTsgLy8gT2JqZWN0cyBhbmQgSW50ZXJmYWNlcyBib3RoIG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIGZpZWxkcy5cblxuICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoYFR5cGUgJHt0eXBlLm5hbWV9IG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIGZpZWxkcy5gLCBbXG4gICAgICB0eXBlLmFzdE5vZGUsXG4gICAgICAuLi50eXBlLmV4dGVuc2lvbkFTVE5vZGVzLFxuICAgIF0pO1xuICB9XG5cbiAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBmaWVsZCk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBvdXRwdXQgdHlwZVxuXG4gICAgaWYgKCFpc091dHB1dFR5cGUoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTtcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFRoZSB0eXBlIG9mICR7dHlwZS5uYW1lfS4ke2ZpZWxkLm5hbWV9IG11c3QgYmUgT3V0cHV0IFR5cGUgYCArXG4gICAgICAgICAgYGJ1dCBnb3Q6ICR7aW5zcGVjdChmaWVsZC50eXBlKX0uYCxcbiAgICAgICAgKF9maWVsZCRhc3ROb2RlID0gZmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2ZpZWxkJGFzdE5vZGUgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBfZmllbGQkYXN0Tm9kZS50eXBlLFxuICAgICAgKTtcbiAgICB9IC8vIEVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSB2YWxpZFxuXG4gICAgZm9yIChjb25zdCBhcmcgb2YgZmllbGQuYXJncykge1xuICAgICAgY29uc3QgYXJnTmFtZSA9IGFyZy5uYW1lOyAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuXG4gICAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgYXJnKTsgLy8gRW5zdXJlIHRoZSB0eXBlIGlzIGFuIGlucHV0IHR5cGVcblxuICAgICAgaWYgKCFpc0lucHV0VHlwZShhcmcudHlwZSkpIHtcbiAgICAgICAgdmFyIF9hcmckYXN0Tm9kZTI7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgVGhlIHR5cGUgb2YgJHt0eXBlLm5hbWV9LiR7ZmllbGQubmFtZX0oJHthcmdOYW1lfTopIG11c3QgYmUgSW5wdXQgYCArXG4gICAgICAgICAgICBgVHlwZSBidXQgZ290OiAke2luc3BlY3QoYXJnLnR5cGUpfS5gLFxuICAgICAgICAgIChfYXJnJGFzdE5vZGUyID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZTIgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgIDogX2FyZyRhc3ROb2RlMi50eXBlLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KGFyZykgJiYgYXJnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgdmFyIF9hcmckYXN0Tm9kZTM7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgUmVxdWlyZWQgYXJndW1lbnQgJHt0eXBlLm5hbWV9LiR7ZmllbGQubmFtZX0oJHthcmdOYW1lfTopIGNhbm5vdCBiZSBkZXByZWNhdGVkLmAsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoYXJnLmFzdE5vZGUpLFxuICAgICAgICAgICAgKF9hcmckYXN0Tm9kZTMgPSBhcmcuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2FyZyRhc3ROb2RlMyA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX2FyZyRhc3ROb2RlMy50eXBlLFxuICAgICAgICAgIF0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZXJmYWNlcyhjb250ZXh0LCB0eXBlKSB7XG4gIGNvbnN0IGlmYWNlVHlwZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGlmYWNlIG9mIHR5cGUuZ2V0SW50ZXJmYWNlcygpKSB7XG4gICAgaWYgKCFpc0ludGVyZmFjZVR5cGUoaWZhY2UpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBgVHlwZSAke2luc3BlY3QodHlwZSl9IG11c3Qgb25seSBpbXBsZW1lbnQgSW50ZXJmYWNlIHR5cGVzLCBgICtcbiAgICAgICAgICBgaXQgY2Fubm90IGltcGxlbWVudCAke2luc3BlY3QoaWZhY2UpfS5gLFxuICAgICAgICBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpLFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSBpZmFjZSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFR5cGUgJHt0eXBlLm5hbWV9IGNhbm5vdCBpbXBsZW1lbnQgaXRzZWxmIGJlY2F1c2UgaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgcmVmZXJlbmNlLmAsXG4gICAgICAgIGdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2Rlcyh0eXBlLCBpZmFjZSksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGlmYWNlVHlwZU5hbWVzW2lmYWNlLm5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBgVHlwZSAke3R5cGUubmFtZX0gY2FuIG9ubHkgaW1wbGVtZW50ICR7aWZhY2UubmFtZX0gb25jZS5gLFxuICAgICAgICBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpLFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmYWNlVHlwZU5hbWVzW2lmYWNlLm5hbWVdID0gdHJ1ZTtcbiAgICB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzKGNvbnRleHQsIHR5cGUsIGlmYWNlKTtcbiAgICB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzSW50ZXJmYWNlKGNvbnRleHQsIHR5cGUsIGlmYWNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzSW50ZXJmYWNlKGNvbnRleHQsIHR5cGUsIGlmYWNlKSB7XG4gIGNvbnN0IHR5cGVGaWVsZE1hcCA9IHR5cGUuZ2V0RmllbGRzKCk7IC8vIEFzc2VydCBlYWNoIGludGVyZmFjZSBmaWVsZCBpcyBpbXBsZW1lbnRlZC5cblxuICBmb3IgKGNvbnN0IGlmYWNlRmllbGQgb2YgT2JqZWN0LnZhbHVlcyhpZmFjZS5nZXRGaWVsZHMoKSkpIHtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBpZmFjZUZpZWxkLm5hbWU7XG4gICAgY29uc3QgdHlwZUZpZWxkID0gdHlwZUZpZWxkTWFwW2ZpZWxkTmFtZV07IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgZXhpc3RzIG9uIHR5cGUuXG5cbiAgICBpZiAoIXR5cGVGaWVsZCkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYEludGVyZmFjZSBmaWVsZCAke2lmYWNlLm5hbWV9LiR7ZmllbGROYW1lfSBleHBlY3RlZCBidXQgJHt0eXBlLm5hbWV9IGRvZXMgbm90IHByb3ZpZGUgaXQuYCxcbiAgICAgICAgW2lmYWNlRmllbGQuYXN0Tm9kZSwgdHlwZS5hc3ROb2RlLCAuLi50eXBlLmV4dGVuc2lvbkFTVE5vZGVzXSxcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgdHlwZSBpcyBzYXRpc2ZpZWQgYnkgdHlwZSBmaWVsZCB0eXBlLCBieSBiZWluZ1xuICAgIC8vIGEgdmFsaWQgc3VidHlwZS4gKGNvdmFyaWFudClcblxuICAgIGlmICghaXNUeXBlU3ViVHlwZU9mKGNvbnRleHQuc2NoZW1hLCB0eXBlRmllbGQudHlwZSwgaWZhY2VGaWVsZC50eXBlKSkge1xuICAgICAgdmFyIF9pZmFjZUZpZWxkJGFzdE5vZGUsIF90eXBlRmllbGQkYXN0Tm9kZTtcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYEludGVyZmFjZSBmaWVsZCAke2lmYWNlLm5hbWV9LiR7ZmllbGROYW1lfSBleHBlY3RzIHR5cGUgYCArXG4gICAgICAgICAgYCR7aW5zcGVjdChpZmFjZUZpZWxkLnR5cGUpfSBidXQgJHt0eXBlLm5hbWV9LiR7ZmllbGROYW1lfSBgICtcbiAgICAgICAgICBgaXMgdHlwZSAke2luc3BlY3QodHlwZUZpZWxkLnR5cGUpfS5gLFxuICAgICAgICBbXG4gICAgICAgICAgKF9pZmFjZUZpZWxkJGFzdE5vZGUgPSBpZmFjZUZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8XG4gICAgICAgICAgX2lmYWNlRmllbGQkYXN0Tm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBfaWZhY2VGaWVsZCRhc3ROb2RlLnR5cGUsXG4gICAgICAgICAgKF90eXBlRmllbGQkYXN0Tm9kZSA9IHR5cGVGaWVsZC5hc3ROb2RlKSA9PT0gbnVsbCB8fFxuICAgICAgICAgIF90eXBlRmllbGQkYXN0Tm9kZSA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBfdHlwZUZpZWxkJGFzdE5vZGUudHlwZSxcbiAgICAgICAgXSxcbiAgICAgICk7XG4gICAgfSAvLyBBc3NlcnQgZWFjaCBpbnRlcmZhY2UgZmllbGQgYXJnIGlzIGltcGxlbWVudGVkLlxuXG4gICAgZm9yIChjb25zdCBpZmFjZUFyZyBvZiBpZmFjZUZpZWxkLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGFyZ05hbWUgPSBpZmFjZUFyZy5uYW1lO1xuICAgICAgY29uc3QgdHlwZUFyZyA9IHR5cGVGaWVsZC5hcmdzLmZpbmQoKGFyZykgPT4gYXJnLm5hbWUgPT09IGFyZ05hbWUpOyAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIGFyZyBleGlzdHMgb24gb2JqZWN0IGZpZWxkLlxuXG4gICAgICBpZiAoIXR5cGVBcmcpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgSW50ZXJmYWNlIGZpZWxkIGFyZ3VtZW50ICR7aWZhY2UubmFtZX0uJHtmaWVsZE5hbWV9KCR7YXJnTmFtZX06KSBleHBlY3RlZCBidXQgJHt0eXBlLm5hbWV9LiR7ZmllbGROYW1lfSBkb2VzIG5vdCBwcm92aWRlIGl0LmAsXG4gICAgICAgICAgW2lmYWNlQXJnLmFzdE5vZGUsIHR5cGVGaWVsZC5hc3ROb2RlXSxcbiAgICAgICAgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgYXJnIHR5cGUgbWF0Y2hlcyBvYmplY3QgZmllbGQgYXJnIHR5cGUuXG4gICAgICAvLyAoaW52YXJpYW50KVxuICAgICAgLy8gVE9ETzogY2hhbmdlIHRvIGNvbnRyYXZhcmlhbnQ/XG5cbiAgICAgIGlmICghaXNFcXVhbFR5cGUoaWZhY2VBcmcudHlwZSwgdHlwZUFyZy50eXBlKSkge1xuICAgICAgICB2YXIgX2lmYWNlQXJnJGFzdE5vZGUsIF90eXBlQXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBgSW50ZXJmYWNlIGZpZWxkIGFyZ3VtZW50ICR7aWZhY2UubmFtZX0uJHtmaWVsZE5hbWV9KCR7YXJnTmFtZX06KSBgICtcbiAgICAgICAgICAgIGBleHBlY3RzIHR5cGUgJHtpbnNwZWN0KGlmYWNlQXJnLnR5cGUpfSBidXQgYCArXG4gICAgICAgICAgICBgJHt0eXBlLm5hbWV9LiR7ZmllbGROYW1lfSgke2FyZ05hbWV9OikgaXMgdHlwZSBgICtcbiAgICAgICAgICAgIGAke2luc3BlY3QodHlwZUFyZy50eXBlKX0uYCxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAoX2lmYWNlQXJnJGFzdE5vZGUgPSBpZmFjZUFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgX2lmYWNlQXJnJGFzdE5vZGUgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9pZmFjZUFyZyRhc3ROb2RlLnR5cGUsXG4gICAgICAgICAgICAoX3R5cGVBcmckYXN0Tm9kZSA9IHR5cGVBcmcuYXN0Tm9kZSkgPT09IG51bGwgfHxcbiAgICAgICAgICAgIF90eXBlQXJnJGFzdE5vZGUgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF90eXBlQXJnJGFzdE5vZGUudHlwZSxcbiAgICAgICAgICBdLFxuICAgICAgICApO1xuICAgICAgfSAvLyBUT0RPOiB2YWxpZGF0ZSBkZWZhdWx0IHZhbHVlcz9cbiAgICB9IC8vIEFzc2VydCBhZGRpdGlvbmFsIGFyZ3VtZW50cyBtdXN0IG5vdCBiZSByZXF1aXJlZC5cblxuICAgIGZvciAoY29uc3QgdHlwZUFyZyBvZiB0eXBlRmllbGQuYXJncykge1xuICAgICAgY29uc3QgYXJnTmFtZSA9IHR5cGVBcmcubmFtZTtcbiAgICAgIGNvbnN0IGlmYWNlQXJnID0gaWZhY2VGaWVsZC5hcmdzLmZpbmQoKGFyZykgPT4gYXJnLm5hbWUgPT09IGFyZ05hbWUpO1xuXG4gICAgICBpZiAoIWlmYWNlQXJnICYmIGlzUmVxdWlyZWRBcmd1bWVudCh0eXBlQXJnKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIGBPYmplY3QgZmllbGQgJHt0eXBlLm5hbWV9LiR7ZmllbGROYW1lfSBpbmNsdWRlcyByZXF1aXJlZCBhcmd1bWVudCAke2FyZ05hbWV9IHRoYXQgaXMgbWlzc2luZyBmcm9tIHRoZSBJbnRlcmZhY2UgZmllbGQgJHtpZmFjZS5uYW1lfS4ke2ZpZWxkTmFtZX0uYCxcbiAgICAgICAgICBbdHlwZUFyZy5hc3ROb2RlLCBpZmFjZUZpZWxkLmFzdE5vZGVdLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzKGNvbnRleHQsIHR5cGUsIGlmYWNlKSB7XG4gIGNvbnN0IGlmYWNlSW50ZXJmYWNlcyA9IHR5cGUuZ2V0SW50ZXJmYWNlcygpO1xuXG4gIGZvciAoY29uc3QgdHJhbnNpdGl2ZSBvZiBpZmFjZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICBpZiAoIWlmYWNlSW50ZXJmYWNlcy5pbmNsdWRlcyh0cmFuc2l0aXZlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgdHJhbnNpdGl2ZSA9PT0gdHlwZVxuICAgICAgICAgID8gYFR5cGUgJHt0eXBlLm5hbWV9IGNhbm5vdCBpbXBsZW1lbnQgJHtpZmFjZS5uYW1lfSBiZWNhdXNlIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyIHJlZmVyZW5jZS5gXG4gICAgICAgICAgOiBgVHlwZSAke3R5cGUubmFtZX0gbXVzdCBpbXBsZW1lbnQgJHt0cmFuc2l0aXZlLm5hbWV9IGJlY2F1c2UgaXQgaXMgaW1wbGVtZW50ZWQgYnkgJHtpZmFjZS5uYW1lfS5gLFxuICAgICAgICBbXG4gICAgICAgICAgLi4uZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKGlmYWNlLCB0cmFuc2l0aXZlKSxcbiAgICAgICAgICAuLi5nZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpLFxuICAgICAgICBdLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVVbmlvbk1lbWJlcnMoY29udGV4dCwgdW5pb24pIHtcbiAgY29uc3QgbWVtYmVyVHlwZXMgPSB1bmlvbi5nZXRUeXBlcygpO1xuXG4gIGlmIChtZW1iZXJUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgYFVuaW9uIHR5cGUgJHt1bmlvbi5uYW1lfSBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBtZW1iZXIgdHlwZXMuYCxcbiAgICAgIFt1bmlvbi5hc3ROb2RlLCAuLi51bmlvbi5leHRlbnNpb25BU1ROb2Rlc10sXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGluY2x1ZGVkVHlwZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IG1lbWJlclR5cGUgb2YgbWVtYmVyVHlwZXMpIHtcbiAgICBpZiAoaW5jbHVkZWRUeXBlTmFtZXNbbWVtYmVyVHlwZS5uYW1lXSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFVuaW9uIHR5cGUgJHt1bmlvbi5uYW1lfSBjYW4gb25seSBpbmNsdWRlIHR5cGUgJHttZW1iZXJUeXBlLm5hbWV9IG9uY2UuYCxcbiAgICAgICAgZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIG1lbWJlclR5cGUubmFtZSksXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaW5jbHVkZWRUeXBlTmFtZXNbbWVtYmVyVHlwZS5uYW1lXSA9IHRydWU7XG5cbiAgICBpZiAoIWlzT2JqZWN0VHlwZShtZW1iZXJUeXBlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgYFVuaW9uIHR5cGUgJHt1bmlvbi5uYW1lfSBjYW4gb25seSBpbmNsdWRlIE9iamVjdCB0eXBlcywgYCArXG4gICAgICAgICAgYGl0IGNhbm5vdCBpbmNsdWRlICR7aW5zcGVjdChtZW1iZXJUeXBlKX0uYCxcbiAgICAgICAgZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIFN0cmluZyhtZW1iZXJUeXBlKSksXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVudW1WYWx1ZXMoY29udGV4dCwgZW51bVR5cGUpIHtcbiAgY29uc3QgZW51bVZhbHVlcyA9IGVudW1UeXBlLmdldFZhbHVlcygpO1xuXG4gIGlmIChlbnVtVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICBgRW51bSB0eXBlICR7ZW51bVR5cGUubmFtZX0gbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgdmFsdWVzLmAsXG4gICAgICBbZW51bVR5cGUuYXN0Tm9kZSwgLi4uZW51bVR5cGUuZXh0ZW5zaW9uQVNUTm9kZXNdLFxuICAgICk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGVudW1WYWx1ZSBvZiBlbnVtVmFsdWVzKSB7XG4gICAgLy8gRW5zdXJlIHZhbGlkIG5hbWUuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGVudW1WYWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbnB1dEZpZWxkcyhjb250ZXh0LCBpbnB1dE9iaikge1xuICBjb25zdCBmaWVsZHMgPSBPYmplY3QudmFsdWVzKGlucHV0T2JqLmdldEZpZWxkcygpKTtcblxuICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICBgSW5wdXQgT2JqZWN0IHR5cGUgJHtpbnB1dE9iai5uYW1lfSBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBmaWVsZHMuYCxcbiAgICAgIFtpbnB1dE9iai5hc3ROb2RlLCAuLi5pbnB1dE9iai5leHRlbnNpb25BU1ROb2Rlc10sXG4gICAgKTtcbiAgfSAvLyBFbnN1cmUgdGhlIGFyZ3VtZW50cyBhcmUgdmFsaWRcblxuICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgIC8vIEVuc3VyZSB0aGV5IGFyZSBuYW1lZCBjb3JyZWN0bHkuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGZpZWxkKTsgLy8gRW5zdXJlIHRoZSB0eXBlIGlzIGFuIGlucHV0IHR5cGVcblxuICAgIGlmICghaXNJbnB1dFR5cGUoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTI7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIGBUaGUgdHlwZSBvZiAke2lucHV0T2JqLm5hbWV9LiR7ZmllbGQubmFtZX0gbXVzdCBiZSBJbnB1dCBUeXBlIGAgK1xuICAgICAgICAgIGBidXQgZ290OiAke2luc3BlY3QoZmllbGQudHlwZSl9LmAsXG4gICAgICAgIChfZmllbGQkYXN0Tm9kZTIgPSBmaWVsZC5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfZmllbGQkYXN0Tm9kZTIgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBfZmllbGQkYXN0Tm9kZTIudHlwZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzUmVxdWlyZWRJbnB1dEZpZWxkKGZpZWxkKSAmJiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICB2YXIgX2ZpZWxkJGFzdE5vZGUzO1xuXG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBgUmVxdWlyZWQgaW5wdXQgZmllbGQgJHtpbnB1dE9iai5uYW1lfS4ke2ZpZWxkLm5hbWV9IGNhbm5vdCBiZSBkZXByZWNhdGVkLmAsXG4gICAgICAgIFtcbiAgICAgICAgICBnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShmaWVsZC5hc3ROb2RlKSxcbiAgICAgICAgICAoX2ZpZWxkJGFzdE5vZGUzID0gZmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHxcbiAgICAgICAgICBfZmllbGQkYXN0Tm9kZTMgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgIDogX2ZpZWxkJGFzdE5vZGUzLnR5cGUsXG4gICAgICAgIF0sXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcihjb250ZXh0KSB7XG4gIC8vIE1vZGlmaWVkIGNvcHkgb2YgYWxnb3JpdGhtIGZyb20gJ3NyYy92YWxpZGF0aW9uL3J1bGVzL05vRnJhZ21lbnRDeWNsZXMuanMnLlxuICAvLyBUcmFja3MgYWxyZWFkeSB2aXNpdGVkIHR5cGVzIHRvIG1haW50YWluIE8oTikgYW5kIHRvIGVuc3VyZSB0aGF0IGN5Y2xlc1xuICAvLyBhcmUgbm90IHJlZHVuZGFudGx5IHJlcG9ydGVkLlxuICBjb25zdCB2aXNpdGVkVHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBBcnJheSBvZiB0eXBlcyBub2RlcyB1c2VkIHRvIHByb2R1Y2UgbWVhbmluZ2Z1bCBlcnJvcnNcblxuICBjb25zdCBmaWVsZFBhdGggPSBbXTsgLy8gUG9zaXRpb24gaW4gdGhlIHR5cGUgcGF0aFxuXG4gIGNvbnN0IGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBkZXRlY3RDeWNsZVJlY3Vyc2l2ZTsgLy8gVGhpcyBkb2VzIGEgc3RyYWlnaHQtZm9yd2FyZCBERlMgdG8gZmluZCBjeWNsZXMuXG4gIC8vIEl0IGRvZXMgbm90IHRlcm1pbmF0ZSB3aGVuIGEgY3ljbGUgd2FzIGZvdW5kIGJ1dCBjb250aW51ZXMgdG8gZXhwbG9yZVxuICAvLyB0aGUgZ3JhcGggdG8gZmluZCBhbGwgcG9zc2libGUgY3ljbGVzLlxuXG4gIGZ1bmN0aW9uIGRldGVjdEN5Y2xlUmVjdXJzaXZlKGlucHV0T2JqKSB7XG4gICAgaWYgKHZpc2l0ZWRUeXBlc1tpbnB1dE9iai5uYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZpc2l0ZWRUeXBlc1tpbnB1dE9iai5uYW1lXSA9IHRydWU7XG4gICAgZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lW2lucHV0T2JqLm5hbWVdID0gZmllbGRQYXRoLmxlbmd0aDtcbiAgICBjb25zdCBmaWVsZHMgPSBPYmplY3QudmFsdWVzKGlucHV0T2JqLmdldEZpZWxkcygpKTtcblxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgICBpZiAoaXNOb25OdWxsVHlwZShmaWVsZC50eXBlKSAmJiBpc0lucHV0T2JqZWN0VHlwZShmaWVsZC50eXBlLm9mVHlwZSkpIHtcbiAgICAgICAgY29uc3QgZmllbGRUeXBlID0gZmllbGQudHlwZS5vZlR5cGU7XG4gICAgICAgIGNvbnN0IGN5Y2xlSW5kZXggPSBmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWVbZmllbGRUeXBlLm5hbWVdO1xuICAgICAgICBmaWVsZFBhdGgucHVzaChmaWVsZCk7XG5cbiAgICAgICAgaWYgKGN5Y2xlSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRldGVjdEN5Y2xlUmVjdXJzaXZlKGZpZWxkVHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgY3ljbGVQYXRoID0gZmllbGRQYXRoLnNsaWNlKGN5Y2xlSW5kZXgpO1xuICAgICAgICAgIGNvbnN0IHBhdGhTdHIgPSBjeWNsZVBhdGgubWFwKChmaWVsZE9iaikgPT4gZmllbGRPYmoubmFtZSkuam9pbignLicpO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBgQ2Fubm90IHJlZmVyZW5jZSBJbnB1dCBPYmplY3QgXCIke2ZpZWxkVHlwZS5uYW1lfVwiIHdpdGhpbiBpdHNlbGYgdGhyb3VnaCBhIHNlcmllcyBvZiBub24tbnVsbCBmaWVsZHM6IFwiJHtwYXRoU3RyfVwiLmAsXG4gICAgICAgICAgICBjeWNsZVBhdGgubWFwKChmaWVsZE9iaikgPT4gZmllbGRPYmouYXN0Tm9kZSksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkUGF0aC5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWVbaW5wdXRPYmoubmFtZV0gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKHR5cGUsIGlmYWNlKSB7XG4gIGNvbnN0IHsgYXN0Tm9kZSwgZXh0ZW5zaW9uQVNUTm9kZXMgfSA9IHR5cGU7XG4gIGNvbnN0IG5vZGVzID1cbiAgICBhc3ROb2RlICE9IG51bGwgPyBbYXN0Tm9kZSwgLi4uZXh0ZW5zaW9uQVNUTm9kZXNdIDogZXh0ZW5zaW9uQVNUTm9kZXM7IC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgcmV0dXJuIG5vZGVzXG4gICAgLmZsYXRNYXAoKHR5cGVOb2RlKSA9PiB7XG4gICAgICB2YXIgX3R5cGVOb2RlJGludGVyZmFjZXM7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgIChfdHlwZU5vZGUkaW50ZXJmYWNlcyA9IHR5cGVOb2RlLmludGVyZmFjZXMpICE9PSBudWxsICYmXG4gICAgICAgICAgX3R5cGVOb2RlJGludGVyZmFjZXMgIT09IHZvaWQgMFxuICAgICAgICAgID8gX3R5cGVOb2RlJGludGVyZmFjZXNcbiAgICAgICAgICA6IFtdXG4gICAgICApO1xuICAgIH0pXG4gICAgLmZpbHRlcigoaWZhY2VOb2RlKSA9PiBpZmFjZU5vZGUubmFtZS52YWx1ZSA9PT0gaWZhY2UubmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldFVuaW9uTWVtYmVyVHlwZU5vZGVzKHVuaW9uLCB0eXBlTmFtZSkge1xuICBjb25zdCB7IGFzdE5vZGUsIGV4dGVuc2lvbkFTVE5vZGVzIH0gPSB1bmlvbjtcbiAgY29uc3Qgbm9kZXMgPVxuICAgIGFzdE5vZGUgIT0gbnVsbCA/IFthc3ROb2RlLCAuLi5leHRlbnNpb25BU1ROb2Rlc10gOiBleHRlbnNpb25BU1ROb2RlczsgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICByZXR1cm4gbm9kZXNcbiAgICAuZmxhdE1hcCgodW5pb25Ob2RlKSA9PiB7XG4gICAgICB2YXIgX3VuaW9uTm9kZSR0eXBlcztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgKF91bmlvbk5vZGUkdHlwZXMgPSB1bmlvbk5vZGUudHlwZXMpICE9PSBudWxsICYmXG4gICAgICAgICAgX3VuaW9uTm9kZSR0eXBlcyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfdW5pb25Ob2RlJHR5cGVzXG4gICAgICAgICAgOiBbXVxuICAgICAgKTtcbiAgICB9KVxuICAgIC5maWx0ZXIoKHR5cGVOb2RlKSA9PiB0eXBlTm9kZS5uYW1lLnZhbHVlID09PSB0eXBlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldERlcHJlY2F0ZWREaXJlY3RpdmVOb2RlKGRlZmluaXRpb25Ob2RlKSB7XG4gIHZhciBfZGVmaW5pdGlvbk5vZGUkZGlyZWM7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25Ob2RlID09PSBudWxsIHx8IGRlZmluaXRpb25Ob2RlID09PSB2b2lkIDBcbiAgICA/IHZvaWQgMFxuICAgIDogKF9kZWZpbml0aW9uTm9kZSRkaXJlYyA9IGRlZmluaXRpb25Ob2RlLmRpcmVjdGl2ZXMpID09PSBudWxsIHx8XG4gICAgICBfZGVmaW5pdGlvbk5vZGUkZGlyZWMgPT09IHZvaWQgMFxuICAgID8gdm9pZCAwXG4gICAgOiBfZGVmaW5pdGlvbk5vZGUkZGlyZWMuZmluZChcbiAgICAgICAgKG5vZGUpID0+IG5vZGUubmFtZS52YWx1ZSA9PT0gR3JhcGhRTERlcHJlY2F0ZWREaXJlY3RpdmUubmFtZSxcbiAgICAgICk7XG59XG4iLCJpbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi9sYW5ndWFnZS9hc3QubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgZ2V0RW50ZXJMZWF2ZUZvcktpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS92aXNpdG9yLm1qcyc7XG5pbXBvcnQge1xuICBnZXROYW1lZFR5cGUsXG4gIGdldE51bGxhYmxlVHlwZSxcbiAgaXNDb21wb3NpdGVUeXBlLFxuICBpc0VudW1UeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnB1dFR5cGUsXG4gIGlzSW50ZXJmYWNlVHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNPYmplY3RUeXBlLFxuICBpc091dHB1dFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHtcbiAgU2NoZW1hTWV0YUZpZWxkRGVmLFxuICBUeXBlTWV0YUZpZWxkRGVmLFxuICBUeXBlTmFtZU1ldGFGaWVsZERlZixcbn0gZnJvbSAnLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gJy4vdHlwZUZyb21BU1QubWpzJztcbi8qKlxuICogVHlwZUluZm8gaXMgYSB1dGlsaXR5IGNsYXNzIHdoaWNoLCBnaXZlbiBhIEdyYXBoUUwgc2NoZW1hLCBjYW4ga2VlcCB0cmFja1xuICogb2YgdGhlIGN1cnJlbnQgZmllbGQgYW5kIHR5cGUgZGVmaW5pdGlvbnMgYXQgYW55IHBvaW50IGluIGEgR3JhcGhRTCBkb2N1bWVudFxuICogQVNUIGR1cmluZyBhIHJlY3Vyc2l2ZSBkZXNjZW50IGJ5IGNhbGxpbmcgYGVudGVyKG5vZGUpYCBhbmQgYGxlYXZlKG5vZGUpYC5cbiAqL1xuXG5leHBvcnQgY2xhc3MgVHlwZUluZm8ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY2hlbWEsXG4gICAgLyoqXG4gICAgICogSW5pdGlhbCB0eXBlIG1heSBiZSBwcm92aWRlZCBpbiByYXJlIGNhc2VzIHRvIGZhY2lsaXRhdGUgdHJhdmVyc2Fsc1xuICAgICAqICBiZWdpbm5pbmcgc29tZXdoZXJlIG90aGVyIHRoYW4gZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGluaXRpYWxUeXBlLFxuICAgIC8qKiBAZGVwcmVjYXRlZCB3aWxsIGJlIHJlbW92ZWQgaW4gMTcuMC4wICovXG4gICAgZ2V0RmllbGREZWZGbixcbiAgKSB7XG4gICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICAgIHRoaXMuX3R5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrID0gW107XG4gICAgdGhpcy5fZmllbGREZWZTdGFjayA9IFtdO1xuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrID0gW107XG4gICAgdGhpcy5fZGlyZWN0aXZlID0gbnVsbDtcbiAgICB0aGlzLl9hcmd1bWVudCA9IG51bGw7XG4gICAgdGhpcy5fZW51bVZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl9nZXRGaWVsZERlZiA9XG4gICAgICBnZXRGaWVsZERlZkZuICE9PSBudWxsICYmIGdldEZpZWxkRGVmRm4gIT09IHZvaWQgMFxuICAgICAgICA/IGdldEZpZWxkRGVmRm5cbiAgICAgICAgOiBnZXRGaWVsZERlZjtcblxuICAgIGlmIChpbml0aWFsVHlwZSkge1xuICAgICAgaWYgKGlzSW5wdXRUeXBlKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKGluaXRpYWxUeXBlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ29tcG9zaXRlVHlwZShpbml0aWFsVHlwZSkpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50VHlwZVN0YWNrLnB1c2goaW5pdGlhbFR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNPdXRwdXRUeXBlKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpbml0aWFsVHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnVHlwZUluZm8nO1xuICB9XG5cbiAgZ2V0VHlwZSgpIHtcbiAgICBpZiAodGhpcy5fdHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl90eXBlU3RhY2tbdGhpcy5fdHlwZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldFBhcmVudFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyZW50VHlwZVN0YWNrW3RoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cblxuICBnZXRJbnB1dFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGVTdGFja1t0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cblxuICBnZXRQYXJlbnRJbnB1dFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGVTdGFja1t0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cblxuICBnZXRGaWVsZERlZigpIHtcbiAgICBpZiAodGhpcy5fZmllbGREZWZTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmllbGREZWZTdGFja1t0aGlzLl9maWVsZERlZlN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5fZGVmYXVsdFZhbHVlU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrW3RoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfVxuXG4gIGdldERpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aXZlO1xuICB9XG5cbiAgZ2V0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FyZ3VtZW50O1xuICB9XG5cbiAgZ2V0RW51bVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnVtVmFsdWU7XG4gIH1cblxuICBlbnRlcihub2RlKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fc2NoZW1hOyAvLyBOb3RlOiBtYW55IG9mIHRoZSB0eXBlcyBiZWxvdyBhcmUgZXhwbGljaXRseSB0eXBlZCBhcyBcInVua25vd25cIiB0byBkcm9wXG4gICAgLy8gYW55IGFzc3VtcHRpb25zIG9mIGEgdmFsaWQgc2NoZW1hIHRvIGVuc3VyZSBydW50aW1lIHR5cGVzIGFyZSBwcm9wZXJseVxuICAgIC8vIGNoZWNrZWQgYmVmb3JlIGNvbnRpbnVpbmcgc2luY2UgVHlwZUluZm8gaXMgdXNlZCBhcyBwYXJ0IG9mIHZhbGlkYXRpb25cbiAgICAvLyB3aGljaCBvY2N1cnMgYmVmb3JlIGd1YXJhbnRlZXMgb2Ygc2NoZW1hIGFuZCBkb2N1bWVudCB2YWxpZGl0eS5cblxuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuU0VMRUNUSU9OX1NFVDoge1xuICAgICAgICBjb25zdCBuYW1lZFR5cGUgPSBnZXROYW1lZFR5cGUodGhpcy5nZXRUeXBlKCkpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjay5wdXNoKFxuICAgICAgICAgIGlzQ29tcG9zaXRlVHlwZShuYW1lZFR5cGUpID8gbmFtZWRUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuRklFTEQ6IHtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZSA9IHRoaXMuZ2V0UGFyZW50VHlwZSgpO1xuICAgICAgICBsZXQgZmllbGREZWY7XG4gICAgICAgIGxldCBmaWVsZFR5cGU7XG5cbiAgICAgICAgaWYgKHBhcmVudFR5cGUpIHtcbiAgICAgICAgICBmaWVsZERlZiA9IHRoaXMuX2dldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgbm9kZSk7XG5cbiAgICAgICAgICBpZiAoZmllbGREZWYpIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSA9IGZpZWxkRGVmLnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZmllbGREZWZTdGFjay5wdXNoKGZpZWxkRGVmKTtcblxuICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpc091dHB1dFR5cGUoZmllbGRUeXBlKSA/IGZpZWxkVHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5ESVJFQ1RJVkU6XG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZSA9IHNjaGVtYS5nZXREaXJlY3RpdmUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjoge1xuICAgICAgICBjb25zdCByb290VHlwZSA9IHNjaGVtYS5nZXRSb290VHlwZShub2RlLm9wZXJhdGlvbik7XG5cbiAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goaXNPYmplY3RUeXBlKHJvb3RUeXBlKSA/IHJvb3RUeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDpcbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOiB7XG4gICAgICAgIGNvbnN0IHR5cGVDb25kaXRpb25BU1QgPSBub2RlLnR5cGVDb25kaXRpb247XG4gICAgICAgIGNvbnN0IG91dHB1dFR5cGUgPSB0eXBlQ29uZGl0aW9uQVNUXG4gICAgICAgICAgPyB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVDb25kaXRpb25BU1QpXG4gICAgICAgICAgOiBnZXROYW1lZFR5cGUodGhpcy5nZXRUeXBlKCkpO1xuXG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wdXNoKGlzT3V0cHV0VHlwZShvdXRwdXRUeXBlKSA/IG91dHB1dFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuVkFSSUFCTEVfREVGSU5JVElPTjoge1xuICAgICAgICBjb25zdCBpbnB1dFR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIG5vZGUudHlwZSk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChcbiAgICAgICAgICBpc0lucHV0VHlwZShpbnB1dFR5cGUpID8gaW5wdXRUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuQVJHVU1FTlQ6IHtcbiAgICAgICAgdmFyIF90aGlzJGdldERpcmVjdGl2ZTtcblxuICAgICAgICBsZXQgYXJnRGVmO1xuICAgICAgICBsZXQgYXJnVHlwZTtcbiAgICAgICAgY29uc3QgZmllbGRPckRpcmVjdGl2ZSA9XG4gICAgICAgICAgKF90aGlzJGdldERpcmVjdGl2ZSA9IHRoaXMuZ2V0RGlyZWN0aXZlKCkpICE9PSBudWxsICYmXG4gICAgICAgICAgX3RoaXMkZ2V0RGlyZWN0aXZlICE9PSB2b2lkIDBcbiAgICAgICAgICAgID8gX3RoaXMkZ2V0RGlyZWN0aXZlXG4gICAgICAgICAgICA6IHRoaXMuZ2V0RmllbGREZWYoKTtcblxuICAgICAgICBpZiAoZmllbGRPckRpcmVjdGl2ZSkge1xuICAgICAgICAgIGFyZ0RlZiA9IGZpZWxkT3JEaXJlY3RpdmUuYXJncy5maW5kKFxuICAgICAgICAgICAgKGFyZykgPT4gYXJnLm5hbWUgPT09IG5vZGUubmFtZS52YWx1ZSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGFyZ0RlZikge1xuICAgICAgICAgICAgYXJnVHlwZSA9IGFyZ0RlZi50eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FyZ3VtZW50ID0gYXJnRGVmO1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnB1c2goYXJnRGVmID8gYXJnRGVmLmRlZmF1bHRWYWx1ZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChpc0lucHV0VHlwZShhcmdUeXBlKSA/IGFyZ1R5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuTElTVDoge1xuICAgICAgICBjb25zdCBsaXN0VHlwZSA9IGdldE51bGxhYmxlVHlwZSh0aGlzLmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSBpc0xpc3RUeXBlKGxpc3RUeXBlKSA/IGxpc3RUeXBlLm9mVHlwZSA6IGxpc3RUeXBlOyAvLyBMaXN0IHBvc2l0aW9ucyBuZXZlciBoYXZlIGEgZGVmYXVsdCB2YWx1ZS5cblxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wdXNoKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChpc0lucHV0VHlwZShpdGVtVHlwZSkgPyBpdGVtVHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5PQkpFQ1RfRklFTEQ6IHtcbiAgICAgICAgY29uc3Qgb2JqZWN0VHlwZSA9IGdldE5hbWVkVHlwZSh0aGlzLmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgbGV0IGlucHV0RmllbGRUeXBlO1xuICAgICAgICBsZXQgaW5wdXRGaWVsZDtcblxuICAgICAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUob2JqZWN0VHlwZSkpIHtcbiAgICAgICAgICBpbnB1dEZpZWxkID0gb2JqZWN0VHlwZS5nZXRGaWVsZHMoKVtub2RlLm5hbWUudmFsdWVdO1xuXG4gICAgICAgICAgaWYgKGlucHV0RmllbGQpIHtcbiAgICAgICAgICAgIGlucHV0RmllbGRUeXBlID0gaW5wdXRGaWVsZC50eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnB1c2goXG4gICAgICAgICAgaW5wdXRGaWVsZCA/IGlucHV0RmllbGQuZGVmYXVsdFZhbHVlIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goXG4gICAgICAgICAgaXNJbnB1dFR5cGUoaW5wdXRGaWVsZFR5cGUpID8gaW5wdXRGaWVsZFR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5FTlVNOiB7XG4gICAgICAgIGNvbnN0IGVudW1UeXBlID0gZ2V0TmFtZWRUeXBlKHRoaXMuZ2V0SW5wdXRUeXBlKCkpO1xuICAgICAgICBsZXQgZW51bVZhbHVlO1xuXG4gICAgICAgIGlmIChpc0VudW1UeXBlKGVudW1UeXBlKSkge1xuICAgICAgICAgIGVudW1WYWx1ZSA9IGVudW1UeXBlLmdldFZhbHVlKG5vZGUudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW51bVZhbHVlID0gZW51bVZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDogLy8gSWdub3JlIG90aGVyIG5vZGVzXG4gICAgfVxuICB9XG5cbiAgbGVhdmUobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuU0VMRUNUSU9OX1NFVDpcbiAgICAgICAgdGhpcy5fcGFyZW50VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuRklFTEQ6XG4gICAgICAgIHRoaXMuX2ZpZWxkRGVmU3RhY2sucG9wKCk7XG5cbiAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuRElSRUNUSVZFOlxuICAgICAgICB0aGlzLl9kaXJlY3RpdmUgPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OOlxuICAgICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDpcbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOlxuICAgICAgICB0aGlzLl90eXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5WQVJJQUJMRV9ERUZJTklUSU9OOlxuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkFSR1VNRU5UOlxuICAgICAgICB0aGlzLl9hcmd1bWVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5MSVNUOlxuICAgICAgY2FzZSBLaW5kLk9CSkVDVF9GSUVMRDpcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5FTlVNOlxuICAgICAgICB0aGlzLl9lbnVtVmFsdWUgPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDogLy8gSWdub3JlIG90aGVyIG5vZGVzXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTm90IGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhlIGV4ZWN1dG9yJ3MgZGVmaW5pdGlvbiBvZiBnZXRGaWVsZERlZiwgaW4gdGhpc1xuICogc3RhdGljYWxseSBldmFsdWF0ZWQgZW52aXJvbm1lbnQgd2UgZG8gbm90IGFsd2F5cyBoYXZlIGFuIE9iamVjdCB0eXBlLFxuICogYW5kIG5lZWQgdG8gaGFuZGxlIEludGVyZmFjZSBhbmQgVW5pb24gdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgZmllbGROb2RlKSB7XG4gIGNvbnN0IG5hbWUgPSBmaWVsZE5vZGUubmFtZS52YWx1ZTtcblxuICBpZiAoXG4gICAgbmFtZSA9PT0gU2NoZW1hTWV0YUZpZWxkRGVmLm5hbWUgJiZcbiAgICBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkgPT09IHBhcmVudFR5cGVcbiAgKSB7XG4gICAgcmV0dXJuIFNjaGVtYU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSBUeXBlTWV0YUZpZWxkRGVmLm5hbWUgJiYgc2NoZW1hLmdldFF1ZXJ5VHlwZSgpID09PSBwYXJlbnRUeXBlKSB7XG4gICAgcmV0dXJuIFR5cGVNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gVHlwZU5hbWVNZXRhRmllbGREZWYubmFtZSAmJiBpc0NvbXBvc2l0ZVR5cGUocGFyZW50VHlwZSkpIHtcbiAgICByZXR1cm4gVHlwZU5hbWVNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAoaXNPYmplY3RUeXBlKHBhcmVudFR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZShwYXJlbnRUeXBlKSkge1xuICAgIHJldHVybiBwYXJlbnRUeXBlLmdldEZpZWxkcygpW25hbWVdO1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBtYWludGFpbnMgYSBwcm92aWRlZCBUeXBlSW5mbyBpbnN0YW5jZVxuICogYWxvbmcgd2l0aCB2aXNpdGluZyB2aXNpdG9yLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdFdpdGhUeXBlSW5mbyh0eXBlSW5mbywgdmlzaXRvcikge1xuICByZXR1cm4ge1xuICAgIGVudGVyKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuICAgICAgdHlwZUluZm8uZW50ZXIobm9kZSk7XG4gICAgICBjb25zdCBmbiA9IGdldEVudGVyTGVhdmVGb3JLaW5kKHZpc2l0b3IsIG5vZGUua2luZCkuZW50ZXI7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yLCBhcmdzKTtcblxuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0eXBlSW5mby5sZWF2ZShub2RlKTtcblxuICAgICAgICAgIGlmIChpc05vZGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdHlwZUluZm8uZW50ZXIocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBsZWF2ZSguLi5hcmdzKSB7XG4gICAgICBjb25zdCBub2RlID0gYXJnc1swXTtcbiAgICAgIGNvbnN0IGZuID0gZ2V0RW50ZXJMZWF2ZUZvcktpbmQodmlzaXRvciwgbm9kZS5raW5kKS5sZWF2ZTtcbiAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgdHlwZUluZm8ubGVhdmUobm9kZSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZU9iamVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaXNJdGVyYWJsZU9iamVjdC5tanMnO1xuaW1wb3J0IHsgaXNPYmplY3RMaWtlIH0gZnJvbSAnLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHtcbiAgaXNFbnVtVHlwZSxcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzTGVhZlR5cGUsXG4gIGlzTGlzdFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTElEIH0gZnJvbSAnLi4vdHlwZS9zY2FsYXJzLm1qcyc7XG4vKipcbiAqIFByb2R1Y2VzIGEgR3JhcGhRTCBWYWx1ZSBBU1QgZ2l2ZW4gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEZ1bmN0aW9uIHdpbGwgbWF0Y2ggSmF2YVNjcmlwdC9KU09OIHZhbHVlcyB0byBHcmFwaFFMIEFTVCBzY2hlbWEgZm9ybWF0XG4gKiBieSB1c2luZyBzdWdnZXN0ZWQgR3JhcGhRTElucHV0VHlwZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGFzdEZyb21WYWx1ZShcInZhbHVlXCIsIEdyYXBoUUxTdHJpbmcpXG4gKlxuICogQSBHcmFwaFFMIHR5cGUgbXVzdCBiZSBwcm92aWRlZCwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGludGVycHJldCBkaWZmZXJlbnRcbiAqIEphdmFTY3JpcHQgdmFsdWVzLlxuICpcbiAqIHwgSlNPTiBWYWx1ZSAgICB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgT2JqZWN0ICAgICAgICB8IElucHV0IE9iamVjdCAgICAgICAgIHxcbiAqIHwgQXJyYXkgICAgICAgICB8IExpc3QgICAgICAgICAgICAgICAgIHxcbiAqIHwgQm9vbGVhbiAgICAgICB8IEJvb2xlYW4gICAgICAgICAgICAgIHxcbiAqIHwgU3RyaW5nICAgICAgICB8IFN0cmluZyAvIEVudW0gVmFsdWUgIHxcbiAqIHwgTnVtYmVyICAgICAgICB8IEludCAvIEZsb2F0ICAgICAgICAgIHxcbiAqIHwgVW5rbm93biAgICAgICB8IEVudW0gVmFsdWUgICAgICAgICAgIHxcbiAqIHwgbnVsbCAgICAgICAgICB8IE51bGxWYWx1ZSAgICAgICAgICAgIHxcbiAqXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzdEZyb21WYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIGNvbnN0IGFzdFZhbHVlID0gYXN0RnJvbVZhbHVlKHZhbHVlLCB0eXBlLm9mVHlwZSk7XG5cbiAgICBpZiAoXG4gICAgICAoYXN0VmFsdWUgPT09IG51bGwgfHwgYXN0VmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFzdFZhbHVlLmtpbmQpID09PVxuICAgICAgS2luZC5OVUxMXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXN0VmFsdWU7XG4gIH0gLy8gb25seSBleHBsaWNpdCBudWxsLCBub3QgdW5kZWZpbmVkLCBOYU5cblxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5OVUxMLFxuICAgIH07XG4gIH0gLy8gdW5kZWZpbmVkXG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBDb252ZXJ0IEphdmFTY3JpcHQgYXJyYXkgdG8gR3JhcGhRTCBsaXN0LiBJZiB0aGUgR3JhcGhRTFR5cGUgaXMgYSBsaXN0LCBidXRcbiAgLy8gdGhlIHZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY29udmVydCB0aGUgdmFsdWUgdXNpbmcgdGhlIGxpc3QncyBpdGVtIHR5cGUuXG5cbiAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICBjb25zdCBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuXG4gICAgaWYgKGlzSXRlcmFibGVPYmplY3QodmFsdWUpKSB7XG4gICAgICBjb25zdCB2YWx1ZXNOb2RlcyA9IFtdO1xuXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgaXRlbU5vZGUgPSBhc3RGcm9tVmFsdWUoaXRlbSwgaXRlbVR5cGUpO1xuXG4gICAgICAgIGlmIChpdGVtTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFsdWVzTm9kZXMucHVzaChpdGVtTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogS2luZC5MSVNULFxuICAgICAgICB2YWx1ZXM6IHZhbHVlc05vZGVzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXN0RnJvbVZhbHVlKHZhbHVlLCBpdGVtVHlwZSk7XG4gIH0gLy8gUG9wdWxhdGUgdGhlIGZpZWxkcyBvZiB0aGUgaW5wdXQgb2JqZWN0IGJ5IGNyZWF0aW5nIEFTVHMgZnJvbSBlYWNoIHZhbHVlXG4gIC8vIGluIHRoZSBKYXZhU2NyaXB0IG9iamVjdCBhY2NvcmRpbmcgdG8gdGhlIGZpZWxkcyBpbiB0aGUgaW5wdXQgdHlwZS5cblxuICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGZpZWxkTm9kZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgT2JqZWN0LnZhbHVlcyh0eXBlLmdldEZpZWxkcygpKSkge1xuICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGFzdEZyb21WYWx1ZSh2YWx1ZVtmaWVsZC5uYW1lXSwgZmllbGQudHlwZSk7XG5cbiAgICAgIGlmIChmaWVsZFZhbHVlKSB7XG4gICAgICAgIGZpZWxkTm9kZXMucHVzaCh7XG4gICAgICAgICAga2luZDogS2luZC5PQkpFQ1RfRklFTEQsXG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAga2luZDogS2luZC5OQU1FLFxuICAgICAgICAgICAgdmFsdWU6IGZpZWxkLm5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogZmllbGRWYWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNULFxuICAgICAgZmllbGRzOiBmaWVsZE5vZGVzLFxuICAgIH07XG4gIH1cblxuICBpZiAoaXNMZWFmVHlwZSh0eXBlKSkge1xuICAgIC8vIFNpbmNlIHZhbHVlIGlzIGFuIGludGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUsIGl0IG11c3QgYmUgc2VyaWFsaXplZFxuICAgIC8vIHRvIGFuIGV4dGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUgYmVmb3JlIGNvbnZlcnRpbmcgaW50byBhbiBBU1QuXG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHR5cGUuc2VyaWFsaXplKHZhbHVlKTtcblxuICAgIGlmIChzZXJpYWxpemVkID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gT3RoZXJzIHNlcmlhbGl6ZSBiYXNlZCBvbiB0aGVpciBjb3JyZXNwb25kaW5nIEphdmFTY3JpcHQgc2NhbGFyIHR5cGVzLlxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuQk9PTEVBTixcbiAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWQsXG4gICAgICB9O1xuICAgIH0gLy8gSmF2YVNjcmlwdCBudW1iZXJzIGNhbiBiZSBJbnQgb3IgRmxvYXQgdmFsdWVzLlxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNGaW5pdGUoc2VyaWFsaXplZCkpIHtcbiAgICAgIGNvbnN0IHN0cmluZ051bSA9IFN0cmluZyhzZXJpYWxpemVkKTtcbiAgICAgIHJldHVybiBpbnRlZ2VyU3RyaW5nUmVnRXhwLnRlc3Qoc3RyaW5nTnVtKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuSU5ULFxuICAgICAgICAgICAgdmFsdWU6IHN0cmluZ051bSxcbiAgICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAga2luZDogS2luZC5GTE9BVCxcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdOdW0sXG4gICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlcmlhbGl6ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBFbnVtIHR5cGVzIHVzZSBFbnVtIGxpdGVyYWxzLlxuICAgICAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiBLaW5kLkVOVU0sXG4gICAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWQsXG4gICAgICAgIH07XG4gICAgICB9IC8vIElEIHR5cGVzIGNhbiB1c2UgSW50IGxpdGVyYWxzLlxuXG4gICAgICBpZiAodHlwZSA9PT0gR3JhcGhRTElEICYmIGludGVnZXJTdHJpbmdSZWdFeHAudGVzdChzZXJpYWxpemVkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IEtpbmQuSU5ULFxuICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBLaW5kLlNUUklORyxcbiAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBjb252ZXJ0IHZhbHVlIHRvIEFTVDogJHtpbnNwZWN0KHNlcmlhbGl6ZWQpfS5gKTtcbiAgfVxuICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gIC8vIE5vdCByZWFjaGFibGUsIGFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZC5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIGlucHV0IHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbn1cbi8qKlxuICogSW50VmFsdWU6XG4gKiAgIC0gTmVnYXRpdmVTaWduPyAwXG4gKiAgIC0gTmVnYXRpdmVTaWduPyBOb25aZXJvRGlnaXQgKCBEaWdpdCsgKT9cbiAqL1xuXG5jb25zdCBpbnRlZ2VyU3RyaW5nUmVnRXhwID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG4iLCJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gJy4uL2xhbmd1YWdlL2tpbmRzLm1qcyc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL2xhbmd1YWdlL3BhcnNlci5tanMnO1xuaW1wb3J0IHsgc3BlY2lmaWVkRGlyZWN0aXZlcyB9IGZyb20gJy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTFNjaGVtYSB9IGZyb20gJy4uL3R5cGUvc2NoZW1hLm1qcyc7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNETCB9IGZyb20gJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGUubWpzJztcbmltcG9ydCB7IGV4dGVuZFNjaGVtYUltcGwgfSBmcm9tICcuL2V4dGVuZFNjaGVtYS5tanMnO1xuXG4vKipcbiAqIFRoaXMgdGFrZXMgdGhlIGFzdCBvZiBhIHNjaGVtYSBkb2N1bWVudCBwcm9kdWNlZCBieSB0aGUgcGFyc2UgZnVuY3Rpb24gaW5cbiAqIHNyYy9sYW5ndWFnZS9wYXJzZXIuanMuXG4gKlxuICogSWYgbm8gc2NoZW1hIGRlZmluaXRpb24gaXMgcHJvdmlkZWQsIHRoZW4gaXQgd2lsbCBsb29rIGZvciB0eXBlcyBuYW1lZCBRdWVyeSxcbiAqIE11dGF0aW9uIGFuZCBTdWJzY3JpcHRpb24uXG4gKlxuICogR2l2ZW4gdGhhdCBBU1QgaXQgY29uc3RydWN0cyBhIEdyYXBoUUxTY2hlbWEuIFRoZSByZXN1bHRpbmcgc2NoZW1hXG4gKiBoYXMgbm8gcmVzb2x2ZSBtZXRob2RzLCBzbyBleGVjdXRpb24gd2lsbCB1c2UgZGVmYXVsdCByZXNvbHZlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFTVFNjaGVtYShkb2N1bWVudEFTVCwgb3B0aW9ucykge1xuICAoZG9jdW1lbnRBU1QgIT0gbnVsbCAmJiBkb2N1bWVudEFTVC5raW5kID09PSBLaW5kLkRPQ1VNRU5UKSB8fFxuICAgIGRldkFzc2VydChmYWxzZSwgJ011c3QgcHJvdmlkZSB2YWxpZCBEb2N1bWVudCBBU1QuJyk7XG5cbiAgaWYgKFxuICAgIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXNzdW1lVmFsaWQpICE9PVxuICAgICAgdHJ1ZSAmJlxuICAgIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogb3B0aW9ucy5hc3N1bWVWYWxpZFNETCkgIT09IHRydWVcbiAgKSB7XG4gICAgYXNzZXJ0VmFsaWRTREwoZG9jdW1lbnRBU1QpO1xuICB9XG5cbiAgY29uc3QgZW1wdHlTY2hlbWFDb25maWcgPSB7XG4gICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB0eXBlczogW10sXG4gICAgZGlyZWN0aXZlczogW10sXG4gICAgZXh0ZW5zaW9uczogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBleHRlbnNpb25BU1ROb2RlczogW10sXG4gICAgYXNzdW1lVmFsaWQ6IGZhbHNlLFxuICB9O1xuICBjb25zdCBjb25maWcgPSBleHRlbmRTY2hlbWFJbXBsKGVtcHR5U2NoZW1hQ29uZmlnLCBkb2N1bWVudEFTVCwgb3B0aW9ucyk7XG5cbiAgaWYgKGNvbmZpZy5hc3ROb2RlID09IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgY29uZmlnLnR5cGVzKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUubmFtZSkge1xuICAgICAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgZWFybHkgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseVxuICAgICAgICAvLyB0eXBlZCB2YWx1ZXMgYmVsb3csIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW1cbiAgICAgICAgLy8gdmFsaWRhdGlvbiB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgICBjYXNlICdRdWVyeSc6XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB2YWxpZGF0ZWQgaW4gYHZhbGlkYXRlU2NoZW1hYFxuICAgICAgICAgIGNvbmZpZy5xdWVyeSA9IHR5cGU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnTXV0YXRpb24nOlxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsaWRhdGVkIGluIGB2YWxpZGF0ZVNjaGVtYWBcbiAgICAgICAgICBjb25maWcubXV0YXRpb24gPSB0eXBlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1N1YnNjcmlwdGlvbic6XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB2YWxpZGF0ZWQgaW4gYHZhbGlkYXRlU2NoZW1hYFxuICAgICAgICAgIGNvbmZpZy5zdWJzY3JpcHRpb24gPSB0eXBlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRpcmVjdGl2ZXMgPSBbXG4gICAgLi4uY29uZmlnLmRpcmVjdGl2ZXMsIC8vIElmIHNwZWNpZmllZCBkaXJlY3RpdmVzIHdlcmUgbm90IGV4cGxpY2l0bHkgZGVjbGFyZWQsIGFkZCB0aGVtLlxuICAgIC4uLnNwZWNpZmllZERpcmVjdGl2ZXMuZmlsdGVyKChzdGREaXJlY3RpdmUpID0+XG4gICAgICBjb25maWcuZGlyZWN0aXZlcy5ldmVyeShcbiAgICAgICAgKGRpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLm5hbWUgIT09IHN0ZERpcmVjdGl2ZS5uYW1lLFxuICAgICAgKSxcbiAgICApLFxuICBdO1xuICByZXR1cm4gbmV3IEdyYXBoUUxTY2hlbWEoeyAuLi5jb25maWcsIGRpcmVjdGl2ZXMgfSk7XG59XG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGJ1aWxkIGEgR3JhcGhRTFNjaGVtYSBkaXJlY3RseSBmcm9tIGEgc291cmNlXG4gKiBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTY2hlbWEoc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gcGFyc2Uoc291cmNlLCB7XG4gICAgbm9Mb2NhdGlvbjpcbiAgICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub0xvY2F0aW9uLFxuICAgIGFsbG93TGVnYWN5RnJhZ21lbnRWYXJpYWJsZXM6XG4gICAgICBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IG9wdGlvbnMuYWxsb3dMZWdhY3lGcmFnbWVudFZhcmlhYmxlcyxcbiAgfSk7XG4gIHJldHVybiBidWlsZEFTVFNjaGVtYShkb2N1bWVudCwge1xuICAgIGFzc3VtZVZhbGlkU0RMOlxuICAgICAgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkU0RMLFxuICAgIGFzc3VtZVZhbGlkOlxuICAgICAgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkLFxuICB9KTtcbn1cbiIsImltcG9ydCB7IGRpZFlvdU1lYW4gfSBmcm9tICcuLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuLi9qc3V0aWxzL2luc3BlY3QubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlT2JqZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pc0l0ZXJhYmxlT2JqZWN0Lm1qcyc7XG5pbXBvcnQgeyBpc09iamVjdExpa2UgfSBmcm9tICcuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMnO1xuaW1wb3J0IHsgYWRkUGF0aCwgcGF0aFRvQXJyYXkgfSBmcm9tICcuLi9qc3V0aWxzL1BhdGgubWpzJztcbmltcG9ydCB7IHByaW50UGF0aEFycmF5IH0gZnJvbSAnLi4vanN1dGlscy9wcmludFBhdGhBcnJheS5tanMnO1xuaW1wb3J0IHsgc3VnZ2VzdGlvbkxpc3QgfSBmcm9tICcuLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7XG4gIGlzSW5wdXRPYmplY3RUeXBlLFxuICBpc0xlYWZUeXBlLFxuICBpc0xpc3RUeXBlLFxuICBpc05vbk51bGxUeXBlLFxufSBmcm9tICcuLi90eXBlL2RlZmluaXRpb24ubWpzJztcblxuLyoqXG4gKiBDb2VyY2VzIGEgSmF2YVNjcmlwdCB2YWx1ZSBnaXZlbiBhIEdyYXBoUUwgSW5wdXQgVHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZUlucHV0VmFsdWUoaW5wdXRWYWx1ZSwgdHlwZSwgb25FcnJvciA9IGRlZmF1bHRPbkVycm9yKSB7XG4gIHJldHVybiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCB0eXBlLCBvbkVycm9yLCB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0T25FcnJvcihwYXRoLCBpbnZhbGlkVmFsdWUsIGVycm9yKSB7XG4gIGxldCBlcnJvclByZWZpeCA9ICdJbnZhbGlkIHZhbHVlICcgKyBpbnNwZWN0KGludmFsaWRWYWx1ZSk7XG5cbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGVycm9yUHJlZml4ICs9IGAgYXQgXCJ2YWx1ZSR7cHJpbnRQYXRoQXJyYXkocGF0aCl9XCJgO1xuICB9XG5cbiAgZXJyb3IubWVzc2FnZSA9IGVycm9yUHJlZml4ICsgJzogJyArIGVycm9yLm1lc3NhZ2U7XG4gIHRocm93IGVycm9yO1xufVxuXG5mdW5jdGlvbiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCB0eXBlLCBvbkVycm9yLCBwYXRoKSB7XG4gIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgaWYgKGlucHV0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvZXJjZUlucHV0VmFsdWVJbXBsKGlucHV0VmFsdWUsIHR5cGUub2ZUeXBlLCBvbkVycm9yLCBwYXRoKTtcbiAgICB9XG5cbiAgICBvbkVycm9yKFxuICAgICAgcGF0aFRvQXJyYXkocGF0aCksXG4gICAgICBpbnB1dFZhbHVlLFxuICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIG5vbi1udWxsYWJsZSB0eXBlIFwiJHtpbnNwZWN0KHR5cGUpfVwiIG5vdCB0byBiZSBudWxsLmAsXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlucHV0VmFsdWUgPT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0bHkgcmV0dXJuIHRoZSB2YWx1ZSBudWxsLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICBjb25zdCBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuXG4gICAgaWYgKGlzSXRlcmFibGVPYmplY3QoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGlucHV0VmFsdWUsIChpdGVtVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1QYXRoID0gYWRkUGF0aChwYXRoLCBpbmRleCwgdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIGNvZXJjZUlucHV0VmFsdWVJbXBsKGl0ZW1WYWx1ZSwgaXRlbVR5cGUsIG9uRXJyb3IsIGl0ZW1QYXRoKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gTGlzdHMgYWNjZXB0IGEgbm9uLWxpc3QgdmFsdWUgYXMgYSBsaXN0IG9mIG9uZS5cblxuICAgIHJldHVybiBbY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgaXRlbVR5cGUsIG9uRXJyb3IsIHBhdGgpXTtcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIGlmICghaXNPYmplY3RMaWtlKGlucHV0VmFsdWUpKSB7XG4gICAgICBvbkVycm9yKFxuICAgICAgICBwYXRoVG9BcnJheShwYXRoKSxcbiAgICAgICAgaW5wdXRWYWx1ZSxcbiAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihgRXhwZWN0ZWQgdHlwZSBcIiR7dHlwZS5uYW1lfVwiIHRvIGJlIGFuIG9iamVjdC5gKSxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29lcmNlZFZhbHVlID0ge307XG4gICAgY29uc3QgZmllbGREZWZzID0gdHlwZS5nZXRGaWVsZHMoKTtcblxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgT2JqZWN0LnZhbHVlcyhmaWVsZERlZnMpKSB7XG4gICAgICBjb25zdCBmaWVsZFZhbHVlID0gaW5wdXRWYWx1ZVtmaWVsZC5uYW1lXTtcblxuICAgICAgaWYgKGZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZmllbGQuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2VyY2VkVmFsdWVbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOb25OdWxsVHlwZShmaWVsZC50eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSBpbnNwZWN0KGZpZWxkLnR5cGUpO1xuICAgICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgICBwYXRoVG9BcnJheShwYXRoKSxcbiAgICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkLm5hbWV9XCIgb2YgcmVxdWlyZWQgdHlwZSBcIiR7dHlwZVN0cn1cIiB3YXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29lcmNlZFZhbHVlW2ZpZWxkLm5hbWVdID0gY29lcmNlSW5wdXRWYWx1ZUltcGwoXG4gICAgICAgIGZpZWxkVmFsdWUsXG4gICAgICAgIGZpZWxkLnR5cGUsXG4gICAgICAgIG9uRXJyb3IsXG4gICAgICAgIGFkZFBhdGgocGF0aCwgZmllbGQubmFtZSwgdHlwZS5uYW1lKSxcbiAgICAgICk7XG4gICAgfSAvLyBFbnN1cmUgZXZlcnkgcHJvdmlkZWQgZmllbGQgaXMgZGVmaW5lZC5cblxuICAgIGZvciAoY29uc3QgZmllbGROYW1lIG9mIE9iamVjdC5rZXlzKGlucHV0VmFsdWUpKSB7XG4gICAgICBpZiAoIWZpZWxkRGVmc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkxpc3QoXG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgIE9iamVjdC5rZXlzKHR5cGUuZ2V0RmllbGRzKCkpLFxuICAgICAgICApO1xuICAgICAgICBvbkVycm9yKFxuICAgICAgICAgIHBhdGhUb0FycmF5KHBhdGgpLFxuICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGaWVsZCBcIiR7ZmllbGROYW1lfVwiIGlzIG5vdCBkZWZpbmVkIGJ5IHR5cGUgXCIke3R5cGUubmFtZX1cIi5gICtcbiAgICAgICAgICAgICAgZGlkWW91TWVhbihzdWdnZXN0aW9ucyksXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICB9XG5cbiAgaWYgKGlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICBsZXQgcGFyc2VSZXN1bHQ7IC8vIFNjYWxhcnMgYW5kIEVudW1zIGRldGVybWluZSBpZiBhIGlucHV0IHZhbHVlIGlzIHZhbGlkIHZpYSBwYXJzZVZhbHVlKCksXG4gICAgLy8gd2hpY2ggY2FuIHRocm93IHRvIGluZGljYXRlIGZhaWx1cmUuIElmIGl0IHRocm93cywgbWFpbnRhaW4gYSByZWZlcmVuY2VcbiAgICAvLyB0byB0aGUgb3JpZ2luYWwgZXJyb3IuXG5cbiAgICB0cnkge1xuICAgICAgcGFyc2VSZXN1bHQgPSB0eXBlLnBhcnNlVmFsdWUoaW5wdXRWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgICAgICBvbkVycm9yKHBhdGhUb0FycmF5KHBhdGgpLCBpbnB1dFZhbHVlLCBlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkVycm9yKFxuICAgICAgICAgIHBhdGhUb0FycmF5KHBhdGgpLFxuICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihgRXhwZWN0ZWQgdHlwZSBcIiR7dHlwZS5uYW1lfVwiLiBgICsgZXJyb3IubWVzc2FnZSwge1xuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VSZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb25FcnJvcihcbiAgICAgICAgcGF0aFRvQXJyYXkocGF0aCksXG4gICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoYEV4cGVjdGVkIHR5cGUgXCIke3R5cGUubmFtZX1cIi5gKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlUmVzdWx0O1xuICB9XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkLlxuXG4gIGZhbHNlIHx8IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgaW5wdXQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuIiwiaW1wb3J0IHsgZGV2QXNzZXJ0IH0gZnJvbSAnLi4vanN1dGlscy9kZXZBc3NlcnQubWpzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuLi9qc3V0aWxzL2luc3BlY3QubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5pbXBvcnQgeyBrZXlNYXAgfSBmcm9tICcuLi9qc3V0aWxzL2tleU1hcC5tanMnO1xuaW1wb3J0IHsgbWFwVmFsdWUgfSBmcm9tICcuLi9qc3V0aWxzL21hcFZhbHVlLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7XG4gIGlzVHlwZURlZmluaXRpb25Ob2RlLFxuICBpc1R5cGVFeHRlbnNpb25Ob2RlLFxufSBmcm9tICcuLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qcyc7XG5pbXBvcnQge1xuICBHcmFwaFFMRW51bVR5cGUsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsXG4gIEdyYXBoUUxJbnRlcmZhY2VUeXBlLFxuICBHcmFwaFFMTGlzdCxcbiAgR3JhcGhRTE5vbk51bGwsXG4gIEdyYXBoUUxPYmplY3RUeXBlLFxuICBHcmFwaFFMU2NhbGFyVHlwZSxcbiAgR3JhcGhRTFVuaW9uVHlwZSxcbiAgaXNFbnVtVHlwZSxcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzSW50ZXJmYWNlVHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNOb25OdWxsVHlwZSxcbiAgaXNPYmplY3RUeXBlLFxuICBpc1NjYWxhclR5cGUsXG4gIGlzVW5pb25UeXBlLFxufSBmcm9tICcuLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7XG4gIEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLFxuICBHcmFwaFFMRGlyZWN0aXZlLFxuICBHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmUsXG59IGZyb20gJy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuaW1wb3J0IHtcbiAgaW50cm9zcGVjdGlvblR5cGVzLFxuICBpc0ludHJvc3BlY3Rpb25UeXBlLFxufSBmcm9tICcuLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzJztcbmltcG9ydCB7XG4gIGlzU3BlY2lmaWVkU2NhbGFyVHlwZSxcbiAgc3BlY2lmaWVkU2NhbGFyVHlwZXMsXG59IGZyb20gJy4uL3R5cGUvc2NhbGFycy5tanMnO1xuaW1wb3J0IHsgYXNzZXJ0U2NoZW1hLCBHcmFwaFFMU2NoZW1hIH0gZnJvbSAnLi4vdHlwZS9zY2hlbWEubWpzJztcbmltcG9ydCB7IGFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi92YWxpZGF0ZS5tanMnO1xuaW1wb3J0IHsgZ2V0RGlyZWN0aXZlVmFsdWVzIH0gZnJvbSAnLi4vZXhlY3V0aW9uL3ZhbHVlcy5tanMnO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUIH0gZnJvbSAnLi92YWx1ZUZyb21BU1QubWpzJztcblxuLyoqXG4gKiBQcm9kdWNlcyBhIG5ldyBzY2hlbWEgZ2l2ZW4gYW4gZXhpc3Rpbmcgc2NoZW1hIGFuZCBhIGRvY3VtZW50IHdoaWNoIG1heVxuICogY29udGFpbiBHcmFwaFFMIHR5cGUgZXh0ZW5zaW9ucyBhbmQgZGVmaW5pdGlvbnMuIFRoZSBvcmlnaW5hbCBzY2hlbWEgd2lsbFxuICogcmVtYWluIHVuYWx0ZXJlZC5cbiAqXG4gKiBCZWNhdXNlIGEgc2NoZW1hIHJlcHJlc2VudHMgYSBncmFwaCBvZiByZWZlcmVuY2VzLCBhIHNjaGVtYSBjYW5ub3QgYmVcbiAqIGV4dGVuZGVkIHdpdGhvdXQgZWZmZWN0aXZlbHkgbWFraW5nIGFuIGVudGlyZSBjb3B5LiBXZSBkbyBub3Qga25vdyB1bnRpbCBpdCdzXG4gKiB0b28gbGF0ZSBpZiBzdWJncmFwaHMgcmVtYWluIHVuY2hhbmdlZC5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBjb3BpZXMgdGhlIHByb3ZpZGVkIHNjaGVtYSwgYXBwbHlpbmcgZXh0ZW5zaW9ucyB3aGlsZVxuICogcHJvZHVjaW5nIHRoZSBjb3B5LiBUaGUgb3JpZ2luYWwgc2NoZW1hIHJlbWFpbnMgdW5hbHRlcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kU2NoZW1hKHNjaGVtYSwgZG9jdW1lbnRBU1QsIG9wdGlvbnMpIHtcbiAgYXNzZXJ0U2NoZW1hKHNjaGVtYSk7XG4gIChkb2N1bWVudEFTVCAhPSBudWxsICYmIGRvY3VtZW50QVNULmtpbmQgPT09IEtpbmQuRE9DVU1FTlQpIHx8XG4gICAgZGV2QXNzZXJ0KGZhbHNlLCAnTXVzdCBwcm92aWRlIHZhbGlkIERvY3VtZW50IEFTVC4nKTtcblxuICBpZiAoXG4gICAgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZCkgIT09XG4gICAgICB0cnVlICYmXG4gICAgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBvcHRpb25zLmFzc3VtZVZhbGlkU0RMKSAhPT0gdHJ1ZVxuICApIHtcbiAgICBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbihkb2N1bWVudEFTVCwgc2NoZW1hKTtcbiAgfVxuXG4gIGNvbnN0IHNjaGVtYUNvbmZpZyA9IHNjaGVtYS50b0NvbmZpZygpO1xuICBjb25zdCBleHRlbmRlZENvbmZpZyA9IGV4dGVuZFNjaGVtYUltcGwoc2NoZW1hQ29uZmlnLCBkb2N1bWVudEFTVCwgb3B0aW9ucyk7XG4gIHJldHVybiBzY2hlbWFDb25maWcgPT09IGV4dGVuZGVkQ29uZmlnXG4gICAgPyBzY2hlbWFcbiAgICA6IG5ldyBHcmFwaFFMU2NoZW1hKGV4dGVuZGVkQ29uZmlnKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZFNjaGVtYUltcGwoc2NoZW1hQ29uZmlnLCBkb2N1bWVudEFTVCwgb3B0aW9ucykge1xuICB2YXIgX3NjaGVtYURlZiwgX3NjaGVtYURlZiRkZXNjcmlwdGlvLCBfc2NoZW1hRGVmMiwgX29wdGlvbnMkYXNzdW1lVmFsaWQ7XG5cbiAgLy8gQ29sbGVjdCB0aGUgdHlwZSBkZWZpbml0aW9ucyBhbmQgZXh0ZW5zaW9ucyBmb3VuZCBpbiB0aGUgZG9jdW1lbnQuXG4gIGNvbnN0IHR5cGVEZWZzID0gW107XG4gIGNvbnN0IHR5cGVFeHRlbnNpb25zTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gTmV3IGRpcmVjdGl2ZXMgYW5kIHR5cGVzIGFyZSBzZXBhcmF0ZSBiZWNhdXNlIGEgZGlyZWN0aXZlcyBhbmQgdHlwZXMgY2FuXG4gIC8vIGhhdmUgdGhlIHNhbWUgbmFtZS4gRm9yIGV4YW1wbGUsIGEgdHlwZSBuYW1lZCBcInNraXBcIi5cblxuICBjb25zdCBkaXJlY3RpdmVEZWZzID0gW107XG4gIGxldCBzY2hlbWFEZWY7IC8vIFNjaGVtYSBleHRlbnNpb25zIGFyZSBjb2xsZWN0ZWQgd2hpY2ggbWF5IGFkZCBhZGRpdGlvbmFsIG9wZXJhdGlvbiB0eXBlcy5cblxuICBjb25zdCBzY2hlbWFFeHRlbnNpb25zID0gW107XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04pIHtcbiAgICAgIHNjaGVtYURlZiA9IGRlZjtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBLaW5kLlNDSEVNQV9FWFRFTlNJT04pIHtcbiAgICAgIHNjaGVtYUV4dGVuc2lvbnMucHVzaChkZWYpO1xuICAgIH0gZWxzZSBpZiAoaXNUeXBlRGVmaW5pdGlvbk5vZGUoZGVmKSkge1xuICAgICAgdHlwZURlZnMucHVzaChkZWYpO1xuICAgIH0gZWxzZSBpZiAoaXNUeXBlRXh0ZW5zaW9uTm9kZShkZWYpKSB7XG4gICAgICBjb25zdCBleHRlbmRlZFR5cGVOYW1lID0gZGVmLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBleGlzdGluZ1R5cGVFeHRlbnNpb25zID0gdHlwZUV4dGVuc2lvbnNNYXBbZXh0ZW5kZWRUeXBlTmFtZV07XG4gICAgICB0eXBlRXh0ZW5zaW9uc01hcFtleHRlbmRlZFR5cGVOYW1lXSA9IGV4aXN0aW5nVHlwZUV4dGVuc2lvbnNcbiAgICAgICAgPyBleGlzdGluZ1R5cGVFeHRlbnNpb25zLmNvbmNhdChbZGVmXSlcbiAgICAgICAgOiBbZGVmXTtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICBkaXJlY3RpdmVEZWZzLnB1c2goZGVmKTtcbiAgICB9XG4gIH0gLy8gSWYgdGhpcyBkb2N1bWVudCBjb250YWlucyBubyBuZXcgdHlwZXMsIGV4dGVuc2lvbnMsIG9yIGRpcmVjdGl2ZXMgdGhlblxuICAvLyByZXR1cm4gdGhlIHNhbWUgdW5tb2RpZmllZCBHcmFwaFFMU2NoZW1hIGluc3RhbmNlLlxuXG4gIGlmIChcbiAgICBPYmplY3Qua2V5cyh0eXBlRXh0ZW5zaW9uc01hcCkubGVuZ3RoID09PSAwICYmXG4gICAgdHlwZURlZnMubGVuZ3RoID09PSAwICYmXG4gICAgZGlyZWN0aXZlRGVmcy5sZW5ndGggPT09IDAgJiZcbiAgICBzY2hlbWFFeHRlbnNpb25zLmxlbmd0aCA9PT0gMCAmJlxuICAgIHNjaGVtYURlZiA9PSBudWxsXG4gICkge1xuICAgIHJldHVybiBzY2hlbWFDb25maWc7XG4gIH1cblxuICBjb25zdCB0eXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGV4aXN0aW5nVHlwZSBvZiBzY2hlbWFDb25maWcudHlwZXMpIHtcbiAgICB0eXBlTWFwW2V4aXN0aW5nVHlwZS5uYW1lXSA9IGV4dGVuZE5hbWVkVHlwZShleGlzdGluZ1R5cGUpO1xuICB9XG5cbiAgZm9yIChjb25zdCB0eXBlTm9kZSBvZiB0eXBlRGVmcykge1xuICAgIHZhciBfc3RkVHlwZU1hcCRuYW1lO1xuXG4gICAgY29uc3QgbmFtZSA9IHR5cGVOb2RlLm5hbWUudmFsdWU7XG4gICAgdHlwZU1hcFtuYW1lXSA9XG4gICAgICAoX3N0ZFR5cGVNYXAkbmFtZSA9IHN0ZFR5cGVNYXBbbmFtZV0pICE9PSBudWxsICYmXG4gICAgICBfc3RkVHlwZU1hcCRuYW1lICE9PSB2b2lkIDBcbiAgICAgICAgPyBfc3RkVHlwZU1hcCRuYW1lXG4gICAgICAgIDogYnVpbGRUeXBlKHR5cGVOb2RlKTtcbiAgfVxuXG4gIGNvbnN0IG9wZXJhdGlvblR5cGVzID0ge1xuICAgIC8vIEdldCB0aGUgZXh0ZW5kZWQgcm9vdCBvcGVyYXRpb24gdHlwZXMuXG4gICAgcXVlcnk6IHNjaGVtYUNvbmZpZy5xdWVyeSAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5xdWVyeSksXG4gICAgbXV0YXRpb246IHNjaGVtYUNvbmZpZy5tdXRhdGlvbiAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5tdXRhdGlvbiksXG4gICAgc3Vic2NyaXB0aW9uOlxuICAgICAgc2NoZW1hQ29uZmlnLnN1YnNjcmlwdGlvbiAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5zdWJzY3JpcHRpb24pLFxuICAgIC8vIFRoZW4sIGluY29ycG9yYXRlIHNjaGVtYSBkZWZpbml0aW9uIGFuZCBhbGwgc2NoZW1hIGV4dGVuc2lvbnMuXG4gICAgLi4uKHNjaGVtYURlZiAmJiBnZXRPcGVyYXRpb25UeXBlcyhbc2NoZW1hRGVmXSkpLFxuICAgIC4uLmdldE9wZXJhdGlvblR5cGVzKHNjaGVtYUV4dGVuc2lvbnMpLFxuICB9OyAvLyBUaGVuIHByb2R1Y2UgYW5kIHJldHVybiBhIFNjaGVtYSBjb25maWcgd2l0aCB0aGVzZSB0eXBlcy5cblxuICByZXR1cm4ge1xuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgKF9zY2hlbWFEZWYgPSBzY2hlbWFEZWYpID09PSBudWxsIHx8IF9zY2hlbWFEZWYgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IChfc2NoZW1hRGVmJGRlc2NyaXB0aW8gPSBfc2NoZW1hRGVmLmRlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fFxuICAgICAgICAgIF9zY2hlbWFEZWYkZGVzY3JpcHRpbyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX3NjaGVtYURlZiRkZXNjcmlwdGlvLnZhbHVlLFxuICAgIC4uLm9wZXJhdGlvblR5cGVzLFxuICAgIHR5cGVzOiBPYmplY3QudmFsdWVzKHR5cGVNYXApLFxuICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgIC4uLnNjaGVtYUNvbmZpZy5kaXJlY3RpdmVzLm1hcChyZXBsYWNlRGlyZWN0aXZlKSxcbiAgICAgIC4uLmRpcmVjdGl2ZURlZnMubWFwKGJ1aWxkRGlyZWN0aXZlKSxcbiAgICBdLFxuICAgIGV4dGVuc2lvbnM6IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgYXN0Tm9kZTpcbiAgICAgIChfc2NoZW1hRGVmMiA9IHNjaGVtYURlZikgIT09IG51bGwgJiYgX3NjaGVtYURlZjIgIT09IHZvaWQgMFxuICAgICAgICA/IF9zY2hlbWFEZWYyXG4gICAgICAgIDogc2NoZW1hQ29uZmlnLmFzdE5vZGUsXG4gICAgZXh0ZW5zaW9uQVNUTm9kZXM6IHNjaGVtYUNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoc2NoZW1hRXh0ZW5zaW9ucyksXG4gICAgYXNzdW1lVmFsaWQ6XG4gICAgICAoX29wdGlvbnMkYXNzdW1lVmFsaWQgPVxuICAgICAgICBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBvcHRpb25zLmFzc3VtZVZhbGlkKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRhc3N1bWVWYWxpZCAhPT0gdm9pZCAwXG4gICAgICAgID8gX29wdGlvbnMkYXNzdW1lVmFsaWRcbiAgICAgICAgOiBmYWxzZSxcbiAgfTsgLy8gQmVsb3cgYXJlIGZ1bmN0aW9ucyB1c2VkIGZvciBwcm9kdWNpbmcgdGhpcyBzY2hlbWEgdGhhdCBoYXZlIGNsb3NlZCBvdmVyXG4gIC8vIHRoaXMgc2NvcGUgYW5kIGhhdmUgYWNjZXNzIHRvIHRoZSBzY2hlbWEsIGNhY2hlLCBhbmQgbmV3bHkgZGVmaW5lZCB0eXBlcy5cblxuICBmdW5jdGlvbiByZXBsYWNlVHlwZSh0eXBlKSB7XG4gICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3QocmVwbGFjZVR5cGUodHlwZS5vZlR5cGUpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChyZXBsYWNlVHlwZSh0eXBlLm9mVHlwZSkpO1xuICAgIH0gLy8gQHRzLWV4cGVjdC1lcnJvciBGSVhNRVxuXG4gICAgcmV0dXJuIHJlcGxhY2VOYW1lZFR5cGUodHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpIHtcbiAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgZWFybHkgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseVxuICAgIC8vIHR5cGVkIHZhbHVlcywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICByZXR1cm4gdHlwZU1hcFt0eXBlLm5hbWVdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZURpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgICBjb25zdCBjb25maWcgPSBkaXJlY3RpdmUudG9Db25maWcoKTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgYXJnczogbWFwVmFsdWUoY29uZmlnLmFyZ3MsIGV4dGVuZEFyZyksXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmROYW1lZFR5cGUodHlwZSkge1xuICAgIGlmIChpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpIHx8IGlzU3BlY2lmaWVkU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgICAgLy8gQnVpbHRpbiB0eXBlcyBhcmUgbm90IGV4dGVuZGVkLlxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGV4dGVuZFNjYWxhclR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGV4dGVuZE9iamVjdFR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGV4dGVuZEludGVyZmFjZVR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kVW5pb25UeXBlKHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kRW51bVR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kSW5wdXRPYmplY3RUeXBlKHR5cGUpO1xuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgLy8gTm90IHJlYWNoYWJsZSwgYWxsIHBvc3NpYmxlIHR5cGUgZGVmaW5pdGlvbiBub2RlcyBoYXZlIGJlZW4gY29uc2lkZXJlZC5cblxuICAgIGZhbHNlIHx8IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kSW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgICB2YXIgX3R5cGVFeHRlbnNpb25zTWFwJGNvO1xuXG4gICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIGNvbnN0IGV4dGVuc2lvbnMgPVxuICAgICAgKF90eXBlRXh0ZW5zaW9uc01hcCRjbyA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiZcbiAgICAgIF90eXBlRXh0ZW5zaW9uc01hcCRjbyAhPT0gdm9pZCAwXG4gICAgICAgID8gX3R5cGVFeHRlbnNpb25zTWFwJGNvXG4gICAgICAgIDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAgICAgICAgLi4ubWFwVmFsdWUoY29uZmlnLmZpZWxkcywgKGZpZWxkKSA9PiAoe1xuICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGZpZWxkLnR5cGUpLFxuICAgICAgICB9KSksXG4gICAgICAgIC4uLmJ1aWxkSW5wdXRGaWVsZE1hcChleHRlbnNpb25zKSxcbiAgICAgIH0pLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoZXh0ZW5zaW9ucyksXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRFbnVtVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCR0eTtcblxuICAgIGNvbnN0IGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICBjb25zdCBleHRlbnNpb25zID1cbiAgICAgIChfdHlwZUV4dGVuc2lvbnNNYXAkdHkgPSB0eXBlRXh0ZW5zaW9uc01hcFt0eXBlLm5hbWVdKSAhPT0gbnVsbCAmJlxuICAgICAgX3R5cGVFeHRlbnNpb25zTWFwJHR5ICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkdHlcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gICAgICAuLi5jb25maWcsXG4gICAgICB2YWx1ZXM6IHsgLi4uY29uZmlnLnZhbHVlcywgLi4uYnVpbGRFbnVtVmFsdWVNYXAoZXh0ZW5zaW9ucykgfSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kU2NhbGFyVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbzI7XG5cbiAgICBjb25zdCBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9XG4gICAgICAoX3R5cGVFeHRlbnNpb25zTWFwJGNvMiA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiZcbiAgICAgIF90eXBlRXh0ZW5zaW9uc01hcCRjbzIgIT09IHZvaWQgMFxuICAgICAgICA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbzJcbiAgICAgICAgOiBbXTtcbiAgICBsZXQgc3BlY2lmaWVkQnlVUkwgPSBjb25maWcuc3BlY2lmaWVkQnlVUkw7XG5cbiAgICBmb3IgKGNvbnN0IGV4dGVuc2lvbk5vZGUgb2YgZXh0ZW5zaW9ucykge1xuICAgICAgdmFyIF9nZXRTcGVjaWZpZWRCeVVSTDtcblxuICAgICAgc3BlY2lmaWVkQnlVUkwgPVxuICAgICAgICAoX2dldFNwZWNpZmllZEJ5VVJMID0gZ2V0U3BlY2lmaWVkQnlVUkwoZXh0ZW5zaW9uTm9kZSkpICE9PSBudWxsICYmXG4gICAgICAgIF9nZXRTcGVjaWZpZWRCeVVSTCAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfZ2V0U3BlY2lmaWVkQnlVUkxcbiAgICAgICAgICA6IHNwZWNpZmllZEJ5VVJMO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgc3BlY2lmaWVkQnlVUkwsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZE9iamVjdFR5cGUodHlwZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkY28zO1xuXG4gICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIGNvbnN0IGV4dGVuc2lvbnMgPVxuICAgICAgKF90eXBlRXh0ZW5zaW9uc01hcCRjbzMgPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmXG4gICAgICBfdHlwZUV4dGVuc2lvbnNNYXAkY28zICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkY28zXG4gICAgICAgIDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBpbnRlcmZhY2VzOiAoKSA9PiBbXG4gICAgICAgIC4uLnR5cGUuZ2V0SW50ZXJmYWNlcygpLm1hcChyZXBsYWNlTmFtZWRUeXBlKSxcbiAgICAgICAgLi4uYnVpbGRJbnRlcmZhY2VzKGV4dGVuc2lvbnMpLFxuICAgICAgXSxcbiAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAgICAgICAgLi4ubWFwVmFsdWUoY29uZmlnLmZpZWxkcywgZXh0ZW5kRmllbGQpLFxuICAgICAgICAuLi5idWlsZEZpZWxkTWFwKGV4dGVuc2lvbnMpLFxuICAgICAgfSksXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZEludGVyZmFjZVR5cGUodHlwZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkY280O1xuXG4gICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIGNvbnN0IGV4dGVuc2lvbnMgPVxuICAgICAgKF90eXBlRXh0ZW5zaW9uc01hcCRjbzQgPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmXG4gICAgICBfdHlwZUV4dGVuc2lvbnNNYXAkY280ICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkY280XG4gICAgICAgIDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBpbnRlcmZhY2VzOiAoKSA9PiBbXG4gICAgICAgIC4uLnR5cGUuZ2V0SW50ZXJmYWNlcygpLm1hcChyZXBsYWNlTmFtZWRUeXBlKSxcbiAgICAgICAgLi4uYnVpbGRJbnRlcmZhY2VzKGV4dGVuc2lvbnMpLFxuICAgICAgXSxcbiAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAgICAgICAgLi4ubWFwVmFsdWUoY29uZmlnLmZpZWxkcywgZXh0ZW5kRmllbGQpLFxuICAgICAgICAuLi5idWlsZEZpZWxkTWFwKGV4dGVuc2lvbnMpLFxuICAgICAgfSksXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZFVuaW9uVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbzU7XG5cbiAgICBjb25zdCBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9XG4gICAgICAoX3R5cGVFeHRlbnNpb25zTWFwJGNvNSA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiZcbiAgICAgIF90eXBlRXh0ZW5zaW9uc01hcCRjbzUgIT09IHZvaWQgMFxuICAgICAgICA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbzVcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgdHlwZXM6ICgpID0+IFtcbiAgICAgICAgLi4udHlwZS5nZXRUeXBlcygpLm1hcChyZXBsYWNlTmFtZWRUeXBlKSxcbiAgICAgICAgLi4uYnVpbGRVbmlvblR5cGVzKGV4dGVuc2lvbnMpLFxuICAgICAgXSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpLFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kRmllbGQoZmllbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGQsXG4gICAgICB0eXBlOiByZXBsYWNlVHlwZShmaWVsZC50eXBlKSxcbiAgICAgIGFyZ3M6IGZpZWxkLmFyZ3MgJiYgbWFwVmFsdWUoZmllbGQuYXJncywgZXh0ZW5kQXJnKSxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kQXJnKGFyZykge1xuICAgIHJldHVybiB7IC4uLmFyZywgdHlwZTogcmVwbGFjZVR5cGUoYXJnLnR5cGUpIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcGVyYXRpb25UeXBlcyhub2Rlcykge1xuICAgIGNvbnN0IG9wVHlwZXMgPSB7fTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgdmFyIF9ub2RlJG9wZXJhdGlvblR5cGVzO1xuXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgICAgY29uc3Qgb3BlcmF0aW9uVHlwZXNOb2RlcyA9XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgIChfbm9kZSRvcGVyYXRpb25UeXBlcyA9IG5vZGUub3BlcmF0aW9uVHlwZXMpICE9PSBudWxsICYmXG4gICAgICAgIF9ub2RlJG9wZXJhdGlvblR5cGVzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9ub2RlJG9wZXJhdGlvblR5cGVzXG4gICAgICAgICAgOiBbXTtcblxuICAgICAgZm9yIChjb25zdCBvcGVyYXRpb25UeXBlIG9mIG9wZXJhdGlvblR5cGVzTm9kZXMpIHtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGVhcmx5IGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHlcbiAgICAgICAgLy8gdHlwZWQgdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBvcFR5cGVzW29wZXJhdGlvblR5cGUub3BlcmF0aW9uXSA9IGdldE5hbWVkVHlwZShvcGVyYXRpb25UeXBlLnR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcFR5cGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmFtZWRUeXBlKG5vZGUpIHtcbiAgICB2YXIgX3N0ZFR5cGVNYXAkbmFtZTI7XG5cbiAgICBjb25zdCBuYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgIGNvbnN0IHR5cGUgPVxuICAgICAgKF9zdGRUeXBlTWFwJG5hbWUyID0gc3RkVHlwZU1hcFtuYW1lXSkgIT09IG51bGwgJiZcbiAgICAgIF9zdGRUeXBlTWFwJG5hbWUyICE9PSB2b2lkIDBcbiAgICAgICAgPyBfc3RkVHlwZU1hcCRuYW1lMlxuICAgICAgICA6IHR5cGVNYXBbbmFtZV07XG5cbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogXCIke25hbWV9XCIuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRXcmFwcGVkVHlwZShub2RlKSB7XG4gICAgaWYgKG5vZGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEUpIHtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3QoZ2V0V3JhcHBlZFR5cGUobm9kZS50eXBlKSk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUua2luZCA9PT0gS2luZC5OT05fTlVMTF9UWVBFKSB7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKGdldFdyYXBwZWRUeXBlKG5vZGUudHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXROYW1lZFR5cGUobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZERpcmVjdGl2ZShub2RlKSB7XG4gICAgdmFyIF9ub2RlJGRlc2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgICAgIG5hbWU6IG5vZGUubmFtZS52YWx1ZSxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAoX25vZGUkZGVzY3JpcHRpb24gPSBub2RlLmRlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fFxuICAgICAgICBfbm9kZSRkZXNjcmlwdGlvbiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IF9ub2RlJGRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgbG9jYXRpb25zOiBub2RlLmxvY2F0aW9ucy5tYXAoKHsgdmFsdWUgfSkgPT4gdmFsdWUpLFxuICAgICAgaXNSZXBlYXRhYmxlOiBub2RlLnJlcGVhdGFibGUsXG4gICAgICBhcmdzOiBidWlsZEFyZ3VtZW50TWFwKG5vZGUuYXJndW1lbnRzKSxcbiAgICAgIGFzdE5vZGU6IG5vZGUsXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEZpZWxkTWFwKG5vZGVzKSB7XG4gICAgY29uc3QgZmllbGRDb25maWdNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICB2YXIgX25vZGUkZmllbGRzO1xuXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgICAgY29uc3Qgbm9kZUZpZWxkcyA9XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgIChfbm9kZSRmaWVsZHMgPSBub2RlLmZpZWxkcykgIT09IG51bGwgJiYgX25vZGUkZmllbGRzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9ub2RlJGZpZWxkc1xuICAgICAgICAgIDogW107XG5cbiAgICAgIGZvciAoY29uc3QgZmllbGQgb2Ygbm9kZUZpZWxkcykge1xuICAgICAgICB2YXIgX2ZpZWxkJGRlc2NyaXB0aW9uO1xuXG4gICAgICAgIGZpZWxkQ29uZmlnTWFwW2ZpZWxkLm5hbWUudmFsdWVdID0ge1xuICAgICAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgICAgICAgLy8gdmFsdWUsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvblxuICAgICAgICAgIC8vIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG4gICAgICAgICAgdHlwZTogZ2V0V3JhcHBlZFR5cGUoZmllbGQudHlwZSksXG4gICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAoX2ZpZWxkJGRlc2NyaXB0aW9uID0gZmllbGQuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfZmllbGQkZGVzY3JpcHRpb24gPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9maWVsZCRkZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICBhcmdzOiBidWlsZEFyZ3VtZW50TWFwKGZpZWxkLmFyZ3VtZW50cyksXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGdldERlcHJlY2F0aW9uUmVhc29uKGZpZWxkKSxcbiAgICAgICAgICBhc3ROb2RlOiBmaWVsZCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGRDb25maWdNYXA7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEFyZ3VtZW50TWFwKGFyZ3MpIHtcbiAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgIGNvbnN0IGFyZ3NOb2RlcyA9XG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgYXJncyAhPT0gbnVsbCAmJiBhcmdzICE9PSB2b2lkIDAgPyBhcmdzIDogW107XG4gICAgY29uc3QgYXJnQ29uZmlnTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3NOb2Rlcykge1xuICAgICAgdmFyIF9hcmckZGVzY3JpcHRpb247XG5cbiAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgICAvLyB2YWx1ZSwgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbSB2YWxpZGF0aW9uXG4gICAgICAvLyB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgY29uc3QgdHlwZSA9IGdldFdyYXBwZWRUeXBlKGFyZy50eXBlKTtcbiAgICAgIGFyZ0NvbmZpZ01hcFthcmcubmFtZS52YWx1ZV0gPSB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgIChfYXJnJGRlc2NyaXB0aW9uID0gYXJnLmRlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fFxuICAgICAgICAgIF9hcmckZGVzY3JpcHRpb24gPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgIDogX2FyZyRkZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB2YWx1ZUZyb21BU1QoYXJnLmRlZmF1bHRWYWx1ZSwgdHlwZSksXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbihhcmcpLFxuICAgICAgICBhc3ROb2RlOiBhcmcsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmdDb25maWdNYXA7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZElucHV0RmllbGRNYXAobm9kZXMpIHtcbiAgICBjb25zdCBpbnB1dEZpZWxkTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgdmFyIF9ub2RlJGZpZWxkczI7XG5cbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG4gICAgICBjb25zdCBmaWVsZHNOb2RlcyA9XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgIChfbm9kZSRmaWVsZHMyID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkczIgIT09IHZvaWQgMFxuICAgICAgICAgID8gX25vZGUkZmllbGRzMlxuICAgICAgICAgIDogW107XG5cbiAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzTm9kZXMpIHtcbiAgICAgICAgdmFyIF9maWVsZCRkZXNjcmlwdGlvbjI7XG5cbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHkgdHlwZWRcbiAgICAgICAgLy8gdmFsdWUsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvblxuICAgICAgICAvLyB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgICBjb25zdCB0eXBlID0gZ2V0V3JhcHBlZFR5cGUoZmllbGQudHlwZSk7XG4gICAgICAgIGlucHV0RmllbGRNYXBbZmllbGQubmFtZS52YWx1ZV0gPSB7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIChfZmllbGQkZGVzY3JpcHRpb24yID0gZmllbGQuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfZmllbGQkZGVzY3JpcHRpb24yID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfZmllbGQkZGVzY3JpcHRpb24yLnZhbHVlLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdmFsdWVGcm9tQVNUKGZpZWxkLmRlZmF1bHRWYWx1ZSwgdHlwZSksXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGdldERlcHJlY2F0aW9uUmVhc29uKGZpZWxkKSxcbiAgICAgICAgICBhc3ROb2RlOiBmaWVsZCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRGaWVsZE1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRW51bVZhbHVlTWFwKG5vZGVzKSB7XG4gICAgY29uc3QgZW51bVZhbHVlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgdmFyIF9ub2RlJHZhbHVlcztcblxuICAgICAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcbiAgICAgIGNvbnN0IHZhbHVlc05vZGVzID1cbiAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgKF9ub2RlJHZhbHVlcyA9IG5vZGUudmFsdWVzKSAhPT0gbnVsbCAmJiBfbm9kZSR2YWx1ZXMgIT09IHZvaWQgMFxuICAgICAgICAgID8gX25vZGUkdmFsdWVzXG4gICAgICAgICAgOiBbXTtcblxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXNOb2Rlcykge1xuICAgICAgICB2YXIgX3ZhbHVlJGRlc2NyaXB0aW9uO1xuXG4gICAgICAgIGVudW1WYWx1ZU1hcFt2YWx1ZS5uYW1lLnZhbHVlXSA9IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIChfdmFsdWUkZGVzY3JpcHRpb24gPSB2YWx1ZS5kZXNjcmlwdGlvbikgPT09IG51bGwgfHxcbiAgICAgICAgICAgIF92YWx1ZSRkZXNjcmlwdGlvbiA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX3ZhbHVlJGRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbih2YWx1ZSksXG4gICAgICAgICAgYXN0Tm9kZTogdmFsdWUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudW1WYWx1ZU1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW50ZXJmYWNlcyhub2Rlcykge1xuICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgLy8gdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgLy8gdmFsaWRhdGlvbiB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICByZXR1cm4gbm9kZXMuZmxhdE1hcChcbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG4gICAgICAobm9kZSkgPT4ge1xuICAgICAgICB2YXIgX25vZGUkaW50ZXJmYWNlcyRtYXAsIF9ub2RlJGludGVyZmFjZXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIChfbm9kZSRpbnRlcmZhY2VzJG1hcCA9XG4gICAgICAgICAgICAoX25vZGUkaW50ZXJmYWNlcyA9IG5vZGUuaW50ZXJmYWNlcykgPT09IG51bGwgfHxcbiAgICAgICAgICAgIF9ub2RlJGludGVyZmFjZXMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9ub2RlJGludGVyZmFjZXMubWFwKGdldE5hbWVkVHlwZSkpICE9PSBudWxsICYmXG4gICAgICAgICAgICBfbm9kZSRpbnRlcmZhY2VzJG1hcCAhPT0gdm9pZCAwXG4gICAgICAgICAgICA/IF9ub2RlJGludGVyZmFjZXMkbWFwXG4gICAgICAgICAgICA6IFtdXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFVuaW9uVHlwZXMobm9kZXMpIHtcbiAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseSB0eXBlZFxuICAgIC8vIHZhbHVlcyBiZWxvdywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgcmV0dXJuIG5vZGVzLmZsYXRNYXAoXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuICAgICAgKG5vZGUpID0+IHtcbiAgICAgICAgdmFyIF9ub2RlJHR5cGVzJG1hcCwgX25vZGUkdHlwZXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIChfbm9kZSR0eXBlcyRtYXAgPVxuICAgICAgICAgICAgKF9ub2RlJHR5cGVzID0gbm9kZS50eXBlcykgPT09IG51bGwgfHwgX25vZGUkdHlwZXMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9ub2RlJHR5cGVzLm1hcChnZXROYW1lZFR5cGUpKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgX25vZGUkdHlwZXMkbWFwICE9PSB2b2lkIDBcbiAgICAgICAgICAgID8gX25vZGUkdHlwZXMkbWFwXG4gICAgICAgICAgICA6IFtdXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFR5cGUoYXN0Tm9kZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkbmE7XG5cbiAgICBjb25zdCBuYW1lID0gYXN0Tm9kZS5uYW1lLnZhbHVlO1xuICAgIGNvbnN0IGV4dGVuc2lvbkFTVE5vZGVzID1cbiAgICAgIChfdHlwZUV4dGVuc2lvbnNNYXAkbmEgPSB0eXBlRXh0ZW5zaW9uc01hcFtuYW1lXSkgIT09IG51bGwgJiZcbiAgICAgIF90eXBlRXh0ZW5zaW9uc01hcCRuYSAhPT0gdm9pZCAwXG4gICAgICAgID8gX3R5cGVFeHRlbnNpb25zTWFwJG5hXG4gICAgICAgIDogW107XG5cbiAgICBzd2l0Y2ggKGFzdE5vZGUua2luZCkge1xuICAgICAgY2FzZSBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046IHtcbiAgICAgICAgdmFyIF9hc3ROb2RlJGRlc2NyaXB0aW9uO1xuXG4gICAgICAgIGNvbnN0IGFsbE5vZGVzID0gW2FzdE5vZGUsIC4uLmV4dGVuc2lvbkFTVE5vZGVzXTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIChfYXN0Tm9kZSRkZXNjcmlwdGlvbiA9IGFzdE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfYXN0Tm9kZSRkZXNjcmlwdGlvbiA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX2FzdE5vZGUkZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gYnVpbGRJbnRlcmZhY2VzKGFsbE5vZGVzKSxcbiAgICAgICAgICBmaWVsZHM6ICgpID0+IGJ1aWxkRmllbGRNYXAoYWxsTm9kZXMpLFxuICAgICAgICAgIGFzdE5vZGUsXG4gICAgICAgICAgZXh0ZW5zaW9uQVNUTm9kZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTjoge1xuICAgICAgICB2YXIgX2FzdE5vZGUkZGVzY3JpcHRpb24yO1xuXG4gICAgICAgIGNvbnN0IGFsbE5vZGVzID0gW2FzdE5vZGUsIC4uLmV4dGVuc2lvbkFTVE5vZGVzXTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIChfYXN0Tm9kZSRkZXNjcmlwdGlvbjIgPSBhc3ROb2RlLmRlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgX2FzdE5vZGUkZGVzY3JpcHRpb24yID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfYXN0Tm9kZSRkZXNjcmlwdGlvbjIudmFsdWUsXG4gICAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gYnVpbGRJbnRlcmZhY2VzKGFsbE5vZGVzKSxcbiAgICAgICAgICBmaWVsZHM6ICgpID0+IGJ1aWxkRmllbGRNYXAoYWxsTm9kZXMpLFxuICAgICAgICAgIGFzdE5vZGUsXG4gICAgICAgICAgZXh0ZW5zaW9uQVNUTm9kZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT046IHtcbiAgICAgICAgdmFyIF9hc3ROb2RlJGRlc2NyaXB0aW9uMztcblxuICAgICAgICBjb25zdCBhbGxOb2RlcyA9IFthc3ROb2RlLCAuLi5leHRlbnNpb25BU1ROb2Rlc107XG4gICAgICAgIHJldHVybiBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgKF9hc3ROb2RlJGRlc2NyaXB0aW9uMyA9IGFzdE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfYXN0Tm9kZSRkZXNjcmlwdGlvbjMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9hc3ROb2RlJGRlc2NyaXB0aW9uMy52YWx1ZSxcbiAgICAgICAgICB2YWx1ZXM6IGJ1aWxkRW51bVZhbHVlTWFwKGFsbE5vZGVzKSxcbiAgICAgICAgICBhc3ROb2RlLFxuICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTjoge1xuICAgICAgICB2YXIgX2FzdE5vZGUkZGVzY3JpcHRpb240O1xuXG4gICAgICAgIGNvbnN0IGFsbE5vZGVzID0gW2FzdE5vZGUsIC4uLmV4dGVuc2lvbkFTVE5vZGVzXTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMVW5pb25UeXBlKHtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgKF9hc3ROb2RlJGRlc2NyaXB0aW9uNCA9IGFzdE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfYXN0Tm9kZSRkZXNjcmlwdGlvbjQgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9hc3ROb2RlJGRlc2NyaXB0aW9uNC52YWx1ZSxcbiAgICAgICAgICB0eXBlczogKCkgPT4gYnVpbGRVbmlvblR5cGVzKGFsbE5vZGVzKSxcbiAgICAgICAgICBhc3ROb2RlLFxuICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT046IHtcbiAgICAgICAgdmFyIF9hc3ROb2RlJGRlc2NyaXB0aW9uNTtcblxuICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgKF9hc3ROb2RlJGRlc2NyaXB0aW9uNSA9IGFzdE5vZGUuZGVzY3JpcHRpb24pID09PSBudWxsIHx8XG4gICAgICAgICAgICBfYXN0Tm9kZSRkZXNjcmlwdGlvbjUgPT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgICA6IF9hc3ROb2RlJGRlc2NyaXB0aW9uNS52YWx1ZSxcbiAgICAgICAgICBzcGVjaWZpZWRCeVVSTDogZ2V0U3BlY2lmaWVkQnlVUkwoYXN0Tm9kZSksXG4gICAgICAgICAgYXN0Tm9kZSxcbiAgICAgICAgICBleHRlbnNpb25BU1ROb2RlcyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOiB7XG4gICAgICAgIHZhciBfYXN0Tm9kZSRkZXNjcmlwdGlvbjY7XG5cbiAgICAgICAgY29uc3QgYWxsTm9kZXMgPSBbYXN0Tm9kZSwgLi4uZXh0ZW5zaW9uQVNUTm9kZXNdO1xuICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAoX2FzdE5vZGUkZGVzY3JpcHRpb242ID0gYXN0Tm9kZS5kZXNjcmlwdGlvbikgPT09IG51bGwgfHxcbiAgICAgICAgICAgIF9hc3ROb2RlJGRlc2NyaXB0aW9uNiA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX2FzdE5vZGUkZGVzY3JpcHRpb242LnZhbHVlLFxuICAgICAgICAgIGZpZWxkczogKCkgPT4gYnVpbGRJbnB1dEZpZWxkTWFwKGFsbE5vZGVzKSxcbiAgICAgICAgICBhc3ROb2RlLFxuICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNvbnN0IHN0ZFR5cGVNYXAgPSBrZXlNYXAoXG4gIFsuLi5zcGVjaWZpZWRTY2FsYXJUeXBlcywgLi4uaW50cm9zcGVjdGlvblR5cGVzXSxcbiAgKHR5cGUpID0+IHR5cGUubmFtZSxcbik7XG4vKipcbiAqIEdpdmVuIGEgZmllbGQgb3IgZW51bSB2YWx1ZSBub2RlLCByZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgZm9yIHRoZVxuICogZGVwcmVjYXRpb24gcmVhc29uLlxuICovXG5cbmZ1bmN0aW9uIGdldERlcHJlY2F0aW9uUmVhc29uKG5vZGUpIHtcbiAgY29uc3QgZGVwcmVjYXRlZCA9IGdldERpcmVjdGl2ZVZhbHVlcyhHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSwgbm9kZSk7IC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsaWRhdGVkIGJ5IGBnZXREaXJlY3RpdmVWYWx1ZXNgXG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQgPT09IG51bGwgfHwgZGVwcmVjYXRlZCA9PT0gdm9pZCAwXG4gICAgPyB2b2lkIDBcbiAgICA6IGRlcHJlY2F0ZWQucmVhc29uO1xufVxuLyoqXG4gKiBHaXZlbiBhIHNjYWxhciBub2RlLCByZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWRCeVVSTC5cbiAqL1xuXG5mdW5jdGlvbiBnZXRTcGVjaWZpZWRCeVVSTChub2RlKSB7XG4gIGNvbnN0IHNwZWNpZmllZEJ5ID0gZ2V0RGlyZWN0aXZlVmFsdWVzKEdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSwgbm9kZSk7IC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsaWRhdGVkIGJ5IGBnZXREaXJlY3RpdmVWYWx1ZXNgXG5cbiAgcmV0dXJuIHNwZWNpZmllZEJ5ID09PSBudWxsIHx8IHNwZWNpZmllZEJ5ID09PSB2b2lkIDBcbiAgICA/IHZvaWQgMFxuICAgIDogc3BlY2lmaWVkQnkudXJsO1xufVxuIiwiaW1wb3J0IHsgbmF0dXJhbENvbXBhcmUgfSBmcm9tICcuLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbi8qKlxuICogU29ydCBWYWx1ZU5vZGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgc29ydGVkIGNvcHkgb2YgdGhlIGdpdmVuIFZhbHVlTm9kZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc29ydFZhbHVlTm9kZSh2YWx1ZU5vZGUpIHtcbiAgc3dpdGNoICh2YWx1ZU5vZGUua2luZCkge1xuICAgIGNhc2UgS2luZC5PQkpFQ1Q6XG4gICAgICByZXR1cm4geyAuLi52YWx1ZU5vZGUsIGZpZWxkczogc29ydEZpZWxkcyh2YWx1ZU5vZGUuZmllbGRzKSB9O1xuXG4gICAgY2FzZSBLaW5kLkxJU1Q6XG4gICAgICByZXR1cm4geyAuLi52YWx1ZU5vZGUsIHZhbHVlczogdmFsdWVOb2RlLnZhbHVlcy5tYXAoc29ydFZhbHVlTm9kZSkgfTtcblxuICAgIGNhc2UgS2luZC5JTlQ6XG4gICAgY2FzZSBLaW5kLkZMT0FUOlxuICAgIGNhc2UgS2luZC5TVFJJTkc6XG4gICAgY2FzZSBLaW5kLkJPT0xFQU46XG4gICAgY2FzZSBLaW5kLk5VTEw6XG4gICAgY2FzZSBLaW5kLkVOVU06XG4gICAgY2FzZSBLaW5kLlZBUklBQkxFOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzb3J0RmllbGRzKGZpZWxkcykge1xuICByZXR1cm4gZmllbGRzXG4gICAgLm1hcCgoZmllbGROb2RlKSA9PiAoe1xuICAgICAgLi4uZmllbGROb2RlLFxuICAgICAgdmFsdWU6IHNvcnRWYWx1ZU5vZGUoZmllbGROb2RlLnZhbHVlKSxcbiAgICB9KSlcbiAgICAuc29ydCgoZmllbGRBLCBmaWVsZEIpID0+XG4gICAgICBuYXR1cmFsQ29tcGFyZShmaWVsZEEubmFtZS52YWx1ZSwgZmllbGRCLm5hbWUudmFsdWUpLFxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICBpc0Fic3RyYWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc0xpc3RUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc09iamVjdFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFByb3ZpZGVkIHR3byB0eXBlcywgcmV0dXJuIHRydWUgaWYgdGhlIHR5cGVzIGFyZSBlcXVhbCAoaW52YXJpYW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxUeXBlKHR5cGVBLCB0eXBlQikge1xuICAvLyBFcXVpdmFsZW50IHR5cGVzIGFyZSBlcXVhbC5cbiAgaWYgKHR5cGVBID09PSB0eXBlQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIGVpdGhlciB0eXBlIGlzIG5vbi1udWxsLCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIG5vbi1udWxsLlxuXG4gIGlmIChpc05vbk51bGxUeXBlKHR5cGVBKSAmJiBpc05vbk51bGxUeXBlKHR5cGVCKSkge1xuICAgIHJldHVybiBpc0VxdWFsVHlwZSh0eXBlQS5vZlR5cGUsIHR5cGVCLm9mVHlwZSk7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgYSBsaXN0LCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoaXNMaXN0VHlwZSh0eXBlQSkgJiYgaXNMaXN0VHlwZSh0eXBlQikpIHtcbiAgICByZXR1cm4gaXNFcXVhbFR5cGUodHlwZUEub2ZUeXBlLCB0eXBlQi5vZlR5cGUpO1xuICB9IC8vIE90aGVyd2lzZSB0aGUgdHlwZXMgYXJlIG5vdCBlcXVhbC5cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFByb3ZpZGVkIGEgdHlwZSBhbmQgYSBzdXBlciB0eXBlLCByZXR1cm4gdHJ1ZSBpZiB0aGUgZmlyc3QgdHlwZSBpcyBlaXRoZXJcbiAqIGVxdWFsIG9yIGEgc3Vic2V0IG9mIHRoZSBzZWNvbmQgc3VwZXIgdHlwZSAoY292YXJpYW50KS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLCBzdXBlclR5cGUpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlIGlzIGEgdmFsaWQgc3VidHlwZVxuICBpZiAobWF5YmVTdWJUeXBlID09PSBzdXBlclR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgaXMgbm9uLW51bGwsIG1heWJlU3ViVHlwZSBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUoc3VwZXJUeXBlKSkge1xuICAgIGlmIChpc05vbk51bGxUeXBlKG1heWJlU3ViVHlwZSkpIHtcbiAgICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUub2ZUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZShtYXliZVN1YlR5cGUpKSB7XG4gICAgLy8gSWYgc3VwZXJUeXBlIGlzIG51bGxhYmxlLCBtYXliZVN1YlR5cGUgbWF5IGJlIG5vbi1udWxsIG9yIG51bGxhYmxlLlxuICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUpO1xuICB9IC8vIElmIHN1cGVyVHlwZSB0eXBlIGlzIGEgbGlzdCwgbWF5YmVTdWJUeXBlIHR5cGUgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoaXNMaXN0VHlwZShzdXBlclR5cGUpKSB7XG4gICAgaWYgKGlzTGlzdFR5cGUobWF5YmVTdWJUeXBlKSkge1xuICAgICAgcmV0dXJuIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIG1heWJlU3ViVHlwZS5vZlR5cGUsIHN1cGVyVHlwZS5vZlR5cGUpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0xpc3RUeXBlKG1heWJlU3ViVHlwZSkpIHtcbiAgICAvLyBJZiBzdXBlclR5cGUgaXMgbm90IGEgbGlzdCwgbWF5YmVTdWJUeXBlIG11c3QgYWxzbyBiZSBub3QgYSBsaXN0LlxuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgdHlwZSBpcyBhbiBhYnN0cmFjdCB0eXBlLCBjaGVjayBpZiBpdCBpcyBzdXBlciB0eXBlIG9mIG1heWJlU3ViVHlwZS5cbiAgLy8gT3RoZXJ3aXNlLCB0aGUgY2hpbGQgdHlwZSBpcyBub3QgYSB2YWxpZCBzdWJ0eXBlIG9mIHRoZSBwYXJlbnQgdHlwZS5cblxuICByZXR1cm4gKFxuICAgIGlzQWJzdHJhY3RUeXBlKHN1cGVyVHlwZSkgJiZcbiAgICAoaXNJbnRlcmZhY2VUeXBlKG1heWJlU3ViVHlwZSkgfHwgaXNPYmplY3RUeXBlKG1heWJlU3ViVHlwZSkpICYmXG4gICAgc2NoZW1hLmlzU3ViVHlwZShzdXBlclR5cGUsIG1heWJlU3ViVHlwZSlcbiAgKTtcbn1cbi8qKlxuICogUHJvdmlkZWQgdHdvIGNvbXBvc2l0ZSB0eXBlcywgZGV0ZXJtaW5lIGlmIHRoZXkgXCJvdmVybGFwXCIuIFR3byBjb21wb3NpdGVcbiAqIHR5cGVzIG92ZXJsYXAgd2hlbiB0aGUgU2V0cyBvZiBwb3NzaWJsZSBjb25jcmV0ZSB0eXBlcyBmb3IgZWFjaCBpbnRlcnNlY3QuXG4gKlxuICogVGhpcyBpcyBvZnRlbiB1c2VkIHRvIGRldGVybWluZSBpZiBhIGZyYWdtZW50IG9mIGEgZ2l2ZW4gdHlwZSBjb3VsZCBwb3NzaWJseVxuICogYmUgdmlzaXRlZCBpbiBhIGNvbnRleHQgb2YgYW5vdGhlciB0eXBlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgY29tbXV0YXRpdmUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvVHlwZXNPdmVybGFwKHNjaGVtYSwgdHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgb3ZlcmxhcFxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNBYnN0cmFjdFR5cGUodHlwZUEpKSB7XG4gICAgaWYgKGlzQWJzdHJhY3RUeXBlKHR5cGVCKSkge1xuICAgICAgLy8gSWYgYm90aCB0eXBlcyBhcmUgYWJzdHJhY3QsIHRoZW4gZGV0ZXJtaW5lIGlmIHRoZXJlIGlzIGFueSBpbnRlcnNlY3Rpb25cbiAgICAgIC8vIGJldHdlZW4gcG9zc2libGUgY29uY3JldGUgdHlwZXMgb2YgZWFjaC5cbiAgICAgIHJldHVybiBzY2hlbWFcbiAgICAgICAgLmdldFBvc3NpYmxlVHlwZXModHlwZUEpXG4gICAgICAgIC5zb21lKCh0eXBlKSA9PiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlKSk7XG4gICAgfSAvLyBEZXRlcm1pbmUgaWYgdGhlIGxhdHRlciB0eXBlIGlzIGEgcG9zc2libGUgY29uY3JldGUgdHlwZSBvZiB0aGUgZm9ybWVyLlxuXG4gICAgcmV0dXJuIHNjaGVtYS5pc1N1YlR5cGUodHlwZUEsIHR5cGVCKTtcbiAgfVxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZSh0eXBlQikpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGZvcm1lciB0eXBlIGlzIGEgcG9zc2libGUgY29uY3JldGUgdHlwZSBvZiB0aGUgbGF0dGVyLlxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlQSk7XG4gIH0gLy8gT3RoZXJ3aXNlIHRoZSB0eXBlcyBkbyBub3Qgb3ZlcmxhcC5cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IEdyYXBoUUxMaXN0LCBHcmFwaFFMTm9uTnVsbCB9IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZU5vZGUpIHtcbiAgc3dpdGNoICh0eXBlTm9kZS5raW5kKSB7XG4gICAgY2FzZSBLaW5kLkxJU1RfVFlQRToge1xuICAgICAgY29uc3QgaW5uZXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB0eXBlTm9kZS50eXBlKTtcbiAgICAgIHJldHVybiBpbm5lclR5cGUgJiYgbmV3IEdyYXBoUUxMaXN0KGlubmVyVHlwZSk7XG4gICAgfVxuXG4gICAgY2FzZSBLaW5kLk5PTl9OVUxMX1RZUEU6IHtcbiAgICAgIGNvbnN0IGlubmVyVHlwZSA9IHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZU5vZGUudHlwZSk7XG4gICAgICByZXR1cm4gaW5uZXJUeXBlICYmIG5ldyBHcmFwaFFMTm9uTnVsbChpbm5lclR5cGUpO1xuICAgIH1cblxuICAgIGNhc2UgS2luZC5OQU1FRF9UWVBFOlxuICAgICAgcmV0dXJuIHNjaGVtYS5nZXRUeXBlKHR5cGVOb2RlLm5hbWUudmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsga2V5TWFwIH0gZnJvbSAnLi4vanN1dGlscy9rZXlNYXAubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHtcbiAgaXNJbnB1dE9iamVjdFR5cGUsXG4gIGlzTGVhZlR5cGUsXG4gIGlzTGlzdFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG59IGZyb20gJy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuLyoqXG4gKiBQcm9kdWNlcyBhIEphdmFTY3JpcHQgdmFsdWUgZ2l2ZW4gYSBHcmFwaFFMIFZhbHVlIEFTVC5cbiAqXG4gKiBBIEdyYXBoUUwgdHlwZSBtdXN0IGJlIHByb3ZpZGVkLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gaW50ZXJwcmV0IGRpZmZlcmVudFxuICogR3JhcGhRTCBWYWx1ZSBsaXRlcmFscy5cbiAqXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIHdoZW4gdGhlIHZhbHVlIGNvdWxkIG5vdCBiZSB2YWxpZGx5IGNvZXJjZWQgYWNjb3JkaW5nIHRvXG4gKiB0aGUgcHJvdmlkZWQgdHlwZS5cbiAqXG4gKiB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHwgSlNPTiBWYWx1ZSAgICB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLSB8XG4gKiB8IElucHV0IE9iamVjdCAgICAgICAgIHwgT2JqZWN0ICAgICAgICB8XG4gKiB8IExpc3QgICAgICAgICAgICAgICAgIHwgQXJyYXkgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgICAgICAgIHwgQm9vbGVhbiAgICAgICB8XG4gKiB8IFN0cmluZyAgICAgICAgICAgICAgIHwgU3RyaW5nICAgICAgICB8XG4gKiB8IEludCAvIEZsb2F0ICAgICAgICAgIHwgTnVtYmVyICAgICAgICB8XG4gKiB8IEVudW0gVmFsdWUgICAgICAgICAgIHwgVW5rbm93biAgICAgICB8XG4gKiB8IE51bGxWYWx1ZSAgICAgICAgICAgIHwgbnVsbCAgICAgICAgICB8XG4gKlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCB0eXBlLCB2YXJpYWJsZXMpIHtcbiAgaWYgKCF2YWx1ZU5vZGUpIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIG5vZGUsIHRoZW4gdGhlcmUgaXMgYWxzbyBubyB2YWx1ZS5cbiAgICAvLyBJbXBvcnRhbnRseSwgdGhpcyBpcyBkaWZmZXJlbnQgZnJvbSByZXR1cm5pbmcgdGhlIHZhbHVlIG51bGwuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHZhbHVlTm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFKSB7XG4gICAgY29uc3QgdmFyaWFibGVOYW1lID0gdmFsdWVOb2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAodmFyaWFibGVzID09IG51bGwgfHwgdmFyaWFibGVzW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm8gdmFsaWQgcmV0dXJuIHZhbHVlLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHZhcmlhYmxlVmFsdWUgPSB2YXJpYWJsZXNbdmFyaWFibGVOYW1lXTtcblxuICAgIGlmICh2YXJpYWJsZVZhbHVlID09PSBudWxsICYmIGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfSAvLyBOb3RlOiBUaGlzIGRvZXMgbm8gZnVydGhlciBjaGVja2luZyB0aGF0IHRoaXMgdmFyaWFibGUgaXMgY29ycmVjdC5cbiAgICAvLyBUaGlzIGFzc3VtZXMgdGhhdCB0aGlzIHF1ZXJ5IGhhcyBiZWVuIHZhbGlkYXRlZCBhbmQgdGhlIHZhcmlhYmxlXG4gICAgLy8gdXNhZ2UgaGVyZSBpcyBvZiB0aGUgY29ycmVjdCB0eXBlLlxuXG4gICAgcmV0dXJuIHZhcmlhYmxlVmFsdWU7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5OVUxMKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCB0eXBlLm9mVHlwZSwgdmFyaWFibGVzKTtcbiAgfVxuXG4gIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5OVUxMKSB7XG4gICAgLy8gVGhpcyBpcyBleHBsaWNpdGx5IHJldHVybmluZyB0aGUgdmFsdWUgbnVsbC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgY29uc3QgaXRlbVR5cGUgPSB0eXBlLm9mVHlwZTtcblxuICAgIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5MSVNUKSB7XG4gICAgICBjb25zdCBjb2VyY2VkVmFsdWVzID0gW107XG5cbiAgICAgIGZvciAoY29uc3QgaXRlbU5vZGUgb2YgdmFsdWVOb2RlLnZhbHVlcykge1xuICAgICAgICBpZiAoaXNNaXNzaW5nVmFyaWFibGUoaXRlbU5vZGUsIHZhcmlhYmxlcykpIHtcbiAgICAgICAgICAvLyBJZiBhbiBhcnJheSBjb250YWlucyBhIG1pc3NpbmcgdmFyaWFibGUsIGl0IGlzIGVpdGhlciBjb2VyY2VkIHRvXG4gICAgICAgICAgLy8gbnVsbCBvciBpZiB0aGUgaXRlbSB0eXBlIGlzIG5vbi1udWxsLCBpdCBjb25zaWRlcmVkIGludmFsaWQuXG4gICAgICAgICAgaWYgKGlzTm9uTnVsbFR5cGUoaXRlbVR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvZXJjZWRWYWx1ZXMucHVzaChudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpdGVtVmFsdWUgPSB2YWx1ZUZyb21BU1QoaXRlbU5vZGUsIGl0ZW1UeXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvZXJjZWRWYWx1ZXMucHVzaChpdGVtVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWVzO1xuICAgIH1cblxuICAgIGNvbnN0IGNvZXJjZWRWYWx1ZSA9IHZhbHVlRnJvbUFTVCh2YWx1ZU5vZGUsIGl0ZW1UeXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgaWYgKGNvZXJjZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiBbY29lcmNlZFZhbHVlXTtcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5PQkpFQ1QpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfVxuXG4gICAgY29uc3QgY29lcmNlZE9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3QgZmllbGROb2RlcyA9IGtleU1hcCh2YWx1ZU5vZGUuZmllbGRzLCAoZmllbGQpID0+IGZpZWxkLm5hbWUudmFsdWUpO1xuXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3QudmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpKSB7XG4gICAgICBjb25zdCBmaWVsZE5vZGUgPSBmaWVsZE5vZGVzW2ZpZWxkLm5hbWVdO1xuXG4gICAgICBpZiAoIWZpZWxkTm9kZSB8fCBpc01pc3NpbmdWYXJpYWJsZShmaWVsZE5vZGUudmFsdWUsIHZhcmlhYmxlcykpIHtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZE9ialtmaWVsZC5uYW1lXSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGZpZWxkLnR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWVsZFZhbHVlID0gdmFsdWVGcm9tQVNUKGZpZWxkTm9kZS52YWx1ZSwgZmllbGQudHlwZSwgdmFyaWFibGVzKTtcblxuICAgICAgaWYgKGZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgICAgfVxuXG4gICAgICBjb2VyY2VkT2JqW2ZpZWxkLm5hbWVdID0gZmllbGRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29lcmNlZE9iajtcbiAgfVxuXG4gIGlmIChpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgLy8gU2NhbGFycyBhbmQgRW51bXMgZnVsZmlsbCBwYXJzaW5nIGEgbGl0ZXJhbCB2YWx1ZSB2aWEgcGFyc2VMaXRlcmFsKCkuXG4gICAgLy8gSW52YWxpZCB2YWx1ZXMgcmVwcmVzZW50IGEgZmFpbHVyZSB0byBwYXJzZSBjb3JyZWN0bHksIGluIHdoaWNoIGNhc2VcbiAgICAvLyBubyB2YWx1ZSBpcyByZXR1cm5lZC5cbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IHR5cGUucGFyc2VMaXRlcmFsKHZhbHVlTm9kZSwgdmFyaWFibGVzKTtcbiAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgaW5wdXQgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBpbnB1dCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59IC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWVOb2RlIGlzIGEgdmFyaWFibGUgd2hpY2ggaXMgbm90IGRlZmluZWRcbi8vIGluIHRoZSBzZXQgb2YgdmFyaWFibGVzLlxuXG5mdW5jdGlvbiBpc01pc3NpbmdWYXJpYWJsZSh2YWx1ZU5vZGUsIHZhcmlhYmxlcykge1xuICByZXR1cm4gKFxuICAgIHZhbHVlTm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFICYmXG4gICAgKHZhcmlhYmxlcyA9PSBudWxsIHx8IHZhcmlhYmxlc1t2YWx1ZU5vZGUubmFtZS52YWx1ZV0gPT09IHVuZGVmaW5lZClcbiAgKTtcbn1cbiIsImltcG9ydCB7IGtleVZhbE1hcCB9IGZyb20gJy4uL2pzdXRpbHMva2V5VmFsTWFwLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbi8qKlxuICogUHJvZHVjZXMgYSBKYXZhU2NyaXB0IHZhbHVlIGdpdmVuIGEgR3JhcGhRTCBWYWx1ZSBBU1QuXG4gKlxuICogVW5saWtlIGB2YWx1ZUZyb21BU1QoKWAsIG5vIHR5cGUgaXMgcHJvdmlkZWQuIFRoZSByZXN1bHRpbmcgSmF2YVNjcmlwdCB2YWx1ZVxuICogd2lsbCByZWZsZWN0IHRoZSBwcm92aWRlZCBHcmFwaFFMIHZhbHVlIEFTVC5cbiAqXG4gKiB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHwgSmF2YVNjcmlwdCBWYWx1ZSB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IElucHV0IE9iamVjdCAgICAgICAgIHwgT2JqZWN0ICAgICAgICAgICB8XG4gKiB8IExpc3QgICAgICAgICAgICAgICAgIHwgQXJyYXkgICAgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgICAgICAgIHwgQm9vbGVhbiAgICAgICAgICB8XG4gKiB8IFN0cmluZyAvIEVudW0gICAgICAgIHwgU3RyaW5nICAgICAgICAgICB8XG4gKiB8IEludCAvIEZsb2F0ICAgICAgICAgIHwgTnVtYmVyICAgICAgICAgICB8XG4gKiB8IE51bGwgICAgICAgICAgICAgICAgIHwgbnVsbCAgICAgICAgICAgICB8XG4gKlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUZyb21BU1RVbnR5cGVkKHZhbHVlTm9kZSwgdmFyaWFibGVzKSB7XG4gIHN3aXRjaCAodmFsdWVOb2RlLmtpbmQpIHtcbiAgICBjYXNlIEtpbmQuTlVMTDpcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSBLaW5kLklOVDpcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZU5vZGUudmFsdWUsIDEwKTtcblxuICAgIGNhc2UgS2luZC5GTE9BVDpcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlTm9kZS52YWx1ZSk7XG5cbiAgICBjYXNlIEtpbmQuU1RSSU5HOlxuICAgIGNhc2UgS2luZC5FTlVNOlxuICAgIGNhc2UgS2luZC5CT09MRUFOOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcblxuICAgIGNhc2UgS2luZC5MSVNUOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZXMubWFwKChub2RlKSA9PlxuICAgICAgICB2YWx1ZUZyb21BU1RVbnR5cGVkKG5vZGUsIHZhcmlhYmxlcyksXG4gICAgICApO1xuXG4gICAgY2FzZSBLaW5kLk9CSkVDVDpcbiAgICAgIHJldHVybiBrZXlWYWxNYXAoXG4gICAgICAgIHZhbHVlTm9kZS5maWVsZHMsXG4gICAgICAgIChmaWVsZCkgPT4gZmllbGQubmFtZS52YWx1ZSxcbiAgICAgICAgKGZpZWxkKSA9PiB2YWx1ZUZyb21BU1RVbnR5cGVkKGZpZWxkLnZhbHVlLCB2YXJpYWJsZXMpLFxuICAgICAgKTtcblxuICAgIGNhc2UgS2luZC5WQVJJQUJMRTpcbiAgICAgIHJldHVybiB2YXJpYWJsZXMgPT09IG51bGwgfHwgdmFyaWFibGVzID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiB2YXJpYWJsZXNbdmFsdWVOb2RlLm5hbWUudmFsdWVdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vbGFuZ3VhZ2UvdmlzaXRvci5tanMnO1xuaW1wb3J0IHsgVHlwZUluZm8sIHZpc2l0V2l0aFR5cGVJbmZvIH0gZnJvbSAnLi4vdXRpbGl0aWVzL1R5cGVJbmZvLm1qcyc7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBpcyBwYXNzZWQgYXMgdGhlIFwidGhpc1wiIGNvbnRleHQgdG8gYWxsIHZhbGlkYXRvcnMsXG4gKiBhbGxvd2luZyBhY2Nlc3MgdG8gY29tbW9ubHkgdXNlZnVsIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gZnJvbSB3aXRoaW4gYVxuICogdmFsaWRhdGlvbiBydWxlLlxuICovXG5leHBvcnQgY2xhc3MgQVNUVmFsaWRhdGlvbkNvbnRleHQge1xuICBjb25zdHJ1Y3Rvcihhc3QsIG9uRXJyb3IpIHtcbiAgICB0aGlzLl9hc3QgPSBhc3Q7XG4gICAgdGhpcy5fZnJhZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZyYWdtZW50U3ByZWFkcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fb25FcnJvciA9IG9uRXJyb3I7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBU1RWYWxpZGF0aW9uQ29udGV4dCc7XG4gIH1cblxuICByZXBvcnRFcnJvcihlcnJvcikge1xuICAgIHRoaXMuX29uRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgZ2V0RG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FzdDtcbiAgfVxuXG4gIGdldEZyYWdtZW50KG5hbWUpIHtcbiAgICBsZXQgZnJhZ21lbnRzO1xuXG4gICAgaWYgKHRoaXMuX2ZyYWdtZW50cykge1xuICAgICAgZnJhZ21lbnRzID0gdGhpcy5fZnJhZ21lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICBmb3IgKGNvbnN0IGRlZk5vZGUgb2YgdGhpcy5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zKSB7XG4gICAgICAgIGlmIChkZWZOb2RlLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgICAgIGZyYWdtZW50c1tkZWZOb2RlLm5hbWUudmFsdWVdID0gZGVmTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mcmFnbWVudHMgPSBmcmFnbWVudHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50c1tuYW1lXTtcbiAgfVxuXG4gIGdldEZyYWdtZW50U3ByZWFkcyhub2RlKSB7XG4gICAgbGV0IHNwcmVhZHMgPSB0aGlzLl9mcmFnbWVudFNwcmVhZHMuZ2V0KG5vZGUpO1xuXG4gICAgaWYgKCFzcHJlYWRzKSB7XG4gICAgICBzcHJlYWRzID0gW107XG4gICAgICBjb25zdCBzZXRzVG9WaXNpdCA9IFtub2RlXTtcbiAgICAgIGxldCBzZXQ7XG5cbiAgICAgIHdoaWxlICgoc2V0ID0gc2V0c1RvVmlzaXQucG9wKCkpKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHNldC5zZWxlY3Rpb25zKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSBLaW5kLkZSQUdNRU5UX1NQUkVBRCkge1xuICAgICAgICAgICAgc3ByZWFkcy5wdXNoKHNlbGVjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBzZXRzVG9WaXNpdC5wdXNoKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mcmFnbWVudFNwcmVhZHMuc2V0KG5vZGUsIHNwcmVhZHMpO1xuICAgIH1cblxuICAgIHJldHVybiBzcHJlYWRzO1xuICB9XG5cbiAgZ2V0UmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzKG9wZXJhdGlvbikge1xuICAgIGxldCBmcmFnbWVudHMgPSB0aGlzLl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMuZ2V0KG9wZXJhdGlvbik7XG5cbiAgICBpZiAoIWZyYWdtZW50cykge1xuICAgICAgZnJhZ21lbnRzID0gW107XG4gICAgICBjb25zdCBjb2xsZWN0ZWROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb25zdCBub2Rlc1RvVmlzaXQgPSBbb3BlcmF0aW9uLnNlbGVjdGlvblNldF07XG4gICAgICBsZXQgbm9kZTtcblxuICAgICAgd2hpbGUgKChub2RlID0gbm9kZXNUb1Zpc2l0LnBvcCgpKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNwcmVhZCBvZiB0aGlzLmdldEZyYWdtZW50U3ByZWFkcyhub2RlKSkge1xuICAgICAgICAgIGNvbnN0IGZyYWdOYW1lID0gc3ByZWFkLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoY29sbGVjdGVkTmFtZXNbZnJhZ05hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb2xsZWN0ZWROYW1lc1tmcmFnTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgbm9kZXNUb1Zpc2l0LnB1c2goZnJhZ21lbnQuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzLnNldChvcGVyYXRpb24sIGZyYWdtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50cztcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFNETFZhbGlkYXRpb25Db250ZXh0IGV4dGVuZHMgQVNUVmFsaWRhdGlvbkNvbnRleHQge1xuICBjb25zdHJ1Y3Rvcihhc3QsIHNjaGVtYSwgb25FcnJvcikge1xuICAgIHN1cGVyKGFzdCwgb25FcnJvcik7XG4gICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnU0RMVmFsaWRhdGlvbkNvbnRleHQnO1xuICB9XG5cbiAgZ2V0U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9zY2hlbWE7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uQ29udGV4dCBleHRlbmRzIEFTVFZhbGlkYXRpb25Db250ZXh0IHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hLCBhc3QsIHR5cGVJbmZvLCBvbkVycm9yKSB7XG4gICAgc3VwZXIoYXN0LCBvbkVycm9yKTtcbiAgICB0aGlzLl9zY2hlbWEgPSBzY2hlbWE7XG4gICAgdGhpcy5fdHlwZUluZm8gPSB0eXBlSW5mbztcbiAgICB0aGlzLl92YXJpYWJsZVVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1ZhbGlkYXRpb25Db250ZXh0JztcbiAgfVxuXG4gIGdldFNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NoZW1hO1xuICB9XG5cbiAgZ2V0VmFyaWFibGVVc2FnZXMobm9kZSkge1xuICAgIGxldCB1c2FnZXMgPSB0aGlzLl92YXJpYWJsZVVzYWdlcy5nZXQobm9kZSk7XG5cbiAgICBpZiAoIXVzYWdlcykge1xuICAgICAgY29uc3QgbmV3VXNhZ2VzID0gW107XG4gICAgICBjb25zdCB0eXBlSW5mbyA9IG5ldyBUeXBlSW5mbyh0aGlzLl9zY2hlbWEpO1xuICAgICAgdmlzaXQoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHZpc2l0V2l0aFR5cGVJbmZvKHR5cGVJbmZvLCB7XG4gICAgICAgICAgVmFyaWFibGVEZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcblxuICAgICAgICAgIFZhcmlhYmxlKHZhcmlhYmxlKSB7XG4gICAgICAgICAgICBuZXdVc2FnZXMucHVzaCh7XG4gICAgICAgICAgICAgIG5vZGU6IHZhcmlhYmxlLFxuICAgICAgICAgICAgICB0eXBlOiB0eXBlSW5mby5nZXRJbnB1dFR5cGUoKSxcbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0eXBlSW5mby5nZXREZWZhdWx0VmFsdWUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIHVzYWdlcyA9IG5ld1VzYWdlcztcblxuICAgICAgdGhpcy5fdmFyaWFibGVVc2FnZXMuc2V0KG5vZGUsIHVzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzYWdlcztcbiAgfVxuXG4gIGdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbikge1xuICAgIGxldCB1c2FnZXMgPSB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcy5nZXQob3BlcmF0aW9uKTtcblxuICAgIGlmICghdXNhZ2VzKSB7XG4gICAgICB1c2FnZXMgPSB0aGlzLmdldFZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgIGZvciAoY29uc3QgZnJhZyBvZiB0aGlzLmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhvcGVyYXRpb24pKSB7XG4gICAgICAgIHVzYWdlcyA9IHVzYWdlcy5jb25jYXQodGhpcy5nZXRWYXJpYWJsZVVzYWdlcyhmcmFnKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzLnNldChvcGVyYXRpb24sIHVzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzYWdlcztcbiAgfVxuXG4gIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFR5cGUoKTtcbiAgfVxuXG4gIGdldFBhcmVudFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudFR5cGUoKTtcbiAgfVxuXG4gIGdldElucHV0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0SW5wdXRUeXBlKCk7XG4gIH1cblxuICBnZXRQYXJlbnRJbnB1dFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudElucHV0VHlwZSgpO1xuICB9XG5cbiAgZ2V0RmllbGREZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEZpZWxkRGVmKCk7XG4gIH1cblxuICBnZXREaXJlY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldERpcmVjdGl2ZSgpO1xuICB9XG5cbiAgZ2V0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEFyZ3VtZW50KCk7XG4gIH1cblxuICBnZXRFbnVtVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEVudW1WYWx1ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qcyc7XG5cbi8qKlxuICogRXhlY3V0YWJsZSBkZWZpbml0aW9uc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGZvciBleGVjdXRpb24gaWYgYWxsIGRlZmluaXRpb25zIGFyZSBlaXRoZXJcbiAqIG9wZXJhdGlvbiBvciBmcmFnbWVudCBkZWZpbml0aW9ucy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRXhlY3V0YWJsZS1EZWZpbml0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRG9jdW1lbnQobm9kZSkge1xuICAgICAgZm9yIChjb25zdCBkZWZpbml0aW9uIG9mIG5vZGUuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKCFpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZShkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGNvbnN0IGRlZk5hbWUgPVxuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kID09PSBLaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8XG4gICAgICAgICAgICBkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuU0NIRU1BX0VYVEVOU0lPTlxuICAgICAgICAgICAgICA/ICdzY2hlbWEnXG4gICAgICAgICAgICAgIDogJ1wiJyArIGRlZmluaXRpb24ubmFtZS52YWx1ZSArICdcIic7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoYFRoZSAke2RlZk5hbWV9IGRlZmluaXRpb24gaXMgbm90IGV4ZWN1dGFibGUuYCwge1xuICAgICAgICAgICAgICBub2RlczogZGVmaW5pdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBkaWRZb3VNZWFuIH0gZnJvbSAnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qcyc7XG5pbXBvcnQgeyBuYXR1cmFsQ29tcGFyZSB9IGZyb20gJy4uLy4uL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUubWpzJztcbmltcG9ydCB7IHN1Z2dlc3Rpb25MaXN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQge1xuICBpc0Fic3RyYWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc09iamVjdFR5cGUsXG59IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIEZpZWxkcyBvbiBjb3JyZWN0IHR5cGVcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBkZWZpbmVkIGJ5IHRoZVxuICogcGFyZW50IHR5cGUsIG9yIGFyZSBhbiBhbGxvd2VkIG1ldGEgZmllbGQgc3VjaCBhcyBfX3R5cGVuYW1lLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GaWVsZC1TZWxlY3Rpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQobm9kZSkge1xuICAgICAgY29uc3QgdHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBjb25zdCBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcblxuICAgICAgICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgICAgICAgLy8gVGhpcyBmaWVsZCBkb2Vzbid0IGV4aXN0LCBsZXRzIGxvb2sgZm9yIHN1Z2dlc3Rpb25zLlxuICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlOyAvLyBGaXJzdCBkZXRlcm1pbmUgaWYgdGhlcmUgYXJlIGFueSBzdWdnZXN0ZWQgdHlwZXMgdG8gY29uZGl0aW9uIG9uLlxuXG4gICAgICAgICAgbGV0IHN1Z2dlc3Rpb24gPSBkaWRZb3VNZWFuKFxuICAgICAgICAgICAgJ3RvIHVzZSBhbiBpbmxpbmUgZnJhZ21lbnQgb24nLFxuICAgICAgICAgICAgZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKSxcbiAgICAgICAgICApOyAvLyBJZiB0aGVyZSBhcmUgbm8gc3VnZ2VzdGVkIHR5cGVzLCB0aGVuIHBlcmhhcHMgdGhpcyB3YXMgYSB0eXBvP1xuXG4gICAgICAgICAgaWYgKHN1Z2dlc3Rpb24gPT09ICcnKSB7XG4gICAgICAgICAgICBzdWdnZXN0aW9uID0gZGlkWW91TWVhbihnZXRTdWdnZXN0ZWRGaWVsZE5hbWVzKHR5cGUsIGZpZWxkTmFtZSkpO1xuICAgICAgICAgIH0gLy8gUmVwb3J0IGFuIGVycm9yLCBpbmNsdWRpbmcgaGVscGZ1bCBzdWdnZXN0aW9ucy5cblxuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgQ2Fubm90IHF1ZXJ5IGZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgb24gdHlwZSBcIiR7dHlwZS5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4vKipcbiAqIEdvIHRocm91Z2ggYWxsIG9mIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdHlwZSwgYXMgd2VsbCBhcyB0aGUgaW50ZXJmYWNlcyB0aGF0XG4gKiB0aGV5IGltcGxlbWVudC4gSWYgYW55IG9mIHRob3NlIHR5cGVzIGluY2x1ZGUgdGhlIHByb3ZpZGVkIGZpZWxkLCBzdWdnZXN0IHRoZW0sXG4gKiBzb3J0ZWQgYnkgaG93IG9mdGVuIHRoZSB0eXBlIGlzIHJlZmVyZW5jZWQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKSB7XG4gIGlmICghaXNBYnN0cmFjdFR5cGUodHlwZSkpIHtcbiAgICAvLyBNdXN0IGJlIGFuIE9iamVjdCB0eXBlLCB3aGljaCBkb2VzIG5vdCBoYXZlIHBvc3NpYmxlIGZpZWxkcy5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBzdWdnZXN0ZWRUeXBlcyA9IG5ldyBTZXQoKTtcbiAgY29uc3QgdXNhZ2VDb3VudCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBwb3NzaWJsZVR5cGUgb2Ygc2NoZW1hLmdldFBvc3NpYmxlVHlwZXModHlwZSkpIHtcbiAgICBpZiAoIXBvc3NpYmxlVHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIFRoaXMgb2JqZWN0IHR5cGUgZGVmaW5lcyB0aGlzIGZpZWxkLlxuXG4gICAgc3VnZ2VzdGVkVHlwZXMuYWRkKHBvc3NpYmxlVHlwZSk7XG4gICAgdXNhZ2VDb3VudFtwb3NzaWJsZVR5cGUubmFtZV0gPSAxO1xuXG4gICAgZm9yIChjb25zdCBwb3NzaWJsZUludGVyZmFjZSBvZiBwb3NzaWJsZVR5cGUuZ2V0SW50ZXJmYWNlcygpKSB7XG4gICAgICB2YXIgX3VzYWdlQ291bnQkcG9zc2libGVJO1xuXG4gICAgICBpZiAoIXBvc3NpYmxlSW50ZXJmYWNlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIFRoaXMgaW50ZXJmYWNlIHR5cGUgZGVmaW5lcyB0aGlzIGZpZWxkLlxuXG4gICAgICBzdWdnZXN0ZWRUeXBlcy5hZGQocG9zc2libGVJbnRlcmZhY2UpO1xuICAgICAgdXNhZ2VDb3VudFtwb3NzaWJsZUludGVyZmFjZS5uYW1lXSA9XG4gICAgICAgICgoX3VzYWdlQ291bnQkcG9zc2libGVJID0gdXNhZ2VDb3VudFtwb3NzaWJsZUludGVyZmFjZS5uYW1lXSkgIT09XG4gICAgICAgICAgbnVsbCAmJiBfdXNhZ2VDb3VudCRwb3NzaWJsZUkgIT09IHZvaWQgMFxuICAgICAgICAgID8gX3VzYWdlQ291bnQkcG9zc2libGVJXG4gICAgICAgICAgOiAwKSArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFsuLi5zdWdnZXN0ZWRUeXBlc11cbiAgICAuc29ydCgodHlwZUEsIHR5cGVCKSA9PiB7XG4gICAgICAvLyBTdWdnZXN0IGJvdGggaW50ZXJmYWNlIGFuZCBvYmplY3QgdHlwZXMgYmFzZWQgb24gaG93IGNvbW1vbiB0aGV5IGFyZS5cbiAgICAgIGNvbnN0IHVzYWdlQ291bnREaWZmID0gdXNhZ2VDb3VudFt0eXBlQi5uYW1lXSAtIHVzYWdlQ291bnRbdHlwZUEubmFtZV07XG5cbiAgICAgIGlmICh1c2FnZUNvdW50RGlmZiAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdXNhZ2VDb3VudERpZmY7XG4gICAgICB9IC8vIFN1Z2dlc3Qgc3VwZXIgdHlwZXMgZmlyc3QgZm9sbG93ZWQgYnkgc3VidHlwZXNcblxuICAgICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlQSkgJiYgc2NoZW1hLmlzU3ViVHlwZSh0eXBlQSwgdHlwZUIpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlQikgJiYgc2NoZW1hLmlzU3ViVHlwZSh0eXBlQiwgdHlwZUEpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmF0dXJhbENvbXBhcmUodHlwZUEubmFtZSwgdHlwZUIubmFtZSk7XG4gICAgfSlcbiAgICAubWFwKCh4KSA9PiB4Lm5hbWUpO1xufVxuLyoqXG4gKiBGb3IgdGhlIGZpZWxkIG5hbWUgcHJvdmlkZWQsIGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHNpbWlsYXIgZmllbGQgbmFtZXNcbiAqIHRoYXQgbWF5IGJlIHRoZSByZXN1bHQgb2YgYSB0eXBvLlxuICovXG5cbmZ1bmN0aW9uIGdldFN1Z2dlc3RlZEZpZWxkTmFtZXModHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgY29uc3QgcG9zc2libGVGaWVsZE5hbWVzID0gT2JqZWN0LmtleXModHlwZS5nZXRGaWVsZHMoKSk7XG4gICAgcmV0dXJuIHN1Z2dlc3Rpb25MaXN0KGZpZWxkTmFtZSwgcG9zc2libGVGaWVsZE5hbWVzKTtcbiAgfSAvLyBPdGhlcndpc2UsIG11c3QgYmUgYSBVbmlvbiB0eXBlLCB3aGljaCBkb2VzIG5vdCBkZWZpbmUgZmllbGRzLlxuXG4gIHJldHVybiBbXTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyBpc0NvbXBvc2l0ZVR5cGUgfSBmcm9tICcuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qcyc7XG5cbi8qKlxuICogRnJhZ21lbnRzIG9uIGNvbXBvc2l0ZSB0eXBlXG4gKlxuICogRnJhZ21lbnRzIHVzZSBhIHR5cGUgY29uZGl0aW9uIHRvIGRldGVybWluZSBpZiB0aGV5IGFwcGx5LCBzaW5jZSBmcmFnbWVudHNcbiAqIGNhbiBvbmx5IGJlIHNwcmVhZCBpbnRvIGEgY29tcG9zaXRlIHR5cGUgKG9iamVjdCwgaW50ZXJmYWNlLCBvciB1bmlvbiksIHRoZVxuICogdHlwZSBjb25kaXRpb24gbXVzdCBhbHNvIGJlIGEgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50cy1Pbi1Db21wb3NpdGUtVHlwZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gbm9kZS50eXBlQ29uZGl0aW9uO1xuXG4gICAgICBpZiAodHlwZUNvbmRpdGlvbikge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgdHlwZUNvbmRpdGlvbik7XG5cbiAgICAgICAgaWYgKHR5cGUgJiYgIWlzQ29tcG9zaXRlVHlwZSh0eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSBwcmludCh0eXBlQ29uZGl0aW9uKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYEZyYWdtZW50IGNhbm5vdCBjb25kaXRpb24gb24gbm9uIGNvbXBvc2l0ZSB0eXBlIFwiJHt0eXBlU3RyfVwiLmAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2RlczogdHlwZUNvbmRpdGlvbixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3QgdHlwZSA9IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIG5vZGUudHlwZUNvbmRpdGlvbik7XG5cbiAgICAgIGlmICh0eXBlICYmICFpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICAgICAgY29uc3QgdHlwZVN0ciA9IHByaW50KG5vZGUudHlwZUNvbmRpdGlvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGcmFnbWVudCBcIiR7bm9kZS5uYW1lLnZhbHVlfVwiIGNhbm5vdCBjb25kaXRpb24gb24gbm9uIGNvbXBvc2l0ZSB0eXBlIFwiJHt0eXBlU3RyfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLnR5cGVDb25kaXRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IGRpZFlvdU1lYW4gfSBmcm9tICcuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzJztcbmltcG9ydCB7IHN1Z2dlc3Rpb25MaXN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tICcuLi8uLi90eXBlL2RpcmVjdGl2ZXMubWpzJztcblxuLyoqXG4gKiBLbm93biBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlIGRlZmluZWQgYnlcbiAqIHRoYXQgZmllbGQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFyZ3VtZW50LU5hbWVzXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRGlyZWN0aXZlcy1BcmUtSW4tVmFsaWQtTG9jYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgIC4uLktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUoY29udGV4dCksXG5cbiAgICBBcmd1bWVudChhcmdOb2RlKSB7XG4gICAgICBjb25zdCBhcmdEZWYgPSBjb250ZXh0LmdldEFyZ3VtZW50KCk7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKCFhcmdEZWYgJiYgZmllbGREZWYgJiYgcGFyZW50VHlwZSkge1xuICAgICAgICBjb25zdCBhcmdOYW1lID0gYXJnTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICBjb25zdCBrbm93bkFyZ3NOYW1lcyA9IGZpZWxkRGVmLmFyZ3MubWFwKChhcmcpID0+IGFyZy5uYW1lKTtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uTGlzdChhcmdOYW1lLCBrbm93bkFyZ3NOYW1lcyk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBVbmtub3duIGFyZ3VtZW50IFwiJHthcmdOYW1lfVwiIG9uIGZpZWxkIFwiJHtwYXJlbnRUeXBlLm5hbWV9LiR7ZmllbGREZWYubmFtZX1cIi5gICtcbiAgICAgICAgICAgICAgZGlkWW91TWVhbihzdWdnZXN0aW9ucyksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBhcmdOb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgZGlyZWN0aXZlQXJncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hXG4gICAgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpXG4gICAgOiBzcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGRlZmluZWREaXJlY3RpdmVzKSB7XG4gICAgZGlyZWN0aXZlQXJnc1tkaXJlY3RpdmUubmFtZV0gPSBkaXJlY3RpdmUuYXJncy5tYXAoKGFyZykgPT4gYXJnLm5hbWUpO1xuICB9XG5cbiAgY29uc3QgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgYXN0RGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIHZhciBfZGVmJGFyZ3VtZW50cztcblxuICAgICAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgIGNvbnN0IGFyZ3NOb2RlcyA9XG4gICAgICAgIChfZGVmJGFyZ3VtZW50cyA9IGRlZi5hcmd1bWVudHMpICE9PSBudWxsICYmIF9kZWYkYXJndW1lbnRzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9kZWYkYXJndW1lbnRzXG4gICAgICAgICAgOiBbXTtcbiAgICAgIGRpcmVjdGl2ZUFyZ3NbZGVmLm5hbWUudmFsdWVdID0gYXJnc05vZGVzLm1hcCgoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmUoZGlyZWN0aXZlTm9kZSkge1xuICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGtub3duQXJncyA9IGRpcmVjdGl2ZUFyZ3NbZGlyZWN0aXZlTmFtZV07XG5cbiAgICAgIGlmIChkaXJlY3RpdmVOb2RlLmFyZ3VtZW50cyAmJiBrbm93bkFyZ3MpIHtcbiAgICAgICAgZm9yIChjb25zdCBhcmdOb2RlIG9mIGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSB7XG4gICAgICAgICAgY29uc3QgYXJnTmFtZSA9IGFyZ05vZGUubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmICgha25vd25BcmdzLmluY2x1ZGVzKGFyZ05hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25MaXN0KGFyZ05hbWUsIGtub3duQXJncyk7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmtub3duIGFyZ3VtZW50IFwiJHthcmdOYW1lfVwiIG9uIGRpcmVjdGl2ZSBcIkAke2RpcmVjdGl2ZU5hbWV9XCIuYCArXG4gICAgICAgICAgICAgICAgICBkaWRZb3VNZWFuKHN1Z2dlc3Rpb25zKSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogYXJnTm9kZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi8uLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlTm9kZSB9IGZyb20gJy4uLy4uL2xhbmd1YWdlL2FzdC5tanMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanMnO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gJy4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qcyc7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSAnLi4vLi4vdHlwZS9kaXJlY3RpdmVzLm1qcyc7XG5cbi8qKlxuICogS25vd24gZGlyZWN0aXZlc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBgQGRpcmVjdGl2ZXNgIGFyZSBrbm93biBieSB0aGVcbiAqIHNjaGVtYSBhbmQgbGVnYWxseSBwb3NpdGlvbmVkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1EaXJlY3RpdmVzLUFyZS1EZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgbG9jYXRpb25zTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZERpcmVjdGl2ZXMgPSBzY2hlbWFcbiAgICA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKClcbiAgICA6IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZGVmaW5lZERpcmVjdGl2ZXMpIHtcbiAgICBsb2NhdGlvbnNNYXBbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlLmxvY2F0aW9ucztcbiAgfVxuXG4gIGNvbnN0IGFzdERlZmluaXRpb25zID0gY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zO1xuXG4gIGZvciAoY29uc3QgZGVmIG9mIGFzdERlZmluaXRpb25zKSB7XG4gICAgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICBsb2NhdGlvbnNNYXBbZGVmLm5hbWUudmFsdWVdID0gZGVmLmxvY2F0aW9ucy5tYXAoKG5hbWUpID0+IG5hbWUudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlKG5vZGUsIF9rZXksIF9wYXJlbnQsIF9wYXRoLCBhbmNlc3RvcnMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBsb2NhdGlvbnMgPSBsb2NhdGlvbnNNYXBbbmFtZV07XG5cbiAgICAgIGlmICghbG9jYXRpb25zKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihgVW5rbm93biBkaXJlY3RpdmUgXCJAJHtuYW1lfVwiLmAsIHtcbiAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhbmRpZGF0ZUxvY2F0aW9uID0gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JBU1RQYXRoKGFuY2VzdG9ycyk7XG5cbiAgICAgIGlmIChjYW5kaWRhdGVMb2NhdGlvbiAmJiAhbG9jYXRpb25zLmluY2x1ZGVzKGNhbmRpZGF0ZUxvY2F0aW9uKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRGlyZWN0aXZlIFwiQCR7bmFtZX1cIiBtYXkgbm90IGJlIHVzZWQgb24gJHtjYW5kaWRhdGVMb2NhdGlvbn0uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JBU1RQYXRoKGFuY2VzdG9ycykge1xuICBjb25zdCBhcHBsaWVkVG8gPSBhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aCAtIDFdO1xuICAna2luZCcgaW4gYXBwbGllZFRvIHx8IGludmFyaWFudChmYWxzZSk7XG5cbiAgc3dpdGNoIChhcHBsaWVkVG8ua2luZCkge1xuICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBnZXREaXJlY3RpdmVMb2NhdGlvbkZvck9wZXJhdGlvbihhcHBsaWVkVG8ub3BlcmF0aW9uKTtcblxuICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRDtcblxuICAgIGNhc2UgS2luZC5GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFEO1xuXG4gICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQ7XG5cbiAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9ERUZJTklUSU9OO1xuXG4gICAgY2FzZSBLaW5kLlZBUklBQkxFX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uVkFSSUFCTEVfREVGSU5JVElPTjtcblxuICAgIGNhc2UgS2luZC5TQ0hFTUFfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuU0NIRU1BX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5TQ0hFTUE7XG5cbiAgICBjYXNlIEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUjtcblxuICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNUO1xuXG4gICAgY2FzZSBLaW5kLkZJRUxEX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTjtcblxuICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uSU5URVJGQUNFO1xuXG4gICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuVU5JT05fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uVU5JT047XG5cbiAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRU5VTTtcblxuICAgIGNhc2UgS2luZC5FTlVNX1ZBTFVFX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRU5VTV9WQUxVRTtcblxuICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfT0JKRUNUO1xuXG4gICAgY2FzZSBLaW5kLklOUFVUX1ZBTFVFX0RFRklOSVRJT046IHtcbiAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aCAtIDNdO1xuICAgICAgJ2tpbmQnIGluIHBhcmVudE5vZGUgfHwgaW52YXJpYW50KGZhbHNlKTtcbiAgICAgIHJldHVybiBwYXJlbnROb2RlLmtpbmQgPT09IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTlxuICAgICAgICA/IERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT05cbiAgICAgICAgOiBEaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OO1xuICAgIH1cbiAgICAvLyBOb3QgcmVhY2hhYmxlLCBhbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQuXG5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGZhbHNlIHx8IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQga2luZDogJyArIGluc3BlY3QoYXBwbGllZFRvLmtpbmQpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREaXJlY3RpdmVMb2NhdGlvbkZvck9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICBjYXNlIE9wZXJhdGlvblR5cGVOb2RlLlFVRVJZOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlFVRVJZO1xuXG4gICAgY2FzZSBPcGVyYXRpb25UeXBlTm9kZS5NVVRBVElPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5NVVRBVElPTjtcblxuICAgIGNhc2UgT3BlcmF0aW9uVHlwZU5vZGUuU1VCU0NSSVBUSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlNVQlNDUklQVElPTjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5cbi8qKlxuICogS25vd24gZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgYC4uLkZyYWdtZW50YCBmcmFnbWVudCBzcHJlYWRzIHJlZmVyXG4gKiB0byBmcmFnbWVudHMgZGVmaW5lZCBpbiB0aGUgc2FtZSBkb2N1bWVudC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtc3ByZWFkLXRhcmdldC1kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkZyYWdtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICBjb25zdCBmcmFnbWVudE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lKTtcblxuICAgICAgaWYgKCFmcmFnbWVudCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoYFVua25vd24gZnJhZ21lbnQgXCIke2ZyYWdtZW50TmFtZX1cIi5gLCB7XG4gICAgICAgICAgICBub2Rlczogbm9kZS5uYW1lLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBkaWRZb3VNZWFuIH0gZnJvbSAnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qcyc7XG5pbXBvcnQgeyBzdWdnZXN0aW9uTGlzdCB9IGZyb20gJy4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHtcbiAgaXNUeXBlRGVmaW5pdGlvbk5vZGUsXG4gIGlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlLFxuICBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlLFxufSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qcyc7XG5pbXBvcnQgeyBpbnRyb3NwZWN0aW9uVHlwZXMgfSBmcm9tICcuLi8uLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzJztcbmltcG9ydCB7IHNwZWNpZmllZFNjYWxhclR5cGVzIH0gZnJvbSAnLi4vLi4vdHlwZS9zY2FsYXJzLm1qcyc7XG5cbi8qKlxuICogS25vd24gdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHJlZmVyZW5jZWQgdHlwZXMgKHNwZWNpZmljYWxseVxuICogdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGZyYWdtZW50IGNvbmRpdGlvbnMpIGFyZSBkZWZpbmVkIGJ5IHRoZSB0eXBlIHNjaGVtYS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtU3ByZWFkLVR5cGUtRXhpc3RlbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93blR5cGVOYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBleGlzdGluZ1R5cGVzTWFwID0gc2NoZW1hID8gc2NoZW1hLmdldFR5cGVNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IGRlZmluZWRUeXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zKSB7XG4gICAgaWYgKGlzVHlwZURlZmluaXRpb25Ob2RlKGRlZikpIHtcbiAgICAgIGRlZmluZWRUeXBlc1tkZWYubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHR5cGVOYW1lcyA9IFtcbiAgICAuLi5PYmplY3Qua2V5cyhleGlzdGluZ1R5cGVzTWFwKSxcbiAgICAuLi5PYmplY3Qua2V5cyhkZWZpbmVkVHlwZXMpLFxuICBdO1xuICByZXR1cm4ge1xuICAgIE5hbWVkVHlwZShub2RlLCBfMSwgcGFyZW50LCBfMiwgYW5jZXN0b3JzKSB7XG4gICAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKCFleGlzdGluZ1R5cGVzTWFwW3R5cGVOYW1lXSAmJiAhZGVmaW5lZFR5cGVzW3R5cGVOYW1lXSkge1xuICAgICAgICB2YXIgX2FuY2VzdG9ycyQ7XG5cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbk5vZGUgPVxuICAgICAgICAgIChfYW5jZXN0b3JzJCA9IGFuY2VzdG9yc1syXSkgIT09IG51bGwgJiYgX2FuY2VzdG9ycyQgIT09IHZvaWQgMFxuICAgICAgICAgICAgPyBfYW5jZXN0b3JzJFxuICAgICAgICAgICAgOiBwYXJlbnQ7XG4gICAgICAgIGNvbnN0IGlzU0RMID0gZGVmaW5pdGlvbk5vZGUgIT0gbnVsbCAmJiBpc1NETE5vZGUoZGVmaW5pdGlvbk5vZGUpO1xuXG4gICAgICAgIGlmIChpc1NETCAmJiBzdGFuZGFyZFR5cGVOYW1lcy5pbmNsdWRlcyh0eXBlTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWdnZXN0ZWRUeXBlcyA9IHN1Z2dlc3Rpb25MaXN0KFxuICAgICAgICAgIHR5cGVOYW1lLFxuICAgICAgICAgIGlzU0RMID8gc3RhbmRhcmRUeXBlTmFtZXMuY29uY2F0KHR5cGVOYW1lcykgOiB0eXBlTmFtZXMsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBVbmtub3duIHR5cGUgXCIke3R5cGVOYW1lfVwiLmAgKyBkaWRZb3VNZWFuKHN1Z2dlc3RlZFR5cGVzKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbmNvbnN0IHN0YW5kYXJkVHlwZU5hbWVzID0gWy4uLnNwZWNpZmllZFNjYWxhclR5cGVzLCAuLi5pbnRyb3NwZWN0aW9uVHlwZXNdLm1hcChcbiAgKHR5cGUpID0+IHR5cGUubmFtZSxcbik7XG5cbmZ1bmN0aW9uIGlzU0RMTm9kZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgICdraW5kJyBpbiB2YWx1ZSAmJlxuICAgIChpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZSh2YWx1ZSkgfHwgaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZSh2YWx1ZSkpXG4gICk7XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuXG4vKipcbiAqIExvbmUgYW5vbnltb3VzIG9wZXJhdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHdoZW4gaXQgY29udGFpbnMgYW4gYW5vbnltb3VzIG9wZXJhdGlvblxuICogKHRoZSBxdWVyeSBzaG9ydC1oYW5kKSB0aGF0IGl0IGNvbnRhaW5zIG9ubHkgdGhhdCBvbmUgb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUxvbmUtQW5vbnltb3VzLU9wZXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUoY29udGV4dCkge1xuICBsZXQgb3BlcmF0aW9uQ291bnQgPSAwO1xuICByZXR1cm4ge1xuICAgIERvY3VtZW50KG5vZGUpIHtcbiAgICAgIG9wZXJhdGlvbkNvdW50ID0gbm9kZS5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgICAgIChkZWZpbml0aW9uKSA9PiBkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICApLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUubmFtZSAmJiBvcGVyYXRpb25Db3VudCA+IDEpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ1RoaXMgYW5vbnltb3VzIG9wZXJhdGlvbiBtdXN0IGJlIHRoZSBvbmx5IGRlZmluZWQgb3BlcmF0aW9uLicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcblxuLyoqXG4gKiBMb25lIFNjaGVtYSBkZWZpbml0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgY29udGFpbnMgb25seSBvbmUgc2NoZW1hIGRlZmluaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUoY29udGV4dCkge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9vbGRTY2hlbWEkYXN0Tm9kZTtcblxuICBjb25zdCBvbGRTY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBhbHJlYWR5RGVmaW5lZCA9XG4gICAgKF9yZWYgPVxuICAgICAgKF9yZWYyID1cbiAgICAgICAgKF9vbGRTY2hlbWEkYXN0Tm9kZSA9XG4gICAgICAgICAgb2xkU2NoZW1hID09PSBudWxsIHx8IG9sZFNjaGVtYSA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBvbGRTY2hlbWEuYXN0Tm9kZSkgIT09IG51bGwgJiYgX29sZFNjaGVtYSRhc3ROb2RlICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9vbGRTY2hlbWEkYXN0Tm9kZVxuICAgICAgICAgIDogb2xkU2NoZW1hID09PSBudWxsIHx8IG9sZFNjaGVtYSA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IG9sZFNjaGVtYS5nZXRRdWVyeVR5cGUoKSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMFxuICAgICAgICA/IF9yZWYyXG4gICAgICAgIDogb2xkU2NoZW1hID09PSBudWxsIHx8IG9sZFNjaGVtYSA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogb2xkU2NoZW1hLmdldE11dGF0aW9uVHlwZSgpKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDBcbiAgICAgID8gX3JlZlxuICAgICAgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgID8gdm9pZCAwXG4gICAgICA6IG9sZFNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG4gIGxldCBzY2hlbWFEZWZpbml0aW9uc0NvdW50ID0gMDtcbiAgcmV0dXJuIHtcbiAgICBTY2hlbWFEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChhbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAnQ2Fubm90IGRlZmluZSBhIG5ldyBzY2hlbWEgd2l0aGluIGEgc2NoZW1hIGV4dGVuc2lvbi4nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NoZW1hRGVmaW5pdGlvbnNDb3VudCA+IDApIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKCdNdXN0IHByb3ZpZGUgb25seSBvbmUgc2NoZW1hIGRlZmluaXRpb24uJywge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgICsrc2NoZW1hRGVmaW5pdGlvbnNDb3VudDtcbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5cbi8qKlxuICogTm8gZnJhZ21lbnQgY3ljbGVzXG4gKlxuICogVGhlIGdyYXBoIG9mIGZyYWdtZW50IHNwcmVhZHMgbXVzdCBub3QgZm9ybSBhbnkgY3ljbGVzIGluY2x1ZGluZyBzcHJlYWRpbmcgaXRzZWxmLlxuICogT3RoZXJ3aXNlIGFuIG9wZXJhdGlvbiBjb3VsZCBpbmZpbml0ZWx5IHNwcmVhZCBvciBpbmZpbml0ZWx5IGV4ZWN1dGUgb24gY3ljbGVzIGluIHRoZSB1bmRlcmx5aW5nIGRhdGEuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50LXNwcmVhZHMtbXVzdC1ub3QtZm9ybS1jeWNsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vRnJhZ21lbnRDeWNsZXNSdWxlKGNvbnRleHQpIHtcbiAgLy8gVHJhY2tzIGFscmVhZHkgdmlzaXRlZCBmcmFnbWVudHMgdG8gbWFpbnRhaW4gTyhOKSBhbmQgdG8gZW5zdXJlIHRoYXQgY3ljbGVzXG4gIC8vIGFyZSBub3QgcmVkdW5kYW50bHkgcmVwb3J0ZWQuXG4gIGNvbnN0IHZpc2l0ZWRGcmFncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIEFycmF5IG9mIEFTVCBub2RlcyB1c2VkIHRvIHByb2R1Y2UgbWVhbmluZ2Z1bCBlcnJvcnNcblxuICBjb25zdCBzcHJlYWRQYXRoID0gW107IC8vIFBvc2l0aW9uIGluIHRoZSBzcHJlYWQgcGF0aFxuXG4gIGNvbnN0IHNwcmVhZFBhdGhJbmRleEJ5TmFtZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogKCkgPT4gZmFsc2UsXG5cbiAgICBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTsgLy8gVGhpcyBkb2VzIGEgc3RyYWlnaHQtZm9yd2FyZCBERlMgdG8gZmluZCBjeWNsZXMuXG4gIC8vIEl0IGRvZXMgbm90IHRlcm1pbmF0ZSB3aGVuIGEgY3ljbGUgd2FzIGZvdW5kIGJ1dCBjb250aW51ZXMgdG8gZXhwbG9yZVxuICAvLyB0aGUgZ3JhcGggdG8gZmluZCBhbGwgcG9zc2libGUgY3ljbGVzLlxuXG4gIGZ1bmN0aW9uIGRldGVjdEN5Y2xlUmVjdXJzaXZlKGZyYWdtZW50KSB7XG4gICAgaWYgKHZpc2l0ZWRGcmFnc1tmcmFnbWVudC5uYW1lLnZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYWdtZW50TmFtZSA9IGZyYWdtZW50Lm5hbWUudmFsdWU7XG4gICAgdmlzaXRlZEZyYWdzW2ZyYWdtZW50TmFtZV0gPSB0cnVlO1xuICAgIGNvbnN0IHNwcmVhZE5vZGVzID0gY29udGV4dC5nZXRGcmFnbWVudFNwcmVhZHMoZnJhZ21lbnQuc2VsZWN0aW9uU2V0KTtcblxuICAgIGlmIChzcHJlYWROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzcHJlYWRQYXRoSW5kZXhCeU5hbWVbZnJhZ21lbnROYW1lXSA9IHNwcmVhZFBhdGgubGVuZ3RoO1xuXG4gICAgZm9yIChjb25zdCBzcHJlYWROb2RlIG9mIHNwcmVhZE5vZGVzKSB7XG4gICAgICBjb25zdCBzcHJlYWROYW1lID0gc3ByZWFkTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgY29uc3QgY3ljbGVJbmRleCA9IHNwcmVhZFBhdGhJbmRleEJ5TmFtZVtzcHJlYWROYW1lXTtcbiAgICAgIHNwcmVhZFBhdGgucHVzaChzcHJlYWROb2RlKTtcblxuICAgICAgaWYgKGN5Y2xlSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBzcHJlYWRGcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoc3ByZWFkTmFtZSk7XG5cbiAgICAgICAgaWYgKHNwcmVhZEZyYWdtZW50KSB7XG4gICAgICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoc3ByZWFkRnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjeWNsZVBhdGggPSBzcHJlYWRQYXRoLnNsaWNlKGN5Y2xlSW5kZXgpO1xuICAgICAgICBjb25zdCB2aWFQYXRoID0gY3ljbGVQYXRoXG4gICAgICAgICAgLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIC5tYXAoKHMpID0+ICdcIicgKyBzLm5hbWUudmFsdWUgKyAnXCInKVxuICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgQ2Fubm90IHNwcmVhZCBmcmFnbWVudCBcIiR7c3ByZWFkTmFtZX1cIiB3aXRoaW4gaXRzZWxmYCArXG4gICAgICAgICAgICAgICh2aWFQYXRoICE9PSAnJyA/IGAgdmlhICR7dmlhUGF0aH0uYCA6ICcuJyksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBjeWNsZVBhdGgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHNwcmVhZFBhdGgucG9wKCk7XG4gICAgfVxuXG4gICAgc3ByZWFkUGF0aEluZGV4QnlOYW1lW2ZyYWdtZW50TmFtZV0gPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIE5vIHVuZGVmaW5lZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBlbmNvdW50ZXJlZCwgYm90aCBkaXJlY3RseVxuICogYW5kIHZpYSBmcmFnbWVudCBzcHJlYWRzLCBhcmUgZGVmaW5lZCBieSB0aGF0IG9wZXJhdGlvbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQWxsLVZhcmlhYmxlLVVzZXMtRGVmaW5lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlKGNvbnRleHQpIHtcbiAgbGV0IHZhcmlhYmxlTmFtZURlZmluZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyKCkge1xuICAgICAgICB2YXJpYWJsZU5hbWVEZWZpbmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIGxlYXZlKG9wZXJhdGlvbikge1xuICAgICAgICBjb25zdCB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yIChjb25zdCB7IG5vZGUgfSBvZiB1c2FnZXMpIHtcbiAgICAgICAgICBjb25zdCB2YXJOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhcmlhYmxlTmFtZURlZmluZWRbdmFyTmFtZV0gIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgID8gYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBpcyBub3QgZGVmaW5lZCBieSBvcGVyYXRpb24gXCIke29wZXJhdGlvbi5uYW1lLnZhbHVlfVwiLmBcbiAgICAgICAgICAgICAgICAgIDogYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBpcyBub3QgZGVmaW5lZC5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiBbbm9kZSwgb3BlcmF0aW9uXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXJpYWJsZU5hbWVEZWZpbmVkW25vZGUudmFyaWFibGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcblxuLyoqXG4gKiBObyB1bnVzZWQgZnJhZ21lbnRzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGZyYWdtZW50IGRlZmluaXRpb25zIGFyZSBzcHJlYWRcbiAqIHdpdGhpbiBvcGVyYXRpb25zLCBvciBzcHJlYWQgd2l0aGluIG90aGVyIGZyYWdtZW50cyBzcHJlYWQgd2l0aGluIG9wZXJhdGlvbnMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50cy1NdXN0LUJlLVVzZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vVW51c2VkRnJhZ21lbnRzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IG9wZXJhdGlvbkRlZnMgPSBbXTtcbiAgY29uc3QgZnJhZ21lbnREZWZzID0gW107XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBvcGVyYXRpb25EZWZzLnB1c2gobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIEZyYWdtZW50RGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBmcmFnbWVudERlZnMucHVzaChub2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgRG9jdW1lbnQ6IHtcbiAgICAgIGxlYXZlKCkge1xuICAgICAgICBjb25zdCBmcmFnbWVudE5hbWVVc2VkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiBvcGVyYXRpb25EZWZzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBmcmFnbWVudCBvZiBjb250ZXh0LmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhcbiAgICAgICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgICApKSB7XG4gICAgICAgICAgICBmcmFnbWVudE5hbWVVc2VkW2ZyYWdtZW50Lm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50RGVmIG9mIGZyYWdtZW50RGVmcykge1xuICAgICAgICAgIGNvbnN0IGZyYWdOYW1lID0gZnJhZ21lbnREZWYubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmIChmcmFnbWVudE5hbWVVc2VkW2ZyYWdOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihgRnJhZ21lbnQgXCIke2ZyYWdOYW1lfVwiIGlzIG5ldmVyIHVzZWQuYCwge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBmcmFnbWVudERlZixcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5cbi8qKlxuICogTm8gdW51c2VkIHZhcmlhYmxlc1xuICpcbiAqIEEgR3JhcGhRTCBvcGVyYXRpb24gaXMgb25seSB2YWxpZCBpZiBhbGwgdmFyaWFibGVzIGRlZmluZWQgYnkgYW4gb3BlcmF0aW9uXG4gKiBhcmUgdXNlZCwgZWl0aGVyIGRpcmVjdGx5IG9yIHdpdGhpbiBhIHNwcmVhZCBmcmFnbWVudC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQWxsLVZhcmlhYmxlcy1Vc2VkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb1VudXNlZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICBsZXQgdmFyaWFibGVEZWZzID0gW107XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlRGVmcyA9IFtdO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yIChjb25zdCB7IG5vZGUgfSBvZiB1c2FnZXMpIHtcbiAgICAgICAgICB2YXJpYWJsZU5hbWVVc2VkW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZURlZiBvZiB2YXJpYWJsZURlZnMpIHtcbiAgICAgICAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSB2YXJpYWJsZURlZi52YXJpYWJsZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhcmlhYmxlTmFtZVVzZWRbdmFyaWFibGVOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24ubmFtZVxuICAgICAgICAgICAgICAgICAgPyBgVmFyaWFibGUgXCIkJHt2YXJpYWJsZU5hbWV9XCIgaXMgbmV2ZXIgdXNlZCBpbiBvcGVyYXRpb24gXCIke29wZXJhdGlvbi5uYW1lLnZhbHVlfVwiLmBcbiAgICAgICAgICAgICAgICAgIDogYFZhcmlhYmxlIFwiJCR7dmFyaWFibGVOYW1lfVwiIGlzIG5ldmVyIHVzZWQuYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogdmFyaWFibGVEZWYsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBWYXJpYWJsZURlZmluaXRpb24oZGVmKSB7XG4gICAgICB2YXJpYWJsZURlZnMucHVzaChkZWYpO1xuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQge1xuICBnZXROYW1lZFR5cGUsXG4gIGlzSW50ZXJmYWNlVHlwZSxcbiAgaXNMZWFmVHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNOb25OdWxsVHlwZSxcbiAgaXNPYmplY3RUeXBlLFxufSBmcm9tICcuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7IHNvcnRWYWx1ZU5vZGUgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvc29ydFZhbHVlTm9kZS5tanMnO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzJztcblxuZnVuY3Rpb24gcmVhc29uTWVzc2FnZShyZWFzb24pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVhc29uKSkge1xuICAgIHJldHVybiByZWFzb25cbiAgICAgIC5tYXAoXG4gICAgICAgIChbcmVzcG9uc2VOYW1lLCBzdWJSZWFzb25dKSA9PlxuICAgICAgICAgIGBzdWJmaWVsZHMgXCIke3Jlc3BvbnNlTmFtZX1cIiBjb25mbGljdCBiZWNhdXNlIGAgK1xuICAgICAgICAgIHJlYXNvbk1lc3NhZ2Uoc3ViUmVhc29uKSxcbiAgICAgIClcbiAgICAgIC5qb2luKCcgYW5kICcpO1xuICB9XG5cbiAgcmV0dXJuIHJlYXNvbjtcbn1cbi8qKlxuICogT3ZlcmxhcHBpbmcgZmllbGRzIGNhbiBiZSBtZXJnZWRcbiAqXG4gKiBBIHNlbGVjdGlvbiBzZXQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIChpbmNsdWRpbmcgc3ByZWFkaW5nIGFueVxuICogZnJhZ21lbnRzKSBlaXRoZXIgY29ycmVzcG9uZCB0byBkaXN0aW5jdCByZXNwb25zZSBuYW1lcyBvciBjYW4gYmUgbWVyZ2VkXG4gKiB3aXRob3V0IGFtYmlndWl0eS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRmllbGQtU2VsZWN0aW9uLU1lcmdpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUoY29udGV4dCkge1xuICAvLyBBIG1lbW9pemF0aW9uIGZvciB3aGVuIHR3byBmcmFnbWVudHMgYXJlIGNvbXBhcmVkIFwiYmV0d2VlblwiIGVhY2ggb3RoZXIgZm9yXG4gIC8vIGNvbmZsaWN0cy4gVHdvIGZyYWdtZW50cyBtYXkgYmUgY29tcGFyZWQgbWFueSB0aW1lcywgc28gbWVtb2l6aW5nIHRoaXMgY2FuXG4gIC8vIGRyYW1hdGljYWxseSBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIHZhbGlkYXRvci5cbiAgY29uc3QgY29tcGFyZWRGcmFnbWVudFBhaXJzID0gbmV3IFBhaXJTZXQoKTsgLy8gQSBjYWNoZSBmb3IgdGhlIFwiZmllbGQgbWFwXCIgYW5kIGxpc3Qgb2YgZnJhZ21lbnQgbmFtZXMgZm91bmQgaW4gYW55IGdpdmVuXG4gIC8vIHNlbGVjdGlvbiBzZXQuIFNlbGVjdGlvbiBzZXRzIG1heSBiZSBhc2tlZCBmb3IgdGhpcyBpbmZvcm1hdGlvbiBtdWx0aXBsZVxuICAvLyB0aW1lcywgc28gdGhpcyBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyB2YWxpZGF0b3IuXG5cbiAgY29uc3QgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyA9IG5ldyBNYXAoKTtcbiAgcmV0dXJuIHtcbiAgICBTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0KSB7XG4gICAgICBjb25zdCBjb25mbGljdHMgPSBmaW5kQ29uZmxpY3RzV2l0aGluU2VsZWN0aW9uU2V0KFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICAgIGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpLFxuICAgICAgICBzZWxlY3Rpb25TZXQsXG4gICAgICApO1xuXG4gICAgICBmb3IgKGNvbnN0IFtbcmVzcG9uc2VOYW1lLCByZWFzb25dLCBmaWVsZHMxLCBmaWVsZHMyXSBvZiBjb25mbGljdHMpIHtcbiAgICAgICAgY29uc3QgcmVhc29uTXNnID0gcmVhc29uTWVzc2FnZShyZWFzb24pO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRmllbGRzIFwiJHtyZXNwb25zZU5hbWV9XCIgY29uZmxpY3QgYmVjYXVzZSAke3JlYXNvbk1zZ30uIFVzZSBkaWZmZXJlbnQgYWxpYXNlcyBvbiB0aGUgZmllbGRzIHRvIGZldGNoIGJvdGggaWYgdGhpcyB3YXMgaW50ZW50aW9uYWwuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IGZpZWxkczEuY29uY2F0KGZpZWxkczIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQWxnb3JpdGhtOlxuICpcbiAqIENvbmZsaWN0cyBvY2N1ciB3aGVuIHR3byBmaWVsZHMgZXhpc3QgaW4gYSBxdWVyeSB3aGljaCB3aWxsIHByb2R1Y2UgdGhlIHNhbWVcbiAqIHJlc3BvbnNlIG5hbWUsIGJ1dCByZXByZXNlbnQgZGlmZmVyaW5nIHZhbHVlcywgdGh1cyBjcmVhdGluZyBhIGNvbmZsaWN0LlxuICogVGhlIGFsZ29yaXRobSBiZWxvdyBmaW5kcyBhbGwgY29uZmxpY3RzIHZpYSBtYWtpbmcgYSBzZXJpZXMgb2YgY29tcGFyaXNvbnNcbiAqIGJldHdlZW4gZmllbGRzLiBJbiBvcmRlciB0byBjb21wYXJlIGFzIGZldyBmaWVsZHMgYXMgcG9zc2libGUsIHRoaXMgbWFrZXNcbiAqIGEgc2VyaWVzIG9mIGNvbXBhcmlzb25zIFwid2l0aGluXCIgc2V0cyBvZiBmaWVsZHMgYW5kIFwiYmV0d2VlblwiIHNldHMgb2YgZmllbGRzLlxuICpcbiAqIEdpdmVuIGFueSBzZWxlY3Rpb24gc2V0LCBhIGNvbGxlY3Rpb24gcHJvZHVjZXMgYm90aCBhIHNldCBvZiBmaWVsZHMgYnlcbiAqIGFsc28gaW5jbHVkaW5nIGFsbCBpbmxpbmUgZnJhZ21lbnRzLCBhcyB3ZWxsIGFzIGEgbGlzdCBvZiBmcmFnbWVudHNcbiAqIHJlZmVyZW5jZWQgYnkgZnJhZ21lbnQgc3ByZWFkcy5cbiAqXG4gKiBBKSBFYWNoIHNlbGVjdGlvbiBzZXQgcmVwcmVzZW50ZWQgaW4gdGhlIGRvY3VtZW50IGZpcnN0IGNvbXBhcmVzIFwid2l0aGluXCIgaXRzXG4gKiBjb2xsZWN0ZWQgc2V0IG9mIGZpZWxkcywgZmluZGluZyBhbnkgY29uZmxpY3RzIGJldHdlZW4gZXZlcnkgcGFpciBvZlxuICogb3ZlcmxhcHBpbmcgZmllbGRzLlxuICogTm90ZTogVGhpcyBpcyB0aGUgKm9ubHkgdGltZSogdGhhdCBhIHRoZSBmaWVsZHMgXCJ3aXRoaW5cIiBhIHNldCBhcmUgY29tcGFyZWRcbiAqIHRvIGVhY2ggb3RoZXIuIEFmdGVyIHRoaXMgb25seSBmaWVsZHMgXCJiZXR3ZWVuXCIgc2V0cyBhcmUgY29tcGFyZWQuXG4gKlxuICogQikgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gYSBzZWxlY3Rpb24gc2V0LCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEMpIEFsc28sIGlmIG11bHRpcGxlIGZyYWdtZW50cyBhcmUgcmVmZXJlbmNlZCwgdGhlbiBjb21wYXJpc29uc1xuICogYXJlIG1hZGUgXCJiZXR3ZWVuXCIgZWFjaCByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEQpIFdoZW4gY29tcGFyaW5nIFwiYmV0d2VlblwiIGEgc2V0IG9mIGZpZWxkcyBhbmQgYSByZWZlcmVuY2VkIGZyYWdtZW50LCBmaXJzdFxuICogYSBjb21wYXJpc29uIGlzIG1hZGUgYmV0d2VlbiBlYWNoIGZpZWxkIGluIHRoZSBvcmlnaW5hbCBzZXQgb2YgZmllbGRzIGFuZFxuICogZWFjaCBmaWVsZCBpbiB0aGUgdGhlIHJlZmVyZW5jZWQgc2V0IG9mIGZpZWxkcy5cbiAqXG4gKiBFKSBBbHNvLCBpZiBhbnkgZnJhZ21lbnQgaXMgcmVmZXJlbmNlZCBpbiB0aGUgcmVmZXJlbmNlZCBzZWxlY3Rpb24gc2V0LFxuICogdGhlbiBhIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50IChyZWN1cnNpdmVseSByZWZlcnJpbmcgdG8gc3RlcCBEKS5cbiAqXG4gKiBGKSBXaGVuIGNvbXBhcmluZyBcImJldHdlZW5cIiB0d28gZnJhZ21lbnRzLCBmaXJzdCBhIGNvbXBhcmlzb24gaXMgbWFkZSBiZXR3ZWVuXG4gKiBlYWNoIGZpZWxkIGluIHRoZSBmaXJzdCByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMgYW5kIGVhY2ggZmllbGQgaW4gdGhlIHRoZVxuICogc2Vjb25kIHJlZmVyZW5jZWQgc2V0IG9mIGZpZWxkcy5cbiAqXG4gKiBHKSBBbHNvLCBhbnkgZnJhZ21lbnRzIHJlZmVyZW5jZWQgYnkgdGhlIGZpcnN0IG11c3QgYmUgY29tcGFyZWQgdG8gdGhlXG4gKiBzZWNvbmQsIGFuZCBhbnkgZnJhZ21lbnRzIHJlZmVyZW5jZWQgYnkgdGhlIHNlY29uZCBtdXN0IGJlIGNvbXBhcmVkIHRvIHRoZVxuICogZmlyc3QgKHJlY3Vyc2l2ZWx5IHJlZmVycmluZyB0byBzdGVwIEYpLlxuICpcbiAqIEgpIFdoZW4gY29tcGFyaW5nIHR3byBmaWVsZHMsIGlmIGJvdGggaGF2ZSBzZWxlY3Rpb24gc2V0cywgdGhlbiBhIGNvbXBhcmlzb25cbiAqIGlzIG1hZGUgXCJiZXR3ZWVuXCIgYm90aCBzZWxlY3Rpb24gc2V0cywgZmlyc3QgY29tcGFyaW5nIHRoZSBzZXQgb2YgZmllbGRzIGluXG4gKiB0aGUgZmlyc3Qgc2VsZWN0aW9uIHNldCB3aXRoIHRoZSBzZXQgb2YgZmllbGRzIGluIHRoZSBzZWNvbmQuXG4gKlxuICogSSkgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gZWl0aGVyIHNlbGVjdGlvbiBzZXQsIHRoZW4gYVxuICogY29tcGFyaXNvbiBpcyBtYWRlIFwiYmV0d2VlblwiIHRoZSBvdGhlciBzZXQgb2YgZmllbGRzIGFuZCB0aGVcbiAqIHJlZmVyZW5jZWQgZnJhZ21lbnQuXG4gKlxuICogSikgQWxzbywgaWYgdHdvIGZyYWdtZW50cyBhcmUgcmVmZXJlbmNlZCBpbiBib3RoIHNlbGVjdGlvbiBzZXRzLCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgdHdvIGZyYWdtZW50cy5cbiAqXG4gKi9cbi8vIEZpbmQgYWxsIGNvbmZsaWN0cyBmb3VuZCBcIndpdGhpblwiIGEgc2VsZWN0aW9uIHNldCwgaW5jbHVkaW5nIHRob3NlIGZvdW5kXG4vLyB2aWEgc3ByZWFkaW5nIGluIGZyYWdtZW50cy4gQ2FsbGVkIHdoZW4gdmlzaXRpbmcgZWFjaCBTZWxlY3Rpb25TZXQgaW4gdGhlXG4vLyBHcmFwaFFMIERvY3VtZW50LlxuZnVuY3Rpb24gZmluZENvbmZsaWN0c1dpdGhpblNlbGVjdGlvblNldChcbiAgY29udGV4dCxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBwYXJlbnRUeXBlLFxuICBzZWxlY3Rpb25TZXQsXG4pIHtcbiAgY29uc3QgY29uZmxpY3RzID0gW107XG4gIGNvbnN0IFtmaWVsZE1hcCwgZnJhZ21lbnROYW1lc10gPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgIGNvbnRleHQsXG4gICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICBwYXJlbnRUeXBlLFxuICAgIHNlbGVjdGlvblNldCxcbiAgKTsgLy8gKEEpIEZpbmQgZmluZCBhbGwgY29uZmxpY3RzIFwid2l0aGluXCIgdGhlIGZpZWxkcyBvZiB0aGlzIHNlbGVjdGlvbiBzZXQuXG4gIC8vIE5vdGU6IHRoaXMgaXMgdGhlICpvbmx5IHBsYWNlKiBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgaXMgY2FsbGVkLlxuXG4gIGNvbGxlY3RDb25mbGljdHNXaXRoaW4oXG4gICAgY29udGV4dCxcbiAgICBjb25mbGljdHMsXG4gICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgZmllbGRNYXAsXG4gICk7XG5cbiAgaWYgKGZyYWdtZW50TmFtZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgLy8gKEIpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGVzZSBmaWVsZHMgYW5kIHRob3NlIHJlcHJlc2VudGVkIGJ5XG4gICAgLy8gZWFjaCBzcHJlYWQgZnJhZ21lbnQgbmFtZSBmb3VuZC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYWdtZW50TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbmZsaWN0cyxcbiAgICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZmllbGRNYXAsXG4gICAgICAgIGZyYWdtZW50TmFtZXNbaV0sXG4gICAgICApOyAvLyAoQykgVGhlbiBjb21wYXJlIHRoaXMgZnJhZ21lbnQgd2l0aCBhbGwgb3RoZXIgZnJhZ21lbnRzIGZvdW5kIGluIHRoaXNcbiAgICAgIC8vIHNlbGVjdGlvbiBzZXQgdG8gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiBmcmFnbWVudHMgc3ByZWFkIHRvZ2V0aGVyLlxuICAgICAgLy8gVGhpcyBjb21wYXJlcyBlYWNoIGl0ZW0gaW4gdGhlIGxpc3Qgb2YgZnJhZ21lbnQgbmFtZXMgdG8gZXZlcnkgb3RoZXJcbiAgICAgIC8vIGl0ZW0gaW4gdGhhdCBzYW1lIGxpc3QgKGV4Y2VwdCBmb3IgaXRzZWxmKS5cblxuICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgZnJhZ21lbnROYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGNvbmZsaWN0cyxcbiAgICAgICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBmcmFnbWVudE5hbWVzW2ldLFxuICAgICAgICAgIGZyYWdtZW50TmFtZXNbal0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZsaWN0cztcbn0gLy8gQ29sbGVjdCBhbGwgY29uZmxpY3RzIGZvdW5kIGJldHdlZW4gYSBzZXQgb2YgZmllbGRzIGFuZCBhIGZyYWdtZW50IHJlZmVyZW5jZVxuLy8gaW5jbHVkaW5nIHZpYSBzcHJlYWRpbmcgaW4gYW55IG5lc3RlZCBmcmFnbWVudHMuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoXG4gIGNvbnRleHQsXG4gIGNvbmZsaWN0cyxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgZmllbGRNYXAsXG4gIGZyYWdtZW50TmFtZSxcbikge1xuICBjb25zdCBmcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lKTtcblxuICBpZiAoIWZyYWdtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgW2ZpZWxkTWFwMiwgcmVmZXJlbmNlZEZyYWdtZW50TmFtZXNdID1cbiAgICBnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgZnJhZ21lbnQsXG4gICAgKTsgLy8gRG8gbm90IGNvbXBhcmUgYSBmcmFnbWVudCdzIGZpZWxkTWFwIHRvIGl0c2VsZi5cblxuICBpZiAoZmllbGRNYXAgPT09IGZpZWxkTWFwMikge1xuICAgIHJldHVybjtcbiAgfSAvLyAoRCkgRmlyc3QgY29sbGVjdCBhbnkgY29uZmxpY3RzIGJldHdlZW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gb2YgZmllbGRzXG4gIC8vIGFuZCB0aGUgY29sbGVjdGlvbiBvZiBmaWVsZHMgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuIGZyYWdtZW50LlxuXG4gIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuKFxuICAgIGNvbnRleHQsXG4gICAgY29uZmxpY3RzLFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgIGZpZWxkTWFwLFxuICAgIGZpZWxkTWFwMixcbiAgKTsgLy8gKEUpIFRoZW4gY29sbGVjdCBhbnkgY29uZmxpY3RzIGJldHdlZW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gb2YgZmllbGRzXG4gIC8vIGFuZCBhbnkgZnJhZ21lbnQgbmFtZXMgZm91bmQgaW4gdGhlIGdpdmVuIGZyYWdtZW50LlxuXG4gIGZvciAoY29uc3QgcmVmZXJlbmNlZEZyYWdtZW50TmFtZSBvZiByZWZlcmVuY2VkRnJhZ21lbnROYW1lcykge1xuICAgIC8vIE1lbW9pemUgc28gdHdvIGZyYWdtZW50cyBhcmUgbm90IGNvbXBhcmVkIGZvciBjb25mbGljdHMgbW9yZSB0aGFuIG9uY2UuXG4gICAgaWYgKFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLmhhcyhcbiAgICAgICAgcmVmZXJlbmNlZEZyYWdtZW50TmFtZSxcbiAgICAgICAgZnJhZ21lbnROYW1lLFxuICAgICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycy5hZGQoXG4gICAgICByZWZlcmVuY2VkRnJhZ21lbnROYW1lLFxuICAgICAgZnJhZ21lbnROYW1lLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgKTtcbiAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbmZsaWN0cyxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgIGZpZWxkTWFwLFxuICAgICAgcmVmZXJlbmNlZEZyYWdtZW50TmFtZSxcbiAgICApO1xuICB9XG59IC8vIENvbGxlY3QgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIHR3byBmcmFnbWVudHMsIGluY2x1ZGluZyB2aWEgc3ByZWFkaW5nIGluXG4vLyBhbnkgbmVzdGVkIGZyYWdtZW50cy5cblxuZnVuY3Rpb24gY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoXG4gIGNvbnRleHQsXG4gIGNvbmZsaWN0cyxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgZnJhZ21lbnROYW1lMSxcbiAgZnJhZ21lbnROYW1lMixcbikge1xuICAvLyBObyBuZWVkIHRvIGNvbXBhcmUgYSBmcmFnbWVudCB0byBpdHNlbGYuXG4gIGlmIChmcmFnbWVudE5hbWUxID09PSBmcmFnbWVudE5hbWUyKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIE1lbW9pemUgc28gdHdvIGZyYWdtZW50cyBhcmUgbm90IGNvbXBhcmVkIGZvciBjb25mbGljdHMgbW9yZSB0aGFuIG9uY2UuXG5cbiAgaWYgKFxuICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycy5oYXMoXG4gICAgICBmcmFnbWVudE5hbWUxLFxuICAgICAgZnJhZ21lbnROYW1lMixcbiAgICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLmFkZChmcmFnbWVudE5hbWUxLCBmcmFnbWVudE5hbWUyLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSk7XG4gIGNvbnN0IGZyYWdtZW50MSA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lMSk7XG4gIGNvbnN0IGZyYWdtZW50MiA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lMik7XG5cbiAgaWYgKCFmcmFnbWVudDEgfHwgIWZyYWdtZW50Mikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IFtmaWVsZE1hcDEsIHJlZmVyZW5jZWRGcmFnbWVudE5hbWVzMV0gPVxuICAgIGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBmcmFnbWVudDEsXG4gICAgKTtcbiAgY29uc3QgW2ZpZWxkTWFwMiwgcmVmZXJlbmNlZEZyYWdtZW50TmFtZXMyXSA9XG4gICAgZ2V0UmVmZXJlbmNlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoXG4gICAgICBjb250ZXh0LFxuICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgIGZyYWdtZW50MixcbiAgICApOyAvLyAoRikgRmlyc3QsIGNvbGxlY3QgYWxsIGNvbmZsaWN0cyBiZXR3ZWVuIHRoZXNlIHR3byBjb2xsZWN0aW9ucyBvZiBmaWVsZHNcbiAgLy8gKG5vdCBpbmNsdWRpbmcgYW55IG5lc3RlZCBmcmFnbWVudHMpLlxuXG4gIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuKFxuICAgIGNvbnRleHQsXG4gICAgY29uZmxpY3RzLFxuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgIGZpZWxkTWFwMSxcbiAgICBmaWVsZE1hcDIsXG4gICk7IC8vIChHKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIGZpcnN0IGZyYWdtZW50IGFuZCBhbnkgbmVzdGVkXG4gIC8vIGZyYWdtZW50cyBzcHJlYWQgaW4gdGhlIHNlY29uZCBmcmFnbWVudC5cblxuICBmb3IgKGNvbnN0IHJlZmVyZW5jZWRGcmFnbWVudE5hbWUyIG9mIHJlZmVyZW5jZWRGcmFnbWVudE5hbWVzMikge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbmZsaWN0cyxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgIGZyYWdtZW50TmFtZTEsXG4gICAgICByZWZlcmVuY2VkRnJhZ21lbnROYW1lMixcbiAgICApO1xuICB9IC8vIChHKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIHNlY29uZCBmcmFnbWVudCBhbmQgYW55IG5lc3RlZFxuICAvLyBmcmFnbWVudHMgc3ByZWFkIGluIHRoZSBmaXJzdCBmcmFnbWVudC5cblxuICBmb3IgKGNvbnN0IHJlZmVyZW5jZWRGcmFnbWVudE5hbWUxIG9mIHJlZmVyZW5jZWRGcmFnbWVudE5hbWVzMSkge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbmZsaWN0cyxcbiAgICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICAgIHJlZmVyZW5jZWRGcmFnbWVudE5hbWUxLFxuICAgICAgZnJhZ21lbnROYW1lMixcbiAgICApO1xuICB9XG59IC8vIEZpbmQgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIHR3byBzZWxlY3Rpb24gc2V0cywgaW5jbHVkaW5nIHRob3NlIGZvdW5kXG4vLyB2aWEgc3ByZWFkaW5nIGluIGZyYWdtZW50cy4gQ2FsbGVkIHdoZW4gZGV0ZXJtaW5pbmcgaWYgY29uZmxpY3RzIGV4aXN0XG4vLyBiZXR3ZWVuIHRoZSBzdWItZmllbGRzIG9mIHR3byBvdmVybGFwcGluZyBmaWVsZHMuXG5cbmZ1bmN0aW9uIGZpbmRDb25mbGljdHNCZXR3ZWVuU3ViU2VsZWN0aW9uU2V0cyhcbiAgY29udGV4dCxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgcGFyZW50VHlwZTEsXG4gIHNlbGVjdGlvblNldDEsXG4gIHBhcmVudFR5cGUyLFxuICBzZWxlY3Rpb25TZXQyLFxuKSB7XG4gIGNvbnN0IGNvbmZsaWN0cyA9IFtdO1xuICBjb25zdCBbZmllbGRNYXAxLCBmcmFnbWVudE5hbWVzMV0gPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgIGNvbnRleHQsXG4gICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICBwYXJlbnRUeXBlMSxcbiAgICBzZWxlY3Rpb25TZXQxLFxuICApO1xuICBjb25zdCBbZmllbGRNYXAyLCBmcmFnbWVudE5hbWVzMl0gPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgIGNvbnRleHQsXG4gICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICBwYXJlbnRUeXBlMixcbiAgICBzZWxlY3Rpb25TZXQyLFxuICApOyAvLyAoSCkgRmlyc3QsIGNvbGxlY3QgYWxsIGNvbmZsaWN0cyBiZXR3ZWVuIHRoZXNlIHR3byBjb2xsZWN0aW9ucyBvZiBmaWVsZC5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbihcbiAgICBjb250ZXh0LFxuICAgIGNvbmZsaWN0cyxcbiAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICBhcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgICBmaWVsZE1hcDEsXG4gICAgZmllbGRNYXAyLFxuICApOyAvLyAoSSkgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBmaXJzdCBjb2xsZWN0aW9uIG9mIGZpZWxkcyBhbmRcbiAgLy8gdGhvc2UgcmVmZXJlbmNlZCBieSBlYWNoIGZyYWdtZW50IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZWNvbmQuXG5cbiAgZm9yIChjb25zdCBmcmFnbWVudE5hbWUyIG9mIGZyYWdtZW50TmFtZXMyKSB7XG4gICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChcbiAgICAgIGNvbnRleHQsXG4gICAgICBjb25mbGljdHMsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICBmaWVsZE1hcDEsXG4gICAgICBmcmFnbWVudE5hbWUyLFxuICAgICk7XG4gIH0gLy8gKEkpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGUgc2Vjb25kIGNvbGxlY3Rpb24gb2YgZmllbGRzIGFuZFxuICAvLyB0aG9zZSByZWZlcmVuY2VkIGJ5IGVhY2ggZnJhZ21lbnQgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGZpcnN0LlxuXG4gIGZvciAoY29uc3QgZnJhZ21lbnROYW1lMSBvZiBmcmFnbWVudE5hbWVzMSkge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoXG4gICAgICBjb250ZXh0LFxuICAgICAgY29uZmxpY3RzLFxuICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgICAgZmllbGRNYXAyLFxuICAgICAgZnJhZ21lbnROYW1lMSxcbiAgICApO1xuICB9IC8vIChKKSBBbHNvIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gYW55IGZyYWdtZW50IG5hbWVzIGJ5IHRoZSBmaXJzdCBhbmRcbiAgLy8gZnJhZ21lbnQgbmFtZXMgYnkgdGhlIHNlY29uZC4gVGhpcyBjb21wYXJlcyBlYWNoIGl0ZW0gaW4gdGhlIGZpcnN0IHNldCBvZlxuICAvLyBuYW1lcyB0byBlYWNoIGl0ZW0gaW4gdGhlIHNlY29uZCBzZXQgb2YgbmFtZXMuXG5cbiAgZm9yIChjb25zdCBmcmFnbWVudE5hbWUxIG9mIGZyYWdtZW50TmFtZXMxKSB7XG4gICAgZm9yIChjb25zdCBmcmFnbWVudE5hbWUyIG9mIGZyYWdtZW50TmFtZXMyKSB7XG4gICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29uZmxpY3RzLFxuICAgICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgICBjb21wYXJlZEZyYWdtZW50UGFpcnMsXG4gICAgICAgIGFyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgICAgICBmcmFnbWVudE5hbWUxLFxuICAgICAgICBmcmFnbWVudE5hbWUyLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmxpY3RzO1xufSAvLyBDb2xsZWN0IGFsbCBDb25mbGljdHMgXCJ3aXRoaW5cIiBvbmUgY29sbGVjdGlvbiBvZiBmaWVsZHMuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNXaXRoaW4oXG4gIGNvbnRleHQsXG4gIGNvbmZsaWN0cyxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBmaWVsZE1hcCxcbikge1xuICAvLyBBIGZpZWxkIG1hcCBpcyBhIGtleWVkIGNvbGxlY3Rpb24sIHdoZXJlIGVhY2gga2V5IHJlcHJlc2VudHMgYSByZXNwb25zZVxuICAvLyBuYW1lIGFuZCB0aGUgdmFsdWUgYXQgdGhhdCBrZXkgaXMgYSBsaXN0IG9mIGFsbCBmaWVsZHMgd2hpY2ggcHJvdmlkZSB0aGF0XG4gIC8vIHJlc3BvbnNlIG5hbWUuIEZvciBldmVyeSByZXNwb25zZSBuYW1lLCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgZmllbGRzLCB0aGV5XG4gIC8vIG11c3QgYmUgY29tcGFyZWQgdG8gZmluZCBhIHBvdGVudGlhbCBjb25mbGljdC5cbiAgZm9yIChjb25zdCBbcmVzcG9uc2VOYW1lLCBmaWVsZHNdIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkTWFwKSkge1xuICAgIC8vIFRoaXMgY29tcGFyZXMgZXZlcnkgZmllbGQgaW4gdGhlIGxpc3QgdG8gZXZlcnkgb3RoZXIgZmllbGQgaW4gdGhpcyBsaXN0XG4gICAgLy8gKGV4Y2VwdCB0byBpdHNlbGYpLiBJZiB0aGUgbGlzdCBvbmx5IGhhcyBvbmUgaXRlbSwgbm90aGluZyBuZWVkcyB0b1xuICAgIC8vIGJlIGNvbXBhcmVkLlxuICAgIGlmIChmaWVsZHMubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgZmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgY29uZmxpY3QgPSBmaW5kQ29uZmxpY3QoXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgICAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgICAgICAgIGZhbHNlLCAvLyB3aXRoaW4gb25lIGNvbGxlY3Rpb24gaXMgbmV2ZXIgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAgICAgICAgICByZXNwb25zZU5hbWUsXG4gICAgICAgICAgICBmaWVsZHNbaV0sXG4gICAgICAgICAgICBmaWVsZHNbal0sXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChjb25mbGljdCkge1xuICAgICAgICAgICAgY29uZmxpY3RzLnB1c2goY29uZmxpY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSAvLyBDb2xsZWN0IGFsbCBDb25mbGljdHMgYmV0d2VlbiB0d28gY29sbGVjdGlvbnMgb2YgZmllbGRzLiBUaGlzIGlzIHNpbWlsYXIgdG8sXG4vLyBidXQgZGlmZmVyZW50IGZyb20gdGhlIGBjb2xsZWN0Q29uZmxpY3RzV2l0aGluYCBmdW5jdGlvbiBhYm92ZS4gVGhpcyBjaGVja1xuLy8gYXNzdW1lcyB0aGF0IGBjb2xsZWN0Q29uZmxpY3RzV2l0aGluYCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCBvbiBlYWNoXG4vLyBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkcy4gVGhpcyBpcyB0cnVlIGJlY2F1c2UgdGhpcyB2YWxpZGF0b3IgdHJhdmVyc2VzXG4vLyBlYWNoIGluZGl2aWR1YWwgc2VsZWN0aW9uIHNldC5cblxuZnVuY3Rpb24gY29sbGVjdENvbmZsaWN0c0JldHdlZW4oXG4gIGNvbnRleHQsXG4gIGNvbmZsaWN0cyxcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICBwYXJlbnRGaWVsZHNBcmVNdXR1YWxseUV4Y2x1c2l2ZSxcbiAgZmllbGRNYXAxLFxuICBmaWVsZE1hcDIsXG4pIHtcbiAgLy8gQSBmaWVsZCBtYXAgaXMgYSBrZXllZCBjb2xsZWN0aW9uLCB3aGVyZSBlYWNoIGtleSByZXByZXNlbnRzIGEgcmVzcG9uc2VcbiAgLy8gbmFtZSBhbmQgdGhlIHZhbHVlIGF0IHRoYXQga2V5IGlzIGEgbGlzdCBvZiBhbGwgZmllbGRzIHdoaWNoIHByb3ZpZGUgdGhhdFxuICAvLyByZXNwb25zZSBuYW1lLiBGb3IgYW55IHJlc3BvbnNlIG5hbWUgd2hpY2ggYXBwZWFycyBpbiBib3RoIHByb3ZpZGVkIGZpZWxkXG4gIC8vIG1hcHMsIGVhY2ggZmllbGQgZnJvbSB0aGUgZmlyc3QgZmllbGQgbWFwIG11c3QgYmUgY29tcGFyZWQgdG8gZXZlcnkgZmllbGRcbiAgLy8gaW4gdGhlIHNlY29uZCBmaWVsZCBtYXAgdG8gZmluZCBwb3RlbnRpYWwgY29uZmxpY3RzLlxuICBmb3IgKGNvbnN0IFtyZXNwb25zZU5hbWUsIGZpZWxkczFdIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkTWFwMSkpIHtcbiAgICBjb25zdCBmaWVsZHMyID0gZmllbGRNYXAyW3Jlc3BvbnNlTmFtZV07XG5cbiAgICBpZiAoZmllbGRzMikge1xuICAgICAgZm9yIChjb25zdCBmaWVsZDEgb2YgZmllbGRzMSkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkMiBvZiBmaWVsZHMyKSB7XG4gICAgICAgICAgY29uc3QgY29uZmxpY3QgPSBmaW5kQ29uZmxpY3QoXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyxcbiAgICAgICAgICAgIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgICAgICAgICAgIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlLFxuICAgICAgICAgICAgcmVzcG9uc2VOYW1lLFxuICAgICAgICAgICAgZmllbGQxLFxuICAgICAgICAgICAgZmllbGQyLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcbiAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKGNvbmZsaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gRGV0ZXJtaW5lcyBpZiB0aGVyZSBpcyBhIGNvbmZsaWN0IGJldHdlZW4gdHdvIHBhcnRpY3VsYXIgZmllbGRzLCBpbmNsdWRpbmdcbi8vIGNvbXBhcmluZyB0aGVpciBzdWItZmllbGRzLlxuXG5mdW5jdGlvbiBmaW5kQ29uZmxpY3QoXG4gIGNvbnRleHQsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGNvbXBhcmVkRnJhZ21lbnRQYWlycyxcbiAgcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gIHJlc3BvbnNlTmFtZSxcbiAgZmllbGQxLFxuICBmaWVsZDIsXG4pIHtcbiAgY29uc3QgW3BhcmVudFR5cGUxLCBub2RlMSwgZGVmMV0gPSBmaWVsZDE7XG4gIGNvbnN0IFtwYXJlbnRUeXBlMiwgbm9kZTIsIGRlZjJdID0gZmllbGQyOyAvLyBJZiBpdCBpcyBrbm93biB0aGF0IHR3byBmaWVsZHMgY291bGQgbm90IHBvc3NpYmx5IGFwcGx5IGF0IHRoZSBzYW1lXG4gIC8vIHRpbWUsIGR1ZSB0byB0aGUgcGFyZW50IHR5cGVzLCB0aGVuIGl0IGlzIHNhZmUgdG8gcGVybWl0IHRoZW0gdG8gZGl2ZXJnZVxuICAvLyBpbiBhbGlhc2VkIGZpZWxkIG9yIGFyZ3VtZW50cyB1c2VkIGFzIHRoZXkgd2lsbCBub3QgcHJlc2VudCBhbnkgYW1iaWd1aXR5XG4gIC8vIGJ5IGRpZmZlcmluZy5cbiAgLy8gSXQgaXMga25vd24gdGhhdCB0d28gcGFyZW50IHR5cGVzIGNvdWxkIG5ldmVyIG92ZXJsYXAgaWYgdGhleSBhcmVcbiAgLy8gZGlmZmVyZW50IE9iamVjdCB0eXBlcy4gSW50ZXJmYWNlIG9yIFVuaW9uIHR5cGVzIG1pZ2h0IG92ZXJsYXAgLSBpZiBub3RcbiAgLy8gaW4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjaGVtYSwgdGhlbiBwZXJoYXBzIGluIHNvbWUgZnV0dXJlIHZlcnNpb24sXG4gIC8vIHRodXMgbWF5IG5vdCBzYWZlbHkgZGl2ZXJnZS5cblxuICBjb25zdCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSA9XG4gICAgcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUgfHxcbiAgICAocGFyZW50VHlwZTEgIT09IHBhcmVudFR5cGUyICYmXG4gICAgICBpc09iamVjdFR5cGUocGFyZW50VHlwZTEpICYmXG4gICAgICBpc09iamVjdFR5cGUocGFyZW50VHlwZTIpKTtcblxuICBpZiAoIWFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgLy8gVHdvIGFsaWFzZXMgbXVzdCByZWZlciB0byB0aGUgc2FtZSBmaWVsZC5cbiAgICBjb25zdCBuYW1lMSA9IG5vZGUxLm5hbWUudmFsdWU7XG4gICAgY29uc3QgbmFtZTIgPSBub2RlMi5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKG5hbWUxICE9PSBuYW1lMikge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgW3Jlc3BvbnNlTmFtZSwgYFwiJHtuYW1lMX1cIiBhbmQgXCIke25hbWUyfVwiIGFyZSBkaWZmZXJlbnQgZmllbGRzYF0sXG4gICAgICAgIFtub2RlMV0sXG4gICAgICAgIFtub2RlMl0sXG4gICAgICBdO1xuICAgIH0gLy8gVHdvIGZpZWxkIGNhbGxzIG11c3QgaGF2ZSB0aGUgc2FtZSBhcmd1bWVudHMuXG5cbiAgICBpZiAoc3RyaW5naWZ5QXJndW1lbnRzKG5vZGUxKSAhPT0gc3RyaW5naWZ5QXJndW1lbnRzKG5vZGUyKSkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgW3Jlc3BvbnNlTmFtZSwgJ3RoZXkgaGF2ZSBkaWZmZXJpbmcgYXJndW1lbnRzJ10sXG4gICAgICAgIFtub2RlMV0sXG4gICAgICAgIFtub2RlMl0sXG4gICAgICBdO1xuICAgIH1cbiAgfSAvLyBUaGUgcmV0dXJuIHR5cGUgZm9yIGVhY2ggZmllbGQuXG5cbiAgY29uc3QgdHlwZTEgPSBkZWYxID09PSBudWxsIHx8IGRlZjEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZjEudHlwZTtcbiAgY29uc3QgdHlwZTIgPSBkZWYyID09PSBudWxsIHx8IGRlZjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZjIudHlwZTtcblxuICBpZiAodHlwZTEgJiYgdHlwZTIgJiYgZG9UeXBlc0NvbmZsaWN0KHR5cGUxLCB0eXBlMikpIHtcbiAgICByZXR1cm4gW1xuICAgICAgW1xuICAgICAgICByZXNwb25zZU5hbWUsXG4gICAgICAgIGB0aGV5IHJldHVybiBjb25mbGljdGluZyB0eXBlcyBcIiR7aW5zcGVjdCh0eXBlMSl9XCIgYW5kIFwiJHtpbnNwZWN0KFxuICAgICAgICAgIHR5cGUyLFxuICAgICAgICApfVwiYCxcbiAgICAgIF0sXG4gICAgICBbbm9kZTFdLFxuICAgICAgW25vZGUyXSxcbiAgICBdO1xuICB9IC8vIENvbGxlY3QgYW5kIGNvbXBhcmUgc3ViLWZpZWxkcy4gVXNlIHRoZSBzYW1lIFwidmlzaXRlZCBmcmFnbWVudCBuYW1lc1wiIGxpc3RcbiAgLy8gZm9yIGJvdGggY29sbGVjdGlvbnMgc28gZmllbGRzIGluIGEgZnJhZ21lbnQgcmVmZXJlbmNlIGFyZSBuZXZlclxuICAvLyBjb21wYXJlZCB0byB0aGVtc2VsdmVzLlxuXG4gIGNvbnN0IHNlbGVjdGlvblNldDEgPSBub2RlMS5zZWxlY3Rpb25TZXQ7XG4gIGNvbnN0IHNlbGVjdGlvblNldDIgPSBub2RlMi5zZWxlY3Rpb25TZXQ7XG5cbiAgaWYgKHNlbGVjdGlvblNldDEgJiYgc2VsZWN0aW9uU2V0Mikge1xuICAgIGNvbnN0IGNvbmZsaWN0cyA9IGZpbmRDb25mbGljdHNCZXR3ZWVuU3ViU2VsZWN0aW9uU2V0cyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgICAgY29tcGFyZWRGcmFnbWVudFBhaXJzLFxuICAgICAgYXJlTXV0dWFsbHlFeGNsdXNpdmUsXG4gICAgICBnZXROYW1lZFR5cGUodHlwZTEpLFxuICAgICAgc2VsZWN0aW9uU2V0MSxcbiAgICAgIGdldE5hbWVkVHlwZSh0eXBlMiksXG4gICAgICBzZWxlY3Rpb25TZXQyLFxuICAgICk7XG4gICAgcmV0dXJuIHN1YmZpZWxkQ29uZmxpY3RzKGNvbmZsaWN0cywgcmVzcG9uc2VOYW1lLCBub2RlMSwgbm9kZTIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFyZ3VtZW50cyhmaWVsZE5vZGUpIHtcbiAgdmFyIF9maWVsZE5vZGUkYXJndW1lbnRzO1xuXG4gIC8vIEZJWE1FIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcbiAgY29uc3QgYXJncyA9XG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAoX2ZpZWxkTm9kZSRhcmd1bWVudHMgPSBmaWVsZE5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgIF9maWVsZE5vZGUkYXJndW1lbnRzICE9PSB2b2lkIDBcbiAgICAgID8gX2ZpZWxkTm9kZSRhcmd1bWVudHNcbiAgICAgIDogW107XG4gIGNvbnN0IGlucHV0T2JqZWN0V2l0aEFyZ3MgPSB7XG4gICAga2luZDogS2luZC5PQkpFQ1QsXG4gICAgZmllbGRzOiBhcmdzLm1hcCgoYXJnTm9kZSkgPT4gKHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNUX0ZJRUxELFxuICAgICAgbmFtZTogYXJnTm9kZS5uYW1lLFxuICAgICAgdmFsdWU6IGFyZ05vZGUudmFsdWUsXG4gICAgfSkpLFxuICB9O1xuICByZXR1cm4gcHJpbnQoc29ydFZhbHVlTm9kZShpbnB1dE9iamVjdFdpdGhBcmdzKSk7XG59IC8vIFR3byB0eXBlcyBjb25mbGljdCBpZiBib3RoIHR5cGVzIGNvdWxkIG5vdCBhcHBseSB0byBhIHZhbHVlIHNpbXVsdGFuZW91c2x5LlxuLy8gQ29tcG9zaXRlIHR5cGVzIGFyZSBpZ25vcmVkIGFzIHRoZWlyIGluZGl2aWR1YWwgZmllbGQgdHlwZXMgd2lsbCBiZSBjb21wYXJlZFxuLy8gbGF0ZXIgcmVjdXJzaXZlbHkuIEhvd2V2ZXIgTGlzdCBhbmQgTm9uLU51bGwgdHlwZXMgbXVzdCBtYXRjaC5cblxuZnVuY3Rpb24gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLCB0eXBlMikge1xuICBpZiAoaXNMaXN0VHlwZSh0eXBlMSkpIHtcbiAgICByZXR1cm4gaXNMaXN0VHlwZSh0eXBlMilcbiAgICAgID8gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLm9mVHlwZSwgdHlwZTIub2ZUeXBlKVxuICAgICAgOiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTGlzdFR5cGUodHlwZTIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlMSkpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsVHlwZSh0eXBlMilcbiAgICAgID8gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLm9mVHlwZSwgdHlwZTIub2ZUeXBlKVxuICAgICAgOiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZTIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNMZWFmVHlwZSh0eXBlMSkgfHwgaXNMZWFmVHlwZSh0eXBlMikpIHtcbiAgICByZXR1cm4gdHlwZTEgIT09IHR5cGUyO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBHaXZlbiBhIHNlbGVjdGlvbiBzZXQsIHJldHVybiB0aGUgY29sbGVjdGlvbiBvZiBmaWVsZHMgKGEgbWFwcGluZyBvZiByZXNwb25zZVxuLy8gbmFtZSB0byBmaWVsZCBub2RlcyBhbmQgZGVmaW5pdGlvbnMpIGFzIHdlbGwgYXMgYSBsaXN0IG9mIGZyYWdtZW50IG5hbWVzXG4vLyByZWZlcmVuY2VkIHZpYSBmcmFnbWVudCBzcHJlYWRzLlxuXG5mdW5jdGlvbiBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICBjb250ZXh0LFxuICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICBwYXJlbnRUeXBlLFxuICBzZWxlY3Rpb25TZXQsXG4pIHtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcy5nZXQoc2VsZWN0aW9uU2V0KTtcblxuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIGNvbnN0IG5vZGVBbmREZWZzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZnJhZ21lbnROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgX2NvbGxlY3RGaWVsZHNBbmRGcmFnbWVudE5hbWVzKFxuICAgIGNvbnRleHQsXG4gICAgcGFyZW50VHlwZSxcbiAgICBzZWxlY3Rpb25TZXQsXG4gICAgbm9kZUFuZERlZnMsXG4gICAgZnJhZ21lbnROYW1lcyxcbiAgKTtcblxuICBjb25zdCByZXN1bHQgPSBbbm9kZUFuZERlZnMsIE9iamVjdC5rZXlzKGZyYWdtZW50TmFtZXMpXTtcbiAgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcy5zZXQoc2VsZWN0aW9uU2V0LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufSAvLyBHaXZlbiBhIHJlZmVyZW5jZSB0byBhIGZyYWdtZW50LCByZXR1cm4gdGhlIHJlcHJlc2VudGVkIGNvbGxlY3Rpb24gb2YgZmllbGRzXG4vLyBhcyB3ZWxsIGFzIGEgbGlzdCBvZiBuZXN0ZWQgZnJhZ21lbnQgbmFtZXMgcmVmZXJlbmNlZCB2aWEgZnJhZ21lbnQgc3ByZWFkcy5cblxuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoXG4gIGNvbnRleHQsXG4gIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsXG4gIGZyYWdtZW50LFxuKSB7XG4gIC8vIFNob3J0LWNpcmN1aXQgYnVpbGRpbmcgYSB0eXBlIGZyb20gdGhlIG5vZGUgaWYgcG9zc2libGUuXG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMuZ2V0KGZyYWdtZW50LnNlbGVjdGlvblNldCk7XG5cbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICBjb25zdCBmcmFnbWVudFR5cGUgPSB0eXBlRnJvbUFTVChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnbWVudC50eXBlQ29uZGl0aW9uKTtcbiAgcmV0dXJuIGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoXG4gICAgY29udGV4dCxcbiAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLFxuICAgIGZyYWdtZW50VHlwZSxcbiAgICBmcmFnbWVudC5zZWxlY3Rpb25TZXQsXG4gICk7XG59XG5cbmZ1bmN0aW9uIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgY29udGV4dCxcbiAgcGFyZW50VHlwZSxcbiAgc2VsZWN0aW9uU2V0LFxuICBub2RlQW5kRGVmcyxcbiAgZnJhZ21lbnROYW1lcyxcbikge1xuICBmb3IgKGNvbnN0IHNlbGVjdGlvbiBvZiBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucykge1xuICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5GSUVMRDoge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgbGV0IGZpZWxkRGVmO1xuXG4gICAgICAgIGlmIChpc09iamVjdFR5cGUocGFyZW50VHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHBhcmVudFR5cGUpKSB7XG4gICAgICAgICAgZmllbGREZWYgPSBwYXJlbnRUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXNwb25zZU5hbWUgPSBzZWxlY3Rpb24uYWxpYXNcbiAgICAgICAgICA/IHNlbGVjdGlvbi5hbGlhcy52YWx1ZVxuICAgICAgICAgIDogZmllbGROYW1lO1xuXG4gICAgICAgIGlmICghbm9kZUFuZERlZnNbcmVzcG9uc2VOYW1lXSkge1xuICAgICAgICAgIG5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0ucHVzaChbcGFyZW50VHlwZSwgc2VsZWN0aW9uLCBmaWVsZERlZl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgZnJhZ21lbnROYW1lc1tzZWxlY3Rpb24ubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDoge1xuICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gc2VsZWN0aW9uLnR5cGVDb25kaXRpb247XG4gICAgICAgIGNvbnN0IGlubGluZUZyYWdtZW50VHlwZSA9IHR5cGVDb25kaXRpb25cbiAgICAgICAgICA/IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIHR5cGVDb25kaXRpb24pXG4gICAgICAgICAgOiBwYXJlbnRUeXBlO1xuXG4gICAgICAgIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGlubGluZUZyYWdtZW50VHlwZSxcbiAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIG5vZGVBbmREZWZzLFxuICAgICAgICAgIGZyYWdtZW50TmFtZXMsXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59IC8vIEdpdmVuIGEgc2VyaWVzIG9mIENvbmZsaWN0cyB3aGljaCBvY2N1cnJlZCBiZXR3ZWVuIHR3byBzdWItZmllbGRzLCBnZW5lcmF0ZVxuLy8gYSBzaW5nbGUgQ29uZmxpY3QuXG5cbmZ1bmN0aW9uIHN1YmZpZWxkQ29uZmxpY3RzKGNvbmZsaWN0cywgcmVzcG9uc2VOYW1lLCBub2RlMSwgbm9kZTIpIHtcbiAgaWYgKGNvbmZsaWN0cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFtyZXNwb25zZU5hbWUsIGNvbmZsaWN0cy5tYXAoKFtyZWFzb25dKSA9PiByZWFzb24pXSxcbiAgICAgIFtub2RlMSwgLi4uY29uZmxpY3RzLm1hcCgoWywgZmllbGRzMV0pID0+IGZpZWxkczEpLmZsYXQoKV0sXG4gICAgICBbbm9kZTIsIC4uLmNvbmZsaWN0cy5tYXAoKFssICwgZmllbGRzMl0pID0+IGZpZWxkczIpLmZsYXQoKV0sXG4gICAgXTtcbiAgfVxufVxuLyoqXG4gKiBBIHdheSB0byBrZWVwIHRyYWNrIG9mIHBhaXJzIG9mIHRoaW5ncyB3aGVuIHRoZSBvcmRlcmluZyBvZiB0aGUgcGFpciBkb2VzIG5vdCBtYXR0ZXIuXG4gKi9cblxuY2xhc3MgUGFpclNldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2RhdGEgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYXMoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB2YXIgX3RoaXMkX2RhdGEkZ2V0O1xuXG4gICAgY29uc3QgW2tleTEsIGtleTJdID0gYSA8IGIgPyBbYSwgYl0gOiBbYiwgYV07XG4gICAgY29uc3QgcmVzdWx0ID1cbiAgICAgIChfdGhpcyRfZGF0YSRnZXQgPSB0aGlzLl9kYXRhLmdldChrZXkxKSkgPT09IG51bGwgfHxcbiAgICAgIF90aGlzJF9kYXRhJGdldCA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogX3RoaXMkX2RhdGEkZ2V0LmdldChrZXkyKTtcblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gYXJlTXV0dWFsbHlFeGNsdXNpdmUgYmVpbmcgZmFsc2UgaXMgYSBzdXBlcnNldCBvZiBiZWluZyB0cnVlLCBoZW5jZSBpZlxuICAgIC8vIHdlIHdhbnQgdG8ga25vdyBpZiB0aGlzIFBhaXJTZXQgXCJoYXNcIiB0aGVzZSB0d28gd2l0aCBubyBleGNsdXNpdml0eSxcbiAgICAvLyB3ZSBoYXZlIHRvIGVuc3VyZSBpdCB3YXMgYWRkZWQgYXMgc3VjaC5cblxuICAgIHJldHVybiBhcmVNdXR1YWxseUV4Y2x1c2l2ZSA/IHRydWUgOiBhcmVNdXR1YWxseUV4Y2x1c2l2ZSA9PT0gcmVzdWx0O1xuICB9XG5cbiAgYWRkKGEsIGIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgY29uc3QgW2tleTEsIGtleTJdID0gYSA8IGIgPyBbYSwgYl0gOiBbYiwgYV07XG5cbiAgICBjb25zdCBtYXAgPSB0aGlzLl9kYXRhLmdldChrZXkxKTtcblxuICAgIGlmIChtYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fZGF0YS5zZXQoa2V5MSwgbmV3IE1hcChbW2tleTIsIGFyZU11dHVhbGx5RXhjbHVzaXZlXV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwLnNldChrZXkyLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IGlzQ29tcG9zaXRlVHlwZSB9IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgZG9UeXBlc092ZXJsYXAgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLm1qcyc7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanMnO1xuXG4vKipcbiAqIFBvc3NpYmxlIGZyYWdtZW50IHNwcmVhZFxuICpcbiAqIEEgZnJhZ21lbnQgc3ByZWFkIGlzIG9ubHkgdmFsaWQgaWYgdGhlIHR5cGUgY29uZGl0aW9uIGNvdWxkIGV2ZXIgcG9zc2libHlcbiAqIGJlIHRydWU6IGlmIHRoZXJlIGlzIGEgbm9uLWVtcHR5IGludGVyc2VjdGlvbiBvZiB0aGUgcG9zc2libGUgcGFyZW50IHR5cGVzLFxuICogYW5kIHBvc3NpYmxlIHR5cGVzIHdoaWNoIHBhc3MgdGhlIHR5cGUgY29uZGl0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudChub2RlKSB7XG4gICAgICBjb25zdCBmcmFnVHlwZSA9IGNvbnRleHQuZ2V0VHlwZSgpO1xuICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGlzQ29tcG9zaXRlVHlwZShmcmFnVHlwZSkgJiZcbiAgICAgICAgaXNDb21wb3NpdGVUeXBlKHBhcmVudFR5cGUpICYmXG4gICAgICAgICFkb1R5cGVzT3ZlcmxhcChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnVHlwZSwgcGFyZW50VHlwZSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnRUeXBlU3RyID0gaW5zcGVjdChwYXJlbnRUeXBlKTtcbiAgICAgICAgY29uc3QgZnJhZ1R5cGVTdHIgPSBpbnNwZWN0KGZyYWdUeXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IGNhbm5vdCBiZSBzcHJlYWQgaGVyZSBhcyBvYmplY3RzIG9mIHR5cGUgXCIke3BhcmVudFR5cGVTdHJ9XCIgY2FuIG5ldmVyIGJlIG9mIHR5cGUgXCIke2ZyYWdUeXBlU3RyfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICBjb25zdCBmcmFnTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGZyYWdUeXBlID0gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIGZyYWdOYW1lKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICBmcmFnVHlwZSAmJlxuICAgICAgICBwYXJlbnRUeXBlICYmXG4gICAgICAgICFkb1R5cGVzT3ZlcmxhcChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnVHlwZSwgcGFyZW50VHlwZSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnRUeXBlU3RyID0gaW5zcGVjdChwYXJlbnRUeXBlKTtcbiAgICAgICAgY29uc3QgZnJhZ1R5cGVTdHIgPSBpbnNwZWN0KGZyYWdUeXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IFwiJHtmcmFnTmFtZX1cIiBjYW5ub3QgYmUgc3ByZWFkIGhlcmUgYXMgb2JqZWN0cyBvZiB0eXBlIFwiJHtwYXJlbnRUeXBlU3RyfVwiIGNhbiBuZXZlciBiZSBvZiB0eXBlIFwiJHtmcmFnVHlwZVN0cn1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRGcmFnbWVudFR5cGUoY29udGV4dCwgbmFtZSkge1xuICBjb25zdCBmcmFnID0gY29udGV4dC5nZXRGcmFnbWVudChuYW1lKTtcblxuICBpZiAoZnJhZykge1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlRnJvbUFTVChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnLnR5cGVDb25kaXRpb24pO1xuXG4gICAgaWYgKGlzQ29tcG9zaXRlVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBkaWRZb3VNZWFuIH0gZnJvbSAnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi8uLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuaW1wb3J0IHsgc3VnZ2VzdGlvbkxpc3QgfSBmcm9tICcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgaXNUeXBlRGVmaW5pdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qcyc7XG5pbXBvcnQge1xuICBpc0VudW1UeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzU2NhbGFyVHlwZSxcbiAgaXNVbmlvblR5cGUsXG59IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFBvc3NpYmxlIHR5cGUgZXh0ZW5zaW9uXG4gKlxuICogQSB0eXBlIGV4dGVuc2lvbiBpcyBvbmx5IHZhbGlkIGlmIHRoZSB0eXBlIGlzIGRlZmluZWQgYW5kIGhhcyB0aGUgc2FtZSBraW5kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBkZWZpbmVkVHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3QgZGVmIG9mIGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucykge1xuICAgIGlmIChpc1R5cGVEZWZpbml0aW9uTm9kZShkZWYpKSB7XG4gICAgICBkZWZpbmVkVHlwZXNbZGVmLm5hbWUudmFsdWVdID0gZGVmO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU2NhbGFyVHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb24sXG4gICAgT2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb24sXG4gICAgSW50ZXJmYWNlVHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb24sXG4gICAgVW5pb25UeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBFbnVtVHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb24sXG4gICAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0V4dGVuc2lvbihub2RlKSB7XG4gICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgY29uc3QgZGVmTm9kZSA9IGRlZmluZWRUeXBlc1t0eXBlTmFtZV07XG4gICAgY29uc3QgZXhpc3RpbmdUeXBlID1cbiAgICAgIHNjaGVtYSA9PT0gbnVsbCB8fCBzY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKTtcbiAgICBsZXQgZXhwZWN0ZWRLaW5kO1xuXG4gICAgaWYgKGRlZk5vZGUpIHtcbiAgICAgIGV4cGVjdGVkS2luZCA9IGRlZktpbmRUb0V4dEtpbmRbZGVmTm9kZS5raW5kXTtcbiAgICB9IGVsc2UgaWYgKGV4aXN0aW5nVHlwZSkge1xuICAgICAgZXhwZWN0ZWRLaW5kID0gdHlwZVRvRXh0S2luZChleGlzdGluZ1R5cGUpO1xuICAgIH1cblxuICAgIGlmIChleHBlY3RlZEtpbmQpIHtcbiAgICAgIGlmIChleHBlY3RlZEtpbmQgIT09IG5vZGUua2luZCkge1xuICAgICAgICBjb25zdCBraW5kU3RyID0gZXh0ZW5zaW9uS2luZFRvVHlwZU5hbWUobm9kZS5raW5kKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKGBDYW5ub3QgZXh0ZW5kIG5vbi0ke2tpbmRTdHJ9IHR5cGUgXCIke3R5cGVOYW1lfVwiLmAsIHtcbiAgICAgICAgICAgIG5vZGVzOiBkZWZOb2RlID8gW2RlZk5vZGUsIG5vZGVdIDogbm9kZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYWxsVHlwZU5hbWVzID0gT2JqZWN0LmtleXMoe1xuICAgICAgICAuLi5kZWZpbmVkVHlwZXMsXG4gICAgICAgIC4uLihzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogc2NoZW1hLmdldFR5cGVNYXAoKSksXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN1Z2dlc3RlZFR5cGVzID0gc3VnZ2VzdGlvbkxpc3QodHlwZU5hbWUsIGFsbFR5cGVOYW1lcyk7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgZXh0ZW5kIHR5cGUgXCIke3R5cGVOYW1lfVwiIGJlY2F1c2UgaXQgaXMgbm90IGRlZmluZWQuYCArXG4gICAgICAgICAgICBkaWRZb3VNZWFuKHN1Z2dlc3RlZFR5cGVzKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBub2Rlczogbm9kZS5uYW1lLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuY29uc3QgZGVmS2luZFRvRXh0S2luZCA9IHtcbiAgW0tpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTl06IEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OLFxuICBbS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OXTogS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04sXG4gIFtLaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT05dOiBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTixcbiAgW0tpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OXTogS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTixcbiAgW0tpbmQuRU5VTV9UWVBFX0RFRklOSVRJT05dOiBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT04sXG4gIFtLaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT05dOiBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTixcbn07XG5cbmZ1bmN0aW9uIHR5cGVUb0V4dEtpbmQodHlwZSkge1xuICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBLaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT047XG4gIH1cblxuICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gIC8vIE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZFxuXG4gIGZhbHNlIHx8IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuXG5mdW5jdGlvbiBleHRlbnNpb25LaW5kVG9UeXBlTmFtZShraW5kKSB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ3NjYWxhcic7XG5cbiAgICBjYXNlIEtpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICdvYmplY3QnO1xuXG4gICAgY2FzZSBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW50ZXJmYWNlJztcblxuICAgIGNhc2UgS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAndW5pb24nO1xuXG4gICAgY2FzZSBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ2VudW0nO1xuXG4gICAgY2FzZSBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW5wdXQgb2JqZWN0JztcbiAgICAvLyBOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWRcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgICBkZWZhdWx0OlxuICAgICAgZmFsc2UgfHwgaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBraW5kOiAnICsgaW5zcGVjdChraW5kKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzJztcbmltcG9ydCB7IGtleU1hcCB9IGZyb20gJy4uLy4uL2pzdXRpbHMva2V5TWFwLm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyBpc1JlcXVpcmVkQXJndW1lbnQsIGlzVHlwZSB9IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgc3BlY2lmaWVkRGlyZWN0aXZlcyB9IGZyb20gJy4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuXG4vKipcbiAqIFByb3ZpZGVkIHJlcXVpcmVkIGFyZ3VtZW50c1xuICpcbiAqIEEgZmllbGQgb3IgZGlyZWN0aXZlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHJlcXVpcmVkIChub24tbnVsbCB3aXRob3V0IGFcbiAqIGRlZmF1bHQgdmFsdWUpIGZpZWxkIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICAuLi5Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSxcbiAgICBGaWVsZDoge1xuICAgICAgLy8gVmFsaWRhdGUgb24gbGVhdmUgdG8gYWxsb3cgZm9yIGRlZXBlciBlcnJvcnMgdG8gYXBwZWFyIGZpcnN0LlxuICAgICAgbGVhdmUoZmllbGROb2RlKSB7XG4gICAgICAgIHZhciBfZmllbGROb2RlJGFyZ3VtZW50cztcblxuICAgICAgICBjb25zdCBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcblxuICAgICAgICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvdmlkZWRBcmdzID0gbmV3IFNldCggLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIChfZmllbGROb2RlJGFyZ3VtZW50cyA9IGZpZWxkTm9kZS5hcmd1bWVudHMpID09PSBudWxsIHx8XG4gICAgICAgICAgX2ZpZWxkTm9kZSRhcmd1bWVudHMgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgIDogX2ZpZWxkTm9kZSRhcmd1bWVudHMubWFwKChhcmcpID0+IGFyZy5uYW1lLnZhbHVlKSxcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGFyZ0RlZiBvZiBmaWVsZERlZi5hcmdzKSB7XG4gICAgICAgICAgaWYgKCFwcm92aWRlZEFyZ3MuaGFzKGFyZ0RlZi5uYW1lKSAmJiBpc1JlcXVpcmVkQXJndW1lbnQoYXJnRGVmKSkge1xuICAgICAgICAgICAgY29uc3QgYXJnVHlwZVN0ciA9IGluc3BlY3QoYXJnRGVmLnR5cGUpO1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkRGVmLm5hbWV9XCIgYXJndW1lbnQgXCIke2FyZ0RlZi5uYW1lfVwiIG9mIHR5cGUgXCIke2FyZ1R5cGVTdHJ9XCIgaXMgcmVxdWlyZWQsIGJ1dCBpdCB3YXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IGZpZWxkTm9kZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIF9zY2hlbWEkZ2V0RGlyZWN0aXZlcztcblxuICBjb25zdCByZXF1aXJlZEFyZ3NNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBkZWZpbmVkRGlyZWN0aXZlcyA9XG4gICAgKF9zY2hlbWEkZ2V0RGlyZWN0aXZlcyA9XG4gICAgICBzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpKSAhPT0gbnVsbCAmJiBfc2NoZW1hJGdldERpcmVjdGl2ZXMgIT09IHZvaWQgMFxuICAgICAgPyBfc2NoZW1hJGdldERpcmVjdGl2ZXNcbiAgICAgIDogc3BlY2lmaWVkRGlyZWN0aXZlcztcblxuICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBkZWZpbmVkRGlyZWN0aXZlcykge1xuICAgIHJlcXVpcmVkQXJnc01hcFtkaXJlY3RpdmUubmFtZV0gPSBrZXlNYXAoXG4gICAgICBkaXJlY3RpdmUuYXJncy5maWx0ZXIoaXNSZXF1aXJlZEFyZ3VtZW50KSxcbiAgICAgIChhcmcpID0+IGFyZy5uYW1lLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKGNvbnN0IGRlZiBvZiBhc3REZWZpbml0aW9ucykge1xuICAgIGlmIChkZWYua2luZCA9PT0gS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTikge1xuICAgICAgdmFyIF9kZWYkYXJndW1lbnRzO1xuXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgY29uc3QgYXJnTm9kZXMgPVxuICAgICAgICAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfZGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICByZXF1aXJlZEFyZ3NNYXBbZGVmLm5hbWUudmFsdWVdID0ga2V5TWFwKFxuICAgICAgICBhcmdOb2Rlcy5maWx0ZXIoaXNSZXF1aXJlZEFyZ3VtZW50Tm9kZSksXG4gICAgICAgIChhcmcpID0+IGFyZy5uYW1lLnZhbHVlLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIERpcmVjdGl2ZToge1xuICAgICAgLy8gVmFsaWRhdGUgb24gbGVhdmUgdG8gYWxsb3cgZm9yIGRlZXBlciBlcnJvcnMgdG8gYXBwZWFyIGZpcnN0LlxuICAgICAgbGVhdmUoZGlyZWN0aXZlTm9kZSkge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICBjb25zdCByZXF1aXJlZEFyZ3MgPSByZXF1aXJlZEFyZ3NNYXBbZGlyZWN0aXZlTmFtZV07XG5cbiAgICAgICAgaWYgKHJlcXVpcmVkQXJncykge1xuICAgICAgICAgIHZhciBfZGlyZWN0aXZlTm9kZSRhcmd1bWU7XG5cbiAgICAgICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBjb25zdCBhcmdOb2RlcyA9XG4gICAgICAgICAgICAoX2RpcmVjdGl2ZU5vZGUkYXJndW1lID0gZGlyZWN0aXZlTm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmXG4gICAgICAgICAgICBfZGlyZWN0aXZlTm9kZSRhcmd1bWUgIT09IHZvaWQgMFxuICAgICAgICAgICAgICA/IF9kaXJlY3RpdmVOb2RlJGFyZ3VtZVxuICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgIGNvbnN0IGFyZ05vZGVNYXAgPSBuZXcgU2V0KGFyZ05vZGVzLm1hcCgoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSkpO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBbYXJnTmFtZSwgYXJnRGVmXSBvZiBPYmplY3QuZW50cmllcyhyZXF1aXJlZEFyZ3MpKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ05vZGVNYXAuaGFzKGFyZ05hbWUpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFyZ1R5cGUgPSBpc1R5cGUoYXJnRGVmLnR5cGUpXG4gICAgICAgICAgICAgICAgPyBpbnNwZWN0KGFyZ0RlZi50eXBlKVxuICAgICAgICAgICAgICAgIDogcHJpbnQoYXJnRGVmLnR5cGUpO1xuICAgICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgICBgRGlyZWN0aXZlIFwiQCR7ZGlyZWN0aXZlTmFtZX1cIiBhcmd1bWVudCBcIiR7YXJnTmFtZX1cIiBvZiB0eXBlIFwiJHthcmdUeXBlfVwiIGlzIHJlcXVpcmVkLCBidXQgaXQgd2FzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub2RlczogZGlyZWN0aXZlTm9kZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNSZXF1aXJlZEFyZ3VtZW50Tm9kZShhcmcpIHtcbiAgcmV0dXJuIGFyZy50eXBlLmtpbmQgPT09IEtpbmQuTk9OX05VTExfVFlQRSAmJiBhcmcuZGVmYXVsdFZhbHVlID09IG51bGw7XG59XG4iLCJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IGdldE5hbWVkVHlwZSwgaXNMZWFmVHlwZSB9IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFNjYWxhciBsZWFmc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyB2YWxpZCBvbmx5IGlmIGFsbCBsZWFmIGZpZWxkcyAoZmllbGRzIHdpdGhvdXRcbiAqIHN1YiBzZWxlY3Rpb25zKSBhcmUgb2Ygc2NhbGFyIG9yIGVudW0gdHlwZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTY2FsYXJMZWFmc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IG5vZGUuc2VsZWN0aW9uU2V0O1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBpZiAoaXNMZWFmVHlwZShnZXROYW1lZFR5cGUodHlwZSkpKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIGBGaWVsZCBcIiR7ZmllbGROYW1lfVwiIG11c3Qgbm90IGhhdmUgYSBzZWxlY3Rpb24gc2luY2UgdHlwZSBcIiR7dHlwZVN0cn1cIiBoYXMgbm8gc3ViZmllbGRzLmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IHNlbGVjdGlvblNldCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIXNlbGVjdGlvblNldCkge1xuICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICBjb25zdCB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYEZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgb2YgdHlwZSBcIiR7dHlwZVN0cn1cIiBtdXN0IGhhdmUgYSBzZWxlY3Rpb24gb2Ygc3ViZmllbGRzLiBEaWQgeW91IG1lYW4gXCIke2ZpZWxkTmFtZX0geyAuLi4gfVwiP2AsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IEtpbmQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9raW5kcy5tanMnO1xuaW1wb3J0IHsgY29sbGVjdEZpZWxkcyB9IGZyb20gJy4uLy4uL2V4ZWN1dGlvbi9jb2xsZWN0RmllbGRzLm1qcyc7XG5cbi8qKlxuICogU3Vic2NyaXB0aW9ucyBtdXN0IG9ubHkgaW5jbHVkZSBhIG5vbi1pbnRyb3NwZWN0aW9uIGZpZWxkLlxuICpcbiAqIEEgR3JhcGhRTCBzdWJzY3JpcHRpb24gaXMgdmFsaWQgb25seSBpZiBpdCBjb250YWlucyBhIHNpbmdsZSByb290IGZpZWxkIGFuZFxuICogdGhhdCByb290IGZpZWxkIGlzIG5vdCBhbiBpbnRyb3NwZWN0aW9uIGZpZWxkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1TaW5nbGUtcm9vdC1maWVsZFxuICovXG5leHBvcnQgZnVuY3Rpb24gU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5vcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25UeXBlKSB7XG4gICAgICAgICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IG5vZGUubmFtZSA/IG5vZGUubmFtZS52YWx1ZSA6IG51bGw7XG4gICAgICAgICAgY29uc3QgdmFyaWFibGVWYWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gY29udGV4dC5nZXREb2N1bWVudCgpO1xuICAgICAgICAgIGNvbnN0IGZyYWdtZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGRlZmluaXRpb24gb2YgZG9jdW1lbnQuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgICAgICAgICBmcmFnbWVudHNbZGVmaW5pdGlvbi5uYW1lLnZhbHVlXSA9IGRlZmluaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZmllbGRzID0gY29sbGVjdEZpZWxkcyhcbiAgICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICAgIGZyYWdtZW50cyxcbiAgICAgICAgICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uVHlwZSxcbiAgICAgICAgICAgIG5vZGUuc2VsZWN0aW9uU2V0LFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoZmllbGRzLnNpemUgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFNlbGVjdGlvbkxpc3RzID0gWy4uLmZpZWxkcy52YWx1ZXMoKV07XG4gICAgICAgICAgICBjb25zdCBleHRyYUZpZWxkU2VsZWN0aW9uTGlzdHMgPSBmaWVsZFNlbGVjdGlvbkxpc3RzLnNsaWNlKDEpO1xuICAgICAgICAgICAgY29uc3QgZXh0cmFGaWVsZFNlbGVjdGlvbnMgPSBleHRyYUZpZWxkU2VsZWN0aW9uTGlzdHMuZmxhdCgpO1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25OYW1lICE9IG51bGxcbiAgICAgICAgICAgICAgICAgID8gYFN1YnNjcmlwdGlvbiBcIiR7b3BlcmF0aW9uTmFtZX1cIiBtdXN0IHNlbGVjdCBvbmx5IG9uZSB0b3AgbGV2ZWwgZmllbGQuYFxuICAgICAgICAgICAgICAgICAgOiAnQW5vbnltb3VzIFN1YnNjcmlwdGlvbiBtdXN0IHNlbGVjdCBvbmx5IG9uZSB0b3AgbGV2ZWwgZmllbGQuJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogZXh0cmFGaWVsZFNlbGVjdGlvbnMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChjb25zdCBmaWVsZE5vZGVzIG9mIGZpZWxkcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZE5vZGVzWzBdO1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGQubmFtZS52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbk5hbWUgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGBTdWJzY3JpcHRpb24gXCIke29wZXJhdGlvbk5hbWV9XCIgbXVzdCBub3Qgc2VsZWN0IGFuIGludHJvc3BlY3Rpb24gdG9wIGxldmVsIGZpZWxkLmBcbiAgICAgICAgICAgICAgICAgICAgOiAnQW5vbnltb3VzIFN1YnNjcmlwdGlvbiBtdXN0IG5vdCBzZWxlY3QgYW4gaW50cm9zcGVjdGlvbiB0b3AgbGV2ZWwgZmllbGQuJyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IGZpZWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IGdyb3VwQnkgfSBmcm9tICcuLi8uLi9qc3V0aWxzL2dyb3VwQnkubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBhcmd1bWVudCBkZWZpbml0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIE9iamVjdCBvciBJbnRlcmZhY2UgdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgZmllbGRzIGhhdmUgdW5pcXVlbHkgbmFtZWQgYXJndW1lbnRzLlxuICogQSBHcmFwaFFMIERpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgYXJndW1lbnRzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlRGVmaW5pdGlvbihkaXJlY3RpdmVOb2RlKSB7XG4gICAgICB2YXIgX2RpcmVjdGl2ZU5vZGUkYXJndW1lO1xuXG4gICAgICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICAgICAgY29uc3QgYXJndW1lbnROb2RlcyA9XG4gICAgICAgIChfZGlyZWN0aXZlTm9kZSRhcmd1bWUgPSBkaXJlY3RpdmVOb2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiZcbiAgICAgICAgX2RpcmVjdGl2ZU5vZGUkYXJndW1lICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9kaXJlY3RpdmVOb2RlJGFyZ3VtZVxuICAgICAgICAgIDogW107XG4gICAgICByZXR1cm4gY2hlY2tBcmdVbmlxdWVuZXNzKGBAJHtkaXJlY3RpdmVOb2RlLm5hbWUudmFsdWV9YCwgYXJndW1lbnROb2Rlcyk7XG4gICAgfSxcblxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgICBPYmplY3RUeXBlRGVmaW5pdGlvbjogY2hlY2tBcmdVbmlxdWVuZXNzUGVyRmllbGQsXG4gICAgT2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tBcmdVbmlxdWVuZXNzUGVyRmllbGQsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tBcmdVbmlxdWVuZXNzUGVyRmllbGQodHlwZU5vZGUpIHtcbiAgICB2YXIgX3R5cGVOb2RlJGZpZWxkcztcblxuICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZU5vZGUubmFtZS52YWx1ZTsgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgICBjb25zdCBmaWVsZE5vZGVzID1cbiAgICAgIChfdHlwZU5vZGUkZmllbGRzID0gdHlwZU5vZGUuZmllbGRzKSAhPT0gbnVsbCAmJlxuICAgICAgX3R5cGVOb2RlJGZpZWxkcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX3R5cGVOb2RlJGZpZWxkc1xuICAgICAgICA6IFtdO1xuXG4gICAgZm9yIChjb25zdCBmaWVsZERlZiBvZiBmaWVsZE5vZGVzKSB7XG4gICAgICB2YXIgX2ZpZWxkRGVmJGFyZ3VtZW50cztcblxuICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGREZWYubmFtZS52YWx1ZTsgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgICAgY29uc3QgYXJndW1lbnROb2RlcyA9XG4gICAgICAgIChfZmllbGREZWYkYXJndW1lbnRzID0gZmllbGREZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgICAgICBfZmllbGREZWYkYXJndW1lbnRzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9maWVsZERlZiRhcmd1bWVudHNcbiAgICAgICAgICA6IFtdO1xuICAgICAgY2hlY2tBcmdVbmlxdWVuZXNzKGAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX1gLCBhcmd1bWVudE5vZGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0FyZ1VuaXF1ZW5lc3MocGFyZW50TmFtZSwgYXJndW1lbnROb2Rlcykge1xuICAgIGNvbnN0IHNlZW5BcmdzID0gZ3JvdXBCeShhcmd1bWVudE5vZGVzLCAoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSk7XG5cbiAgICBmb3IgKGNvbnN0IFthcmdOYW1lLCBhcmdOb2Rlc10gb2Ygc2VlbkFyZ3MpIHtcbiAgICAgIGlmIChhcmdOb2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBBcmd1bWVudCBcIiR7cGFyZW50TmFtZX0oJHthcmdOYW1lfTopXCIgY2FuIG9ubHkgYmUgZGVmaW5lZCBvbmNlLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBhcmdOb2Rlcy5tYXAoKG5vZGUpID0+IG5vZGUubmFtZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBncm91cEJ5IH0gZnJvbSAnLi4vLi4vanN1dGlscy9ncm91cEJ5Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcblxuLyoqXG4gKiBVbmlxdWUgYXJndW1lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZmllbGQgb3IgZGlyZWN0aXZlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHN1cHBsaWVkIGFyZ3VtZW50cyBhcmVcbiAqIHVuaXF1ZWx5IG5hbWVkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1Bcmd1bWVudC1OYW1lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlQXJndW1lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkOiBjaGVja0FyZ1VuaXF1ZW5lc3MsXG4gICAgRGlyZWN0aXZlOiBjaGVja0FyZ1VuaXF1ZW5lc3MsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tBcmdVbmlxdWVuZXNzKHBhcmVudE5vZGUpIHtcbiAgICB2YXIgX3BhcmVudE5vZGUkYXJndW1lbnRzO1xuXG4gICAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3QgYXJndW1lbnROb2RlcyA9XG4gICAgICAoX3BhcmVudE5vZGUkYXJndW1lbnRzID0gcGFyZW50Tm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmXG4gICAgICBfcGFyZW50Tm9kZSRhcmd1bWVudHMgIT09IHZvaWQgMFxuICAgICAgICA/IF9wYXJlbnROb2RlJGFyZ3VtZW50c1xuICAgICAgICA6IFtdO1xuICAgIGNvbnN0IHNlZW5BcmdzID0gZ3JvdXBCeShhcmd1bWVudE5vZGVzLCAoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSk7XG5cbiAgICBmb3IgKGNvbnN0IFthcmdOYW1lLCBhcmdOb2Rlc10gb2Ygc2VlbkFyZ3MpIHtcbiAgICAgIGlmIChhcmdOb2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgYXJndW1lbnQgbmFtZWQgXCIke2FyZ05hbWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IGFyZ05vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS5uYW1lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBkaXJlY3RpdmUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBkaXJlY3RpdmVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25EaXJlY3RpdmVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHNjaGVtYSAhPT0gbnVsbCAmJlxuICAgICAgICBzY2hlbWEgIT09IHZvaWQgMCAmJlxuICAgICAgICBzY2hlbWEuZ2V0RGlyZWN0aXZlKGRpcmVjdGl2ZU5hbWUpXG4gICAgICApIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYERpcmVjdGl2ZSBcIkAke2RpcmVjdGl2ZU5hbWV9XCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGJlIHJlZGVmaW5lZC5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZS5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrbm93bkRpcmVjdGl2ZU5hbWVzW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgZGlyZWN0aXZlIG5hbWVkIFwiQCR7ZGlyZWN0aXZlTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0sIG5vZGUubmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrbm93bkRpcmVjdGl2ZU5hbWVzW2RpcmVjdGl2ZU5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gJy4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qcyc7XG5pbXBvcnQge1xuICBpc1R5cGVEZWZpbml0aW9uTm9kZSxcbiAgaXNUeXBlRXh0ZW5zaW9uTm9kZSxcbn0gZnJvbSAnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanMnO1xuaW1wb3J0IHsgc3BlY2lmaWVkRGlyZWN0aXZlcyB9IGZyb20gJy4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBkaXJlY3RpdmUgbmFtZXMgcGVyIGxvY2F0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIG5vbi1yZXBlYXRhYmxlIGRpcmVjdGl2ZXMgYXRcbiAqIGEgZ2l2ZW4gbG9jYXRpb24gYXJlIHVuaXF1ZWx5IG5hbWVkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1EaXJlY3RpdmVzLUFyZS1VbmlxdWUtUGVyLUxvY2F0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgdW5pcXVlRGlyZWN0aXZlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZERpcmVjdGl2ZXMgPSBzY2hlbWFcbiAgICA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKClcbiAgICA6IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgZGVmaW5lZERpcmVjdGl2ZXMpIHtcbiAgICB1bmlxdWVEaXJlY3RpdmVNYXBbZGlyZWN0aXZlLm5hbWVdID0gIWRpcmVjdGl2ZS5pc1JlcGVhdGFibGU7XG4gIH1cblxuICBjb25zdCBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKGNvbnN0IGRlZiBvZiBhc3REZWZpbml0aW9ucykge1xuICAgIGlmIChkZWYua2luZCA9PT0gS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTikge1xuICAgICAgdW5pcXVlRGlyZWN0aXZlTWFwW2RlZi5uYW1lLnZhbHVlXSA9ICFkZWYucmVwZWF0YWJsZTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzY2hlbWFEaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdHlwZURpcmVjdGl2ZXNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIC8vIE1hbnkgZGlmZmVyZW50IEFTVCBub2RlcyBtYXkgY29udGFpbiBkaXJlY3RpdmVzLiBSYXRoZXIgdGhhbiBsaXN0aW5nXG4gICAgLy8gdGhlbSBhbGwsIGp1c3QgbGlzdGVuIGZvciBlbnRlcmluZyBhbnkgbm9kZSwgYW5kIGNoZWNrIHRvIHNlZSBpZiBpdFxuICAgIC8vIGRlZmluZXMgYW55IGRpcmVjdGl2ZXMuXG4gICAgZW50ZXIobm9kZSkge1xuICAgICAgaWYgKCEoJ2RpcmVjdGl2ZXMnIGluIG5vZGUpIHx8ICFub2RlLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2VlbkRpcmVjdGl2ZXM7XG5cbiAgICAgIGlmIChcbiAgICAgICAgbm9kZS5raW5kID09PSBLaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8XG4gICAgICAgIG5vZGUua2luZCA9PT0gS2luZC5TQ0hFTUFfRVhURU5TSU9OXG4gICAgICApIHtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSBzY2hlbWFEaXJlY3RpdmVzO1xuICAgICAgfSBlbHNlIGlmIChpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB8fCBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICBzZWVuRGlyZWN0aXZlcyA9IHR5cGVEaXJlY3RpdmVzTWFwW3R5cGVOYW1lXTtcblxuICAgICAgICBpZiAoc2VlbkRpcmVjdGl2ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHR5cGVEaXJlY3RpdmVzTWFwW3R5cGVOYW1lXSA9IHNlZW5EaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBub2RlLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgIGlmICh1bmlxdWVEaXJlY3RpdmVNYXBbZGlyZWN0aXZlTmFtZV0pIHtcbiAgICAgICAgICBpZiAoc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0pIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmUgXCJAJHtkaXJlY3RpdmVOYW1lfVwiIGNhbiBvbmx5IGJlIHVzZWQgb25jZSBhdCB0aGlzIGxvY2F0aW9uLmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IFtzZWVuRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHsgaXNFbnVtVHlwZSB9IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBlbnVtIHZhbHVlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGVudW0gdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFsdWVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBrbm93blZhbHVlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIEVudW1UeXBlRGVmaW5pdGlvbjogY2hlY2tWYWx1ZVVuaXF1ZW5lc3MsXG4gICAgRW51bVR5cGVFeHRlbnNpb246IGNoZWNrVmFsdWVVbmlxdWVuZXNzLFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrVmFsdWVVbmlxdWVuZXNzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkdmFsdWVzO1xuXG4gICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoIWtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0pIHtcbiAgICAgIGtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH0gLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgICBjb25zdCB2YWx1ZU5vZGVzID1cbiAgICAgIChfbm9kZSR2YWx1ZXMgPSBub2RlLnZhbHVlcykgIT09IG51bGwgJiYgX25vZGUkdmFsdWVzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfbm9kZSR2YWx1ZXNcbiAgICAgICAgOiBbXTtcbiAgICBjb25zdCB2YWx1ZU5hbWVzID0ga25vd25WYWx1ZU5hbWVzW3R5cGVOYW1lXTtcblxuICAgIGZvciAoY29uc3QgdmFsdWVEZWYgb2YgdmFsdWVOb2Rlcykge1xuICAgICAgY29uc3QgdmFsdWVOYW1lID0gdmFsdWVEZWYubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVHlwZSA9IGV4aXN0aW5nVHlwZU1hcFt0eXBlTmFtZV07XG5cbiAgICAgIGlmIChpc0VudW1UeXBlKGV4aXN0aW5nVHlwZSkgJiYgZXhpc3RpbmdUeXBlLmdldFZhbHVlKHZhbHVlTmFtZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEVudW0gdmFsdWUgXCIke3R5cGVOYW1lfS4ke3ZhbHVlTmFtZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBleHRlbnNpb24uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IHZhbHVlRGVmLm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZXNbdmFsdWVOYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRW51bSB2YWx1ZSBcIiR7dHlwZU5hbWV9LiR7dmFsdWVOYW1lfVwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW3ZhbHVlTmFtZXNbdmFsdWVOYW1lXSwgdmFsdWVEZWYubmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZU5hbWVzW3ZhbHVlTmFtZV0gPSB2YWx1ZURlZi5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQge1xuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc09iamVjdFR5cGUsXG59IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBmaWVsZCBkZWZpbml0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGNvbXBsZXggdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgZmllbGRzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBrbm93bkZpZWxkTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0ZpZWxkVW5pcXVlbmVzcyhub2RlKSB7XG4gICAgdmFyIF9ub2RlJGZpZWxkcztcblxuICAgIGNvbnN0IHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKCFrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9IC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgY29uc3QgZmllbGROb2RlcyA9XG4gICAgICAoX25vZGUkZmllbGRzID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGUkZmllbGRzXG4gICAgICAgIDogW107XG4gICAgY29uc3QgZmllbGROYW1lcyA9IGtub3duRmllbGROYW1lc1t0eXBlTmFtZV07XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIGZpZWxkTm9kZXMpIHtcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkRGVmLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChoYXNGaWVsZChleGlzdGluZ1R5cGVNYXBbdHlwZU5hbWVdLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGaWVsZCBcIiR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfVwiIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBhbHNvIGJlIGRlZmluZWQgaW4gdGhpcyB0eXBlIGV4dGVuc2lvbi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogZmllbGREZWYubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGROYW1lc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGaWVsZCBcIiR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfVwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2ZpZWxkTmFtZXNbZmllbGROYW1lXSwgZmllbGREZWYubmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZE5hbWVzW2ZpZWxkTmFtZV0gPSBmaWVsZERlZi5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNGaWVsZCh0eXBlLCBmaWVsZE5hbWUpIHtcbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gdHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdICE9IG51bGw7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcblxuLyoqXG4gKiBVbmlxdWUgZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBmcmFnbWVudHMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50LU5hbWUtVW5pcXVlbmVzc1xuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBrbm93bkZyYWdtZW50TmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246ICgpID0+IGZhbHNlLFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IGZyYWdtZW50TmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKGtub3duRnJhZ21lbnROYW1lc1tmcmFnbWVudE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgZnJhZ21lbnQgbmFtZWQgXCIke2ZyYWdtZW50TmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duRnJhZ21lbnROYW1lc1tmcmFnbWVudE5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vanN1dGlscy9pbnZhcmlhbnQubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBpbnB1dCBmaWVsZCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBpbnB1dCBvYmplY3QgdmFsdWUgaXMgb25seSB2YWxpZCBpZiBhbGwgc3VwcGxpZWQgZmllbGRzIGFyZVxuICogdW5pcXVlbHkgbmFtZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUlucHV0LU9iamVjdC1GaWVsZC1VbmlxdWVuZXNzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25OYW1lU3RhY2sgPSBbXTtcbiAgbGV0IGtub3duTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9iamVjdFZhbHVlOiB7XG4gICAgICBlbnRlcigpIHtcbiAgICAgICAga25vd25OYW1lU3RhY2sucHVzaChrbm93bk5hbWVzKTtcbiAgICAgICAga25vd25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9LFxuXG4gICAgICBsZWF2ZSgpIHtcbiAgICAgICAgY29uc3QgcHJldktub3duTmFtZXMgPSBrbm93bk5hbWVTdGFjay5wb3AoKTtcbiAgICAgICAgcHJldktub3duTmFtZXMgfHwgaW52YXJpYW50KGZhbHNlKTtcbiAgICAgICAga25vd25OYW1lcyA9IHByZXZLbm93bk5hbWVzO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25OYW1lc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgaW5wdXQgZmllbGQgbmFtZWQgXCIke2ZpZWxkTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duTmFtZXNbZmllbGROYW1lXSwgbm9kZS5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duTmFtZXNbZmllbGROYW1lXSA9IG5vZGUubmFtZTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5cbi8qKlxuICogVW5pcXVlIG9wZXJhdGlvbiBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIG9wZXJhdGlvbnMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLU9wZXJhdGlvbi1OYW1lLVVuaXF1ZW5lc3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IGtub3duT3BlcmF0aW9uTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IG5vZGUubmFtZTtcblxuICAgICAgaWYgKG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0pIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSBvcGVyYXRpb24gbmFtZWQgXCIke29wZXJhdGlvbk5hbWUudmFsdWV9XCIuYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBbXG4gICAgICAgICAgICAgICAgICBrbm93bk9wZXJhdGlvbk5hbWVzW29wZXJhdGlvbk5hbWUudmFsdWVdLFxuICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0gPSBvcGVyYXRpb25OYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSBvcGVyYXRpb24gdHlwZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBpdCBoYXMgb25seSBvbmUgdHlwZSBwZXIgb3BlcmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZE9wZXJhdGlvblR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZXhpc3RpbmdPcGVyYXRpb25UeXBlcyA9IHNjaGVtYVxuICAgID8ge1xuICAgICAgICBxdWVyeTogc2NoZW1hLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgICBtdXRhdGlvbjogc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgICAgICBzdWJzY3JpcHRpb246IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCksXG4gICAgICB9XG4gICAgOiB7fTtcbiAgcmV0dXJuIHtcbiAgICBTY2hlbWFEZWZpbml0aW9uOiBjaGVja09wZXJhdGlvblR5cGVzLFxuICAgIFNjaGVtYUV4dGVuc2lvbjogY2hlY2tPcGVyYXRpb25UeXBlcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja09wZXJhdGlvblR5cGVzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkb3BlcmF0aW9uVHlwZXM7XG5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgb3BlcmF0aW9uVHlwZXNOb2RlcyA9XG4gICAgICAoX25vZGUkb3BlcmF0aW9uVHlwZXMgPSBub2RlLm9wZXJhdGlvblR5cGVzKSAhPT0gbnVsbCAmJlxuICAgICAgX25vZGUkb3BlcmF0aW9uVHlwZXMgIT09IHZvaWQgMFxuICAgICAgICA/IF9ub2RlJG9wZXJhdGlvblR5cGVzXG4gICAgICAgIDogW107XG5cbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvblR5cGUgb2Ygb3BlcmF0aW9uVHlwZXNOb2Rlcykge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9uVHlwZS5vcGVyYXRpb247XG4gICAgICBjb25zdCBhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUgPSBkZWZpbmVkT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXTtcblxuICAgICAgaWYgKGV4aXN0aW5nT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVHlwZSBmb3IgJHtvcGVyYXRpb259IGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYmUgcmVkZWZpbmVkLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBvcGVyYXRpb25UeXBlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSAke29wZXJhdGlvbn0gdHlwZSBpbiBzY2hlbWEuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IFthbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUsIG9wZXJhdGlvblR5cGVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lZE9wZXJhdGlvblR5cGVzW29wZXJhdGlvbl0gPSBvcGVyYXRpb25UeXBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5cbi8qKlxuICogVW5pcXVlIHR5cGUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCB0eXBlcyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZVR5cGVOYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBrbm93blR5cGVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHJldHVybiB7XG4gICAgU2NhbGFyVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgT2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgVW5pb25UeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgICBFbnVtVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja1R5cGVOYW1lKG5vZGUpIHtcbiAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgIGlmIChzY2hlbWEgIT09IG51bGwgJiYgc2NoZW1hICE9PSB2b2lkIDAgJiYgc2NoZW1hLmdldFR5cGUodHlwZU5hbWUpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBUeXBlIFwiJHt0eXBlTmFtZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBkZWZpbml0aW9uLmAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUubmFtZSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa25vd25UeXBlTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgR3JhcGhRTEVycm9yKGBUaGVyZSBjYW4gYmUgb25seSBvbmUgdHlwZSBuYW1lZCBcIiR7dHlwZU5hbWV9XCIuYCwge1xuICAgICAgICAgIG5vZGVzOiBba25vd25UeXBlTmFtZXNbdHlwZU5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtub3duVHlwZU5hbWVzW3R5cGVOYW1lXSA9IG5vZGUubmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IGdyb3VwQnkgfSBmcm9tICcuLi8uLi9qc3V0aWxzL2dyb3VwQnkubWpzJztcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuXG4vKipcbiAqIFVuaXF1ZSB2YXJpYWJsZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBvcGVyYXRpb24gaXMgb25seSB2YWxpZCBpZiBhbGwgaXRzIHZhcmlhYmxlcyBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVWYXJpYWJsZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihvcGVyYXRpb25Ob2RlKSB7XG4gICAgICB2YXIgX29wZXJhdGlvbk5vZGUkdmFyaWFiO1xuXG4gICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgIGNvbnN0IHZhcmlhYmxlRGVmaW5pdGlvbnMgPVxuICAgICAgICAoX29wZXJhdGlvbk5vZGUkdmFyaWFiID0gb3BlcmF0aW9uTm9kZS52YXJpYWJsZURlZmluaXRpb25zKSAhPT0gbnVsbCAmJlxuICAgICAgICBfb3BlcmF0aW9uTm9kZSR2YXJpYWIgIT09IHZvaWQgMFxuICAgICAgICAgID8gX29wZXJhdGlvbk5vZGUkdmFyaWFiXG4gICAgICAgICAgOiBbXTtcbiAgICAgIGNvbnN0IHNlZW5WYXJpYWJsZURlZmluaXRpb25zID0gZ3JvdXBCeShcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9ucyxcbiAgICAgICAgKG5vZGUpID0+IG5vZGUudmFyaWFibGUubmFtZS52YWx1ZSxcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgW3ZhcmlhYmxlTmFtZSwgdmFyaWFibGVOb2Rlc10gb2Ygc2VlblZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKHZhcmlhYmxlTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgVGhlcmUgY2FuIGJlIG9ubHkgb25lIHZhcmlhYmxlIG5hbWVkIFwiJCR7dmFyaWFibGVOYW1lfVwiLmAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2RlczogdmFyaWFibGVOb2Rlcy5tYXAoKG5vZGUpID0+IG5vZGUudmFyaWFibGUubmFtZSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgZGlkWW91TWVhbiB9IGZyb20gJy4uLy4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsga2V5TWFwIH0gZnJvbSAnLi4vLi4vanN1dGlscy9rZXlNYXAubWpzJztcbmltcG9ydCB7IHN1Z2dlc3Rpb25MaXN0IH0gZnJvbSAnLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gJy4uLy4uL2xhbmd1YWdlL3ByaW50ZXIubWpzJztcbmltcG9ydCB7XG4gIGdldE5hbWVkVHlwZSxcbiAgZ2V0TnVsbGFibGVUeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNMZWFmVHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNOb25OdWxsVHlwZSxcbiAgaXNSZXF1aXJlZElucHV0RmllbGQsXG59IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuXG4vKipcbiAqIFZhbHVlIGxpdGVyYWxzIG9mIGNvcnJlY3QgdHlwZVxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCB2YWx1ZSBsaXRlcmFscyBhcmUgb2YgdGhlIHR5cGVcbiAqIGV4cGVjdGVkIGF0IHRoZWlyIHBvc2l0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1WYWx1ZXMtb2YtQ29ycmVjdC1UeXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgTGlzdFZhbHVlKG5vZGUpIHtcbiAgICAgIC8vIE5vdGU6IFR5cGVJbmZvIHdpbGwgdHJhdmVyc2UgaW50byBhIGxpc3QncyBpdGVtIHR5cGUsIHNvIGxvb2sgdG8gdGhlXG4gICAgICAvLyBwYXJlbnQgaW5wdXQgdHlwZSB0byBjaGVjayBpZiBpdCBpcyBhIGxpc3QuXG4gICAgICBjb25zdCB0eXBlID0gZ2V0TnVsbGFibGVUeXBlKGNvbnRleHQuZ2V0UGFyZW50SW5wdXRUeXBlKCkpO1xuXG4gICAgICBpZiAoIWlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgICAgaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBEb24ndCB0cmF2ZXJzZSBmdXJ0aGVyLlxuICAgICAgfVxuICAgIH0sXG5cbiAgICBPYmplY3RWYWx1ZShub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gZ2V0TmFtZWRUeXBlKGNvbnRleHQuZ2V0SW5wdXRUeXBlKCkpO1xuXG4gICAgICBpZiAoIWlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gRG9uJ3QgdHJhdmVyc2UgZnVydGhlci5cbiAgICAgIH0gLy8gRW5zdXJlIGV2ZXJ5IHJlcXVpcmVkIGZpZWxkIGV4aXN0cy5cblxuICAgICAgY29uc3QgZmllbGROb2RlTWFwID0ga2V5TWFwKG5vZGUuZmllbGRzLCAoZmllbGQpID0+IGZpZWxkLm5hbWUudmFsdWUpO1xuXG4gICAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIE9iamVjdC52YWx1ZXModHlwZS5nZXRGaWVsZHMoKSkpIHtcbiAgICAgICAgY29uc3QgZmllbGROb2RlID0gZmllbGROb2RlTWFwW2ZpZWxkRGVmLm5hbWVdO1xuXG4gICAgICAgIGlmICghZmllbGROb2RlICYmIGlzUmVxdWlyZWRJbnB1dEZpZWxkKGZpZWxkRGVmKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSBpbnNwZWN0KGZpZWxkRGVmLnR5cGUpO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke3R5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiIG9mIHJlcXVpcmVkIHR5cGUgXCIke3R5cGVTdHJ9XCIgd2FzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpKTtcbiAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IGNvbnRleHQuZ2V0SW5wdXRUeXBlKCk7XG5cbiAgICAgIGlmICghZmllbGRUeXBlICYmIGlzSW5wdXRPYmplY3RUeXBlKHBhcmVudFR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkxpc3QoXG4gICAgICAgICAgbm9kZS5uYW1lLnZhbHVlLFxuICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmVudFR5cGUuZ2V0RmllbGRzKCkpLFxuICAgICAgICApO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRmllbGQgXCIke25vZGUubmFtZS52YWx1ZX1cIiBpcyBub3QgZGVmaW5lZCBieSB0eXBlIFwiJHtwYXJlbnRUeXBlLm5hbWV9XCIuYCArXG4gICAgICAgICAgICAgIGRpZFlvdU1lYW4oc3VnZ2VzdGlvbnMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgTnVsbFZhbHVlKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gICAgICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcIiR7aW5zcGVjdCh0eXBlKX1cIiwgZm91bmQgJHtwcmludChub2RlKX0uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIEVudW1WYWx1ZTogKG5vZGUpID0+IGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSksXG4gICAgSW50VmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICAgIEZsb2F0VmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICAgIFN0cmluZ1ZhbHVlOiAobm9kZSkgPT4gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKSxcbiAgICBCb29sZWFuVmFsdWU6IChub2RlKSA9PiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpLFxuICB9O1xufVxuLyoqXG4gKiBBbnkgdmFsdWUgbGl0ZXJhbCBtYXkgYmUgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhIFNjYWxhciwgZGVwZW5kaW5nIG9uXG4gKiB0aGF0IHNjYWxhciB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSkge1xuICAvLyBSZXBvcnQgYW55IGVycm9yIGF0IHRoZSBmdWxsIHR5cGUgZXhwZWN0ZWQgYnkgdGhlIGxvY2F0aW9uLlxuICBjb25zdCBsb2NhdGlvblR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gIGlmICghbG9jYXRpb25UeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdHlwZSA9IGdldE5hbWVkVHlwZShsb2NhdGlvblR5cGUpO1xuXG4gIGlmICghaXNMZWFmVHlwZSh0eXBlKSkge1xuICAgIGNvbnN0IHR5cGVTdHIgPSBpbnNwZWN0KGxvY2F0aW9uVHlwZSk7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCB2YWx1ZSBvZiB0eXBlIFwiJHt0eXBlU3RyfVwiLCBmb3VuZCAke3ByaW50KG5vZGUpfS5gLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgIH0sXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFNjYWxhcnMgYW5kIEVudW1zIGRldGVybWluZSBpZiBhIGxpdGVyYWwgdmFsdWUgaXMgdmFsaWQgdmlhIHBhcnNlTGl0ZXJhbCgpLFxuICAvLyB3aGljaCBtYXkgdGhyb3cgb3IgcmV0dXJuIGFuIGludmFsaWQgdmFsdWUgdG8gaW5kaWNhdGUgZmFpbHVyZS5cblxuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gdHlwZS5wYXJzZUxpdGVyYWwoXG4gICAgICBub2RlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgLyogdmFyaWFibGVzICovXG4gICAgKTtcblxuICAgIGlmIChwYXJzZVJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0eXBlU3RyID0gaW5zcGVjdChsb2NhdGlvblR5cGUpO1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcIiR7dHlwZVN0cn1cIiwgZm91bmQgJHtwcmludChub2RlKX0uYCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgdHlwZVN0ciA9IGluc3BlY3QobG9jYXRpb25UeXBlKTtcblxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgIG5ldyBHcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXCIke3R5cGVTdHJ9XCIsIGZvdW5kICR7cHJpbnQobm9kZSl9OyBgICtcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qcyc7XG5pbXBvcnQgeyBpc0lucHV0VHlwZSB9IGZyb20gJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanMnO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzJztcblxuLyoqXG4gKiBWYXJpYWJsZXMgYXJlIGlucHV0IHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCB0aGUgdmFyaWFibGVzIGl0IGRlZmluZXMgYXJlIG9mXG4gKiBpbnB1dCB0eXBlcyAoc2NhbGFyLCBlbnVtLCBvciBpbnB1dCBvYmplY3QpLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1WYXJpYWJsZXMtQXJlLUlucHV0LVR5cGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgVmFyaWFibGVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0eXBlRnJvbUFTVChjb250ZXh0LmdldFNjaGVtYSgpLCBub2RlLnR5cGUpO1xuXG4gICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmICFpc0lucHV0VHlwZSh0eXBlKSkge1xuICAgICAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSBub2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gcHJpbnQobm9kZS50eXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyaWFibGVOYW1lfVwiIGNhbm5vdCBiZSBub24taW5wdXQgdHlwZSBcIiR7dHlwZU5hbWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUudHlwZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qcyc7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSAnLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzJztcbmltcG9ydCB7IGlzTm9uTnVsbFR5cGUgfSBmcm9tICcuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzJztcbmltcG9ydCB7IGlzVHlwZVN1YlR5cGVPZiB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMubWpzJztcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qcyc7XG5cbi8qKlxuICogVmFyaWFibGVzIGluIGFsbG93ZWQgcG9zaXRpb25cbiAqXG4gKiBWYXJpYWJsZSB1c2FnZXMgbXVzdCBiZSBjb21wYXRpYmxlIHdpdGggdGhlIGFyZ3VtZW50cyB0aGV5IGFyZSBwYXNzZWQgdG8uXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFsbC1WYXJpYWJsZS1Vc2FnZXMtYXJlLUFsbG93ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZShjb250ZXh0KSB7XG4gIGxldCB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyKCkge1xuICAgICAgICB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSwgdHlwZSwgZGVmYXVsdFZhbHVlIH0gb2YgdXNhZ2VzKSB7XG4gICAgICAgICAgY29uc3QgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICBjb25zdCB2YXJEZWYgPSB2YXJEZWZNYXBbdmFyTmFtZV07XG5cbiAgICAgICAgICBpZiAodmFyRGVmICYmIHR5cGUpIHtcbiAgICAgICAgICAgIC8vIEEgdmFyIHR5cGUgaXMgYWxsb3dlZCBpZiBpdCBpcyB0aGUgc2FtZSBvciBtb3JlIHN0cmljdCAoZS5nLiBpc1xuICAgICAgICAgICAgLy8gYSBzdWJ0eXBlIG9mKSB0aGFuIHRoZSBleHBlY3RlZCB0eXBlLiBJdCBjYW4gYmUgbW9yZSBzdHJpY3QgaWZcbiAgICAgICAgICAgIC8vIHRoZSB2YXJpYWJsZSB0eXBlIGlzIG5vbi1udWxsIHdoZW4gdGhlIGV4cGVjdGVkIHR5cGUgaXMgbnVsbGFibGUuXG4gICAgICAgICAgICAvLyBJZiBib3RoIGFyZSBsaXN0IHR5cGVzLCB0aGUgdmFyaWFibGUgaXRlbSB0eXBlIGNhbiBiZSBtb3JlIHN0cmljdFxuICAgICAgICAgICAgLy8gdGhhbiB0aGUgZXhwZWN0ZWQgaXRlbSB0eXBlIChjb250cmF2YXJpYW50KS5cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgICBjb25zdCB2YXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB2YXJEZWYudHlwZSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdmFyVHlwZSAmJlxuICAgICAgICAgICAgICAhYWxsb3dlZFZhcmlhYmxlVXNhZ2UoXG4gICAgICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgICAgIHZhclR5cGUsXG4gICAgICAgICAgICAgICAgdmFyRGVmLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSBpbnNwZWN0KHZhclR5cGUpO1xuICAgICAgICAgICAgICBjb25zdCB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBvZiB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHVzZWQgaW4gcG9zaXRpb24gZXhwZWN0aW5nIHR5cGUgXCIke3R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IFt2YXJEZWYsIG5vZGVdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuXG4gICAgVmFyaWFibGVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhckRlZk1hcFtub2RlLnZhcmlhYmxlLm5hbWUudmFsdWVdID0gbm9kZTtcbiAgICB9LFxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFsbG93ZWQgaW4gdGhlIGxvY2F0aW9uIGl0IHdhcyBmb3VuZCxcbiAqIHdoaWNoIGluY2x1ZGVzIGNvbnNpZGVyaW5nIGlmIGRlZmF1bHQgdmFsdWVzIGV4aXN0IGZvciBlaXRoZXIgdGhlIHZhcmlhYmxlXG4gKiBvciB0aGUgbG9jYXRpb24gYXQgd2hpY2ggaXQgaXMgbG9jYXRlZC5cbiAqL1xuXG5mdW5jdGlvbiBhbGxvd2VkVmFyaWFibGVVc2FnZShcbiAgc2NoZW1hLFxuICB2YXJUeXBlLFxuICB2YXJEZWZhdWx0VmFsdWUsXG4gIGxvY2F0aW9uVHlwZSxcbiAgbG9jYXRpb25EZWZhdWx0VmFsdWUsXG4pIHtcbiAgaWYgKGlzTm9uTnVsbFR5cGUobG9jYXRpb25UeXBlKSAmJiAhaXNOb25OdWxsVHlwZSh2YXJUeXBlKSkge1xuICAgIGNvbnN0IGhhc05vbk51bGxWYXJpYWJsZURlZmF1bHRWYWx1ZSA9XG4gICAgICB2YXJEZWZhdWx0VmFsdWUgIT0gbnVsbCAmJiB2YXJEZWZhdWx0VmFsdWUua2luZCAhPT0gS2luZC5OVUxMO1xuICAgIGNvbnN0IGhhc0xvY2F0aW9uRGVmYXVsdFZhbHVlID0gbG9jYXRpb25EZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmICghaGFzTm9uTnVsbFZhcmlhYmxlRGVmYXVsdFZhbHVlICYmICFoYXNMb2NhdGlvbkRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG51bGxhYmxlTG9jYXRpb25UeXBlID0gbG9jYXRpb25UeXBlLm9mVHlwZTtcbiAgICByZXR1cm4gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgdmFyVHlwZSwgbnVsbGFibGVMb2NhdGlvblR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIHZhclR5cGUsIGxvY2F0aW9uVHlwZSk7XG59XG4iLCIvLyBTcGVjIFNlY3Rpb246IFwiRXhlY3V0YWJsZSBEZWZpbml0aW9uc1wiXG5pbXBvcnQgeyBFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlIH0gZnJvbSAnLi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJGaWVsZCBTZWxlY3Rpb25zIG9uIE9iamVjdHMsIEludGVyZmFjZXMsIGFuZCBVbmlvbnMgVHlwZXNcIlxuXG5pbXBvcnQgeyBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSB9IGZyb20gJy4vcnVsZXMvRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBvbiBDb21wb3NpdGUgVHlwZXNcIlxuXG5pbXBvcnQgeyBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZSB9IGZyb20gJy4vcnVsZXMvRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkFyZ3VtZW50IE5hbWVzXCJcblxuaW1wb3J0IHtcbiAgS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZSxcbiAgS25vd25Bcmd1bWVudE5hbWVzUnVsZSxcbn0gZnJvbSAnLi9ydWxlcy9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJEaXJlY3RpdmVzIEFyZSBEZWZpbmVkXCJcblxuaW1wb3J0IHsgS25vd25EaXJlY3RpdmVzUnVsZSB9IGZyb20gJy4vcnVsZXMvS25vd25EaXJlY3RpdmVzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnQgc3ByZWFkIHRhcmdldCBkZWZpbmVkXCJcblxuaW1wb3J0IHsgS25vd25GcmFnbWVudE5hbWVzUnVsZSB9IGZyb20gJy4vcnVsZXMvS25vd25GcmFnbWVudE5hbWVzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnQgU3ByZWFkIFR5cGUgRXhpc3RlbmNlXCJcblxuaW1wb3J0IHsgS25vd25UeXBlTmFtZXNSdWxlIH0gZnJvbSAnLi9ydWxlcy9Lbm93blR5cGVOYW1lc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkxvbmUgQW5vbnltb3VzIE9wZXJhdGlvblwiXG5cbmltcG9ydCB7IExvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlIH0gZnJvbSAnLi9ydWxlcy9Mb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZS5tanMnOyAvLyBTREwtc3BlY2lmaWMgdmFsaWRhdGlvbiBydWxlc1xuXG5pbXBvcnQgeyBMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUgfSBmcm9tICcuL3J1bGVzL0xvbmVTY2hlbWFEZWZpbml0aW9uUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnRzIG11c3Qgbm90IGZvcm0gY3ljbGVzXCJcblxuaW1wb3J0IHsgTm9GcmFnbWVudEN5Y2xlc1J1bGUgfSBmcm9tICcuL3J1bGVzL05vRnJhZ21lbnRDeWNsZXNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJBbGwgVmFyaWFibGUgVXNlZCBEZWZpbmVkXCJcblxuaW1wb3J0IHsgTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlIH0gZnJvbSAnLi9ydWxlcy9Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBtdXN0IGJlIHVzZWRcIlxuXG5pbXBvcnQgeyBOb1VudXNlZEZyYWdtZW50c1J1bGUgfSBmcm9tICcuL3J1bGVzL05vVW51c2VkRnJhZ21lbnRzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiQWxsIFZhcmlhYmxlcyBVc2VkXCJcblxuaW1wb3J0IHsgTm9VbnVzZWRWYXJpYWJsZXNSdWxlIH0gZnJvbSAnLi9ydWxlcy9Ob1VudXNlZFZhcmlhYmxlc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkZpZWxkIFNlbGVjdGlvbiBNZXJnaW5nXCJcblxuaW1wb3J0IHsgT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUgfSBmcm9tICcuL3J1bGVzL092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudCBzcHJlYWQgaXMgcG9zc2libGVcIlxuXG5pbXBvcnQgeyBQb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUgfSBmcm9tICcuL3J1bGVzL1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZS5tanMnO1xuaW1wb3J0IHsgUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUgfSBmcm9tICcuL3J1bGVzL1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJBcmd1bWVudCBPcHRpb25hbGl0eVwiXG5cbmltcG9ydCB7XG4gIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlLFxuICBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZSxcbn0gZnJvbSAnLi9ydWxlcy9Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiTGVhZiBGaWVsZCBTZWxlY3Rpb25zXCJcblxuaW1wb3J0IHsgU2NhbGFyTGVhZnNSdWxlIH0gZnJvbSAnLi9ydWxlcy9TY2FsYXJMZWFmc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIlN1YnNjcmlwdGlvbnMgd2l0aCBTaW5nbGUgUm9vdCBGaWVsZFwiXG5cbmltcG9ydCB7IFNpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUgfSBmcm9tICcuL3J1bGVzL1NpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUubWpzJztcbmltcG9ydCB7IFVuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZSB9IGZyb20gJy4vcnVsZXMvVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJBcmd1bWVudCBVbmlxdWVuZXNzXCJcblxuaW1wb3J0IHsgVW5pcXVlQXJndW1lbnROYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLm1qcyc7XG5pbXBvcnQgeyBVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiRGlyZWN0aXZlcyBBcmUgVW5pcXVlIFBlciBMb2NhdGlvblwiXG5cbmltcG9ydCB7IFVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUubWpzJztcbmltcG9ydCB7IFVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZSB9IGZyb20gJy4vcnVsZXMvVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLm1qcyc7XG5pbXBvcnQgeyBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZS5tanMnOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnQgTmFtZSBVbmlxdWVuZXNzXCJcblxuaW1wb3J0IHsgVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLm1qcyc7IC8vIFNwZWMgU2VjdGlvbjogXCJJbnB1dCBPYmplY3QgRmllbGQgVW5pcXVlbmVzc1wiXG5cbmltcG9ydCB7IFVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIk9wZXJhdGlvbiBOYW1lIFVuaXF1ZW5lc3NcIlxuXG5pbXBvcnQgeyBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZS5tanMnO1xuaW1wb3J0IHsgVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlIH0gZnJvbSAnLi9ydWxlcy9VbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUubWpzJztcbmltcG9ydCB7IFVuaXF1ZVR5cGVOYW1lc1J1bGUgfSBmcm9tICcuL3J1bGVzL1VuaXF1ZVR5cGVOYW1lc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIlZhcmlhYmxlIFVuaXF1ZW5lc3NcIlxuXG5pbXBvcnQgeyBVbmlxdWVWYXJpYWJsZU5hbWVzUnVsZSB9IGZyb20gJy4vcnVsZXMvVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIlZhbHVlIFR5cGUgQ29ycmVjdG5lc3NcIlxuXG5pbXBvcnQgeyBWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZSB9IGZyb20gJy4vcnVsZXMvVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIlZhcmlhYmxlcyBhcmUgSW5wdXQgVHlwZXNcIlxuXG5pbXBvcnQgeyBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSB9IGZyb20gJy4vcnVsZXMvVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUubWpzJzsgLy8gU3BlYyBTZWN0aW9uOiBcIkFsbCBWYXJpYWJsZSBVc2FnZXMgQXJlIEFsbG93ZWRcIlxuXG5pbXBvcnQgeyBWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUgfSBmcm9tICcuL3J1bGVzL1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZS5tanMnO1xuXG4vKipcbiAqIFRoaXMgc2V0IGluY2x1ZGVzIGFsbCB2YWxpZGF0aW9uIHJ1bGVzIGRlZmluZWQgYnkgdGhlIEdyYXBoUUwgc3BlYy5cbiAqXG4gKiBUaGUgb3JkZXIgb2YgdGhlIHJ1bGVzIGluIHRoaXMgbGlzdCBoYXMgYmVlbiBhZGp1c3RlZCB0byBsZWFkIHRvIHRoZVxuICogbW9zdCBjbGVhciBvdXRwdXQgd2hlbiBlbmNvdW50ZXJpbmcgbXVsdGlwbGUgdmFsaWRhdGlvbiBlcnJvcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBzcGVjaWZpZWRSdWxlcyA9IE9iamVjdC5mcmVlemUoW1xuICBFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLFxuICBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUsXG4gIExvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLFxuICBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLFxuICBLbm93blR5cGVOYW1lc1J1bGUsXG4gIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLFxuICBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSxcbiAgU2NhbGFyTGVhZnNSdWxlLFxuICBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSxcbiAgVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUsXG4gIEtub3duRnJhZ21lbnROYW1lc1J1bGUsXG4gIE5vVW51c2VkRnJhZ21lbnRzUnVsZSxcbiAgUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLFxuICBOb0ZyYWdtZW50Q3ljbGVzUnVsZSxcbiAgVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUsXG4gIE5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZSxcbiAgTm9VbnVzZWRWYXJpYWJsZXNSdWxlLFxuICBLbm93bkRpcmVjdGl2ZXNSdWxlLFxuICBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLFxuICBLbm93bkFyZ3VtZW50TmFtZXNSdWxlLFxuICBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZSxcbiAgVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUsXG4gIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLFxuICBWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUsXG4gIE92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLFxuICBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlLFxuXSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBjb25zdCBzcGVjaWZpZWRTRExSdWxlcyA9IE9iamVjdC5mcmVlemUoW1xuICBMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUsXG4gIFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSxcbiAgVW5pcXVlVHlwZU5hbWVzUnVsZSxcbiAgVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLFxuICBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUsXG4gIFVuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZSxcbiAgVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlLFxuICBLbm93blR5cGVOYW1lc1J1bGUsXG4gIEtub3duRGlyZWN0aXZlc1J1bGUsXG4gIFVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUsXG4gIFBvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLFxuICBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlLFxuICBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZSxcbiAgVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSxcbiAgUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c09uRGlyZWN0aXZlc1J1bGUsXG5dKTtcbiIsImltcG9ydCB7IGRldkFzc2VydCB9IGZyb20gJy4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICcuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzJztcbmltcG9ydCB7IHZpc2l0LCB2aXNpdEluUGFyYWxsZWwgfSBmcm9tICcuLi9sYW5ndWFnZS92aXNpdG9yLm1qcyc7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNjaGVtYSB9IGZyb20gJy4uL3R5cGUvdmFsaWRhdGUubWpzJztcbmltcG9ydCB7IFR5cGVJbmZvLCB2aXNpdFdpdGhUeXBlSW5mbyB9IGZyb20gJy4uL3V0aWxpdGllcy9UeXBlSW5mby5tanMnO1xuaW1wb3J0IHsgc3BlY2lmaWVkUnVsZXMsIHNwZWNpZmllZFNETFJ1bGVzIH0gZnJvbSAnLi9zcGVjaWZpZWRSdWxlcy5tanMnO1xuaW1wb3J0IHtcbiAgU0RMVmFsaWRhdGlvbkNvbnRleHQsXG4gIFZhbGlkYXRpb25Db250ZXh0LFxufSBmcm9tICcuL1ZhbGlkYXRpb25Db250ZXh0Lm1qcyc7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiVmFsaWRhdGlvblwiIHNlY3Rpb24gb2YgdGhlIHNwZWMuXG4gKlxuICogVmFsaWRhdGlvbiBydW5zIHN5bmNocm9ub3VzbHksIHJldHVybmluZyBhbiBhcnJheSBvZiBlbmNvdW50ZXJlZCBlcnJvcnMsIG9yXG4gKiBhbiBlbXB0eSBhcnJheSBpZiBubyBlcnJvcnMgd2VyZSBlbmNvdW50ZXJlZCBhbmQgdGhlIGRvY3VtZW50IGlzIHZhbGlkLlxuICpcbiAqIEEgbGlzdCBvZiBzcGVjaWZpYyB2YWxpZGF0aW9uIHJ1bGVzIG1heSBiZSBwcm92aWRlZC4gSWYgbm90IHByb3ZpZGVkLCB0aGVcbiAqIGRlZmF1bHQgbGlzdCBvZiBydWxlcyBkZWZpbmVkIGJ5IHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24gd2lsbCBiZSB1c2VkLlxuICpcbiAqIEVhY2ggdmFsaWRhdGlvbiBydWxlcyBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2aXNpdG9yXG4gKiAoc2VlIHRoZSBsYW5ndWFnZS92aXNpdG9yIEFQSSkuIFZpc2l0b3IgbWV0aG9kcyBhcmUgZXhwZWN0ZWQgdG8gcmV0dXJuXG4gKiBHcmFwaFFMRXJyb3JzLCBvciBBcnJheXMgb2YgR3JhcGhRTEVycm9ycyB3aGVuIGludmFsaWQuXG4gKlxuICogVmFsaWRhdGUgd2lsbCBzdG9wIHZhbGlkYXRpb24gYWZ0ZXIgYSBgbWF4RXJyb3JzYCBsaW1pdCBoYXMgYmVlbiByZWFjaGVkLlxuICogQXR0YWNrZXJzIGNhbiBzZW5kIHBhdGhvbG9naWNhbGx5IGludmFsaWQgcXVlcmllcyB0byBpbmR1Y2UgYSBEb1MgYXR0YWNrLFxuICogc28gYnkgZGVmYXVsdCBgbWF4RXJyb3JzYCBzZXQgdG8gMTAwIGVycm9ycy5cbiAqXG4gKiBPcHRpb25hbGx5IGEgY3VzdG9tIFR5cGVJbmZvIGluc3RhbmNlIG1heSBiZSBwcm92aWRlZC4gSWYgbm90IHByb3ZpZGVkLCBvbmVcbiAqIHdpbGwgYmUgY3JlYXRlZCBmcm9tIHRoZSBwcm92aWRlZCBzY2hlbWEuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKFxuICBzY2hlbWEsXG4gIGRvY3VtZW50QVNULFxuICBydWxlcyA9IHNwZWNpZmllZFJ1bGVzLFxuICBvcHRpb25zLFxuICAvKiogQGRlcHJlY2F0ZWQgd2lsbCBiZSByZW1vdmVkIGluIDE3LjAuMCAqL1xuICB0eXBlSW5mbyA9IG5ldyBUeXBlSW5mbyhzY2hlbWEpLFxuKSB7XG4gIHZhciBfb3B0aW9ucyRtYXhFcnJvcnM7XG5cbiAgY29uc3QgbWF4RXJyb3JzID1cbiAgICAoX29wdGlvbnMkbWF4RXJyb3JzID1cbiAgICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhFcnJvcnMpICE9PVxuICAgICAgbnVsbCAmJiBfb3B0aW9ucyRtYXhFcnJvcnMgIT09IHZvaWQgMFxuICAgICAgPyBfb3B0aW9ucyRtYXhFcnJvcnNcbiAgICAgIDogMTAwO1xuICBkb2N1bWVudEFTVCB8fCBkZXZBc3NlcnQoZmFsc2UsICdNdXN0IHByb3ZpZGUgZG9jdW1lbnQuJyk7IC8vIElmIHRoZSBzY2hlbWEgdXNlZCBmb3IgdmFsaWRhdGlvbiBpcyBpbnZhbGlkLCB0aHJvdyBhbiBlcnJvci5cblxuICBhc3NlcnRWYWxpZFNjaGVtYShzY2hlbWEpO1xuICBjb25zdCBhYm9ydE9iaiA9IE9iamVjdC5mcmVlemUoe30pO1xuICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBWYWxpZGF0aW9uQ29udGV4dChcbiAgICBzY2hlbWEsXG4gICAgZG9jdW1lbnRBU1QsXG4gICAgdHlwZUluZm8sXG4gICAgKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+PSBtYXhFcnJvcnMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgICAgbmV3IEdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICdUb28gbWFueSB2YWxpZGF0aW9uIGVycm9ycywgZXJyb3IgbGltaXQgcmVhY2hlZC4gVmFsaWRhdGlvbiBhYm9ydGVkLicsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aHJvdy1saXRlcmFsXG5cbiAgICAgICAgdGhyb3cgYWJvcnRPYmo7XG4gICAgICB9XG5cbiAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICB9LFxuICApOyAvLyBUaGlzIHVzZXMgYSBzcGVjaWFsaXplZCB2aXNpdG9yIHdoaWNoIHJ1bnMgbXVsdGlwbGUgdmlzaXRvcnMgaW4gcGFyYWxsZWwsXG4gIC8vIHdoaWxlIG1haW50YWluaW5nIHRoZSB2aXNpdG9yIHNraXAgYW5kIGJyZWFrIEFQSS5cblxuICBjb25zdCB2aXNpdG9yID0gdmlzaXRJblBhcmFsbGVsKHJ1bGVzLm1hcCgocnVsZSkgPT4gcnVsZShjb250ZXh0KSkpOyAvLyBWaXNpdCB0aGUgd2hvbGUgZG9jdW1lbnQgd2l0aCBlYWNoIGluc3RhbmNlIG9mIGFsbCBwcm92aWRlZCBydWxlcy5cblxuICB0cnkge1xuICAgIHZpc2l0KGRvY3VtZW50QVNULCB2aXNpdFdpdGhUeXBlSW5mbyh0eXBlSW5mbywgdmlzaXRvcikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgIT09IGFib3J0T2JqKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnM7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNETChcbiAgZG9jdW1lbnRBU1QsXG4gIHNjaGVtYVRvRXh0ZW5kLFxuICBydWxlcyA9IHNwZWNpZmllZFNETFJ1bGVzLFxuKSB7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBjb25zdCBjb250ZXh0ID0gbmV3IFNETFZhbGlkYXRpb25Db250ZXh0KFxuICAgIGRvY3VtZW50QVNULFxuICAgIHNjaGVtYVRvRXh0ZW5kLFxuICAgIChlcnJvcikgPT4ge1xuICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH0sXG4gICk7XG4gIGNvbnN0IHZpc2l0b3JzID0gcnVsZXMubWFwKChydWxlKSA9PiBydWxlKGNvbnRleHQpKTtcbiAgdmlzaXQoZG9jdW1lbnRBU1QsIHZpc2l0SW5QYXJhbGxlbCh2aXNpdG9ycykpO1xuICByZXR1cm4gZXJyb3JzO1xufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHdoaWNoIGFzc2VydHMgYSBTREwgZG9jdW1lbnQgaXMgdmFsaWQgYnkgdGhyb3dpbmcgYW4gZXJyb3JcbiAqIGlmIGl0IGlzIGludmFsaWQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkU0RMKGRvY3VtZW50QVNUKSB7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlU0RMKGRvY3VtZW50QVNUKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gd2hpY2ggYXNzZXJ0cyBhIFNETCBkb2N1bWVudCBpcyB2YWxpZCBieSB0aHJvd2luZyBhbiBlcnJvclxuICogaWYgaXQgaXMgaW52YWxpZC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWRTRExFeHRlbnNpb24oZG9jdW1lbnRBU1QsIHNjaGVtYSkge1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCwgc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJpbXBvcnQgKiBhcyBncSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IE9iak1hcCB9IGZyb20gXCJncmFwaHFsL2pzdXRpbHMvT2JqTWFwXCI7XG5cblxuLy8vLy8vLy8gQ09ORklHVVJBVElPTlxuXG50eXBlIE1heWJlUHJvbWlzZTxUPiA9IFQgfCBQcm9taXNlPFQ+XG5cbmV4cG9ydCB0eXBlIEpTT05PYmplY3QgPSBPYmpNYXA8dW5rbm93bj47XG5cbi8qKiBOYW1lZCBhcmd1bWVudHMgdG8gYSBmdW5jdGlvbiBjYWxsLiAqL1xuZXhwb3J0IHR5cGUgQXJncyA9IHsgW2tleTpzdHJpbmddOiBhbnl9O1xuXG4vKiogSmF2YVNjcmlwdCBmdW5jdGlvbi4gTWF5IHJldHVybiBhIFByb21pc2UuICovXG5leHBvcnQgdHlwZSBKU0ZuID0gKGNvbnRleHQ6IENvbnRleHQsIGFyZ3M/OiBBcmdzKSA9PiB1bmtub3duO1xuXG4vKiogSmF2YVNjcmlwdCBHcmFwaFFMIHJlc29sdmVyIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IHR5cGUgUmVzb2x2ZXJGbiA9IChzb3VyY2U6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogQXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbzogUmVzb2x2ZUluZm8pID0+IHVuZGVmaW5lZDtcblxuZXhwb3J0IHR5cGUgVHlwZVJlc29sdmVyRm4gPSAodmFsdWU6IGFueSwgY29udGV4dDogQ29udGV4dCwgaW5mbzogUmVzb2x2ZUluZm8pID0+IHVuZGVmaW5lZDtcblxuLyoqIEVudGl0eS1yZWZlcmVuY2UgcmVzb2x2ZXIsIGZvciBBcG9sbG8gc3ViZ3JhcGhzLiAqL1xuZXhwb3J0IHR5cGUgRW50aXR5UmVmZXJlbmNlUmVzb2x2ZXIgPSAoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogb2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbzogUmVzb2x2ZUluZm8pID0+IGFueTtcblxuXG4vKiogR3JhcGhRTCByZXNvbHZlciBgaW5mb2AgcGFyYW1ldGVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlSW5mbyBleHRlbmRzIGdxLkdyYXBoUUxSZXNvbHZlSW5mbyB7XG4gICAgLyoqIFRoZSBuYW1lcyBvZiB0aGUgZmllbGRzIG9mIHRoZSByZXR1cm5lZCBvYmplY3QgdGhhdCB3aWxsIGJlIHVzZWQuXG4gICAgICogIFRoZSByZXNvbHZlciBpbXBsZW1lbnRhdGlvbiBtYXkgb21pdCBhbnkgZmllbGRzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGxpc3Q7XG4gICAgICogIHRoaXMgY2FuIGJlIGEgc2lnbmlmaWNhbnQgb3B0aW1pemF0aW9uLiAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkRmllbGROYW1lcyA6IHN0cmluZ1tdO1xufTtcblxuLyoqIEF1dGhvcml6YXRpb24gZm9yIGEgZnVuY3Rpb24uICovXG5leHBvcnQgdHlwZSBBbGxvd0NvbmZpZyA9IHtcbiAgICB1c2Vycz86ICAgIHN0cmluZ1tdLCAgICAvLyBOYW1lcyBvZiBhbGxvd2VkIHVzZXJzXG4gICAgcm9sZXM/OiAgICBzdHJpbmdbXSwgICAgLy8gQWxsb3dlZCByb2xlc1xuICAgIGNoYW5uZWxzPzogc3RyaW5nW10sICAgIC8vIEFsbG93ZWQgY2hhbm5lbHNcbn07XG5cbi8qKiBEZWZpbmVzIGEgZnVuY3Rpb24gb3IgR3JhcGhRTCByZXNvbHZlci4gKi9cbmV4cG9ydCB0eXBlIEZ1bmN0aW9uQ29uZmlnID0ge1xuICAgIHR5cGU6ICAgICAgIFwicXVlcnlcIiB8IFwiamF2YXNjcmlwdFwiLCAvLyBMYW5ndWFnZSB0aGUgJ2NvZGUnIGlzIGluXG4gICAgY29kZTogICAgICAgc3RyaW5nLCAgICAgICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uJ3MgSmF2YVNjcmlwdCBjb2RlIG9yIE4xUUwgcXVlcnlcbiAgICBhcmdzPzogICAgICBzdHJpbmdbXSwgICAgICAgICAgICAgICAvLyBOYW1lcyBvZiBwYXJhbWV0ZXJzIChub3QgdXNlZCBieSBHcmFwaFFMKVxuICAgIG11dGF0aW5nPzogIGJvb2xlYW4sICAgICAgICAgICAgICAgIC8vIElzIGZ1bmN0aW9uIGFsbG93ZWQgdG8gbW9kaWZ5IHRoZSBkYXRhYmFzZT9cbiAgICBhbGxvdz86ICAgICBBbGxvd0NvbmZpZywgICAgICAgICAgICAvLyBXaG8ncyBhbGxvd2VkIHRvIGNhbGwgdGhpc1xufTtcblxuLyoqIEZ1bmN0aW9ucyBjb25maWd1cmF0aW9uOiBtYXBzIGZ1bmN0aW9uIG5hbWUgdG8gaXRzIGNvbmZpZy4gKi9cbmV4cG9ydCB0eXBlIEZ1bmN0aW9uc0NvbmZpZyA9IHtcbiAgICBkZWZpbml0aW9uczogICAgICAgICBSZWNvcmQ8c3RyaW5nLEZ1bmN0aW9uQ29uZmlnPiAgLy8gTmFtZXMgJiBkZWZpbml0aW9ucyBvZiB0aGUgZnVuY3Rpb25zXG4gICAgbWF4X2Z1bmN0aW9uX2NvdW50PzogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1heGltdW0gbnVtYmVyIG9mIGZ1bmN0aW9uc1xuICAgIG1heF9jb2RlX3NpemU/OiAgICAgIG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXhpbXVtIHNpemUgaW4gYnl0ZXMgb2YgYSBmbidzIGBjb2RlYFxuICAgIG1heF9yZXF1ZXN0X3NpemU/OiAgIG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXhpbXVtIHNpemUgaW4gYnl0ZXMgb2YgYSByZXF1ZXN0XG59O1xuXG5leHBvcnQgdHlwZSBGaWVsZE1hcCA9IFJlY29yZDxzdHJpbmcsRnVuY3Rpb25Db25maWc+O1xuZXhwb3J0IHR5cGUgUmVzb2x2ZXJNYXAgPSBSZWNvcmQ8c3RyaW5nLEZpZWxkTWFwPjtcblxuLyoqIEdyYXBoUUwgY29uZmlndXJhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIEdyYXBoUUxDb25maWcgPSB7XG4gICAgc2NoZW1hPzogICAgICAgICAgICAgc3RyaW5nLCAgICAgICAgLy8gVGhlIHNjaGVtYSBpdHNlbGZcbiAgICBzY2hlbWFGaWxlPzogICAgICAgICBzdHJpbmcsICAgICAgICAvLyBQYXRoIHRvIHNjaGVtYSBmaWxlIChvbmx5IGlmIHNjaGVtYSBpcyBub3QgZ2l2ZW4pXG4gICAgcmVzb2x2ZXJzOiAgICAgICAgICAgUmVzb2x2ZXJNYXAsICAgLy8gR3JhcGhRTCByZXNvbHZlciBmdW5jdGlvbnNcbiAgICBzdWJncmFwaD86ICAgICAgICAgICBib29sZWFuLCAgICAgICAvLyBFbmFibGVzIEFwb2xsbyBGZWRlcmF0aW9uIHN1YmdyYXBoIHN1cHBvcnRcbiAgICBtYXhfY29kZV9zaXplPzogICAgICBudW1iZXI7ICAgICAgICAvLyBNYXhpbXVtIHNpemUgaW4gYnl0ZXMgb2YgYSBmdW5jdGlvbidzIGBjb2RlYFxuICAgIG1heF9yZXF1ZXN0X3NpemU/OiAgIG51bWJlcjsgICAgICAgIC8vIE1heGltdW0gc2l6ZSBpbiBieXRlcyBvZiBhbiBpbmNvbWluZyByZXF1ZXN0XG4gICAgbWF4X3Jlc29sdmVyX2NvdW50PzogbnVtYmVyOyAgICAgICAgLy8gTWF4aW11bSBudW1iZXIgb2YgcmVzb2x2ZXJzXG4gICAgbWF4X3NjaGVtYV9zaXplPzogICAgbnVtYmVyOyAgICAgICAgLy8gTWF4aW11bSBzaXplIGluIGJ5dGVzIG9mIHRoZSBzY2hlbWFcbn07XG5cblxuLyoqIFRvcC1sZXZlbCBjb25maWd1cmF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ29uZmlnID0ge1xuICAgIGZ1bmN0aW9ucz86ICAgICBGdW5jdGlvbnNDb25maWc7XG4gICAgZ3JhcGhxbD86ICAgICAgIEdyYXBoUUxDb25maWc7XG59XG5cblxuLy8vLy8vLy8gUlVOVElNRSBDT05URVhUXG5cblxuLyoqIFR5cGUgb2YgdGhlIGBjb250ZXh0YCBwYXJhbWV0ZXIgcGFzc2VkIHRvIGFsbCBmdW5jdGlvbnMuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHQge1xuICAgIHJlYWRvbmx5IHVzZXI6IFVzZXI7XG4gICAgcmVhZG9ubHkgYWRtaW46IFVzZXI7XG5cbiAgICBjaGVja1VzZXIobmFtZTogc3RyaW5nIHwgc3RyaW5nW10pIDogYm9vbGVhbjtcbiAgICByZXF1aXJlVXNlcihuYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSkgOiB2b2lkO1xuICAgIGNoZWNrQWRtaW4oKSA6IGJvb2xlYW47XG4gICAgcmVxdWlyZUFkbWluKCkgOiB2b2lkO1xuICAgIGNoZWNrUm9sZShyb2xlOiBzdHJpbmcgfCBzdHJpbmdbXSkgOiBib29sZWFuO1xuICAgIHJlcXVpcmVSb2xlKHJvbGU6IHN0cmluZyB8IHN0cmluZ1tdKSA6IHZvaWQ7XG4gICAgY2hlY2tBY2Nlc3MoY2hhbm5lbDogc3RyaW5nIHwgc3RyaW5nW10pIDogYm9vbGVhbjtcbiAgICByZXF1aXJlQWNjZXNzKGNoYW5uZWw6IHN0cmluZyB8IHN0cmluZ1tdKSA6IHZvaWQ7XG4gICAgY2hlY2tNdXRhdGluZygpIDogYm9vbGVhbjtcbiAgICByZXF1aXJlTXV0YXRpbmcoKSA6IHZvaWQ7XG59XG5cblxuLyoqIFRoZSB0eXBlIG9mIHRoZSBgY29udGV4dC51c2VyYCBhbmQgYGNvbnRleHQuYWRtaW5gIG9iamVjdHMuXG4gKiAgRXhwb3NlcyBhdXRoIGFuZCBBUElzIHNjb3BlZCB0byBlaXRoZXIgdGhlIGN1cnJlbnQgdXNlciwgb3IgdG8gYW4gYWRtaW4uICovXG4gZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHJvbGVzPzogc3RyaW5nW107XG4gICAgcmVhZG9ubHkgY2hhbm5lbHM/OiBzdHJpbmdbXTtcblxuICAgIHJlYWRvbmx5IGlzQWRtaW4gOiBib29sZWFuOyAgICAgICAgIC8vIFRoaXMgaXMgYW4gYWRtaW4gdXNlclxuICAgIHJlYWRvbmx5IGlzU3VwZXJVc2VyIDogYm9vbGVhbjsgICAgIC8vIFRoaXMgaXMgdGhlIG1hZ2ljIFwiY29udGV4dC5hZG1pblwiIHVzZXJcblxuICAgIHJlYWRvbmx5IGNhbk11dGF0ZSA6IGJvb2xlYW47XG5cbiAgICByZWFkb25seSBkZWZhdWx0Q29sbGVjdGlvbjogQ1JVRDtcblxuICAgIGZ1bmN0aW9uKG5hbWU6IHN0cmluZywgYXJncz86IEFyZ3MpIDogdW5rbm93bjtcbiAgICBncmFwaHFsKHF1ZXJ5OiBzdHJpbmcsIGFyZ3M/OiBBcmdzKSA6IFByb21pc2U8SlNPTk9iamVjdCB8IG51bGwgfCB1bmRlZmluZWQ+O1xufTtcblxuXG4vKiogU2hhcGUgb2YgYSBDb3VjaGJhc2UgZG9jdW1lbnQsIHVzZWQgaW4gdGhlIENSVUQgQVBJLiAqL1xuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudCB7XG4gICAgX2lkPyA6IHN0cmluZzsgICAgICAvLyBEb2N1bWVudCBJRCAocHJpbWFyeSBrZXkpXG4gICAgX3Jldj8gOiBzdHJpbmc7ICAgICAvLyBSZXZpc2lvbiBJRCAodXNlZCBmb3IgTVZDQylcbn07XG5cblxuLyoqIFRoZSB0eXBlIG9mIHRoZSBgVXNlci5kZWZhdWx0Q29sbGVjdGlvbmAgb2JqZWN0LiBFeHBvc2VzIGRhdGFiYXNlIENSVUQgQVBJcy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ1JVRCB7XG4gICAgZ2V0KGRvY0lEOiBzdHJpbmcpIDogRG9jdW1lbnQgfCBudWxsO1xuICAgIHNhdmUoZG9jOiBEb2N1bWVudCwgZG9jSUQ/OiBzdHJpbmcpIDogc3RyaW5nIHwgbnVsbDtcbiAgICBkZWxldGUoZG9jSUQ6IHN0cmluZykgOiBib29sZWFuO1xuICAgIGRlbGV0ZShkb2M6IERvY3VtZW50KSA6IGJvb2xlYW47XG59XG5cblxuLy8vLy8vLy8gVVRJTElUSUVTXG5cblxuLyoqIEFuIGV4Y2VwdGlvbiB0aGF0IGNvbnZleXMgYW4gSFRUUCBzdGF0dXMuICovXG5leHBvcnQgY2xhc3MgSFRUUEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHN0YXR1czogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHJlYWRvbmx5IGJhc2VNZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoYFske3N0YXR1c31dICR7YmFzZU1lc3NhZ2V9YCk7ICAgIC8vIHVucGFja0pTRXJyb3IoKSBpbiBldmFsdWF0b3IuZ28gcGFyc2VzIHRoaXNcbiAgICB9XG59XG5cblxuLy8vLy8vLy8gREFUQUJBU0VcblxuXG4vKiogVXNlciBjcmVkZW50aWFsczogdHVwbGUgb2YgW3VzZXJuYW1lLCByb2xlcywgY2hhbm5lbHNdICovXG5leHBvcnQgdHlwZSBDcmVkZW50aWFscyA9IFtzdHJpbmcsIHN0cmluZ1tdLCBzdHJpbmdbXV07XG5cblxuLyoqIFRvcC1sZXZlbCBvYmplY3QgdGhhdCBzdG9yZXMgdGhlIGNvbXBpbGVkIHN0YXRlIGZvciBhIGRhdGFiYXNlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhYmFzZSB7XG4gICAgLyoqIFNldHMgdGhlIGNvbmZpZ3VyYXRpb24uIFJldHVybnMgYWxsIGVycm9ycyBmb3VuZC4gKi9cbiAgICBjb25maWd1cmUoZnVuY3Rpb25zOiBGdW5jdGlvbnNDb25maWcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGdyYXBocWw6IEdyYXBoUUxDb25maWcgfCB1bmRlZmluZWQpIDogc3RyaW5nW10gfCBudWxsO1xuXG4gICAgLyoqIENyZWF0ZXMgYW4gZXhlY3V0aW9uIGNvbnRleHQgZ2l2ZW4gYSB1c2VyJ3MgbmFtZSwgcm9sZXMgYW5kIGNoYW5uZWxzLiAqL1xuICAgIG1ha2VDb250ZXh0KGNyZWRlbnRpYWxzOiBDcmVkZW50aWFscyB8IG51bGwsXG4gICAgICAgICAgICAgICAgbXV0YXRpb25BbGxvd2VkOiBib29sZWFuKSA6IENvbnRleHQ7XG5cbiAgICAvKiogQ2FsbHMgYSBuYW1lZCBmdW5jdGlvbi4gKi9cbiAgICBjYWxsRnVuY3Rpb24oY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICBhcmdzPzogQXJncykgOiBNYXliZVByb21pc2U8dW5rbm93bj47XG5cbiAgICAvKiogUnVucyBhIE4xUUwgcXVlcnkuIENhbGxlZCBieSBmdW5jdGlvbnMgb2YgdHlwZSBcInF1ZXJ5XCIuICovXG4gICAgcXVlcnkoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICBmbk5hbWU6IHN0cmluZyxcbiAgICAgICAgICBuMXFsOiBzdHJpbmcsXG4gICAgICAgICAgYXJncz86IEFyZ3MpIDogSlNPTk9iamVjdFtdO1xuXG4gICAgLyoqIFJ1bnMgYSBHcmFwaFFMIHF1ZXJ5LiAqL1xuICAgIGdyYXBocWwoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgICAgICAgICB2YXJpYWJsZVZhbHVlcz86IEFyZ3MsXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lPzogc3RyaW5nKSA6IFByb21pc2U8Z3EuRXhlY3V0aW9uUmVzdWx0Pjtcbn1cbiIsImltcG9ydCB7IEFsbG93Q29uZmlnLCBBcmdzLCBDb250ZXh0LCBEYXRhYmFzZSwgRnVuY3Rpb25Db25maWcsIFVzZXIsIEpTRm4sIFJlc29sdmVyRm4sIEhUVFBFcnJvciwgUmVzb2x2ZUluZm8sIEVudGl0eVJlZmVyZW5jZVJlc29sdmVyLCBUeXBlUmVzb2x2ZXJGbiB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBCZWdpblJlYWRPbmx5LCBFbmRSZWFkT25seSB9IGZyb20gXCIuL2ltcGxcIjtcblxuaW1wb3J0ICogYXMgZ3EgZnJvbSAnZ3JhcGhxbCc7XG5cblxuZnVuY3Rpb24gbm9uRW1wdHk8VD4oYTogVFtdIHwgdW5kZWZpbmVkKSA6IGEgaXMgVFtdIHtcbiAgICByZXR1cm4gYSAhPT0gdW5kZWZpbmVkICYmIGEubGVuZ3RoID4gMDtcbn1cblxuXG4vLy8vLy8vLyBQQVRURVJOIFNVQlNUSVRVVElPTiAoaW4gJ2FsbG93JylcblxuXG5jb25zdCBrUGF0dGVyblJlZ2V4ID0gL1xcJHsoW159XSspfXwoXFxcXFxcJCkvZztcblxuLyoqIEEgc3RyaW5nIHRoYXQgbWF5IGNoYW5nZSBiYXNlZCBvbiB0aGUgY3VycmVudCB1c2VyIGFuZCBhcmdzLiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBhdHRlcm4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzdHI6IHN0cmluZykgeyB9XG5cbiAgICBhYnN0cmFjdCBleHBhbmQodXNlcjogVXNlciwgYXJncz86IEFyZ3MpIDogc3RyaW5nO1xuXG4gICAgdG9TdHJpbmcoKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cjtcbiAgICB9XG59XG5cbmNsYXNzIE5vblBhdHRlcm4gZXh0ZW5kcyBQYXR0ZXJuIHtcbiAgICBjb25zdHJ1Y3RvcihzdHI6IHN0cmluZykge3N1cGVyKHN0cik7fVxuXG4gICAgb3ZlcnJpZGUgZXhwYW5kKHVzZXI6IFVzZXIsIGFyZ3M/OiBBcmdzKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cjtcbiAgICB9XG59XG5cbmNsYXNzIERvbGxhclBhdHRlcm4gZXh0ZW5kcyBQYXR0ZXJuIHtcbiAgICBjb25zdHJ1Y3RvcihzdHI6IHN0cmluZykge3N1cGVyKHN0cik7fVxuXG4gICAgb3ZlcnJpZGUgZXhwYW5kKHVzZXI6IFVzZXIsIGFyZ3M/OiBBcmdzKSA6IHN0cmluZyB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnN0ci5yZXBsYWNlKGtQYXR0ZXJuUmVnZXgsIChtYXRjaCwgZXhwciwgbm9uZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyQnOyAgICAgLy8gXFwkIC0+ICRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwci5zdGFydHNXaXRoKFwiY29udGV4dC51c2VyLm5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIubmFtZSA/PyBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwci5zdGFydHNXaXRoKFwiYXJncy5cIikpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFyTmFtZSA9IGV4cHIuc2xpY2UoNSlcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmdzID8gYXJnc1t2YXJOYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzd2l0Y2godHlwZW9mKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDMsIFwiQmFkIGNvbmZpZzogVW5rbm93biBhcmcgaW4gY2hhbm5lbC9yb2xlIHBhdHRlcm4gJyR7XCIgKyBleHByICsgXCJ9IGluICdhbGxvdydcIik7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSFRUUEVycm9yKDQwMCwgXCJWYWx1ZSBvZiBhcmcgJ1wiICsgdmFyTmFtZSArIFwiJyBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bWJlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTAzLCBcIkJhZCBjb25maWc6IEludmFsaWQgY2hhbm5lbC9yb2xlIHBhdHRlcm4gJyR7XCIgKyBleHByICsgXCJ9IGluICdhbGxvdydcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIG92ZXJyaWRlIHRvU3RyaW5nKCkgOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJQYXR0ZXJuPFwiICsgdGhpcy5zdHIgKyBcIj5cIjtcbiAgICB9XG59XG5cbi8qKiBDcmVhdGVzIGEgUGF0dGVybiBmcm9tIGEgc3RyaW5nLiAnJCctcHJlZml4ZWQgcGF0dGVybnMgd2lsbCBiZSBzdWJzdGl0dXRlZCBhY2NvcmRpbmcgdG8gdGhlXG4gKiAgcnVsZXMgb2YgdGhlICdhbGxvdycgb2JqZWN0LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbXBpbGVQYXR0ZXJuKG5hbWU6IHN0cmluZykgOiBQYXR0ZXJuIHtcbiAgICBpZiAobmFtZS5tYXRjaChrUGF0dGVyblJlZ2V4KSkge1xuICAgICAgICByZXR1cm4gbmV3IERvbGxhclBhdHRlcm4obmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb25QYXR0ZXJuKG5hbWUpO1xuICAgIH1cbn1cblxuLyoqIENyZWF0ZXMgYW4gYXJyYXkgb2YgUGF0dGVybnMgZnJvbSBhbiBhcnJheSBvZiBzdHJpbmdzLCBvciBgdW5kZWZpbmVkYCBpZiB0aGVyZSBhcmUgbm9uZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlUGF0dGVybnMobmFtZXM/OiBzdHJpbmdbXSkgOiBQYXR0ZXJuW10gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBub25FbXB0eShuYW1lcykgPyBuYW1lcy5tYXAoIG5hbWUgPT4gQ29tcGlsZVBhdHRlcm4obmFtZSkgKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqIE1hdGNoZXMgYW4gYXJyYXkgb2YgUGF0dGVybnMgYWdhaW5zdCBhbiBhcnJheSBvZiBzdHJpbmdzLCByZXR1cm5pbmcgdHJ1ZSBpZiBhbnkgbWF0Y2guICovXG5leHBvcnQgZnVuY3Rpb24gTWF0Y2gocGF0dGVybnM6IFBhdHRlcm5bXSwgdmFsdWVzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCwgdXNlcjogVXNlciwgYXJncz86IEFyZ3MpIHtcbiAgICByZXR1cm4gbm9uRW1wdHkodmFsdWVzKSAmJiBwYXR0ZXJucy5zb21lKCBwYXQgPT4gdmFsdWVzLmluY2x1ZGVzKHBhdC5leHBhbmQodXNlciwgYXJncykpKTtcbn1cblxuLyoqIE1hdGNoZXMgYW4gYXJyYXkgb2YgUGF0dGVybnMgYWdhaW5zdCBhIHNpbmdsZSBzdHJpbmcsIHJldHVybmluZyB0cnVlIGlmIGFueSBtYXRjaC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNYXRjaDEocGF0dGVybnM6IFBhdHRlcm5bXSwgdmFsdWU6IHN0cmluZywgdXNlcjogVXNlciwgYXJncz86IEFyZ3MpIHtcbiAgICByZXR1cm4gcGF0dGVybnMuc29tZSggcGF0ID0+ICh2YWx1ZSA9PSBwYXQuZXhwYW5kKHVzZXIsIGFyZ3MpKSk7XG59XG5cblxuLy8vLy8vLy8gQVVUSE9SSVpBVElPTlxuXG5cbi8qKiBDaGVja3MgYXV0aG9yaXphdGlvbiBmb3IgYSB1c2VyLCBiYXNlZCBvbiBhbiBBbGxvdyBvYmplY3QuIENyZWF0ZWQgYnkgQ29tcGlsZUFsbG93LiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFsbG93IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nKSB7IH1cblxuICAgIGFic3RyYWN0IGF1dGhvcml6ZSh1c2VyOiBVc2VyLCBhcmdzPzogQXJncykgOiB2b2lkO1xuXG4gICAgZmFpbCgpIDogbmV2ZXIge1xuICAgICAgICB0aHJvdyBuZXcgSFRUUEVycm9yKDQwMywgYEFjY2VzcyBmb3JiaWRkZW4gdG8gZnVuY3Rpb24gJyR7dGhpcy5uYW1lfSdgKTtcbiAgICB9XG59XG5cbmNsYXNzIEFsbG93QWRtaW5Pbmx5IGV4dGVuZHMgQWxsb3cge1xuICAgIG92ZXJyaWRlIGF1dGhvcml6ZSh1c2VyOiBVc2VyLCBhcmdzPzogQXJncykge1xuICAgICAgICBpZiAoIXVzZXIuaXNBZG1pbikgdGhpcy5mYWlsKCk7XG4gICAgfVxufVxuXG5jbGFzcyBBbGxvd0FueW9uZSBleHRlbmRzIEFsbG93IHtcbiAgICBvdmVycmlkZSBhdXRob3JpemUodXNlcjogVXNlcikgeyB9XG59XG5cbmNsYXNzIEFsbG93QnlDb25maWcgZXh0ZW5kcyBBbGxvdyB7XG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBjb25maWc6IEFsbG93Q29uZmlnKSB7XG4gICAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgICB0aGlzLnVzZXJzID0gQ29tcGlsZVBhdHRlcm5zKGNvbmZpZy51c2Vycyk7XG4gICAgICAgIHRoaXMucm9sZXMgPSBDb21waWxlUGF0dGVybnMoY29uZmlnLnJvbGVzKTtcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IENvbXBpbGVQYXR0ZXJucyhjb25maWcuY2hhbm5lbHMpO1xuICAgIH1cblxuICAgIGF1dGhvcml6ZSh1c2VyOiBVc2VyLCBhcmdzPzogQXJncykge1xuICAgICAgICBjb25zb2xlLmFzc2VydCh1c2VyLmRlZmF1bHRDb2xsZWN0aW9uICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBpZiAoIXVzZXIuaXNBZG1pblxuICAgICAgICAgICAgICAgICYmICEodGhpcy51c2VycyAgICAmJiBNYXRjaDEodGhpcy51c2VycywgdXNlci5uYW1lISwgdXNlciwgYXJncykpXG4gICAgICAgICAgICAgICAgJiYgISh0aGlzLnJvbGVzICAgICYmIE1hdGNoKHRoaXMucm9sZXMsIHVzZXIucm9sZXMsIHVzZXIsIGFyZ3MpKVxuICAgICAgICAgICAgICAgICYmICEodGhpcy5jaGFubmVscyAmJiBNYXRjaCh0aGlzLmNoYW5uZWxzLCB1c2VyLmNoYW5uZWxzLCB1c2VyLCBhcmdzKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAzLCBgQWNjZXNzIGZvcmJpZGRlbiB0byBmdW5jdGlvbiAnJHt0aGlzLm5hbWV9JyAuLi4gdXNlciA9ICR7dXNlci5uYW1lfSAuLi4gdXNlci5jaGFubmVscz0ke3VzZXIuY2hhbm5lbHN9IC4uLiB0aGlzLnVzZXJzPSR7dGhpcy51c2Vyc30gLi4uIHRoaXMuY2hhbm5lbHM9JHt0aGlzLmNoYW5uZWxzfWApO1xuICAgICAgICAgICAgLy90aGlzLmZhaWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXNlcnM/OiAgICBQYXR0ZXJuW107XG4gICAgcHJpdmF0ZSByb2xlcz86ICAgIFBhdHRlcm5bXTtcbiAgICBwcml2YXRlIGNoYW5uZWxzPzogUGF0dGVybltdO1xufVxuXG4vKiogQ3JlYXRlcyBhbiBBbGxvdyBvYmplY3QgYmFzZWQgb24gYW4gb3B0aW9uYWwgQWxsb3dDb25maWcuXG4gKiAgSWYgdGhlcmUgaXMgbm8gY29uZmlnLCB0aGUgYGxlbmllbnRgIHBhcmFtZXRlciBkZXRlcm1pbmVzIHdoZXRoZXIgdGhhdCBtZWFuc1xuICogIFwiYW55b25lXCIgb3IgXCJhZG1pbiBvbmx5XCIuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcGlsZUFsbG93KG5hbWU6IHN0cmluZywgY29uZmlnOiBBbGxvd0NvbmZpZyB8IHVuZGVmaW5lZCwgbGVuaWVudDogYm9vbGVhbikgOiBBbGxvdyB7XG4gICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGxlbmllbnQgPyBuZXcgQWxsb3dBbnlvbmUobmFtZSkgOiBuZXcgQWxsb3dBZG1pbk9ubHkobmFtZSk7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLnVzZXJzICYmICFjb25maWcucm9sZXMgJiYgIWNvbmZpZy5jaGFubmVscykge1xuICAgICAgICByZXR1cm4gbmV3IEFsbG93QWRtaW5Pbmx5KG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoKGNvbmZpZy51c2VycyAmJiBjb25maWcudXNlcnMuaW5jbHVkZXMoXCIqXCIpKVxuICAgICAgICAgICAgICAgIHx8IChjb25maWcucm9sZXMgJiYgY29uZmlnLnJvbGVzLmluY2x1ZGVzKFwiKlwiKSlcbiAgICAgICAgICAgICAgICB8fCAoY29uZmlnLmNoYW5uZWxzICYmIGNvbmZpZy5jaGFubmVscy5pbmNsdWRlcyhcIipcIikpKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWxsb3dBbnlvbmUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbGxvd0J5Q29uZmlnKG5hbWUsIGNvbmZpZyk7XG4gICAgfVxufVxuXG5cbi8vLy8vLy8vIEFSRyBWQUxJREFUSU9OOlxuXG5cbi8qKiBBIGZ1bmN0aW9uIHRoYXQgdmFsaWRhdGVzIGFyZ3MsIHRocm93aW5nIGFuIGV4Y2VwdGlvbiBpZiB0aGV5J3JlIGludmFsaWQuICovXG5leHBvcnQgdHlwZSBBcmdzVmFsaWRhdG9yID0gKGFyZ3M6QXJncyB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcblxuXG4vKiogR2l2ZW4gYSBmdW5jdGlvbidzIHBhcmFtZXRlciBsaXN0LCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhlICdhcmdzJyBvYmplY3QuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcGlsZVBhcmFtcyhmbk5hbWU6IHN0cmluZywgcGFyYW1ldGVyczogc3RyaW5nW10gfCB1bmRlZmluZWQpOiBBcmdzVmFsaWRhdG9yIHtcbiAgICBpZiAoIW5vbkVtcHR5KHBhcmFtZXRlcnMpKSB7XG4gICAgICAgIHJldHVybiAoYXJncz86IEFyZ3MpIDogdm9pZCA9PiB7XG4gICAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgICAgIGxldCBhcmdOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChhcmdOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAwLCBgVW5kZWNsYXJlZCBhcmd1bWVudHMgJyR7YXJnTmFtZXMuam9pbihcIicsICdcIil9JyBwYXNzZWQgdG8gJHtmbk5hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBhcmFtU2V0ID0gbmV3IFNldDxzdHJpbmc+O1xuICAgICAgICBmb3IgKGxldCBwYXJhbSBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBwYXJhbVNldC5hZGQocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuUGFyYW1zID0gcGFyYW1TZXQuc2l6ZTtcbiAgICAgICAgaWYgKG5QYXJhbXMgIT0gcGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTAwLCBgRnVuY3Rpb24vcmVzb2x2ZXIgJHtmbk5hbWV9IGhhcyBkdXBsaWNhdGUgYXJnIG5hbWVzYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChhcmdzPzogQXJncykgOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmICghYXJncykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAwLCBgRnVuY3Rpb24gXCIke2ZuTmFtZX1cIiBjYWxsZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCByZXF1aXJlcyAke3BhcmFtZXRlcnN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBwYXJhbSBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3NbcGFyYW1dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig0MDAsIGBNaXNzaW5nIGFyZ3VtZW50IFwiJHtwYXJhbX1cIiBpbiBjYWxsIHRvICR7Zm5OYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhcmdOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGFyZ05hbWVzLmxlbmd0aCAhPSBuUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXJnIG9mIGFyZ05hbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1TZXQuaGFzKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAwLCBgVW5kZWNsYXJlZCBhcmd1bWVudCBcIiR7YXJnfVwiIHBhc3NlZCB0byAke2ZuTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuLy8vLy8vLy8gQ09NUElMSU5HIEZVTkNUSU9OUzpcblxuXG4vLyBSZXR1cm5zIHRoZSBOMVFMIHF1ZXJ5IHN0cmluZyBmcm9tIGEgRnVuY3Rpb25Db25maWcuXG5mdW5jdGlvbiBjaGVja04xUUwoY29uZmlnOiBGdW5jdGlvbkNvbmZpZykgOiBzdHJpbmcge1xuICAgIGlmICghY29uZmlnLmNvZGUubWF0Y2goL15cXHMqXFwoKlNFTEVDVFxcYi9pKSlcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIFwib25seSBTRUxFQ1QgcXVlcmllcyBhcmUgYWxsb3dlZFwiKTtcbiAgICByZXR1cm4gY29uZmlnLmNvZGU7XG59XG5cblxuZnVuY3Rpb24gcmV0aHJvdyh4OiB1bmtub3duLCB3aGF0OiBzdHJpbmcsIGZuTmFtZTogc3RyaW5nKSA6IG5ldmVyIHtcbiAgICBpZiAoeCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHgubWVzc2FnZSA9IGAke3gubWVzc2FnZX0gKHRocm93biBieSAke3doYXR9ICR7Zm5OYW1lfSlgXG4gICAgICAgIHRocm93IHg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYCR7eH0gKHRocm93biBieSAke3doYXR9ICR7Zm5OYW1lfSlgKTtcbiAgICB9XG59XG5cblxuLyoqIENvbXBpbGVzIGEgRnVuY3Rpb25Db25maWcgdG8gYSBmdW5jdGlvbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlRm4oZm5OYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZuQ29uZmlnOiBGdW5jdGlvbkNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGI6IERhdGFiYXNlKSA6IEpTRm5cbntcbiAgICBsZXQgYWxsb3cgPSBDb21waWxlQWxsb3coZm5OYW1lLCBmbkNvbmZpZy5hbGxvdywgZmFsc2UpO1xuICAgIGxldCBjaGVja0FyZ3MgPSBDb21waWxlUGFyYW1zKGZuTmFtZSwgZm5Db25maWcuYXJncyk7XG4gICAgc3dpdGNoIChmbkNvbmZpZy50eXBlKSB7XG4gICAgY2FzZSBcInF1ZXJ5XCI6XG4gICAgICAgIGxldCBuMXFsID0gY2hlY2tOMVFMKGZuQ29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgICAgICAgIGNoZWNrQXJncyhhcmdzKTtcbiAgICAgICAgICAgIGFsbG93LmF1dGhvcml6ZShjb250ZXh0LnVzZXIsIGFyZ3MpO1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgUVVFUlkgJHtmbk5hbWV9YCk7XG4gICAgICAgICAgICBpZiAoYXJncykgYXJncyA9IHthcmdzOiBhcmdzfTtcbiAgICAgICAgICAgIHJldHVybiBkYi5xdWVyeShjb250ZXh0LCBmbk5hbWUsIG4xcWwsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIGNhc2UgXCJqYXZhc2NyaXB0XCI6XG4gICAgICAgIGxldCBtdXRhdGluZyA9IGZuQ29uZmlnLm11dGF0aW5nID8/IGZhbHNlO1xuICAgICAgICBsZXQgY29kZSA9IGNvbXBpbGVUb0pTKGZuTmFtZSwgZm5Db25maWcsIDIpIGFzIEpTRm47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjb250ZXh0LCBhcmdzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBGVU5DICR7Zm5OYW1lfWApO1xuICAgICAgICAgICAgY2hlY2tBcmdzKGFyZ3MpO1xuICAgICAgICAgICAgYWxsb3cuYXV0aG9yaXplKGNvbnRleHQudXNlciwgYXJncyk7XG4gICAgICAgICAgICBpZiAoIW11dGF0aW5nKSBCZWdpblJlYWRPbmx5KGNvbnRleHQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICByZXRocm93KHgsIFwiZnVuY3Rpb25cIiwgZm5OYW1lKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtdXRhdGluZykgRW5kUmVhZE9ubHkoY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGB1bmtub3duIG9yIG1pc3NpbmcgJ3R5cGUnYCk7XG4gICAgfVxufVxuXG5cbi8qKiBDb21waWxlcyBhIEZ1bmN0aW9uQ29uZmlnIHRvIGEgR3JhcGhRTCByZXNvbHZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlUmVzb2x2ZXIoZmllbGQ6IGdxLkdyYXBoUUxGaWVsZDxhbnksQ29udGV4dD4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbkNvbmZpZzogRnVuY3Rpb25Db25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiOiBEYXRhYmFzZSlcbntcbiAgICBsZXQgZm5OYW1lID0gYCR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfWA7XG4gICAgbGV0IG11dGF0aW5nID0gKHR5cGVOYW1lID09IFwiTXV0YXRpb25cIik7XG4gICAgbGV0IGFsbG93ID0gQ29tcGlsZUFsbG93KGZuTmFtZSwgZm5Db25maWcuYWxsb3csIHRydWUpO1xuICAgIGlmIChmbkNvbmZpZy5hcmdzKSB7XG4gICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTAwLCBgc2hvdWxkIG5vdCBoYXZlIGFuICdhcmdzJyBkZWNsYXJhdGlvbmApO1xuICAgIH1cbiAgICBzd2l0Y2ggKGZuQ29uZmlnLnR5cGUpIHtcbiAgICBjYXNlIFwicXVlcnlcIjpcbiAgICAgICAgbGV0IG4xcWwgPSBjaGVja04xUUwoZm5Db25maWcpO1xuICAgICAgICBsZXQgZmllbGRUeXBlID0gZmllbGQudHlwZTtcbiAgICAgICAgaWYgKGdxLmlzTm9uTnVsbFR5cGUoZmllbGRUeXBlKSlcbiAgICAgICAgICAgIGZpZWxkVHlwZSA9IGZpZWxkVHlwZS5vZlR5cGU7XG4gICAgICAgIGxldCByZXR1cm5zR3JhcGhRTExpc3QgPSBncS5pc0xpc3RUeXBlKGZpZWxkVHlwZSk7XG4gICAgICAgIGxldCByZXR1cm5zR3JhcGhRTFNjYWxhciA9IGdxLmlzU2NhbGFyVHlwZShmaWVsZFR5cGUpO1xuICAgICAgICBmaWVsZC5yZXNvbHZlID0gZnVuY3Rpb24ocGFyZW50LCBhcmdzLCBjb250ZXh0LCBpbmZvKSB7XG4gICAgICAgICAgICBhbGxvdy5hdXRob3JpemUoY29udGV4dC51c2VyLCBhcmdzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGRiLnF1ZXJ5KGNvbnRleHQsIGZuTmFtZSwgbjFxbCwge2FyZ3M6IGFyZ3MsIHBhcmVudDogcGFyZW50fSk7XG4gICAgICAgICAgICAgICAgaWYgKHJldHVybnNHcmFwaFFMTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXNvbHZlciByZXR1cm5zIGEgbGlzdCwgc28ganVzdCByZXR1cm4gdGhlIGFycmF5IG9mIHJvd3NcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBHcmFwaFFMIHJlc3VsdCBpcyBub3QgYSBsaXN0IChhcnJheSksIGJ1dCBOMVFMIGFsd2F5cyByZXR1cm5zIGFuIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICAvLyBTbyB1c2UgdGhlIGZpcnN0IHJvdyBvZiB0aGUgcmVzdWx0IGFzIHRoZSB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXR1cm5zR3JhcGhRTFNjYWxhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvd1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR3JhcGhRTCByZXN1bHQgdHlwZSBpcyBhIHNjYWxhciwgYnV0IGEgTjFRTCByb3cgaXMgYWx3YXlzIGFuIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgc2luZ2xlIGZpZWxkIG9mIHRoZSBvYmplY3QsIGlmIGFueSwgYXMgdGhlIHJlc3VsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvd1tjb2xzWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGByZXNvbHZlciByZXR1cm5zIHNjYWxhciB0eXBlICR7ZmllbGQudHlwZX0sIGJ1dCBpdHMgTjFRTCBxdWVyeSByZXR1cm5zICR7Y29scy5sZW5ndGh9IGNvbHVtbnMsIG5vdCAxYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0aHJvdyh4LCBcInJlc29sdmVyXCIsIGZuTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJqYXZhc2NyaXB0XCI6XG4gICAgICAgIGxldCBjb2RlID0gY29tcGlsZVRvSlMoZm5OYW1lLCBmbkNvbmZpZywgNCkgYXMgUmVzb2x2ZXJGbjtcbiAgICAgICAgZmllbGQucmVzb2x2ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgYXJncywgY29udGV4dCwgaW5mbykge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgUkVTT0xWRSAke2ZuTmFtZX1gKTtcbiAgICAgICAgICAgIGFsbG93LmF1dGhvcml6ZShjb250ZXh0LnVzZXIsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKCFtdXRhdGluZykgQmVnaW5SZWFkT25seShjb250ZXh0KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGUoc291cmNlLCBhcmdzLCBjb250ZXh0LCB1cGdyYWRlSW5mbyhpbmZvKSk7XG4gICAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0aHJvdyh4LCBcInJlc29sdmVyXCIsIGZuTmFtZSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmICghbXV0YXRpbmcpIEVuZFJlYWRPbmx5KGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgSFRUUEVycm9yKDUwMCwgYHVua25vd24gb3IgbWlzc2luZyAndHlwZSdgKTtcbiAgICB9XG59XG5cblxuLyoqIENvbXBpbGVzIGEgRnVuY3Rpb25Db25maWcgdG8gYSBHcmFwaFFMIHR5cGUtbmFtZSAoaW50ZXJmYWNlKSByZXNvbHZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlVHlwZU5hbWVSZXNvbHZlcih0eXBlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuQ29uZmlnOiBGdW5jdGlvbkNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYjogRGF0YWJhc2UpIDogZ3EuR3JhcGhRTFR5cGVSZXNvbHZlcjxhbnksQ29udGV4dD5cbntcbiAgICBsZXQgZm5OYW1lID0gYCR7dHlwZU5hbWV9Ll9fdHlwZW5hbWVgO1xuICAgIGlmIChmbkNvbmZpZy50eXBlICE9IFwiamF2YXNjcmlwdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTAwLCBgdHlwZS1uYW1lIHJlc29sdmVycyBtdXN0IGJlIGltcGxlbWVudGVkIGluIEphdmFTY3JpcHRgKTtcbiAgICB9IGVsc2UgaWYgKGZuQ29uZmlnLmFsbG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGB0eXBlLW5hbWUgcmVzb2x2ZXIgbXVzdCBub3QgaGF2ZSBhbiAnYWxsb3cnIGNvbmZpZ2ApO1xuICAgIH1cbiAgICBsZXQgZm4gPSBjb21waWxlVG9KUyhmbk5hbWUsIGZuQ29uZmlnLCA0KSBhcyBUeXBlUmVzb2x2ZXJGbjtcbiAgICByZXR1cm4gKHZhbHVlLCBjb250ZXh0LCBpbmZvKSA9PiB7XG4gICAgICAgIHJldHVybiBmbihjb250ZXh0LCB2YWx1ZSwgaW5mbyBhcyBSZXNvbHZlSW5mbyk7XG4gICAgfVxuXG59XG5cblxuZXhwb3J0IHR5cGUgQXBvbGxvRW50aXR5UmVmZXJlbmNlUmVzb2x2ZXIgPSAocmVmZXJlbmNlOiBvYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbzogUmVzb2x2ZUluZm8pID0+IGFueTtcblxuXG4vKiogQ29tcGlsZXMgYSBGdW5jdGlvbkNvbmZpZyB0byBhIEdyYXBoUUwgU3ViZ3JhcGggYF9yZXNvbHZlUmVmZXJlbmNlYCByZXNvbHZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlRW50aXR5UmVmZXJlbmNlUmVzb2x2ZXIodHlwZU5hbWU6IHN0cmluZyxcbiAgICBmbkNvbmZpZzogRnVuY3Rpb25Db25maWcsXG4gICAgZGI6IERhdGFiYXNlKSA6IEFwb2xsb0VudGl0eVJlZmVyZW5jZVJlc29sdmVyXG57XG4gICAgbGV0IGZuTmFtZSA9IGAke3R5cGVOYW1lfS5fcmVzb2x2ZVJlZmVyZW5jZWA7XG4gICAgaWYgKGZuQ29uZmlnLnR5cGUgIT0gXCJqYXZhc2NyaXB0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGBlbnRpdHkgcmVmZXJlbmNlIHJlc29sdmVycyBtdXN0IGJlIGltcGxlbWVudGVkIGluIEphdmFTY3JpcHRgKTtcbiAgICB9IGVsc2UgaWYgKGZuQ29uZmlnLmFsbG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGBlbnRpdHkgcmVmZXJlbmNlIHJlc29sdmVyIG11c3Qgbm90IGhhdmUgYW4gJ2FsbG93JyBjb25maWdgKTtcbiAgICB9XG4gICAgbGV0IGNvZGUgPSBjb21waWxlVG9KUyhmbk5hbWUsIGZuQ29uZmlnLCAzKSBhcyBFbnRpdHlSZWZlcmVuY2VSZXNvbHZlcjtcbiAgICByZXR1cm4gZnVuY3Rpb24ocmVmLCBjb250ZXh0LCBpbmZvKSB7XG4gICAgICAgIHJldHVybiBjb2RlKGNvbnRleHQsIHJlZiwgaW5mbyk7ICAgIC8vIEFwb2xsbydzIGxpYnJhcnkgaGFzIHRoZSBwYXJhbXMgc3dhcHBlZFxuICAgIH1cbn1cblxuXG4vLyBDb21waWxlcyBGdW5jdGlvbkNvbmZpZy5jb2RlIHRvIEphdmFTY3JpcHQgaWYgaXQncyBhIHN0cmluZywgYW5kIGNoZWNrcyBwYXJhbWV0ZXIgY291bnQuXG5mdW5jdGlvbiBjb21waWxlVG9KUyhuYW1lOiBzdHJpbmcsIGZuQ29uZmlnOiBGdW5jdGlvbkNvbmZpZywgbkFyZ3M6IG51bWJlcikgOiBGdW5jdGlvbiB7XG4gICAgLy8gaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9ldmFsI25ldmVyX3VzZV9ldmFsIVxuICAgIGxldCBmbjogRnVuY3Rpb247XG4gICAgdHJ5IHtcbiAgICAgICAgZm4gPSBGdW5jdGlvbihgXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJHtmbkNvbmZpZy5jb2RlfSlgKSgpXG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgICB0aHJvdyBuZXcgSFRUUEVycm9yKDUwMCwgYGZhaWxlZCB0byBjb21waWxlOiAke3h9YCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YoZm4pICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTAwLCBgY29kZSBkb2VzIG5vdCBjb21waWxlIHRvIGEgSlMgZnVuY3Rpb25gKTtcbiAgICB9IGVsc2UgaWYgKGZuLmxlbmd0aCA8IDIgfHwgZm4ubGVuZ3RoID4gbkFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEhUVFBFcnJvcig1MDAsIGBzaG91bGQgaGF2ZSAyLSR7bkFyZ3N9IEphdmFTY3JpcHQgYXJndW1lbnRzYCk7XG4gICAgfVxuICAgIHJldHVybiBmbjtcbn1cblxuXG5mdW5jdGlvbiB1cGdyYWRlSW5mbyhpbmZvOiBncS5HcmFwaFFMUmVzb2x2ZUluZm8pIDogUmVzb2x2ZUluZm8ge1xuICAgIGZ1bmN0aW9uIHNlbGVjdGVkRmllbGROYW1lcyh0aGlzOiBSZXNvbHZlSW5mbykgOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmICh0aGlzLmZpZWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHNldCA9IHRoaXMuZmllbGROb2Rlc1swXS5zZWxlY3Rpb25TZXQ7XG4gICAgICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VsIG9mIHNldC5zZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWwua2luZCA9PSBcIkZpZWxkXCIgJiYgc2VsLm5hbWUua2luZCA9PSBcIk5hbWVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VsLm5hbWUudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGluZm8sIFwic2VsZWN0ZWRGaWVsZE5hbWVzXCIsIHtnZXQ6IHNlbGVjdGVkRmllbGROYW1lc30pO1xuICAgIHJldHVybiBpbmZvIGFzIHVua25vd24gYXMgUmVzb2x2ZUluZm87XG59XG4iLCJpbXBvcnQgeyBBbGxvd0NvbmZpZywgQXJncywgQ29udGV4dCwgQ3JlZGVudGlhbHMsIERhdGFiYXNlLCBEb2N1bWVudCwgRnVuY3Rpb25zQ29uZmlnLCBHcmFwaFFMQ29uZmlnLCBDUlVELCBVc2VyLCBKU0ZuLCBIVFRQRXJyb3IsIEpTT05PYmplY3QsIEZ1bmN0aW9uQ29uZmlnIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IENvbXBpbGVFbnRpdHlSZWZlcmVuY2VSZXNvbHZlciwgQ29tcGlsZUZuLCBDb21waWxlUmVzb2x2ZXIsIENvbXBpbGVUeXBlTmFtZVJlc29sdmVyIH0gZnJvbSAnLi9jb21waWxlJ1xuXG5pbXBvcnQgKiBhcyBncSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGJ1aWxkU3ViZ3JhcGhTY2hlbWEgfSBmcm9tICdAYXBvbGxvL3N1YmdyYXBoJztcbmltcG9ydCB7IEdyYXBoUUxSZXNvbHZlck1hcCB9IGZyb20gXCJAYXBvbGxvL3N1YmdyYXBoL2Rpc3Qvc2NoZW1hLWhlbHBlclwiO1xuXG5cbi8qKiBBYnN0cmFjdCBpbnRlcmZhY2UgdG8gdGhlIE4xUUwgcXVlcnkgYW5kIENSVUQgaW1wbGVtZW50YXRpb24uIFVzZWQgYnkgRGF0YWJhc2UuICovXG5leHBvcnQgaW50ZXJmYWNlIFVwc3RyZWFtIHtcbiAgICBxdWVyeShmbk5hbWU6IHN0cmluZyxcbiAgICAgICAgICBuMXFsOiBzdHJpbmcsXG4gICAgICAgICAgYXJnczogQXJncyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICB1c2VyOiBVc2VyKSA6IEpTT05PYmplY3RbXTtcbiAgICBnZXQoZG9jSUQ6IHN0cmluZywgdXNlcjogVXNlcikgOiBEb2N1bWVudCB8IG51bGw7XG4gICAgc2F2ZShkb2M6IERvY3VtZW50LCBkb2NJRDogc3RyaW5nIHwgdW5kZWZpbmVkLCB1c2VyOiBVc2VyKSA6IHN0cmluZyB8IG51bGw7XG4gICAgZGVsZXRlKGRvY0lEOiBzdHJpbmcsIHJldklEOiBzdHJpbmcgfCB1bmRlZmluZWQsIHVzZXI6IFVzZXIpIDogYm9vbGVhbjtcbn1cblxuXG4vLy8vLy8vLyBEQVRBQkFTRSBJTVBMRU1FTlRBVElPTlxuXG5cbi8vIGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvZmVkZXJhdGlvbi9idWlsZGluZy1zdXBlcmdyYXBocy9zdWJncmFwaHMtYXBvbGxvLXNlcnZlci9cbmNvbnN0IGtGZWRlcmF0aW9uSW1wb3J0c1N0ciA9IGBcbiAgICBleHRlbmQgc2NoZW1hIEBsaW5rKFxuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9zcGVjcy5hcG9sbG8uZGV2L2ZlZGVyYXRpb24vdjIuMFwiLFxuICAgICAgICBpbXBvcnQ6IFtcIkBleHRlbmRzXCIsIFwiQGV4dGVybmFsXCIsIFwiQGluYWNjZXNzaWJsZVwiLCBcIkBrZXlcIiwgXCJAb3ZlcnJpZGVcIiwgXCJAcHJvdmlkZXNcIixcbiAgICAgICAgICAgICAgICAgXCJAcmVxdWlyZXNcIiwgXCJAc2hhcmVhYmxlXCIsIFwiQHRhZ1wiXVxuICAgIClcbmA7XG5cblxuLyoqIENvbnN0cnVjdHMgYSBEYXRhYmFzZSBpbnN0YW5jZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNYWtlRGF0YWJhc2UoZnVuY3Rpb25zOiBGdW5jdGlvbnNDb25maWcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBocWw6IEdyYXBoUUxDb25maWcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwc3RyZWFtOiBVcHN0cmVhbSkgOiBbRGF0YWJhc2UgfCBudWxsLCBzdHJpbmdbXSB8IG51bGxdXG57XG4gICAgbGV0IGRiIDogRGF0YWJhc2UgfCBudWxsO1xuICAgIGRiID0gbmV3IERhdGFiYXNlSW1wbCh1cHN0cmVhbSk7XG4gICAgbGV0IGVycm9ycyA9IGRiLmNvbmZpZ3VyZShmdW5jdGlvbnMsIGdyYXBocWwpO1xuICAgIGlmIChlcnJvcnMpIGRiID0gbnVsbDtcbiAgICByZXR1cm4gW2RiLCBlcnJvcnNdO1xufVxuXG5cbmNsYXNzIERhdGFiYXNlSW1wbCBpbXBsZW1lbnRzIERhdGFiYXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXBzdHJlYW06IFVwc3RyZWFtKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbnRleHQgZm9yIFwiY29udGV4dC5hZG1pblwiXG4gICAgICAgIGxldCBzdXBlclVzZXIgPSBuZXcgVXNlckltcGwodGhpcywgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuc3VwZXJVc2VyQ29udGV4dCA9IG5ldyBDb250ZXh0SW1wbChzdXBlclVzZXIsIHN1cGVyVXNlciwgdHJ1ZSk7XG4gICAgICAgIHN1cGVyVXNlci5jb250ZXh0ID0gdGhpcy5zdXBlclVzZXJDb250ZXh0O1xuICAgIH1cblxuICAgIGNvbmZpZ3VyZShmdW5jdGlvbnM6IEZ1bmN0aW9uc0NvbmZpZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZ3JhcGhxbDogR3JhcGhRTENvbmZpZyB8IHVuZGVmaW5lZCkgOiBzdHJpbmdbXSB8IG51bGxcbiAgICB7XG4gICAgICAgIC8vIENvbGxlY3QgYWxsIGVycm9ycy9leGNlcHRpb25zIGluIGFuIGFycmF5IHRvIHJldHVybiBhdCB0aGUgZW5kOlxuICAgICAgICBsZXQgZXJyb3JzID0gbmV3IEVycm9yTGlzdDtcbiAgICAgICAgY29uc29sZS5sb2coXCJJbml0aWFsaXppbmcgR3JhcGhRTC9mdW5jdGlvbnMuLi5cIik7XG5cbiAgICAgICAgaWYgKGZ1bmN0aW9ucykge1xuICAgICAgICAgICAgbGV0IG5GdW5jcyA9IDA7XG4gICAgICAgICAgICBsZXQgbWF4U2l6ZSA9IGZ1bmN0aW9ucy5tYXhfY29kZV9zaXplO1xuICAgICAgICAgICAgZm9yIChsZXQgZm5OYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZ1bmN0aW9ucy5kZWZpbml0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBsZXQgZm5Db25maWcgPSBmdW5jdGlvbnMuZGVmaW5pdGlvbnNbZm5OYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobWF4U2l6ZSAhPT0gdW5kZWZpbmVkICYmIGZuQ29uZmlnLmNvZGUubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY29tcGxhaW4oYGZ1bmN0aW9uICR7Zm5OYW1lfTogY29kZSBpcyB0b28gbGFyZ2UgKD4gJHttYXhTaXplfSBieXRlcylgKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy50cnkoYGZ1bmN0aW9uICR7Zm5OYW1lfTogYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnNbZm5OYW1lXSA9IENvbXBpbGVGbihmbk5hbWUsIGZuQ29uZmlnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbkZ1bmNzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25zLm1heF9mdW5jdGlvbl9jb3VudCAhPT0gdW5kZWZpbmVkICYmIG5GdW5jcyA+IGZ1bmN0aW9ucy5tYXhfZnVuY3Rpb25fY291bnQpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMuY29tcGxhaW4oYHRvbyBtYW55IGZ1bmN0aW9ucyAoPiAke2Z1bmN0aW9ucyEubWF4X2Z1bmN0aW9uX2NvdW50fSlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChncmFwaHFsKSB7XG4gICAgICAgICAgICBpZiAoIWdyYXBocWwuc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLmNvbXBsYWluKFwiR3JhcGhRTCBzY2hlbWEgaXMgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JhcGhxbC5tYXhfc2NoZW1hX3NpemUgIT09IHVuZGVmaW5lZCAmJiBncmFwaHFsLnNjaGVtYS5sZW5ndGggPiBncmFwaHFsLm1heF9zY2hlbWFfc2l6ZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5jb21wbGFpbihgR3JhcGhRTCBzY2hlbWEgdG9vIGxhcmdlICg+ICR7Z3JhcGhxbC5tYXhfc2NoZW1hX3NpemV9IGJ5dGVzKWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMudHJ5KGBHcmFwaFFMIHNjaGVtYTogYCwgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyYXBocWwuc3ViZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXBlbmQgdGhlIHJlcXVpcmVkIFwiZXh0ZW5kIHNjaGVtYS4uLlwiIGRlY2xhcmF0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRvY3VtZW50ID0gZ3EucGFyc2Uoa0ZlZGVyYXRpb25JbXBvcnRzU3RyICsgXCJcXG5cXG5cIiArIGdyYXBocWwuc2NoZW1hISk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBtYXAgd2l0aCBqdXN0IHRoZSBfX3Jlc29sdmVSZWZlcmVuY2UgcmVzb2x2ZXIgZm5zLCBzbyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YmdyYXBoIGNvZGUgY2FuIHN0b3JlIHRoZW0gaW4gdGhlIHNjaGVtYTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXNvbHZlcnMgPSB0aGlzLmNyZWF0ZUFwb2xsb1Jlc29sdmVyTWFwKGdyYXBocWwsZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gYnVpbGRTdWJncmFwaFNjaGVtYSh7IHR5cGVEZWZzOiBkb2N1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVyczogcmVzb2x2ZXJzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBncS5idWlsZFNjaGVtYShncmFwaHFsLnNjaGVtYSEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlndXJlUmVzb2x2ZXJzKGdyYXBocWwsIGVycm9ycylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3JzLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGb3VuZCAke2Vycm9ycy5lcnJvcnMubGVuZ3RofSBlcnJvcltzXSBpbiBjb25maWd1cmF0aW9uIWApO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9ycy5lcnJvcnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGNvbmZpZ3VyZVJlc29sdmVycyhncmFwaHFsOiBHcmFwaFFMQ29uZmlnLCBlcnJvcnM6IEVycm9yTGlzdCkge1xuICAgICAgICBsZXQgcmVtYWluaW5nUmVzb2x2ZXJzID0gZ3JhcGhxbC5tYXhfcmVzb2x2ZXJfY291bnQgPz8gMWU5O1xuXG4gICAgICAgIGlmICghZ3JhcGhxbC5yZXNvbHZlcnMpICByZXR1cm47XG5cbiAgICAgICAgZnVuY3Rpb24gY2FuQWRkUmVzb2x2ZXIodHlwZU5hbWU6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIGNvbmZpZzogRnVuY3Rpb25Db25maWcpIHtcbiAgICAgICAgICAgIGlmICgtLXJlbWFpbmluZ1Jlc29sdmVycyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLmNvbXBsYWluKGB0b28gbWFueSBHcmFwaFFMIHJlc29sdmVycyAoPiAke2dyYXBocWwhLm1heF9yZXNvbHZlcl9jb3VudCF9KWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtYXhTaXplID0gZ3JhcGhxbCEubWF4X2NvZGVfc2l6ZTtcbiAgICAgICAgICAgIGlmIChtYXhTaXplICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmNvZGUubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5jb21wbGFpbihgR3JhcGhRTCByZXNvbHZlciAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX06IGNvZGUgaXMgdG9vIGxhcmdlICg+ICR7bWF4U2l6ZX0gYnl0ZXMpYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB0eXBlTmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhncmFwaHFsLnJlc29sdmVycykpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZHMgPSBncmFwaHFsLnJlc29sdmVyc1t0eXBlTmFtZV07XG4gICAgICAgICAgICBsZXQgc2NoZW1hVHlwZSA9IHRoaXMuc2NoZW1hIS5nZXRUeXBlKHR5cGVOYW1lKTtcbiAgICAgICAgICAgIGlmICghc2NoZW1hVHlwZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5jb21wbGFpbihgR3JhcGhRTCByZXNvbHZlciB0eXBlICcke3R5cGVOYW1lfSc6IG5vIHN1Y2ggdHlwZSBpbiB0aGUgc2NoZW1hYCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYVR5cGUgaW5zdGFuY2VvZiBncS5HcmFwaFFMT2JqZWN0VHlwZSkge1xuICAgICAgICAgICAgICAgIGxldCBzY2hlbWFGaWVsZHMgPSBzY2hlbWFUeXBlLmdldEZpZWxkcygpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGZpZWxkTmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmbkNvbmZpZyA9IGZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuQWRkUmVzb2x2ZXIodHlwZU5hbWUsIGZpZWxkTmFtZSwgZm5Db25maWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JhcGhxbC5zdWJncmFwaCAmJiBmaWVsZE5hbWUgPT0gJ19fcmVzb2x2ZVJlZmVyZW5jZScpICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2hlbWFGaWVsZCA9IHNjaGVtYUZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnRyeShgR3JhcGhRTCByZXNvbHZlciAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX06IGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tcGlsZVJlc29sdmVyKHNjaGVtYUZpZWxkLCB0eXBlTmFtZSwgZmllbGROYW1lLCBmbkNvbmZpZywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jb21wbGFpbihgR3JhcGhRTCByZXNvbHZlciAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX06IG5vIHN1Y2ggZmllbGQgaW4gdGhlIHNjaGVtYWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWFUeXBlIGluc3RhbmNlb2YgZ3EuR3JhcGhRTEludGVyZmFjZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzY2hlbWFUeXBlIGluc3RhbmNlb2YgZ3EuR3JhcGhRTFVuaW9uVHlwZSkge1xuICAgICAgICAgICAgICAgIGxldCBpZlR5cGUgPSBzY2hlbWFUeXBlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGZpZWxkTmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmbkNvbmZpZyA9IGZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuQWRkUmVzb2x2ZXIodHlwZU5hbWUsIGZpZWxkTmFtZSwgZm5Db25maWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGROYW1lID09IFwiX190eXBlbmFtZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnRyeShgR3JhcGhRTCByZXNvbHZlciAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX06IGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmVHlwZS5yZXNvbHZlVHlwZSA9IENvbXBpbGVUeXBlTmFtZVJlc29sdmVyKHR5cGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbkNvbmZpZywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jb21wbGFpbihgR3JhcGhRTCByZXNvbHZlciAke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX06IGFic3RyYWN0IHR5cGVzIG1heSBvbmx5IGhhdmUgYSAnX190eXBlbmFtZScgcmVzb2x2ZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLmNvbXBsYWluKGBHcmFwaFFMIHR5cGUgJHt0eXBlTmFtZX06IG5vdCBhbiBvYmplY3Qgb3IgaW50ZXJmYWNlLCBzbyBjYW5ub3QgaGF2ZSByZXNvbHZlcnNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUFwb2xsb1Jlc29sdmVyTWFwKGdyYXBocWw6IEdyYXBoUUxDb25maWcsIGVycm9yczogRXJyb3JMaXN0KSA6IEdyYXBoUUxSZXNvbHZlck1hcDx1bmtub3duPiB7XG4gICAgICAgIGxldCByZXN1bHQgOiBHcmFwaFFMUmVzb2x2ZXJNYXA8dW5rbm93bj4gPSB7fVxuICAgICAgICBmb3IgKGxldCBbdHlwZU5hbWUsIHJlc29sdmVyc10gb2YgT2JqZWN0LmVudHJpZXMoZ3JhcGhxbC5yZXNvbHZlcnMpKSB7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZVJlZiA9IHJlc29sdmVyc1snX19yZXNvbHZlUmVmZXJlbmNlJ107XG4gICAgICAgICAgICBpZiAocmVzb2x2ZVJlZikge1xuICAgICAgICAgICAgICAgIGxldCByZXNvbHZlckZuID0gQ29tcGlsZUVudGl0eVJlZmVyZW5jZVJlc29sdmVyKHR5cGVOYW1lLCByZXNvbHZlUmVmLCB0aGlzKTtcbiAgICAgICAgICAgICAgICByZXN1bHRbdHlwZU5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAnX19yZXNvbHZlUmVmZXJlbmNlJzogcmVzb2x2ZXJGbiBhcyBncS5HcmFwaFFMRmllbGRSZXNvbHZlcjxhbnksdW5rbm93bj5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICBtYWtlQ29udGV4dChjcmVkZW50aWFsczogQ3JlZGVudGlhbHMgfCBudWxsLCBtdXRhdGlvbkFsbG93ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IHVzZXIgPSBuZXcgVXNlckltcGwodGhpcywgY3JlZGVudGlhbHMpO1xuICAgICAgICBsZXQgY3R4ID0gbmV3IENvbnRleHRJbXBsKHVzZXIsIHRoaXMuc3VwZXJVc2VyQ29udGV4dC51c2VyLCBtdXRhdGlvbkFsbG93ZWQpO1xuICAgICAgICB1c2VyLmNvbnRleHQgPSBjdHg7XG4gICAgICAgIHJldHVybiBjdHg7XG4gICAgfVxuXG5cbiAgICBnZXRGdW5jdGlvbihuYW1lOiBzdHJpbmcpIDogSlNGbiB7XG4gICAgICAgIGxldCBmbiA9IHRoaXMuZnVuY3Rpb25zW25hbWVdO1xuICAgICAgICBpZiAoIWZuKSB0aHJvdyBuZXcgSFRUUEVycm9yKDQwNCwgYE5vIHN1Y2ggZnVuY3Rpb24gJHtuYW1lfWApO1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfVxuXG5cbiAgICBjYWxsRnVuY3Rpb24oY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICBhcmdzOiBBcmdzIHwgdW5kZWZpbmVkKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVuY3Rpb24obmFtZSkoY29udGV4dCwgYXJncyk7XG4gICAgfVxuXG5cblxuICAgIHF1ZXJ5KGNvbnRleHQ6IENvbnRleHQsXG4gICAgICAgICAgZm5OYW1lOiBzdHJpbmcsXG4gICAgICAgICAgbjFxbDogc3RyaW5nLFxuICAgICAgICAgIGFyZ3M6IEFyZ3MgfCB1bmRlZmluZWQpICAgIC8vIG5vdGU6IGBhcmdzYCBhcmUgdG9wLWxldmVsIE4xUUwgYXJncywgbm90IHRoZSBcImFyZ3NcIiBvYmplY3RcbiAgICAgICAgICA6IEpTT05PYmplY3RbXVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBzdHJlYW0ucXVlcnkoZm5OYW1lLCBuMXFsLCBhcmdzLCBjb250ZXh0LnVzZXIpO1xuICAgIH1cblxuXG4gICAgZ3JhcGhxbChjb250ZXh0OiBDb250ZXh0LFxuICAgICAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICAgICAgICAgIHZhcmlhYmxlVmFsdWVzPzogQXJncyxcbiAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU/OiBzdHJpbmcpIDogUHJvbWlzZTxncS5FeGVjdXRpb25SZXN1bHQ+IHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgR1JBUEhRTCAke3F1ZXJ5fWApO1xuICAgICAgICBpZiAoIXRoaXMuc2NoZW1hKSB0aHJvdyBuZXcgSFRUUEVycm9yKDQwNCwgXCJObyBHcmFwaFFMIHNjaGVtYVwiKTtcbiAgICAgICAgcmV0dXJuIGdxLmdyYXBocWwoe1xuICAgICAgICAgICAgY29udGV4dFZhbHVlOiBjb250ZXh0LFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIHNvdXJjZTogcXVlcnksXG4gICAgICAgICAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVWYWx1ZXMsXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb25OYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIGdldChkb2NJRDogc3RyaW5nLCB1c2VyOiBVc2VyKSA6IERvY3VtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnVwc3RyZWFtLmdldChkb2NJRCwgdXNlcik7XG4gICAgfVxuXG4gICAgc2F2ZShkb2M6IERvY3VtZW50LCBkb2NJRDogc3RyaW5nIHwgdW5kZWZpbmVkLCB1c2VyOiBVc2VyKSA6IHN0cmluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy51cHN0cmVhbS5zYXZlKGRvYywgZG9jSUQsIHVzZXIpO1xuICAgIH1cblxuICAgIGRlbGV0ZShkb2NJRDogc3RyaW5nLCByZXZJRDogc3RyaW5nIHwgdW5kZWZpbmVkLCB1c2VyOiBVc2VyKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy51cHN0cmVhbS5kZWxldGUoZG9jSUQsIHJldklELCB1c2VyKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3VwZXJVc2VyQ29udGV4dDogQ29udGV4dEltcGw7ICAgICAgIC8vIFRoZSBhZG1pbiBDb250ZXh0IChvbmx5IG9uZSBpcyBuZWVkZWQpXG4gICAgcHJpdmF0ZSBmdW5jdGlvbnM6IFJlY29yZDxzdHJpbmcsSlNGbj4gPSB7fTsgLy8gQ29tcGlsZWQgSlMgZnVuY3Rpb25zXG4gICAgcHJpdmF0ZSBzY2hlbWE/OiBncS5HcmFwaFFMU2NoZW1hOyAgICAgICAgICAgLy8gQ29tcGlsZWQgR3JhcGhRTCBzY2hlbWEgKHdpdGggcmVzb2x2ZXJzKVxufVxuXG5cbi8vLy8vLy8vIENPTlRFWFQgSU1QTEVNRU5UQVRJT05cblxuXG5jbGFzcyBDb250ZXh0SW1wbCBpbXBsZW1lbnRzIENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHVzZXI6IFVzZXIsXG4gICAgICAgICAgICAgICAgcmVhZG9ubHkgYWRtaW46IFVzZXIsXG4gICAgICAgICAgICAgICAgbXV0YXRpb25BbGxvd2VkOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghbXV0YXRpb25BbGxvd2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPbmx5TGV2ZWwrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrVXNlcihuYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSkgOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlci5pc0FkbWluIHx8IG1hdGNoKG5hbWUsIHRoaXMudXNlci5uYW1lISk7XG4gICAgfVxuXG4gICAgcmVxdWlyZVVzZXIobmFtZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrVXNlcihuYW1lKSkgdGhyb3cgbmV3IEhUVFBFcnJvcig0MDMsIFwiUGVybWlzc2lvbiBkZW5pZWQgKHVzZXIpXCIpO1xuICAgIH1cblxuICAgIGNoZWNrQWRtaW4oKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyLmlzQWRtaW47XG4gICAgfVxuXG4gICAgcmVxdWlyZUFkbWluKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBZG1pbigpKSB0aHJvdyBuZXcgSFRUUEVycm9yKDQwMywgXCJQZXJtaXNzaW9uIGRlbmllZCAoYWRtaW4gb25seSlcIik7XG4gICAgfVxuXG4gICAgY2hlY2tSb2xlKHJvbGU6IHN0cmluZyB8IHN0cmluZ1tdKSA6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy51c2VyLmlzQWRtaW4pIHJldHVybiB0cnVlO1xuICAgICAgICBmb3IgKGxldCBteVJvbGUgb2YgdGhpcy51c2VyLnJvbGVzISkge1xuICAgICAgICAgICAgaWYgKG1hdGNoKHJvbGUsIG15Um9sZSkpICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVxdWlyZVJvbGUocm9sZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrUm9sZShyb2xlKSkgdGhyb3cgbmV3IEhUVFBFcnJvcig0MDMsIFwiUGVybWlzc2lvbiBkZW5pZWQgKHJvbGUpXCIpO1xuICAgIH1cblxuICAgIGNoZWNrQWNjZXNzKGNoYW5uZWw6IHN0cmluZyB8IHN0cmluZ1tdKSA6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy51c2VyLmlzQWRtaW4pIHJldHVybiB0cnVlO1xuICAgICAgICBmb3IgKGxldCBteUNoYW5uZWwgb2YgdGhpcy51c2VyLmNoYW5uZWxzISkge1xuICAgICAgICAgICAgaWYgKG1hdGNoKGNoYW5uZWwsIG15Q2hhbm5lbCkpICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVxdWlyZUFjY2VzcyhjaGFubmVsOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBY2Nlc3MoY2hhbm5lbCkpIHRocm93IG5ldyBIVFRQRXJyb3IoNDAzLCBcIlBlcm1pc3Npb24gZGVuaWVkIChjaGFubmVsKVwiKTtcbiAgICB9XG5cbiAgICBjaGVja0FsbG93ZWQoYWxsb3c6IEFsbG93Q29uZmlnIHwgdW5kZWZpbmVkKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyLmlzQWRtaW5cbiAgICAgICAgICAgIHx8IChhbGxvdyAhPT0gdW5kZWZpbmVkICYmIChcbiAgICAgICAgICAgICAgICAgICAgKGFsbG93LnVzZXJzICE9PSB1bmRlZmluZWQgICAgJiYgYWxsb3cudXNlcnMuaW5jbHVkZXModGhpcy51c2VyLm5hbWUhKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGFsbG93LnJvbGVzICE9PSB1bmRlZmluZWQgICAgJiYgdGhpcy5jaGVja1JvbGUoYWxsb3cucm9sZXMpKSB8fFxuICAgICAgICAgICAgICAgICAgICAoYWxsb3cuY2hhbm5lbHMgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmNoZWNrQWNjZXNzKGFsbG93LmNoYW5uZWxzKSkpKTtcbiAgICB9XG5cbiAgICByZXF1aXJlQWxsb3dlZChhbGxvdzogQWxsb3dDb25maWcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWxsb3dlZChhbGxvdykpIHRocm93IG5ldyBIVFRQRXJyb3IoNDAzLCBcIlBlcm1pc3Npb24gZGVuaWVkXCIpO1xuICAgIH1cblxuICAgIGNoZWNrTXV0YXRpbmcoKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkT25seUxldmVsID09IDA7XG4gICAgfVxuXG4gICAgcmVxdWlyZU11dGF0aW5nKCkgOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrTXV0YXRpbmcoKSkgdGhyb3cgbmV3IEhUVFBFcnJvcig0MDMsIFwiUGVybWlzc2lvbiBkZW5pZWQgKG11dGF0aW5nKVwiKTtcbiAgICB9XG5cbiAgICByZWFkT25seUxldmVsID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJlZ2luUmVhZE9ubHkoY29udGV4dDogQ29udGV4dCkge1xuICAgIGlmICghY29udGV4dC51c2VyLmlzU3VwZXJVc2VyKSB7XG4gICAgICAgIChjb250ZXh0IGFzIENvbnRleHRJbXBsKS5yZWFkT25seUxldmVsKys7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gRW5kUmVhZE9ubHkoY29udGV4dDogQ29udGV4dCkge1xuICAgIGlmICghY29udGV4dC51c2VyLmlzU3VwZXJVc2VyKSB7XG4gICAgICAgIChjb250ZXh0IGFzIENvbnRleHRJbXBsKS5yZWFkT25seUxldmVsLS07XG4gICAgfVxufVxuXG5cbi8vLy8vLy8vIENSVUQgSU1QTEVNRU5UQVRJT05cblxuXG5jbGFzcyBDUlVESW1wbCBpbXBsZW1lbnRzIENSVUQge1xuXG4gICAgY29uc3RydWN0b3IoZGI6IERhdGFiYXNlSW1wbCwgY29sbGVjdGlvbk5hbWU6IHN0cmluZywgdXNlcjogVXNlckltcGwpIHtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICAvLyB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uTmFtZTtcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcbiAgICB9XG5cblxuICAgIGdldChkb2NJRDogc3RyaW5nKSA6IERvY3VtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLmdldChkb2NJRCwgdGhpcy51c2VyKTtcbiAgICB9XG5cblxuICAgIHNhdmUoZG9jOiBEb2N1bWVudCwgZG9jSUQ/OiBzdHJpbmcpIDogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICghdGhpcy51c2VyLmNhbk11dGF0ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAzLCBcInNhdmUoKSBpcyBub3QgYWxsb3dlZCBpbiBhIHJlYWQtb25seSBjb250ZXh0XCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5zYXZlKGRvYywgZG9jSUQsIHRoaXMudXNlcik7XG4gICAgfVxuXG5cbiAgICBkZWxldGUoZG9jT3JJRDogc3RyaW5nIHwgRG9jdW1lbnQpIDogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy51c2VyLmNhbk11dGF0ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNDAzLCBcImRlbGV0ZSgpIGlzIG5vdCBhbGxvd2VkIGluIGEgcmVhZC1vbmx5IGNvbnRleHRcIik7XG4gICAgICAgIGlmICh0eXBlb2YgZG9jT3JJRCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRiLmRlbGV0ZShkb2NPcklELCB1bmRlZmluZWQsIHRoaXMudXNlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBkb2NPcklEWydfaWQnXTtcbiAgICAgICAgICAgIGlmICghaWQpIHRocm93IFwiZGVsZXRlKCkgY2FsbGVkIHdpdGggZG9jIG9iamVjdCB0aGF0IGhhcyBubyAnX2lkJyBwcm9wZXJ0eVwiO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGIuZGVsZXRlKGlkLCBkb2NPcklELl9yZXYsIHRoaXMudXNlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRiOiBEYXRhYmFzZUltcGw7XG4gICAgLy8gcHJpdmF0ZSBjb2xsZWN0aW9uOiBzdHJpbmc7ICAvLyBUT0RPOiBzdXBwb3J0IGNvbGxlY3Rpb25zXG4gICAgcHJpdmF0ZSB1c2VyOiBVc2VySW1wbDsgICAgICAgICAvLyBUaGUgVXNlciBJIGFjY2VzcyBpdCBhc1xufVxuXG5cbi8vLy8vLy8vIFVTRVIgSU1QTEVNRU5UQVRJT05cblxuXG5leHBvcnQgbGV0IENhbGxEZXB0aCA9IDE7XG5leHBvcnQgY29uc3QgTWF4Q2FsbERlcHRoID0gMjA7XG5cblxuY2xhc3MgVXNlckltcGwgaW1wbGVtZW50cyBVc2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGI6IERhdGFiYXNlSW1wbCxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogQ3JlZGVudGlhbHMgfCBudWxsLFxuICAgICAgICAgICAgICAgIHJlYWRvbmx5IGlzU3VwZXJVc2VyID0gZmFsc2UpXG4gICAge1xuICAgICAgICBpZiAoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIFt0aGlzLm5hbWUsIHRoaXMucm9sZXMsIHRoaXMuY2hhbm5lbHNdID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICBpc1N1cGVyVXNlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbGxlY3Rpb24gPSBuZXcgQ1JVREltcGwoZGIsICdfZGVmYXVsdCcsIHRoaXMpO1xuICAgIH1cblxuXG4gICAgLy8gQXV0aG9yaXphdGlvbjpcblxuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcm9sZXM/OiBzdHJpbmdbXTtcbiAgICByZWFkb25seSBjaGFubmVscz86IHN0cmluZ1tdO1xuXG4gICAgZ2V0IGlzQWRtaW4oKSB7cmV0dXJuIHRoaXMubmFtZSA9PT0gdW5kZWZpbmVkO31cblxuICAgIGdldCBjYW5NdXRhdGUoKSA6IGJvb2xlYW4ge3JldHVybiB0aGlzLmlzU3VwZXJVc2VyIHx8IHRoaXMuY29udGV4dC5jaGVja011dGF0aW5nKCk7fVxuXG5cbiAgICAvLyBBUEk6XG5cbiAgICByZWFkb25seSBkZWZhdWx0Q29sbGVjdGlvbjogQ1JVRDtcblxuXG4gICAgZnVuY3Rpb24obmFtZTogc3RyaW5nLCBhcmdzPzogQXJncykgOiB1bmtub3duIHtcbiAgICAgICAgbGV0IGZuID0gdGhpcy5kYi5nZXRGdW5jdGlvbihuYW1lKTtcbiAgICAgICAgaWYgKCsrQ2FsbERlcHRoID4gTWF4Q2FsbERlcHRoKSB7XG4gICAgICAgICAgICBsZXQgbXNnID0gYFVzZXIgZnVuY3Rpb24gcmVjdXJzaW9uIHRvbyBkZWVwIChjYWxsaW5nIGZ1bmN0aW9uKFwiJHtuYW1lfVwiKWA7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSFRUUEVycm9yKDUwOCwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHRoaXMuY29udGV4dCwgYXJncyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAtLUNhbGxEZXB0aDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgZ3JhcGhxbChxdWVyeTogc3RyaW5nLCBhcmdzPzogQXJncykgOiBQcm9taXNlPEpTT05PYmplY3QgfCBudWxsPiB7XG4gICAgICAgIGlmICgrK0NhbGxEZXB0aCA+IE1heENhbGxEZXB0aCkge1xuICAgICAgICAgICAgbGV0IG1zZyA9IGBVc2VyIGZ1bmN0aW9uIHJlY3Vyc2lvbiB0b28gZGVlcCAoY2FsbGluZyBncmFwaHFsKCkpYDtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBIVFRQRXJyb3IoNTA4LCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5ncmFwaHFsKHRoaXMuY29udGV4dCwgcXVlcnksIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyID0gcmVzdWx0LmVycm9yc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLm9yaWdpbmFsRXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVyci5vcmlnaW5hbEVycm9yO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIC0tQ2FsbERlcHRoO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICB0b0pTT04oa2V5OiBzdHJpbmcpIDogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuaXNBZG1pbikge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgcm9sZXM6IHRoaXMucm9sZXMsXG4gICAgICAgICAgICAgICAgY2hhbm5lbHM6IHRoaXMuY2hhbm5lbHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZXh0ITogQ29udGV4dEltcGw7XG59O1xuXG5cbi8vLy8vLy8vIFVUSUxJVElFUzpcblxuXG4vKiogVXRpbGl0eSB0aGF0IGNvbGxlY3RzIGEgbGlzdCBvZiBlcnJvciBtZXNzYWdlcy4gKi9cbmNsYXNzIEVycm9yTGlzdCB7XG4gICAgLyoqIGFkZHMgYW4gZXJyb3IgbWVzc2FnZSB0byBgZXJyb3JzYC4gKi9cbiAgICBjb21wbGFpbihtc2c6IHN0cmluZykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobXNnKTtcbiAgICB9XG4gICAgLyoqIGNhbGxzIGEgZnVuY3Rpb24sIGNhdGNoaW5nIGFueSBleGNlcHRpb24gYW5kIGFkZGluZyBpdCB0byBgZXJyb3JzYC4gKi9cbiAgICB0cnkobXNnOiBzdHJpbmcsIGZuOiAoKT0+dm9pZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBtc2cgKz0gZXJyLm1lc3NhZ2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1zZyArPSBTdHJpbmcoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29tcGxhaW4obXNnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBlcnJvcnM6IHN0cmluZ1tdID0gW107XG59XG5cblxuLy8gUmV0dXJucyB0cnVlIGlmIGB3aGF0YCBpcyBlcXVhbCB0byBgYWdhaW5zdGAgb3IgaW5jbHVkZWQgaW4gaXQuXG5mdW5jdGlvbiBtYXRjaCh3aGF0OiBzdHJpbmcgfCBzdHJpbmdbXSwgYWdhaW5zdDogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZih3aGF0KSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICByZXR1cm4gKHdoYXQgPT0gYWdhaW5zdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICByZXR1cm4gd2hhdC5pbmNsdWRlcyhhZ2FpbnN0KTtcbiAgIH1cbn1cbiIsImltcG9ydCB7IEFyZ3MsIFVzZXIsIENvbmZpZywgRGF0YWJhc2UsIENvbnRleHQsIENyZWRlbnRpYWxzLCBEb2N1bWVudCwgSlNPTk9iamVjdCB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBNYWtlRGF0YWJhc2UsIFVwc3RyZWFtIH0gZnJvbSBcIi4vaW1wbFwiO1xuXG5cbi8qKiBUaGUgaW50ZXJmYWNlIHRoZSBuYXRpdmUgY29kZSBuZWVkcyB0byBpbXBsZW1lbnQuXG4gKiAgU2VlIGV2YWx1YXRvci5nbywgZnVuY3Rpb25zIGBkb1F1ZXJ5YCwgYGRvR2V0YCwgZXRjLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZUFQSSB7XG4gICAgcXVlcnkoZm5OYW1lOiBzdHJpbmcsXG4gICAgICAgICAgbjFxbDogc3RyaW5nLFxuICAgICAgICAgIGFyZ3NKU09OOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgYXNBZG1pbjogYm9vbGVhbikgOiBzdHJpbmc7XG4gICAgZ2V0KGRvY0lEOiBzdHJpbmcsXG4gICAgICAgIGFzQWRtaW46IGJvb2xlYW4pIDogc3RyaW5nIHwgbnVsbDtcbiAgICBzYXZlKGRvY0pTT046IHN0cmluZyxcbiAgICAgICAgIGRvY0lEOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICBhc0FkbWluOiBib29sZWFuKSA6IHN0cmluZyB8IG51bGw7XG4gICAgZGVsZXRlKGRvY0lEOiBzdHJpbmcsXG4gICAgICAgICAgIHJldklEOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgIGFzQWRtaW46IGJvb2xlYW4pIDogYm9vbGVhbjtcbn1cblxuXG4vLyBXcmFwcyBhIGBOYXRpdmVBUElgIGFuZCBleHBvc2VzIGl0IGFzIGFuIFVwc3RyZWFtIGZvciBhIERhdGFiYXNlIHRvIHVzZVxuY2xhc3MgVXBzdHJlYW1OYXRpdmVJbXBsIGltcGxlbWVudHMgVXBzdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlOiBOYXRpdmVBUEkpIHsgfVxuXG4gICAgcXVlcnkoZm5OYW1lOiBzdHJpbmcsIG4xcWw6IHN0cmluZywgYXJnczogQXJncyB8IHVuZGVmaW5lZCwgdXNlcjogVXNlcikgOiBKU09OT2JqZWN0W10ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5uYXRpdmUucXVlcnkoZm5OYW1lLCBuMXFsLCB0aGlzLnN0cmluZ2lmeShhcmdzKSwgdXNlci5pc0FkbWluKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICB9XG5cbiAgICBnZXQoZG9jSUQ6IHN0cmluZywgdXNlcjogVXNlcikgOiBEb2N1bWVudCB8IG51bGwge1xuICAgICAgICBsZXQganJlc3VsdCA9IHRoaXMubmF0aXZlLmdldChkb2NJRCwgdXNlci5pc0FkbWluKTtcbiAgICAgICAgaWYgKGpyZXN1bHQgPT09IG51bGwpIHJldHVybiBqcmVzdWx0O1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZURvYyhqcmVzdWx0KVxuICAgIH1cblxuICAgIHNhdmUoZG9jOiBvYmplY3QsIGRvY0lEOiBzdHJpbmcgfCB1bmRlZmluZWQsIHVzZXI6IFVzZXIpIDogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZS5zYXZlKEpTT04uc3RyaW5naWZ5KGRvYyksIGRvY0lELCB1c2VyLmlzQWRtaW4pO1xuICAgIH1cblxuICAgIGRlbGV0ZShkb2NJRDogc3RyaW5nLCByZXZJRDogc3RyaW5nIHwgdW5kZWZpbmVkLCB1c2VyOiBVc2VyKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmUuZGVsZXRlKGRvY0lELCByZXZJRCwgdXNlci5pc0FkbWluKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0cmluZ2lmeShvYmo6IG9iamVjdCB8IHVuZGVmaW5lZCkgOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gb2JqID8gSlNPTi5zdHJpbmdpZnkob2JqKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlRG9jKGpzb246IHN0cmluZykgOiBEb2N1bWVudCB7XG4gICAgICAgIGxldCByZXN1bHQgPSBKU09OLnBhcnNlKGpzb24pXG4gICAgICAgIGlmICh0eXBlb2YocmVzdWx0KSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmF0aXZlQVBJIHJldHVybmVkIEpTT04gdGhhdCdzIG5vdCBhbiBPYmplY3RcIik7XG4gICAgICAgIHJldHVybiByZXN1bHQgYXMgRG9jdW1lbnRcbiAgICB9XG59XG5cblxuLyoqIFRoZSBBUEkgdGhpcyBtb2R1bGUgaW1wbGVtZW50cywgYW5kIHRoZSBuYXRpdmUgY29kZSAoZXZhbHVhdG9yLmdvKSBjYWxscy4gKi9cbmV4cG9ydCBjbGFzcyBBUEkge1xuICAgIC8qKiBDb25zdHJ1Y3RzIGFuIGluc3RhbmNlIGFuZCBwYXJzZXMgdGhlIGNvbmZpZ3VyYXRpb24uXG4gICAgICogIFNob3VsZCBub3QgdGhyb3cgZXhjZXB0aW9ucywgYnV0IHNldHMgdGhlIGBlcnJvcnNgIHByb3BlcnR5IGlmIGNvbmZpZyBpcyBpbnZhbGlkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ0pTT046IHN0cmluZywgbmF0aXZlOiBOYXRpdmVBUEkpIHtcbiAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnSlNPTikgYXMgQ29uZmlnO1xuICAgICAgICBsZXQgW2RiLCBlcnJvcnNdID0gTWFrZURhdGFiYXNlKGNvbmZpZy5mdW5jdGlvbnMsIGNvbmZpZy5ncmFwaHFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVcHN0cmVhbU5hdGl2ZUltcGwobmF0aXZlKSk7XG4gICAgICAgIGlmIChkYiAhPT0gbnVsbCkgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfVxuXG4gICAgLyoqIENvbmZpZ3VyYXRpb24gZXJyb3JzLiBJZiB0aGVyZSBhcmUgZXJyb3JzLCB0aGUgQVBJIG11c3Qgbm90IGJlIGNhbGxlZC4gKi9cbiAgICByZWFkb25seSBlcnJvcnM6IHN0cmluZ1tdIHwgbnVsbDtcblxuICAgIC8qKiBDYWxscyBhIG5hbWVkIGZ1bmN0aW9uLiAqL1xuICAgIGNhbGxGdW5jdGlvbihuYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgIGFyZ3NKU09OOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgIHVzZXI6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgcm9sZXM6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgY2hhbm5lbHM6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgbXV0YXRpb25BbGxvd2VkOiBib29sZWFuKSA6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPlxuICAgIHtcbiAgICAgICAgbGV0IGFyZ3MgPSBhcmdzSlNPTiA/IEpTT04ucGFyc2UoYXJnc0pTT04pIDogdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMubWFrZUNvbnRleHQodXNlciwgcm9sZXMsIGNoYW5uZWxzLCBtdXRhdGlvbkFsbG93ZWQpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kYi5jYWxsRnVuY3Rpb24oY29udGV4dCwgbmFtZSwgYXJncyk7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oIHJlc3VsdCA9PiBKU09OLnN0cmluZ2lmeShyZXN1bHQpICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBSdW5zIGEgR3JhcGhRTCBxdWVyeS4gKi9cbiAgICBncmFwaHFsKHF1ZXJ5OiBzdHJpbmcsXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YXJpYWJsZXNKU09OOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICB1c2VyOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICByb2xlczogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2hhbm5lbHM6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG11dGF0aW9uQWxsb3dlZDogYm9vbGVhbikgOiBQcm9taXNlPHN0cmluZz5cbiAgICB7XG4gICAgICAgIGlmIChvcGVyYXRpb25OYW1lID09PSBcIlwiKSBvcGVyYXRpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgdmFycyA9IHZhcmlhYmxlc0pTT04gPyBKU09OLnBhcnNlKHZhcmlhYmxlc0pTT04pIDogdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMubWFrZUNvbnRleHQodXNlciwgcm9sZXMsIGNoYW5uZWxzLCBtdXRhdGlvbkFsbG93ZWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5ncmFwaHFsKGNvbnRleHQsIHF1ZXJ5LCB2YXJzLCBvcGVyYXRpb25OYW1lKVxuICAgICAgICAgICAgLnRoZW4oIHJlc3VsdCA9PiBKU09OLnN0cmluZ2lmeShyZXN1bHQpICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlQ29udGV4dCh1c2VyOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlczogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHM6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uQWxsb3dlZDogYm9vbGVhbikgOiBDb250ZXh0XG4gICAge1xuICAgICAgICB2YXIgY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGlmICh1c2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gW3VzZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlcz8uc3BsaXQoJywnKSA/PyBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzPy5zcGxpdCgnLCcpID8/IFtdXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kYi5tYWtlQ29udGV4dChjcmVkZW50aWFscywgbXV0YXRpb25BbGxvd2VkKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGIhOiBEYXRhYmFzZTtcbn07XG5cblxuLyoqIE1haW4gZW50cnkgcG9pbnQsIGNhbGxlZCBieSBHbyBgTmV3RXZhbHVhdG9yKClgLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1haW4oY29uZmlnSlNPTjogc3RyaW5nLCBuYXRpdmU6IE5hdGl2ZUFQSSkgOiBBUEkge1xuICAgIHJldHVybiBuZXcgQVBJKGNvbmZpZ0pTT04sIG5hdGl2ZSk7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYWNoZUNvbnRyb2xGcm9tSW5mbyIsIm1heWJlQ2FjaGVDb250cm9sRnJvbUluZm8iLCJpbmZvIiwiX2EiLCJfYiIsImNhY2hlQ29udHJvbCIsImNhY2hlSGludCIsInJlc3RyaWN0IiwiRXJyb3IiLCJidWlsdFR5cGVSZWZlcmVuY2UiLCJidWlsZFNjaGVtYUZyb21BU1QiLCJidWlsZFNjaGVtYSIsImdyYXBocWxfMSIsInZhbHVlc18xIiwiZGVmaW5pdGlvbnNfMSIsImVycm9yXzEiLCJidWlsZFZhbHVlIiwidmFsdWVGcm9tQVNUVW50eXBlZCIsInVuZGVmaW5lZCIsImRvY3VtZW50Tm9kZSIsIm9wdGlvbnMiLCJlcnJvcnMiLCJzY2hlbWEiLCJTY2hlbWEiLCJibHVlcHJpbnQiLCJkaXJlY3RpdmVEZWZpbml0aW9ucyIsInR5cGVEZWZpbml0aW9ucyIsInR5cGVFeHRlbnNpb25zIiwic2NoZW1hRGVmaW5pdGlvbnMiLCJzY2hlbWFFeHRlbnNpb25zIiwiZGVmaW5pdGlvbk5vZGUiLCJkZWZpbml0aW9ucyIsImtpbmQiLCJwdXNoIiwiRVJST1JTIiwiSU5WQUxJRF9HUkFQSFFMIiwiZXJyIiwibm9kZXMiLCJzY2hlbWFEZWZpbml0aW9uIiwicHJlc2VydmVFbXB0eURlZmluaXRpb24iLCJ0eXBlIiwibmFtZSIsImlzQnVpbHRJbiIsImFkZFR5cGUiLCJuZXdOYW1lZFR5cGUiLCJ3aXRob3V0VHJhaWxpbmdEZWZpbml0aW9uIiwiZXhpc3RpbmciLCJhZGREaXJlY3RpdmVEZWZpbml0aW9uIiwiYnVpbGROYW1lZFR5cGVBbmREaXJlY3RpdmVzU2hhbGxvdyIsInR5cGVOb2RlIiwiS2luZCIsIkVOVU1fVFlQRV9ERUZJTklUSU9OIiwiYnVpbGRFbnVtVHlwZVZhbHVlc1dpdGhvdXREaXJlY3RpdmVBcHBsaWNhdGlvbnMiLCJ0eXBlRXh0ZW5zaW9uTm9kZSIsIkVOVU1fVFlQRV9FWFRFTlNJT04iLCJleHRlbnNpb24iLCJuZXdFeHRlbnNpb24iLCJzb3VyY2VBU1QiLCJkaXJlY3RpdmVEZWZpbml0aW9uTm9kZSIsImJ1aWxkRGlyZWN0aXZlRGVmaW5pdGlvbklubmVyV2l0aG91dERpcmVjdGl2ZUFwcGxpY2F0aW9ucyIsImRpcmVjdGl2ZSIsImJ1aWxkU2NoZW1hRGVmaW5pdGlvbklubmVyIiwic2NoZW1hRXh0ZW5zaW9uIiwib25EaXJlY3RpdmVEZWZpbml0aW9uQW5kU2NoZW1hUGFyc2VkIiwiYnVpbGREaXJlY3RpdmVBcHBsaWNhdGlvbnNJbkRpcmVjdGl2ZURlZmluaXRpb24iLCJidWlsZE5hbWVkVHlwZUlubmVyIiwidG9FeHRlbmQiLCJsZW5ndGgiLCJFcnJHcmFwaFFMVmFsaWRhdGlvbkZhaWxlZCIsInZhbGlkYXRlIiwic3RyIiwiZW5kU3RyaW5nIiwiZW5kc1dpdGgiLCJzbGljZSIsIndpdGhOb2RlQXR0YWNoZWRUb0Vycm9yIiwib3BlcmF0aW9uIiwibm9kZSIsImUiLCJjYXVzZXMiLCJlcnJvckNhdXNlcyIsImNhdXNlIiwiYWxsTm9kZXMiLCJ3aXRoTW9kaWZpZWRFcnJvck5vZGVzIiwic2NoZW1hTm9kZSIsIm9wVHlwZU5vZGUiLCJvcGVyYXRpb25UeXBlcyIsInNldFJvb3QiLCJzZXRPZkV4dGVuc2lvbiIsImRlc2NyaXB0aW9uIiwiYnVpbGRBcHBsaWVkRGlyZWN0aXZlcyIsImVsZW1lbnROb2RlIiwiZWxlbWVudCIsImRpcmVjdGl2ZXMiLCJhcHBseURpcmVjdGl2ZXNBZnRlclBhcnNpbmciLCJhZGRVbmFwcGxpZWREaXJlY3RpdmUiLCJhcmdzIiwiYnVpbGRBcmdzIiwibmFtZU9yRGVmIiwiZCIsImFwcGx5RGlyZWN0aXZlIiwiYXJndW1lbnRzTm9kZSIsImNyZWF0ZSIsImFyZ05vZGUiLCJhcmd1bWVudHMiLCJfYyIsIl9kIiwiX2UiLCJlbnVtVHlwZSIsImVudW1WYWwiLCJ2YWx1ZXMiLCJmaWVsZEJhc2VkVHlwZSIsImZpZWxkTm9kZSIsImZpZWxkcyIsImlnbm9yZVBhcnNlZEZpZWxkIiwiZmllbGQiLCJhZGRGaWVsZCIsImJ1aWxkRmllbGREZWZpbml0aW9uSW5uZXIiLCJpdGZOb2RlIiwiaW50ZXJmYWNlcyIsIml0Zk5hbWUiLCJpbXBsZW1lbnRzSW50ZXJmYWNlIiwiYWRkSW1wbGVtZW50ZWRJbnRlcmZhY2UiLCJ1bmlvblR5cGUiLCJuYW1lZFR5cGUiLCJ0eXBlcyIsImhhc1R5cGVNZW1iZXIiLCJpbnB1dE9iamVjdFR5cGUiLCJidWlsZElucHV0RmllbGREZWZpbml0aW9uSW5uZXIiLCJidWlsZERlc2NyaXB0aW9uQW5kU291cmNlQVNUIiwidiIsImFkZFZhbHVlIiwiZGVzdCIsImJ1aWxkVHlwZVJlZmVyZW5jZUZyb21BU1QiLCJ3aGF0IiwiaXNPdXRwdXRUeXBlIiwidmFsaWRhdGVPdXRwdXRUeXBlIiwiY29vcmRpbmF0ZSIsImlucHV0VmFsdWVEZWYiLCJidWlsZEFyZ3VtZW50RGVmaW5pdGlvbklubmVyIiwiYWRkQXJndW1lbnQiLCJ2YWxpZGF0ZUlucHV0VHlwZSIsImlzSW5wdXRUeXBlIiwiTElTVF9UWVBFIiwiTGlzdFR5cGUiLCJOT05fTlVMTF9UWVBFIiwid3JhcHBlZCIsIk5vbk51bGxUeXBlIiwiZ2V0UmVmZXJlbmNlZFR5cGUiLCJpbnB1dE5vZGUiLCJhcmciLCJpbmNsdWRlRGlyZWN0aXZlQXBwbGljYXRpb24iLCJkZWZhdWx0VmFsdWUiLCJkaXJlY3RpdmVOb2RlIiwicmVwZWF0YWJsZSIsImxvY2F0aW9ucyIsIm1hcCIsImFkZExvY2F0aW9ucyIsImFyZ3VtZW50Iiwic291cmNlIiwicGFyc2UiLCJlbmNvZGVkVHlwZSIsInBhcnNlVHlwZSIsInJlbW92ZUFsbENvcmVGZWF0dXJlcyIsIkxJTktfVkVSU0lPTlMiLCJDT1JFX1ZFUlNJT05TIiwiZmluZENvcmVTcGVjVmVyc2lvbiIsIkZlYXR1cmVVcmwiLCJGZWF0dXJlVmVyc2lvbiIsIkZlYXR1cmVEZWZpbml0aW9ucyIsIkNvcmVTcGVjRGVmaW5pdGlvbiIsImlzQ29yZVNwZWNEaXJlY3RpdmVBcHBsaWNhdGlvbiIsImV4dHJhY3RDb3JlRmVhdHVyZUltcG9ydHMiLCJGZWF0dXJlRGVmaW5pdGlvbiIsImNvcmVQdXJwb3NlcyIsIkVyckNvcmVDaGVja0ZhaWxlZCIsImxpbmtEaXJlY3RpdmVEZWZhdWx0TmFtZSIsImxpbmtJZGVudGl0eSIsImNvcmVJZGVudGl0eSIsInVybF8xIiwidHlwZXNfMSIsInV0aWxzXzEiLCJrbm93bkNvcmVGZWF0dXJlc18xIiwic3VnZ2VzdGlvbnNfMSIsImRpcmVjdGl2ZUFuZFR5cGVTcGVjaWZpY2F0aW9uXzEiLCJidWlsZEVycm9yIiwibWVzc2FnZSIsInB1cnBvc2VzRGVzY3JpcHRpb24iLCJwdXJwb3NlIiwiYWdncmVnYXRlRXJyb3IiLCJjb25zdHJ1Y3RvciIsInVybCIsInRoaXMiLCJpZGVudGl0eSIsInZlcnNpb24iLCJpc1NwZWNUeXBlIiwibmFtZUluU2NoZW1hIiwic3RhcnRzV2l0aCIsImlzU3BlY0RpcmVjdGl2ZSIsImZlYXR1cmUiLCJmZWF0dXJlSW5TY2hlbWEiLCJkaXJlY3RpdmVOYW1lSW5TY2hlbWEiLCJkaXJlY3RpdmVOYW1lIiwidHlwZU5hbWVJblNjaGVtYSIsInR5cGVOYW1lIiwicm9vdERpcmVjdGl2ZSIsImVsZW1lbnROYW1lIiwiYWRkUm9vdERpcmVjdGl2ZSIsImFkZERpcmVjdGl2ZSIsImFkZERpcmVjdGl2ZVNwZWMiLCJzcGVjIiwiY2hlY2tPckFkZCIsImFkZFR5cGVTcGVjIiwiYWRkU2NhbGFyVHlwZSIsIlNjYWxhclR5cGUiLCJhZGRFbnVtVHlwZSIsIkVudW1UeXBlIiwiZmVhdHVyZXMiLCJjb3JlRmVhdHVyZXMiLCJnZXRCeUlkZW50aXR5IiwiZGVmYXVsdENvcmVQdXJwb3NlIiwidG9TdHJpbmciLCJ2YWxpZGF0ZUltcG9ydGVkTmFtZSIsImtub3duRWxlbWVudHMiLCJpbmNsdWRlcyIsImRldGFpbHMiLCJzdWdnZXN0aW9ucyIsInN1Z2dlc3Rpb25MaXN0IiwiZGlkWW91TWVhbiIsIklOVkFMSURfTElOS19ESVJFQ1RJVkVfVVNBR0UiLCJpbXBvcnQiLCJpbXBvcnRBcmdWYWx1ZSIsImRlZmluaXRpb24iLCJjb3JlRmVhdHVyZURlZmluaXRpb25JZktub3duIiwiYWxsRWxlbWVudE5hbWVzIiwiaW1wb3J0cyIsImltcG9ydEFyZ0xvb3AiLCJlbHQiLCJ2YWx1ZVRvU3RyaW5nIiwia2V5IiwiZW50cmllcyIsImkiLCJhcyIsImNoYXJBdCIsImFzQXJnIiwic2FtZVR5cGUiLCJzdHJpbmdUeXBlIiwiRGlyZWN0aXZlTG9jYXRpb24iLCJTQ0hFTUEiLCJ1cmxBcmciLCJsaW5rUHVycG9zZVR5cGVTcGVjIiwiY3JlYXRlRW51bVR5cGVTcGVjaWZpY2F0aW9uIiwibGlua0ltcG9ydFR5cGVTcGVjIiwiY3JlYXRlU2NhbGFyVHlwZVNwZWNpZmljYXRpb24iLCJzdXBlciIsImRpcmVjdGl2ZURlZmluaXRpb25TcGVjIiwiY3JlYXRlRGlyZWN0aXZlU3BlY2lmaWNhdGlvbiIsImFyZ3VtZW50RmN0IiwiY3JlYXRlRGVmaW5pdGlvbkFyZ3VtZW50U3BlY2lmaWNhdGlvbnMiLCJ1cmxBcmdOYW1lIiwic3VwcG9ydFB1cnBvc2VzIiwicHVycG9zZU5hbWUiLCJzdXBwb3J0SW1wb3J0IiwiaW1wb3J0TmFtZSIsImFkZEVsZW1lbnRzVG9TY2hlbWEiLCJfIiwiYWRkVG9TY2hlbWEiLCJhbGlhcyIsImFkZERlZmluaXRpb25zVG9TY2hlbWEiLCJzY2hlbWFEZWYiLCJoYXNEZWZpbml0aW9uIiwiaGFzTm9uRXh0ZW5zaW9uRWxlbWVudHMiLCJoYXNFeHRlbnNpb25FbGVtZW50cyIsImZpcnN0T2YiLCJleHRlbnNpb25zIiwiYXNzZXJ0IiwiZXhpc3RpbmdDb3JlIiwiY29yZUl0c2VsZiIsIm5hbWVzIiwic3RyaWN0bHlHcmVhdGVyVGhhbiIsImV4dHJhY3RGZWF0dXJlIiwiZXF1YWxzIiwiY29yZURpcmVjdGl2ZSIsImNvcmVWZXJzaW9uIiwiYXBwbHlGZWF0dXJlVG9TY2hlbWEiLCJmb3IiLCJleHRyYWN0RmVhdHVyZVVybCIsIl9kZWZpbml0aW9ucyIsImFkZCIsImZpbmQiLCJkZWYiLCJzb3J0IiwiZGVmMSIsImRlZjIiLCJjb21wYXJlVG8iLCJyZXF1ZXN0ZWQiLCJzYXRpc2ZpZXMiLCJ2ZXJzaW9ucyIsImxhdGVzdCIsIm1ham9yIiwibWlub3IiLCJzdGF0aWMiLCJpbnB1dCIsIm1hdGNoIiwiVkVSU0lPTl9SRSIsIklOVkFMSURfTElOS19JREVOVElGSUVSIiwicmVxdWlyZWQiLCJyTWFqb3IiLCJyTWlub3IiLCJzZXJpZXMiLCJTdHJpbmciLCJvdGhlciIsIlVSTCIsInBhdGhuYW1lIiwicGF0aCIsInNwbGl0IiwidmVyU3RyIiwicG9wIiwiaGFzaCIsInNlYXJjaCIsInBhc3N3b3JkIiwidXNlcm5hbWUiLCJqb2luIiwiaXNEaXJlY3RpdmUiLCJiYXNlIiwiZmVhdHVyZVVybCIsInJlZ2lzdGVyS25vd25GZWF0dXJlIiwiYWxsRmVhdHVyZXMiLCJ0eXBlUmVmZXJlbmNlcyIsImZpbHRlciIsImlzRmVhdHVyZURlZmluaXRpb24iLCJmb3JFYWNoIiwicmVtb3ZlIiwiYXBwbGljYXRpb24iLCJ0IiwicmVmZXJlbmNlcyIsInJlZmVyZW5jZXNJblNjaGVtYSIsInIiLCJpc0F0dGFjaGVkIiwiUkVGRVJFTkNFRF9JTkFDQ0VTU0lCTEUiLCJzb3VyY2VBU1RzIiwiRXJyR3JhcGhRTEFQSVNjaGVtYVZhbGlkYXRpb25GYWlsZWQiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiRGVidWdMb2dnZXIiLCJuZXdEZWJ1Z0xvZ2dlciIsImNoYWxrXzEiLCJpbmRlbnRTdHJpbmciLCJpbmRlbnRMZXZlbCIsImRlZmF1bHQiLCJibGFja0JyaWdodCIsImN1cnJlbnRJbmRlbnRMZXZlbCIsImN1cnJlbnRJbmRlbnRhdGlvbiIsIm1heExvZ2dlck5hbWVMZW5ndGgiLCJjcmVhdGVkTG9nZ2VycyIsImVuYWJsZWQiLCJwcm9jZXNzIiwiZW52IiwiQVBPTExPX0ZFREVSQVRJT05fREVCVUciLCJib29sIiwidmFsaWRhdGVTdHJpbmdDb250YWluc0Jvb2xlYW4iLCJuIiwidHJpbSIsImlzRW5hYmxlZCIsImNyZWF0ZWQiLCJnIiwiY29uc29sZSIsIk1hdGgiLCJtYXgiLCJsb2dnZXIiLCJwcm90b3R5cGUiLCJjYWxsIiwiaGVhZGVyIiwidXBkYXRlSGVhZGVyIiwibWF4TGVuZ3RoIiwicGFkZGluZyIsInRvUGFkIiwiZG9Mb2ciLCJpbmRlbnQiLCJ3aXRoSW5kZW50ZWROZXdsaW5lcyIsInJlcGxhY2UiLCJsb2ciLCJwcmVmaXgiLCJ5ZWxsb3ciLCJncm91cGVkVmFsdWVzIiwicHJpbnRGbiIsImluaXRpYWxNZXNzYWdlIiwiZ3JvdXAiLCJncm91cEVuZCIsImdyb3VwZWRFbnRyaWVzIiwia2V5UHJpbnRGbiIsInZhbHVlUHJpbnRGbiIsImsiLCJvcGVuaW5nTWVzc2FnZSIsImJsdWUiLCJjbG9zaW5nTWVzc2FnZSIsImdyZWVuIiwiQ29yZUZlYXR1cmVzIiwiQ29yZUZlYXR1cmUiLCJkZWZhdWx0U2NoZW1hQmx1ZXByaW50IiwiU2NoZW1hQmx1ZXByaW50IiwiTmFtZWRTY2hlbWFFbGVtZW50V2l0aFR5cGUiLCJOYW1lZFNjaGVtYUVsZW1lbnQiLCJTY2hlbWFFbGVtZW50IiwiRXh0ZW5zaW9uIiwiRGlyZWN0aXZlVGFyZ2V0RWxlbWVudCIsImlzTGVhZlR5cGUiLCJ0eXBlRnJvbUFTVCIsInR5cGVUb0FTVCIsImlzVHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uIiwidHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9ucyIsImlzRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uIiwiZXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9ucyIsImlzQ29uZGl0aW9uYWxEaXJlY3RpdmUiLCJydW50aW1lVHlwZXNJbnRlcnNlY3RzIiwicG9zc2libGVSdW50aW1lVHlwZXMiLCJpc0NvbXBvc2l0ZVR5cGUiLCJpc0Fic3RyYWN0VHlwZSIsImlzTnVsbGFibGVUeXBlIiwiYmFzZVR5cGUiLCJmaWx0ZXJUeXBlc09mS2luZCIsImlzVHlwZU9mS2luZCIsImlzSW5wdXRPYmplY3RUeXBlIiwiaXNVbmlvblR5cGUiLCJpc0VudW1UeXBlIiwiaXNJbnRlcmZhY2VUeXBlIiwiaXNPYmplY3RUeXBlIiwiaXNJRFR5cGUiLCJpc0Jvb2xlYW5UeXBlIiwiaXNGbG9hdFR5cGUiLCJpc1N0cmluZ1R5cGUiLCJpc0ludFR5cGUiLCJpc0N1c3RvbVNjYWxhclR5cGUiLCJpc1NjYWxhclR5cGUiLCJpc05vbk51bGxUeXBlIiwiaXNMaXN0VHlwZSIsImlzV3JhcHBlclR5cGUiLCJpc05hbWVkVHlwZSIsImlzU2NoZW1hUm9vdFR5cGUiLCJkZWZhdWx0Um9vdE5hbWUiLCJhbGxTY2hlbWFSb290S2luZHMiLCJ0eXBlbmFtZUZpZWxkTmFtZSIsImNvcHlEaXJlY3RpdmVEZWZpbml0aW9uVG9TY2hlbWEiLCJ2YXJpYWJsZURlZmluaXRpb25Gcm9tQVNUIiwidmFyaWFibGVEZWZpbml0aW9uc0Zyb21BU1QiLCJWYXJpYWJsZURlZmluaXRpb25zIiwiVmFyaWFibGVEZWZpbml0aW9uIiwidmFyaWFibGVzSW5Bcmd1bWVudHMiLCJpc1ZhcmlhYmxlIiwiY29udGFpbnNWYXJpYWJsZSIsIm1lcmdlVmFyaWFibGVzIiwiVmFyaWFibGUiLCJkaXJlY3RpdmVBcHBsaWNhdGlvbnNTdWJzdHJhY3Rpb24iLCJpc0RpcmVjdGl2ZUFwcGxpY2F0aW9uc1N1YnNldCIsInNhbWVEaXJlY3RpdmVBcHBsaWNhdGlvbnMiLCJzYW1lRGlyZWN0aXZlQXBwbGljYXRpb24iLCJEaXJlY3RpdmUiLCJEaXJlY3RpdmVEZWZpbml0aW9uIiwiRW51bVZhbHVlIiwiQXJndW1lbnREZWZpbml0aW9uIiwiSW5wdXRGaWVsZERlZmluaXRpb24iLCJGaWVsZERlZmluaXRpb24iLCJJbnB1dE9iamVjdFR5cGUiLCJVbmlvblR5cGUiLCJVbmlvbk1lbWJlciIsIkludGVyZmFjZVR5cGUiLCJPYmplY3RUeXBlIiwiSW50ZXJmYWNlSW1wbGVtZW50YXRpb24iLCJTY2hlbWFEZWZpbml0aW9uIiwiUm9vdFR5cGUiLCJjb3JlU3BlY18xIiwiaW5hY2Nlc3NpYmxlU3BlY18xIiwicHJpbnRfMSIsImludHJvc3BlY3Rpb25fMSIsInZhbGlkYXRlXzEiLCJzcGVjaWZpZWRSdWxlc18xIiwidmFsaWRhdGVfMiIsInJvb3RLaW5kIiwidG9VcHBlckNhc2UiLCJyZWR1Y2UiLCJhY2MiLCJpc1Jvb3RUeXBlIiwiQmFzZU5hbWVkVHlwZSIsImdyYXBoUUxCdWlsdEluVHlwZXMiLCJpbnRUeXBlIiwiZmxvYXRUeXBlIiwiYm9vbGVhblR5cGUiLCJpZFR5cGUiLCJ0MSIsInQyIiwicnQxIiwicnQyIiwib2JqMSIsInNvbWUiLCJvYmoyIiwiUVVFUlkiLCJNVVRBVElPTiIsIlNVQlNDUklQVElPTiIsIkZJRUxEIiwiRlJBR01FTlRfREVGSU5JVElPTiIsIkZSQUdNRU5UX1NQUkVBRCIsIklOTElORV9GUkFHTUVOVCIsIlZBUklBQkxFX0RFRklOSVRJT04iLCJleGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb25zU2V0IiwiU2V0IiwibG9jIiwiaGFzIiwiU0NBTEFSIiwiT0JKRUNUIiwiRklFTERfREVGSU5JVElPTiIsIkFSR1VNRU5UX0RFRklOSVRJT04iLCJJTlRFUkZBQ0UiLCJVTklPTiIsIkVOVU0iLCJFTlVNX1ZBTFVFIiwiSU5QVVRfT0JKRUNUIiwiSU5QVVRfRklFTERfREVGSU5JVElPTiIsInR5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbnNTZXQiLCJvZlR5cGUiLCJOQU1FRF9UWVBFIiwiTkFNRSIsIl9zY2hlbWEiLCJhcHBsaWVkRGlyZWN0aXZlc09mIiwibmFtZU9yRGVmaW5pdGlvbiIsImFwcGxpZWREaXJlY3RpdmVzIiwiX2FwcGxpZWREaXJlY3RpdmVzIiwiaGFzQXBwbGllZERpcmVjdGl2ZSIsImRlZk9yRGlyZWN0aXZlIiwidG9BZGQiLCJzZXRBcmd1bWVudHMiLCJFbGVtZW50IiwiYXBwbGllZERpcmVjdGl2ZXNUb0RpcmVjdGl2ZU5vZGVzIiwiRElSRUNUSVZFIiwiYXJndW1lbnRzVG9BU1QiLCJhcHBsaWVkRGlyZWN0aXZlc1RvU3RyaW5nIiwidmFyaWFibGVzSW5BcHBsaWVkRGlyZWN0aXZlcyIsImVsdHMiLCJzY2hlbWFJbnRlcm5hbCIsIl9wYXJlbnQiLCJwYXJlbnQiLCJzZXRQYXJlbnQiLCJvbkF0dGFjaGVkIiwiY2hlY2tVcGRhdGUiLCJleHRlbmRlZEVsZW1lbnQiLCJfZXh0ZW5kZWRFbGVtZW50Iiwic2V0RXh0ZW5kZWRFbGVtZW50IiwiX3VuYXBwbGllZERpcmVjdGl2ZXMiLCJwcm9jZXNzVW5hcHBsaWVkRGlyZWN0aXZlcyIsImFzRmlyc3REaXJlY3RpdmUiLCJvbk1pc3NpbmdEaXJlY3RpdmVEZWZpbml0aW9uIiwib25HcmFwaFFMSlNWYWxpZGF0aW9uRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJ1bnNoaWZ0Iiwib25Nb2RpZmljYXRpb24iLCJyZW1vdmVBcHBsaWVkRGlyZWN0aXZlcyIsImNvbmNhdCIsImlzRWxlbWVudEJ1aWx0SW4iLCJyZW1vdmVUeXBlUmVmZXJlbmNlSW50ZXJuYWwiLCJyZW1vdmVUeXBlUmVmZXJlbmNlIiwiY2hlY2tSZW1vdmFsIiwiYWRkZWRFbGVtZW50IiwidGhpc0VsZW1lbnQiLCJ0aGF0U2NoZW1hIiwiX25hbWUiLCJhZGRSZWZlcmVuY2VyIiwicmVmZXJlbmNlciIsIl9yZWZlcmVuY2VycyIsInJlbW92ZVJlZmVyZW5jZXIiLCJyZW1vdmVBcnJheUVsZW1lbnQiLCJfZXh0ZW5zaW9ucyIsImhhc0V4dGVuc2lvbiIsImFkZEV4dGVuc2lvbiIsInJlbW92ZUV4dGVuc2lvbnMiLCJyZW1vdmVPZkV4dGVuc2lvbiIsInJlbW92ZUlubmVyRWxlbWVudHNFeHRlbnNpb25zIiwiaXNJbnRyb3NwZWN0aW9uVHlwZSIsImlzSW50cm9zcGVjdGlvbk5hbWUiLCJvZkV4dGVuc2lvbiIsImhhc05vbkV4dGVuc2lvbklubmVyRWxlbWVudHMiLCJyZW5hbWUiLCJuZXdOYW1lIiwib2xkTmFtZSIsInJlbW92ZUlubmVyRWxlbWVudHMiLCJ0b1JldHVybiIsInJlbW92ZVJlY3Vyc2l2ZSIsInJlZiIsInJlbW92ZVJlZmVyZW5jZVJlY3Vyc2l2ZSIsInJlZmVyZW5jZXJzIiwiaXNSZWZlcmVuY2VkIiwiX3R5cGUiLCJyZW1vdmVSZWZlcmVuY2VUb1R5cGUiLCJhZGRSZWZlcmVuY2VUb1R5cGUiLCJCYXNlRXh0ZW5zaW9uTWVtYmVyIiwiX2V4dGVuc2lvbiIsInJlbW92ZUlubmVyIiwiX2FyZ3MiLCJfZmllbGROYW1lIiwib25Db25zdHJ1Y3RlZCIsIm9uQWRkZWRDb3JlRmVhdHVyZSIsIl9mZWF0dXJlIiwib25JbnZhbGlkYXRpb24iLCJvblZhbGlkYXRpb24iLCJ2YWxpZGF0aW9uUnVsZXMiLCJzcGVjaWZpZWRTRExSdWxlcyIsImVycm9yIiwibWF0Y2hlciIsImV4ZWMiLCJncm91cHMiLCJhbGxEZWZpbmVkRGlyZWN0aXZlTmFtZXMiLCJhbGxEaXJlY3RpdmVzIiwib25Vbmtub3duRGlyZWN0aXZlVmFsaWRhdGlvbkVycm9yIiwid2l0aE1vZGlmaWVkRXJyb3JNZXNzYWdlIiwicyIsIl91bmtub3duRGlyZWN0aXZlTmFtZSIsImVsZW1lbnRJbXBvcnQiLCJieUFsaWFzIiwiTWFwIiwiYnlJZGVudGl0eSIsImNvcmVEZWYiLCJVTktOT1dOX0xJTktfVkVSU0lPTiIsImNvcmVEZWZpbml0aW9uIiwiZ2V0IiwicmVtb3ZlRmVhdHVyZSIsImZlYXR1cmVJZGVudGl0eSIsImRlbGV0ZSIsIm1heWJlQWRkRmVhdHVyZSIsInR5cGVkRGlyZWN0aXZlIiwic2V0Iiwic291cmNlRmVhdHVyZSIsInNwbGl0dGVkIiwibmFtZUluRmVhdHVyZSIsImlzSW1wb3J0ZWQiLCJkaXJlY3RGZWF0dXJlIiwiaW1wIiwiZ3JhcGhRTEJ1aWx0SW5UeXBlc1NwZWNpZmljYXRpb25zIiwiZ3JhcGhRTEJ1aWx0SW5EaXJlY3RpdmVzU3BlY2lmaWNhdGlvbnMiLCJjb29yZGluYXRlUmVnZXhwIiwiY29uZmlnIiwiX2J1aWx0SW5UeXBlcyIsIk1hcFdpdGhDYWNoZWRBcnJheXMiLCJfdHlwZXMiLCJfYnVpbHRJbkRpcmVjdGl2ZXMiLCJfZGlyZWN0aXZlcyIsImlzQ29uc3RydWN0ZWQiLCJpc1ZhbGlkYXRlZCIsIl9zY2hlbWFEZWZpbml0aW9uIiwiY2FuTW9kaWZ5QnVpbHRJbiIsInJ1bldpdGhCdWlsdEluTW9kaWZpY2F0aW9uQWxsb3dlZCIsImZjdCIsIndhc0NvbnN0cnVjdGVkIiwicmVuYW1lVHlwZUludGVybmFsIiwicmVtb3ZlVHlwZUludGVybmFsIiwicmVtb3ZlRGlyZWN0aXZlSW50ZXJuYWwiLCJtYXJrQXNDb3JlU2NoZW1hIiwiX2NvcmVGZWF0dXJlcyIsInVubWFya0FzQ29yZVNjaGVtYSIsImludmFsaWRhdGUiLCJjYWNoZWREb2N1bWVudCIsImFwaVNjaGVtYSIsImlzQ29yZVNjaGVtYSIsInRvQVNUIiwiYXN0IiwicHJpbnRTY2hlbWEiLCJub0xvY2F0aW9uIiwiY2FjaGVBU1QiLCJ0b0FQSVNjaGVtYSIsImNsb25lIiwidG9SZW1vdmVJZkN1c3RvbSIsInJlbW92ZUluYWNjZXNzaWJsZUVsZW1lbnRzIiwiZW1wdHlBU1REZWZpbml0aW9uc0ZvckV4dGVuc2lvbnNXaXRob3V0RGVmaW5pdGlvbiIsIlNDSEVNQV9ERUZJTklUSU9OIiwiYXN0RGVmaW5pdGlvbktpbmQiLCJ0b0dyYXBoUUxKU1NjaGVtYSIsImluY2x1ZGVEZWZlciIsImluY2x1ZGVTdHJlYW0iLCJhZGRpdGlvbmFsTm9kZXMiLCJkZWZlckRpcmVjdGl2ZSIsInN0cmVhbURpcmVjdGl2ZSIsIkRPQ1VNRU5UIiwiZ3JhcGhRTFNjaGVtYSIsImJ1aWxkQVNUU2NoZW1hIiwiYXN0Tm9kZSIsIlNDQUxBUl9UWVBFX0RFRklOSVRJT04iLCJPQkpFQ1RfVFlQRV9ERUZJTklUSU9OIiwiSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiIsIlVOSU9OX1RZUEVfREVGSU5JVElPTiIsIklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04iLCJnZXRUeXBlIiwiaW50ZXJmYWNlVHlwZXMiLCJvYmplY3RUeXBlcyIsInVuaW9uVHlwZXMiLCJzY2FsYXJUeXBlcyIsImlucHV0VHlwZXMiLCJlbnVtVHlwZXMiLCJidWlsdEluVHlwZXMiLCJpbmNsdWRlU2hhZG93ZWQiLCJhbGxCdWlsdElucyIsImlzU2hhZG93ZWRCdWlsdEluVHlwZSIsImFsbFR5cGVzIiwidHlwZU9mS2luZCIsImRlZmF1bHRTY2hlbWFSb290IiwiY2hlY2tEZWZhdWx0U2NoZW1hUm9vdCIsInJvb3QiLCJidWlsdEluRGlyZWN0aXZlcyIsImlzU2hhZG93ZWRCdWlsdEluRGlyZWN0aXZlIiwiYnVpbHRJbkRpcmVjdGl2ZSIsImFsbENoaWxkRWxlbWVudHMiLCJhbGxOYW1lZFNjaGVtYUVsZW1lbnQiLCJkaXJlY3RpdmVPck5hbWUiLCJhZGRJbnRyb3NwZWN0aW9uRmllbGRzIiwidmFsaWRhdGVTREwiLCJ2YWxpZGF0ZVNjaGVtYSIsImJ1aWx0SW5zIiwiY2xvbmVkIiwidHlwZXNUb0NvcHkiLCJkaXJlY3RpdmVzVG9Db3B5IiwiY29weURpcmVjdGl2ZURlZmluaXRpb25Jbm5lciIsImV4dGVuc2lvbnNNYXAiLCJjb3B5RXh0ZW5zaW9ucyIsInJvb3RUeXBlIiwicm9vdHMiLCJjb3B5T2ZFeHRlbnNpb24iLCJjb3B5QXBwbGllZERpcmVjdGl2ZSIsImNvcHlTY2hlbWFEZWZpbml0aW9uSW5uZXIiLCJjb3B5TmFtZWRUeXBlSW5uZXIiLCJjb3B5IiwiZ2V0QnVpbHRJbkRpcmVjdGl2ZSIsImluY2x1ZGVEaXJlY3RpdmUiLCJza2lwRGlyZWN0aXZlIiwiZGVwcmVjYXRlZERpcmVjdGl2ZSIsInNwZWNpZmllZEJ5RGlyZWN0aXZlIiwiZWxlbWVudEJ5Q29vcmRpbmF0ZSIsImFyZ1N0YXJ0SWR4IiwiaW5kZXhPZiIsInN0YXJ0IiwiYXJnTmFtZSIsInNwbGl0dGVkU3RhcnQiLCJ0eXBlT3JEaXJlY3RpdmVOYW1lIiwiZmllbGRPckVudW1OYW1lIiwiaXNEZWZhdWx0Um9vdE5hbWUiLCJfcm9vdHMiLCJhcHBsaWVkIiwic2NoZW1hRGlyZWN0aXZlIiwiY29yZSIsImEiLCJuYW1lT3JUeXBlIiwidG9TZXQiLCJvYmoiLCJwcmV2Um9vdCIsInJlbW92ZVJvb3RUeXBlIiwidG9SZW1vdmUiLCJrZXlzIiwiaXRmIiwiaW50ZXJmYWNlIiwiRmllbGRCYXNlZFR5cGUiLCJfZmllbGRzIiwicmVtb3ZlRmllbGRJbnRlcm5hbCIsIl9jYWNoZWROb25CdWlsdEluRmllbGRzIiwiaW50ZXJmYWNlSW1wbGVtZW50YXRpb25zIiwiX2ludGVyZmFjZUltcGxlbWVudGF0aW9ucyIsImludGVyZmFjZUltcGxlbWVudGF0aW9uIiwiaW1wbCIsIm5hbWVPckl0Zk9ySXRmSW1wbCIsIm1heWJlSXRmIiwiZiIsImhhc0ZpZWxkcyIsImJ1aWx0SW5GaWVsZHMiLCJhbGxGaWVsZHMiLCJ0eXBlbmFtZUZpZWxkIiwibmFtZU9yRmllbGQiLCJyZW1vdmVJbnRlcmZhY2VJbXBsZW1lbnRhdGlvbiIsImludGVyZmFjZUltcGwiLCJydCIsImlzUXVlcnlSb290VHlwZSIsIm1lbWJlcnNDb3VudCIsImFsbEltcGxlbWVudGF0aW9ucyIsImlzUG9zc2libGVSdW50aW1lVHlwZSIsIl9tZW1iZXJzIiwiX3R5cGVuYW1lRmllbGQiLCJtZW1iZXJzIiwibSIsInNpemUiLCJuYW1lT3JUeXBlT3JNZW1iZXIiLCJtYXliZU9iaiIsImNsZWFyVHlwZXMiLCJyZW1vdmVNZW1iZXIiLCJtZW1iZXIiLCJfdmFsdWVzIiwiZnJvbSIsIm5hbWVPclZhbHVlIiwicmVtb3ZlVmFsdWVJbnRlcm5hbCIsIl9jYWNoZWRGaWVsZHNBcnJheSIsIm1hcFZhbHVlcyIsIkJhc2VXcmFwcGVyVHlwZSIsImhhc0FyZ3VtZW50cyIsIm5hbWVPckFyZyIsInZhbHVlRXF1YWxzIiwiaXNJbnRyb3NwZWN0aW9uRmllbGQiLCJpc1NjaGVtYUludHJvc3BlY3Rpb25GaWVsZCIsImludHJvc3BlY3Rpb25GaWVsZE5hbWVzIiwicmVtb3ZlQXJndW1lbnRJbnRlcm5hbCIsInJlbW92ZVBhcmVudCIsImlzRGVwcmVjYXRlZCIsImlzUmVxdWlyZWQiLCJkZWZhdWx0U3RyIiwiX2xvY2F0aW9ucyIsIm1vZGlmaWVkIiwibG9jYXRpb24iLCJhZGRBbGxMb2NhdGlvbnMiLCJhZGRBbGxUeXBlTG9jYXRpb25zIiwicmVtb3ZlTG9jYXRpb25zIiwiaGFzRXhlY3V0YWJsZUxvY2F0aW9ucyIsImhhc1R5cGVTeXN0ZW1Mb2NhdGlvbnMiLCJhcHBsaWNhdGlvbnMiLCJwcmludERpcmVjdGl2ZURlZmluaXRpb24iLCJpbmNsdWRlRGVmYXVsdFZhbHVlcyIsInVwZGF0ZWQiLCJhcmdEZWYiLCJhcmdWYWx1ZSIsIndpdGhEZWZhdWx0VmFsdWVzIiwiaXNBdHRhY2hlZFRvU2NoZW1hRWxlbWVudCIsImFyZ3VtZW50VHlwZSIsIm1hdGNoQXJndW1lbnRzIiwiZXhwZWN0ZWRBcmdzIiwidmFsIiwiZXhwZWN0ZWRWYWwiLCJBUkdVTUVOVCIsInZhbHVlVG9BU1QiLCJyZW1vdmVJbnRlcm5hbCIsInBhcmVudERpcmVjdGl2ZXMiLCJyZW1vdmVkIiwiYXBwbGljYXRpb24xIiwiYXBwbGljYXRpb24yIiwiZGlyZWN0aXZlc05ldmVyRXF1YWxUb1RoZW1zZWx2ZXMiLCJhcmd1bWVudHNFcXVhbHMiLCJhcHBsaWNhdGlvbnMxIiwiYXBwbGljYXRpb25zMiIsImRpcmVjdGl2ZTEiLCJkaXJlY3RpdmUyIiwibWF5YmVTdWJzZXQiLCJiYXNlQXBwbGljYXRpb25zIiwidG9WYXJpYWJsZU5vZGUiLCJWQVJJQUJMRSIsInYxcyIsInYycyIsInJlcyIsInZhcmlhYmxlcyIsInRvQ2hlY2siLCJ2YXJpYWJsZXNJblZhbHVlIiwidmFyaWFibGUiLCJ0b1ZhcmlhYmxlRGVmaW5pdGlvbk5vZGUiLCJ2YWx1ZU5vZGVUb0NvbnN0VmFsdWVOb2RlIiwiYWRkQWxsIiwidmFyTmFtZSIsImlzRW1wdHkiLCJuZXdEZWZzIiwidG9WYXJpYWJsZURlZmluaXRpb25Ob2RlcyIsInZhbHVlRnJvbUFTVCIsImV4dGVuc2lvbk1hcCIsInNvdXJjZUV4dGVuc2lvbiIsImRlc3RFeHRlbnNpb24iLCJ0b0NvcHkiLCJkZXN0RmllbGRCYXNlZFR5cGUiLCJzb3VyY2VGaWVsZCIsImRlc3RGaWVsZCIsImNvcHlGaWVsZERlZmluaXRpb25Jbm5lciIsInNvdXJjZUltcGwiLCJkZXN0VW5pb25UeXBlIiwic291cmNlVHlwZSIsImRlc3RFbnVtVHlwZSIsInNvdXJjZVZhbHVlIiwiZGVzdFZhbHVlIiwiY29weUFwcGxpZWREaXJlY3RpdmVzIiwiZGVzdElucHV0VHlwZSIsImNvcHlJbnB1dEZpZWxkRGVmaW5pdGlvbklubmVyIiwiY29weVdyYXBwZXJUeXBlT3JUeXBlUmVmIiwiYXJnVHlwZSIsImNvcHlBcmd1bWVudERlZmluaXRpb25Jbm5lciIsImRlc3RQYXJlbnQiLCJjb3B5RGlyZWN0aXZlQXBwbGljYXRpb25zIiwiY29weURpcmVjdGl2ZUFwcGxpY2F0aW9uc0luQXJndW1lbnRzIiwibG9jYXRpb25GaWx0ZXIiLCJkZWZpbml0aW9uTm9kZXMiLCJjcmVhdGVVbmlvblR5cGVTcGVjaWZpY2F0aW9uIiwiY3JlYXRlT2JqZWN0VHlwZVNwZWNpZmljYXRpb24iLCJlbnN1cmVTYW1lVHlwZUtpbmQiLCJleHBlY3RlZCIsImFjdHVhbCIsIlRZUEVfREVGSU5JVElPTl9JTlZBTElEIiwiZW5zdXJlU2FtZUFyZ3VtZW50cyIsImNvbnRhaW5lclNvdXJjZUFTVCIsImV4cGVjdGVkQXJndW1lbnRzIiwiYWN0dWFsQXJndW1lbnQiLCJESVJFQ1RJVkVfREVGSU5JVElPTl9JTlZBTElEIiwiYWN0dWFsVHlwZSIsImlzVmFsaWRJbnB1dFR5cGVSZWRlZmluaXRpb24iLCJleHBlY3RlZFR5cGUiLCJhc0J1aWx0SW4iLCJhY3R1YWxOYW1lIiwiZXZlcnkiLCJlbnN1cmVTYW1lRGlyZWN0aXZlU3RydWN0dXJlIiwiZmllbGRzRmN0IiwiZXhwZWN0ZWRGaWVsZHMiLCJleGlzdGluZ0ZpZWxkIiwiZXhpc3RpbmdUeXBlIiwiY3JlYXRlZFR5cGUiLCJtZW1iZXJzRmN0IiwiZXhwZWN0ZWRNZW1iZXJzIiwibjEiLCJuMiIsImxvY2FsZUNvbXBhcmUiLCJhY3R1YWxNZW1iZXJzIiwiYXJyYXlFcXVhbHMiLCJleHBlY3RlZFZhbHVlTmFtZXMiLCJhY3R1YWxWYWx1ZU5hbWVzIiwiUkVNT1ZFRF9FUlJPUlMiLCJFUlJPUl9DQVRFR09SSUVTIiwiZXJyb3JDb2RlRGVmIiwiZXJyb3JDb2RlIiwicHJpbnRFcnJvcnMiLCJwcmludEdyYXBoUUxFcnJvcnNPclJldGhyb3ciLCJleHRyYWN0R3JhcGhRTEVycm9yT3B0aW9ucyIsIkZFRDFfQ09ERSIsIm1ha2VDb2RlRGVmaW5pdGlvbiIsImNvZGUiLCJtZXRhZGF0YSIsIkRFRkFVTFRfTUVUQURBVEEiLCJHcmFwaFFMRXJyb3IiLCJwb3NpdGlvbnMiLCJvcmlnaW5hbEVycm9yIiwiQWdncmVnYXRlR3JhcGhRTEVycm9yIiwiYyIsIm91dHB1dCIsImFkZGVkSW4iLCJtYWtlRXJyb3JDb2RlQ2F0ZWdvcnkiLCJleHRyYWN0Q29kZSIsIm1ha2VEZXNjcmlwdGlvbiIsImNyZWF0ZUNvZGUiLCJjb2RlRGVmQnlDb2RlIiwibWFrZUZlZGVyYXRpb25EaXJlY3RpdmVFcnJvckNvZGVDYXRlZ29yeSIsImNvZGVTdWZmaXgiLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsIm5ld01lc3NhZ2UiLCJuZXdOb2RlcyIsInJlcGxhY2VzIiwiVU5TVVBQT1JURURfTElOS0VEX0ZFQVRVUkUiLCJVTktOT1dOX0ZFREVSQVRJT05fTElOS19WRVJTSU9OIiwiRklFTERTX0hBU19BUkdTIiwiS0VZX0ZJRUxEU19IQVNfQVJHUyIsIlBST1ZJREVTX0ZJRUxEU19IQVNfQVJHUyIsIkRJUkVDVElWRV9GSUVMRFNfTUlTU0lOR19FWFRFUk5BTCIsIlBST1ZJREVTX01JU1NJTkdfRVhURVJOQUwiLCJSRVFVSVJFU19NSVNTSU5HX0VYVEVSTkFMIiwiRElSRUNUSVZFX1VOU1VQUE9SVEVEX09OX0lOVEVSRkFDRSIsIktFWV9VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UiLCJQUk9WSURFU19VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UiLCJSRVFVSVJFU19VTlNVUFBPUlRFRF9PTl9JTlRFUkZBQ0UiLCJESVJFQ1RJVkVfSU5fRklFTERTX0FSRyIsIktFWV9IQVNfRElSRUNUSVZFX0lOX0ZJRUxEU19BUkdTIiwiUFJPVklERVNfSEFTX0RJUkVDVElWRV9JTl9GSUVMRFNfQVJHUyIsIlJFUVVJUkVTX0hBU19ESVJFQ1RJVkVfSU5fRklFTERTX0FSR1MiLCJFWFRFUk5BTF9VTlVTRUQiLCJUWVBFX1dJVEhfT05MWV9VTlVTRURfRVhURVJOQUwiLCJQUk9WSURFU19PTl9OT05fT0JKRUNUX0ZJRUxEIiwiRElSRUNUSVZFX0lOVkFMSURfRklFTERTX1RZUEUiLCJLRVlfSU5WQUxJRF9GSUVMRFNfVFlQRSIsIlBST1ZJREVTX0lOVkFMSURfRklFTERTX1RZUEUiLCJSRVFVSVJFU19JTlZBTElEX0ZJRUxEU19UWVBFIiwiRElSRUNUSVZFX0lOVkFMSURfRklFTERTIiwiS0VZX0lOVkFMSURfRklFTERTIiwiUFJPVklERVNfSU5WQUxJRF9GSUVMRFMiLCJSRVFVSVJFU19JTlZBTElEX0ZJRUxEUyIsIktFWV9GSUVMRFNfU0VMRUNUX0lOVkFMSURfVFlQRSIsIlJPT1RfVFlQRV9VU0VEIiwiUk9PVF9RVUVSWV9VU0VEIiwiUk9PVF9NVVRBVElPTl9VU0VEIiwiUk9PVF9TVUJTQ1JJUFRJT05fVVNFRCIsIklOVkFMSURfU1VCR1JBUEhfTkFNRSIsIk5PX1FVRVJJRVMiLCJJTlRFUkZBQ0VfRklFTERfTk9fSU1QTEVNIiwiVFlQRV9LSU5EX01JU01BVENIIiwiRVhURVJOQUxfVFlQRV9NSVNNQVRDSCIsIkVYVEVSTkFMX0NPTExJU0lPTl9XSVRIX0FOT1RIRVJfRElSRUNUSVZFIiwiRVhURVJOQUxfQVJHVU1FTlRfTUlTU0lORyIsIkVYVEVSTkFMX0FSR1VNRU5UX1RZUEVfTUlTTUFUQ0giLCJFWFRFUk5BTF9BUkdVTUVOVF9ERUZBVUxUX01JU01BVENIIiwiRVhURVJOQUxfT05fSU5URVJGQUNFIiwiTUVSR0VEX0RJUkVDVElWRV9BUFBMSUNBVElPTl9PTl9FWFRFUk5BTCIsIkZJRUxEX1RZUEVfTUlTTUFUQ0giLCJBUkdVTUVOVF9UWVBFX01JU01BVENIIiwiSU5QVVRfRklFTERfREVGQVVMVF9NSVNNQVRDSCIsIkFSR1VNRU5UX0RFRkFVTFRfTUlTTUFUQ0giLCJFWFRFTlNJT05fV0lUSF9OT19CQVNFIiwiRVhURVJOQUxfTUlTU0lOR19PTl9CQVNFIiwiSU5URVJGQUNFX0ZJRUxEX0lNUExFTV9UWVBFX01JU01BVENIIiwiSU5WQUxJRF9GSUVMRF9TSEFSSU5HIiwiTElOS19JTVBPUlRfTkFNRV9NSVNNQVRDSCIsIkRFRkFVTFRfVkFMVUVfVVNFU19JTkFDQ0VTU0lCTEUiLCJRVUVSWV9ST09UX1RZUEVfSU5BQ0NFU1NJQkxFIiwiUkVRVUlSRURfSU5BQ0NFU1NJQkxFIiwiSU1QTEVNRU5URURfQllfSU5BQ0NFU1NJQkxFIiwiRElTQUxMT1dFRF9JTkFDQ0VTU0lCTEUiLCJPTkxZX0lOQUNDRVNTSUJMRV9DSElMRFJFTiIsIlJFUVVJUkVEX0lOUFVUX0ZJRUxEX01JU1NJTkdfSU5fU09NRV9TVUJHUkFQSCIsIlJFUVVJUkVEX0FSR1VNRU5UX01JU1NJTkdfSU5fU09NRV9TVUJHUkFQSCIsIkVNUFRZX01FUkdFRF9JTlBVVF9UWVBFIiwiRU5VTV9WQUxVRV9NSVNNQVRDSCIsIkVNUFRZX01FUkdFRF9FTlVNX1RZUEUiLCJTQVRJU0ZJQUJJTElUWV9FUlJPUiIsIk9WRVJSSURFX0ZST01fU0VMRl9FUlJPUiIsIk9WRVJSSURFX1NPVVJDRV9IQVNfT1ZFUlJJREUiLCJPVkVSUklERV9DT0xMSVNJT05fV0lUSF9BTk9USEVSX0RJUkVDVElWRSIsIlVOU1VQUE9SVEVEX0ZFQVRVUkUiLCJJTlZBTElEX0ZFREVSQVRJT05fU1VQRVJHUkFQSCIsIkRPV05TVFJFQU1fU0VSVklDRV9FUlJPUiIsIkRJUkVDVElWRV9DT01QT1NJVElPTl9FUlJPUiIsImNvZGVEZWYiLCJleHRyYWN0U3ViZ3JhcGhzRnJvbVN1cGVyZ3JhcGgiLCJleHRyYWN0U3ViZ3JhcGhzTmFtZXNBbmRVcmxzRnJvbVN1cGVyZ3JhcGgiLCJmZWRlcmF0aW9uXzEiLCJmZWRlcmF0aW9uXzIiLCJzdXBlcmdyYXBoc18xIiwiYnVpbGRTY2hlbWFfMSIsIm9wZXJhdGlvbnNfMSIsImZzXzEiLCJwYXRoXzEiLCJ1dGlsc18yIiwiXzEiLCJmaWx0ZXJlZFR5cGVzIiwic3VwZXJncmFwaCIsImpvaW5TcGVjIiwiY29yZVNwZWMiLCJjb2xsZWN0RW1wdHlTdWJncmFwaHMiLCJzdWJncmFwaHMiLCJTdWJncmFwaHMiLCJncmFwaERpcmVjdGl2ZSIsImdyYXBoRW51bSIsImdyYXBoRW51bU5hbWVUb1N1YmdyYXBoTmFtZSIsImdyYXBoQXBwbGljYXRpb25zIiwic3ViZ3JhcGgiLCJTdWJncmFwaCIsIm5ld0VtcHR5RmVkZXJhdGlvbjJTY2hlbWEiLCJ2YWxpZGF0ZVN1cGVyZ3JhcGgiLCJTdWJncmFwaEV4dHJhY3Rpb25FcnJvciIsImNvbGxlY3RGaWVsZFJlYWNoYWJsZVR5cGVzRm9yU3ViZ3JhcGgiLCJzdWJncmFwaE5hbWUiLCJhZGRSZWFjaGFibGVUeXBlIiwiZmllbGRJbmZvSW5TdWJncmFwaCIsInR5cGVJbmZvSW5TdWJncmFwaCIsInNlZW5UeXBlcyIsInN0YWNrIiwiaXNFbnRpdHlXaXRoS2V5SW5TdWJncmFwaCIsInR5cGVzSW5GZWRlcmF0aW9uRGlyZWN0aXZlcyIsImlzSW5TdWJncmFwaCIsInR5cGVzVXNlZEluRmVkZXJhdGlvbkRpcmVjdGl2ZSIsImZpZWxkU2V0IiwicGFyZW50VHlwZSIsInVzZWRUeXBlcyIsInBhcnNlU2VsZWN0aW9uU2V0IiwiZmllbGRBY2Nlc3NvciIsImZpZWxkTmFtZSIsImVycm9yVG9TdHJpbmciLCJhZGRTdWJncmFwaEZpZWxkIiwic3VwZXJncmFwaEZpZWxkIiwiYWRkU3ViZ3JhcGhPYmplY3RPckludGVyZmFjZUZpZWxkIiwic3ViZ3JhcGhUeXBlIiwiY29waWVkVHlwZSIsImRlY29kZVR5cGUiLCJjb3B5VHlwZSIsImFkZFN1YmdyYXBoSW5wdXRGaWVsZCIsImFkZEV4dGVybmFsRmllbGRzIiwiaXNGZWQxIiwia2V5QXBwbGljYXRpb24iLCJrZXlEaXJlY3RpdmUiLCJmb3JjZU5vbkV4dGVybmFsIiwiYWRkRXh0ZXJuYWxGaWVsZHNGcm9tRGlyZWN0aXZlRmllbGRTZXQiLCJyZXF1aXJlc0FwcGxpY2F0aW9uIiwicmVxdWlyZXNEaXJlY3RpdmUiLCJmaWVsZEJhc2VUeXBlIiwicHJvdmlkZXNBcHBsaWNhdGlvbiIsInByb3ZpZGVzRGlyZWN0aXZlIiwiYWRkRXh0ZXJuYWxGaWVsZHNGcm9tSW50ZXJmYWNlIiwiZXh0ZXJuYWwiLCJleHRlcm5hbERpcmVjdGl2ZSIsInBhcnNlRmllbGRTZXRBcmd1bWVudCIsInR5cGVGaWVsZCIsIm1heWJlVXBkYXRlRmllbGRGb3JJbnRlcmZhY2UiLCJjb3B5RmllbGRBc0V4dGVybmFsIiwibmV3RmllbGQiLCJ0b01vZGlmeSIsIml0ZkZpZWxkIiwiaXNTdWJ0eXBlIiwidHlwZURpcmVjdGl2ZSIsImltcGxlbWVudHNEaXJlY3RpdmUiLCJvd25lckRpcmVjdGl2ZSIsImZpZWxkRGlyZWN0aXZlIiwiZ2V0U3ViZ3JhcGgiLCJncmFwaCIsImluY2x1ZGVUeXBlSW5TdWJncmFwaCIsInJlYWNoYWJsZVR5cGVzQnlTdWJncmFwaCIsImFsbFN1YmdyYXBocyIsInJlYWNoYWJsZVR5cGVzQnlTdWJncmFwaHMiLCJyZWFjaGFibGVUeXBlcyIsImNvbGxlY3RGaWVsZFJlYWNoYWJsZVR5cGVzRm9yQWxsU3ViZ3JhcGhzIiwiZmllbGRBcHBsaWNhdGlvbnMiLCJwcm92aWRlcyIsInJlcXVpcmVzIiwib3duZXJBcHBsaWNhdGlvbnMiLCJ0eXBlQXBwbGljYXRpb25zIiwicmVzb2x2YWJsZSIsInNnIiwiYWRkZWRJbnRlcmZhY2VzIiwiaW1wbGVtZW50c0FwcGxpY2F0aW9ucyIsImltcGxlbWVudGF0aW9ucyIsInN1YmdyYXBoSXRmIiwic3ViZ3JhcGhGaWVsZCIsInVzZWRPdmVycmlkZGVuIiwib3ZlcnJpZGUiLCJvdmVycmlkZURpcmVjdGl2ZSIsInN1YmdyYXBoRW51bSIsInN1YmdyYXBoVW5pb24iLCJtZW1iZXJUeXBlIiwiYWxsRXhlY3V0YWJsZURpcmVjdGl2ZXMiLCJyZW1vdmVJbmFjdGl2ZVByb3ZpZGVzQW5kUmVxdWlyZXMiLCJpbXBsZW0iLCJpbXBhY3RlZCIsIm1zZyIsImR1bXBNc2ciLCJmaWxlbmFtZSIsIkRhdGUiLCJub3ciLCJmaWxlIiwicmVzb2x2ZSIsImV4aXN0c1N5bmMiLCJ3cml0ZUZpbGVTeW5jIiwiZTIiLCJtYXliZUR1bXBTdWJncmFwaFNjaGVtYSIsImFkZFN1YmdyYXBoVG9FcnJvciIsImFkZFN1YmdyYXBoVG9BU1ROb2RlIiwiRkVERVJBVElPTl9PUEVSQVRJT05fRklFTERTIiwiZW50aXRpZXNGaWVsZE5hbWUiLCJzZXJ2aWNlRmllbGROYW1lIiwiRkVERVJBVElPTl9PUEVSQVRJT05fVFlQRVMiLCJlbnRpdHlUeXBlU3BlYyIsInNlcnZpY2VUeXBlU3BlYyIsImFueVR5cGVTcGVjIiwic3ViZ3JhcGhzRnJvbVNlcnZpY2VMaXN0IiwiY29sbGVjdFRhcmdldEZpZWxkcyIsImJ1aWxkU3ViZ3JhcGgiLCJpc0VudGl0eVR5cGUiLCJpc0ZlZGVyYXRpb25GaWVsZCIsImlzRmVkZXJhdGlvblN1YmdyYXBoU2NoZW1hIiwiZmVkZXJhdGlvbk1ldGFkYXRhIiwicHJpbnRTdWJncmFwaE5hbWVzIiwiYXNGZWQyU3ViZ3JhcGhEb2N1bWVudCIsIkZFREVSQVRJT04yX0xJTktfV1RIX0ZVTExfSU1QT1JUUyIsInNldFNjaGVtYUFzRmVkMlN1YmdyYXBoIiwiRmVkZXJhdGlvbkJsdWVwcmludCIsIkZlZGVyYXRpb25NZXRhZGF0YSIsImNvbGxlY3RVc2VkRmllbGRzIiwiRkVERVJBVElPTl9VTk5BTUVEX1NVQkdSQVBIX05BTUUiLCJGRURFUkFUSU9OX1JFU0VSVkVEX1NVQkdSQVBIX05BTUUiLCJLbm93blR5cGVOYW1lc0luRmVkZXJhdGlvblJ1bGVfMSIsInRhZ1NwZWNfMSIsInByZWNvbXB1dGVfMSIsImZlZGVyYXRpb25TcGVjXzEiLCJsaW5rU3BlYyIsInRhZ1NwZWMiLCJUQUdfVkVSU0lPTlMiLCJpbmFjY2Vzc2libGVTcGVjIiwiSU5BQ0NFU1NJQkxFX1ZFUlNJT05TIiwiZmVkZXJhdGlvblNwZWMiLCJGRURFUkFUSU9OX1ZFUlNJT05TIiwiRkVERVJBVElPTl9PTUlUVEVEX1ZBTElEQVRJT05fUlVMRVMiLCJQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZSIsIktub3duVHlwZU5hbWVzUnVsZSIsIkZFREVSQVRJT05fU1BFQ0lGSUNfVkFMSURBVElPTl9SVUxFUyIsIktub3duVHlwZU5hbWVzSW5GZWRlcmF0aW9uUnVsZSIsIkZFREVSQVRJT05fVkFMSURBVElPTl9SVUxFUyIsInJ1bGUiLCJ2YWxpZGF0ZUZpZWxkU2V0U2VsZWN0aW9ucyIsInNlbGVjdGlvblNldCIsImhhc0V4dGVybmFsSW5QYXJlbnRzIiwib25FcnJvciIsImFsbG93T25Ob25FeHRlcm5hbExlYWZGaWVsZHMiLCJhbGxvd0ZpZWxkc1dpdGhBcmd1bWVudHMiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25zIiwiaXNFeHRlcm5hbCIsImlzRmllbGRFeHRlcm5hbCIsIm11c3RCZUV4dGVybmFsIiwiaXNGaWVsZEZha2VFeHRlcm5hbCIsImV4dGVybmFsRGlyZWN0aXZlU3BlYyIsImtleURpcmVjdGl2ZVNwZWMiLCJuZXdIYXNFeHRlcm5hbEluUGFyZW50cyIsImZpZWxkSW5JbXBsZW0iLCJ2YWxpZGF0ZUZpZWxkU2V0IiwiZXJyb3JDb2xsZWN0b3IiLCJvbkZpZWxkcyIsImhhbmRsZUZpZWxkU2V0VmFsaWRhdGlvbkVycm9yIiwibWVzc2FnZVVwZGF0ZXIiLCJmaWVsZFNldFRhcmdldERlc2NyaXB0aW9uIiwicHJpbnQiLCJkaXJlY3RpdmVTdHJVc2luZ0FTVElmUG9zc2libGUiLCJmaWVsZFNldEVycm9yRGVzY3JpcHRvciIsInZhbGlkYXRlQWxsRmllbGRTZXQiLCJ0YXJnZXRUeXBlRXh0cmFjdG9yIiwiaXNPblBhcmVudFR5cGUiLCJ1c2VkRmllbGRzIiwiY29sbGVjdFVzZWRGaWVsZHNGb3JEaXJlY3RpdmUiLCJpdGZUeXBlIiwicnVudGltZVR5cGVzIiwicnVudGltZVR5cGUiLCJpbXBsZW1GaWVsZCIsInVzZWRGaWVsZERlZnMiLCJpbmNsdWRlSW50ZXJmYWNlRmllbGRzSW1wbGVtZW50YXRpb25zIiwidmFsaWRhdGVJbnRlcmZhY2VSdW50aW1lSW1wbGVtZW50YXRpb25GaWVsZHNUeXBlcyIsIndpdGhFeHRlcm5hbE9yUmVxdWlyZXMiLCJ0eXBlVG9JbXBsZW1zIiwiTXVsdGlNYXAiLCJyZXR1cm5UeXBlIiwidHlwZVRvSW1wbGVtc0FycmF5IiwicHJpbnRGaWVsZENvb3JkaW5hdGUiLCJmb3JtYXRGaWVsZHNUb1JldHVyblR5cGUiLCJqb2luU3RyaW5ncyIsImltcGxlbXMiLCJvbkludmFsaWRhdGUiLCJfZXh0ZXJuYWxUZXN0ZXIiLCJfc2hhcmluZ1ByZWRpY2F0ZSIsIl9pc0ZlZDJTY2hlbWEiLCJfZmllbGRVc2VkUHJlZGljYXRlIiwiaXNGZWQyU2NoZW1hIiwiZmVkZXJhdGlvbkZlYXR1cmUiLCJleHRlcm5hbFRlc3RlciIsIkV4dGVybmFsVGVzdGVyIiwic2hhcmluZ1ByZWRpY2F0ZSIsImNvbXB1dGVTaGFyZWFibGVzIiwiZmllbGRVc2VkUHJlZGljYXRlIiwiaXNGaWVsZFVzZWQiLCJpc0ZpZWxkUGFydGlhbGx5RXh0ZXJuYWwiLCJpc1BhcnRpYWxseUV4dGVybmFsIiwiaXNGaWVsZEZ1bGx5RXh0ZXJuYWwiLCJpc0Z1bGx5RXh0ZXJuYWwiLCJpc0Zha2VFeHRlcm5hbCIsInNlbGVjdGlvblNlbGVjdHNBbnlFeHRlcm5hbEZpZWxkIiwic2VsZWN0c0FueUV4dGVybmFsRmllbGQiLCJpc0ZpZWxkU2hhcmVhYmxlIiwiZmVkZXJhdGlvbkRpcmVjdGl2ZU5hbWVJblNjaGVtYSIsImZlZGVyYXRpb25UeXBlTmFtZUluU2NoZW1hIiwiZ2V0RmVkZXJhdGlvbkRpcmVjdGl2ZSIsIm92ZXJyaWRlRGlyZWN0aXZlU3BlYyIsImV4dGVuZHNEaXJlY3RpdmUiLCJleHRlbmRzRGlyZWN0aXZlU3BlYyIsInJlcXVpcmVzRGlyZWN0aXZlU3BlYyIsInByb3ZpZGVzRGlyZWN0aXZlU3BlYyIsInNoYXJlYWJsZURpcmVjdGl2ZSIsInNoYXJlYWJsZURpcmVjdGl2ZVNwZWMiLCJ0YWdEaXJlY3RpdmUiLCJ0YWdEaXJlY3RpdmVTcGVjIiwiY29tcG9zZURpcmVjdGl2ZSIsImNvbXBvc2VEaXJlY3RpdmVTcGVjIiwiaW5hY2Nlc3NpYmxlRGlyZWN0aXZlIiwiaW5hY2Nlc3NpYmxlRGlyZWN0aXZlU3BlYyIsImFsbEZlZGVyYXRpb25EaXJlY3RpdmVzIiwiYmFzZURpcmVjdGl2ZXMiLCJlbnRpdHlUeXBlIiwiYW55VHlwZSIsInNlcnZpY2VUeXBlIiwiZmllbGRTZXRUeXBlIiwiZmllbGRTZXRUeXBlU3BlYyIsImFsbEZlZGVyYXRpb25UeXBlcyIsImJhc2VUeXBlcyIsIndpdGhSb290VHlwZVJlbmFtaW5nIiwiZmVkZXJhdGlvbklkZW50aXR5IiwiY29tcGxldGVTdWJncmFwaFNjaGVtYSIsImRlZmF1bHROYW1lIiwidmFsaWRhdGVOb0V4dGVybmFsT25JbnRlcmZhY2VGaWVsZHMiLCJ2YWxpZGF0ZUFsbEV4dGVybmFsRmllbGRzVXNlZCIsImNoZWNrQ29tcGF0aWJsZURpcmVjdGl2ZSIsInVua25vd25EaXJlY3RpdmVOYW1lIiwiQUxMX0ZFREVSQVRJT05fRElSRUNUSVZFU19ERUZBVUxUX05BTUVTIiwiRkVERVJBVElPTjJfT05MWV9TUEVDX0RJUkVDVElWRVMiLCJiYXNlTmFtZSIsImNhbmRpZGF0ZSIsImZpbmRVbnVzZWROYW1lZEZvckxpbmtEaXJlY3RpdmUiLCJGRURFUkFUSU9OMl9TUEVDX0RJUkVDVElWRVMiLCJidWlsZE9wdGlvbnMiLCJTb3VyY2UiLCJjb21wbGV0ZUZlZDJTdWJncmFwaFNjaGVtYSIsImNvbXBsZXRlRmVkMVN1YmdyYXBoU2NoZW1hIiwiaXNGZWRTcGVjTGlua0RpcmVjdGl2ZSIsImZpZWxkVHlwZSIsImZpZWxkVHlwZUlzV3JvbmdJbktub3duV2F5cyIsImZsYXQiLCJmZWRGZWF0dXJlIiwiZGVjb3JhdGVWYWxpZGF0aW9uRXJyb3JzIiwidmFsaWRhdGVGaWVsZFNldFZhbHVlIiwiZm9yRWFjaEVsZW1lbnQiLCJpbXBsVHlwZSIsImltcGxGaWVsZCIsImRvY3VtZW50IiwiZmVkMkxpbmtFeHRlbnNpb24iLCJTQ0hFTUFfRVhURU5TSU9OIiwiU1RSSU5HIiwiTElTVCIsInByaW50SHVtYW5SZWFkYWJsZUxpc3QiLCJwcmVmaXhQbHVyYWwiLCJzZXJ2aWNlTGlzdCIsInNlcnZpY2UiLCJ0eXBlRGVmcyIsIk9yZGVyZWRNYXAiLCJTeW1ib2wiLCJpdGVyYXRvciIsImlzRmVkMlN1YmdyYXBoIiwiYWRkRmVkZXJhdGlvbk9wZXJhdGlvbnMiLCJxdWVyeVJvb3QiLCJxdWVyeVR5cGUiLCJlbnRpdHlGaWVsZCIsImVudGl0eUZpZWxkVHlwZSIsImlzUHJpbnRlZERpcmVjdGl2ZSIsImlzUHJpbnRlZFR5cGUiLCJpc1ByaW50ZWREaXJlY3RpdmVBcHBsaWNhdGlvbiIsImJhc2VQcmludE9wdGlvbnMiLCJkZWZhdWx0UHJpbnRPcHRpb25zIiwiZGlyZWN0aXZlRGVmaW5pdGlvbkZpbHRlciIsInR5cGVGaWx0ZXIiLCJmaWVsZEZpbHRlciIsImRpcmVjdGl2ZUFwcGxpY2F0aW9uRmlsdGVyIiwidXBkYXRlZENhdXNlcyIsImZha2VFeHRlcm5hbEZpZWxkcyIsInByb3ZpZGVkRmllbGRzIiwiY29sbGVjdEZha2VFeHRlcm5hbHMiLCJjb2xsZWN0UHJvdmlkZWRGaWVsZHMiLCJyZW1vdmVJbmFjdGl2ZUFwcGxpY2F0aW9ucyIsImRpcmVjdGl2ZURlZmluaXRpb24iLCJvbk1vZGlmaWVkIiwic2VsZWN0c05vbkV4dGVybmFsTGVhZkZpZWxkIiwid2l0aG91dE5vbkV4dGVybmFsTGVhZkZpZWxkcyIsInVwZGF0ZWREaXJlY3RpdmUiLCJpc0V4dGVybmFsT3JIYXNFeHRlcm5hbEltcGxlbWVudGF0aW9ucyIsIm5ld1NlbGVjdGlvblNldCIsIlNlbGVjdGlvblNldCIsInNlbGVjdGlvbk9mRWxlbWVudCIsIkZlZGVyYXRpb25TcGVjRGVmaW5pdGlvbiIsIkZFREVSQVRJT05fU1BFQ19UWVBFUyIsIkZFREVSQVRJT04yXzFfT05MWV9TUEVDX0RJUkVDVElWRVMiLCJmaWVsZHNBcmd1bWVudCIsIlBSRV9GRURFUkFUSU9OMl9TUEVDX0RJUkVDVElWRVMiLCJhbGxGZWREaXJlY3RpdmVzIiwiZ3JhcGhRTEpTRGlyZWN0aXZlVG9BU1QiLCJncmFwaFFMSlNOYW1lZFR5cGVUb0FTVCIsImdyYXBoUUxKU1NjaGVtYVRvQVNUIiwiYWxsT3BlcmF0aW9uVHlwZU5vZGUiLCJPcGVyYXRpb25UeXBlTm9kZSIsInRvTm9kZUFycmF5IiwibWF5YmUiLCJleHRlbnNpb25BU1ROb2RlcyIsInByaW50VHlwZSIsImZha2VTY2hlbWEiLCJHcmFwaFFMU2NoZW1hIiwiYXNzdW1lVmFsaWQiLCJESVJFQ1RJVkVfREVGSU5JVElPTiIsImdldFR5cGVNYXAiLCJpc1NwZWNpZmllZFNjYWxhclR5cGUiLCJnZXREaXJlY3RpdmVzIiwiaXNTcGVjaWZpZWREaXJlY3RpdmUiLCJzY2hlbWFBU1RzIiwiaXNOb25EZWZhdWx0Um9vdE5hbWUiLCJnZXRSb290VHlwZSIsImhhc05vbkRlZmF1bHRSb290TmFtZXMiLCJPUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OIiwiZ3JhcGhRTEpTU2NoZW1hVG9TY2hlbWFEZWZpbml0aW9uQVNUIiwidHlwZXNBU1RzIiwiZGlyZWN0aXZlc0FTVHMiLCJJbmFjY2Vzc2libGVTcGVjRGVmaW5pdGlvbiIsImluYWNjZXNzaWJsZUlkZW50aXR5IiwiaW5hY2Nlc3NpYmxlTG9jYXRpb25zIiwicHJpbnRlZEluYWNjZXNzaWJsZURlZmluaXRpb24iLCJpc1YwMSIsImhhc1Vua25vd25Bcmd1bWVudHMiLCJoYXNSZXBlYXRhYmxlIiwiaGFzVmFsaWRMb2NhdGlvbnMiLCJjb21wdXRlRGVmYXVsdFZhbHVlUmVmZXJlbmNlcyIsImFkZFZhbHVlUmVmZXJlbmNlcyIsImdldElucHV0VHlwZSIsIml0ZW1UeXBlIiwiaXRlbSIsImVudW1WYWx1ZSIsImZpZWxkVmFsdWUiLCJoYXNCdWlsdEluTmFtZSIsImluYWNjZXNzaWJsZUZlYXR1cmUiLCJpbmNvbXBhdGlibGVFcnJvciIsImlzSW5hY2Nlc3NpYmxlIiwiZmVhdHVyZUxpc3QiLCJpc0luQVBJU2NoZW1hIiwiZmV0Y2hJbmFjY2Vzc2libGVFbGVtZW50c0RlZXAiLCJpbmFjY2Vzc2libGVFbGVtZW50cyIsImRlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzIiwiYWRkUmVmZXJlbmNlIiwicmVmZXJlbmNlIiwicmVmZXJlbmNlckxpc3QiLCJpbnB1dEZpZWxkIiwiY29tcHV0ZURlZmF1bHRWYWx1ZVJlZmVyZW5jZXJzIiwiaW5hY2Nlc3NpYmxlX2VsZW1lbnRzIiwiaW5hY2Nlc3NpYmxlX3JlZmVyZW5jZXJzIiwiaW1wbGVtZW50ZWRJbnRlcmZhY2VzIiwiaW1wbGVtZW50aW5nVHlwZXMiLCJpbXBsZW1lbnRlZEludGVyZmFjZSIsImltcGxlbWVudGVkRmllbGQiLCJpbXBsZW1lbnRpbmdUeXBlIiwiaW1wbGVtZW50aW5nRmllbGQiLCJpbXBsZW1lbnRpbmdBcmd1bWVudCIsImltcGxlbWVudGVkQXJndW1lbnQiLCJ0eXBlU3lzdGVtTG9jYXRpb25zIiwidmFsaWRhdGVJbmFjY2Vzc2libGVFbGVtZW50cyIsInJlbW92ZUluYWNjZXNzaWJsZUVsZW1lbnRzQXNzdW1pbmdWYWxpZCIsIl9fY3JlYXRlQmluZGluZyIsIm8iLCJrMiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJfX2V4cG9ydFN0YXIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlS2luZEVudW0iLCJpbnB1dFZhbHVlVHlwZSIsInR5cGVUeXBlIiwiZW51bVZhbHVlVHlwZSIsImRpcmVjdGl2ZUxvY2F0aW9uRW51bSIsImRpcmVjdGl2ZVR5cGUiLCJzY2hlbWFUeXBlIiwiSk9JTl9WRVJTSU9OUyIsIkpvaW5TcGVjRGVmaW5pdGlvbiIsImpvaW5JZGVudGl0eSIsInNhbml0aXplR3JhcGhRTE5hbWUiLCJhbHBoYU51bWVyaWNVbmRlcnNjb3JlT25seSIsIm5vTnVtZXJpY0ZpcnN0Q2hhciIsImpvaW5HcmFwaCIsImpvaW5GaWVsZFNldCIsImpvaW5UeXBlIiwiam9pbkZpZWxkIiwiam9pbkltcGxlbWVudHMiLCJwb3B1bGF0ZUdyYXBoRW51bSIsInNhbml0aXplZE5hbWVUb1N1YmdyYXBocyIsInNhbml0aXplZCIsInN1YmdyYXBoVG9FbnVtTmFtZSIsInNhbml0aXplZE5hbWUiLCJzdWJncmFwaHNGb3JOYW1lIiwiaW5kZXgiLCJmaWVsZFNldFNjYWxhciIsInJlZ2lzdGVyZWRGZWF0dXJlcyIsIm9wZXJhdGlvblRvRG9jdW1lbnQiLCJwYXJzZU9wZXJhdGlvbiIsIm9wZXJhdGlvbkZyb21Eb2N1bWVudCIsIkZyYWdtZW50U2VsZWN0aW9uIiwiRmllbGRTZWxlY3Rpb24iLCJzZWxlY3Rpb25TZXRPZkVsZW1lbnQiLCJhbGxGaWVsZERlZmluaXRpb25zSW5TZWxlY3Rpb25TZXQiLCJOYW1lZEZyYWdtZW50cyIsIk5hbWVkRnJhZ21lbnREZWZpbml0aW9uIiwic2VsZWN0aW9uU2V0T2YiLCJPcGVyYXRpb24iLCJjb25jYXRPcGVyYXRpb25QYXRocyIsImNvbmRpdGlvbmFsRGlyZWN0aXZlc0luT3BlcmF0aW9uUGF0aCIsInNhbWVPcGVyYXRpb25QYXRocyIsIkZyYWdtZW50RWxlbWVudCIsIkZpZWxkIiwiY29uZGl0aW9uIiwiaGF2ZVNhbWVEaXJlY3RpdmVzIiwib3AxIiwib3AyIiwiQWJzdHJhY3RPcGVyYXRpb25FbGVtZW50IiwidmFyaWFibGVzSW5FbGVtZW50IiwiYWRkQXR0YWNoZW1lbnQiLCJhdHRhY2hlbWVudHMiLCJnZXRBdHRhY2hlbWVudCIsImNvcHlBdHRhY2hlbWVudHNUbyIsInZhcmlhYmxlRGVmaW5pdGlvbnMiLCJyZXNwb25zZU5hbWUiLCJ3aXRoVXBkYXRlZERlZmluaXRpb24iLCJuZXdEZWZpbml0aW9uIiwiYXBwbGllc1RvIiwic2VsZWN0cyIsImFwcGxpZWRWYWx1ZSIsImlzVmFsaWRWYWx1ZSIsInVwZGF0ZUZvckFkZGluZ1RvIiwic2VsZWN0aW9uUGFyZW50IiwiZmllbGRQYXJlbnQiLCJmaWVsZERlZiIsImhhc0RlZmVyIiwiZGVmZXJEaXJlY3RpdmVBcmdzIiwid2l0aG91dERlZmVyIiwidGhhdCIsInR5cGVDb25kaXRpb24iLCJjYXN0ZWRUeXBlIiwid2l0aFVwZGF0ZWRTb3VyY2VUeXBlIiwibmV3U291cmNlVHlwZSIsIm5ld0ZyYWdtZW50IiwiZnJhZ21lbnRQYXJlbnQiLCJoYXNTdHJlYW0iLCJkZWZlck5hbWUiLCJ1cGRhdGVkRGlyZWN0aXZlcyIsIndpdGhOb3JtYWxpemVkRGVmZXIiLCJub3JtYWxpemVyIiwiZGVmZXJBcmdzIiwibmV3RGVmZXJBcmdzIiwiY29uZGl0aW9uVmFyaWFibGUiLCJpZiIsImxhYmVsIiwibmV3TGFiZWwiLCJyZWdpc3RlckNvbmRpdGlvbiIsImlzVXNlbGVzc0ZvbGxvd3VwRWxlbWVudCIsImZpcnN0IiwiZm9sbG93dXAiLCJjb25kaXRpb25hbHMiLCJ0eXBlT2ZGaXJzdCIsInAxIiwicDIiLCJoZWFkIiwidGFpbCIsImxhc3RPZkhlYWQiLCJmaXJzdE9mVGFpbCIsIm9wdGltaXplIiwiZnJhZ21lbnRzIiwibWluVXNhZ2VzVG9PcHRpbWl6ZSIsIm9wdGltaXplZFNlbGVjdGlvbiIsInVzYWdlcyIsImNvbGxlY3RVc2VkRnJhZ21lbnROYW1lcyIsImZyYWdtZW50IiwidG9EZW9wdGltaXplIiwibWFwRW50cmllcyIsImNvdW50IiwiZXhwYW5kRnJhZ21lbnRzIiwiZXhwYW5kQWxsRnJhZ21lbnRzIiwiZXhwYW5kZWRTZWxlY3Rpb25zIiwibGFiZWxzVG9SZW1vdmUiLCJEZWZlck5vcm1hbGl6ZXIiLCJoYXNEZWZlcnMiLCJoYXNOb25MYWJlbGxlZE9yQ29uZGl0aW9uYWxEZWZlcnMiLCJpbml0IiwidXBkYXRlZE9wZXJhdGlvbiIsImFzc2lnbmVkRGVmZXJMYWJlbHMiLCJhc3NpZ25lZExhYmVscyIsImRlZmVyQ29uZGl0aW9ucyIsInByZXR0eVByaW50IiwidG9PcGVyYXRpb25TdHJpbmciLCJhZGREaXJlY3RpdmVOb2Rlc1RvRWxlbWVudCIsImRpcmVjdGl2ZU5vZGVzIiwiZGlyZWN0aXZlRGVmIiwiYXJndW1lbnRzRnJvbUFTVCIsIndpdGhVcGRhdGVkU2VsZWN0aW9uU2V0IiwidXNlZFZhcmlhYmxlcyIsImNvbGxlY3RvciIsInRvRnJhZ21lbnREZWZpbml0aW9uTm9kZSIsInRvU2VsZWN0aW9uU2V0Tm9kZSIsImNhbkFwcGx5QXRUeXBlIiwiaXNEaXJlY3RTdWJ0eXBlIiwiYWRkSWZOb3RFeGlzdCIsIm1heWJlQXBwbHlpbmdBdFR5cGUiLCJ3aXRob3V0IiwibmV3RnJhZ21lbnRzIiwidXBkYXRlZFNlbGVjdGlvbiIsInRvRnJhZ21lbnREZWZpbml0aW9uTm9kZXMiLCJGcmVlemFibGUiLCJfaXNGcm96ZW4iLCJmcmVlemUiLCJpc0Zyb3plbiIsImZyZWV6ZUludGVybmFscyIsInVzIiwiY2xvbmVJZkZyb3plbiIsIlNldE11bHRpTWFwIiwidXNlZExhYmVscyIsIm5leHRMYWJlbCIsIl9zZWxlY3Rpb25zIiwiX3NlbGVjdGlvbkNvdW50IiwicmV2ZXJzZWRPcmRlciIsIl9jYWNoZWRTZWxlY3Rpb25zIiwiaWR4IiwiYnlSZXNwb25zZU5hbWUiLCJyZXZlcnNlZCIsIm9wdGltaXplZCIsInVwZGF0ZVNlbGVjdGlvblNldEZyYWdtZW50cyIsIndpdGhFeHBhbmRlZCIsImV4cGFuZGVkIiwibGF6eU1hcCIsIm1hcHBlciIsInVwZGF0ZWRTZWxlY3Rpb25zIiwiaiIsInByZWRpY2F0ZSIsIndpdGhvdXRFbXB0eUJyYW5jaGVzIiwibWVyZ2VJbiIsImV4aXN0aW5nU2VsZWN0aW9uIiwiYWRkUGF0aCIsIm9uUGF0aEVuZCIsInByZXZpb3VzU2VsZWN0aW9ucyIsImN1cnJlbnRTZWxlY3Rpb25zIiwibWVyZ2VkU2VsZWN0aW9uIiwiYWRkU2VsZWN0aW9uU2V0Tm9kZSIsInNlbGVjdGlvbk5vZGUiLCJhZGRTZWxlY3Rpb25Ob2RlIiwibm9kZVRvU2VsZWN0aW9uIiwiSW5saW5lRnJhZ21lbnRTZWxlY3Rpb24iLCJmcmFnbWVudE5hbWUiLCJGcmFnbWVudFNwcmVhZFNlbGVjdGlvbiIsInRoaXNTZWxlY3Rpb25zIiwidGhhdFNlbGVjdGlvbnMiLCJ0aGlzU2VsZWN0aW9uIiwidGhhdFNlbGVjdGlvbiIsImNvbnRhaW5zIiwiU0VMRUNUSU9OX1NFVCIsInNlbGVjdGlvbnNJblByaW50T3JkZXIiLCJ0b1NlbGVjdGlvbk5vZGUiLCJ0eXBlbmFtZVNlbGVjdGlvbiIsImlzTm9uQWxpYXNlZFR5cGVuYW1lU2VsZWN0aW9uIiwidG9PcGVyYXRpb25QYXRocyIsInRvT3BlcmF0aW9uUGF0aHNJbnRlcm5hbCIsInBhcmVudFBhdGhzIiwiZmxhdE1hcCIsInVwZGF0ZWRQYXRocyIsImNhbGxiYWNrIiwiY2xvbmVkU2VsZWN0aW9uIiwib3BlcmF0aW9uTmFtZSIsImZyYWdtZW50c0RlZmluaXRpb25zIiwiaW5jbHVkZUV4dGVybmFsQnJhY2tldHMiLCJzZWxlY3Rpb25zVG9TdHJpbmciLCJzZWxlY3Rpb25JbmRlbnQiLCJzdWJTZWxlY3Rpb24iLCJpbml0aWFsU2VsZWN0aW9uU2V0IiwiZnJhZ21lbnRTZWxlY3Rpb24iLCJ1cGRhdGVkU2VsZWN0aW9uU2V0IiwidGhpc1dpdGhGaWx0ZXJlZFNlbGVjdGlvblNldCIsImV4cGFuZGVkU2VsZWN0aW9uIiwiZmllbGRBcmd1bWVudHNUb0FTVCIsInVwZGF0ZWRGaWVsZCIsInVwZGF0ZWRCYXNlVHlwZSIsIndpdGhVcGRhdGVkU3ViU2VsZWN0aW9uIiwibmV3U3ViU2VsZWN0aW9uIiwibmFtZWRGcmFnbWVudHMiLCJ1cGRhdGVkU3ViU2VsZWN0aW9ucyIsInZhbGlkYXRlRGVmZXJBbmRTdHJlYW0iLCJmcmFnbWVudEVsZW1lbnQiLCJfc2VsZWN0aW9uU2V0IiwidXBkYXRlZEZyYWdtZW50IiwidXBkYXRlZENhc3RlZFR5cGUiLCJzcHJlYWQiLCJoYXNEZWZlclRvUmVtb3ZlIiwiZnJhZ21lbnREZWZpbml0aW9uIiwibmFtZWRGcmFnbWVudCIsIl9lbGVtZW50Iiwic3ByZWFkRGlyZWN0aXZlcyIsImV4cGFuZGVkU3ViU2VsZWN0aW9ucyIsInVzYWdlQ291bnQiLCJfbGFiZWxzVG9SZW1vdmUiLCJfbm9ybWFsaXplenIiLCJkaXJlY3RpdmVTdHJpbmciLCJPUEVSQVRJT05fREVGSU5JVElPTiIsInZhbGlkYXRlSW5wdXQiLCJvcGVyYXRpb25Gcm9tQVNUIiwicGFyc2VPcGVyYXRpb25BU1QiLCJwYXJzZWQiLCJvcGVyYXRpb25BU1QiLCJmcmFnbWVudEFTVHMiLCJzaGFyZWFibGVGaWVsZHMiLCJhZGRLZXlGaWVsZHMiLCJzaGFyZWFibGVzT25UeXBlIiwicHJpbnRUeXBlRGVmaW5pdGlvbkFuZEV4dGVuc2lvbnMiLCJvcmRlclByaW50ZWREZWZpbml0aW9ucyIsInByaW50RGVmaW5pdGlvbkFuZEV4dGVuc2lvbnMiLCJwcmludGVyIiwibWVyZ2VUeXBlc0FuZEV4dGVuc2lvbnMiLCJkZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyIsImV4dCIsInByaW50SXNFeHRlbnNpb24iLCJmb3JFeHRlbnNpb24iLCJ0cyIsInByaW50U2NoZW1hRGVmaW5pdGlvbk9yRXh0ZW5zaW9uIiwicm9vdEVudHJpZXMiLCJyMSIsInIyIiwicm9vdFR5cGVzT3JkZXIiLCJvcmRlclJvb3RzIiwicHJpbnREZXNjcmlwdGlvbiIsInByaW50QXBwbGllZERpcmVjdGl2ZXMiLCJwcmludFNjYWxhckRlZmluaXRpb25PckV4dGVuc2lvbiIsInByaW50RmllbGRCYXNlZFR5cGVEZWZpbml0aW9uT3JFeHRlbnNpb24iLCJwcmludFVuaW9uRGVmaW5pdGlvbk9yRXh0ZW5zaW9uIiwicHJpbnRFbnVtRGVmaW5pdGlvbk9yRXh0ZW5zaW9uIiwicHJpbnRJbnB1dERlZmluaXRpb25PckV4dGVuc2lvbiIsInByaW50QXJncyIsIm9uTmV3TGluZXMiLCJlbmRXaXRoTmV3TGluZSIsImpvaW5TdHIiLCJpbmRlbnRhdGlvbiIsImZpcnN0SW5CbG9jayIsIm5vRGVzY3JpcHRpb25zIiwicHJlZmVyTXVsdGlwbGVMaW5lcyIsImJsb2NrU3RyaW5nIiwiaXNTaW5nbGVMaW5lIiwiaGFzTGVhZGluZ1NwYWNlIiwiaGFzVHJhaWxpbmdRdW90ZSIsImhhc1RyYWlsaW5nU2xhc2giLCJwcmludEFzTXVsdGlwbGVMaW5lcyIsInJlc3VsdCIsInByaW50QmxvY2tTdHJpbmciLCJwcmludEZpZWxkcyIsInBvc3NpYmxlVHlwZXMiLCJ2YWxzIiwicHJpbnRCbG9jayIsInByaW50RmllbGQiLCJwcmludEFyZyIsIml0ZW1zIiwiZGVmaW5pdGlvbnNPcmRlciIsInNob3dBbGxCdWlsdElucyIsInR5cGVDb21wYXJlRm4iLCJkaXJlY3RpdmVDb21wYXJlRm4iLCJpc0RlZmluaXRpb25PcmRlclZhbGlkIiwidmFsaWRhdGVPcHRpb25zIiwicHJpbnRTY2hlbWFEZWZpbml0aW9uQW5kRXh0ZW5zaW9ucyIsInVwZ3JhZGVTdWJncmFwaHNJZk5lY2Vzc2FyeSIsIlJlbW92ZWRUYWdPbkV4dGVybmFsIiwiRmllbGRzQXJndW1lbnRDb2VyY2lvblRvU3RyaW5nIiwiUHJvdmlkZXNPbk5vbkNvbXBvc2l0ZVJlbW92YWwiLCJQcm92aWRlc09yUmVxdWlyZXNPbkludGVyZmFjZUZpZWxkUmVtb3ZhbCIsIktleU9uSW50ZXJmYWNlUmVtb3ZhbCIsIlNoYXJlYWJsZVR5cGVBZGRpdGlvbiIsIlNoYXJlYWJsZUZpZWxkQWRkaXRpb24iLCJJbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc0ZpZWxkc1JlbW92YWwiLCJJbmFjdGl2ZVByb3ZpZGVzT3JSZXF1aXJlc1JlbW92YWwiLCJUeXBlV2l0aE9ubHlVbnVzZWRFeHRlcm5hbFJlbW92YWwiLCJVbnVzZWRFeHRlcm5hbFJlbW92YWwiLCJFeHRlcm5hbE9uSW50ZXJmYWNlUmVtb3ZhbCIsIlR5cGVFeHRlbnNpb25SZW1vdmFsIiwiRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25SZW1vdmFsIiwiaWQiLCJvcmlnaW5hbCIsImRlY2xhcmluZ1N1YmdyYXBocyIsImJlZm9yZSIsImFmdGVyIiwiaXNGZWRlcmF0aW9uVHlwZUV4dGVuc2lvbiIsImhhc0V4dGVuZCIsImlzUm9vdFR5cGVFeHRlbnNpb24iLCJyZXNvbHZlc0ZpZWxkIiwiZ2V0RmllbGQiLCJpbnB1dHMiLCJjaGFuZ2VzIiwib3RoZXJTdWJncmFwaHMiLCJTY2hlbWFVcGdyYWRlciIsInVwZ3JhZGUiLCJ1cGdyYWRlZCIsIm9yaWdpbmFsU3ViZ3JhcGgiLCJyZW5hbWVGZWRlcmF0aW9uVHlwZXMiLCJhZGRFcnJvciIsInR5cGVTcGVjIiwidHlwZU5hbWVJbk9yaWdpbmFsIiwiYWRkQ2hhbmdlIiwiY2hhbmdlIiwiY2hlY2tGb3JFeHRlbnNpb25XaXRoTm9CYXNlIiwiZXh0ZW5zaW9uQVNUIiwib3RoZXJUeXBlIiwicHJlVXBncmFkZVZhbGlkYXRpb25zIiwiZml4RmVkZXJhdGlvbkRpcmVjdGl2ZXNBcmd1bWVudHMiLCJyZW1vdmVFeHRlcm5hbE9uSW50ZXJmYWNlIiwicmVtb3ZlRXh0ZXJuYWxPblR5cGVFeHRlbnNpb25zIiwiZml4SW5hY3RpdmVQcm92aWRlc0FuZFJlcXVpcmVzIiwicmVtb3ZlVHlwZUV4dGVuc2lvbnMiLCJyZW1vdmVEaXJlY3RpdmVzT25JbnRlcmZhY2UiLCJyZW1vdmVQcm92aWRlc09uTm9uQ29tcG9zaXRlIiwicmVtb3ZlVW51c2VkRXh0ZXJuYWxzIiwiYWRkU2hhcmVhYmxlIiwicmVtb3ZlVGFnT25FeHRlcm5hbCIsInJlcGxhY2VGZWRlcmF0aW9uRGlyZWN0aXZlQXBwbGljYXRpb24iLCJ1cGRhdGVkU291cmNlQVNUIiwibmV3RGlyZWN0aXZlIiwidHlwZUluT3RoZXIiLCJrZXlzSW5PdGhlciIsIm93bkZpZWxkIiwib3JpZ2luYWxNZXRhZGF0YSIsIm90aGVyUmVzb2x2aW5nU3ViZ3JhcGhzIiwib3RoZXJEZWNsYXJpbmdTdWJncmFwaHMiLCJqc19sZXZlbnNodGVpbl8xIiwib3B0aW9uc0J5RGlzdGFuY2UiLCJ0aHJlc2hvbGQiLCJmbG9vciIsImlucHV0TG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJvcHRpb24iLCJkaXN0YW5jZSIsIm1hcEtleXMiLCJiIiwiZGlzdGFuY2VEaWZmIiwicXVvdGVkU3VnZ2VzdGlvbnMiLCJ4Iiwic2VsZWN0ZWQiLCJsYXN0SXRlbSIsImlzRmVkMVN1cGVyZ3JhcGgiLCJidWlsZFN1cGVyZ3JhcGhTY2hlbWEiLCJqb2luU3BlY18xIiwiZXh0cmFjdFN1YmdyYXBoc0Zyb21TdXBlcmdyYXBoXzEiLCJTVVBQT1JURURfRkVBVFVSRVMiLCJjb3JlVmVyc2lvblplcm9Eb3RPbmVVcmwiLCJqb2luRmVhdHVyZSIsInN1cGVyZ3JhcGhTZGwiLCJwdXJwb3NlZnVsRmVhdHVyZXMiLCJjaGVja0ZlYXR1cmVTdXBwb3J0IiwiVGFnU3BlY0RlZmluaXRpb24iLCJ0YWdJZGVudGl0eSIsInRhZ0xvY2F0aW9ucyIsInByaW50ZWRUYWdEZWZpbml0aW9uIiwibmFtZUFyZyIsImhhc1ZhbGlkTmFtZUFyZyIsImlzU3RyaWN0U3VidHlwZSIsIkRFRkFVTFRfU1VCVFlQSU5HX1JVTEVTIiwiQUxMX1NVQlRZUElOR19SVUxFUyIsIm1heWJlU3ViVHlwZSIsInVuaW9uTWVtYmVyc2hpcFRlc3RlciIsInUiLCJpbXBsZW1lbnRzSW50ZXJmYWNlVGVzdGVyIiwiYWxsb3dlZFJ1bGVzIiwiaXNEZWZpbmVkIiwiY29weVdpdE5ld0xlbmd0aCIsInNldFZhbHVlcyIsImFzc2VydFVucmVhY2hhYmxlIiwib3RoZXJNYXAiLCJ2cyIsImNvbXBhcmVGbiIsImRlZmF1bHRDb21wYXJlRm4iLCJfa2V5cyIsIl9jb21wYXJlRm4iLCJpbnNlcnRLZXlJbk9yZGVyIiwibG93ZXIiLCJ1cHBlciIsIm1pZGRsZSIsImFycmF5IiwidG9Kb2luIiwic2VwIiwiZmlyc3RTZXAiLCJsYXN0U2VwIiwibGFzdCIsImVxdWFsRmN0IiwiaXRlcmFibGUiLCJuZXh0IiwiZG9uZSIsImVudHJ5IiwiY2xlYXJDYWNoZXMiLCJjYWNoZWRLZXlzIiwiY2FjaGVkVmFsdWVzIiwiZGVsZXRlZCIsImNsZWFyIiwiYXJyIiwibmV3TGVuZ3RoIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJlbXB0eVZhbHVlIiwibGFzdFNlcGFyYXRvciIsImN1dG9mZl9vdXRwdXRfbGVuZ3RoIiwiY3V0b2ZmIiwibGFzdElkeCIsInRvRGlzcGxheSIsImFjdHVhbFByZWZpeCIsInNwbGljZSIsIlZhbGlkYXRvciIsIklucHV0T2JqZWN0Q2lyY3VsYXJSZWZzVmFsaWRhdG9yIiwidmlzaXRlZFR5cGVzIiwiZmllbGRQYXRoIiwiZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lIiwiZGV0ZWN0Q3ljbGVzIiwiY3ljbGVJbmRleCIsImN5Y2xlUGF0aCIsInBhdGhTdHIiLCJmaWVsZE9iaiIsImVtcHR5VmFyaWFibGVzIiwiaGFzTWlzc2luZ1R5cGVzIiwidmFsaWRhdGVOYW1lIiwidmFsaWRhdGVPYmplY3RPckludGVyZmFjZVR5cGUiLCJ2YWxpZGF0ZUlucHV0T2JqZWN0VHlwZSIsInZhbGlkYXRlVW5pb25UeXBlIiwidmFsaWRhdGVFbnVtVHlwZSIsInZhbGlkYXRlQXJnIiwidmFsaWRhdGVEaXJlY3RpdmVBcHBsaWNhdGlvbiIsInJlZnNWYWxpZGF0b3IiLCJvcHRzIiwidmFsaWRhdGVJbXBsZW1lbnRlZEludGVyZmFjZXMiLCJ2YWxpZGF0ZUhhc1R5cGUiLCJhc3NlcnROYW1lIiwiaXRmQXJnIiwiaXRmT2ZJdGYiLCJwYXJlbnREZXNjIiwiY29udGV4dCIsImdldFNjaGVtYSIsImV4aXN0aW5nVHlwZXNNYXAiLCJkZWZpbmVkVHlwZXMiLCJnZXREb2N1bWVudCIsImlzVHlwZURlZmluaXRpb25Ob2RlIiwiaXNUeXBlRXh0ZW5zaW9uTm9kZSIsInR5cGVOYW1lcyIsIk5hbWVkVHlwZSIsIl8yIiwiYW5jZXN0b3JzIiwiaXNTREwiLCJpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZSIsImlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUiLCJzdGFuZGFyZFR5cGVOYW1lcyIsImlzU3RhbmRhcmRUeXBlTmFtZSIsInN1Z2dlc3RlZFR5cGVzIiwicmVwb3J0RXJyb3IiLCJzcGVjaWZpZWRTY2FsYXJUeXBlcyIsImludHJvc3BlY3Rpb25UeXBlcyIsInV0aWxfMSIsImVsZW1lbnRzVHlwZSIsInZhbHVlVHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnRlZ2VyU3RyaW5nUmVnRXhwIiwidGVzdCIsImFycmF5VmFsdWVFcXVhbHMiLCJvYmplY3RFcXVhbHMiLCJrZXlzMSIsImtleXMyIiwidjEiLCJ2MiIsImFwcGx5RGVmYXVsdFZhbHVlcyIsImFyZ3MxIiwiYXJnczIiLCJ2YWx1ZVRvQVNUVW50eXBlZCIsIk5VTEwiLCJ2YWx1ZXNOb2RlcyIsIml0ZW1Ob2RlIiwiZmllbGROb2RlcyIsIk9CSkVDVF9GSUVMRCIsIkJPT0xFQU4iLCJpc0Zpbml0ZSIsInN0cmluZ051bSIsIklOVCIsIkZMT0FUIiwiaW5zcGVjdCIsImFyZVR5cGVzQ29tcGF0aWJsZSIsInZhcmlhYmxlVHlwZSIsImxvY2F0aW9uVHlwZSIsImlzVmFsaWRWYWx1ZUFwcGxpY2F0aW9uIiwibG9jYXRpb25EZWZhdWx0IiwiaGFzTG9jYXRpb25EZWZhdWx0IiwiaXNWYWxpZFZhcmlhYmxlIiwidmFsdWVLZXlzIiwiZmllbGRzQXJlVmFsaWQiLCJoYXNVbmV4cGVjdGVkRmllbGQiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJjb2xsZWN0VmFyaWFibGVzIiwiY29uc3RWYWx1ZXMiLCJjb25zdEZpZWxkcyIsIm9iamVjdEZpZWxkTm9kZVRvQ29uc3QiLCJhc3RWYWx1ZSIsImFyZ3NEZWZpbmVyIiwiYnVpbGRGZWRlcmF0ZWRTY2hlbWEiLCJidWlsZFN1YmdyYXBoU2NoZW1hIiwic2NoZW1hX2hlbHBlcl8xIiwiZmVkZXJhdGlvbl9pbnRlcm5hbHNfMSIsIm1vZHVsZXNPclNETCIsInNoYXBlZE1vZHVsZXNPclNETCIsInJlc29sdmVycyIsIm1vZHVsZSIsIm1vZHVsZXMiLCJtb2R1bGVzRnJvbVNETCIsImRvY3VtZW50QVNUIiwiY29uY2F0QVNUIiwic2RsIiwicXVlcnlSb290TmFtZSIsImFkZFJlc29sdmVyc1RvU2NoZW1hIiwiX3NlcnZpY2UiLCJfZW50aXRpZXMiLCJfc291cmNlIiwicmVwcmVzZW50YXRpb25zIiwiZW50aXRpZXNSZXNvbHZlciIsIl9FbnRpdHkiLCJfX3Jlc29sdmVUeXBlIiwiX190eXBlbmFtZSIsImRlcHJlY2F0ZSIsImJ1aWxkU3ViZ3JhcGhTY2hlbWFfMSIsInByaW50SW50cm9zcGVjdGlvblNjaGVtYSIsInByaW50U3ViZ3JhcGhTY2hlbWEiLCJidWlsZFNjaGVtYUZyb21TREwiLCJpc0RvY3VtZW50Tm9kZSIsImlzTm9kZSIsInZhbGlkYXRpb25fMSIsImlzTm90TnVsbE9yVW5kZWZpbmVkIiwibWF5YmVOb2RlIiwib2JqZWN0Iiwic2tpcHBlZFNETFJ1bGVzIiwiVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSIsInNkbFJ1bGVzIiwiZXh0S2luZFRvRGVmS2luZCIsIlNDQUxBUl9UWVBFX0VYVEVOU0lPTiIsIk9CSkVDVF9UWVBFX0VYVEVOU0lPTiIsIklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiIsIlVOSU9OX1RZUEVfRVhURU5TSU9OIiwiSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OIiwibW9kdWxlT3JTREwiLCJmaWVsZENvbmZpZ3MiLCJleGlzdGluZ0V4dGVuc2lvbnMiLCJmaWVsZENvbmZpZyIsImFwb2xsbyIsInJlc29sdmVSZWZlcmVuY2UiLCJyZXNvbHZlVHlwZSIsImZuIiwiZ2V0VmFsdWVzIiwibmV3VmFsdWVzIiwibmV3VmFsdWUiLCJkZXByZWNhdGlvblJlYXNvbiIsImFzc2lnbiIsIkdyYXBoUUxFbnVtVHlwZSIsInRvQ29uZmlnIiwiZmllbGRNYXAiLCJnZXRGaWVsZHMiLCJpc1R5cGVPZiIsInNjaGVtYVRvRXh0ZW5kIiwiR3JhcGhRTFNjaGVtYVZhbGlkYXRpb25FcnJvciIsImRlZmluaXRpb25zTWFwIiwic2NoZW1hRGlyZWN0aXZlcyIsInF1ZXJ5IiwibWlzc2luZ1R5cGVEZWZpbml0aW9ucyIsImV4dGVuZGVkVHlwZU5hbWUiLCJvcGVyYXRpb25UeXBlTWFwIiwiZXh0ZW5kU2NoZW1hIiwiYXNzdW1lVmFsaWRTREwiLCJtdXRhdGlvbiIsInN1YnNjcmlwdGlvbiIsImNhcHR1cmVTdGFja1RyYWNlIiwidHJhbnNmb3JtU2NoZW1hIiwidHJhbnNmb3JtVHlwZSIsInR5cGVNYXAiLCJvbGRUeXBlIiwibmV3VHlwZSIsInJlY3JlYXRlTmFtZWRUeXBlIiwic2NoZW1hQ29uZmlnIiwicmVwbGFjZU1heWJlVHlwZSIsIkdyYXBoUUxEaXJlY3RpdmUiLCJyZXBsYWNlQXJncyIsIkdyYXBoUUxPYmplY3RUeXBlIiwicmVwbGFjZU5hbWVkVHlwZSIsInJlcGxhY2VGaWVsZHMiLCJHcmFwaFFMSW50ZXJmYWNlVHlwZSIsIkdyYXBoUUxVbmlvblR5cGUiLCJHcmFwaFFMSW5wdXRPYmplY3RUeXBlIiwicmVwbGFjZVR5cGUiLCJHcmFwaFFMTGlzdCIsIkdyYXBoUUxOb25OdWxsIiwiZmllbGRzTWFwIiwiaXNGZWRlcmF0aW9uVHlwZSIsImZlZGVyYXRpb25UeXBlcyIsInNlcnZpY2VGaWVsZCIsImVudGl0aWVzRmllbGQiLCJMaW5rSW1wb3J0VHlwZSIsIkFueVR5cGUiLCJTZXJ2aWNlVHlwZSIsIkVudGl0eVR5cGUiLCJjYWNoZV9jb250cm9sX3R5cGVzXzEiLCJhZGRUeXBlTmFtZVRvUG9zc2libGVSZXR1cm4iLCJtYXliZU9iamVjdCIsInR5cGVuYW1lIiwiY2FjaGVIaW50RnJvbVR5cGUiLCJ0aGVuIiwiR3JhcGhRTFN0cmluZyIsIkdyYXBoUUxTY2FsYXJUeXBlIiwic2VyaWFsaXplIiwic3BlY2lmaWVkQnlVUkwiLCJ3cmFwQW5zaTE2Iiwib2Zmc2V0Iiwid3JhcEFuc2kyNTYiLCJ3cmFwQW5zaTE2bSIsInJnYiIsImFuc2kyYW5zaSIsInJnYjJyZ2IiLCJzZXRMYXp5UHJvcGVydHkiLCJwcm9wZXJ0eSIsImNvbG9yQ29udmVydCIsIm1ha2VEeW5hbWljU3R5bGVzIiwid3JhcCIsInRhcmdldFNwYWNlIiwiaXNCYWNrZ3JvdW5kIiwic3R5bGVzIiwic291cmNlU3BhY2UiLCJzdWl0ZSIsImNvZGVzIiwibW9kaWZpZXIiLCJyZXNldCIsImJvbGQiLCJkaW0iLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwiaGlkZGVuIiwic3RyaWtldGhyb3VnaCIsImNvbG9yIiwiYmxhY2siLCJyZWQiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwicmVkQnJpZ2h0IiwiZ3JlZW5CcmlnaHQiLCJ5ZWxsb3dCcmlnaHQiLCJibHVlQnJpZ2h0IiwibWFnZW50YUJyaWdodCIsImN5YW5CcmlnaHQiLCJ3aGl0ZUJyaWdodCIsImJnQ29sb3IiLCJiZ0JsYWNrIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwiYmdCbGFja0JyaWdodCIsImJnUmVkQnJpZ2h0IiwiYmdHcmVlbkJyaWdodCIsImJnWWVsbG93QnJpZ2h0IiwiYmdCbHVlQnJpZ2h0IiwiYmdNYWdlbnRhQnJpZ2h0IiwiYmdDeWFuQnJpZ2h0IiwiYmdXaGl0ZUJyaWdodCIsImdyYXkiLCJiZ0dyYXkiLCJncmV5IiwiYmdHcmV5IiwiZ3JvdXBOYW1lIiwic3R5bGVOYW1lIiwic3R5bGUiLCJvcGVuIiwiY2xvc2UiLCJfdHlwZW9mIiwiaXNEZWVwRXF1YWwiLCJpc0RlZXBTdHJpY3RFcXVhbCIsIl9yZXF1aXJlJGNvZGVzIiwiRVJSX0FNQklHVU9VU19BUkdVTUVOVCIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiRVJSX0lOVkFMSURfQVJHX1ZBTFVFIiwiRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFIiwiRVJSX01JU1NJTkdfQVJHUyIsIkFzc2VydGlvbkVycm9yIiwiX3JlcXVpcmUkdHlwZXMiLCJpc1Byb21pc2UiLCJpc1JlZ0V4cCIsIm9iamVjdEFzc2lnbiIsIm9iamVjdElzIiwiaXMiLCJsYXp5TG9hZENvbXBhcmlzb24iLCJjb21wYXJpc29uIiwid2FybmVkIiwib2siLCJOT19FWENFUFRJT05fU0VOVElORUwiLCJpbm5lckZhaWwiLCJpbm5lck9rIiwiYXJnTGVuIiwiZ2VuZXJhdGVkTWVzc2FnZSIsIm9wZXJhdG9yIiwic3RhY2tTdGFydEZuIiwiX2xlbiIsIl9rZXkiLCJhcHBseSIsImZhaWwiLCJpbnRlcm5hbE1lc3NhZ2UiLCJhcmdzTGVuIiwid2FybiIsImVtaXRXYXJuaW5nIiwiYmluZCIsImVyckFyZ3MiLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwibm90RGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsIkNvbXBhcmlzb24iLCJfdGhpcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJjb21wYXJlRXhjZXB0aW9uS2V5IiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJpc1Byb3RvdHlwZU9mIiwiZ2V0QWN0dWFsIiwiY2hlY2tJc1Byb21pc2UiLCJjYXRjaCIsIndhaXRGb3JBY3R1YWwiLCJwcm9taXNlRm4iLCJQcm9taXNlIiwicmVzdWx0UHJvbWlzZSIsImV4cGVjdHNFcnJvciIsImZuVHlwZSIsImV4cGVjdHNOb0Vycm9yIiwic3RyaWN0IiwiX2xlbjYiLCJfa2V5NiIsInRocm93cyIsIl9sZW4yIiwiX2tleTIiLCJyZWplY3RzIiwiX2xlbjMiLCJfa2V5MyIsImRvZXNOb3RUaHJvdyIsIl9sZW40IiwiX2tleTQiLCJkb2VzTm90UmVqZWN0IiwiX2xlbjUiLCJfa2V5NSIsImlmRXJyb3IiLCJuZXdFcnIiLCJvcmlnU3RhY2siLCJ0bXAyIiwic2hpZnQiLCJ0bXAxIiwicG9zIiwiX2RlZmluZVByb3BlcnR5IiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJGdW5jdGlvbiIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiX3NldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIlBhcmVudCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJ0aGlzX2xlbiIsInN1YnN0cmluZyIsImtSZWFkYWJsZU9wZXJhdG9yIiwic3RyaWN0RXF1YWxPYmplY3QiLCJub3RTdHJpY3RFcXVhbE9iamVjdCIsIm5vdElkZW50aWNhbCIsImNvcHlFcnJvciIsImluc3BlY3RWYWx1ZSIsImNvbXBhY3QiLCJjdXN0b21JbnNwZWN0IiwiZGVwdGgiLCJtYXhBcnJheUxlbmd0aCIsIkluZmluaXR5Iiwic2hvd0hpZGRlbiIsImJyZWFrTGVuZ3RoIiwic2hvd1Byb3h5Iiwic29ydGVkIiwiZ2V0dGVycyIsIl9FcnJvciIsImxpbWl0Iiwic3RhY2tUcmFjZUxpbWl0Iiwic3RkZXJyIiwiaXNUVFkiLCJnZXRDb2xvckRlcHRoIiwibGFzdFBvcyIsImVuZCIsInNraXBwZWQiLCJhY3R1YWxJbnNwZWN0ZWQiLCJhY3R1YWxMaW5lcyIsImV4cGVjdGVkTGluZXMiLCJpbmRpY2F0b3IiLCJpbnB1dExlbmd0aCIsImNvbHVtbnMiLCJtYXhDb3VudCIsInJlcGVhdCIsIm1heExpbmVzIiwiX2FjdHVhbExpbmVzIiwicHJpbnRlZExpbmVzIiwic2tpcHBlZE1zZyIsImN1ciIsImV4cGVjdGVkTGluZSIsImFjdHVhbExpbmUiLCJkaXZlcmdpbmdMaW5lcyIsImNyZWF0ZUVyckRpZmYiLCJfcmVzIiwia25vd25PcGVyYXRvcnMiLCJwcm90b1Byb3BzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwiY3VzdG9tIiwicmVjdXJzZVRpbWVzIiwiY3R4Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsIl9vYmplY3RTcHJlYWQiLCJ1dGlsIiwiY3JlYXRlRXJyb3JUeXBlIiwiQmFzZSIsIk5vZGVFcnJvciIsIl9CYXNlIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiZ2V0TWVzc2FnZSIsIm9uZU9mIiwidGhpbmciLCJsZW4iLCJkZXRlcm1pbmVyIiwic3Vic3RyIiwicmVhc29uIiwiaW5zcGVjdGVkIiwiUmFuZ2VFcnJvciIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX3MiLCJfaSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJyZWdleEZsYWdzU3VwcG9ydGVkIiwiZmxhZ3MiLCJhcnJheUZyb21TZXQiLCJhcnJheUZyb21NYXAiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJudW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwidW5jdXJyeVRoaXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm9iamVjdFRvU3RyaW5nIiwiaXNBbnlBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNEYXRlIiwiaXNNYXAiLCJpc1NldCIsImlzTmF0aXZlRXJyb3IiLCJpc0JveGVkUHJpbWl0aXZlIiwiaXNOdW1iZXJPYmplY3QiLCJpc1N0cmluZ09iamVjdCIsImlzQm9vbGVhbk9iamVjdCIsImlzQmlnSW50T2JqZWN0IiwiaXNTeW1ib2xPYmplY3QiLCJpc0Zsb2F0MzJBcnJheSIsImlzRmxvYXQ2NEFycmF5IiwiaXNOb25JbmRleCIsImNoYXJDb2RlQXQiLCJwb3ciLCJnZXRPd25Ob25JbmRleFByb3BlcnRpZXMiLCJjb21wYXJlIiwieSIsIm1pbiIsImlubmVyRGVlcEVxdWFsIiwidmFsMSIsInZhbDIiLCJtZW1vcyIsImJ1ZjEiLCJidWYyIiwidmFsMVRhZyIsImtleUNoZWNrIiwiZ2V0VGltZSIsIlJlZ0V4cCIsImJ5dGVMZW5ndGgiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImFyZVNpbWlsYXJUeXBlZEFycmF5cyIsImFyZVNpbWlsYXJGbG9hdEFycmF5cyIsIl9rZXlzMiIsInZhbHVlT2YiLCJCb29sZWFuIiwiQmlnSW50IiwiaXNFcXVhbEJveGVkUHJpbWl0aXZlIiwiZ2V0RW51bWVyYWJsZXMiLCJpdGVyYXRpb25UeXBlIiwiYUtleXMiLCJiS2V5cyIsInN5bWJvbEtleXNBIiwic3ltYm9sS2V5c0IiLCJfc3ltYm9sS2V5c0IiLCJwb3NpdGlvbiIsInZhbDJNZW1vQSIsInZhbDJNZW1vQiIsImFyZUVxIiwib2JqRXF1aXYiLCJzZXRIYXNFcXVhbEVsZW1lbnQiLCJtZW1vIiwiZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzIiwicHJpbSIsInNldE1pZ2h0SGF2ZUxvb3NlUHJpbSIsImFsdFZhbHVlIiwibWFwTWlnaHRIYXZlTG9vc2VQcmltIiwiY3VyQiIsIm1hcEhhc0VxdWFsRW50cnkiLCJrZXkxIiwiaXRlbTEiLCJrZXkyIiwiYVZhbHVlcyIsImJWYWx1ZXMiLCJfdmFsIiwic2V0RXF1aXYiLCJhRW50cmllcyIsIl9hRW50cmllcyRpIiwiaXRlbTIiLCJiRW50cmllcyIsIl9pMiIsIl9iRW50cmllcyRfaSIsIm1hcEVxdWl2Iiwia2V5c0EiLCJHZXRJbnRyaW5zaWMiLCJjYWxsQmluZCIsIiRpbmRleE9mIiwiYWxsb3dNaXNzaW5nIiwiaW50cmluc2ljIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiJGdPUEQiLCIkZGVmaW5lUHJvcGVydHkiLCIkbWF4Iiwib3JpZ2luYWxGdW5jdGlvbiIsImZ1bmMiLCJhcHBseUJpbmQiLCJhbnNpU3R5bGVzIiwic3Rkb3V0Iiwic3Rkb3V0Q29sb3IiLCJzdGRlcnJDb2xvciIsInN0cmluZ1JlcGxhY2VBbGwiLCJzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXgiLCJsZXZlbE1hcHBpbmciLCJDaGFsa0NsYXNzIiwiY2hhbGtGYWN0b3J5IiwiY2hhbGsiLCJsZXZlbCIsImlzSW50ZWdlciIsImNvbG9yTGV2ZWwiLCJhcHBseU9wdGlvbnMiLCJ0ZW1wbGF0ZSIsImFyZ3VtZW50c18iLCJjaGFsa1RhZyIsIkNoYWxrIiwiSW5zdGFuY2UiLCJidWlsZGVyIiwiY3JlYXRlQnVpbGRlciIsImNyZWF0ZVN0eWxlciIsIl9zdHlsZXIiLCJfaXNFbXB0eSIsInZpc2libGUiLCJ1c2VkTW9kZWxzIiwibW9kZWwiLCJzdHlsZXIiLCJwcm90byIsImRlZmluZVByb3BlcnRpZXMiLCJfZ2VuZXJhdG9yIiwib3BlbkFsbCIsImNsb3NlQWxsIiwicmF3IiwiYXBwbHlTdHlsZSIsInN0cmluZyIsImxmSW5kZXgiLCJzdHJpbmdzIiwiZmlyc3RTdHJpbmciLCJwYXJ0cyIsInN1cHBvcnRzQ29sb3IiLCJURU1QTEFURV9SRUdFWCIsIlNUWUxFX1JFR0VYIiwiU1RSSU5HX1JFR0VYIiwiRVNDQVBFX1JFR0VYIiwiRVNDQVBFUyIsInVuZXNjYXBlIiwiYnJhY2tldCIsImZyb21DaGFyQ29kZSIsImZyb21Db2RlUG9pbnQiLCJwYXJzZUFyZ3VtZW50cyIsInJlc3VsdHMiLCJjaHVua3MiLCJtYXRjaGVzIiwiY2h1bmsiLCJudW1iZXIiLCJlc2NhcGUiLCJjaGFyYWN0ZXIiLCJwYXJzZVN0eWxlIiwibGFzdEluZGV4IiwiYnVpbGRTdHlsZSIsImxheWVyIiwiY3VycmVudCIsInRlbXBvcmFyeSIsImVzY2FwZUNoYXJhY3RlciIsImVyck1lc3NhZ2UiLCJyZXBsYWNlciIsInN1YnN0cmluZ0xlbmd0aCIsImVuZEluZGV4IiwicmV0dXJuVmFsdWUiLCJwb3N0Zml4IiwiZ290Q1IiLCJjc3NLZXl3b3JkcyIsInJldmVyc2VLZXl3b3JkcyIsImNvbnZlcnQiLCJjaGFubmVscyIsImxhYmVscyIsImhzbCIsImhzdiIsImh3YiIsImNteWsiLCJ4eXoiLCJsYWIiLCJsY2giLCJoZXgiLCJrZXl3b3JkIiwiYW5zaTE2IiwiYW5zaTI1NiIsImhjZyIsImFwcGxlIiwiZGVsdGEiLCJoIiwibCIsInJkaWYiLCJnZGlmIiwiYmRpZiIsImRpZmYiLCJkaWZmYyIsInciLCJjdXJyZW50Q2xvc2VzdEtleXdvcmQiLCJjdXJyZW50Q2xvc2VzdERpc3RhbmNlIiwieiIsInQzIiwic21pbiIsImxtaW4iLCJoaSIsInEiLCJ2bWluIiwic2wiLCJ3aCIsImJsIiwicmF0aW8iLCJ5MiIsIngyIiwiejIiLCJhdGFuMiIsIlBJIiwic3FydCIsImhyIiwiY29zIiwic2luIiwic2F0dXJhdGlvbiIsInJvdW5kIiwiYW5zaSIsIm11bHQiLCJyZW0iLCJjb2xvclN0cmluZyIsImNoYXIiLCJpbnRlZ2VyIiwiY2hyb21hIiwiZ3JheXNjYWxlIiwiaHVlIiwicHVyZSIsIm1nIiwiY29udmVyc2lvbnMiLCJyb3V0ZSIsImZyb21Nb2RlbCIsInJvdXRlcyIsInRvTW9kZWwiLCJ3cmFwcGVkRm4iLCJhcmcwIiwiY29udmVyc2lvbiIsIndyYXBSb3VuZGVkIiwid3JhcFJhdyIsImxpbmsiLCJ0byIsIndyYXBDb252ZXJzaW9uIiwibW9kZWxzIiwiYnVpbGRHcmFwaCIsInF1ZXVlIiwiYWRqYWNlbnRzIiwiYWRqYWNlbnQiLCJkZXJpdmVCRlMiLCJ0aW1lcyIsIndpbmRvdyIsImZ1bmN0aW9ucyIsInRpbWUiLCJkdXJhdGlvbiIsImZvcm1hdCIsImV4cHJlc3Npb24iLCJ0dXBsZSIsImhhc1N5bWJvbHMiLCJ0b1N0ciIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsImhhc1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwicHJlZGljYXRlcyIsImZpcnN0U291cmNlIiwibmV4dFNvdXJjZSIsImtleXNBcnJheSIsIm5leHRJbmRleCIsIm5leHRLZXkiLCJwb2x5ZmlsbCIsImlzQ2FsbGFibGUiLCJmb3JFYWNoQXJyYXkiLCJyZWNlaXZlciIsImZvckVhY2hTdHJpbmciLCJmb3JFYWNoT2JqZWN0IiwibGlzdCIsInRoaXNBcmciLCJFUlJPUl9NRVNTQUdFIiwiZnVuY1R5cGUiLCJib3VuZCIsImJpbmRlciIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJpbXBsZW1lbnRhdGlvbiIsIiRTeW50YXhFcnJvciIsIlN5bnRheEVycm9yIiwiJEZ1bmN0aW9uIiwiJFR5cGVFcnJvciIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsImdldFByb3RvIiwibmVlZHNFdmFsIiwiVHlwZWRBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkFycmF5QnVmZmVyIiwiQXRvbWljcyIsIkRhdGFWaWV3IiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXZhbCIsIkV2YWxFcnJvciIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIlVSSUVycm9yIiwiV2Vha01hcCIsIldlYWtSZWYiLCJXZWFrU2V0IiwiZG9FdmFsIiwiZ2VuIiwiTEVHQUNZX0FMSUFTRVMiLCJoYXNPd24iLCIkY29uY2F0IiwiJHNwbGljZUFwcGx5IiwiJHJlcGxhY2UiLCIkc3RyU2xpY2UiLCIkZXhlYyIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmdUb1BhdGgiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJpbnRyaW5zaWNOYW1lIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImZvcm1hdEVycm9yIiwidG9KU09OIiwicHJpbnRFcnJvciIsIl9pc09iamVjdExpa2UiLCJfbG9jYXRpb24iLCJfcHJpbnRMb2NhdGlvbiIsInJhd0FyZ3MiLCJfdGhpcyRub2RlcyIsIl9ub2RlTG9jYXRpb25zJCIsIl9yZWYiLCJmaXJzdEFyZyIsInRvTm9ybWFsaXplZE9wdGlvbnMiLCJ1bmRlZmluZWRJZkVtcHR5Iiwibm9kZUxvY2F0aW9ucyIsImdldExvY2F0aW9uIiwib3JpZ2luYWxFeHRlbnNpb25zIiwiaXNPYmplY3RMaWtlIiwidG9TdHJpbmdUYWciLCJwcmludExvY2F0aW9uIiwicHJpbnRTb3VyY2VMb2NhdGlvbiIsImZvcm1hdHRlZEVycm9yIiwiY29sbGVjdEZpZWxkcyIsInZhcmlhYmxlVmFsdWVzIiwiY29sbGVjdEZpZWxkc0ltcGwiLCJjb2xsZWN0U3ViZmllbGRzIiwic3ViRmllbGROb2RlcyIsInZpc2l0ZWRGcmFnbWVudE5hbWVzIiwiX2tpbmRzIiwiX2RlZmluaXRpb24iLCJfdHlwZUZyb21BU1QiLCJzaG91bGRJbmNsdWRlTm9kZSIsImZpZWxkTGlzdCIsImRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoIiwiZnJhZ05hbWUiLCJza2lwIiwiZ2V0RGlyZWN0aXZlVmFsdWVzIiwiR3JhcGhRTFNraXBEaXJlY3RpdmUiLCJpbmNsdWRlIiwiR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUiLCJ0eXBlQ29uZGl0aW9uTm9kZSIsImNvbmRpdGlvbmFsVHlwZSIsImlzU3ViVHlwZSIsImdldEFyZ3VtZW50VmFsdWVzIiwiX25vZGUkZGlyZWN0aXZlcyIsImdldFZhcmlhYmxlVmFsdWVzIiwidmFyRGVmTm9kZXMiLCJtYXhFcnJvcnMiLCJjb2VyY2VkIiwiY29lcmNlZFZhbHVlcyIsInZhckRlZk5vZGUiLCJ2YXJUeXBlIiwidmFyVHlwZVN0ciIsIl9wcmludGVyIiwiX0dyYXBoUUxFcnJvciIsIl92YWx1ZUZyb21BU1QiLCJfaW5zcGVjdCIsIl9jb2VyY2VJbnB1dFZhbHVlIiwiY29lcmNlSW5wdXRWYWx1ZSIsImludmFsaWRWYWx1ZSIsIl9wcmludFBhdGhBcnJheSIsInByaW50UGF0aEFycmF5IiwiY29lcmNlVmFyaWFibGVWYWx1ZXMiLCJfa2V5TWFwIiwiX25vZGUkYXJndW1lbnRzIiwiYXJndW1lbnROb2RlcyIsImFyZ05vZGVNYXAiLCJrZXlNYXAiLCJhcmd1bWVudE5vZGUiLCJ2YWx1ZU5vZGUiLCJpc051bGwiLCJ2YXJpYWJsZU5hbWUiLCJjb2VyY2VkVmFsdWUiLCJwcm9wIiwicHJldiIsInBhdGhUb0FycmF5IiwiZmxhdHRlbmVkIiwiY3VyciIsInJldmVyc2UiLCJkZXZBc3NlcnQiLCJzZWNvbmRBcmciLCJzdWJNZXNzYWdlIiwic3VnZ2VzdGlvbnNBcmciLCJncm91cEJ5Iiwia2V5Rm4iLCJpZGVudGl0eUZ1bmMiLCJmb3JtYXRWYWx1ZSIsInNlZW5WYWx1ZXMiLCJwcmV2aW91c2x5U2VlblZhbHVlcyIsImlzSlNPTmFibGUiLCJqc29uVmFsdWUiLCJyZW1haW5pbmciLCJmb3JtYXRBcnJheSIsInRhZyIsImdldE9iamVjdFRhZyIsInByb3BlcnRpZXMiLCJmb3JtYXRPYmplY3QiLCJmb3JtYXRPYmplY3RWYWx1ZSIsImluc3RhbmNlT2YiLCJpbnZhcmlhbnQiLCJpc0l0ZXJhYmxlT2JqZWN0IiwibWF5YmVJdGVyYWJsZSIsImtleVZhbE1hcCIsInZhbEZuIiwibWFwVmFsdWUiLCJuYXR1cmFsQ29tcGFyZSIsImFTdHIiLCJiU3RyIiwiYUluZGV4IiwiYkluZGV4IiwiYUNoYXIiLCJiQ2hhciIsImlzRGlnaXQiLCJhTnVtIiwiRElHSVRfMCIsImJOdW0iLCJsZXhpY2FsRGlzdGFuY2UiLCJMZXhpY2FsRGlzdGFuY2UiLCJtZWFzdXJlIiwiX25hdHVyYWxDb21wYXJlIiwiX2lucHV0IiwiX2lucHV0TG93ZXJDYXNlIiwiX2lucHV0QXJyYXkiLCJzdHJpbmdUb0FycmF5IiwiX3Jvd3MiLCJmaWxsIiwib3B0aW9uTG93ZXJDYXNlIiwidG1wIiwiYUxlbmd0aCIsImJMZW5ndGgiLCJyb3dzIiwidXBSb3ciLCJjdXJyZW50Um93Iiwic21hbGxlc3RDZWxsIiwiY29zdCIsImN1cnJlbnRDZWxsIiwiZG91YmxlRGlhZ29uYWxDZWxsIiwic3RyTGVuZ3RoIiwidG9PYmpNYXAiLCJUb2tlbiIsIlF1ZXJ5RG9jdW1lbnRLZXlzIiwiTG9jYXRpb24iLCJtYXliZUtpbmQiLCJraW5kVmFsdWVzIiwic3RhcnRUb2tlbiIsImVuZFRva2VuIiwibGluZSIsImNvbHVtbiIsIk5hbWUiLCJEb2N1bWVudCIsIk9wZXJhdGlvbkRlZmluaXRpb24iLCJBcmd1bWVudCIsIkZyYWdtZW50U3ByZWFkIiwiSW5saW5lRnJhZ21lbnQiLCJGcmFnbWVudERlZmluaXRpb24iLCJJbnRWYWx1ZSIsIkZsb2F0VmFsdWUiLCJTdHJpbmdWYWx1ZSIsIkJvb2xlYW5WYWx1ZSIsIk51bGxWYWx1ZSIsIkxpc3RWYWx1ZSIsIk9iamVjdFZhbHVlIiwiT2JqZWN0RmllbGQiLCJPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiIsIlNjYWxhclR5cGVEZWZpbml0aW9uIiwiT2JqZWN0VHlwZURlZmluaXRpb24iLCJJbnB1dFZhbHVlRGVmaW5pdGlvbiIsIkludGVyZmFjZVR5cGVEZWZpbml0aW9uIiwiVW5pb25UeXBlRGVmaW5pdGlvbiIsIkVudW1UeXBlRGVmaW5pdGlvbiIsIkVudW1WYWx1ZURlZmluaXRpb24iLCJJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIiwiU2NoZW1hRXh0ZW5zaW9uIiwiU2NhbGFyVHlwZUV4dGVuc2lvbiIsIk9iamVjdFR5cGVFeHRlbnNpb24iLCJJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uIiwiVW5pb25UeXBlRXh0ZW5zaW9uIiwiRW51bVR5cGVFeHRlbnNpb24iLCJJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24iLCJkZWRlbnRCbG9ja1N0cmluZ0xpbmVzIiwibGluZXMiLCJfZmlyc3ROb25FbXB0eUxpbmUyIiwiY29tbW9uSW5kZW50IiwiTUFYX1NBRkVfSU5URUdFUiIsImZpcnN0Tm9uRW1wdHlMaW5lIiwibGFzdE5vbkVtcHR5TGluZSIsIl9maXJzdE5vbkVtcHR5TGluZSIsImxlYWRpbmdXaGl0ZXNwYWNlIiwiaXNQcmludGFibGVBc0Jsb2NrU3RyaW5nIiwiaXNFbXB0eUxpbmUiLCJoYXNJbmRlbnQiLCJoYXNDb21tb25JbmRlbnQiLCJzZWVuTm9uRW1wdHlMaW5lIiwiY29kZVBvaW50QXQiLCJlc2NhcGVkVmFsdWUiLCJmb3JjZUxlYWRpbmdOZXdMaW5lIiwiX2NoYXJhY3RlckNsYXNzZXMiLCJpc1doaXRlU3BhY2UiLCJoYXNUcmFpbGluZ1RyaXBsZVF1b3RlcyIsImZvcmNlVHJhaWxpbmdOZXdsaW5lIiwibWluaW1pemUiLCJza2lwTGVhZGluZ05ld0xpbmUiLCJpc0xldHRlciIsImlzTmFtZUNvbnRpbnVlIiwiaXNOYW1lU3RhcnQiLCJsYXN0TGluZVN0YXJ0IiwiYm9keSIsIm1hdGNoQWxsIiwiTGluZVJlZ0V4cCIsIl9pbnZhcmlhbnQiLCJpc0NvbnN0VmFsdWVOb2RlIiwiaXNWYWx1ZU5vZGUiLCJpc0RlZmluaXRpb25Ob2RlIiwiaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUiLCJpc1NlbGVjdGlvbk5vZGUiLCJpc1R5cGVOb2RlIiwic291cmNlTG9jYXRpb24iLCJmaXJzdExpbmVDb2x1bW5PZmZzZXQiLCJsb2NhdGlvbk9mZnNldCIsInBhZFN0YXJ0IiwibGluZUluZGV4IiwibGluZU9mZnNldCIsImxpbmVOdW0iLCJjb2x1bW5PZmZzZXQiLCJjb2x1bW5OdW0iLCJsb2NhdGlvblN0ciIsImxvY2F0aW9uTGluZSIsInN1YkxpbmVJbmRleCIsInN1YkxpbmVDb2x1bW5OdW0iLCJzdWJMaW5lcyIsInByaW50UHJlZml4ZWRMaW5lcyIsInN1YkxpbmUiLCJleGlzdGluZ0xpbmVzIiwicGFkTGVuIiwicHJpbnRTdHJpbmciLCJlc2NhcGVkUmVnRXhwIiwiZXNjYXBlZFJlcGxhY2VyIiwiZXNjYXBlU2VxdWVuY2VzIiwiX3Zpc2l0b3IiLCJ2aXNpdCIsInByaW50RG9jQVNUUmVkdWNlciIsIl9ibG9ja1N0cmluZyIsIl9wcmludFN0cmluZyIsImxlYXZlIiwidmFyRGVmcyIsImJsb2NrIiwiYXJnc0xpbmUiLCJpc0Jsb2NrU3RyaW5nIiwiaGFzTXVsdGlsaW5lSXRlbXMiLCJtYXliZUFycmF5Iiwic2VwYXJhdG9yIiwiX21heWJlQXJyYXkkZmlsdGVyJGpvIiwibWF5YmVTdHJpbmciLCJfbWF5YmVBcnJheSRzb21lIiwiQlJFQUsiLCJnZXRFbnRlckxlYXZlRm9yS2luZCIsImdldFZpc2l0Rm4iLCJ2aXNpdG9yIiwiaXNMZWF2aW5nIiwiZW50ZXIiLCJ2aXNpdG9yS2V5cyIsIl9hc3QiLCJlbnRlckxlYXZlTWFwIiwiaW5BcnJheSIsImVkaXRzIiwiaXNFZGl0ZWQiLCJlZGl0T2Zmc2V0IiwiZWRpdEtleSIsImVkaXRWYWx1ZSIsImFycmF5S2V5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIl9lbnRlckxlYXZlTWFwJGdldCIsIl9lbnRlckxlYXZlTWFwJGdldDIiLCJfZGV2QXNzZXJ0IiwidmlzaXRGbiIsIl9ub2RlJGtpbmQiLCJ2aXNpdEluUGFyYWxsZWwiLCJ2aXNpdG9ycyIsInNraXBwaW5nIiwibWVyZ2VkVmlzaXRvciIsImhhc1Zpc2l0b3IiLCJlbnRlckxpc3QiLCJsZWF2ZUxpc3QiLCJtZXJnZWRFbnRlckxlYXZlIiwiX2VudGVyTGlzdCRpIiwiX2xlYXZlTGlzdCRpIiwia2luZFZpc2l0b3IiLCJhc3NlcnRFbnVtVmFsdWVOYW1lIiwiYXJnc1RvQXJnc0NvbmZpZyIsImFzc2VydEFic3RyYWN0VHlwZSIsImFzc2VydENvbXBvc2l0ZVR5cGUiLCJhc3NlcnRFbnVtVHlwZSIsImFzc2VydElucHV0T2JqZWN0VHlwZSIsImFzc2VydElucHV0VHlwZSIsImFzc2VydEludGVyZmFjZVR5cGUiLCJhc3NlcnRMZWFmVHlwZSIsImFzc2VydExpc3RUeXBlIiwiYXNzZXJ0TmFtZWRUeXBlIiwiYXNzZXJ0Tm9uTnVsbFR5cGUiLCJhc3NlcnROdWxsYWJsZVR5cGUiLCJhc3NlcnRPYmplY3RUeXBlIiwiYXNzZXJ0T3V0cHV0VHlwZSIsImFzc2VydFNjYWxhclR5cGUiLCJhc3NlcnRUeXBlIiwiaXNUeXBlIiwiYXNzZXJ0VW5pb25UeXBlIiwiYXNzZXJ0V3JhcHBpbmdUeXBlIiwiaXNXcmFwcGluZ1R5cGUiLCJkZWZpbmVBcmd1bWVudHMiLCJnZXROYW1lZFR5cGUiLCJ1bndyYXBwZWRUeXBlIiwiZ2V0TnVsbGFibGVUeXBlIiwiaXNSZXF1aXJlZEFyZ3VtZW50IiwiaXNSZXF1aXJlZElucHV0RmllbGQiLCJyZXNvbHZlT2JqTWFwVGh1bmsiLCJyZXNvbHZlUmVhZG9ubHlBcnJheVRodW5rIiwiX2RpZFlvdU1lYW4iLCJfaWRlbnRpdHlGdW5jIiwiX2luc3RhbmNlT2YiLCJfa2V5VmFsTWFwIiwiX21hcFZhbHVlIiwiX3N1Z2dlc3Rpb25MaXN0IiwiX3RvT2JqTWFwIiwiX3ZhbHVlRnJvbUFTVFVudHlwZWQiLCJfYXNzZXJ0TmFtZSIsInRodW5rIiwiX2NvbmZpZyRwYXJzZVZhbHVlIiwiX2NvbmZpZyRzZXJpYWxpemUiLCJfY29uZmlnJHBhcnNlTGl0ZXJhbCIsIl9jb25maWckZXh0ZW5zaW9uQVNUTiIsInBhcnNlVmFsdWUiLCJwYXJzZUxpdGVyYWwiLCJfY29uZmlnJGV4dGVuc2lvbkFTVE4yIiwiZGVmaW5lRmllbGRNYXAiLCJfaW50ZXJmYWNlcyIsImRlZmluZUludGVyZmFjZXMiLCJnZXRJbnRlcmZhY2VzIiwiZmllbGRzVG9GaWVsZHNDb25maWciLCJfY29uZmlnJGludGVyZmFjZXMiLCJpc1BsYWluT2JqIiwiX2ZpZWxkQ29uZmlnJGFyZ3MiLCJhcmdzQ29uZmlnIiwic3Vic2NyaWJlIiwiYXJnQ29uZmlnIiwiX2NvbmZpZyRleHRlbnNpb25BU1ROMyIsIl9jb25maWckZXh0ZW5zaW9uQVNUTjQiLCJkZWZpbmVUeXBlcyIsImdldFR5cGVzIiwiX2NvbmZpZyRleHRlbnNpb25BU1RONSIsInZhbHVlTWFwIiwidmFsdWVOYW1lIiwidmFsdWVDb25maWciLCJfdmFsdWVMb29rdXAiLCJfbmFtZUxvb2t1cCIsImdldFZhbHVlIiwib3V0cHV0VmFsdWUiLCJpbnB1dFZhbHVlIiwidmFsdWVTdHIiLCJkaWRZb3VNZWFuRW51bVZhbHVlIiwiX3ZhcmlhYmxlcyIsInVua25vd25WYWx1ZVN0ciIsImFsbE5hbWVzIiwic3VnZ2VzdGVkVmFsdWVzIiwiX2NvbmZpZyRleHRlbnNpb25BU1RONiIsImRlZmluZUlucHV0RmllbGRNYXAiLCJHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmUiLCJHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSIsIkRFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OIiwiYXNzZXJ0RGlyZWN0aXZlIiwic3BlY2lmaWVkRGlyZWN0aXZlcyIsIl9kaXJlY3RpdmVMb2NhdGlvbiIsIl9zY2FsYXJzIiwiX2NvbmZpZyRpc1JlcGVhdGFibGUiLCJfY29uZmlnJGFyZ3MiLCJpc1JlcGVhdGFibGUiLCJHcmFwaFFMQm9vbGVhbiIsIl9fVHlwZUtpbmQiLCJfX1R5cGUiLCJfX1NjaGVtYSIsIl9fSW5wdXRWYWx1ZSIsIl9fRmllbGQiLCJfX0VudW1WYWx1ZSIsIl9fRGlyZWN0aXZlTG9jYXRpb24iLCJfX0RpcmVjdGl2ZSIsIlR5cGVOYW1lTWV0YUZpZWxkRGVmIiwiVHlwZU1ldGFGaWVsZERlZiIsIlR5cGVLaW5kIiwiU2NoZW1hTWV0YUZpZWxkRGVmIiwiX2FzdEZyb21WYWx1ZSIsImdldFF1ZXJ5VHlwZSIsIm11dGF0aW9uVHlwZSIsImdldE11dGF0aW9uVHlwZSIsInN1YnNjcmlwdGlvblR5cGUiLCJnZXRTdWJzY3JpcHRpb25UeXBlIiwiaW5jbHVkZURlcHJlY2F0ZWQiLCJOT05fTlVMTCIsIl9jb250ZXh0IiwiZ2V0UG9zc2libGVUeXBlcyIsImVudW1WYWx1ZXMiLCJpbnB1dEZpZWxkcyIsInZhbHVlQVNUIiwiYXN0RnJvbVZhbHVlIiwiR3JhcGhRTEludCIsIkdyYXBoUUxJRCIsIkdyYXBoUUxGbG9hdCIsIkdSQVBIUUxfTUlOX0lOVCIsIkdSQVBIUUxfTUFYX0lOVCIsInNlcmlhbGl6ZU9iamVjdCIsIm51bSIsInZhbHVlT2ZSZXN1bHQiLCJhc3NlcnRTY2hlbWEiLCJpc1NjaGVtYSIsIl9pbnRyb3NwZWN0aW9uIiwiX2NvbmZpZyRkaXJlY3RpdmVzIiwiX192YWxpZGF0aW9uRXJyb3JzIiwiX3F1ZXJ5VHlwZSIsIl9tdXRhdGlvblR5cGUiLCJfc3Vic2NyaXB0aW9uVHlwZSIsImFsbFJlZmVyZW5jZWRUeXBlcyIsImNvbGxlY3RSZWZlcmVuY2VkVHlwZXMiLCJfdHlwZU1hcCIsIl9zdWJUeXBlTWFwIiwiX2ltcGxlbWVudGF0aW9uc01hcCIsImlmYWNlIiwib2JqZWN0cyIsImFic3RyYWN0VHlwZSIsImdldEltcGxlbWVudGF0aW9ucyIsImludGVyZmFjZVR5cGUiLCJnZXREaXJlY3RpdmUiLCJ0eXBlU2V0IiwiYXNzZXJ0VmFsaWRTY2hlbWEiLCJfdHlwZUNvbXBhcmF0b3JzIiwiU2NoZW1hVmFsaWRhdGlvbkNvbnRleHQiLCJfZ2V0T3BlcmF0aW9uVHlwZU5vZGUiLCJnZXRPcGVyYXRpb25UeXBlTm9kZSIsIl9nZXRPcGVyYXRpb25UeXBlTm9kZTIiLCJfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzIiwidmFsaWRhdGVSb290VHlwZXMiLCJfYXJnJGFzdE5vZGUiLCJnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZSIsInZhbGlkYXRlRGlyZWN0aXZlcyIsInZhbGlkYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnMiLCJkZXRlY3RDeWNsZVJlY3Vyc2l2ZSIsImlucHV0T2JqIiwiY3JlYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnNWYWxpZGF0b3IiLCJ2YWxpZGF0ZUZpZWxkcyIsInZhbGlkYXRlSW50ZXJmYWNlcyIsInZhbGlkYXRlVW5pb25NZW1iZXJzIiwidmFsaWRhdGVFbnVtVmFsdWVzIiwidmFsaWRhdGVJbnB1dEZpZWxkcyIsInZhbGlkYXRlVHlwZXMiLCJnZXRFcnJvcnMiLCJfZXJyb3JzIiwiX25vZGVzIiwiX2ZsYXRNYXAkZmluZCIsIl9zY2hlbWFOb2RlJG9wZXJhdGlvbiIsIm9wZXJhdGlvbk5vZGUiLCJfZmllbGQkYXN0Tm9kZSIsIl9hcmckYXN0Tm9kZTIiLCJfYXJnJGFzdE5vZGUzIiwiaWZhY2VUeXBlTmFtZXMiLCJnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXMiLCJ2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzIiwidmFsaWRhdGVUeXBlSW1wbGVtZW50c0ludGVyZmFjZSIsInR5cGVGaWVsZE1hcCIsImlmYWNlRmllbGQiLCJfaWZhY2VGaWVsZCRhc3ROb2RlIiwiX3R5cGVGaWVsZCRhc3ROb2RlIiwiaXNUeXBlU3ViVHlwZU9mIiwiaWZhY2VBcmciLCJ0eXBlQXJnIiwiX2lmYWNlQXJnJGFzdE5vZGUiLCJfdHlwZUFyZyRhc3ROb2RlIiwiaXNFcXVhbFR5cGUiLCJpZmFjZUludGVyZmFjZXMiLCJ0cmFuc2l0aXZlIiwidW5pb24iLCJtZW1iZXJUeXBlcyIsImluY2x1ZGVkVHlwZU5hbWVzIiwiZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXMiLCJfZmllbGQkYXN0Tm9kZTIiLCJfZmllbGQkYXN0Tm9kZTMiLCJfdHlwZU5vZGUkaW50ZXJmYWNlcyIsImlmYWNlTm9kZSIsInVuaW9uTm9kZSIsIl91bmlvbk5vZGUkdHlwZXMiLCJfZGVmaW5pdGlvbk5vZGUkZGlyZWMiLCJUeXBlSW5mbyIsInZpc2l0V2l0aFR5cGVJbmZvIiwidHlwZUluZm8iLCJpbml0aWFsVHlwZSIsImdldEZpZWxkRGVmRm4iLCJfdHlwZVN0YWNrIiwiX3BhcmVudFR5cGVTdGFjayIsIl9pbnB1dFR5cGVTdGFjayIsIl9maWVsZERlZlN0YWNrIiwiX2RlZmF1bHRWYWx1ZVN0YWNrIiwiX2RpcmVjdGl2ZSIsIl9hcmd1bWVudCIsIl9lbnVtVmFsdWUiLCJfZ2V0RmllbGREZWYiLCJnZXRGaWVsZERlZiIsImdldFBhcmVudFR5cGUiLCJnZXRQYXJlbnRJbnB1dFR5cGUiLCJnZXREZWZhdWx0VmFsdWUiLCJnZXRBcmd1bWVudCIsImdldEVudW1WYWx1ZSIsInR5cGVDb25kaXRpb25BU1QiLCJvdXRwdXRUeXBlIiwiaW5wdXRUeXBlIiwiX3RoaXMkZ2V0RGlyZWN0aXZlIiwiZmllbGRPckRpcmVjdGl2ZSIsImxpc3RUeXBlIiwib2JqZWN0VHlwZSIsImlucHV0RmllbGRUeXBlIiwiX2lzSXRlcmFibGVPYmplY3QiLCJzZXJpYWxpemVkIiwiZGVmYXVsdE9uRXJyb3IiLCJjb2VyY2VJbnB1dFZhbHVlSW1wbCIsIl9QYXRoIiwiZXJyb3JQcmVmaXgiLCJpdGVtVmFsdWUiLCJpdGVtUGF0aCIsImZpZWxkRGVmcyIsInR5cGVTdHIiLCJwYXJzZVJlc3VsdCIsInNvcnRWYWx1ZU5vZGUiLCJmaWVsZEEiLCJmaWVsZEIiLCJkb1R5cGVzT3ZlcmxhcCIsInR5cGVBIiwidHlwZUIiLCJzdXBlclR5cGUiLCJpbm5lclR5cGUiLCJ2YXJpYWJsZVZhbHVlIiwiaXNNaXNzaW5nVmFyaWFibGUiLCJjb2VyY2VkT2JqIiwiX2Vycm9yIiwiVmFsaWRhdGlvbkNvbnRleHQiLCJTRExWYWxpZGF0aW9uQ29udGV4dCIsIkFTVFZhbGlkYXRpb25Db250ZXh0IiwiX1R5cGVJbmZvIiwiX2ZyYWdtZW50cyIsIl9mcmFnbWVudFNwcmVhZHMiLCJfcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzIiwiX29uRXJyb3IiLCJnZXRGcmFnbWVudCIsImRlZk5vZGUiLCJnZXRGcmFnbWVudFNwcmVhZHMiLCJzcHJlYWRzIiwic2V0c1RvVmlzaXQiLCJnZXRSZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMiLCJjb2xsZWN0ZWROYW1lcyIsIm5vZGVzVG9WaXNpdCIsIl90eXBlSW5mbyIsIl92YXJpYWJsZVVzYWdlcyIsIl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyIsImdldFZhcmlhYmxlVXNhZ2VzIiwibmV3VXNhZ2VzIiwiZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMiLCJmcmFnIiwiX0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUiLCJFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlIiwiX0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlIiwiRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUiLCJfRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUiLCJGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZSIsIl9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlIiwiS25vd25Bcmd1bWVudE5hbWVzUnVsZSIsIl9Lbm93bkRpcmVjdGl2ZXNSdWxlIiwiS25vd25EaXJlY3RpdmVzUnVsZSIsIl9Lbm93bkZyYWdtZW50TmFtZXNSdWxlIiwiS25vd25GcmFnbWVudE5hbWVzUnVsZSIsIl9Lbm93blR5cGVOYW1lc1J1bGUiLCJfTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUiLCJMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZSIsIl9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUiLCJMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUiLCJfTm9EZXByZWNhdGVkQ3VzdG9tUnVsZSIsIk5vRGVwcmVjYXRlZEN1c3RvbVJ1bGUiLCJfTm9GcmFnbWVudEN5Y2xlc1J1bGUiLCJOb0ZyYWdtZW50Q3ljbGVzUnVsZSIsIl9Ob1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlIiwiTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZSIsIl9Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUiLCJOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUiLCJfTm9VbnVzZWRGcmFnbWVudHNSdWxlIiwiTm9VbnVzZWRGcmFnbWVudHNSdWxlIiwiX05vVW51c2VkVmFyaWFibGVzUnVsZSIsIk5vVW51c2VkVmFyaWFibGVzUnVsZSIsIl9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZSIsIk92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlIiwiX1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSIsIlBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSIsIl9Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZSIsIl9Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZSIsIlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlIiwiX1NjYWxhckxlYWZzUnVsZSIsIlNjYWxhckxlYWZzUnVsZSIsIl9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlIiwiU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZSIsIl9VbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUiLCJVbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUiLCJfVW5pcXVlQXJndW1lbnROYW1lc1J1bGUiLCJVbmlxdWVBcmd1bWVudE5hbWVzUnVsZSIsIl9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUiLCJVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUiLCJfVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSIsIl9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUiLCJVbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUiLCJfVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlIiwiVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlIiwiX1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlIiwiVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUiLCJfVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSIsIlVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUiLCJfVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlIiwiVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlIiwiX1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSIsIlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSIsIl9VbmlxdWVUeXBlTmFtZXNSdWxlIiwiVW5pcXVlVHlwZU5hbWVzUnVsZSIsIl9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZSIsIlVuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlIiwiX1ZhbGlkYXRpb25Db250ZXh0IiwiX1ZhbHVlc09mQ29ycmVjdFR5cGVSdWxlIiwiVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUiLCJfVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUiLCJWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSIsIl9WYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUiLCJWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUiLCJfc3BlY2lmaWVkUnVsZXMiLCJzcGVjaWZpZWRSdWxlcyIsIl92YWxpZGF0ZSIsIl9wcmVkaWNhdGVzIiwiZGVmTmFtZSIsInN1Z2dlc3Rpb24iLCJwb3NzaWJsZVR5cGUiLCJwb3NzaWJsZUludGVyZmFjZSIsIl91c2FnZUNvdW50JHBvc3NpYmxlSSIsInVzYWdlQ291bnREaWZmIiwiZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzIiwicG9zc2libGVGaWVsZE5hbWVzIiwiZ2V0U3VnZ2VzdGVkRmllbGROYW1lcyIsIktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUiLCJrbm93bkFyZ3NOYW1lcyIsImRpcmVjdGl2ZUFyZ3MiLCJkZWZpbmVkRGlyZWN0aXZlcyIsImFzdERlZmluaXRpb25zIiwiX2RlZiRhcmd1bWVudHMiLCJhcmdzTm9kZXMiLCJrbm93bkFyZ3MiLCJsb2NhdGlvbnNNYXAiLCJfcGF0aCIsImNhbmRpZGF0ZUxvY2F0aW9uIiwiYXBwbGllZFRvIiwiZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JPcGVyYXRpb24iLCJFTlVNX1ZBTFVFX0RFRklOSVRJT04iLCJJTlBVVF9WQUxVRV9ERUZJTklUSU9OIiwicGFyZW50Tm9kZSIsImdldERpcmVjdGl2ZUxvY2F0aW9uRm9yQVNUUGF0aCIsIl9hbmNlc3RvcnMkIiwib3BlcmF0aW9uQ291bnQiLCJfcmVmMiIsIl9vbGRTY2hlbWEkYXN0Tm9kZSIsIm9sZFNjaGVtYSIsImFscmVhZHlEZWZpbmVkIiwic2NoZW1hRGVmaW5pdGlvbnNDb3VudCIsInZpc2l0ZWRGcmFncyIsInNwcmVhZFBhdGgiLCJzcHJlYWRQYXRoSW5kZXhCeU5hbWUiLCJzcHJlYWROb2RlcyIsInNwcmVhZE5vZGUiLCJzcHJlYWROYW1lIiwic3ByZWFkRnJhZ21lbnQiLCJ2aWFQYXRoIiwidmFyaWFibGVOYW1lRGVmaW5lZCIsIm9wZXJhdGlvbkRlZnMiLCJmcmFnbWVudERlZnMiLCJmcmFnbWVudE5hbWVVc2VkIiwiZnJhZ21lbnREZWYiLCJ2YXJpYWJsZURlZnMiLCJ2YXJpYWJsZU5hbWVVc2VkIiwidmFyaWFibGVEZWYiLCJjb21wYXJlZEZyYWdtZW50UGFpcnMiLCJQYWlyU2V0IiwiY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyIsImNvbmZsaWN0cyIsImZyYWdtZW50TmFtZXMiLCJnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzIiwiY29uZmxpY3QiLCJmaW5kQ29uZmxpY3QiLCJjb2xsZWN0Q29uZmxpY3RzV2l0aGluIiwiY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudCIsImNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzIiwiZmluZENvbmZsaWN0c1dpdGhpblNlbGVjdGlvblNldCIsImZpZWxkczEiLCJmaWVsZHMyIiwicmVhc29uTXNnIiwicmVhc29uTWVzc2FnZSIsIl9zb3J0VmFsdWVOb2RlIiwic3ViUmVhc29uIiwiYXJlTXV0dWFsbHlFeGNsdXNpdmUiLCJmaWVsZE1hcDIiLCJyZWZlcmVuY2VkRnJhZ21lbnROYW1lcyIsImdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzIiwiY29sbGVjdENvbmZsaWN0c0JldHdlZW4iLCJyZWZlcmVuY2VkRnJhZ21lbnROYW1lIiwiZnJhZ21lbnROYW1lMSIsImZyYWdtZW50TmFtZTIiLCJmcmFnbWVudDEiLCJmcmFnbWVudDIiLCJmaWVsZE1hcDEiLCJyZWZlcmVuY2VkRnJhZ21lbnROYW1lczEiLCJyZWZlcmVuY2VkRnJhZ21lbnROYW1lczIiLCJyZWZlcmVuY2VkRnJhZ21lbnROYW1lMiIsInJlZmVyZW5jZWRGcmFnbWVudE5hbWUxIiwicGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUiLCJmaWVsZDEiLCJmaWVsZDIiLCJwYXJlbnRUeXBlMSIsIm5vZGUxIiwicGFyZW50VHlwZTIiLCJub2RlMiIsIm5hbWUxIiwibmFtZTIiLCJzdHJpbmdpZnlBcmd1bWVudHMiLCJ0eXBlMSIsInR5cGUyIiwiZG9UeXBlc0NvbmZsaWN0Iiwic2VsZWN0aW9uU2V0MSIsInNlbGVjdGlvblNldDIiLCJmcmFnbWVudE5hbWVzMSIsImZyYWdtZW50TmFtZXMyIiwiZmluZENvbmZsaWN0c0JldHdlZW5TdWJTZWxlY3Rpb25TZXRzIiwic3ViZmllbGRDb25mbGljdHMiLCJfZmllbGROb2RlJGFyZ3VtZW50cyIsImlucHV0T2JqZWN0V2l0aEFyZ3MiLCJjYWNoZWQiLCJub2RlQW5kRGVmcyIsIl9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyIsImZyYWdtZW50VHlwZSIsImlubGluZUZyYWdtZW50VHlwZSIsIl9kYXRhIiwiX3RoaXMkX2RhdGEkZ2V0IiwiZnJhZ1R5cGUiLCJwYXJlbnRUeXBlU3RyIiwiZnJhZ1R5cGVTdHIiLCJnZXRGcmFnbWVudFR5cGUiLCJjaGVja0V4dGVuc2lvbiIsImV4cGVjdGVkS2luZCIsImRlZktpbmRUb0V4dEtpbmQiLCJraW5kU3RyIiwiZXh0ZW5zaW9uS2luZFRvVHlwZU5hbWUiLCJhbGxUeXBlTmFtZXMiLCJQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZSIsInByb3ZpZGVkQXJncyIsImFyZ1R5cGVTdHIiLCJfc2NoZW1hJGdldERpcmVjdGl2ZXMiLCJyZXF1aXJlZEFyZ3NNYXAiLCJhcmdOb2RlcyIsImlzUmVxdWlyZWRBcmd1bWVudE5vZGUiLCJyZXF1aXJlZEFyZ3MiLCJfZGlyZWN0aXZlTm9kZSRhcmd1bWUiLCJfY29sbGVjdEZpZWxkcyIsImV4dHJhRmllbGRTZWxlY3Rpb25zIiwiY2hlY2tBcmdVbmlxdWVuZXNzIiwiY2hlY2tBcmdVbmlxdWVuZXNzUGVyRmllbGQiLCJfdHlwZU5vZGUkZmllbGRzIiwiX2ZpZWxkRGVmJGFyZ3VtZW50cyIsInBhcmVudE5hbWUiLCJzZWVuQXJncyIsIl9ncm91cEJ5IiwiX3BhcmVudE5vZGUkYXJndW1lbnRzIiwia25vd25EaXJlY3RpdmVOYW1lcyIsInVuaXF1ZURpcmVjdGl2ZU1hcCIsInR5cGVEaXJlY3RpdmVzTWFwIiwic2VlbkRpcmVjdGl2ZXMiLCJleGlzdGluZ1R5cGVNYXAiLCJrbm93blZhbHVlTmFtZXMiLCJjaGVja1ZhbHVlVW5pcXVlbmVzcyIsIl9ub2RlJHZhbHVlcyIsInZhbHVlTm9kZXMiLCJ2YWx1ZU5hbWVzIiwidmFsdWVEZWYiLCJrbm93bkZpZWxkTmFtZXMiLCJjaGVja0ZpZWxkVW5pcXVlbmVzcyIsIl9ub2RlJGZpZWxkcyIsImZpZWxkTmFtZXMiLCJoYXNGaWVsZCIsImtub3duRnJhZ21lbnROYW1lcyIsImtub3duTmFtZVN0YWNrIiwia25vd25OYW1lcyIsInByZXZLbm93bk5hbWVzIiwia25vd25PcGVyYXRpb25OYW1lcyIsImRlZmluZWRPcGVyYXRpb25UeXBlcyIsImV4aXN0aW5nT3BlcmF0aW9uVHlwZXMiLCJjaGVja09wZXJhdGlvblR5cGVzIiwiX25vZGUkb3BlcmF0aW9uVHlwZXMiLCJvcGVyYXRpb25UeXBlc05vZGVzIiwib3BlcmF0aW9uVHlwZSIsImFscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSIsImtub3duVHlwZU5hbWVzIiwiY2hlY2tUeXBlTmFtZSIsIl9vcGVyYXRpb25Ob2RlJHZhcmlhYiIsInNlZW5WYXJpYWJsZURlZmluaXRpb25zIiwidmFyaWFibGVOb2RlcyIsImlzVmFsaWRWYWx1ZU5vZGUiLCJmaWVsZE5vZGVNYXAiLCJ2YXJEZWZNYXAiLCJ2YXJEZWYiLCJhbGxvd2VkVmFyaWFibGVVc2FnZSIsInZhckRlZmF1bHRWYWx1ZSIsImxvY2F0aW9uRGVmYXVsdFZhbHVlIiwiaGFzTG9jYXRpb25EZWZhdWx0VmFsdWUiLCJudWxsYWJsZUxvY2F0aW9uVHlwZSIsImlucHV0T2JqZWN0RGVmIiwiaW5wdXRGaWVsZERlZiIsImVudW1WYWx1ZURlZiIsImVudW1UeXBlRGVmIiwiYXNzZXJ0VmFsaWRTREwiLCJhc3NlcnRWYWxpZFNETEV4dGVuc2lvbiIsInJ1bGVzIiwiX29wdGlvbnMkbWF4RXJyb3JzIiwiYWJvcnRPYmoiLCJoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwic3ltT2JqIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN5bXMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJoYXNUb1N0cmluZ1RhZyIsIiR0b1N0cmluZyIsImNhbGxCb3VuZCIsImlzU3RhbmRhcmRBcmd1bWVudHMiLCJpc0xlZ2FjeUFyZ3VtZW50cyIsImNhbGxlZSIsInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCJiYWRBcnJheUxpa2UiLCJpc0NhbGxhYmxlTWFya2VyIiwiZm5Ub1N0ciIsInJlZmxlY3RBcHBseSIsImNvbnN0cnVjdG9yUmVnZXgiLCJpc0VTNkNsYXNzRm4iLCJmblN0ciIsInRyeUZ1bmN0aW9uT2JqZWN0IiwiaXNJRTY4IiwiaXNEREEiLCJhbGwiLCJzdHJDbGFzcyIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiaXNGblJlZ2V4IiwiZ2VuZXJhdG9yRnVuYyIsImdldEdlbmVyYXRvckZ1bmMiLCJkZWZpbmUiLCJnZXRQb2x5ZmlsbCIsInNoaW0iLCJOYU4iLCJhdmFpbGFibGVUeXBlZEFycmF5cyIsImdPUEQiLCJnbG9iYWxUaGlzIiwidHlwZWRBcnJheXMiLCIkc2xpY2UiLCJ0b1N0clRhZ3MiLCJ0eXBlZEFycmF5Iiwic3VwZXJQcm90byIsImFueVRydWUiLCJnZXR0ZXIiLCJ0cnlUeXBlZEFycmF5cyIsIl9taW4iLCJkMCIsImQxIiwiZDIiLCJieCIsImF5IiwibGEiLCJsYiIsImQzIiwiZGQiLCJkeSIsImJ4MCIsImJ4MSIsImJ4MiIsImJ4MyIsInZlY3RvciIsImtleXNTaGltIiwiaXNBcmdzIiwiaXNFbnVtZXJhYmxlIiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiaXNBcmd1bWVudHMiLCJpc1N0cmluZyIsInRoZUtleXMiLCJza2lwUHJvdG8iLCJza2lwQ29uc3RydWN0b3IiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJvcmlnS2V5cyIsIm9yaWdpbmFsS2V5cyIsImtleXNXb3Jrc1dpdGhBcmd1bWVudHMiLCJhc3NlcnRQYXRoIiwibm9ybWFsaXplU3RyaW5nUG9zaXgiLCJhbGxvd0Fib3ZlUm9vdCIsImxhc3RTZWdtZW50TGVuZ3RoIiwibGFzdFNsYXNoIiwiZG90cyIsImxhc3RTbGFzaEluZGV4IiwibGFzdEluZGV4T2YiLCJwb3NpeCIsImN3ZCIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTZXBhcmF0b3IiLCJqb2luZWQiLCJyZWxhdGl2ZSIsImZyb21TdGFydCIsImZyb21FbmQiLCJmcm9tTGVuIiwidG9TdGFydCIsInRvTGVuIiwibGFzdENvbW1vblNlcCIsImZyb21Db2RlIiwib3V0IiwiX21ha2VMb25nIiwiZGlybmFtZSIsImhhc1Jvb3QiLCJtYXRjaGVkU2xhc2giLCJiYXNlbmFtZSIsImV4dElkeCIsImZpcnN0Tm9uU2xhc2hFbmQiLCJleHRuYW1lIiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsInBhdGhPYmplY3QiLCJkaXIiLCJfZm9ybWF0IiwicmV0IiwiZGVsaW1pdGVyIiwid2luMzIiLCJkZWNvZGUiLCJlbmNvZGUiLCJwYWlycyIsInBhcnNlciIsInBvcnQiLCJwcm90b2NvbCIsInFzIiwiY29udHJvbE9yV2hpdGVzcGFjZSIsIkNSSFRMRiIsInNsYXNoZXMiLCJwcm90b2NvbHJlIiwid2luZG93c0RyaXZlTGV0dGVyIiwidHJpbUxlZnQiLCJhZGRyZXNzIiwiaXNTcGVjaWFsIiwiaWdub3JlIiwibG9sY2F0aW9uIiwiZmluYWxkZXN0aW5hdGlvbiIsIlVybCIsImhyZWYiLCJzY2hlbWUiLCJleHRyYWN0UHJvdG9jb2wiLCJyZXN0IiwiZm9yd2FyZFNsYXNoZXMiLCJvdGhlclNsYXNoZXMiLCJzbGFzaGVzQ291bnQiLCJleHRyYWN0ZWQiLCJpbnN0cnVjdGlvbiIsImluc3RydWN0aW9ucyIsInVwIiwiaG9zdCIsImhvc3RuYW1lIiwiYXV0aCIsIm9yaWdpbiIsImlucyIsInJlYWRVSW50OCIsImlzQXJndW1lbnRzT2JqZWN0IiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIndoaWNoVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsIkJpZ0ludFN1cHBvcnRlZCIsIlN5bWJvbFN1cHBvcnRlZCIsIk9iamVjdFRvU3RyaW5nIiwibnVtYmVyVmFsdWUiLCJzdHJpbmdWYWx1ZSIsImJvb2xlYW5WYWx1ZSIsImJpZ0ludFZhbHVlIiwic3ltYm9sVmFsdWUiLCJjaGVja0JveGVkUHJpbWl0aXZlIiwicHJvdG90eXBlVmFsdWVPZiIsImlzTWFwVG9TdHJpbmciLCJpc1NldFRvU3RyaW5nIiwiaXNXZWFrTWFwVG9TdHJpbmciLCJpc1dlYWtTZXRUb1N0cmluZyIsImlzQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJ3b3JraW5nIiwiaXNEYXRhVmlld1RvU3RyaW5nIiwiaXNEYXRhVmlldyIsImlzVmlldyIsImlzVWludDhBcnJheSIsImlzVWludDhDbGFtcGVkQXJyYXkiLCJpc1VpbnQxNkFycmF5IiwiaXNVaW50MzJBcnJheSIsImlzSW50OEFycmF5IiwiaXNJbnQxNkFycmF5IiwiaXNJbnQzMkFycmF5IiwiaXNCaWdJbnQ2NEFycmF5IiwiaXNCaWdVaW50NjRBcnJheSIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsIlNoYXJlZEFycmF5QnVmZmVyQ29weSIsImlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzU2hhcmVkQXJyYXlCdWZmZXIiLCJpc0FzeW5jRnVuY3Rpb24iLCJpc01hcEl0ZXJhdG9yIiwiaXNTZXRJdGVyYXRvciIsImlzR2VuZXJhdG9yT2JqZWN0IiwiaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlIiwibWV0aG9kIiwiZGVzY3JpcHRvcnMiLCJmb3JtYXRSZWdFeHAiLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJ0cmFjZSIsImRlYnVncyIsImRlYnVnRW52UmVnZXgiLCJOT0RFX0RFQlVHIiwiZGVidWdFbnYiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiY29sb3JzIiwiaXNCb29sZWFuIiwiX2V4dGVuZCIsImlzVW5kZWZpbmVkIiwic3R5bGl6ZVdpdGhDb2xvciIsInN0eWxlVHlwZSIsInByaW1pdGl2ZSIsInNpbXBsZSIsImlzTnVtYmVyIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJhcnJheVRvSGFzaCIsImlzRXJyb3IiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsImZvcm1hdFByb3BlcnR5IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJhciIsInJlIiwicGFkIiwiZGVidWdsb2ciLCJwaWQiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiaXNQcmltaXRpdmUiLCJpc0J1ZmZlciIsIm1vbnRocyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJpbmhlcml0cyIsImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsImNhbGxiYWNraWZ5T25SZWplY3RlZCIsImNiIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5IiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicHJvbWlzZSIsInJlamVjdCIsImNhbGxiYWNraWZ5IiwiY2FsbGJhY2tpZmllZCIsIm1heWJlQ2IiLCJuZXh0VGljayIsInJlaiIsImZvdW5kTmFtZSIsInBvc3NpYmxlTmFtZXMiLCJOb25FcnJvclRocm93biIsInRocm93blZhbHVlIiwibG9jYXRlZEVycm9yIiwicmF3T3JpZ2luYWxFcnJvciIsInN5bnRheEVycm9yIiwiY2FjaGUwIiwiYTEiLCJhMiIsImEzIiwiY2FjaGUxIiwiY2FjaGUyIiwiZm5SZXN1bHQiLCJleGVDb250ZXh0IiwibWVtb2l6ZTMiLCJleGVjdXRlIiwicm9vdFZhbHVlIiwiYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMiLCJidWlsZEV4ZWN1dGlvbkNvbnRleHQiLCJleGVjdXRlT3BlcmF0aW9uIiwiZGF0YSIsImJ1aWxkUmVzcG9uc2UiLCJleGVjdXRlU3luYyIsInJhd1ZhcmlhYmxlVmFsdWVzIiwiX2RlZmluaXRpb24kbmFtZSIsIl9vcGVyYXRpb24kdmFyaWFibGVEZSIsImNvbnRleHRWYWx1ZSIsImZpZWxkUmVzb2x2ZXIiLCJ0eXBlUmVzb2x2ZXIiLCJzdWJzY3JpYmVGaWVsZFJlc29sdmVyIiwiY29lcmNlZFZhcmlhYmxlVmFsdWVzIiwiZGVmYXVsdEZpZWxkUmVzb2x2ZXIiLCJkZWZhdWx0VHlwZVJlc29sdmVyIiwicm9vdEZpZWxkcyIsImV4ZWN1dGVGaWVsZHMiLCJjYWxsYmFja0ZuIiwiaW5pdGlhbFZhbHVlIiwiYWNjdW11bGF0b3IiLCJyZXNvbHZlZCIsInByb21pc2VSZWR1Y2UiLCJleGVjdXRlRmllbGQiLCJyZXNvbHZlZFJlc3VsdCIsImV4ZWN1dGVGaWVsZHNTZXJpYWxseSIsImNvbnRhaW5zUHJvbWlzZSIsInJlc29sdmVkVmFsdWVzIiwicmVzb2x2ZWRPYmplY3QiLCJfZmllbGREZWYkcmVzb2x2ZSIsInJlc29sdmVGbiIsImJ1aWxkUmVzb2x2ZUluZm8iLCJjb21wbGV0ZWQiLCJjb21wbGV0ZVZhbHVlIiwicmF3RXJyb3IiLCJoYW5kbGVGaWVsZEVycm9yIiwiY29tcGxldGVkUmVzdWx0cyIsImNvbXBsZXRlZEl0ZW0iLCJjb21wbGV0ZUxpc3RWYWx1ZSIsInNlcmlhbGl6ZWRSZXN1bHQiLCJjb21wbGV0ZUxlYWZWYWx1ZSIsIl9yZXR1cm5UeXBlJHJlc29sdmVUeSIsInJlc29sdmVUeXBlRm4iLCJyZXNvbHZlZFJ1bnRpbWVUeXBlIiwiY29tcGxldGVPYmplY3RWYWx1ZSIsImVuc3VyZVZhbGlkUnVudGltZVR5cGUiLCJjb21wbGV0ZUFic3RyYWN0VmFsdWUiLCJydW50aW1lVHlwZU5hbWUiLCJyZXNvbHZlZElzVHlwZU9mIiwiaW52YWxpZFJldHVyblR5cGVFcnJvciIsInByb21pc2VkSXNUeXBlT2ZSZXN1bHRzIiwiaXNUeXBlT2ZSZXN1bHQiLCJpc1R5cGVPZlJlc3VsdHMiLCJncmFwaHFsIiwiZ3JhcGhxbEltcGwiLCJncmFwaHFsU3luYyIsInNjaGVtYVZhbGlkYXRpb25FcnJvcnMiLCJ2YWxpZGF0aW9uRXJyb3JzIiwidmVyc2lvbkluZm8iLCJwYXRjaCIsInByZVJlbGVhc2VUYWciLCJpc0FzeW5jSXRlcmFibGUiLCJtYXliZUFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhdG9yIiwibWFwQXN5bmNJdGVyYXRvciIsImFzeW5jIiwibWFwUmVzdWx0IiwicmV0dXJuIiwidGhyb3ciLCJyZXN1bHRPclN0cmVhbSIsImNyZWF0ZVNvdXJjZUV2ZW50U3RyZWFtIiwibWFwU291cmNlVG9SZXNwb25zZSIsInBheWxvYWQiLCJ0b05vcm1hbGl6ZWRBcmdzIiwiZXZlbnRTdHJlYW0iLCJfZmllbGREZWYkc3Vic2NyaWJlIiwiZXhlY3V0ZVN1YnNjcmlwdGlvbiIsImdldEludHJvc3BlY3Rpb25RdWVyeSIsIm9wdGlvbnNXaXRoRGVmYXVsdCIsImRlc2NyaXB0aW9ucyIsInNwZWNpZmllZEJ5VXJsIiwiZGlyZWN0aXZlSXNSZXBlYXRhYmxlIiwic2NoZW1hRGVzY3JpcHRpb24iLCJpbnB1dFZhbHVlRGVwcmVjYXRpb24iLCJpbnB1dERlcHJlY2F0aW9uIiwiZ2V0T3BlcmF0aW9uQVNUIiwiZ2V0T3BlcmF0aW9uUm9vdFR5cGUiLCJpbnRyb3NwZWN0aW9uRnJvbVNjaGVtYSIsIm9wdGlvbnNXaXRoRGVmYXVsdHMiLCJidWlsZENsaWVudFNjaGVtYSIsImludHJvc3BlY3Rpb24iLCJfX3NjaGVtYSIsInNjaGVtYUludHJvc3BlY3Rpb24iLCJ0eXBlSW50cm9zcGVjdGlvbiIsInNjYWxhckludHJvc3BlY3Rpb24iLCJvYmplY3RJbnRyb3NwZWN0aW9uIiwiYnVpbGRJbXBsZW1lbnRhdGlvbnNMaXN0IiwiYnVpbGRGaWVsZERlZk1hcCIsImludGVyZmFjZUludHJvc3BlY3Rpb24iLCJ1bmlvbkludHJvc3BlY3Rpb24iLCJ1bmlvbkludHJvc3BlY3Rpb25TdHIiLCJnZXRPYmplY3RUeXBlIiwiYnVpbGRVbmlvbkRlZiIsImVudW1JbnRyb3NwZWN0aW9uIiwiZW51bUludHJvc3BlY3Rpb25TdHIiLCJ2YWx1ZUludHJvc3BlY3Rpb24iLCJidWlsZEVudW1EZWYiLCJpbnB1dE9iamVjdEludHJvc3BlY3Rpb24iLCJpbnB1dE9iamVjdEludHJvc3BlY3Rpb25TdHIiLCJidWlsZElucHV0VmFsdWVEZWZNYXAiLCJidWlsZElucHV0T2JqZWN0RGVmIiwiYnVpbGRUeXBlIiwic3RkVHlwZSIsImRpcmVjdGl2ZUludHJvc3BlY3Rpb24iLCJkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyIiwidHlwZVJlZiIsIml0ZW1SZWYiLCJudWxsYWJsZVJlZiIsIm51bGxhYmxlVHlwZSIsImdldEludGVyZmFjZVR5cGUiLCJpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uIiwiaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvblN0ciIsImZpZWxkSW50cm9zcGVjdGlvbiIsImJ1aWxkRmllbGQiLCJmaWVsZEludHJvc3BlY3Rpb25TdHIiLCJpbnB1dFZhbHVlSW50cm9zcGVjdGlvbnMiLCJidWlsZElucHV0VmFsdWUiLCJpbnB1dFZhbHVlSW50cm9zcGVjdGlvbiIsImxleGljb2dyYXBoaWNTb3J0U2NoZW1hIiwic29ydEJ5TmFtZSIsInNvcnRUeXBlcyIsInNvcnRGaWVsZHMiLCJzb3J0T2JqTWFwIiwic29ydEJ5Iiwic29ydEFyZ3MiLCJtYXliZVR5cGUiLCJzb3J0VmFsdWVGbiIsInNvcnRlZE1hcCIsIm1hcFRvS2V5IiwicHJpbnRGaWx0ZXJlZFNjaGVtYSIsImlzRGVmaW5lZFR5cGUiLCJkaXJlY3RpdmVGaWx0ZXIiLCJwcmludFNjaGVtYURlZmluaXRpb24iLCJwcmludERpcmVjdGl2ZSIsImlzU2NoZW1hT2ZDb21tb25OYW1lcyIsInNjYWxhciIsInByaW50U2NhbGFyIiwicHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXMiLCJwcmludE9iamVjdCIsInByaW50SW50ZXJmYWNlIiwicHJpbnRVbmlvbiIsInByaW50RGVwcmVjYXRlZCIsInByaW50RW51bSIsInByaW50SW5wdXRWYWx1ZSIsInByaW50SW5wdXRPYmplY3QiLCJkZWZhdWx0QVNUIiwiYXJnRGVjbCIsImRvY3VtZW50cyIsImRvYyIsInNlcGFyYXRlT3BlcmF0aW9ucyIsIm9wZXJhdGlvbnMiLCJkZXBHcmFwaCIsImNvbGxlY3REZXBlbmRlbmNpZXMiLCJzZXBhcmF0ZWREb2N1bWVudEFTVHMiLCJkZXBlbmRlbmNpZXMiLCJjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyIsImNvbGxlY3RlZCIsImZyb21OYW1lIiwiaW1tZWRpYXRlRGVwcyIsInRvTmFtZSIsInN0cmlwSWdub3JlZENoYXJhY3RlcnMiLCJzb3VyY2VPYmoiLCJsZXhlciIsInN0cmlwcGVkQm9keSIsIndhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciIsImFkdmFuY2UiLCJUIiwiY3VycmVudFRva2VuIiwidG9rZW4iLCJ0b2tlbktpbmQiLCJpc05vblB1bmN0dWF0b3IiLCJ0b2tlbkJvZHkiLCJhc3NlcnRWYWxpZE5hbWUiLCJpc1ZhbGlkTmFtZUVycm9yIiwiQnJlYWtpbmdDaGFuZ2VUeXBlIiwiRGFuZ2Vyb3VzQ2hhbmdlVHlwZSIsImZpbmRCcmVha2luZ0NoYW5nZXMiLCJuZXdTY2hlbWEiLCJmaW5kU2NoZW1hQ2hhbmdlcyIsImZpbmREYW5nZXJvdXNDaGFuZ2VzIiwiZmluZFR5cGVDaGFuZ2VzIiwiZmluZERpcmVjdGl2ZUNoYW5nZXMiLCJzY2hlbWFDaGFuZ2VzIiwiZGlyZWN0aXZlc0RpZmYiLCJvbGREaXJlY3RpdmUiLCJESVJFQ1RJVkVfUkVNT1ZFRCIsInBlcnNpc3RlZCIsImFyZ3NEaWZmIiwibmV3QXJnIiwiYWRkZWQiLCJSRVFVSVJFRF9ESVJFQ1RJVkVfQVJHX0FEREVEIiwib2xkQXJnIiwiRElSRUNUSVZFX0FSR19SRU1PVkVEIiwiRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRCIsIkRJUkVDVElWRV9MT0NBVElPTl9SRU1PVkVEIiwidHlwZXNEaWZmIiwiVFlQRV9SRU1PVkVEIiwiZmluZEVudW1UeXBlQ2hhbmdlcyIsImZpbmRVbmlvblR5cGVDaGFuZ2VzIiwiZmluZElucHV0T2JqZWN0VHlwZUNoYW5nZXMiLCJmaW5kRmllbGRDaGFuZ2VzIiwiZmluZEltcGxlbWVudGVkSW50ZXJmYWNlc0NoYW5nZXMiLCJUWVBFX0NIQU5HRURfS0lORCIsInR5cGVLaW5kTmFtZSIsImZpZWxkc0RpZmYiLCJSRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRCIsIk9QVElPTkFMX0lOUFVUX0ZJRUxEX0FEREVEIiwib2xkRmllbGQiLCJGSUVMRF9SRU1PVkVEIiwiaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmciLCJGSUVMRF9DSEFOR0VEX0tJTkQiLCJwb3NzaWJsZVR5cGVzRGlmZiIsIm5ld1Bvc3NpYmxlVHlwZSIsIlRZUEVfQURERURfVE9fVU5JT04iLCJvbGRQb3NzaWJsZVR5cGUiLCJUWVBFX1JFTU9WRURfRlJPTV9VTklPTiIsInZhbHVlc0RpZmYiLCJWQUxVRV9BRERFRF9UT19FTlVNIiwib2xkVmFsdWUiLCJWQUxVRV9SRU1PVkVEX0ZST01fRU5VTSIsImludGVyZmFjZXNEaWZmIiwibmV3SW50ZXJmYWNlIiwiSU1QTEVNRU5URURfSU5URVJGQUNFX0FEREVEIiwib2xkSW50ZXJmYWNlIiwiSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQiLCJmaW5kQXJnQ2hhbmdlcyIsImlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQiLCJBUkdfUkVNT1ZFRCIsIkFSR19ERUZBVUxUX1ZBTFVFX0NIQU5HRSIsIm9sZFZhbHVlU3RyIiwic3RyaW5naWZ5VmFsdWUiLCJuZXdWYWx1ZVN0ciIsIkFSR19DSEFOR0VEX0tJTkQiLCJSRVFVSVJFRF9BUkdfQURERUQiLCJPUFRJT05BTF9BUkdfQURERUQiLCJvbGRBcnJheSIsIm5ld0FycmF5Iiwib2xkTWFwIiwibmV3TWFwIiwib2xkSXRlbSIsIm5ld0l0ZW0iLCJMZXhlciIsInN0YXJ0T2ZGaWxlVG9rZW4iLCJsYXN0VG9rZW4iLCJsaW5lU3RhcnQiLCJsb29rYWhlYWQiLCJuZXh0VG9rZW4iLCJyZWFkTmV4dFRva2VuIiwiaXNQdW5jdHVhdG9yVG9rZW5LaW5kIiwiaXNVbmljb2RlU2NhbGFyVmFsdWUiLCJpc1N1cHBsZW1lbnRhcnlDb2RlUG9pbnQiLCJpc0xlYWRpbmdTdXJyb2dhdGUiLCJpc1RyYWlsaW5nU3Vycm9nYXRlIiwicHJpbnRDb2RlUG9pbnRBdCIsImNyZWF0ZVRva2VuIiwiY29sIiwiYm9keUxlbmd0aCIsInJlYWRDb21tZW50IiwicmVhZEJsb2NrU3RyaW5nIiwicmVhZFN0cmluZyIsInJlYWROdW1iZXIiLCJyZWFkTmFtZSIsImZpcnN0Q29kZSIsImlzRmxvYXQiLCJyZWFkRGlnaXRzIiwiY2h1bmtTdGFydCIsInJlYWRFc2NhcGVkVW5pY29kZVZhcmlhYmxlV2lkdGgiLCJyZWFkRXNjYXBlZFVuaWNvZGVGaXhlZFdpZHRoIiwicmVhZEVzY2FwZWRDaGFyYWN0ZXIiLCJwb2ludCIsInJlYWRIZXhEaWdpdCIsInJlYWQxNkJpdEhleENvZGUiLCJ0cmFpbGluZ0NvZGUiLCJjdXJyZW50TGluZSIsImJsb2NrTGluZXMiLCJQYXJzZXIiLCJwYXJzZURvY3VtZW50IiwiZXhwZWN0VG9rZW4iLCJwYXJzZVZhbHVlTGl0ZXJhbCIsInBhcnNlQ29uc3RWYWx1ZSIsInBhcnNlQ29uc3RWYWx1ZUxpdGVyYWwiLCJwYXJzZVR5cGVSZWZlcmVuY2UiLCJfbGV4ZXIiLCJfb3B0aW9ucyIsIl90b2tlbkNvdW50ZXIiLCJwYXJzZU5hbWUiLCJtYW55IiwicGFyc2VEZWZpbml0aW9uIiwicGVlayIsInBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbiIsImhhc0Rlc2NyaXB0aW9uIiwicGVla0Rlc2NyaXB0aW9uIiwia2V5d29yZFRva2VuIiwicGFyc2VTY2hlbWFEZWZpbml0aW9uIiwicGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbiIsInBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24iLCJwYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uIiwicGFyc2VVbmlvblR5cGVEZWZpbml0aW9uIiwicGFyc2VFbnVtVHlwZURlZmluaXRpb24iLCJwYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24iLCJwYXJzZURpcmVjdGl2ZURlZmluaXRpb24iLCJwYXJzZUZyYWdtZW50RGVmaW5pdGlvbiIsInBhcnNlVHlwZVN5c3RlbUV4dGVuc2lvbiIsInVuZXhwZWN0ZWQiLCJwYXJzZU9wZXJhdGlvblR5cGUiLCJwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMiLCJwYXJzZURpcmVjdGl2ZXMiLCJvcGVyYXRpb25Ub2tlbiIsIm9wdGlvbmFsTWFueSIsInBhcnNlVmFyaWFibGVEZWZpbml0aW9uIiwicGFyc2VWYXJpYWJsZSIsImV4cGVjdE9wdGlvbmFsVG9rZW4iLCJwYXJzZUNvbnN0RGlyZWN0aXZlcyIsInBhcnNlU2VsZWN0aW9uIiwicGFyc2VGcmFnbWVudCIsInBhcnNlRmllbGQiLCJuYW1lT3JBbGlhcyIsImlzQ29uc3QiLCJwYXJzZUNvbnN0QXJndW1lbnQiLCJwYXJzZUFyZ3VtZW50IiwiaGFzVHlwZUNvbmRpdGlvbiIsImV4cGVjdE9wdGlvbmFsS2V5d29yZCIsInBhcnNlRnJhZ21lbnROYW1lIiwicGFyc2VOYW1lZFR5cGUiLCJleHBlY3RLZXl3b3JkIiwiYWxsb3dMZWdhY3lGcmFnbWVudFZhcmlhYmxlcyIsInBhcnNlTGlzdCIsInBhcnNlT2JqZWN0IiwiYWR2YW5jZUxleGVyIiwicGFyc2VTdHJpbmdMaXRlcmFsIiwiYW55IiwicGFyc2VPYmplY3RGaWVsZCIsInBhcnNlRGlyZWN0aXZlIiwicGFyc2VEZXNjcmlwdGlvbiIsInBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24iLCJwYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzIiwicGFyc2VGaWVsZHNEZWZpbml0aW9uIiwiZGVsaW1pdGVkTWFueSIsInBhcnNlRmllbGREZWZpbml0aW9uIiwicGFyc2VBcmd1bWVudERlZnMiLCJwYXJzZUlucHV0VmFsdWVEZWYiLCJwYXJzZVVuaW9uTWVtYmVyVHlwZXMiLCJwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uIiwicGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uIiwicGFyc2VFbnVtVmFsdWVOYW1lIiwiZ2V0VG9rZW5EZXNjIiwicGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24iLCJwYXJzZVNjaGVtYUV4dGVuc2lvbiIsInBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbiIsInBhcnNlT2JqZWN0VHlwZUV4dGVuc2lvbiIsInBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiIsInBhcnNlVW5pb25UeXBlRXh0ZW5zaW9uIiwicGFyc2VFbnVtVHlwZUV4dGVuc2lvbiIsInBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIiwicGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMiLCJwYXJzZURpcmVjdGl2ZUxvY2F0aW9uIiwiZ2V0VG9rZW5LaW5kRGVzYyIsImF0VG9rZW4iLCJvcGVuS2luZCIsInBhcnNlRm4iLCJjbG9zZUtpbmQiLCJkZWxpbWl0ZXJLaW5kIiwibWF4VG9rZW5zIiwiaXNTb3VyY2UiLCJUb2tlbktpbmQiLCJlbXB0eVNjaGVtYUNvbmZpZyIsInN0ZERpcmVjdGl2ZSIsImV4dGVuZGVkQ29uZmlnIiwiZXh0ZW5kU2NoZW1hSW1wbCIsIl9zY2hlbWFEZWYiLCJfc2NoZW1hRGVmJGRlc2NyaXB0aW8iLCJfc2NoZW1hRGVmMiIsIl9vcHRpb25zJGFzc3VtZVZhbGlkIiwidHlwZUV4dGVuc2lvbnNNYXAiLCJkaXJlY3RpdmVEZWZzIiwiZXhpc3RpbmdUeXBlRXh0ZW5zaW9ucyIsIl90eXBlRXh0ZW5zaW9uc01hcCRjbzIiLCJleHRlbnNpb25Ob2RlIiwiX2dldFNwZWNpZmllZEJ5VVJMIiwiZ2V0U3BlY2lmaWVkQnlVUkwiLCJleHRlbmRTY2FsYXJUeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvMyIsImJ1aWxkSW50ZXJmYWNlcyIsImV4dGVuZEZpZWxkIiwiYnVpbGRGaWVsZE1hcCIsImV4dGVuZE9iamVjdFR5cGUiLCJfdHlwZUV4dGVuc2lvbnNNYXAkY280IiwiZXh0ZW5kSW50ZXJmYWNlVHlwZSIsIl90eXBlRXh0ZW5zaW9uc01hcCRjbzUiLCJidWlsZFVuaW9uVHlwZXMiLCJleHRlbmRVbmlvblR5cGUiLCJfdHlwZUV4dGVuc2lvbnNNYXAkdHkiLCJidWlsZEVudW1WYWx1ZU1hcCIsImV4dGVuZEVudW1UeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvIiwiYnVpbGRJbnB1dEZpZWxkTWFwIiwiZXh0ZW5kSW5wdXRPYmplY3RUeXBlIiwiX3N0ZFR5cGVNYXAkbmFtZSIsInN0ZFR5cGVNYXAiLCJnZXRPcGVyYXRpb25UeXBlcyIsImV4dGVuZEFyZyIsIl9ub2RlJGRlc2NyaXB0aW9uIiwiYnVpbGRBcmd1bWVudE1hcCIsIm9wVHlwZXMiLCJfc3RkVHlwZU1hcCRuYW1lMiIsImdldFdyYXBwZWRUeXBlIiwiZmllbGRDb25maWdNYXAiLCJub2RlRmllbGRzIiwiX2ZpZWxkJGRlc2NyaXB0aW9uIiwiZ2V0RGVwcmVjYXRpb25SZWFzb24iLCJhcmdDb25maWdNYXAiLCJfYXJnJGRlc2NyaXB0aW9uIiwiaW5wdXRGaWVsZE1hcCIsIl9ub2RlJGZpZWxkczIiLCJmaWVsZHNOb2RlcyIsIl9maWVsZCRkZXNjcmlwdGlvbjIiLCJlbnVtVmFsdWVNYXAiLCJfdmFsdWUkZGVzY3JpcHRpb24iLCJfbm9kZSRpbnRlcmZhY2VzJG1hcCIsIl9ub2RlJGludGVyZmFjZXMiLCJfbm9kZSR0eXBlcyRtYXAiLCJfbm9kZSR0eXBlcyIsIl90eXBlRXh0ZW5zaW9uc01hcCRuYSIsIl9hc3ROb2RlJGRlc2NyaXB0aW9uIiwiX2FzdE5vZGUkZGVzY3JpcHRpb24yIiwiX2FzdE5vZGUkZGVzY3JpcHRpb24zIiwiX2FzdE5vZGUkZGVzY3JpcHRpb240IiwiX2FzdE5vZGUkZGVzY3JpcHRpb241IiwiX2FzdE5vZGUkZGVzY3JpcHRpb242IiwiZGVwcmVjYXRlZCIsInNwZWNpZmllZEJ5IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJIVFRQRXJyb3IiLCJzdGF0dXMiLCJiYXNlTWVzc2FnZSIsIm5vbkVtcHR5Iiwia1BhdHRlcm5SZWdleCIsIlBhdHRlcm4iLCJOb25QYXR0ZXJuIiwiZXhwYW5kIiwidXNlciIsIkRvbGxhclBhdHRlcm4iLCJleHByIiwibm9uZSIsIkNvbXBpbGVQYXR0ZXJucyIsIkNvbXBpbGVQYXR0ZXJuIiwiTWF0Y2giLCJwYXR0ZXJucyIsInBhdCIsIkFsbG93IiwiQWxsb3dBZG1pbk9ubHkiLCJhdXRob3JpemUiLCJpc0FkbWluIiwiQWxsb3dBbnlvbmUiLCJBbGxvd0J5Q29uZmlnIiwidXNlcnMiLCJyb2xlcyIsImRlZmF1bHRDb2xsZWN0aW9uIiwiTWF0Y2gxIiwiQ29tcGlsZUFsbG93IiwibGVuaWVudCIsImNoZWNrTjFRTCIsInJldGhyb3ciLCJmbk5hbWUiLCJDb21waWxlRm4iLCJmbkNvbmZpZyIsImRiIiwiYWxsb3ciLCJjaGVja0FyZ3MiLCJwYXJhbWV0ZXJzIiwicGFyYW1TZXQiLCJwYXJhbSIsIm5QYXJhbXMiLCJhcmdOYW1lcyIsIkNvbXBpbGVQYXJhbXMiLCJuMXFsIiwiZGVidWciLCJtdXRhdGluZyIsImNvbXBpbGVUb0pTIiwiQmVnaW5SZWFkT25seSIsIkVuZFJlYWRPbmx5IiwiQ29tcGlsZVJlc29sdmVyIiwicmV0dXJuc0dyYXBoUUxMaXN0IiwicmV0dXJuc0dyYXBoUUxTY2FsYXIiLCJyb3ciLCJjb2xzIiwic2VsIiwidXBncmFkZUluZm8iLCJDb21waWxlVHlwZU5hbWVSZXNvbHZlciIsIkNvbXBpbGVFbnRpdHlSZWZlcmVuY2VSZXNvbHZlciIsIm5BcmdzIiwiRGF0YWJhc2VJbXBsIiwidXBzdHJlYW0iLCJzdXBlclVzZXIiLCJVc2VySW1wbCIsInN1cGVyVXNlckNvbnRleHQiLCJDb250ZXh0SW1wbCIsImNvbmZpZ3VyZSIsIkVycm9yTGlzdCIsIm5GdW5jcyIsIm1heFNpemUiLCJtYXhfY29kZV9zaXplIiwiY29tcGxhaW4iLCJ0cnkiLCJtYXhfZnVuY3Rpb25fY291bnQiLCJtYXhfc2NoZW1hX3NpemUiLCJrRmVkZXJhdGlvbkltcG9ydHNTdHIiLCJjcmVhdGVBcG9sbG9SZXNvbHZlck1hcCIsImNvbmZpZ3VyZVJlc29sdmVycyIsInJlbWFpbmluZ1Jlc29sdmVycyIsIm1heF9yZXNvbHZlcl9jb3VudCIsInNjaGVtYUZpZWxkcyIsImNhbkFkZFJlc29sdmVyIiwic2NoZW1hRmllbGQiLCJpZlR5cGUiLCJyZXNvbHZlUmVmIiwicmVzb2x2ZXJGbiIsIm1ha2VDb250ZXh0IiwiY3JlZGVudGlhbHMiLCJtdXRhdGlvbkFsbG93ZWQiLCJnZXRGdW5jdGlvbiIsImNhbGxGdW5jdGlvbiIsImRvY0lEIiwic2F2ZSIsInJldklEIiwiYWRtaW4iLCJyZWFkT25seUxldmVsIiwiY2hlY2tVc2VyIiwicmVxdWlyZVVzZXIiLCJjaGVja0FkbWluIiwicmVxdWlyZUFkbWluIiwiY2hlY2tSb2xlIiwicm9sZSIsIm15Um9sZSIsInJlcXVpcmVSb2xlIiwiY2hlY2tBY2Nlc3MiLCJjaGFubmVsIiwibXlDaGFubmVsIiwicmVxdWlyZUFjY2VzcyIsImNoZWNrQWxsb3dlZCIsInJlcXVpcmVBbGxvd2VkIiwiY2hlY2tNdXRhdGluZyIsInJlcXVpcmVNdXRhdGluZyIsImlzU3VwZXJVc2VyIiwiQ1JVREltcGwiLCJjb2xsZWN0aW9uTmFtZSIsImNhbk11dGF0ZSIsImRvY09ySUQiLCJfcmV2IiwiQ2FsbERlcHRoIiwiZnVuY3Rpb24iLCJhZ2FpbnN0IiwiVXBzdHJlYW1OYXRpdmVJbXBsIiwibmF0aXZlIiwianJlc3VsdCIsInBhcnNlRG9jIiwianNvbiIsIkFQSSIsImNvbmZpZ0pTT04iLCJNYWtlRGF0YWJhc2UiLCJhcmdzSlNPTiIsInZhcmlhYmxlc0pTT04iLCJ2YXJzIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=